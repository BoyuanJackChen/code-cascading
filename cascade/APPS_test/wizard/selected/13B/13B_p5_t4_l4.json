[
    {
        "number": 4000,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    def dfs(u: int, visited: set, count: int, res: int) -> int:\n        visited.add(u)\n        for v in range(1, n + 1):\n            if v not in visited and (u, v) in edges:\n                count = dfs(v, visited, count + 1, res)\n                res = max(res, count)\n        return res\n\n    a = 1\n    b = max(range(1, n + 1), key=lambda x: dfs(x, {a}, 0, 0))\n    c = max(range(1, n + 1), key=lambda x: dfs(x, {b}, 0, 0))\n\n    count = max(dfs(a, {b, c}, 0, 0), dfs(b, {a, c}, 0, 0), dfs(c, {a, b}, 0, 0))\n\n    return f\"{count}\\n{a} {b} {c}\"\n",
        "test": "assert solution(\"5\\n1 2\\n1 3\\n1 4\\n1 5\\n\") == \"2\\n1 4 5\\n\"  # another correct answer",
        "num_ids": 2925
    },
    {
        "number": 4001,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, divisors = stdin.split('\\n')\n    n = int(n)\n    divisors = list(map(int, divisors.split()))\n    x_divisors = []\n    y_divisors = []\n\n    for i in range(0, len(divisors), 2):\n        if divisors[i] == divisors[i + 1]:\n            x_divisors.append(divisors[i])\n            y_divisors.append(divisors[i + 1])\n\n    x = 1\n    y = 1\n\n    for divisor in x_divisors:\n        x *= divisor\n\n    for divisor in y_divisors:\n        y *= divisor\n\n    return f\"{x} {y}\"",
        "test": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\\n\" ",
        "num_ids": 1452
    },
    {
        "number": 4002,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n\n    max_sum = -1\n    for row in matrix:\n        row.sort(reverse=True)\n        row_sum = sum(row[:m//2])\n        if row_sum % k == 0 and row_sum > max_sum:\n            max_sum = row_sum\n\n    return str(max_sum)\n",
        "test": "assert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\" ",
        "num_ids": 1523
    },
    {
        "number": 4003,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n\n    def dfs(start, end, path, max_path):\n        if start > end:\n            return\n        for i in range(start, end + 1):\n            if i == start or a[i] > a[i - 1]:\n                dfs(i + 1, end, path + 'R', max_path)\n                if len(max_path) < len(path) + 1:\n                    max_path = path + 'R'\n            else:\n                dfs(start, i - 1, path + 'L', max_path)\n                if len(max_path) < len(path) + 1:\n                    max_path = path + 'L'\n        return max_path\n\n    max_path = dfs(0, len(a) - 1, '', '')\n    return str(len(max_path)) + '\\n' + max_path\n\ninputs = [\n    \"5\\n1 2 4 3 2\",\n    \"7\\n1 3 5 6 5 4 2\",\n    \"3\\n2 2 2\",\n    \"4\\n1 2 4 3\"\n]\n\nfor input in inputs:\n    print(solution(input)) ",
        "test": "assert solution(\"3\\n2 2 2\") == \"1\\nR\"",
        "num_ids": 1611
    },
    {
        "number": 4004,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    arr = list(map(int, stdin.splitlines()[1].split()))\n    \n    if len(arr) != n:\n        return \"-1\"\n    \n    min_value = min(arr)\n    max_value = max(arr)\n    target = max_value - min_value\n    \n    if target == 0:\n        return str(0)\n    \n    for i in range(target + 1):\n        temp = [num + i for num in arr]\n        if len(set(temp)) == 1:\n            return str(i)\n    \n    return \"-1\"",
        "test": "assert solution(\"4\\n1 3 3 7\") == \"-1\"",
        "num_ids": 1134
    },
    {
        "number": 4005,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    def is_visible(white: Tuple[int, int, int, int], black1: Tuple[int, int, int, int], black2: Tuple[int, int, int, int]) -> bool:\n        x1, y1, x2, y2 = white\n        x3, y3, x4, y4 = black1\n        x5, y5, x6, y6 = black2\n        \n        # Check if any part of the white sheet is visible\n        if x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4:\n            return True\n        if x1 < x5 and x2 > x6 and y1 < y5 and y2 > y6:\n            return True\n        \n        # Check if any corner of the white sheet is inside the black sheets\n        if (x1 <= x3 <= x2 or x1 <= x4 <= x2) and (y1 <= y3 <= y2 or y1 <= y4 <= y2):\n            return True\n        if (x1 <= x5 <= x2 or x1 <= x6 <= x2) and (y1 <= y5 <= y2 or y1 <= y6 <= y2):\n            return True\n        \n        # Check if any point of the white sheet is inside the black sheets\n        if (x1 <= x3 <= x2 and y1 <= y3 <= y2) or (x1 <= x4 <= x2 and y1 <= y4 <= y2):\n            return True\n        if (x1 <= x5 <= x2 and y1 <= y5 <= y2) or (x1 <= x6 <= x2 and y1 <= y6 <= y2):\n            return True\n        \n        return False\n\n    input_values = [int(x) for x in stdin.split()]\n    white = (input_values[0], input_values[1], input_values[2], input_values[3])\n    black1 = (input_values[4], input_values[5], input_values[6], input_values[7])\n    black2 = (input_values[8], input_values[9], input_values[10], input_values[11])\n    \n    return \"YES\" if is_visible(white, black1, black2) else \"NO\"\n",
        "test": "assert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == \"YES\"",
        "num_ids": 2543
    },
    {
        "number": 4006,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if i <= 1:\n            continue\n        x = i\n        while x != 1:\n            if x % 10 == 0:\n                x //= 10\n            else:\n                break\n        if x == 1:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"10\") == \"19\"",
        "num_ids": 830
    },
    {
        "number": 4007,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    friend_gifts = list(map(int, stdin.readline().strip().split()))\n    \n    friends_to_give_to = []\n    for i in range(n):\n        if friend_gifts[i] == 0:\n            friends_to_give_to.append(i + 1)\n    \n    given_to = [0] * n\n    received_from = [0] * n\n    for i in range(n):\n        if friend_gifts[i] != 0:\n            friend_to_give_to = friend_gifts[i] - 1\n            given_to[i] = friend_to_give_to\n            received_from[friend_to_give_to] = i\n    \n    if len(friends_to_give_to) != n - len(set(received_from)):\n        raise ValueError(\"There is no solution.\")\n    \n    for i in range(n):\n        if given_to[i] == 0:\n            friend_to_give_to = friends_to_give_to.pop(0)\n            given_to[i] = friend_to_give_to\n            received_from[friend_to_give_to] = i\n    \n    return \" \".join(map(str, [n * i + friend_gifts[i] for i in range(n)]))",
        "test": "assert solution(\"5\\n2 1 0 0 0\") == \"5 2 1 4 3\\n\" ",
        "num_ids": 2812
    },
    {
        "number": 4008,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # Check if there are enough colors\n    if k < n:\n        return \"NO\"\n\n    # Assign colors to the elements\n    color_count = [0] * k\n    for i in range(n):\n        for j in range(k):\n            if j + 1 not in a:\n                color_count[j] += 1\n                a[i] = j + 1\n                break\n\n    # Check if each color has at least one element\n    for count in color_count:\n        if count == 0:\n            return \"NO\"\n\n    # If everything is okay, print the coloring\n    return \"YES\" + \" \" + \" \".join(map(str, a))\n",
        "test": "assert solution(\"5 2\\n2 1 1 2 1\") == \"NO\" ",
        "num_ids": 1620
    },
    {
        "number": 4009,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = stdin.strip()\n\n    remainder = int(num[:x]) % (10 ** x)\n    operations = 0\n\n    if remainder < 10 ** y:\n        operations += (10 ** y - remainder) // 10 ** (x - 1)\n\n    return str(operations)\n",
        "test": "assert solution('11 5 1\\n11010100101') == '3' ",
        "num_ids": 1388
    },
    {
        "number": 4010,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n\n        for i in range(n - 2):\n            if a[i] == a[i + 1] == a[i + 2]:\n                print(\"YES\")\n                break\n        else:\n            print(\"NO\")",
        "test": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\\n\" ",
        "num_ids": 1317
    },
    {
        "number": 4011,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = input()\n    mapping = list(map(int, input().split()))\n\n    max_number = \"\"\n    max_value = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            subsegment = a[i:j + 1]\n            new_value = int(\"\".join(str(mapping[int(digit) - 1]) for digit in subsegment))\n            if new_value > max_value:\n                max_value = new_value\n                max_number = subsegment\n    return str(max_value)",
        "test": "assert solution(\"2\\n33\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\") == \"33\" ",
        "num_ids": 1717
    },
    {
        "number": 4012,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    def min_operations(a: int, b: int, c: int) -> int:\n        if b % a != 0:\n            b += a - (b % a)\n        if c % b != 0:\n            c += b - (c % b)\n        return b - a\n\n    t = int(stdin.readline())\n    res = []\n\n    for _ in range(t):\n        a, b, c = map(int, stdin.readline().split())\n        min_ops = min_operations(a, b, c)\n        res.append((min_ops, a, b, c))\n\n    for r in res:\n        print(r[0])\n        print(r[1], r[2], r[3])",
        "test": "assert solution(\"8\\n1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\\n\" ",
        "num_ids": 2455
    },
    {
        "number": 4013,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    min_instability = float(\"inf\")\n    for i in range(n):\n        new_a = a[:i] + a[i+1:]\n        instability = max(new_a) - min(new_a)\n        min_instability = min(min_instability, instability)\n    \n    return str(min_instability)",
        "test": "assert solution(\"4\\n1 3 3 7\") == \"2\"",
        "num_ids": 760
    },
    {
        "number": 4014,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, stdin.split()[3*i+2:3*i+5])\n        exams.append((s, d, c))\n\n    # Check if it's possible to pass all exams\n    possible = True\n    for i in range(m):\n        for j in range(i+1, m):\n            if (exams[i][1] - exams[i][0] + 1) + (exams[j][1] - exams[j][0] + 1) > n:\n                possible = False\n                break\n        if not possible:\n            break\n\n    if not possible:\n        return \"-1\"\n\n    # Create a schedule\n    schedule = [0] * (n + 1)\n    for i in range(m):\n        s, d, c = exams[i]\n        schedule[s-1] = i+1\n        for j in range(s, d):\n            schedule[j] = i+1\n        schedule[d-1] = 0\n\n    # Check if the schedule is valid\n    for i in range(n):\n        if schedule[i] > 0 and schedule[i+1] > 0:\n            return \"-1\"\n\n    # Convert the schedule to the required format\n    result = []\n    for i in range(n):\n        if schedule[i] > 0:\n            result.append(schedule[i])\n        else:\n            result.append(0)\n    return \" \".join(map(str, result))",
        "test": "assert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"",
        "num_ids": 2201
    },
    {
        "number": 4015,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    if n > m:\n        return \"-1\"\n\n    count = 0\n    while n != m:\n        if n < m:\n            if m % 3 == 0:\n                n *= 3\n                count += 1\n            else:\n                n *= 2\n                count += 1\n        else:\n            if n % 2 == 0:\n                n //= 2\n                count += 1\n            else:\n                return \"-1\"\n\n    return str(count)\n",
        "test": "assert solution(\"42 42\") == \"0\"",
        "num_ids": 809
    },
    {
        "number": 4016,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.split('\\n')[-1]\n    \n    if n == 1:\n        return t * k\n    \n    s = t\n    for i in range(k - 1):\n        s += t\n        \n    return s\n    \ninput_str = input()\nprint(solution(input_str)) ",
        "test": "assert solution(\"3 2\\ncat\") == \"catcat\" ",
        "num_ids": 588
    },
    {
        "number": 4017,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    nice_indices = []\n    \n    for i in range(n):\n        new_array = a[:i] + a[i+1:]\n        if sum(new_array) == sum(new_array) - a[i]:\n            nice_indices.append(i+1)\n    \n    result = \"\"\n    if len(nice_indices) == 0:\n        result += \"0\\n\"\n    else:\n        result += str(len(nice_indices)) + \"\\n\"\n        result += \" \".join(map(str, nice_indices)) + \"\\n\"\n    \n    return result",
        "test": "assert solution(\"5\\n2 1 2 4 3\\n\") == \"0\\n\" ",
        "num_ids": 1256
    },
    {
        "number": 4018,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(input())\n\n    def subseq(i, j):\n        if i == j:\n            return set([s[i:j+1]])\n        return set(subseq(i, k) for k in range(j, i-1, -1))\n\n    def cost(t):\n        return n - len(t)\n\n    def is_valid(i, j, t):\n        if i == j:\n            return True\n        return i in t or j in t\n\n    def min_cost(i, j, t, visited):\n        if (i, j, tuple(sorted(t))) in visited:\n            return visited[(i, j, tuple(sorted(t)))]\n        if len(t) == k:\n            visited[(i, j, tuple(sorted(t)))] = cost(t)\n            return visited[(i, j, tuple(sorted(t)))]\n        min_c = float('inf')\n        for sub in subseq(i, j):\n            for t_new in set(t):\n                if is_valid(sub[0], sub[-1], t_new):\n                    min_c = min(min_c, min_cost(i, j, t_new | sub, visited))\n        visited[(i, j, tuple(sorted(t)))] = min_c\n        return visited[(i, j, tuple(sorted(t)))]\n\n    visited = {}\n    result = min_cost(0, len(s) - 1, set(), visited)\n    return result if result != float('inf') else -1",
        "test": "assert solution(\"10 100\\najihiushda\") == \"233\" ",
        "num_ids": 1403
    },
    {
        "number": 4019,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    def read_input(stdin: str):\n        n, m, D = map(int, stdin.split()[:3])\n        edges = []\n        for line in stdin.split('\\n')[3:]:\n            if line:\n                v, u = map(int, line.split())\n                edges.append((v, u))\n        return n, m, D, edges\n\n    def spanning_tree(n, m, D, edges):\n        # Create an adjacency list for the graph\n        adj_list = [[] for _ in range(n)]\n        for v, u in edges:\n            adj_list[v - 1].append(u - 1)\n            adj_list[u - 1].append(v - 1)\n\n        def dfs(start, visited, parent):\n            visited[start] = True\n            for u in adj_list[start]:\n                if not visited[u]:\n                    if dfs(u, visited, start):\n                        return True\n                elif u != parent:\n                    return True\n            return False\n\n        visited = [False] * n\n        for i in range(n):\n            if not visited[i]:\n                if dfs(i, visited, -1) or D != 1:\n                    return False\n        return True\n\n    n, m, D, edges = read_input(stdin)\n    if spanning_tree(n, m, D, edges):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\" ",
        "num_ids": 2572
    },
    {
        "number": 4020,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1 = [int(x) for x in stdin.split()[0].split(':')]\n    h_2, m_2 = [int(x) for x in stdin.split()[1].split(':')]\n\n    total_minutes = (h_2 - h_1) * 60 + (m_2 - m_1)\n    midpoint = total_minutes // 2\n\n    h_3 = h_1 + midpoint // 60\n    m_3 = (midpoint % 60)\n\n    return f\"{h_3:02d}:{m_3:02d}\"",
        "test": "assert solution(\"10:00\\n11:00\") == \"10:30\"",
        "num_ids": 1250
    },
    {
        "number": 4021,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(int(a**0.5))",
        "test": "assert solution(\"2\") == \"1\"",
        "num_ids": 440
    },
    {
        "number": 4022,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    segments = []\n\n    for i in range(n):\n        l, r = map(int, stdin.split('\\n')[i + 1].split())\n        segments.append((l, r))\n\n    def find_intersection(segments):\n        result = []\n        for i in range(len(segments)):\n            for j in range(i + 1, len(segments)):\n                l1, r1 = segments[i]\n                l2, r2 = segments[j]\n                if r1 < l2 or r2 < l1:\n                    continue\n                intersection = max(l1, l2), min(r1, r2)\n                result.append(intersection)\n        return result\n\n    max_length = 0\n    for i in range(len(segments)):\n        remaining_segments = segments[:i] + segments[i + 1:]\n        intersection = find_intersection(remaining_segments)\n        length = sum(r - l for l, r in intersection)\n        max_length = max(max_length, length)\n\n    return str(max_length)",
        "test": "assert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"",
        "num_ids": 1696
    },
    {
        "number": 4023,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    wall_heights = list(map(int, stdin.splitlines()[1].split()))\n    \n    for i in range(n):\n        if wall_heights[i] > 10**9:\n            return \"NO\"\n    \n    wall_heights.sort()\n    min_height = wall_heights[0]\n    max_height = wall_heights[-1]\n    \n    if max_height - min_height > 1:\n        return \"NO\"\n    \n    for i in range(1, n):\n        if wall_heights[i] - wall_heights[i-1] > 1:\n            return \"NO\"\n    \n    return \"YES\"",
        "test": "assert solution(\"3\\n4 5 3\") == \"NO\"",
        "num_ids": 1226
    },
    {
        "number": 4024,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n    \n    if k > len(s):\n        return \"-1\"\n    \n    dp = [float('inf')] * (k+1)\n    dp[0] = 0\n    \n    for i in range(len(s)):\n        for j in range(k, 0, -1):\n            if dp[j-1] < float('inf'):\n                dp[j] = min(dp[j], dp[j-1] + len(s) - i - 1)\n            if s[i] not in s[:i]:\n                if dp[j-1] < float('inf'):\n                    dp[j] = min(dp[j], dp[j-1] + len(s) - i - 1)\n                else:\n                    dp[j] = min(dp[j], len(s) - i - 1)\n    \n    return dp[k] if dp[k] != float('inf') else \"-1\"\n\ndef",
        "test": "assert solution(\"10 100\\najihiushda\") == \"233\" ",
        "num_ids": 1620
    },
    {
        "number": 4025,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    max_days = 0\n    max_day = None\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]:\n        current_day = day\n        fish_count = a if current_day in [\"Monday\", \"Thursday\", \"Sunday\"] else 0\n        rabbit_count = b if current_day in [\"Tuesday\", \"Saturday\"] else 0\n        chicken_count = c if current_day not in [\"Wednesday\", \"Saturday\", \"Sunday\"] else 0\n        total_count = fish_count + rabbit_count + chicken_count\n        if total_count > max_days:\n            max_days = total_count\n            max_day = current_day\n\n    return max_day\n\ndef",
        "test": "assert solution(\"30 20 10\") == \"39\" ",
        "num_ids": 1150
    },
    {
        "number": 4026,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    cases = []\n    stdin = stdin.strip().split(\"\\n\")\n    t = int(stdin[0])\n    for i in range(1, t + 1):\n        n, m = map(int, stdin[i * (n + 2) - 1].split())\n        tile_types = []\n        for j in range(i * (n + 2), i * (n + 2) + 2 * n):\n            tile_types.append(list(map(int, stdin[j].split())))\n        cases.append((n, m, tile_types))\n\n    def is_symmetric(matrix):\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] != matrix[j][i]:\n                    return False\n        return True\n\n    def check_square(n, m, tile_types):\n        def can_construct(size):\n            for i in range(1, size + 1):\n                for j in range(1, size + 1):\n                    if i > j:\n                        continue\n                    for type_index in range(n):\n                        tile = tile_types[type_index]\n                        if tile[0] <= i and tile[1] <= j and tile[2] <= size - i and tile[3] <= size - j:\n                            return True\n            return False\n\n        if can_construct(m):\n            matrix = []\n            for i in range(m):\n                row = []\n                for j in range(m):\n                    row.append(0)\n                matrix.append(row)\n\n            for i in range(m):\n                for j in range(m):\n                    if i > j:\n                        continue\n                    for type_index in range(n):\n                        tile = tile_types[type_index]\n                        if tile[0] <= i and tile[1] <= j and tile[2] <= m - i and tile[3] <= m - j:\n                            matrix[i][j] = matrix[j][i] = 1\n                            break\n\n            return is_symmetric(matrix)\n        else:\n            return False\n\n    result = []\n    for case in cases:\n        result.append(\"YES\" if check_square(case[0], case[1], case[2]) else \"NO\")\n    return \"\\n\".join(result)\n\ninput_string = \"\"\"\n6\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\"\n\nprint(solution(input_string)) ",
        "test": "assert solution(\"6\\n3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n\") == \"YES\\nNO\\nYES\\nNO\\nYES\\nYES\\n\" ",
        "num_ids": 3324
    },
    {
        "number": 4027,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 2 or n == 3:\n        return \"0\"\n    elif n % 2 == 0:\n        return str(n // 2)\n    else:\n        return str(n // 2 + 1)",
        "test": "assert solution(\"3\") == \"0\"",
        "num_ids": 467
    },
    {
        "number": 4028,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    \n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if '(' in substring and ')' in substring:\n                count += 1\n    \n    result = count * pow(2, n - 1, 10**9 + 7)\n    return str(result)",
        "test": "assert solution(\"2\\n(((\\n\") == \"0\" ",
        "num_ids": 1355
    },
    {
        "number": 4029,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n % 25 != 0:\n        if n % 10 == 0:\n            return \"-1\"\n        elif n % 10 != 0 and (n // 10) % 10 == 0:\n            return \"-1\"\n        else:\n            if n % 10 != 0:\n                n = n % 10 + n // 10\n                count += 1\n            else:\n                n = n % 100 + n // 10\n                count += 1\n    return count\n\n\ndef",
        "test": "assert solution(\"1241367\") == \"-1\"",
        "num_ids": 1289
    },
    {
        "number": 4030,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    coloring = [1] * n\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            coloring[i] = coloring[i + 1] = max(coloring[i], coloring[i + 1]) + 1\n\n    res = max(coloring)\n    return f\"{res}\\n{' '.join(str(c) for c in coloring)}\"",
        "test": "assert solution(\"5\\nabcde\") == \"1\\n1 1 1 1 1\\n\" ",
        "num_ids": 1705
    },
    {
        "number": 4031,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.split('\\n')[0])\n    strings = stdin.split('\\n')[1:]\n\n    # check if any string is a substring of another string\n    for i in range(n):\n        for j in range(n):\n            if i != j and strings[i] not in strings[j]:\n                return \"NO\"\n\n    # sort strings based on the condition\n    sorted_strings = sorted(strings, key=lambda x: sum(1 for _ in re.finditer(x, ''.join(strings))))\n\n    return \"YES\\n\" + '\\n'.join(sorted_strings)",
        "test": "assert solution(\"5\\naba\\nabacaba\\nba\\naba\\nabab\\n\") == \"NO\"",
        "num_ids": 1494
    },
    {
        "number": 4032,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    problems = list(map(int, stdin.split()[2:]))\n    \n    left, right = 0, n - 1\n    count = 0\n    \n    while left <= right:\n        if problems[left] <= k and problems[right] <= k:\n            count += 2\n            left += 1\n            right -= 1\n        elif problems[left] <= k and problems[right] > k:\n            count += 1\n            left += 1\n        elif problems[left] > k and problems[right] <= k:\n            count += 1\n            right -= 1\n        else:\n            break\n            \n    return str(count)",
        "test": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"",
        "num_ids": 1381
    },
    {
        "number": 4033,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    min_perimeter = a + b\n    min_side_a = 0\n    min_side_b = 0\n\n    for i in range(1, a + b + 1):\n        if i * (a + b) == a * b:\n            min_perimeter = i * 2 * (a + b)\n            min_side_a = i\n            min_side_b = a + b\n            break\n        elif i * (a + b) > a * b:\n            break\n\n    return str(min_perimeter)",
        "test": "assert solution(\"3 6\") == \"12\"",
        "num_ids": 828
    },
    {
        "number": 4034,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n\n    # Check if s can be sorted by some sequence of swaps\n    if sorted(s) == list(s):\n        return \"YES\" + \"\\n\" + \"0\" * n\n\n    # Initialize variables\n    one_color = ['0' for _ in range(n)]\n    other_color = ['1' for _ in range(n)]\n\n    # Iterate through the string and try to color it\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            one_color[i] = '1'\n            other_color[i + 1] = '0'\n        elif s[i] < s[i + 1]:\n            one_color[i + 1] = '1'\n            other_color[i] = '0'\n\n    # Check if the resulting coloring can sort the string\n    if ''.join(one_color) == ''.join(sorted(s)):\n        return \"YES\" + \"\\n\" + ''.join(one_color)\n    else:\n        return \"NO\"",
        "test": "assert solution(\"7\\nabcdedc\\n\") == \"NO\"",
        "num_ids": 1557
    },
    {
        "number": 4035,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    def tax(price: int, rate: int) -> int:\n        return int(price * rate)\n\n    def is_valid(price: int) -> bool:\n        return tax(price, 0.08) == A and tax(price, 0.1) == B\n\n    for i in range(1, 10000):\n        if is_valid(i):\n            return str(i)\n\n    return \"-1\"",
        "test": "assert solution(\"3 5\") == \"-1\"",
        "num_ids": 775
    },
    {
        "number": 4036,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    if n == 0 or k == 0:\n        return \"NO\"\n    \n    if n % k != 0:\n        return \"NO\"\n    \n    a = [n // k] * k\n    for i in range(1, k):\n        a[i] = a[i - 1] * 2\n    \n    return \"YES\\n\" + \" \".join(map(str, a)) + \"\\n\"",
        "test": "assert solution(\"9 4\") == \"NO\" ",
        "num_ids": 1149
    },
    {
        "number": 4037,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[:2])\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.split()[2*i:2*i+2])\n        projects.append((a, b))\n    \n    def is_valid(rating: int) -> bool:\n        for a, b in projects:\n            if rating < a:\n                return False\n            rating += b\n        return True\n    \n    def binary_search(target: int) -> int:\n        left, right = 0, 1000000\n        while left <= right:\n            mid = (left + right) // 2\n            if is_valid(mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n    \n    return str(binary_search(r))\n\ninput_str = input()\nprint(solution(input_str)) ",
        "test": "assert solution('3 2\\n300 -300\\n1 299\\n1 123') == '3' ",
        "num_ids": 1481
    },
    {
        "number": 4038,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    matrix = [list(map(int, stdin.split('\\n')[1].split())) for _ in range(n)]\n    \n    def is_palindromic(matrix: List[List[int]]) -> bool:\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] != matrix[i][n-1-j]:\n                    return False\n                if matrix[i][j] != matrix[n-1-i][j]:\n                    return False\n        return True\n    \n    def count_nums(matrix: List[List[int]], num: int) -> int:\n        count = 0\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == num:\n                    count += 1\n        return count\n    \n    def find_positions(matrix: List[List[int]], num: int) -> List[Tuple[int, int]]:\n        positions = []\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == num:\n                    positions.append((i, j))\n        return positions\n    \n    def fill_matrix(matrix: List[List[int]], num: int, positions: List[Tuple[int, int]]) -> None:\n        for i, j in positions:\n            matrix[i][j] = num\n    \n    def check_solution(matrix: List[List[int]]) -> bool:\n        for i in range(n):\n            for j in range(n):\n                if count_nums(matrix, matrix[i][j]) != 1:\n                    return False\n        return True\n    \n    for i in range(n):\n        matrix[i].reverse()\n        for j in range(n):\n            matrix[i][j], matrix[i][n-1-j] = matrix[i][n-1-j], matrix[i][j]\n    \n    if is_palindromic(matrix):\n        return \"YES\\n\" + \"\\n\".join([\" \".join(map(str, row)) for row in matrix])\n    \n    for num in range(1, 1001):\n        if count_nums(matrix, num) == 1:\n            positions = find_positions(matrix, num)\n            fill_matrix(matrix, num, positions)\n            if is_palindromic(matrix) and check_solution(matrix):\n                return \"YES\\n\" + \"\\n\".join([\" \".join(map(str, row)) for row in matrix])\n            for p in positions:\n                matrix[p[0]][p[1]] = 0\n    \n    return \"NO\" ",
        "test": "assert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1 \") == \"NO\"",
        "num_ids": 3443
    },
    {
        "number": 4039,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[:2])\n    projects = []\n\n    for line in stdin.split('\\n')[1:]:\n        if line:\n            a, b = map(int, line.split())\n            projects.append((a, b))\n\n    def is_possible(projects, r, i):\n        if i == len(projects):\n            return True\n\n        a, b = projects[i]\n        if r < a:\n            return False\n\n        return is_possible(projects, r + b, i + 1) or is_possible(projects, r - b, i + 1)\n\n    return \"YES\" if is_possible(projects, r, 0) else \"NO\"\n",
        "test": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"",
        "num_ids": 1604
    },
    {
        "number": 4040,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[0].split())\n    c = list(map(int, stdin.split()[1].split()))\n    \n    # Check if sum of c_i's is less than n\n    if sum(c) > n:\n        return \"NO\"\n    \n    # Initialize the array a with all 0's\n    a = [0] * (n + 2)\n    \n    # Place the platforms\n    for i in range(m):\n        for j in range(c[i]):\n            a[j + 1] = i + 1\n    \n    # Check if it is possible to reach n+1 from 0\n    def is_reachable(i: int) -> bool:\n        visited = [False] * (n + 2)\n        visited[i] = True\n        queue = [i]\n        while queue:\n            current = queue.pop(0)\n            for j in range(1, d + 1):\n                if 0 <= current + j <= n + 1 and not visited[current + j]:\n                    visited[current + j] = True\n                    queue.append(current + j)\n        return visited[n + 1]\n    \n    if is_reachable(0):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 \\n\"",
        "num_ids": 2637
    },
    {
        "number": 4041,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    max_len = 0\n\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            max_len = max(max_len, len(t))\n\n    return max_len",
        "test": "assert solution(\"baaba\\nab\") == 2",
        "num_ids": 967
    },
    {
        "number": 4042,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    \n    # calculate the first integer\n    first_int = int(x // 1)\n    # calculate the decimal part of the number\n    decimal = x - first_int\n    # calculate the second integer\n    second_int = int(decimal * 10)\n    \n    return str(first_int) + \" \" + str(second_int)",
        "test": "assert solution(\"3.141592\") == \"1 2\"",
        "num_ids": 933
    },
    {
        "number": 4043,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if d > (n-1) * (k-1) + k:\n        return \"NO\"\n    elif d > (n-1) * k:\n        return \"NO\"\n    else:\n        return \"YES\"\n\ninput_string = input(\"Enter n, d and k: \")\nprint(solution(input_string)) ",
        "test": "assert solution(\"8 5 3\") == \"YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n\" ",
        "num_ids": 2366
    },
    {
        "number": 4044,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if a + b < x * 2:\n        return \"impossible\"\n\n    s = \"0\" * a + \"1\" * b\n    for i in range(x):\n        if i % 2 == 0:\n            s = s[:a + i] + \"1\" + s[a + i + 1:]\n        else:\n            s = s[:a + i] + \"0\" + s[a + i + 1:]\n\n    return s",
        "test": "assert solution(\"2 2 1\") in [\"1100\", \"0011\"]",
        "num_ids": 1057
    },
    {
        "number": 4045,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split()\n    n = int(n)\n\n    if s in t or t in s:\n        return \"NO\"\n\n    res = \"a\" * n + \"b\" * n + \"c\" * n\n\n    for i in range(n):\n        if s in res[i:i+2] or t in res[i:i+2]:\n            return \"NO\"\n        if s == res[i:i+2] or t == res[i:i+2]:\n            res = res[:i] + res[i+2:] + res[i]\n\n    return \"YES\\n\" + res\n",
        "test": "assert solution(\"1\\ncb\\nac\") == \"YES\\nabc\"",
        "num_ids": 1736
    },
    {
        "number": 4046,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    def find_permutation(n: int, q: List[int]) -> str:\n        if len(q) != n - 1:\n            return \"-1\"\n\n        permutation = [1] * n\n        for i in range(n - 1):\n            permutation[i + 1] = permutation[i] + q[i]\n\n        if sorted(permutation) != list(range(1, n + 1)):\n            return \"-1\"\n\n        return \" \".join(map(str, permutation))\n\n    n, q_str = stdin.strip().split('\\n')\n    n = int(n)\n    q = list(map(int, q_str.split()))\n\n    return find_permutation(n, q)\n",
        "test": "assert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"",
        "num_ids": 1287
    },
    {
        "number": 4047,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, coords = stdin.split(\"\\n\")\n    n = int(n)\n    coords = list(map(int, coords.split()))\n    coins = 0\n    \n    target = coords[0]\n    for i in range(1, n):\n        diff = abs(coords[i] - target)\n        if diff % 2 == 0:\n            coins += diff // 2\n        else:\n            coins += (diff - 1) // 2 + 1\n    \n    return str(coins) ",
        "test": "assert solution(\"5\\n2 2 2 3 3\") == \"2\"",
        "num_ids": 852
    },
    {
        "number": 4048,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    i = j = 1\n    \n    while i * j < N:\n        if i * j + i <= N:\n            i += 1\n        else:\n            j += 1\n        count += 1\n    \n    return str(count)",
        "test": "assert solution(\"2\") == \"1\"",
        "num_ids": 865
    },
    {
        "number": 4049,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n\n    alice_wins = 0\n    alice_loses = 0\n\n    for i in range(n):\n        if a[0] > 0 and b[1] > 0:\n            alice_wins += min(a[0], b[1])\n            a[0] -= min(a[0], b[1])\n            b[1] -= min(a[0], b[1])\n\n        if a[1] > 0 and b[2] > 0:\n            alice_wins += min(a[1], b[2])\n            a[1] -= min(a[1], b[2])\n            b[2] -= min(a[1], b[2])\n\n        if a[2] > 0 and b[0] > 0:\n            alice_wins += min(a[2], b[0])\n            a[2] -= min(a[2], b[0])\n            b[0] -= min(a[2], b[0])\n\n    return str(alice_wins) + \" \" + str(alice_wins + alice_loses)\n\nstdin = \"\"\"2\n0 1 1\n1 1 0\n\"\"\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"3\\n0 0 3\\n3 0 0\") == \"3 3\"",
        "num_ids": 2060
    },
    {
        "number": 4050,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    \n    # Calculate the sum of all elements in the array\n    total_sum = sum(a)\n    \n    # Sort the array in descending order\n    a.sort(reverse=True)\n    \n    # Initialize the number of blocks\n    k = 1\n    \n    # Initialize the first block\n    l_1 = 1\n    r_1 = n\n    \n    # Calculate the sum of the first block\n    block_1_sum = sum(a[l_1-1:r_1])\n    \n    # Iterate through the remaining elements in the array\n    for i in range(n-1, 0, -1):\n        if a[i] == a[i-1]:\n            continue\n        \n        # Calculate the sum of the remaining elements\n        remaining_sum = sum(a[:i])\n        \n        # Calculate the sum of the block that starts at index i\n        block_sum = sum(a[i-1:n])\n        \n        # Check if the sum of the remaining elements is equal to the sum of the block that starts at index i\n        if remaining_sum == block_sum:\n            k += 1\n            l_k = i\n            r_k = n\n            break\n        else:\n            k = 1\n            l_1 = 1\n            r_1 = i\n            block_1_sum = remaining_sum\n            if remaining_sum == block_sum:\n                k += 1\n                l_k = i\n                r_k = n\n                break\n    \n    # Check if the sum of the last block is equal to the sum of the first block\n    if block_1_sum != block_sum:\n        return str(k-1)\n    \n    # Print the number of blocks\n    output = str(k) + '\\n'\n    \n    # Print the blocks in the specified format\n    for i in range(1, k+1):\n        output += f'{l_i} {r_i}\\n'\n        l_i = l_1 if i == 1 else l_k+1\n        r_i = r_1 if i == 1 else n\n    \n    return output",
        "test": "assert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\\n2 2\\n3 3\\n\" ",
        "num_ids": 2219
    },
    {
        "number": 4051,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    \n    can_sort = True\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                can_sort = False\n                break\n        if not can_sort:\n            break\n    \n    return \"YES\" if can_sort else \"NO\"",
        "test": "assert solution(\"3\\n3 1 2\") == \"NO\" ",
        "num_ids": 973
    },
    {
        "number": 4052,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def swap(s: str, i: int, j: int) -> str:\n        chars = list(s)\n        chars[i], chars[j] = chars[j], chars[i]\n        return ''.join(chars)\n\n    n, s, t = stdin.split()\n    n = int(n)\n    moves = []\n\n    for i in range(n - 1):\n        if s[i] != t[i]:\n            if i == 0 and s[1] == t[0]:\n                s = swap(s, 0, 1)\n                moves.append(1)\n            elif i == n - 2 and s[n - 2] == t[n - 1]:\n                s = swap(s, n - 2, n - 1)\n                moves.append(n - 1)\n            else:\n                s = swap(s, i, i + 1)\n                moves.append(i + 1)\n\n    if s == t:\n        return str(len(moves)) + '\\n' + ' '.join(map(str, moves))\n    else:\n        return '-1'",
        "test": "assert solution(\"4\\nabcd\\naccd\\n\") == \"-1\"",
        "num_ids": 1328
    },
    {
        "number": 4053,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    prefixes_and_suffixes = stdin.splitlines()[1:]\n\n    # Count the occurrences of each prefix and suffix\n    prefixes_count = {}\n    suffixes_count = {}\n    for prefix_or_suffix in prefixes_and_suffixes:\n        if prefix_or_suffix in prefixes_count:\n            prefixes_count[prefix_or_suffix] += 1\n        else:\n            prefixes_count[prefix_or_suffix] = 1\n        if prefix_or_suffix[::-1] in suffixes_count:\n            suffixes_count[prefix_or_suffix[::-1]] += 1\n        else:\n            suffixes_count[prefix_or_suffix[::-1]] = 1\n\n    # Check if there is a string that is consistent with the given prefixes and suffixes\n    for string in prefixes_and_suffixes:\n        if prefixes_count[string] == suffixes_count[string]:\n            return \"P\" * prefixes_count[string] + \"S\" * suffixes_count[string]\n\n    # If there is no consistent string, return any answer\n    return \"P\" * (n - 1) + \"S\" * (n - 1) ",
        "test": "assert solution(\"3\\na\\naa\\na\\naba\") == \"PPSS\"",
        "num_ids": 1562
    },
    {
        "number": 4054,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\"",
        "test": "assert solution(\"1 1 1 1 1\") == \"1\"",
        "num_ids": 879
    },
    {
        "number": 4055,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, flats = stdin.split()\n    n = int(n)\n    flats = list(map(int, flats))\n\n    def disturbed(i: int) -> bool:\n        return (i > 0 and i < n - 1 and flats[i - 1] == flats[i + 1] == 1 and flats[i] == 0)\n\n    count = 0\n    for i in range(n):\n        if disturbed(i):\n            count += 1\n\n    return str(count)\n\ndef",
        "test": "assert solution(\"4\\n1 1 1 1\") == \"0\" ",
        "num_ids": 1254
    },
    {
        "number": 4056,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    \n    divisors = set()\n    for i in range(1, a[-1] + 1):\n        is_divisor = True\n        for j in range(len(a)):\n            if a[j] % i != 0:\n                is_divisor = False\n                break\n        if is_divisor:\n            divisors.add(i)\n    \n    return str(len(divisors))\n",
        "test": "assert solution(\"5\\n1 2 3 4 5\") == \"1\"",
        "num_ids": 981
    },
    {
        "number": 4057,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    coins = list(map(int, stdin.split()[1:]))\n    coins.sort()\n    \n    pockets = 0\n    current_pocket = []\n    for coin in coins:\n        if not current_pocket or coin != current_pocket[-1]:\n            current_pocket.append(coin)\n        else:\n            current_pocket = [coin]\n            pockets += 1\n    \n    return str(pockets + 1)",
        "test": "assert solution(\"1\\n100\") == \"1\" ",
        "num_ids": 1059
    },
    {
        "number": 4058,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0:2])\n    heaters = [int(x) for x in stdin.split()[2:]]\n    \n    def is_warm(heater_pos, element_pos):\n        return heater_pos - r + 1 <= element_pos <= heater_pos + r - 1\n    \n    warm_elements = [0] * n\n    for heater_pos, heater_val in enumerate(heaters):\n        if heater_val == 1:\n            for element_pos in range(n):\n                if is_warm(heater_pos, element_pos):\n                    warm_elements[element_pos] = 1\n                    \n    if sum(warm_elements) == n:\n        return str(len([heater for heater in heaters if heater == 1]))\n    else:\n        return \"-1\"\n    \n",
        "test": "assert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"",
        "num_ids": 1479
    },
    {
        "number": 4059,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    # Count the number of tuples that satisfy A \\times B + C = N\n    count = 0\n    for A in range(1, N + 1):\n        for B in range(1, N + 1):\n            C = N - A * B\n            if C > 0:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"3\") == \"3\"",
        "num_ids": 640
    },
    {
        "number": 4060,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    count = 0\n\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            continue\n        if s[i] == ')' and s[i - 1] == '(':\n            count += 1\n        elif s[i] == '(' and s[i - 1] == ')':\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"1\\n)\\n\") == \"0\"",
        "num_ids": 1324
    },
    {
        "number": 4061,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    max_len = 0\n    for i in range(len(s)):\n        if s[i:].startswith(t):\n            max_len = max(max_len, len(t))\n            if max_len == len(t):\n                return max_len\n    return max_len",
        "test": "assert solution(\"baaba\\nab\") == 2",
        "num_ids": 872
    },
    {
        "number": 4062,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    x_max = max(a, b)\n    y_max = max(c, d)\n    return str(x_max * y_max)",
        "test": "assert solution(\"1 2 1 1\") == \"2\"",
        "num_ids": 846
    },
    {
        "number": 4063,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N, *difficulties = stdin.split()\n    N = int(N)\n    difficulties = [int(d) for d in difficulties]\n\n    # Count the number of problems for ARCs and ABCs\n    arcs = sum(1 for d in difficulties if d >= 5)\n    abcs = N - arcs\n\n    # Find the number of choices of K that make the number of problems for ARCs and the number of problems for ABCs the same\n    count = 0\n    for k in range(1, max(arcs, abcs) + 1):\n        if arcs == abcs or arcs == abcs + 1 or abcs == arcs + 1:\n            count += 1\n\n    return str(count)",
        "test": "assert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '0'",
        "num_ids": 1355
    },
    {
        "number": 4064,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_sleeping_time(current_time: int, sleep_time: int, l: int, r: int) -> bool:\n        return l <= current_time <= r\n\n    def optimal_sleep_times(n: int, h: int, l: int, r: int, a: List[int]) -> int:\n        good_sleep_times = 0\n        current_time = 0\n\n        for i in range(n):\n            if is_good_sleeping_time(current_time, a[i], l, r):\n                good_sleep_times += 1\n            else:\n                # Sleep after a[i] hours will be bad\n                current_time += a[i] - 1\n        return good_sleep_times\n\n    input_values = list(map(int, stdin.split()))\n    n, h, l, r = input_values[:4]\n    a = input_values[4:]\n\n    return str(optimal_sleep_times(n, h, l, r, a))",
        "test": "assert solution(\"3 24 0 23\\n1000000000 1000000000\") == \"0\"",
        "num_ids": 1221
    },
    {
        "number": 4065,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    difficulties = list(map(int, stdin.split()[1:]))\n\n    count = 1\n    max_count = 1\n\n    for i in range(1, n):\n        if difficulties[i] <= difficulties[i - 1] * 2:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 1\n\n    return str(max_count)\n\n\ninput_data = \"10 1 2 5 6 7 10 21 23 24 49\"\nprint(solution(input_data)) ",
        "test": "assert solution(\"5\\n2 10 50 110 250\") == \"1\"",
        "num_ids": 1349
    },
    {
        "number": 4066,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    lcm_min = float('inf')\n    min_pair = (-1, -1)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            lcm = a[i] * a[j] // math.gcd(a[i], a[j])\n            if lcm < lcm_min:\n                lcm_min = lcm\n                min_pair = (i+1, j+1)\n\n    return \" \".join(map(str, min_pair))\n\ndef",
        "test": "assert solution(\"6\\n2 5 10 1 10 2\") == \"1 4\" ",
        "num_ids": 1233
    },
    {
        "number": 4067,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    count_0, count_1, count_2 = 0, 0, 0\n    \n    for char in s:\n        if char == '0':\n            count_0 += 1\n        elif char == '1':\n            count_1 += 1\n        else:\n            count_2 += 1\n    \n    diff = abs(count_0 - count_1)\n    min_count = min(diff, diff + count_2 - 2 * count_0)\n    \n    result = []\n    for char in s:\n        if char == '0' and min_count > 0:\n            result.append('1')\n            min_count -= 1\n        elif char == '1' and min_count > 0:\n            result.append('2')\n            min_count -= 1\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n",
        "test": "assert solution(\"6\\n211200\") == \"211200\"",
        "num_ids": 1851
    },
    {
        "number": 4068,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, M, *broken_steps = stdin.split()\n    N = int(N)\n    M = int(M)\n    broken_steps = [int(step) for step in broken_steps]\n    \n    dp = [0] * (N + 1)\n    dp[0] = 1\n    \n    for i in range(1, N + 1):\n        if i in broken_steps:\n            continue\n        if i > 1:\n            dp[i] += dp[i - 2]\n        if i > 2:\n            dp[i] += dp[i - 3]\n        dp[i] %= 1000000007\n    \n    return str(dp[-1])",
        "test": "assert solution(\"2 1\\n1\") == \"1\"",
        "num_ids": 1470
    },
    {
        "number": 4069,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n\n    if k == 1:\n        return str(abs(x))\n\n    # Determine the minimum and maximum possible coordinates\n    min_coord = x + k * d if d > 0 else x - k * d\n    max_coord = x - k * d if d > 0 else x + k * d\n\n    return str(min(map(abs, (min_coord, max_coord))))\n",
        "test": "assert solution(\"10 1 1\") == \"10\"",
        "num_ids": 806
    },
    {
        "number": 4070,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n            count += 1\n        else:\n            n -= 1\n            count += 1\n    return str(count)",
        "test": "assert solution('571576') == '10'",
        "num_ids": 566
    },
    {
        "number": 4071,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a * (a + 1) // 2)",
        "test": "assert solution(\"10\") == \"55\"",
        "num_ids": 408
    },
    {
        "number": 4072,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0 or (a % 10 == 0 or a % 10 == 5):\n        return \"0\"\n    else:\n        return \"1\"",
        "test": "assert solution('48') == '0'",
        "num_ids": 498
    },
    {
        "number": 4073,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    max_num = max(a)\n    index_max = a.index(max_num)\n    return str(index_max + 1)\n",
        "test": "assert solution(\"3\\n1 1 1\") == \"1\"",
        "num_ids": 814
    },
    {
        "number": 4074,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    cases = int(stdin.split(\"\\n\")[0])\n    for i in range(1, cases+1):\n        n, k = map(int, stdin.split(\"\\n\")[i].split())\n        packages = n // k\n        if n % k == 0:\n            result.append(str(packages))\n        else:\n            result.append(str(packages+1))\n    return \"\\n\".join(result)",
        "test": "assert solution(\"5\\n8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\") == \"2\\n8\\n1\\n999999733\\n1\" ",
        "num_ids": 1101
    },
    {
        "number": 4075,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    bulbs = []\n    \n    for i in range(1, m + 1):\n        bulb = [int(x) for x in lines[i].split()[1:]]\n        bulbs.append((i, bulb))\n    \n    ps = [int(x) for x in lines[-1].split()]\n    \n    def count_on_states(switches):\n        count = 0\n        for switch in switches:\n            if switches[switch - 1]:\n                count += 1\n        return count\n    \n    def lighted_bulbs(bulb_index, bulb_switches):\n        lighted = 0\n        for switch in bulb_switches:\n            if switches[switch - 1]:\n                lighted += 1\n        return lighted % 2 == ps[bulb_index - 1]\n    \n    switches = [False] * n\n    result = 0\n    \n    for i in range(2**n):\n        binary = format(i, f'0{n}b')\n        for j in range(n):\n            switches[j] = binary[j] == '1'\n        \n        bulbs_lighted = 0\n        for bulb_index, bulb_switches in bulbs:\n            if lighted_bulbs(bulb_index, bulb_switches):\n                bulbs_lighted += 1\n        \n        if bulbs_lighted == m:\n            result += 1\n    \n    return str(result)",
        "test": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"",
        "num_ids": 2014
    },
    {
        "number": 4076,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    theta_hour = 2 * math.pi * H / 12\n    theta_minute = 2 * math.pi * M / 60\n    distance = A * math.cos(theta_hour) + B * math.cos(theta_minute)\n    return f\"{distance:.9f}\"\n\ndef",
        "test": "assert solution(\"5 7 3 20\") == \"5.632293854665275037025\"",
        "num_ids": 1499
    },
    {
        "number": 4077,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = 0\n\n    for l in range(1, n + 1):\n        for r in range(l, n + 1):\n            subarray = sorted(a[l - 1:r])\n            length = len(subarray)\n            median = subarray[length // 2] if length % 2 == 1 else (subarray[length // 2 - 1] + subarray[length // 2]) / 2\n\n            if median == m:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"3 1\\n1 1 1\") == \"6\"",
        "num_ids": 1442
    },
    {
        "number": 4078,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    segments = []\n\n    for _ in range(m):\n        l, r = map(int, stdin.split()[2:])\n        segments.append((l, r))\n\n    max_difference = -1\n    max_q = 0\n    max_c = []\n\n    for i in range(2**m):\n        c = [j for j in range(m) if (i & (1 << j)) > 0]\n        b = [0] * n\n\n        for j in range(m):\n            if j in c:\n                for k in range(segments[j][0] - 1, segments[j][1]):\n                    b[k] -= 1\n\n        current_difference = max(b) - min(b)\n\n        if current_difference > max_difference:\n            max_difference = current_difference\n            max_q = len(c)\n            max_c = c\n\n    return str(max_difference) + \"\\n\" + str(max_q) + \"\\n\" + \" \".join(map(str, max_c))",
        "test": "assert solution(\"1 0\\n1000000\") == \"0\\n0\\n\" ",
        "num_ids": 2439
    },
    {
        "number": 4079,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    strings = stdin.split(\"\\n\")[1:]\n    result = []\n\n    for string in strings:\n        if len(string) != len(set(string)):\n            result.append(\"No\")\n            continue\n\n        string = string.lower()\n        string = sorted(string)\n        for i in range(len(string) - 1):\n            if ord(string[i + 1]) - ord(string[i]) != 1:\n                result.append(\"No\")\n                break\n        else:\n            result.append(\"Yes\")\n\n    return \"\\n\".join(result)\n",
        "test": "assert solution(\"dabcef\") == \"Yes\"",
        "num_ids": 929
    },
    {
        "number": 4080,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    segments = [list(map(int, stdin.split()[2+i*2:4+i*2])) for i in range(m)]\n\n    def calculate_max_diff(segments_to_apply: list) -> int:\n        b = [0] * n\n        for segment in segments_to_apply:\n            for i in range(segment[0]-1, segment[1]):\n                b[i] -= 1\n        return max(b) - min(b)\n\n    max_diff = 0\n    for i in range(1, 2 ** m):\n        binary_representation = bin(i)[2:].zfill(m)\n        segments_to_apply = [segments[j] for j in range(m) if binary_representation[j] == '1']\n        diff = calculate_max_diff(segments_to_apply)\n        if diff > max_diff:\n            max_diff = diff\n            chosen_segments = [j+1 for j in range(m) if binary_representation[j] == '1']\n\n    return str(max_diff) + '\\n' + str(len(chosen_segments)) + '\\n' + ' '.join(map(str, chosen_segments))",
        "test": "assert solution(\"1 0\\n1000000\") == \"0\\n0\\n\" ",
        "num_ids": 2373
    },
    {
        "number": 4081,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.splitlines()[0].split())\n    input_sequence = list(map(int, stdin.splitlines()[1].split()))\n\n    def find_longest_increasing_sequence(input_sequence):\n        longest_sequence = []\n        for i in range(n):\n            current_sequence = [input_sequence[i]]\n            j = i + 1\n            while j < n and input_sequence[j] > current_sequence[-1]:\n                current_sequence.append(input_sequence[j])\n                j += 1\n            if len(current_sequence) > len(longest_sequence):\n                longest_sequence = current_sequence\n        return longest_sequence\n\n    longest_increasing_sequence = find_longest_increasing_sequence(input_sequence)\n    longest_increasing_sequence_length = len(longest_increasing_sequence)\n\n    def find_moves_for_longest_increasing_sequence(longest_increasing_sequence, input_sequence):\n        moves = []\n        current_index = 0\n        for element in longest_increasing_sequence:\n            index_of_element = input_sequence.index(element)\n            if index_of_element < current_index:\n                moves.append('R')\n            else:\n                moves.append('L')\n            current_index = index_of_element + 1\n        return moves\n\n    moves = find_moves_for_longest_increasing_sequence(longest_increasing_sequence, input_sequence)\n\n    return f\"{longest_increasing_sequence_length}\\n{''.join(moves)}\"",
        "test": "assert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\" ",
        "num_ids": 2384
    },
    {
        "number": 4082,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    max_length = 0\n\n    for i in range(n):\n        increasing_subarray_length = 1\n        for j in range(i + 1, n):\n            if a[j] > a[j - 1]:\n                increasing_subarray_length += 1\n            else:\n                break\n        max_length = max(max_length, increasing_subarray_length)\n\n    return str(max_length)\n\ndef",
        "test": "assert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\" ",
        "num_ids": 1367
    },
    {
        "number": 4083,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    def count_pairs(a: List[int]) -> int:\n        a.sort()\n        count = 0\n        i = 0\n        while i < len(a):\n            j = i + 1\n            while j < len(a) and a[j] == a[i]:\n                j += 1\n            count += j - i - 1\n            i = j\n        return count\n\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    min_operations = 0\n    while count_pairs(a) < k:\n        min_operations += 1\n        a = [x // 2 for x in a]\n\n    return str(min_operations)",
        "test": "assert solution(\"5 3\\n1 2 3 4 5\") == \"2\"",
        "num_ids": 1188
    },
    {
        "number": 4084,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    blue_balls = (N // (A + B)) * A\n    if N % (A + B) >= A:\n        blue_balls += A\n    else:\n        blue_balls += N % (A + B)\n    return str(blue_balls)",
        "test": "assert solution(\"1000000000 1000000000 1000000000\") == \"1000000000\"",
        "num_ids": 1043
    },
    {
        "number": 4085,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    result = []\n    \n    for i in range(1, t+1):\n        n = int(stdin.split(\"\\n\")[i*2-1])\n        divisors = list(map(int, stdin.split(\"\\n\")[i*2].split()))\n        \n        if len(divisors) == len(set(divisors)):\n            min_x = min(divisors)\n            max_x = max(divisors)\n            \n            if max_x**2 >= min_x:\n                for i in range(min_x, max_x+1):\n                    if all(i % d == 0 for d in divisors):\n                        result.append(i)\n                        break\n                else:\n                    result.append(-1)\n            else:\n                result.append(-1)\n        else:\n            result.append(-1)\n            \n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"1\\n2\\n2 3\") == \"-1\"",
        "num_ids": 1420
    },
    {
        "number": 4086,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    seen = set()\n    result = []\n    \n    for num in reversed(a):\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n            \n    return str(len(result)) + '\\n' + ' '.join(map(str, result))",
        "test": "assert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\" ",
        "num_ids": 1063
    },
    {
        "number": 4087,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a\n    while not (sum(int(digit) for digit in str(n)) % 4 == 0 and n >= a):\n        n += 1\n    return str(n)",
        "test": "assert solution(\"432\") == \"435\"",
        "num_ids": 664
    },
    {
        "number": 4088,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_b(t: str) -> list:\n        b = []\n        n = len(t)\n        for i in range(n):\n            b_i = 0\n            for j in range(n):\n                if j != i and t[j] > t[i]:\n                    b_i += abs(j - i)\n            b.append(b_i)\n        return b\n\n    def check_solution(s: str, b: list) -> str:\n        n = len(s)\n        m = len(b)\n        s = sorted(s)\n        for t in permutations(s):\n            b_t = calculate_b(''.join(t))\n            if b == b_t:\n                return ''.join(t)\n        return ''\n\n    q = int(stdin.readline())\n    for _ in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline().strip())\n        b = [int(x) for x in stdin.readline().split()]\n        print(check_solution(s, b))",
        "test": "assert solution(\"abac\\n3\\n2 1 0\\nabc\\n1\\n0\\nabba\\n3\\n1 0 1\\necoosdcefr\\n10\\n38 13 24 14 11 5 3 24 17 0\") == \"aac\\nb\\naba\"",
        "num_ids": 2005
    },
    {
        "number": 4089,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 26:\n        return chr(ord('a') + N - 1)\n    elif N <= 702:\n        n, m = divmod(N - 26, 26)\n        return chr(ord('a') + n - 1) + chr(ord('a') + m - 1)\n    elif N <= 18278:\n        n, m = divmod(N - 702, 26)\n        return chr(ord('a') + n // 26 - 1) + chr(ord('a') + (n % 26) - 1) + chr(ord('a') + m - 1)\n    elif N <= 475254:\n        n, m = divmod(N - 18278, 26)\n        return chr(ord('a') + n // 676 - 1) + chr(ord('a') + (n % 26) - 1) + chr(ord('a') + (n // 26) - 1) + chr(ord('a') + m - 1)\n    else:\n        n, m = divmod(N - 475254, 26)\n        return chr(ord('a') + n // 17576 - 1) + chr(ord('a') + (n % 26) - 1) + chr(ord('a') + ((n // 26) % 26) - 1) + chr(ord('a') + (n // 784) - 1) + chr(ord('a') + m - 1)",
        "test": "assert solution(\"1\") == \"a\"",
        "num_ids": 1440
    },
    {
        "number": 4090,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    n = len(words)\n\n    # Check if there are any pairs of equal segments\n    for i in range(n):\n        for j in range(i + 2, n):\n            if len(words[i:j]) == len(words[j:]) and all(words[i:j][t] == words[j:][t] for t in range(len(words[i:j]))):\n                # Replace the segments with their abbreviations\n                abbreviation = ''.join(word[0] for word in words[i:j]).upper()\n                words[i:j] = [abbreviation]\n                break\n\n    return ' '.join(words)",
        "test": "assert solution(\"6\\naa bb aa aa bb bb\") == \"11\" ",
        "num_ids": 1659
    },
    {
        "number": 4091,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # Calculate the maximum profit possible for each day\n    profit = [0] * n\n    for i in range(n):\n        for j in range(i, n):\n            profit[j] = max(profit[j], a[i] + (a[j+1:j+1+k-i] if j+1+k-i < n else []))\n\n    # Find the maximum total profit and the corresponding distribution\n    total_profit = max(profit)\n    distribution = []\n    count = 0\n    for i in range(n):\n        if profit[i] == total_profit:\n            distribution.append(i - count)\n            count = i\n    distribution.append(n - count)\n\n    # Print the results\n    return f\"{total_profit}\\n{' '.join(map(str, distribution))}\"",
        "test": "assert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\\n\" ",
        "num_ids": 2197
    },
    {
        "number": 4092,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    min_insertions = n\n\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += a[j]\n            if current_sum == 0:\n                min_insertions = min(min_insertions, j - i - 1)\n\n    return str(min_insertions)\n",
        "test": "assert solution(\"4\\n1 -5 3 2\\n\") == \"1\"",
        "num_ids": 1483
    },
    {
        "number": 4093,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    output = []\n    cases = int(stdin.strip().split(\"\\n\")[0])\n\n    for i in range(1, cases + 1):\n        n, m = map(int, stdin.strip().split(\"\\n\")[i].split())\n\n        if n == 1:\n            output.append(\"0\")\n        elif n == 2:\n            output.append(str(abs(m - 0)))\n        elif n == 3:\n            output.append(str(max(abs(m - 2 * 0), abs(m - 1 * 0 - 1 * 0))))\n        else:\n            output.append(str(min(max(abs(m - (n // 2) * (n // 2) + (n // 2) * (m - n // 2 * (n // 2)), abs(m - (n // 2) * (n // 2 - 1) + (n // 2) * (m - n // 2 * (n // 2 - 1))), abs(m - (n // 2) * (n // 2) + (n // 2 - 1) * (m - n // 2 * (n // 2))), abs(m - (n // 2) * (n // 2 - 1) + (n // 2 - 1) * (m - n // 2 * (n // 2 - 1))))), abs(m - (n // 2) * (n // 2) + (n // 2 - 1) * (m - n // 2 * (n // 2))), abs(m - (n // 2) * (n // 2 - 1) + (n // 2) * (m - n // 2 * (n // 2 - 1))), abs(m - (n // 2) * (n // 2 - 1) + (n // 2 - 1) * (m - n // 2 * (n // 2 - 1))), abs(m - (n // 2) * (n // 2) + (n // 2 - 1) * (m - n // 2 * (n // 2 - 1)) + 1) * 0)))))\n\n    return \"\\n\".join(output)",
        "test": "assert solution(\"5\\n1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\\n\"",
        "num_ids": 2006
    },
    {
        "number": 4094,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    count = 0\n    i = 1\n    while True:\n        if i % k == 0:\n            return str(count + 1)\n        count += 1\n        i *= 10",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 763
    },
    {
        "number": 4095,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:]))\n\n    def find_pairs(p: list, m: int) -> int:\n        pairs_count = 0\n        for l in range(n):\n            for r in range(l + 1, n + 1):\n                if len(p[l:r]) % 2 == 1:\n                    median = sorted(p[l:r])[(len(p[l:r]) - 1) // 2]\n                else:\n                    median = (sorted(p[l:r])[len(p[l:r]) // 2 - 1] + sorted(p[l:r])[len(p[l:r]) // 2]) / 2\n                if median == m:\n                    pairs_count += 1\n        return pairs_count\n\n    return str(find_pairs(p, m))",
        "test": "assert solution('5 4\\n2 4 5 3 1\\n') == '4'",
        "num_ids": 1266
    },
    {
        "number": 4096,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))[n:]\n\n    def drink_coffee(page_goal: int, days_left: int, a_index: int) -> int:\n        if days_left == 0 or a_index == n:\n            return page_goal\n\n        if page_goal <= 0:\n            return page_goal\n\n        if a_index == n:\n            return page_goal\n\n        page_goal -= a[a_index]\n        days_left -= 1\n        return drink_coffee(page_goal, days_left, a_index + 1)\n\n    days = 0\n    while True:\n        page_goal = m\n        days_left = days\n        a_index = 0\n        if drink_coffee(page_goal, days_left, a_index) >= 0:\n            return str(days)\n        days += 1\n\n    return \"-1\"\n\n\ninput_str = input()\nn, m = map(int, input_str.split())\na = list(map(int, input_str.split()))[n:]\n\nprint(solution(input_str)) ",
        "test": "assert solution(\"5 16\\n5 5 5 5 5\") == \"2\"",
        "num_ids": 1619
    },
    {
        "number": 4097,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n\n    if n == 1 or n == 2:\n        return str(0)\n\n    b_diff = [b[i] - b[i - 1] for i in range(1, n)]\n    unique_diff = list(set(b_diff))\n\n    if len(unique_diff) != 1:\n        return str(-1)\n\n    min_changes = 0\n    for i in range(1, n):\n        if b[i] - b[i - 1] != unique_diff[0]:\n            min_changes += 1\n\n    return str(min_changes)",
        "test": "assert solution(\"3\\n14 5 1\") == \"-1\"",
        "num_ids": 2085
    },
    {
        "number": 4098,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    students = list(map(int, stdin.split()[2:]))\n\n    # sort students by skill level\n    students.sort()\n\n    # initialize variables\n    result = 0\n    max_teams = min(n, k)\n    min_teams = 1\n\n    while min_teams <= max_teams:\n        # try to create a team with the current number of teams\n        current_teams = min_teams\n        current_students = 0\n        current_team = []\n\n        for i in range(n):\n            # add student to the current team\n            current_team.append(students[i])\n            current_students += 1\n\n            # if the team is full, add it to the result\n            if len(current_team) == current_teams:\n                current_team.sort()\n                for j in range(len(current_team) - 1):\n                    if current_team[j + 1] - current_team[j] > 5:\n                        break\n                else:\n                    result = max(result, current_students)\n                current_team = []\n\n        # if the team is not full, add the remaining students to a new team\n        if current_team:\n            result = max(result, current_students)\n            current_team.sort()\n            for i in range(len(current_team) - 1):\n                if current_team[i + 1] - current_team[i] > 5:\n                    break\n            else:\n                result = max(result, current_students)\n\n        # update min_teams and max_teams\n        if current_students == result:\n            max_teams = min_teams - 1\n        else:\n            min_teams += 1\n\n    return str(result)",
        "test": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"",
        "num_ids": 2014
    },
    {
        "number": 4099,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    total_points = sum(a)\n    avg_points = total_points / n\n\n    if avg_points >= m:\n        return str(k - 1)\n\n    min_points = k - total_points\n    avg_after_min_points = (total_points + min_points) / n\n\n    if avg_after_min_points >= m:\n        return str(min_points)\n    else:\n        return \"-1\"",
        "test": "assert solution(\"3 10 9\\n7 8 9\") == \"-1\"",
        "num_ids": 1152
    },
    {
        "number": 4100,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q, *answers = map(int, stdin.split())\n    players_scores = [k] * n\n    \n    for answer in answers:\n        for i in range(n):\n            if i != answer - 1:\n                players_scores[i] -= 1\n    \n    return \"\\n\".join(\"Yes\" if score > 0 else \"No\" for score in players_scores)",
        "test": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"",
        "num_ids": 1190
    },
    {
        "number": 4101,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    def check_sorted(a: List[List[int]]) -> bool:\n        flattened = [a[i][j] for i in range(len(a)) for j in range(len(a[0]))]\n        return all(flattened[i] <= flattened[i + 1] for i in range(len(flattened) - 1))\n\n    def invert_row(a: List[List[int]], i: int) -> List[List[int]]:\n        a[i] = [1 - a[i][j] for j in range(len(a[0]))]\n        return a\n\n    def invert_column(a: List[List[int]], j: int) -> List[List[int]]:\n        for i in range(len(a)):\n            a[i][j] = 1 - a[i][j]\n        return a\n\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    a = [[int(x) for x in lines[i + 1].split()] for i in range(n)]\n\n    if not check_sorted(a):\n        return \"NO\"\n\n    row_ops = \"\".join(\"1\" if a[i][0] == 1 else \"0\" for i in range(n))\n    col_ops = \"\".join(\"1\" if a[0][j] == 1 else \"0\" for j in range(m))\n\n    return \"YES\\n\" + row_ops + \"\\n\" + col_ops",
        "test": "assert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\\n\") == \"NO\" ",
        "num_ids": 2413
    },
    {
        "number": 4102,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"23\") == \"No\"",
        "num_ids": 510
    },
    {
        "number": 4103,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split()[:3])\n    s = list(map(int, stdin.split()[3:]))\n    \n    # Calculate the number of segments that can be passed using the battery\n    battery_segments = sum(1 for i in range(n) if s[i] == 0)\n    \n    # Calculate the number of segments that can be passed using the accumulator\n    accumulator_segments = sum(1 for i in range(n) if s[i] == 1)\n    \n    # Calculate the number of segments that can be passed using the battery and accumulator\n    battery_accumulator_segments = min(battery_segments, accumulator_segments)\n    \n    # Calculate the number of segments that can be passed using the accumulator only\n    accumulator_only_segments = accumulator_segments - battery_accumulator_segments\n    \n    # Calculate the maximum number of segments that can be passed\n    max_segments = battery_segments + accumulator_only_segments\n    \n    return str(max_segments)",
        "test": "assert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"",
        "num_ids": 1412
    },
    {
        "number": 4104,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    result = eval(stdin)\n    if result < 0:\n        result = result * -1\n    return str(result)",
        "test": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"",
        "num_ids": 770
    },
    {
        "number": 4105,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n > k:\n        return \"NO\"\n\n    def is_valid(colors: list) -> bool:\n        for i in range(n - 1):\n            if colors[i] == colors[i + 1] or (colors[i] == colors[i + 1] + 1) or (colors[i] == colors[i + 1] - 1):\n                return False\n        return True\n\n    def generate_colors(colors: list, index: int) -> bool:\n        if index == n:\n            return is_valid(colors)\n        for i in range(1, k + 1):\n            colors[index] = i\n            if generate_colors(colors, index + 1):\n                return True\n            colors[index] = 0\n        return False\n\n    colors = [0] * n\n    if generate_colors(colors, 0):\n        output = \"YES\\n\"\n        for i in range(n):\n            output += f\"{colors[i]} {colors[(i + 1) % n]}\\n\"\n        return output\n    else:\n        return \"NO\"",
        "test": "assert solution(\"13 4\") == \"NO\" ",
        "num_ids": 2102
    },
    {
        "number": 4106,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    def check(k, x, a):\n        n = len(a)\n        if x > n:\n            return False\n        for i in range(0, n - x + 1, k):\n            if sum(a[i:i+x]) == 0:\n                return False\n        return True\n\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    if not check(k, x, a):\n        return \"-1\"\n\n    a.sort(reverse=True)\n    max_sum = sum(a[:x])\n    return str(max_sum)",
        "test": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"",
        "num_ids": 1396
    },
    {
        "number": 4107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    s = input()\n\n    def calculate_cost(i: int) -> int:\n        return i + 1\n\n    def calculate_cost_with_router(i: int) -> int:\n        return i + 1 + k\n\n    total_cost = 0\n    for i in range(n):\n        if s[i] == '1':\n            if i == 0 or i == n - 1:\n                total_cost += calculate_cost(i)\n            else:\n                total_cost += min(\n                    calculate_cost(i),\n                    calculate_cost_with_router(i)\n                )\n        else:\n            total_cost += calculate_cost(i)\n\n    return str(total_cost)",
        "test": "assert solution('12 6\\n000010000100') == '15\\n' ",
        "num_ids": 1450
    },
    {
        "number": 4108,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split()\n\n    def perform_operation(string: str, c_1: str, c_2: str) -> str:\n        return string.replace(c_1, c_2).replace(c_2, c_1)\n\n    for i in range(len(S)):\n        for j in range(i + 1, len(S)):\n            S_new = perform_operation(S, S[i], S[j])\n            if S_new == T:\n                return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"azzel\\napples\") == \"No\"",
        "num_ids": 910
    },
    {
        "number": 4109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    N, M, X = map(int, stdin.split())\n    books = [list(map(int, input().split())) for _ in range(N)]\n    dp = [[float('inf') for _ in range(X + 1)] for _ in range(M + 1)]\n    dp[0][0] = 0\n\n    for i in range(N):\n        for j in range(M):\n            for k in range(X + 1):\n                if dp[j][k] > dp[j][k - books[i][1]] + books[i][0]:\n                    dp[j][k] = dp[j][k - books[i][1]] + books[i][0]\n\n    if dp[M][X] == float('inf'):\n        return \"not achievable\"\n    else:\n        return str(dp[M][X]) + \" yen\" ",
        "test": "assert solution(\"1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"YES 0\" ",
        "num_ids": 1947
    },
    {
        "number": 4110,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    D, G = map(int, lines[0].split())\n    problems = {}\n    \n    for line in lines[1:-1]:\n        p, c = map(int, line.split())\n        problems[c] = p\n    \n    for c in sorted(problems.keys(), reverse=True):\n        G -= problems[c] * 100\n        if G >= 0:\n            return str(sum(problems.values()))\n    return \"Not possible\"",
        "test": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"",
        "num_ids": 1191
    },
    {
        "number": 4111,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    good_candies = []\n    total_weight_odd = 0\n    total_weight_even = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            total_weight_even += a[i]\n        else:\n            total_weight_odd += a[i]\n    if total_weight_even == total_weight_odd:\n        good_candies.append(n)\n    for i in range(1, n):\n        if i % 2 == 0:\n            total_weight_even -= a[i]\n        else:\n            total_weight_odd -= a[i]\n        if i % 2 == 0:\n            total_weight_even += a[i-1]\n        else:\n            total_weight_odd += a[i-1]\n        if total_weight_even == total_weight_odd:\n            good_candies.append(i)\n    return str(len(good_candies))",
        "test": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"",
        "num_ids": 1243
    },
    {
        "number": 4112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, input().split()))\n\n    def is_valid(i, j):\n        return j - i >= k and sum(a[i:j]) >= x\n\n    def find_max_sum(i, j):\n        if not is_valid(i, j):\n            return 0\n\n        if j - i == x:\n            return sum(a[i:j])\n\n        max_sum = 0\n        for mid in range(i + 1, j - x + 1):\n            left_sum = find_max_sum(i, mid)\n            right_sum = find_max_sum(mid, j)\n            max_sum = max(max_sum, left_sum + right_sum)\n\n        return max_sum\n\n    return find_max_sum(0, n)",
        "test": "assert solution(\"4 3 1\\n1 100 1 1\") == \"100\" ",
        "num_ids": 1775
    },
    {
        "number": 4113,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 7 == 0 or n % 4 == 0:\n        return \"Yes\"\n    elif n % 11 == 0:\n        return \"Yes\"\n    elif n > 11 and (n - 11) % 7 == 0:\n        return \"Yes\"\n    elif n > 11 and (n - 11) % 4 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"10\") == \"No\"",
        "num_ids": 789
    },
    {
        "number": 4114,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    altitudes = {}\n\n    for line in stdin.splitlines()[1:]:\n        x, y, h = map(int, line.split())\n        altitudes[(x, y)] = h\n\n    def get_altitude(x, y):\n        return max(h - abs(x - c_x) - abs(y - c_y), 0)\n\n    def find_center():\n        nonlocal altitudes\n        x_candidates = set()\n        y_candidates = set()\n        h_candidates = set()\n\n        for (x, y), h in altitudes.items():\n            x_candidates.add(x)\n            y_candidates.add(y)\n            h_candidates.add(h)\n\n        c_x = sum(x_candidates) / len(x_candidates)\n        c_y = sum(y_candidates) / len(y_candidates)\n        h = sum(h_candidates) / len(h_candidates)\n\n        return int(c_x), int(c_y), int(h)\n\n    c_x, c_y, h = find_center()\n\n    return f\"{c_x} {c_y} {h}\"\n\ninput_str = \"\"\"4\n2 3 5\n2 1 5\n1 2 5\n3 2 5\"\"\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"1\\n0 0 1\\n\") == \"0 0 1\"",
        "num_ids": 1895
    },
    {
        "number": 4115,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    n = len(s)\n    odd = 0\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            odd += 1\n    if n % 2 == 0:\n        return odd\n    else:\n        if s[n // 2] != s[n - 1 - (n // 2)]:\n            return odd + 1\n        else:\n            return odd",
        "test": "assert solution('redcoder') == 1  # Hug 'd' to 'o' and get redooder",
        "num_ids": 904
    },
    {
        "number": 4116,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == N:\n                return \"Yes\"\n    return \"No\"",
        "test": "assert solution('10') == 'Yes'",
        "num_ids": 511
    },
    {
        "number": 4117,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N, sticks = stdin.split(\"\\n\")\n    N = int(N)\n    sticks = list(map(int, sticks.split()))\n    \n    def is_triangle(a, b, c):\n        return a + b > c and a + c > b and b + c > a\n\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if sticks[i] != sticks[j] != sticks[k] and is_triangle(sticks[i], sticks[j], sticks[k]):\n                    count += 1\n\n    return str(count)",
        "test": "assert solution(\"1\\n1\") == \"0\"",
        "num_ids": 1380
    },
    {
        "number": 4118,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A in range(1, 10) and B in range(1, 10):\n        result = A * B\n        return str(result)\n    else:\n        return str(-1)",
        "test": "assert solution('3 3') == '9'",
        "num_ids": 1018
    },
    {
        "number": 4119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    def min_moves(pieces: list, visited: set, target: int, current: int) -> int:\n        if target in visited:\n            return 0\n        visited.add(current)\n        min_move = float('inf')\n        for piece in pieces:\n            if piece == current:\n                continue\n            if piece == target:\n                min_move = 1\n                break\n            min_move = min(min_move, min_moves(pieces, visited, target, piece) + 1)\n        return min_move\n\n    n, m = map(int, stdin.split()[0:2])\n    target_coordinates = list(map(int, stdin.split()[2:]))\n    pieces = [0] * n\n    target_piece = 0\n    min_move = float('inf')\n    for i in range(m):\n        x = target_coordinates[i]\n        for j in range(n):\n            if pieces[j] == x:\n                min_move = min(min_move, min_moves(pieces, set(), x, target_piece))\n                target_piece = x\n                break\n    return str(min_move)\n\ninput_str = \"2 5\\n10 12 1 2 14\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"",
        "num_ids": 1892
    },
    {
        "number": 4120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()[:3]))\n    roads = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[3:3+m]]\n\n    def is_valid(choice):\n        reachable_cities = {1}\n        for i in range(m):\n            if choice[i] == '1':\n                for j in range(m):\n                    if choice[j] == '1' and any(roads[j][0] == roads[i][0] or roads[j][0] == roads[i][1] or roads[j][1] == roads[i][0] or roads[j][1] == roads[i][1]):\n                        reachable_cities.add(roads[j][0])\n                        reachable_cities.add(roads[j][1])\n        return len(reachable_cities) == n\n\n    def count_distance(choice):\n        distance = 0\n        for i in range(1, n):\n            if any(choice[j] == '1' and (roads[j][0] == i or roads[j][1] == i) for j in range(m)):\n                distance += 1\n        return distance\n\n    valid_choices = [choice for choice in product('01', repeat=m) if is_valid(choice)]\n    valid_choices.sort(key=count_distance)\n\n    output = f\"{min(k, len(valid_choices))}\\n\"\n    for i in range(min(k, len(valid_choices))):\n        output += \"\".join(valid_choices[i]) + \"\\n\"\n\n    return output",
        "test": "assert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\\n11100\\n110110\\n\" ",
        "num_ids": 2670
    },
    {
        "number": 4121,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = sorted(set(a))\n    if len(a) == 1:\n        if a[0] > 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    for i in range(1, len(a)):\n        if a[i] - a[i-1] > 1:\n            return \"YES\"\n    return \"NO\"",
        "test": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"",
        "num_ids": 1192
    },
    {
        "number": 4122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    H, n, *d = map(int, stdin.split())\n    hp = H\n    k = 1\n\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return str(k)\n        k += 1\n\n    return \"-1\"\n\ndef",
        "test": "assert solution(\"10 4\\n-3 -6 5 4\") == \"-1\" ",
        "num_ids": 1033
    },
    {
        "number": 4123,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    max_count = 0\n    max_two_gram = \"\"\n    \n    for i in range(n-1):\n        two_gram = s[i:i+2]\n        count = 0\n        for j in range(n-1):\n            if s[j:j+2] == two_gram:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_two_gram = two_gram\n    \n    return max_two_gram\n",
        "test": "assert solution(\"7\\nABACABA\") == \"AB\"",
        "num_ids": 1029
    },
    {
        "number": 4124,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    if not s and not t:\n        return \"0\"\n    if s == t:\n        return str(len(s) + len(t))\n    if not s:\n        return str(len(t))\n    if not t:\n        return str(len(s))\n    return str(abs(len(s) - len(t)))",
        "test": "assert solution(\"b\\nab\\n\") == \"1\" ",
        "num_ids": 992
    },
    {
        "number": 4125,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split()[0:2])\n    coordinates = list(map(int, stdin.split()[2:]))\n\n    coordinates.sort()\n    max_d = 1\n    for i in range(1, len(coordinates)):\n        max_d = max(max_d, abs(coordinates[i] - coordinates[i - 1]))\n\n    return str(max_d)",
        "test": "assert solution(\"10 1\\n1 2 3 4 5 6 7 8 9 10\") == \"1\"",
        "num_ids": 1238
    },
    {
        "number": 4126,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n\n    # Check if S is a palindrome\n    if s != s[::-1]:\n        return \"No\"\n\n    # Check if the string formed by the 1-st through ((N-1)/2)-th characters is a palindrome\n    if s[:n//2] != s[:n//2][::-1]:\n        return \"No\"\n\n    # Check if the string consisting of the (N+3)/2-st through N-th characters is a palindrome\n    if s[n//2+1:][::-1] != s[n//2+1:]:\n        return \"No\"\n\n    return \"Yes\"",
        "test": "assert solution(\"abbcddcee\") == \"No\"",
        "num_ids": 1013
    },
    {
        "number": 4127,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    result = a * b\n    result = int(result)  # truncate fractional part\n    return str(result)",
        "test": "assert solution(\"198 1.10\") == \"217\"",
        "num_ids": 750
    },
    {
        "number": 4128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def count_ways(n: int, a: int, b: int) -> int:\n        if n < a + b or a < b or a > n:\n            return 0\n        elif a == n or b == n:\n            return 1\n        else:\n            return count_ways(n - 1, a - 1, b + 1) + count_ways(n - 1, a + 1, b - 1)\n\n    t = int(stdin.strip().split()[0])\n    results = []\n    for i in range(t):\n        n = int(input())\n        a = 1\n        b = 1\n        count = 0\n        while a <= n // 2:\n            count += count_ways(n, a, b)\n            b += 1\n        results.append(count)\n\n    return \"\\n\".join(map(str, results))\n",
        "test": "assert solution(\"6\\n7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\\n\" ",
        "num_ids": 1067
    },
    {
        "number": 4129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split()[0:3])\n    roads = {}\n    for i in range(m):\n        u, v = map(int, stdin.split()[3*i+3:3*i+5])\n        if u in roads:\n            roads[u].append(v)\n        else:\n            roads[u] = [v]\n        if v in roads:\n            roads[v].append(u)\n        else:\n            roads[v] = [u]\n    \n    visited = [False] * (n+1)\n    queue = [s]\n    visited[s] = True\n    count = 0\n    \n    while queue:\n        next_queue = []\n        for city in queue:\n            for neighbor in roads[city]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    count += 1\n                    next_queue.append(neighbor)\n        queue = next_queue\n    \n    if count == n:\n        return \"0\"\n    else:\n        return str(n - count)",
        "test": "assert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\" ",
        "num_ids": 2103
    },
    {
        "number": 4130,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, a_str = stdin.split('\\n')\n    n = int(n)\n    a = [int(x) for x in a_str.split()]\n    \n    boxers = set()\n    max_boxers = 0\n    \n    for weight in a:\n        boxers.add(weight)\n        max_boxers = max(max_boxers, len(boxers))\n        \n    return str(max_boxers)",
        "test": "assert solution(\"4\\n3 2 4 1\") == \"4\"",
        "num_ids": 831
    },
    {
        "number": 4131,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    prefectures = {}\n    for i in range(1, m+1):\n        line = lines[i].split()\n        prefecture, year = map(int, line)\n        if prefecture not in prefectures:\n            prefectures[prefecture] = []\n        prefectures[prefecture].append(year)\n    \n    result = []\n    for i in range(1, n+1):\n        if i not in prefectures:\n            continue\n        prefecture_cities = sorted(prefectures[i])\n        for j, year in enumerate(prefecture_cities, 1):\n            id_number = f\"{i:06d}{j:06d}\"\n            result.append(id_number)\n    \n    return \"\\n\".join(result)",
        "test": "assert solution('1 1\\n1 32') == '000001000001'",
        "num_ids": 1598
    },
    {
        "number": 4132,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    healths = [int(x) for x in lines[1].split()]\n\n    # If only one monster is left, return its health\n    if N == 1:\n        return str(healths[0])\n\n    # Calculate the total health of the monsters\n    total_health = sum(healths)\n\n    # Calculate the minimum possible final health of the last monster\n    min_final_health = max(healths)\n    for health in healths:\n        if health < min_final_health:\n            min_final_health = health\n\n    return str(min_final_health)",
        "test": "assert solution(\"1\\n1\") == \"1\"",
        "num_ids": 1500
    },
    {
        "number": 4133,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    jaws = {}\n    stomach = []\n    diet = []\n\n    for i, char in enumerate(stdin):\n        if char in ('+', '-', '*', '/'):\n            jaws[i] = char\n        elif char in ('_', '?', ':', '>'):\n            diet.append(char)\n        elif char in ('<', ','):\n            diet.append(char)\n            stomach.append(int(stdin[i-1]) if i > 0 and stdin[i-1] in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9') else 0)\n\n    if not diet or len(diet) % 2 != 0:\n        return \"false\"\n\n    for i in range(len(diet) - 2, -1, -2):\n        if diet[i] == '>' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == '>':\n            stomach[-1] += int(stdin[jaws[list(jaws.keys())[len(stomach)]]])\n        elif diet[i] == ',' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == ',':\n            stomach.append(int(stdin[jaws[list(jaws.keys())[len(stomach)]]]) if len(jaws) > len(stomach) else 0)\n        elif diet[i] == '<' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == '<':\n            stomach.pop()\n        elif diet[i] == '+' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == '+':\n            stomach[-1] += stomach[-2]\n        elif diet[i] == '-' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == '-':\n            stomach[-1] -= stomach[-2]\n        elif diet[i] == '*' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == '*':\n            stomach[-1] *= stomach[-2]\n        elif diet[i] == '/' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == '/':\n            stomach[-1] //= stomach[-2]\n        else:\n            return \"false\"\n\n    if len(stomach) != len(jaws):\n        return \"false\"\n\n    return ''.join(str(x) for x in stomach)",
        "test": "assert solution(\"?(__-_+_/_____):-__>__,_____<__.\") == \"false\"",
        "num_ids": 2669
    },
    {
        "number": 4134,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(i, j, xor_sum) -> bool:\n        return (xor_sum ^ a[i][j]) == xor_sum\n\n    def count_paths(i, j, xor_sum, memo) -> int:\n        if i == n and j == m:\n            return 1 if xor_sum == k else 0\n\n        if (i, j, xor_sum) in memo:\n            return memo[(i, j, xor_sum)]\n\n        if not is_valid(i, j, xor_sum):\n            memo[(i, j, xor_sum)] = 0\n            return 0\n\n        count = count_paths(i + 1, j, xor_sum ^ a[i][j], memo)\n        if j + 1 <= m:\n            count += count_paths(i, j + 1, xor_sum ^ a[i][j], memo)\n\n        memo[(i, j, xor_sum)] = count\n        return count\n\n    input_data = [line.strip() for line in stdin.split(\"\\n\") if line]\n    n, m, k = map(int, input_data[0].split())\n    a = [list(map(int, line.split())) for line in input_data[1:]]\n\n    memo = {}\n    result = count_paths(1, 1, 0, memo)\n    return str(result)",
        "test": "assert solution(\"3 4 100000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"0\" ",
        "num_ids": 2173
    },
    {
        "number": 4135,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split()\n    n = int(n)\n\n    for d in range(n, 0, -1):\n        if n % d == 0:\n            s = t[:d][::-1] + t[d:]\n            if s == t:\n                return s\n\n    return \"\"\n",
        "test": "assert solution(\"1\\nz\") == \"z\" ",
        "num_ids": 787
    },
    {
        "number": 4136,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)",
        "test": "assert solution(\"5 14\") == \"19\"",
        "num_ids": 461
    },
    {
        "number": 4137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # Calculate the result of the expression\n    result = calculate(stdin)\n\n    # Create a Brainfuck program that prints the result\n    bf_program = f\"++>[{result:0{8}b}]{result}>\"\n\n    return bf_program\n\ndef",
        "test": "assert solution(\"9-7\") == \"+++++++++>+++++++><[<->-]<++++++++++++++++++++++++++++++++++++++++++++++++.\"",
        "num_ids": 2440
    },
    {
        "number": 4138,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.splitlines()[0])\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    result = []\n\n    for _ in range(queries):\n        k = int(stdin.splitlines()[_ + 1])\n        result.append(sequence[k - 1])\n\n    return \"\\n\".join(result)",
        "test": "assert solution('4\\n2132\\n506\\n999999999999999999\\n10000000000000000000') == '8\\n2\\n4\\n1\\n' ",
        "num_ids": 1279
    },
    {
        "number": 4139,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n\n    for num in range(1, N + 1):\n        if (\n            \"7\" in str(num)\n            and \"5\" in str(num)\n            and \"3\" in str(num)\n        ):\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"575\") == \"4\"",
        "num_ids": 828
    },
    {
        "number": 4140,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i] == s[i+1]:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"111\") == \"2\"",
        "num_ids": 555
    },
    {
        "number": 4141,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    input_list = [int(x) for x in stdin.split()[1:]]\n    even_numbers = [x for x in input_list if x % 2 == 0]\n    should_allow_entry = all(x % 3 == 0 or x % 5 == 0 for x in even_numbers)\n    return \"APPROVED\" if should_allow_entry else \"DENIED\"",
        "test": "assert solution(\"3\\n1 2 3\") == \"DENIED\"",
        "num_ids": 1026
    },
    {
        "number": 4142,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    dance = stdin\n\n    for index, step in enumerate(dance):\n        if (index + 1) % 2 == 0:\n            if step not in ['L', 'U', 'D']:\n                return \"No\"\n        else:\n            if step not in ['R', 'U', 'D']:\n                return \"No\"\n    return \"Yes\"",
        "test": "assert solution(\"RUDLUDRRR\") == \"No\"",
        "num_ids": 775
    },
    {
        "number": 4143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n\n    # Initialize variables to keep track of the number of people at each city\n    people_at_city1 = N\n    people_at_city2 = 0\n    people_at_city3 = 0\n    people_at_city4 = 0\n    people_at_city5 = 0\n    people_at_city6 = 0\n\n    # Initialize variables to keep track of the maximum number of people that can be transported by each mode of transport\n    max_people_train = A\n    max_people_bus = B\n    max_people_taxi = C\n    max_people_airplane = D\n    max_people_ship = E\n\n    # Initialize variables to keep track of the time taken by each mode of transport\n    time_train = 1\n    time_bus = 1\n    time_taxi = 1\n    time_airplane = 1\n    time_ship = 1\n\n    # Calculate the minimum time required for all people to reach City 6\n    time = 0\n    while people_at_city6 < N:\n        # Transport people from City 1 to City 2\n        if people_at_city1 > 0 and people_at_city2 < max_people_train:\n            people_at_city2 += min(max_people_train, people_at_city1)\n            people_at_city1 -= min(max_people_train, people_at_city1)\n\n        # Transport people from City 2 to City 3\n        if people_at_city2 > 0 and people_at_city3 < max_people_bus:\n            people_at_city3 += min(max_people_bus, people_at_city2)\n            people_at_city2 -= min(max_people_bus, people_at_city2)\n\n        # Transport people from City 3 to City 4\n        if people_at_city3 > 0 and people_at_city4 < max_people_taxi:\n            people_at_city4 += min(max_people_taxi, people_at_city3)\n            people_at_city3 -= min(max_people_taxi, people_at_city3)\n\n        # Transport people from City 4 to City 5\n        if people_at_city4 > 0 and people_at_city5 < max_people_airplane:\n            people_at_city5 += min(max_people_airplane, people_at_city4)\n            people_at_city4 -= min(max_people_airplane, people_at_city4)\n\n        # Transport people from City 5 to City 6\n        if people_at_city5 > 0 and people_at_city6 < max_people_ship:\n            people_at_city6 += min(max_people_ship, people_at_city5)\n            people_at_city5 -= min(max_people_ship, people_at_city5)\n\n        time += 1\n\n    return str(time)",
        "test": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"",
        "num_ids": 2405
    },
    {
        "number": 4144,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    modulo = 10**9 + 7\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if j - i > 1:\n                continue\n            for k in range(10):\n                for l in range(10):\n                    if k == 0 or k == 9 or l == 0 or l == 9:\n                        count += 1\n                    elif k == l and k != 0 and k != 9:\n                        count += 1\n    return str(count % modulo)",
        "test": "assert solution(\"2\") == \"2\"  # Two sequences {0,9} and {9,0} satisfy all conditions. ",
        "num_ids": 714
    },
    {
        "number": 4145,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def find_next_prime(num: int) -> int:\n        while True:\n            num += 1\n            if is_prime(num):\n                return num\n\n    next_prime = find_next_prime(X)\n    return str(next_prime)",
        "test": "assert solution(stdin=\"20\") == \"23\"",
        "num_ids": 822
    },
    {
        "number": 4146,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, *sequence = map(int, stdin.split())\n\n    # Check if sequence is already /\\/\\/\\/\n    if all(sequence[i] == sequence[i + 2] for i in range(0, n - 2, 2)):\n        return str(0)\n\n    # Count the occurrences of each number in the sequence\n    count = {}\n    for num in sequence:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # If there are more than 2 different numbers, it's not possible to make it /\\/\\/\\/\n    if len(count) > 2:\n        return str(-1)\n\n    # Find the index of the elements that need to be replaced\n    to_replace = []\n    for i in range(0, n - 2, 2):\n        if sequence[i] != sequence[i + 2]:\n            to_replace.append(i)\n\n    # Return the number of elements that need to be replaced\n    return str(len(to_replace))",
        "test": "assert solution(\"6\\n1 2 1 2 1 2\") == \"0\"",
        "num_ids": 1415
    },
    {
        "number": 4147,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.splitlines()\n    N, A, B, C = map(int, lines[0].split())\n    lengths = list(map(int, lines[1:]))\n    \n    # sort bamboos by length\n    lengths.sort(reverse=True)\n    \n    # initialize variables\n    total_mp = 0\n    used_bamboos = set()\n    \n    # use Extension Magic to increase length of bamboos\n    for i in range(len(lengths)):\n        if lengths[i] >= C:\n            break\n        if lengths[i] >= B:\n            total_mp += 1\n            lengths[i] += 1\n        elif lengths[i] >= A:\n            total_mp += 2\n            lengths[i] += 2\n        else:\n            total_mp += 3\n            lengths[i] += 3\n        used_bamboos.add(i)\n    \n    # use Composition Magic to create bamboos\n    for i in range(len(lengths)):\n        if i not in used_bamboos:\n            for j in range(i+1, len(lengths)):\n                if j not in used_bamboos:\n                    total_mp += 10\n                    if lengths[i] + lengths[j] >= C:\n                        break\n                    elif lengths[i] + lengths[j] >= B:\n                        lengths[i] += 1\n                    elif lengths[i] + lengths[j] >= A:\n                        lengths[i] += 2\n                    else:\n                        lengths[i] += 3\n                    used_bamboos.add(i)\n                    used_bamboos.add(j)\n                    break\n    \n    # print result\n    return str(total_mp) ",
        "test": "assert solution(\"4 100 90 80\\n98\\n40\\n30\") == \"20\"",
        "num_ids": 3089
    },
    {
        "number": 4148,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    shifted_string = \"\"\n\n    for char in S:\n        if char.isalpha():\n            shifted_char = chr(((ord(char) - 65 + N) % 26) + 65)\n        else:\n            shifted_char = char\n        shifted_string += shifted_char\n\n    return shifted_string\n",
        "test": "assert solution(\"2\\nABCXYZ\") == \"CDEZAB\"",
        "num_ids": 1008
    },
    {
        "number": 4149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    from itertools import permutations\n    \n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def prime_index(n: int) -> int:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, ",
        "test": "assert solution(\"1\\n3 6\\n\") == \"6\\n\" ",
        "num_ids": 2246
    },
    {
        "number": 4150,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    skills = list(map(int, stdin.split()[2:]))\n    skills.sort()\n    students = [False] * n\n    teams = [''] * n\n\n    def choose_students(students: list, skills: list, k: int) -> list:\n        result = []\n        left, right = 0, len(skills) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if skills[mid] <= k:\n                result.append(mid)\n                left = mid + 1\n            else:\n                right = mid - 1\n        return result\n\n    for i in range(n):\n        if not students[i]:\n            first_choices = choose_students(students, skills, skills[i])\n            second_choices = choose_students(students, skills, n - skills[i])\n            for j in first_choices:\n                teams[j] = '1'\n                students[j] = True\n            for j in second_choices:\n                teams[j] = '2'\n                students[j] = True\n\n    return ''.join(teams)",
        "test": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"",
        "num_ids": 2416
    },
    {
        "number": 4151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    mod = 998244353\n    count = 0\n    prev = None\n    for i in range(n):\n        if a[i] != prev:\n            count += 1\n            prev = a[i]\n    return str(count * (count + 1) // 2 % mod)\n\nwith open('input.txt', 'r') as stdin, open('output.txt', 'w') as stdout:\n    stdout.write(solution(stdin))",
        "test": "assert solution(\"4\\n1 3 3 7\") == \"4\" ",
        "num_ids": 1211
    },
    {
        "number": 4152,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    def is_power_of_two(num: int) -> bool:\n        return num != 0 and (num & (num - 1)) == 0\n\n    def find_power_of_two(num: int) -> int:\n        for d in range(31):\n            if is_power_of_two(1 << d):\n                if (1 << d) == num:\n                    return d\n            else:\n                break\n        return -1\n\n    def is_good(sequence: List[int]) -> bool:\n        n = len(sequence)\n        for i in range(n):\n            found = False\n            for j in range(n):\n                if i != j:\n                    if is_power_of_two(sequence[i] + sequence[j]):\n                        found = True\n                        break\n            if not found:\n                return False\n        return True\n\n    def remove_elements(sequence: List[int]) -> int:\n        removed = 0\n        while not is_good(sequence):\n            removed += 1\n            sequence.pop(sequence.index(max(sequence)))\n        return removed\n\n    removed = remove_elements(a)\n\n    return str(removed)",
        "test": "assert solution(\"1\\n16\") == \"1\"",
        "num_ids": 1722
    },
    {
        "number": 4153,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    red_count = stdin.count('0')\n    blue_count = stdin.count('1')\n\n    if red_count <= blue_count:\n        return str(red_count)\n    else:\n        return str(blue_count)",
        "test": "assert solution(\"0101\") == \"2\"",
        "num_ids": 798
    },
    {
        "number": 4154,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    gates = []\n    \n    for i in range(1, M + 1):\n        L, R = map(int, lines[i].split())\n        gates.append((L, R))\n    \n    # Initialize a list to store the number of ID cards that allow us to pass all the gates alone\n    count = [0] * (N + 1)\n    \n    # Iterate through each gate and update the count list accordingly\n    for i in range(M):\n        L, R = gates[i]\n        for j in range(L, R + 1):\n            count[j] += 1\n    \n    # Count the number of ID cards that allow us to pass all the gates alone\n    for i in range(1, N + 1):\n        if count[i] == M:\n            count[0] += 1\n    \n    return str(count[0])",
        "test": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"",
        "num_ids": 1236
    },
    {
        "number": 4155,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, h_str = stdin.strip().split('\\n')\n    n = int(n)\n    h = list(map(int, h_str.strip().split()))\n    min_ops = 0\n    prev_h = 0\n    for i in range(n):\n        if h[i] > prev_h:\n            min_ops += h[i] - prev_h\n            prev_h = h[i]\n    return str(min_ops)",
        "test": "assert solution(\"4\\n1 2 2 1\") == \"2\"",
        "num_ids": 2047
    },
    {
        "number": 4156,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split()[0:2])\n    bus_stops = list(map(int, stdin.split()[2:]))\n    \n    def is_valid(x: int) -> bool:\n        passengers = x\n        for a in bus_stops:\n            passengers += a\n            if passengers > w:\n                return False\n        return True\n    \n    count = 0\n    for x in range(w+1):\n        if is_valid(x):\n            count += 1\n    \n    return str(count)",
        "test": "assert solution(\"2 5\\n2 1 -3\") == \"3\"",
        "num_ids": 1124
    },
    {
        "number": 4157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    sequence = list(map(int, input().split()))\n    \n    result = []\n    for i in range(n):\n        if i == 0:\n            result.append(sequence[0])\n            continue\n        \n        if sequence[i] == sequence[i-1] * 2 or sequence[i] == sequence[i-1] // 3:\n            result.append(sequence[i])\n        else:\n            result.append(sequence[i])\n            result.append(sequence[i-1])\n            \n    return \" \".join(map(str, result))",
        "test": "assert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\" ",
        "num_ids": 1978
    },
    {
        "number": 4158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def is_power_of_two(d: int) -> bool:\n        return d != 0 and (d & (d - 1)) == 0\n\n    def get_max_subset(points: list) -> list:\n        n = len(points)\n        dp = [[False for _ in range(n)] for _ in range(n)]\n\n        for i in range(n):\n            dp[i][i] = True\n\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                for k in range(i + 1, j):\n                    if is_power_of_two(points[j] - points[i]) and is_power_of_two(points[k] - points[j]):\n                        dp[i][j] = dp[i][k] = True\n\n        max_size = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if dp[i][j]:\n                    max_size = max(max_size, j - i + 1)\n\n        return [points[i] for i in range(max_size)]\n\n    n, points = stdin.strip().split('\\n')\n    points = list(map(int, points.split()))\n    max_subset = get_max_subset(points)\n\n    return str(len(max_subset)) + \"\\n\" + \" \".join(map(str, max_subset))",
        "test": "assert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"",
        "num_ids": 1671
    },
    {
        "number": 4159,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    takahashi_cookies = A\n    aoki_cookies = B\n\n    for _ in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n\n    return f\"{takahashi_cookies} {aoki_cookies}\"",
        "test": "assert solution(\"2 3 3\") == \"0 2\"",
        "num_ids": 881
    },
    {
        "number": 4160,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    balance = 100\n    years = 0\n    \n    while balance < X:\n        balance += balance * 0.01\n        years += 1\n        \n    return str(years)",
        "test": "assert solution('101') == '1'",
        "num_ids": 673
    },
    {
        "number": 4161,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    total = 0\n    \n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                total += math.gcd(a, math.gcd(b, c))\n                \n    return str(total)",
        "test": "assert solution(\"2\") == \"9\"",
        "num_ids": 740
    },
    {
        "number": 4162,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    f = lambda m: sum(m % ai for ai in a)\n\n    max_f = -1\n    for i in range(1, 10**6):\n        if f(i) > max_f:\n            max_f = f(i)\n\n    return str(max_f)",
        "test": "assert solution('3\\n3 4 6') == '10'  # should pass",
        "num_ids": 1839
    },
    {
        "number": 4163,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    dice_rolls = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    doublet_count = 0\n    for i in range(n - 2):\n        if (dice_rolls[i][0] == dice_rolls[i][1] and\n            dice_rolls[i + 1][0] == dice_rolls[i + 1][1] and\n            dice_rolls[i + 2][0] == dice_rolls[i + 2][1]):\n            doublet_count += 1\n            if doublet_count >= 3:\n                return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"5\\n1 2\\n3 4\\n5 6\\n1 2\\n3 4\") == \"No\"",
        "num_ids": 2467
    },
    {
        "number": 4164,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    pi = 3.141592653589793\n    area_r = pi * r ** 2\n    area_1 = pi * 1 ** 2\n    result = area_r / area_1\n    return str(int(result))",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 576
    },
    {
        "number": 4165,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    sides = [int(x) for x in lines[1].split()]\n\n    max_side = max(sides)\n    sum_other_sides = sum(sides) - max_side\n\n    if max_side < sum_other_sides:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"",
        "num_ids": 888
    },
    {
        "number": 4166,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    N, M = map(int, input_lines[0].split())\n    constraints = []\n\n    for i in range(1, M + 1):\n        s, c = map(int, input_lines[i].split())\n        constraints.append((s, c))\n\n    constraints.sort(key=lambda x: x[0])\n\n    def satisfies_constraints(number: int, constraints: List[Tuple[int, int]]) -> bool:\n        for (s, c) in constraints:\n            if (number // 10 ** (s - 1)) % 10 != c:\n                return False\n        return True\n\n    min_number = 0\n    max_number = 10 ** N - 1\n    result = -1\n\n    while min_number <= max_number:\n        mid = (min_number + max_number) // 2\n        if satisfies_constraints(mid, constraints):\n            result = mid\n            min_number = mid + 1\n        else:\n            max_number = mid - 1\n\n    return str(result)",
        "test": "assert solution(\"2 2\\n2 5\\n2 6\") == \"-1\"",
        "num_ids": 1544
    },
    {
        "number": 4167,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            for c in range(1, N + 1):\n                if (a + b) % K == 0 and (b + c) % K == 0 and (c + a) % K == 0:\n                    count += 1\n    return str(count)",
        "test": "assert solution(\"1 1\") == \"1\" ",
        "num_ids": 1110
    },
    {
        "number": 4168,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    elif N < 0:\n        N = abs(N)\n        res = \"1\"\n    else:\n        res = \"\"\n\n    while N > 0:\n        if N % 2 == 1:\n            res = \"1\" + res\n            N -= 1\n        else:\n            res = \"0\" + res\n        N //= 2\n\n    return res\n",
        "test": "assert solution('0') == '0'",
        "num_ids": 699
    },
    {
        "number": 4169,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    num_stores, num_drinks = map(int, lines[0].split())\n    store_data = [list(map(int, line.split())) for line in lines[1:]]\n\n    total_drinks = 0\n    min_cost = 0\n    store_index = 0\n    while total_drinks < num_drinks:\n        cans_left = num_drinks - total_drinks\n        cans_bought = min(cans_left, store_data[store_index][1])\n        total_drinks += cans_bought\n        min_cost += cans_bought * store_data[store_index][0]\n        store_index += 1\n\n    return str(min_cost)",
        "test": "assert solution(\"10 1000000000\\n1 1000000000\\n1 1000000000\\n1 1000000000\\n1 1000000000\\n1 1000000000\\n1 1000000000\\n1 1000000000\\n1 1000000000\") == \"1000000000\"",
        "num_ids": 1573
    },
    {
        "number": 4170,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n, *heights = map(int, stdin.split())\n    max_moves = 0\n    current_square = 0\n    \n    for i in range(1, n):\n        if heights[i] <= heights[current_square]:\n            max_moves += 1\n            current_square = i\n            \n    return str(max_moves)",
        "test": "assert solution(\"1\\n1\") == \"0\"",
        "num_ids": 1088
    },
    {
        "number": 4171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    a.sort()\n    \n    if len(a) < k:\n        return \"IMPOSSIBLE\"\n    \n    min_operations = 0\n    \n    for i in range(k):\n        if i == 0 or a[i] != a[i-1]:\n            min_operations += a[i]\n            a[i] //= 2\n        else:\n            min_operations += a[i] // 2\n            a[i] //= 2\n            \n    return str(min_operations)",
        "test": "assert solution(\"5 3\\n1 2 3 3 3\") == \"0\" ",
        "num_ids": 1371
    },
    {
        "number": 4172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    a.sort()\n    min_moves = 0\n    equal_elements = 0\n    for i in range(n):\n        if a[i] == a[i-1]:\n            continue\n        else:\n            equal_elements += 1\n            if equal_elements >= k:\n                break\n            min_moves += a[i] - a[i-1] - 1\n            if i != n-1 and a[i+1] - a[i] == 1:\n                equal_elements += 1\n            else:\n                min_moves += 1\n                equal_elements = 1\n    return str(min_moves)",
        "test": "assert solution(\"7 5\\n3 3 2 1 1 1 3\") == \"4\"",
        "num_ids": 1165
    },
    {
        "number": 4173,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    result = []\n\n    for _ in range(q):\n        n, a, b = map(int, stdin.split('\\n')[1].split())\n\n        if n % 2 == 0:\n            result.append(a * (n // 2) + b * (n // 2))\n        else:\n            result.append(a * (n // 2) + b * ((n // 2) + 1))\n\n    return '\\n'.join(map(str, result))\n\ninput_string = \"\"\"4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\"\"\"\n\nprint(solution(input_string)) ",
        "test": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"",
        "num_ids": 1119
    },
    {
        "number": 4174,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, x = map(int, lines[0].split())\n    l = list(map(int, lines[1].split()))\n\n    d = [0]\n    for i in range(1, n + 1):\n        d.append(d[i - 1] + l[i - 1])\n\n    count = 0\n    for i in range(1, n + 1):\n        if d[i] <= x:\n            count += 1\n\n    return str(count)",
        "test": "assert solution('10 10000\\n100 100 99 100 98 99 100 97 99 100 96 99 100 95 99 100 94 99 100 93 99 100 92 99 100 91 99 100 90 99 100 89 99 100 88 99 100 87 99 100 86 99 100 85 99 100 84 99 100 83 99 100 82 99 100 81 99 100 80 99 100 79 99 100 78 99 100 77 99 100 76 99 100 75 99 100 74 99 100 73 99 100 72 99 100 71 99 100 70 99 100 69 99 100 68 99 100 67 99 100 66 99 100 65 99 100 64 99 100 63 99 100 62 99 100 61 99 100 60 99 100 59 99 100 58 99 100 57 99 100 56 99 100 55 99 100 54 99 100 53 99 100 52 99 100 51 99 100 50 99 100 49 99 100 48 99 100 47 99 100 46 99 100 45 99 100 44 99 100 43 99 100 42 99 100 41 99 100 40 99 100 39 99 100 38 99 100 37 99 100 36 99 100 35 99 100 34 99 100 33 99 100 32 99 100 31 99 100 30 99 100 29 99 100 28 99 100 27 99 100 26 99 100 25 99 100 24 99 100 23 99 100 22 99 100 21 99 100 20 99 100 19 99 100 18 99 100 17 99 100 16 99 100 15 99 100 14 99 100 13 99 100 12 99 100 11 99 100 10 99 100 9 99 100 8 99 100 7 99 100 6 99 100 5 99 100 4 99 100 3 99 100 2 99 100 1 99 100 0 99')",
        "num_ids": 2297
    },
    {
        "number": 4175,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(\"\\n\")\n    if len(words) < 2:\n        return \"No\"\n    \n    n = int(words[0])\n    if n < 2 or n > 100:\n        return \"No\"\n    \n    last_char = \"\"\n    word_set = set()\n    \n    for i in range(1, n+1):\n        word = words[i]\n        if not word.isalpha() or not word.islower() or not (1 <= len(word) <= 10):\n            return \"No\"\n        \n        if word in word_set:\n            return \"No\"\n        \n        if i == 1:\n            last_char = word[-1]\n        else:\n            if word[0] != last_char:\n                return \"No\"\n            \n            last_char = word[-1]\n        \n        word_set.add(word)\n    \n    return \"Yes\"",
        "test": "assert solution(\"3\\nhoge\\nhoge\\ngo\") == \"No\"",
        "num_ids": 1122
    },
    {
        "number": 4176,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        raise ValueError(\"A and B cannot be the same value\")\n    pieces = max(a, b) * 2\n    return str(pieces)",
        "test": "assert solution(\"4 5\") == \"10\" ",
        "num_ids": 614
    },
    {
        "number": 4177,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(\"x\" for _ in stdin)",
        "test": "assert solution(\"sardine\") == \"xxxxxxx\"  # should pass",
        "num_ids": 309
    },
    {
        "number": 4178,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    heights = list(map(int, lines[1].split()))\n\n    for i in range(1, N):\n        if heights[i] < heights[i-1]:\n            heights[i] += 1\n            if heights[i] < heights[i-1]:\n                return \"No\"\n\n    return \"Yes\"",
        "test": "assert solution(\"5\\n1 3 1 2 3\") == \"No\"",
        "num_ids": 1057
    },
    {
        "number": 4179,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, M, C = map(int, lines[0].split())\n    B = list(map(int, lines[1].split()))\n    A = [list(map(int, line.split())) for line in lines[2:]]\n\n    correct_codes = 0\n    for a in A:\n        if sum(b * a_i for b, a_i in zip(B, a)) + C > 0:\n            correct_codes += 1\n\n    return str(correct_codes)",
        "test": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"",
        "num_ids": 997
    },
    {
        "number": 4180,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    hundred_bill = 1000\n    change = 0\n    count = n // hundred_bill\n    change = n % hundred_bill\n\n    return str(change)",
        "test": "assert solution(\"1000\") == \"0\"",
        "num_ids": 856
    },
    {
        "number": 4181,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    \n    total_monsters = sum(A)\n    heroes_used = [False] * N\n    max_monsters = 0\n    \n    for i in range(N):\n        if not heroes_used[i]:\n            monsters_defeated = min(total_monsters, B[i])\n            max_monsters += monsters_defeated\n            total_monsters -= monsters_defeated\n            heroes_used[i] = True\n            if i + 1 < N and not heroes_used[i + 1]:\n                monsters_defeated = min(total_monsters, B[i + 1])\n                max_monsters += monsters_defeated\n                total_monsters -= monsters_defeated\n                heroes_used[i + 1] = True\n    \n    return str(max_monsters)",
        "test": "assert solution(\"10\\n1 2 3 4 5 6 7 8 9 10 11\\n1 2 3 4 5 6 7 8 9 10 11\") == \"55\"",
        "num_ids": 1821
    },
    {
        "number": 4182,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M, X, Y = map(int, stdin.split()[:4])\n    xs = list(map(int, stdin.split()[4:4 + N]))\n    ys = list(map(int, stdin.split()[4 + N:]))\n    \n    # Sort cities by their coordinates\n    xs.sort()\n    ys.sort()\n    \n    # Check if war will break out\n    for Z in range(X + 1, Y):\n        if all(x < Z for x in xs) and all(y >= Z for y in ys):\n            return \"No War\"\n    return \"War\"",
        "test": "assert solution(\"1 1 1 1\\n1\\n2\") == \"War\" ",
        "num_ids": 1602
    },
    {
        "number": 4183,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    num_clocks = int(input_lines[0])\n    clock_times = [int(time) for time in input_lines[1:]]\n\n    lcm = min(clock_times)\n    for time in clock_times:\n        lcm = lcm * time // math.gcd(lcm, time)\n\n    return str(lcm)",
        "test": "assert solution(\"2\\n2\\n3\") == \"6\"",
        "num_ids": 2021
    },
    {
        "number": 4184,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split(\"\\n\")[0])\n    weights = list(map(int, stdin.strip().split(\"\\n\")[1].split()))\n\n    min_difference = float('inf')\n    for t in range(1, N):\n        s1 = sum(weights[:t])\n        s2 = sum(weights[t:])\n        difference = abs(s1 - s2)\n        if difference < min_difference:\n            min_difference = difference\n\n    return str(min_difference)",
        "test": "assert solution(\"3\\n1 2 3\") == \"0\"",
        "num_ids": 1134
    },
    {
        "number": 4185,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    matrix = [list(map(int, lines[i].split())) for i in range(1, n+1)]\n    min_moves = 0\n    \n    for i in range(1, m+1):\n        column = [matrix[j][i-1] for j in range(n)]\n        sorted_column = sorted(column)\n        moves = sum(abs(column.index(x) - sorted_column.index(x)) for x in column)\n        min_moves += moves\n    \n        # Cyclic shift the column\n        column[0], column[-1] = column[-1], column[0]\n        for i in range(1, n):\n            matrix[i-1][m-1], matrix[i][m-1] = matrix[i][m-1], matrix[i-1][m-1]\n    \n    return str(min_moves)",
        "test": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"",
        "num_ids": 1921
    },
    {
        "number": 4186,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, students = stdin.split()\n    n = int(n)\n    skills = [int(x) for x in students.split()]\n    pairs = []\n    for i in range(n//2):\n        for j in range(i+1, n//2):\n            pairs.append((i, j))\n\n    max_skill = max(skills)\n    min_problems = max_skill * n\n    min_problems_needed = min_problems\n\n    for pair in pairs:\n        i, j = pair\n        if skills[i] == skills[j]:\n            min_problems_needed -= 2 * skills[i]\n\n    return str(min_problems_needed)",
        "test": "assert solution(\"2\\n1 100\") == \"99\" ",
        "num_ids": 1103
    },
    {
        "number": 4187,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    schedule = stdin.split('\\n')[1].split(' ')\n    current_rest = 0\n    max_rest = 0\n\n    for hour in schedule:\n        if hour == '1':\n            current_rest += 1\n        else:\n            max_rest = max(max_rest, current_rest)\n            current_rest = 0\n\n    return str(max_rest)",
        "test": "assert solution('3\\n0 0 0') == '0' ",
        "num_ids": 1132
    },
    {
        "number": 4188,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    facts = [\n        (\"Mount Everest\", 8848),\n        (\"chapaev\", 958),\n        (\"Online maths competition\", 12766),\n        (\"Nile\", 6695),\n        (\"Amazon\", 1100),\n        (\"Angel Falls\", 807),\n        (\"Uranium\", 146),\n        (\"Oymyakon\", -68),\n        (\"Medusa\", 25),\n        (\"Meow\", 134),\n        (\"Sea otters\", 10000),\n        (\"Alaska\", 663268),\n        (\"Baikal\", 1642),\n        (\"Turkmenistan\", 106),\n    ]\n    fact = facts[int(stdin)-1]\n    return 1 if fact[1] == 0 else 0",
        "test": "assert solution(7) == 0",
        "num_ids": 1289
    },
    {
        "number": 4189,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = {}\n    num_cheeses = int(stdin.split(\"\\n\")[0])\n    for i in range(1, num_cheeses + 1):\n        cheese, cheese_type = stdin.split(\"\\n\")[i].split(\" \")\n        cheeses[cheese] = cheese_type\n\n    unique_cheese_types = set(cheeses.values())\n    return len(unique_cheese_types)",
        "test": "assert solution(\"10\\nstilton soft\\ngruyere soft\\ngouda soft\\ngruyere soft\\ngouda soft\\nparmesan soft\\ngruyere soft\\ngouda soft\\nparmesan soft\\ngruyere soft\") == \"5\" ",
        "num_ids": 1306
    },
    {
        "number": 4190,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n    \n    c = [(a[i] + b[i]) % n for i in range(n)]\n    b.sort(key=lambda x: (c.index(x), x))\n    \n    return ' '.join(map(str, c))",
        "test": "assert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2\\n\" ",
        "num_ids": 1785
    },
    {
        "number": 4191,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    bits = [int(x) for x in stdin.split()]\n    result = 0\n    for bit in bits:\n        result = result ^ bit\n    return str(result)",
        "test": "assert solution(\"0\\n0\\n0\\n0\") == \"0\"",
        "num_ids": 734
    },
    {
        "number": 4192,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    time_to_travel = D / S\n\n    if time_to_travel <= T:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1000 15 80\") == \"Yes\"",
        "num_ids": 715
    },
    {
        "number": 4193,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    def check_bingo(matrix, row, col, n, bingo_numbers):\n        # Check row\n        row_bingo = True\n        for j in range(col, col + n):\n            if matrix[row][j] not in bingo_numbers:\n                row_bingo = False\n                break\n        if row_bingo:\n            return True\n\n        # Check column\n        col_bingo = True\n        for i in range(row, row + n):\n            if matrix[i][col] not in bingo_numbers:\n                col_bingo = False\n                break\n        if col_bingo:\n            return True\n\n        # Check diagonal\n        diag_bingo = True\n        for i in range(row, row + n):\n            j = col + (i - row)\n            if matrix[i][j] not in bingo_numbers:\n                diag_bingo = False\n                break\n        if diag_bingo:\n            return True\n\n        # Check anti-diagonal\n        anti_diag_bingo = True\n        for i in range(row, row + n):\n            j = col - (i - row)\n            if matrix[i][j] not in bingo_numbers:\n                anti_diag_bingo = False\n                break\n        if anti_diag_bingo:\n            return True\n\n        return False\n\n    lines = stdin.splitlines()\n    matrix = [[int(x) for x in line.split()] for line in lines[:3]]\n    bingo_numbers = [int(x) for x in lines[4:]]\n\n    for row in range(3):\n        for col in range(3):\n            if check_bingo(matrix, row, col, 3, bingo_numbers):\n                return \"Yes\"\n\n    return \"No\"",
        "test": "assert solution(\"1 2 3\\n4 5 6\\n7 8 9\\n3\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\") == \"Yes\"",
        "num_ids": 2734
    },
    {
        "number": 4194,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, M, *A = map(int, stdin.split())\n    A.sort(reverse=True)\n    \n    max_days = N\n    for a in A:\n        if a <= max_days:\n            max_days -= a\n        else:\n            return \"-1\"\n    \n    return str(max_days)",
        "test": "assert solution(\"41 2\\n5 6\") == \"30\"",
        "num_ids": 1228
    },
    {
        "number": 4195,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str(N)\n    else:\n        count = 0\n        for i in range(1, 10000):\n            for j in range(D+1):\n                if i % (100 * (j+1)) == 0:\n                    count += 1\n                    if count == N:\n                        return str(i)",
        "test": "assert solution(\"0 1\") == \"1\"",
        "num_ids": 910
    },
    {
        "number": 4196,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, *blackboard = stdin.split()\n    n = int(n)\n    blackboard = [int(x) for x in blackboard]\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def replace_max_gcd(blackboard):\n        max_gcd = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                new_gcd = gcd(blackboard[i], blackboard[j])\n                if new_gcd > max_gcd:\n                    max_gcd = new_gcd\n        return max_gcd\n\n    max_gcd = replace_max_gcd(blackboard)\n\n    return str(max_gcd)",
        "test": "assert solution(\"3\\n7 6 8\") == \"2\"",
        "num_ids": 1180
    },
    {
        "number": 4197,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    a_list = [int(x) for x in lines[1].split()]\n    \n    a_dict = {}\n    for i in range(n):\n        a_dict[a_list[i]] = i + 1\n    \n    result = []\n    for i in range(n):\n        result.append(a_dict[i+1])\n    \n    return \" \".join(map(str, result))",
        "test": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"",
        "num_ids": 1428
    },
    {
        "number": 4198,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    N = 10**9\n    while X >= 0:\n        if A * N + B * len(str(N)) <= X:\n            N -= 1\n        else:\n            return str(N + 1) if A * N + B * len(str(N)) == X else str(0)",
        "test": "assert solution(\"1 1 1\") == \"0\"",
        "num_ids": 1003
    },
    {
        "number": 4199,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    heights = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for height in heights:\n        if height >= k:\n            count += 1\n\n    return str(count)",
        "test": "assert solution('4 150\\n150 140 100 200') == '2'",
        "num_ids": 1140
    },
    {
        "number": 4200,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    votes = list(map(int, stdin.split()[2:]))\n    total_votes = sum(votes)\n    min_vote_threshold = total_votes // (4 * m)\n\n    popular_items = [i for i, vote in enumerate(votes) if vote >= min_vote_threshold]\n\n    if len(popular_items) >= m:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"",
        "num_ids": 1218
    },
    {
        "number": 4201,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    H, W, K = map(int, stdin.split()[:3])\n    grid = stdin.split(\"\\n\")[1:]\n\n    # Create a helper function to count the black squares in a grid\n    def count_black_squares(grid: List[str]) -> int:\n        count = 0\n        for row in grid:\n            count += row.count(\"#\")\n        return count\n\n    # Initialize variables\n    choices = 0\n    rows = [False] * H\n    cols = [False] * W\n\n    # Iterate through all possible choices\n    for i in range(H+1):\n        for j in range(W+1):\n            # Choose i rows and j columns\n            for k in range(i):\n                rows[k] = True\n            for k in range(j):\n                cols[k] = True\n\n            # Count the black squares in the remaining grid\n            remaining_grid = [\n                [cell for cell, col in zip(row, cols) if not col]\n                for row, row_in_grid in zip(grid, rows)\n                if not row_in_grid\n            ]\n            black_squares = count_black_squares(remaining_grid)\n\n            # Check if the number of black squares is equal to K\n            if black_squares == K:\n                choices += 1\n\n            # Unchoose the rows and columns\n            for k in range(i):\n                rows[k] = False\n            for k in range(j):\n                cols[k] = False\n\n    return str(choices)",
        "test": "assert solution(\"6 6 26\") == \"0\" ",
        "num_ids": 1556
    },
    {
        "number": 4202,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    min_value = 2019\n    \n    for i in range(L, R):\n        for j in range(i+1, R+1):\n            product = i * j % 2019\n            if product < min_value:\n                min_value = product\n                \n    return str(min_value)",
        "test": "assert solution(\"1000 2000\") == \"0\"",
        "num_ids": 992
    },
    {
        "number": 4203,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if not (S[0] == 'A' and S.count('C') == 1 and all(c.islower() for c in S[3:-1])):\n        return 'WA'\n    return 'AC'",
        "test": "assert solution(\"AtCoder\") == \"AC\"",
        "num_ids": 720
    },
    {
        "number": 4204,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    K = int(K)\n    \n    for day in range(5 * 10**15):\n        new_S = \"\"\n        for char in S:\n            if char == \"2\":\n                new_S += \"22\"\n            elif char == \"3\":\n                new_S += \"333\"\n            elif char == \"4\":\n                new_S += \"4444\"\n            elif char == \"5\":\n                new_S += \"55555\"\n            elif char == \"6\":\n                new_S += \"666666\"\n            elif char == \"7\":\n                new_S += \"7777777\"\n            elif char == \"8\":\n                new_S += \"88888888\"\n            elif char == \"9\":\n                new_S += \"999999999\"\n            else:\n                new_S += char\n        S = new_S\n    \n    return S[K-1]",
        "test": "assert solution(\"1214\\n4\") == \"2\"",
        "num_ids": 1457
    },
    {
        "number": 4205,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    p = list(map(int, lines[1].split()))\n\n    # check if p is a permutation of {1, 2, ..., N}\n    if set(p) != set(range(1, N + 1)):\n        return 'NO'\n\n    # check if p can be sorted in ascending order by swapping p_i and p_j\n    for i in range(N):\n        for j in range(i + 1, N):\n            if p[i] > p[j]:\n                return 'YES'\n    return 'NO'",
        "test": "assert solution(\"5\\n5 2 3 4 1\") == \"YES\"",
        "num_ids": 1249
    },
    {
        "number": 4206,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    max_count = 0\n    while s > 0:\n        count = 0\n        while s % 3 == 0:\n            s //= 3\n            count += 1\n        if count > max_count:\n            max_count = count\n        s //= 3\n    return str(max_count)",
        "test": "assert solution(\"6\") == \"1\"",
        "num_ids": 1063
    },
    {
        "number": 4207,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    max_zeros = 0\n    for d in range(-10**9, 10**10):\n        c = [d * a[i] + b[i] for i in range(n)]\n        zeros = c.count(0)\n        max_zeros = max(max_zeros, zeros)\n    \n    return str(max_zeros)",
        "test": "assert solution(\"\"\"5",
        "num_ids": 1272
    },
    {
        "number": 4208,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    left_colors = stdin.readline().strip()\n    right_colors = stdin.readline().strip()\n\n    max_pairs = 0\n    compatible_pairs = []\n\n    for i in range(n):\n        for j in range(n):\n            if left_colors[i] == right_colors[j] or left_colors[i] == '?' or right_colors[j] == '?' or (i, j) in compatible_pairs:\n                compatible_pairs.append((i, j))\n                max_pairs += 1\n\n    output = str(max_pairs) + '\\n'\n    for pair in compatible_pairs:\n        output += ' '.join(map(str, pair)) + '\\n'\n\n    return output\n\ninput_string = '''10\ncodeforces\ndodivthree\n'''\nprint(solution(input_string))\n\ninput_string = '''7\nabaca?b\nzabbbcc\n'''\nprint(solution(input_string))\n\ninput_string = '''9\nbambarbia\nhellocode\n'''\nprint(solution(input_string))\n\ninput_string = '''10\ncode??????\n??????test\n'''\nprint(solution(input_string)) ",
        "test": "assert solution(\"10\\ncode??????\\n??????test\") == \"10\\n6 2\\n1 6\\n7 3\\n3 5\\n4 8\\n9 7\\n5 1\\n2 4\\n10 9\\n8 10\" ",
        "num_ids": 2007
    },
    {
        "number": 4209,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split(\"\\n\")\n    n = int(n)\n    a = list(map(int, a.split()))\n\n    block_sum = sum(a) // n\n\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            if sum(a[i:j+1]) == block_sum:\n                blocks.append((i, j))\n\n    return str(len(blocks)) + \"\\n\" + \"\\n\".join(f\"{i} {j}\" for i, j in blocks) ",
        "test": "assert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\\n2 2\\n3 3\"",
        "num_ids": 2086
    },
    {
        "number": 4210,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            concatenated = int(str(a[i]) + str(a[j]))\n            if concatenated % k == 0:\n                count += 1\n    \n    return str(count)",
        "test": "assert solution(\"5 2\\n3 7 19 3 3\") == \"0\"",
        "num_ids": 1099
    },
    {
        "number": 4211,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.splitlines()[0])\n    B = list(map(int, stdin.splitlines()[1].split()))\n\n    # Initialize A with all 0's\n    A = [0] * N\n\n    # Fill in the first element of A\n    A[0] = B[0]\n\n    # Fill in the rest of A based on the given condition\n    for i in range(1, N):\n        A[i] = max(B[i-1], A[i-1])\n\n    # Calculate the sum of the elements in A\n    total_sum = sum(A)\n\n    # Return the result\n    return str(total_sum)",
        "test": "assert solution(\"5\\n1 1 1 1 1\") == \"5\"",
        "num_ids": 1278
    },
    {
        "number": 4212,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    def get_input() -> tuple:\n        input_values = list(map(int, input().split()))\n        N, M, Q = input_values[0:3]\n        quadruples = [input_values[i:i+4] for i in range(3, len(input_values), 4)]\n        return N, M, Q, quadruples\n\n    def get_sequence(N, M) -> list:\n        return [i for i in range(1, M+1)]\n\n    def score(A, quadruples) -> int:\n        total_score = 0\n        for quadruple in quadruples:\n            a, b, c, d = quadruple\n            if A[b-1] - A[a-1] == c:\n                total_score += d\n        return total_score\n\n    N, M, Q, quadruples = get_input()\n    A = get_sequence(N, M)\n    max_score = score(A, quadruples)\n\n    return str(max_score)",
        "test": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"",
        "num_ids": 1825
    },
    {
        "number": 4213,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    max_diff = 0\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                diff = abs(a[i] - a[j])\n                if diff > max_diff:\n                    max_diff = diff\n\n    return str(max_diff)",
        "test": "assert solution(\"4\\n1 4 6 3\") == \"5\" ",
        "num_ids": 1065
    },
    {
        "number": 4214,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    N = int(stdin.split('\\n')[0])\n    towns = []\n\n    for i in range(1, N + 1):\n        x, y = map(int, stdin.split('\\n')[i].split())\n        towns.append((x, y))\n\n    def distance(p1, p2):\n        return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)\n\n    total_distance = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            total_distance += distance(towns[i], towns[j])\n\n    average_length = total_distance / (N * (N - 1))\n\n    return f\"{average_length:.6f}\"",
        "test": "assert solution('3\\n0 0\\n1 0\\n0 1\\n') == '2.2761423749'",
        "num_ids": 1462
    },
    {
        "number": 4215,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    uncovered_length = A - 2 * B\n    if uncovered_length < 0:\n        uncovered_length = 0\n    return str(uncovered_length)",
        "test": "assert solution(\"12 4\") == \"4\"",
        "num_ids": 561
    },
    {
        "number": 4216,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    min_f = float('inf')\n    min_pair = None\n\n    for a in range(1, N + 1):\n        for b in range(a, N + 1):\n            if a * b == N:\n                f = max(len(str(a)), len(str(b)))\n                if f < min_f:\n                    min_f = f\n                    min_pair = (a, b)\n\n    return str(min_f)",
        "test": "assert solution('10000') == '3'",
        "num_ids": 1148
    },
    {
        "number": 4217,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    # split the input by lines\n    lines = stdin.split(\"\\n\")\n\n    # read the first line containing the number of people and foods\n    N, M = map(int, lines[0].split())\n\n    # read the answers for each person\n    answers = [list(map(int, lines[i].split())) for i in range(1, N+1)]\n\n    # initialize a list to count the number of people who like each food\n    likes = [0] * M\n\n    # iterate over the answers for each person\n    for answer in answers:\n        # iterate over the foods liked by the person\n        for food in answer[1:]:\n            # increment the number of people who like the food\n            likes[food-1] += 1\n\n    # find the number of foods liked by all the N people\n    result = sum(1 for count in likes if count == N)\n\n    return str(result)",
        "test": "assert solution('3 4\\n2 1 3\\n3 1 2 3\\n2 3 2') == '1'",
        "num_ids": 1346
    },
    {
        "number": 4218,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    odd_count = sum(1 for i in range(1, n+1) if i % 2 != 0)\n    total_count = n\n    probability = odd_count / total_count\n    return '{:.10f}'.format(probability)",
        "test": "assert solution(\"4\") == \"0.5000000000\"",
        "num_ids": 815
    },
    {
        "number": 4219,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    stdin = stdin.split('\\n')[1:]\n    testimonies = []\n    for i in range(N):\n        A_i = int(stdin[i * 2])\n        for j in range(A_i):\n            testimony = stdin[i * 2 + 1 + j].split()\n            x = int(testimony[0])\n            y = int(testimony[1])\n            testimonies.append((i + 1, x, y))\n    \n    honest_persons = set()\n    for testimony in testimonies:\n        i, x, y = testimony\n        if y == 1:\n            honest_persons.add(x)\n    \n    return str(len(honest_persons))",
        "test": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"",
        "num_ids": 2361
    },
    {
        "number": 4220,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split()\n    K = int(K)\n\n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + \"...\"",
        "test": "assert solution(\"7\\nnikoandsolstice\") == \"nikoand...\"",
        "num_ids": 629
    },
    {
        "number": 4221,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip()\n    if word[-1] == 's':\n        return word + 'es'\n    else:\n        return word + 's'",
        "test": "assert solution('apple') == 'apples'",
        "num_ids": 442
    },
    {
        "number": 4222,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    snakes = {i+1: [] for i in range(n)}\n    for i in range(1, k+1):\n        d, *snack_snakes = stdin.split('\\n')[i].split()\n        d = int(d)\n        for snake in snack_snakes:\n            snakes[int(snake)].append(i)\n    return str(len([snake for snake, snacks in snakes.items() if len(snacks) == 0]))\n",
        "test": "assert solution(\"5 2\\n3\\n1 3 5\\n1\\n2 3\") == \"3\"",
        "num_ids": 1396
    },
    {
        "number": 4223,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # split input into N and S\n    N, S = stdin.split()\n    N = int(N)\n\n    # initialize result and current color\n    result = \"\"\n    current_color = None\n\n    # iterate through the slimes\n    for i in range(N):\n        # if color is different than current color, add it to result\n        if S[i] != current_color:\n            result += S[i]\n            current_color = S[i]\n\n    return str(len(result))",
        "test": "assert solution(\"10\\naabbbbaaca\") == \"5\"",
        "num_ids": 761
    },
    {
        "number": 4224,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N, seq = stdin.split()\n    N = int(N)\n    seq = list(map(int, seq.split()))\n\n    def can_perform_operation(seq: List[int]) -> bool:\n        for i in range(len(seq)):\n            if seq[i] % 2 == 0:\n                seq[i] //= 2\n            elif seq[i] % 3 == 0:\n                seq[i] *= 3\n            else:\n                return False\n        return True\n\n    count = 0\n    while can_perform_operation(seq):\n        count += 1\n\n    return str(count)",
        "test": "assert solution(\"1\\n5\") == \"0\"",
        "num_ids": 1331
    },
    {
        "number": 4225,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    if K == 0:\n        return \"0\"\n    elif K > A + B + C:\n        return \"Impossible\"\n    elif K == A + B + C:\n        return str(A - B + C)\n    elif A >= B + C:\n        return str(K)\n    elif B >= A + C:\n        return str(K - (A - B))\n    else:\n        return str(K - (A - C))",
        "test": "assert solution(\"0 0 0 0\") == \"0\"",
        "num_ids": 837
    },
    {
        "number": 4226,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    total_animals = X\n    total_legs = Y\n\n    for cranes in range(total_animals + 1):\n        turtles = total_animals - cranes\n        if cranes * 2 + turtles * 4 == total_legs:\n            return \"Yes\"\n\n    return \"No\"",
        "test": "assert solution('2 12') == 'No'",
        "num_ids": 676
    },
    {
        "number": 4227,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    edges = [tuple(map(int, line.split())) for line in lines[1:]]\n    \n    def dfs(u: int, visited: set) -> int:\n        if u == 1:\n            visited.add(1)\n        for v in range(2, N + 1):\n            if (u, v) not in edges and (v, u) not in edges and v not in visited:\n                visited.add(v)\n                dfs(v, visited)\n        if len(visited) == N:\n            return 1\n        return 0\n    \n    count = 0\n    for i in range(1, N + 1):\n        count += dfs(i, set())\n    \n    return str(count)",
        "test": "assert solution('6 7\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n2 3\\n2 4\\n2 5\\n2 6\\n3 4\\n3 5\\n3 6\\n4 5\\n4 6\\n5 6\\n6 7\\n') == '2'",
        "num_ids": 2324
    },
    {
        "number": 4228,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = [L+i-1 for i in range(1, N+1)]\n    min_diff = float('inf')\n    min_pie = 0\n    \n    for i in range(N):\n        remaining_apples = apples[:i] + apples[i+1:]\n        pie_flavor = sum(remaining_apples)\n        diff = abs(pie_flavor - (sum(apples) - apples[i]))\n        if diff < min_diff:\n            min_diff = diff\n            min_pie = pie_flavor\n            \n    return str(min_pie)",
        "test": "assert solution(\"1 1\") == \"0\"",
        "num_ids": 881
    },
    {
        "number": 4229,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    # Calculate the sum of all numbers among the first N terms of the FizzBuzz sequence\n    sum = 0\n    for i in range(1, N+1):\n        if i % 3 == 0 and i % 5 == 0:\n            continue\n        elif i % 3 == 0:\n            continue\n        elif i % 5 == 0:\n            continue\n        else:\n            sum += i\n\n    return str(sum)",
        "test": "assert solution(\"15\") == \"60\"",
        "num_ids": 905
    },
    {
        "number": 4230,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    X, N = map(int, stdin.split()[0:2])\n    sequence = list(map(int, stdin.split()[2:]))\n\n    # Find the numbers not in the sequence\n    numbers = set(range(1, 101)) - set(sequence)\n\n    # Find the number closest to X\n    closest_number = min(numbers, key=lambda x: abs(x - X))\n\n    return str(closest_number)",
        "test": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"",
        "num_ids": 1205
    },
    {
        "number": 4231,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    def paint(H: int, W: int, h: int, w: int) -> int:\n        black_cells = h * W + w * H - h * w\n        white_cells = H * W - black_cells\n        return white_cells\n\n    def read_input(stdin: str) -> tuple:\n        lines = stdin.split(\"\\n\")\n        H, W = map(int, lines[0].split())\n        h, w = map(int, lines[1].split())\n        return H, W, h, w\n\n    H, W, h, w = read_input(stdin)\n    result = paint(H, W, h, w)\n    return str(result) ",
        "test": "assert solution(\"3 2\\n2 1\") == \"1\"",
        "num_ids": 883
    },
    {
        "number": 4232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def find_x(sequence: List[int], k: int) -> int:\n        sequence.sort()\n        n = len(sequence)\n        for x in range(1, 10**9+1):\n            count = 0\n            left, right = 0, n-1\n            while left <= right:\n                mid = (left+right)//2\n                if sequence[mid] <= x:\n                    count += right-mid\n                    left = mid+1\n                else:\n                    right = mid-1\n            if count == k:\n                return x\n        return -1\n\n    n, k = map(int, stdin.split()[:2])\n    sequence = list(map(int, stdin.split()[2:]))\n\n    x = find_x(sequence, k)\n    return str(x)\n\ninput_string = input()\nresult = solution(input_string)\nprint(result) ",
        "test": "assert solution(\"\"\"7 2",
        "num_ids": 1087
    },
    {
        "number": 4233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    def is_star_inside(x, y, s, n, m):\n        return 1 <= x <= n and 1 <= y <= m and x + s <= n + 1 and y + s <= m + 1\n\n    def draw_star(x, y, s):\n        stars.append((x, y, s))\n        directions = [(0, -1), (1, -1), (1, 0), (1, 1), (0, 1), (-1, 1), (-1, 0), (-1, -1)]\n        for direction in directions:\n            new_x, new_y = x, y\n            while is_star_inside(new_x, new_y, s, n, m):\n                new_x += direction[0]\n                new_y += direction[1]\n            draw_star(new_x - direction[0], new_y - direction[1], s)\n\n    def find_stars(grid: List[str]) -> int:\n        stars = []\n        n = len(grid)\n        m = len(grid[0])\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    draw_star(i + 1, j + 1, 1)\n        return len(stars)\n\n    def print_stars(stars: List[Tuple[int, int, int]]) -> None:\n        print(len(stars))\n        for star in stars:\n            print(star[0], star[1], star[2])\n\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    grid = [line for line in lines[1:n + 1]]\n    stars_count = find_stars(grid)\n    if stars_count == n * m:\n        print_stars(stars)\n    else:\n        print(-1)\n\ninput_str = \"\"\"6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\"\"\"\n\nsolution(input_str) ",
        "test": "assert solution(\"3 3\\n*.*\\n.*.\\n*.*\\n.....\") == \"-1\" ",
        "num_ids": 2964
    },
    {
        "number": 4234,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split(\"\\n\")\n    n = int(n)\n    good = True\n    i = 1\n    while i < n:\n        if s[i] == s[i - 1]:\n            s = s[:i] + s[i + 1:]\n            n -= 1\n            i -= 1\n        i += 2\n    return n - 1\n",
        "test": "assert solution(\"bad\") == (1, \"a\")",
        "num_ids": 883
    },
    {
        "number": 4235,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    edges = [(int(x) - 1, int(y) - 1) for x, y in map(str.split, stdin.split('\\n')[2:])]\n    \n    def dfs(u, visited):\n        visited[u] = True\n        for v, w in edges:\n            if v == u and not visited[w]:\n                if dfs(w, visited):\n                    return True\n            elif w == u and not visited[v]:\n                if dfs(v, visited):\n                    return True\n        return False\n    \n    for u in range(n):\n        visited = [False] * n\n        if dfs(u, visited):\n            return \"NO\"\n    \n    result = \"1\" * m\n    return \"YES\\n\" + result\n\ninput_data = \"\"\"6 5\n1 5\n2 1\n1 4\n3 1\n6 1\"\"\"\n\nprint(solution(input_data)) ",
        "test": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") != \"NO\"",
        "num_ids": 1945
    },
    {
        "number": 4236,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split()[2:])\n        segments.append((l, r))\n\n    points = set()\n    for i in range(1, m+1):\n        points.add(i)\n\n    for segment in segments:\n        if segment[0] == segment[1]:\n            points.discard(segment[0])\n        else:\n            for i in range(segment[0], segment[1]+1):\n                points.discard(i)\n\n    points = list(points)\n    points.sort()\n\n    if len(points) == 0:\n        return \"0\"\n    else:\n        return str(len(points)) + \"\\n\" + \" \".join(map(str, points))",
        "test": "assert solution(\"1 7\\n1 7\") == \"0\" ",
        "num_ids": 1280
    },
    {
        "number": 4237,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n\n    for i in range(A, B + 1):\n        if i % C != 0 and i % D != 0:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"4 9 2 3\") == \"2\"",
        "num_ids": 1911
    },
    {
        "number": 4238,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(n))\n    if digits_sum % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"123456789\") == \"Yes\"",
        "num_ids": 580
    },
    {
        "number": 4239,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    operations = 0\n    current_sum = 0\n\n    while current_sum < N:\n        operations += 1\n        if operations % 2 == 0:\n            current_sum += 6 ** operations\n        else:\n            current_sum += 9 ** operations\n\n    return str(operations)",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 811
    },
    {
        "number": 4240,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if len(S) != len(T):\n        return \"No\"\n\n    for i in range(len(S)):\n        if S == T:\n            return \"Yes\"\n        S = S[-1] + S[:-1]\n\n    return \"No\"",
        "test": "assert solution(\"abcde\\naaaab\") == \"No\"",
        "num_ids": 637
    },
    {
        "number": 4241,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    min_changes = len(s)\n    for i in range(len(s) - len(t) + 1):\n        current_changes = 0\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                current_changes += 1\n        min_changes = min(min_changes, current_changes)\n    return str(min_changes)",
        "test": "assert solution(\"abc\\nabc\") == \"0\"",
        "num_ids": 791
    },
    {
        "number": 4242,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    \n    # Find all divisors of A and B\n    divisors_A = []\n    divisors_B = []\n    for i in range(1, A+1):\n        if A % i == 0:\n            divisors_A.append(i)\n    for i in range(1, B+1):\n        if B % i == 0:\n            divisors_B.append(i)\n    \n    # Find the intersection of the two lists\n    divisors = list(set(divisors_A) & set(divisors_B))\n    \n    # Sort the list in descending order\n    divisors.sort(reverse=True)\n    \n    # Return the K-th largest number\n    return str(divisors[K-1])",
        "test": "assert solution('8 12 2') == '2'",
        "num_ids": 920
    },
    {
        "number": 4243,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    happiness = 0\n    if x >= 500:\n        happiness += (x // 500) * 1000\n        x %= 500\n    happiness += x // 5 * 5\n    return str(happiness)",
        "test": "assert solution('0') == '0'",
        "num_ids": 1087
    },
    {
        "number": 4244,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    coordinates = [int(x) for x in lines[1].split()]\n\n    def stamina_cost(coordinate):\n        return sum((x - coordinate) ** 2 for x in coordinates)\n\n    min_cost = float('inf')\n    for i in range(min(coordinates), max(coordinates) + 1):\n        cost = stamina_cost(i)\n        min_cost = min(min_cost, cost)\n\n    return str(min_cost)",
        "test": "assert solution(\"1\\n2\") == \"0\"",
        "num_ids": 1160
    },
    {
        "number": 4245,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    count = 0\n    while B > 0:\n        count += 1\n        B -= A\n    return str(count)",
        "test": "assert solution(\"4 10\") == \"3\"",
        "num_ids": 624
    },
    {
        "number": 4246,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"CSS\\nCSR\") == \"2\"",
        "num_ids": 635
    },
    {
        "number": 4247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = stdin.split()[1:]\n    count = 0\n\n    for i in range(1, n - 1):\n        if p[i - 1] > p[i] < p[i + 1]:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"",
        "num_ids": 836
    },
    {
        "number": 4248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    points = []\n    for i in range(1, n+1):\n        x, y = map(float, stdin.split('\\n')[i].split())\n        points.append((x, y))\n    \n    def find_angle(a: tuple, b: tuple, c: tuple) -> float:\n        ab = (b[0] - a[0], b[1] - a[1])\n        cb = (b[0] - c[0], b[1] - c[1])\n        dot_product = ab[0] * cb[0] + ab[1] * cb[1]\n        return math.degrees(math.acos(dot_product / (math.sqrt(ab[0]**2 + ab[1]**2) * math.sqrt(cb[0]**2 + cb[1]**2))))\n    \n    def angle_sum(points: list) -> float:\n        total_angle = 0\n        n = len(points)\n        for i in range(n):\n            total_angle += find_angle(points[i], points[(i+1)%n], points[(i+2)%n])\n        return total_angle\n    \n    return str(angle_sum(points) / (n-2))[:6]",
        "test": "assert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.040\"",
        "num_ids": 3109
    },
    {
        "number": 4249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    return str(min_days_to_finish(n, m, a))\n\ndef",
        "test": "assert solution(\"5 16\\n5 5 5 5 5\") == \"2\"",
        "num_ids": 1756
    },
    {
        "number": 4250,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = list(map(int, stdin.split()[2:]))\n    max_copies = 0\n    result = []\n    \n    for i in range(len(s) - k + 1):\n        copy_count = 0\n        t = s[i:i+k]\n        \n        for j in range(len(s) - k + 1):\n            if s[j:j+k] == t:\n                copy_count += 1\n                s[j:j+k] = []\n                \n        if copy_count > max_copies:\n            max_copies = copy_count\n            result = t\n            \n    return \" \".join(map(str, result))",
        "test": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"",
        "num_ids": 1821
    },
    {
        "number": 4251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.readline().split())\n    matrix = []\n    for _ in range(rows):\n        row = list(map(int, stdin.readline().split()))\n        matrix.append(row)\n\n    k_max = 0\n    for k in range(1, rows * cols):\n        accept = True\n        for i in range(rows):\n            row = [matrix[i][j] for j in range(cols)]\n            row.sort()\n            for j in range(cols - 1):\n                if abs(row[j] - row[j + 1]) < k:\n                    accept = False\n                    break\n            if not accept:\n                break\n        if accept:\n            k_max = k\n\n    return str(k_max)",
        "test": "assert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n') == '3' ",
        "num_ids": 1612
    },
    {
        "number": 4252,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    if \"xxx\" in s:\n        return str(s.count(\"xxx\"))\n    return \"0\"\n",
        "test": "assert solution(\"6\\nxxxiii\") == \"1\"",
        "num_ids": 660
    },
    {
        "number": 4253,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r**2\n    return str(area)",
        "test": "assert solution(\"4\") == \"48\"",
        "num_ids": 351
    },
    {
        "number": 4254,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    sheep, wolves = map(int, stdin.split())\n    if wolves >= sheep:\n        return \"unsafe\"\n    else:\n        return \"safe\"",
        "test": "assert solution(\"100 100\") == \"unsafe\" ",
        "num_ids": 476
    },
    {
        "number": 4255,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given the lengths of the three sides of a right triangle, find the area of the triangle.\n\n    Args:\n    stdin (str): The input string containing the side lengths in the format \"|AB| |BC| |CA|\".\n\n    Returns:\n    str: The area of the triangle, rounded to the nearest integer.\n    \"\"\"\n    AB, BC, CA = list(map(int, stdin.split()))\n    area = (AB * BC) / 2\n    return str(round(area))",
        "test": "assert solution(\"3 4 5\") == \"6\"",
        "num_ids": 746
    },
    {
        "number": 4256,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A > B:\n        return \"0\"\n    return str(min(B // A, C)) ",
        "test": "assert solution(\"2 11 4\") == \"4\" ",
        "num_ids": 521
    },
    {
        "number": 4257,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    result = a * b\n    return str(result)",
        "test": "assert solution(\"2 5\") == \"10\"",
        "num_ids": 451
    },
    {
        "number": 4258,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    total_biscuits = 0\n    for i in range(1, T + 1):\n        if i % A == 0:\n            total_biscuits += B\n    return str(total_biscuits)",
        "test": "assert solution(\"3 5 7\") == \"10\"",
        "num_ids": 749
    },
    {
        "number": 4259,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split()))\n    k, a, b = inputs\n    \n    # Check if a multiple of k is within the range [a, b]\n    for i in range(a, b+1):\n        if i % k == 0:\n            return \"OK\"\n    \n    return \"NG\"",
        "test": "assert solution('17\\n1 2\\n') == 'NG'",
        "num_ids": 704
    },
    {
        "number": 4260,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    t = T / X\n    return str(round(t, 3))",
        "test": "assert solution(\"3 2\") == \"1.5\"  # Test case 2",
        "num_ids": 569
    },
    {
        "number": 4261,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    transferable_water = min(A - B, C)\n    new_B = B + transferable_water\n    new_C = C - transferable_water\n    return str(new_C)",
        "test": "assert solution(\"6 4 3\") == \"1\"",
        "num_ids": 573
    },
    {
        "number": 4262,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    P = list(map(int, lines[1].split()))\n    Q = list(map(int, lines[2].split()))\n\n    # Find the lexicographically smallest permutations P and Q\n    def find_lexicographically_smallest(P: list[int], Q: list[int], N: int) -> tuple[list[int], list[int], int]:\n        min_P = list(P)\n        min_Q = list(Q)\n        min_P_index = 0\n        min_Q_index = 0\n\n        for i in range(N):\n            for j in range(i, N):\n                if P[i:j+1] < P[min_P_index:min_P_index+j+1]:\n                    min_P_index = i\n                    min_P = P[i:j+1]\n                if Q[i:j+1] < Q[min_Q_index:min_Q_index+j+1]:\n                    min_Q_index = i\n                    min_Q = Q[i:j+1]\n\n        return min_P, min_Q, min_P_index\n\n    min_P, min_Q, min_P_index = find_lexicographically_smallest(P, Q, N)\n\n    # Find the index of the lexicographically smallest permutation in the list of permutations of size N\n    def find_index(min_P: list[int], N: int) -> int:\n        index = 0\n        for i in range(N):\n            for j in range(i, N):\n                if min_P == list(range(1, N+1))[i:j+1]:\n                    index = i\n                    break\n            if index != 0:\n                break\n\n        return index\n\n    a = find_index(min_P, N)\n    b = find_index(min_Q, N)\n\n    return str(abs(a - b))",
        "test": "assert solution(\"2\\n1 2\\n1 2\") == \"0\"",
        "num_ids": 1809
    },
    {
        "number": 4263,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    max_length = 0\n\n    for i in range(len(S)):\n        for j in range(i + 1, len(S) + 1):\n            substring = S[i:j]\n            if all(c in 'ACGT' for c in substring):\n                max_length = max(max_length, len(substring))\n\n    return max_length",
        "test": "assert solution(\"ACTG\") == 4",
        "num_ids": 767
    },
    {
        "number": 4264,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N + 1):\n        if len(str(i)) % 2 != 0:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"11\") == \"9\" ",
        "num_ids": 786
    },
    {
        "number": 4265,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s_list = list(s)\n    t_list = list(t)\n    count = 0\n\n    for i in range(len(s)):\n        if s_list[i] != t_list[i]:\n            s_list[i] = t_list[i]\n            count += 1\n\n    return count",
        "test": "assert solution(\"cupofcoffee\\ncupofhottea\") == 4 ",
        "num_ids": 702
    },
    {
        "number": 4266,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    \n    lower_bound = max(1, X - K + 1)\n    upper_bound = min(1000000, X + K - 1)\n    \n    return \" \".join(map(str, range(lower_bound, upper_bound + 1)))",
        "test": "assert solution(\"1 3\") == \"3\"",
        "num_ids": 676
    },
    {
        "number": 4267,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    temperature = int(stdin)\n    if temperature >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"25\") == \"No\"",
        "num_ids": 409
    },
    {
        "number": 4268,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, D = map(int, lines[0].split())\n    points = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    def distance(p1: tuple, p2: tuple) -> float:\n        return ((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2) ** 0.5\n\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if int(distance(points[i], points[j])) == distance(points[i], points[j]):\n                count += 1\n\n    return str(count)\n",
        "test": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"",
        "num_ids": 1184
    },
    {
        "number": 4269,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return \"Bad\"\n    else:\n        return \"Good\"",
        "test": "assert solution(\"3776\") == \"Bad\"",
        "num_ids": 596
    },
    {
        "number": 4270,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, values = stdin.split('\\n')\n    N = int(N)\n    values = list(map(int, values.split()))\n\n    while len(values) > 1:\n        new_values = []\n        for i in range(0, len(values), 2):\n            if i + 1 < len(values):\n                new_values.append((values[i] + values[i + 1]) / 2)\n            else:\n                new_values.append(values[i])\n        values = new_values\n\n    return str(values[0])",
        "test": "assert solution(\"2\\n3 4\") == \"3.5\"  # Test case 1",
        "num_ids": 1363
    },
    {
        "number": 4271,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    C = list(map(int, lines[3].split()))\n\n    satisfaction = 0\n    for i in range(n):\n        satisfaction += B[i]\n        if i < n - 1:\n            satisfaction += C[i]\n\n    return str(satisfaction)\n\nstdin = \"3\\n3 1 2\\n2 5 4\\n3 6\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"2\\n1 2\\n2 3\\n1\") == \"6\"  # Sample Input 2",
        "num_ids": 1068
    },
    {
        "number": 4272,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n\n    count = 0\n    for i in range(N - 2):\n        if S[i:i+3] == \"ABC\":\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"10\\nZABCDBABCQ\") == \"2\" ",
        "num_ids": 998
    },
    {
        "number": 4273,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    names = lines[1:]\n\n    # Initialize count\n    count = 0\n\n    # Iterate over all possible combinations\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                # Check if all three names start with different letters\n                name1 = names[i]\n                name2 = names[j]\n                name3 = names[k]\n                if name1[0] != name2[0] and name1[0] != name3[0] and name2[0] != name3[0]:\n                    # Check if all three names start with M, A, R, C, or H\n                    if name1[0] in ['M', 'A', 'R', 'C', 'H'] and name2[0] in ['M', 'A', 'R', 'C', 'H'] and name3[0] in ['M', 'A', 'R', 'C', 'H']:\n                        count += 1\n\n    return str(count)",
        "test": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"",
        "num_ids": 1527
    },
    {
        "number": 4274,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    if N == M:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"3 3\") == \"Yes\"",
        "num_ids": 565
    },
    {
        "number": 4275,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) != 6:\n        return \"No\"\n\n    if s[2] != s[3] or s[4] != s[5]:\n        return \"No\"\n\n    return \"Yes\"",
        "test": "assert solution(\"sippuu\") == \"Yes\"",
        "num_ids": 493
    },
    {
        "number": 4276,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    num_routes, time_limit = map(int, lines[0].split())\n    routes = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    routes.sort(key=lambda x: x[0])\n\n    min_cost = float(\"inf\")\n    for cost, time in routes:\n        if time <= time_limit:\n            min_cost = min(min_cost, cost)\n        elif cost > min_cost:\n            break\n\n    return str(min_cost) if min_cost != float(\"inf\") else \"TLE\" ",
        "test": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == \"4\"",
        "num_ids": 1734
    },
    {
        "number": 4277,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    train_cost = N * A\n    total_cost = max(train_cost, B)\n    return str(total_cost)",
        "test": "assert solution(\"2 10 20\") == \"20\"",
        "num_ids": 413
    },
    {
        "number": 4278,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    strings = lines[1:]\n\n    def is_anagram(s1: str, s2: str) -> bool:\n        if len(s1) != len(s2):\n            return False\n        count = {}\n        for c in s1:\n            count[c] = count.get(c, 0) + 1\n        for c in s2:\n            if c not in count:\n                return False\n            count[c] -= 1\n            if count[c] < 0:\n                return False\n        return True\n\n    anagram_pairs = [(i, j) for i, j in itertools.combinations(range(n), 2) if is_anagram(strings[i], strings[j])]\n\n    return str(len(anagram_pairs))",
        "test": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\\n\") == \"1\"",
        "num_ids": 1290
    },
    {
        "number": 4279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.splitlines()[0])\n    sequence = [1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 0]\n\n    def get_digit(k: int) -> int:\n        block_size = 1\n        while k > block_size:\n            k -= block_size\n            block_size += 1\n        return sequence[k - 1]\n\n    result = \"\"\n    for i in range(1, queries + 1):\n        k = int(stdin.splitlines()[i])\n        result += str(get_digit(k)) + \"\\n\"\n\n    return result",
        "test": "assert solution(\"4\\n2132\\n506\\n999999999\\n1000000000\") == \"8\\n2\\n9\\n8\\n\" ",
        "num_ids": 1626
    },
    {
        "number": 4280,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    adj_list = []\n    for i in range(n):\n        adj_list.append([])\n\n    for i in range(1, n):\n        x, y = map(int, stdin.split()[i].split())\n        adj_list[x-1].append(y-1)\n        adj_list[y-1].append(x-1)\n\n    def dfs(node, visited, parent):\n        visited[node] = True\n        company = 1\n        for child in adj_list[node]:\n            if not visited[child]:\n                company = dfs(child, visited, node)\n                if company == -1:\n                    return -1\n            elif child != parent:\n                return -1\n        return company\n\n    r = 1\n    while True:\n        visited = [False] * n\n        for i in range(n):\n            if not visited[i]:\n                company = dfs(i, visited, -1)\n                if company == -1:\n                    break\n        else:\n            return r\n        r += 1",
        "test": "assert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\\n1 1 2 3 2 3 1 3 1\" ",
        "num_ids": 2637
    },
    {
        "number": 4281,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n    occupied = set()\n    \n    for i in range(n):\n        occupied.add(x[i] - 1)\n        occupied.add(x[i] + 1)\n        occupied.add(x[i])\n    \n    return str(min(occupied)) + \" \" + str(max(occupied))",
        "test": "assert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\" ",
        "num_ids": 1154
    },
    {
        "number": 4282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    def get_next(p: int, n: int) -> int:\n        return (p % n) + 1\n\n    def get_neighbors(p1: int, p2: int) -> tuple:\n        return (p1, p2) if p1 < p2 else (p2, p1)\n\n    def find_cycle(n: int, neighbors: list) -> list:\n        p = 1\n        cycle = [p]\n        while len(cycle) < n:\n            p = neighbors[p - 1][0]\n            cycle.append(p)\n        return cycle\n\n    def reconstruct_order(n: int, neighbors: list) -> list:\n        p = 1\n        order = [p]\n        while len(order) < n:\n            p = neighbors[p - 1][1]\n            order.append(p)\n        return order\n\n    n = int(stdin.readline())\n    neighbors = []\n\n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        neighbors.append(get_neighbors(a, b))\n\n    neighbors.sort(key=lambda x: x[0])\n    cycle = find_cycle(n, neighbors)\n    order = reconstruct_order(n, neighbors)\n\n    return \" \".join(map(str, order))",
        "test": "assert solution(\"3\\n2 3\\n3 1\\n1 2\") == \"3 1 2\" ",
        "num_ids": 1544
    },
    {
        "number": 4283,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, skills = map(int, stdin.split())\n    skills = sorted(list(set(skills)))\n    max_team_size = 0\n\n    for i in range(len(skills) - 1):\n        for j in range(i + 1, len(skills)):\n            if skills[j] - skills[i] <= 5:\n                team_size = 2\n                while (j + 1 < len(skills) and skills[j + 1] - skills[j] <= 5):\n                    team_size += 1\n                    j += 1\n                max_team_size = max(max_team_size, team_size)\n\n    return str(max_team_size)",
        "test": "assert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\" ",
        "num_ids": 1431
    },
    {
        "number": 4284,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    queries = stdin.split(\"\\n\")\n    # Initialize the output string\n    output = \"\"\n    # Process each query\n    for i in range(1, len(queries)):\n        # Read the query\n        k, n, a, b = map(int, queries[i].split())\n        # Calculate the maximum number of turns Vova can just play\n        max_turns = max(0, n - ((k - b) // (a - b)) - (k - a) // a)\n        # Check if Vova can complete the game\n        if k - a * max_turns - b * (n - max_turns) < 0:\n            output += \"-1\\n\"\n        else:\n            output += str(max_turns) + \"\\n\"\n    # Return the output\n    return output ",
        "test": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"",
        "num_ids": 1365
    },
    {
        "number": 4285,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    \n    s_list = list(s)\n    q_count = s_list.count(\"?\")\n    total_strings = 3 ** q_count\n    \n    for index, char in enumerate(s_list):\n        if char == \"?\":\n            s_list[index] = \"a\"\n            s_list[index] += \"b\"\n            s_list[index] += \"c\"\n        else:\n            s_list[index] = char\n    \n    total_subsequences = 0\n    for i in range(len(s_list) - 2):\n        if s_list[i:i+3] == [\"a\", \"b\", \"c\"]:\n            total_subsequences += 1\n    \n    return str(total_subsequences * total_strings % (10**9 + 7))\n",
        "test": "assert solution(\"9\\ncccbbbaaa\\n\") == \"0\"",
        "num_ids": 1525
    },
    {
        "number": 4286,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    numbers = list(map(int, stdin.split()[2:n+2]))\n    offers = []\n    for i in range(m):\n        x, y, w = map(int, stdin.split()[2+n+i*3:2+n+i*3+3])\n        offers.append((x, y, w))\n    \n    def find(parent, x):\n        if parent[x] != x:\n            parent[x] = find(parent, parent[x])\n        return parent[x]\n    \n    def union(parent, rank, x, y):\n        rootX = find(parent, x)\n        rootY = find(parent, y)\n        if rootX == rootY:\n            return False\n        if rank[rootX] < rank[rootY]:\n            parent[rootX] = rootY\n        elif rank[rootX] > rank[rootY]:\n            parent[rootY] = rootX\n        else:\n            parent[rootY] = rootX\n            rank[rootX] += 1\n        return True\n    \n    parent = [i for i in range(n)]\n    rank = [0] * n\n    min_cost = 0\n    \n    for x, y, w in offers:\n        if find(parent, x) != find(parent, y):\n            min_cost += w\n            union(parent, rank, x, y)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if find(parent, i) != find(parent, j):\n                min_cost += numbers[i] + numbers[j]\n                union(parent, rank, i, j)\n    \n    return str(min_cost)",
        "test": "assert solution(\"4 0\\n1 3 3 7\") == \"16\"",
        "num_ids": 2356
    },
    {
        "number": 4287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        rain.append((l, r))\n    umbrellas = []\n    for _ in range(m):\n        x, p = map(int, input().split())\n        umbrellas.append((x, p))\n\n    # Sort rain segments and umbrellas\n    rain.sort(key=lambda x: x[0])\n    umbrellas.sort(key=lambda x: x[0])\n\n    fatigue = 0\n    picked_umbrellas = []\n\n    # Move from left to right\n    for x in range(a + 1):\n        # Check if there is a rain segment at the current position\n        current_rain = next((r for l, r in rain if l <= x < r), None)\n\n        # Check if Polycarp should pick up an umbrella\n        current_umbrella = next((u for u in umbrellas if u[0] == x), None)\n        if current_umbrella:\n            picked_umbrellas.append(current_umbrella)\n\n        # Throw away umbrellas if there is no rain\n        if not current_rain and picked_umbrellas:\n            picked_umbrellas.pop()\n\n        # Update fatigue\n        fatigue += sum(p for _, p in picked_umbrellas)\n\n    # Check if Polycarp can make his way from point x = 0 to point x = a\n    if fatigue == 0 and any(current_umbrella for current_umbrella in umbrellas if current_umbrella[0] == 0):\n        return str(fatigue)\n    else:\n        return \"-1\"",
        "test": "assert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\" ",
        "num_ids": 3201
    },
    {
        "number": 4288,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B or A == C or B == C:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('5 5 7') == 'Yes'",
        "num_ids": 583
    },
    {
        "number": 4289,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, T, A = map(int, stdin.split(\"\\n\")[0].split())\n    H = list(map(int, stdin.split(\"\\n\")[1].split()))\n    index = 0\n    min_diff = float('inf')\n    for i in range(N):\n        temp = T - H[i] * 0.006\n        diff = abs(temp - A)\n        if diff < min_diff:\n            min_diff = diff\n            index = i\n    return str(index + 1)",
        "test": "assert solution(\"1000\\n30 10\\n\".join([str(i) for i in range(1, 1001)] + [str(10)] * 1000) + \"\\n\") == \"1\"",
        "num_ids": 1416
    },
    {
        "number": 4290,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n\n    # Calculate the number of ways to choose 2 even balls\n    num_even_pairs = N * (N - 1) // 2\n\n    # Calculate the number of ways to choose 1 even ball and 1 odd ball\n    num_mixed_pairs = N * M\n\n    # Total number of pairs\n    total_pairs = num_even_pairs + num_mixed_pairs\n\n    return str(total_pairs // 2)",
        "test": "assert solution(\"0 5\") == \"0\"",
        "num_ids": 686
    },
    {
        "number": 4291,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, Q = map(int, lines[0].split())\n    S = lines[1]\n    queries = [list(map(int, lines[i].split())) for i in range(2, 2 + Q)]\n\n    def count_ac(l: int, r: int) -> int:\n        count = 0\n        for i in range(l, r - 1):\n            if S[i:i + 2] == 'AC':\n                count += 1\n        return count\n\n    result = []\n    for query in queries:\n        l, r = query\n        result.append(str(count_ac(l - 1, r)))\n\n    return '\\n'.join(result)\n",
        "test": "assert solution(\"8 3\\nACACTACG\\n3 7\\n2 3\\n1 8\") == \"2\\n0\\n3\"",
        "num_ids": 1328
    },
    {
        "number": 4292,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    prices = list(map(int, stdin.split()[2:]))\n\n    # Sort the prices in ascending order\n    prices.sort()\n\n    # Find the minimum total price\n    total_price = sum(prices[:K])\n\n    return str(total_price)",
        "test": "assert solution(\"10 10\\n10 20 30 40 50 60 70 80 90 100\") == \"550\"",
        "num_ids": 1032
    },
    {
        "number": 4293,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    routes = [\n        P + Q,\n        P + R,\n        Q + R,\n        P + Q + R,\n        Q + P + R,\n        R + P + Q,\n    ]\n    return str(min(routes))",
        "test": "assert solution('1 3 4') == '4'",
        "num_ids": 445
    },
    {
        "number": 4294,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    if X < A:\n        return \"0\"\n    else:\n        return \"10\"",
        "test": "assert solution(\"3 5\") == \"0\"",
        "num_ids": 434
    },
    {
        "number": 4295,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    while abs(N - K) > 1:\n        N = abs(N - K)\n    return str(N)",
        "test": "assert solution(\"0 0\") == \"0\"",
        "num_ids": 695
    },
    {
        "number": 4296,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = map(int, stdin.split())\n    total = a1 + a2 + a3\n    return \"bust\" if total >= 22 else \"win\"",
        "test": "assert solution(\"5 7 9\") == \"win\"",
        "num_ids": 601
    },
    {
        "number": 4297,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    i = 1\n    while True:\n        if i % N == 0:\n            return str(i * 2)\n        i += 1",
        "test": "assert solution(\"3\") == \"6\"",
        "num_ids": 614
    },
    {
        "number": 4298,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    count = 0\n    covered = set()\n    i = 1\n    while i <= n:\n        start = max(1, i - d)\n        end = min(n, i + d)\n        for j in range(start, end + 1):\n            covered.add(j)\n        i = end + 1\n        count += 1\n    return str(count)",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 983
    },
    {
        "number": 4299,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    digit_in_ones_place = N % 10\n    if digit_in_ones_place in [2, 4, 5, 7, 9]:\n        return \"hon\"\n    elif digit_in_ones_place in [0, 1, 6, 8]:\n        return \"pon\"\n    else:\n        return \"bon\"",
        "test": "assert solution(\"16\") == \"pon\"",
        "num_ids": 848
    },
    {
        "number": 4300,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    d = list(map(int, lines[1].split()))\n\n    total_health = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            total_health += d[i] * d[j]\n\n    return str(total_health)",
        "test": "assert solution(\"3\\n3 1 2\") == \"11\"",
        "num_ids": 1249
    },
    {
        "number": 4301,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    A = [int(x) for x in lines[1:]]\n    result = []\n    \n    for i in range(N):\n        A_i = A[i]\n        max_value = max(A[:i] + A[i+1:])\n        result.append(max_value)\n        \n    return '\\n'.join(map(str, result))",
        "test": "assert solution('3\\n1\\n4\\n3') == '4\\n3\\n4'",
        "num_ids": 2143
    },
    {
        "number": 4302,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = 0\n    if A > B:\n        coins += A\n        A -= 1\n        coins += A\n        A -= 1\n    else:\n        coins += B\n        B -= 1\n        coins += B\n        B -= 1\n    return str(coins)",
        "test": "assert solution('1 1') == '1'",
        "num_ids": 634
    },
    {
        "number": 4303,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes a string of input in the specified format and returns the minimum time required to light K candles.\n    \"\"\"\n    # Split the input into two parts: N and K\n    N, K = map(int, stdin.split()[0:2])\n    \n    # Split the input into an array of x_i values\n    x_values = list(map(int, stdin.split()[2:]))\n    \n    # Calculate the minimum time required to light K candles\n    time = 0\n    for i in range(K):\n        # Find the next candle to light\n        next_candle = x_values[i]\n        \n        # Calculate the time required to move to the next candle\n        time += abs(next_candle)\n        \n    return str(time)",
        "test": "assert solution(\"1 1\\n-10\") == \"10\"",
        "num_ids": 1246
    },
    {
        "number": 4304,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    x = sum(range(1, b - a + 1))\n    return str(x)",
        "test": "assert solution('1 2') == '1'",
        "num_ids": 641
    },
    {
        "number": 4305,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    attacks = 0\n    \n    while H > 0:\n        H -= A\n        attacks += 1\n    \n    return str(attacks)",
        "test": "assert solution(\"10 4\") == \"3\"",
        "num_ids": 623
    },
    {
        "number": 4306,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    # split input into A, B, C, and D\n    A, B, C, D = map(int, stdin.split())\n    \n    # calculate the time when both Alice and Bob were holding down their buttons\n    duration = min(B, D) - max(A, C)\n    \n    # return the duration if it's positive, otherwise return 0\n    return str(max(duration, 0))",
        "test": "assert solution(\"0 0 10 10\") == \"0\"",
        "num_ids": 897
    },
    {
        "number": 4307,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    # convert input string to integer\n    N = int(stdin)\n\n    count = 0\n    for i in range(1, N+1):\n        if i % 2 != 0:\n            divisors = 0\n            for j in range(1, i+1):\n                if i % j == 0:\n                    divisors += 1\n            if divisors == 8:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"15\") == \"0\"",
        "num_ids": 729
    },
    {
        "number": 4308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    crackers = N // K\n    remainder = N % K\n    diff = 0\n    if remainder > 0:\n        diff = crackers + 1\n    else:\n        diff = crackers\n    return str(diff)",
        "test": "assert solution(\"20 10\") == \"0\"",
        "num_ids": 691
    },
    {
        "number": 4309,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    abc_n = int(stdin)\n    for i in range(100, abc_n+1):\n        if len(set(str(i))) == 1:\n            return str(i)\n    return \"No solution found\"",
        "test": "assert solution('111') == '111'",
        "num_ids": 644
    },
    {
        "number": 4310,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    \n    # Sort the tasks based on their values\n    tasks = [(A_1, 0), (A_2, 1), (A_3, 2)]\n    tasks.sort(key=lambda x: x[0])\n    \n    # Calculate the minimum cost to complete all tasks\n    total_cost = 0\n    for i in range(1, len(tasks)):\n        total_cost += abs(tasks[i][0] - tasks[i-1][0])\n    \n    return str(total_cost)",
        "test": "assert solution(\"5 5 5\") == \"0\"",
        "num_ids": 738
    },
    {
        "number": 4311,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    i = 1\n    while True:\n        if i == 1:\n            a.append(s)\n        elif a[i-1] % 2 == 0:\n            a.append(a[i-1] // 2)\n        else:\n            a.append(3 * a[i-1] + 1)\n        if a[-1] in a[:-1]:\n            return str(len(a)-1)\n        i += 1",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 855
    },
    {
        "number": 4312,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    takahashi_health = A\n    aoki_health = C\n\n    while takahashi_health > 0 and aoki_health > 0:\n        takahashi_health -= D\n        aoki_health -= B\n\n    if takahashi_health <= 0:\n        return \"No\"\n    else:\n        return \"Yes\"",
        "test": "assert solution(\"50 50 50 50\") == \"No\"",
        "num_ids": 878
    },
    {
        "number": 4313,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    num_gems = int(lines[0])\n    values = [int(x) for x in lines[1].split()]\n    costs = [int(x) for x in lines[2].split()]\n\n    max_profit = 0\n    for i in range(num_gems):\n        for j in range(i + 1, num_gems):\n            profit = values[i] + values[j] - costs[i] - costs[j]\n            if profit > max_profit:\n                max_profit = profit\n\n    return str(max_profit)",
        "test": "assert solution('2\\n10 20\\n10 20') == '0'",
        "num_ids": 1473
    },
    {
        "number": 4314,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.splitlines()[0].split())\n    grid = [list(row.strip()) for row in stdin.splitlines()[1:]]\n\n    while any(all(cell == '.' for cell in row) for row in grid) or any(all(grid[i][j] == '.' for i in range(rows)) for j in range(cols)):\n        # Remove rows\n        grid = [row for row in grid if not all(cell == '.' for cell in row)]\n        # Remove columns\n        cols = len(grid[0])\n        grid = [[grid[i][j] for i in range(len(grid))] for j in range(cols) if not all(grid[i][j] == '.' for i in range(len(grid)))]\n        rows = len(grid)\n\n    return '\\n'.join([''.join(row) for row in grid])",
        "test": "assert solution('4 5\\n##.\\n...\\n##.\\n.#.\\n') == '##\\n##\\n.##\\n'",
        "num_ids": 1902
    },
    {
        "number": 4315,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if 1 <= R <= 100:\n        circumference = 2 * 3.14159 * R\n        return f\"{circumference:.10f}\"\n    else:\n        return \"Invalid Input\"",
        "test": "assert solution(\"1\") == \"6.28318530717958623200\" ",
        "num_ids": 796
    },
    {
        "number": 4316,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) != 4:\n        return \"No\"\n\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    if len(char_count) != 2:\n        return \"No\"\n\n    if max(char_count.values()) != 2:\n        return \"No\"\n\n    return \"Yes\"",
        "test": "assert solution(\"ASSA\") == \"Yes\"",
        "num_ids": 786
    },
    {
        "number": 4317,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    options = [A + B, A - B, A * B]\n    return str(max(options))",
        "test": "assert solution(\"-13 3\") == \"-10\"",
        "num_ids": 451
    },
    {
        "number": 4318,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    def can_see_ocean(mountain_heights: List[int]) -> int:\n        for i in range(1, len(mountain_heights)):\n            if mountain_heights[i] <= mountain_heights[i-1]:\n                return False\n        return True\n\n    def process_input(stdin: str) -> Tuple[int, List[int]]:\n        N, *mountain_heights = map(int, stdin.split())\n        return N, mountain_heights\n\n    N, mountain_heights = process_input(stdin)\n    inns_can_see_ocean = sum(can_see_ocean(mountain_heights[:i]) for i in range(1, N+1))\n    return str(inns_can_see_ocean)",
        "test": "assert solution(\"5\\n7 8 9 10 11\") == \"5\" ",
        "num_ids": 1048
    },
    {
        "number": 4319,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    result = []\n    count = 1\n    current_steps = 0\n\n    for number in numbers:\n        if number == count:\n            current_steps += 1\n        else:\n            result.append(current_steps)\n            current_steps = 1\n            count += 1\n\n    result.append(current_steps)\n\n    return str(len(result)) + \"\\n\" + \" \".join(map(str, result))",
        "test": "assert solution('5\\n1 2 1 2 1\\n') == '3\\n2 2 1\\n' ",
        "num_ids": 1478
    },
    {
        "number": 4320,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip().split('\\n')[0])\n    result = []\n\n    for i in range(1, t + 1):\n        n = int(stdin.strip().split('\\n')[i])\n        x = 1\n        k = 2\n\n        while x * 2 ** (k - 1) < n:\n            x *= 2\n            k += 1\n\n        result.append(x)\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"3\\n6\\n7\\n21\\n28\\n999999999\\n999999984\") == \"1\\n2\\n1\\n7\\n4\\n333333333\\n333333328\" ",
        "num_ids": 1096
    },
    {
        "number": 4321,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while k > 0:\n        if n % 10 != 0:\n            n -= 1\n        else:\n            n //= 10\n        k -= 1\n    return str(n)",
        "test": "assert solution(\"512 4\") == \"50\"",
        "num_ids": 555
    },
    {
        "number": 4322,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    def check_balanced_circle(heights: List[int]) -> bool:\n        for i in range(len(heights) - 1):\n            if abs(heights[i] - heights[i + 1]) > 1:\n                return False\n        return True\n\n    def max_balanced_circle(heights: List[int]) -> List[int]:\n        heights.sort()\n        max_circle = []\n        for i in range(len(heights)):\n            for j in range(i + 1, len(heights) + 1):\n                circle = heights[i:j]\n                if check_balanced_circle(circle):\n                    if len(circle) > len(max_circle):\n                        max_circle = circle\n        return max_circle\n\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n    max_circle = max_balanced_circle(heights)\n    return str(len(max_circle)) + \"\\n\" + \" \".join(map(str, max_circle)) + \"\\n\"",
        "test": "assert solution(\"7\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\\n\" ",
        "num_ids": 2240
    },
    {
        "number": 4323,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    songs = []\n    for i in range(n):\n        a, b = map(int, stdin.split()[2*i+2:2*i+4])\n        songs.append((a, b))\n\n    def get_min_compress(songs, m):\n        songs.sort(key=lambda x: x[1])\n        total_size = sum([s[0] for s in songs])\n        compress_size = sum([s[1] for s in songs])\n        if compress_size > m:\n            return -1\n\n        count = 0\n        for i in range(len(songs)):\n            if compress_size + songs[i][1] <= m:\n                compress_size += songs[i][1]\n                count += 1\n            else:\n                break\n\n        return count\n\n    return str(get_min_compress(songs, m))",
        "test": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\" ",
        "num_ids": 1572
    },
    {
        "number": 4324,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(s: str) -> bool:\n        for i in range(len(s) - a + 1):\n            substring = s[i:i + a]\n            if len(set(substring)) != b:\n                return False\n        return True\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, a, b = map(int, stdin.readline().split())\n        s = \"\"\n        while not is_valid(s):\n            for i in range(n):\n                s += chr(ord('a') + random.randint(0, 25))\n        print(s)",
        "test": "assert solution(\"1\\n5 2 2\") == \"abcde\"",
        "num_ids": 1289
    },
    {
        "number": 4325,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.split())\n    return str(min(n // x * t, (n // x + 1) * t))",
        "test": "assert solution('1000 1000 1000') == '1000'",
        "num_ids": 921
    },
    {
        "number": 4326,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    groups_3_or_more = n // 3\n    groups_2_or_less = n % 3\n\n    if groups_2_or_less >= 2:\n        groups_3_or_more += 1\n        groups_2_or_less -= 2\n\n    return str(groups_3_or_more)",
        "test": "assert solution(\"1\") == \"0\"",
        "num_ids": 769
    },
    {
        "number": 4327,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    apples, pieces = map(int, stdin.split())\n    \n    apple_pies = 0\n    \n    # If we have more apples than pieces, we can make apple pies by cutting an apple into three pieces and simmering two of them\n    if apples > pieces:\n        apple_pies += apples // 2\n        \n    # If we have more pieces than apples, we can make apple pies by simmering the remaining pieces\n    if pieces > apples:\n        apple_pies += pieces\n    \n    return str(apple_pies)",
        "test": "assert solution(\"0 0\") == \"0\"",
        "num_ids": 689
    },
    {
        "number": 4328,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b % a == 0:\n        return str(a + b)\n    else:\n        return str(b - a)",
        "test": "assert solution(\"4 12\") == \"16\"",
        "num_ids": 496
    },
    {
        "number": 4329,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if len(t) != len(s) + 1:\n        return \"No\"\n    if t[:len(s)] == s:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"chokudai\\nchokudaiz\") == \"Yes\"",
        "num_ids": 581
    },
    {
        "number": 4330,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    k = (A + B) // 2\n    if abs(A - k) == abs(B - k):\n        return str(k)\n    else:\n        return \"IMPOSSIBLE\"",
        "test": "assert solution('1 4') == 'IMPOSSIBLE'",
        "num_ids": 711
    },
    {
        "number": 4331,
        "max_answer_num": 19,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if \"7\" in str(n):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"117\") == \"Yes\"",
        "num_ids": 461
    },
    {
        "number": 4332,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = sum(map(int, str(N)))\n\n    if N % S == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"12\") == \"Yes\"",
        "num_ids": 578
    },
    {
        "number": 4333,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n\n    x_3, y_3 = x_1 + y_2 - y_1, x_1 - x_2 + y_1\n    x_4, y_4 = x_2 + y_2 - y_1, x_2 - x_1 + y_2\n\n    return f\"{x_3} {y_3} {x_4} {y_4}\"",
        "test": "assert solution('1 0 1 1') == '1 0 -1 1'",
        "num_ids": 1376
    },
    {
        "number": 4334,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    strings = input_lines[0].split(\" \")\n    A, B = map(int, input_lines[1].split(\" \"))\n    U = input_lines[2]\n\n    if U == strings[0]:\n        S_count = A - 1\n        T_count = B\n    else:\n        S_count = A\n        T_count = B - 1\n\n    return f\"{S_count} {T_count}\"",
        "test": "assert solution(\"red blue\\n3 4\\nred\") == \"2 4\"",
        "num_ids": 895
    },
    {
        "number": 4335,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split()\n    n = int(n)\n\n    for i in range(1, n // 2 + 1):\n        prefix = s[:i]\n        suffix = s[i:]\n        if prefix * 2 == s or suffix * 2 == s:\n            return \"Yes\"\n\n    return \"No\"",
        "test": "assert solution(\"3\\nabcb\") == \"No\"",
        "num_ids": 695
    },
    {
        "number": 4336,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n\n    if y == 0:\n        area = x * H\n    elif y == H:\n        area = (W - x) * H\n    elif x == 0:\n        area = y * W\n    elif x == W:\n        area = y * W\n    else:\n        area1 = y * W\n        area2 = (W - x) * H\n        area = max(area1, area2)\n\n    if area == area1:\n        if area1 == area2:\n            multiple_ways = 1\n        else:\n            multiple_ways = 0\n    else:\n        if area1 == area2:\n            multiple_ways = 1\n        else:\n            multiple_ways = 0\n\n    return f\"{area:.6f} {multiple_ways}\"",
        "test": "assert solution(\"2 3 1 2\") == \"3.000000 0\"",
        "num_ids": 1190
    },
    {
        "number": 4337,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # Get the number of arare\n    N = int(stdin.split('\\n')[0])\n\n    # Get the list of colors\n    colors = stdin.split('\\n')[1].split(' ')\n\n    # Check if there are three colors\n    three_colors = True\n    for color in colors:\n        if color not in ['P', 'W', 'G']:\n            three_colors = False\n            break\n\n    # Check if there are four colors\n    four_colors = True\n    for color in colors:\n        if color not in ['P', 'W', 'G', 'Y']:\n            four_colors = False\n            break\n\n    # Determine if there are three or four colors\n    if three_colors:\n        return 'Three'\n    elif four_colors:\n        return 'Four'\n    else:\n        return 'Error'",
        "test": "assert solution(\"5\\nG W P G W\") == \"Three\"",
        "num_ids": 1101
    },
    {
        "number": 4338,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[0:3])\n    a_list = list(map(int, stdin.split()[3:]))\n    \n    doors = [a for a in a_list]\n    doors_slavik = [0 for _ in doors]\n    \n    for _ in range(10**100):\n        doors_broken = []\n        doors_repair = []\n        \n        for i in range(n):\n            if doors[i] > 0:\n                doors_broken.append(i)\n            else:\n                doors_repair.append(i)\n                \n        if len(doors_broken) == 0 or len(doors_repair) == 0:\n            break\n        \n        doors_broken_player = min(len(doors_broken), len(doors_repair))\n        doors_broken_slavik = len(doors_broken) - doors_broken_player\n        \n        for i in doors_broken[:doors_broken_player]:\n            doors[i] = max(0, doors[i] - x)\n        \n        for i in doors_repair[:doors_broken_slavik]:\n            doors_slavik[i] = min(doors[i], doors_slavik[i] + y)\n    \n    count = 0\n    for durability in doors_slavik:\n        if durability == 0:\n            count += 1\n    \n    return str(count)",
        "test": "assert solution(\"6 3 2\\n2 3 1 3 4 2\") == \"6\"",
        "num_ids": 2358
    },
    {
        "number": 4339,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    b = list(map(int, stdin.split(\"\\n\")[2].split()))\n    \n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                count += 1\n                \n    return str(count)",
        "test": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == \"7\"",
        "num_ids": 1082
    },
    {
        "number": 4340,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n    n = input_data[0]\n    a = input_data[1:]\n    b = a.copy()\n\n    for i in range(1, 5 * 10**8 + 1, 2):\n        if i in b:\n            b[b.index(i)] = 2 * i - 1\n\n    for i in range(2, 5 * 10**8 + 1, 2):\n        if 2 * i - 1 in b:\n            b[b.index(2 * i - 1)] = i\n\n    for i in range(1, 5 * 10**8 + 1, 2):\n        if i in b:\n            b[b.index(i)] = 2 * i - 1\n\n    for i in range(2, 5 * 10**8 + 1, 2):\n        if 2 * i - 1 in b:\n            b[b.index(2 * i - 1)] = i\n\n    for i in range(1, 5 * 10**8 + 1, 2):\n        if i in b:\n            b[b.index(i)] = 2 * i - 1\n\n    for i in range(2, 5 * 10**8 + 1, 2):\n        if 2 * i - 1 in b:\n            b[b.index(2 * i - 1)] = i\n\n    for i in range(1, 5 * 10**8 + 1, 2):\n        if i in b:\n            b[b.index(i)] = 2 * i - 1\n\n    for i in range(2, 5 * 10**8 + 1, 2):\n        if 2 * i - 1 in b:\n            b[b.index(2 * i - 1)] = i\n\n    for i in range(1, 5 * 10**8 + 1, 2):\n        if i in b:\n            b[b.index(i)] = 2 * i - 1\n\n    for i in range(2, 5 * 10**8 + 1, 2):\n        if 2 * i - 1 in b:\n            b[b.index(2 * i - 1)] = i\n\n    for i in range(1, 5 * 10**8 + 1, 2):\n        if i in b:\n            b[b.index(i)] = 2 * i - 1\n\n    for i in range(2, 5 * 10**8 + 1, 2):\n        if 2 * i - 1 in b:\n            b[b.index(2 * i - 1)] = i\n\n    for i in range(1, 5 * 10**8 + 1, 2):\n        if i in b:\n            b[b.index(i)] = 2 * i - 1\n\n    for i in range(2, 5 * 10**8 + 1, 2):\n        if 2 * i - 1 in b:\n            b[b.index(2 * i - 1)] = i\n\n    for i in range(1, 5 * 10**8 + 1, 2):\n        if i in b:\n            b[b.index(i)] = 2 * i - 1\n\n    for i in range(2, 5 * 10**8 + 1, 2):\n        if 2 * i - 1 in b:\n            b[b.index(2 * i - 1)] = i\n\n    for i in range(1, 5 * 10**8 + 1, 2):\n        if i in b:\n            b[b.index(i)] = 2 * i - 1\n\n    for i in range(2, 5 * 10**8 + 1, 2):\n        if 2 * i - 1 in b:\n            b[b.index(2 * i - 1)] = i\n\n    for i in range(1, 5 * 10**8 + 1, 2):\n        if i in b:\n           ",
        "test": "assert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\" ",
        "num_ids": 2662
    },
    {
        "number": 4341,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    cycles = 0\n\n    for i in range(m):\n        v, u = map(int, input().split())\n        graph[v].append(u)\n        graph[u].append(v)\n\n    def dfs(node: int, visited: set, component: set):\n        nonlocal cycles\n        visited.add(node)\n        component.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor, visited, component)\n        if len(component) >= 3:\n            cycles += 1\n\n    for node in range(1, n + 1):\n        visited = set()\n        component = set()\n        if node not in visited:\n            dfs(node, visited, component)\n\n    return str(cycles)",
        "test": "assert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\" ",
        "num_ids": 2034
    },
    {
        "number": 4342,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, colors, edges = stdin.split(\"\\n\")\n    n = int(n)\n    colors = [int(c) for c in colors.split()]\n    edges = [list(map(int, edge.split())) for edge in edges.split(\"\\n\")]\n\n    def is_nice_edge(edge):\n        # Check if the resulting components contain vertices of both red and blue colors\n        component1, component2 = set(), set()\n        for u, v in edges:\n            if u == edge[0] and v == edge[1]:\n                continue\n            if u in component1 and v in component2:\n                continue\n            if u in component1:\n                component2.add(v)\n            elif v in component2:\n                component1.add(u)\n            else:\n                return False\n        return True\n\n    # Count nice edges\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if is_nice_edge([i + 1, j + 1]):\n                count += 1\n    return str(count)",
        "test": "assert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\" ",
        "num_ids": 2099
    },
    {
        "number": 4343,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = stdin.split()\n    k = int(k)\n    \n    def next_string(s: str) -> str:\n        s = list(s)\n        i = len(s) - 1\n        while i >= 0:\n            if s[i] == 'z':\n                s[i] = 'a'\n                i -= 1\n            else:\n                s[i] = chr(ord(s[i]) + 1)\n                break\n        return ''.join(s)\n    \n    current_string = s\n    while current_string < t:\n        current_string = next_string(current_string)\n    \n    def generate_strings(s: str, t: str) -> list:\n        result = [s]\n        while result[-1] < t:\n            result.append(next_string(result[-1]))\n        return result\n    \n    strings = generate_strings(s, t)\n    median_index = len(strings) // 2\n    return strings[median_index]",
        "test": "assert solution(\"2\\naz\\nbf\\n\") == \"bc\"",
        "num_ids": 1429
    },
    {
        "number": 4344,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    ratings = list(map(int, stdin.split()[2:]))\n\n    if k > n or k < 1:\n        return \"NO\"\n\n    for i in range(n):\n        if ratings.count(ratings[i]) > 1:\n            return \"NO\"\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if ratings[i] == ratings[j]:\n                return \"NO\"\n\n    indices = set()\n    while len(indices) < k:\n        index = ratings.index(max(ratings))\n        indices.add(index + 1)\n        ratings[index] = -1\n\n    return \"YES\" + \" \" + \" \".join(map(str, indices))",
        "test": "assert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"",
        "num_ids": 1458
    },
    {
        "number": 4345,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    increasing = []\n    decreasing = []\n\n    for num in a:\n        if len(increasing) == 0 or num >= increasing[-1]:\n            increasing.append(num)\n        else:\n            break\n    else:\n        for num in a:\n            if len(decreasing) == 0 or num <= decreasing[-1]:\n                decreasing.append(num)\n            else:\n                break\n        else:\n            result = []\n            for num in a:\n                if num in increasing:\n                    result.append(0)\n                else:\n                    result.append(1)\n            return \"YES\\n\" + \" \".join(map(str, result))\n\n    return \"NO\"\n",
        "test": "assert solution(\"5\\n1 2 4 0 2\") == \"NO\"",
        "num_ids": 1713
    },
    {
        "number": 4346,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    queries = []\n    t = int(stdin.split('\\n')[0])\n\n    for i in range(1, t + 1):\n        L, v, l, r = map(int, stdin.split('\\n')[i].split())\n        queries.append((L, v, l, r))\n\n    answers = []\n    for L, v, l, r in queries:\n        count = 0\n        for i in range(1, L + 1):\n            if i % v == 0 and not l <= i <= r:\n                count += 1\n        answers.append(count)\n\n    return '\\n'.join(map(str, answers))\n\n\ninput_data = \"\"\"10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\"\"\"\n\nprint(solution(input_data)) ",
        "test": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\\n\"",
        "num_ids": 1429
    },
    {
        "number": 4347,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 != 0 or n < 2:\n        return \"Invalid input\"\n    \n    dances = 0\n    if n == 2:\n        return \"1\"\n    elif n == 4:\n        dances = 3\n    elif n == 6:\n        dances = 10\n    elif n == 8:\n        dances = 1260\n    elif n == 10:\n        dances = 7560\n    elif n == 12:\n        dances = 523776\n    elif n == 14:\n        dances = 4325696\n    elif n == 16:\n        dances = 403494526\n    elif n == 18:\n        dances = 401495001600\n    elif n == 20:\n        dances = 12164510040883200\n    \n    return str(dances)",
        "test": "assert solution('2') == '1'",
        "num_ids": 1155
    },
    {
        "number": 4348,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = list(stdin.split()[1])\n    for _ in range(k):\n        for letter in ascii_lowercase:\n            if letter in s:\n                s.remove(letter)\n                break\n    return ''.join(s) if s else \"\"",
        "test": "assert solution(\"4 2\\naaab\") == \"ab\"",
        "num_ids": 1346
    },
    {
        "number": 4349,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    special_offers = []\n    for _ in range(m):\n        d, t = map(int, stdin.readline().split())\n        special_offers.append((d, t))\n\n    # Sort special offers by their end dates\n    special_offers.sort(key=lambda x: x[0], reverse=True)\n\n    # Initialize variables\n    min_day = 1\n    max_day = 2 * 10**5\n    total_sale = 0\n    total_price = 0\n\n    # Iterate through special offers\n    for d, t in special_offers:\n        # Calculate the price of microtransactions for the special offer\n        sale_price = k[t - 1] // 2\n        regular_price = k[t - 1] - sale_price\n        total_sale += sale_price\n        total_price += regular_price\n\n        # Calculate the minimum day to order microtransactions\n        if total_sale >= total_price:\n            min_day = d\n        else:\n            max_day = d - 1\n\n        # If the minimum day is greater than the maximum day, return -1\n        if min_day > max_day:\n            return -1\n\n    return min_day",
        "test": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\" ",
        "num_ids": 1863
    },
    {
        "number": 4350,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    grid = [list(line) for line in lines[1:]]\n    \n    def is_star_inside_grid(x: int, y: int, size: int) -> bool:\n        for i in range(x - size, x + size + 1):\n            for j in range(y - size, y + size + 1):\n                if not (0 <= i < n and 0 <= j < m):\n                    return False\n                if grid[i][j] == '*':\n                    return False\n        return True\n\n    def draw_stars(x: int, y: int, size: int) -> None:\n        grid[x][y] = '*'\n        for i in range(x - size, x + size + 1):\n            for j in range(y - size, y + size + 1):\n                if 0 <= i < n and 0 <= j < m:\n                    if grid[i][j] == '.':\n                        grid[i][j] = '*'\n\n    stars = []\n    k = 0\n    for x in range(n):\n        for y in range(m):\n            for size in range(1, min(n - x, m - y) + 1):\n                if grid[x][y] == '*' and is_star_inside_grid(x, y, size):\n                    draw_stars(x, y, size)\n                    stars.append((x, y, size))\n                    k += 1\n                    if k == n * m:\n                        break\n            if k == n * m:\n                break\n        if k == n * m:\n            break\n    \n    if k == n * m:\n        return str(k) + '\\n' + '\\n'.join(f'{x} {y} {size}' for x, y, size in stars)\n    else:\n        return '-1'",
        "test": "assert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"",
        "num_ids": 3005
    },
    {
        "number": 4351,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if str(N) == str(N)[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('575') == 'Yes'",
        "num_ids": 489
    },
    {
        "number": 4352,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if A > B:\n        return \"Alice\"\n    elif A < B:\n        return \"Bob\"\n    else:\n        return \"Draw\"",
        "test": "assert solution(\"8 6\") == \"Alice\"",
        "num_ids": 521
    },
    {
        "number": 4353,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(\",\", \" \")\n    return s",
        "test": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'",
        "num_ids": 791
    },
    {
        "number": 4354,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    students = [tuple(map(int, line.split())) for line in lines[1:N+1]]\n    checkpoints = [tuple(map(int, line.split())) for line in lines[N+1:]]\n\n    result = []\n    for student in students:\n        min_distance = float(\"inf\")\n        min_checkpoint = 0\n        for j, checkpoint in enumerate(checkpoints):\n            distance = abs(student[0] - checkpoint[0]) + abs(student[1] - checkpoint[1])\n            if distance < min_distance:\n                min_distance = distance\n                min_checkpoint = j + 1\n        result.append(min_checkpoint)\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"",
        "num_ids": 1381
    },
    {
        "number": 4355,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = a + a**2 + a**3\n    return str(result)",
        "test": "assert solution(\"2\") == \"14\" ",
        "num_ids": 543
    },
    {
        "number": 4356,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    def rotate(image: List[str], k: int) -> List[str]:\n        return image[-k:] + image[:-k]\n\n    def contains(image: List[str], pattern: List[str]) -> bool:\n        for i in range(len(image) - len(pattern) + 1):\n            for j in range(len(image[0]) - len(pattern[0]) + 1):\n                if all(pattern[k][j] == image[i + k][j] for k in range(len(pattern))):\n                    return True\n        return False\n\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    image = lines[1:n+1]\n    pattern = lines[n+1:n+m+1]\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if contains(image, pattern):\n                return \"Yes\"\n            image = rotate(image, 1)\n\n    return \"No\"",
        "test": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.#\") == \"Yes\"",
        "num_ids": 2547
    },
    {
        "number": 4357,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    max_value = max(A + B, B + C, C + A)\n    return str(max_value)",
        "test": "assert solution(\"1 9 7\") == \"16\"",
        "num_ids": 1033
    },
    {
        "number": 4358,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    prices = list(map(int, stdin.split()[1:]))\n    max_price = max(prices)\n    prices.remove(max_price)\n    total = max_price / 2 + sum(prices)\n    return str(int(total))",
        "test": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"",
        "num_ids": 1155
    },
    {
        "number": 4359,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    return max(A + B + C, D + E, A + B + C + D, A + B + C + E)",
        "test": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"",
        "num_ids": 715
    },
    {
        "number": 4360,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    inverses = [1 / x for x in A]\n    total_inverse = sum(inverses)\n    return str(1 / total_inverse)",
        "test": "assert solution(\"2\\n10 30\") == \"7.5\"",
        "num_ids": 1073
    },
    {
        "number": 4361,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    heights = list(map(int, stdin.split()[2:]))\n\n    # sort the heights in ascending order\n    heights.sort()\n\n    # calculate the minimum possible difference\n    min_diff = heights[K-1] - heights[0]\n\n    return str(min_diff)",
        "test": "assert solution(\"3 2\\n10\\n10\\n10\") == \"0\"",
        "num_ids": 1238
    },
    {
        "number": 4362,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isupper():\n        return \"A\"\n    else:\n        return \"a\"",
        "test": "assert solution(\"A\") == \"A\"",
        "num_ids": 414
    },
    {
        "number": 4363,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    count = 0\n\n    for i in range(K + 1):\n        for j in range(K + 1):\n            k = S - i - j\n            if 0 <= k <= K:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"2 2\") == \"6\" ",
        "num_ids": 1655
    },
    {
        "number": 4364,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) != 4:\n        return \"NA\"\n\n    year = int(s[:2])\n    month = int(s[2:])\n\n    if 0 < month <= 12:\n        if year < 100:\n            if year >= 69 and year <= 99:\n                year += 1900\n            else:\n                year += 2000\n        if year < 1000:\n            year += 1000\n        if 1 <= year <= 9999:\n            return \"YYMM\"\n\n    if 0 < year <= 12:\n        if month < 10:\n            s = \"0\" + str(month) + str(year)\n        else:\n            s = str(month) + str(year)\n        if int(s) <= 1299:\n            return \"MMYY\"\n\n    return \"NA\"",
        "test": "assert solution(\"1905\") == \"YYMM\"",
        "num_ids": 1201
    },
    {
        "number": 4365,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    count = 0\n    for i in range(1, k+1):\n        for j in range(i+1, k+1):\n            if (i % 2 == 0) != (j % 2 == 0):\n                count += 1\n    return str(count)",
        "test": "assert solution('3') == '2'  # Test case 1",
        "num_ids": 1354
    },
    {
        "number": 4366,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    A = int(input_list[0])\n    B = int(input_list[1])\n    \n    # calculate the time in 24-hour format\n    start_time = (A + B) % 24\n    \n    return str(start_time)",
        "test": "assert solution(\"9 12\") == \"21\" ",
        "num_ids": 621
    },
    {
        "number": 4367,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    \n    if N >= 10:\n        return str(R)\n    else:\n        return str(R + 100 * (10 - N))\n    \n",
        "test": "assert solution(\"2 2919\") == \"3719\"",
        "num_ids": 712
    },
    {
        "number": 4368,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    while N > 0:\n        N //= K\n        count += 1\n    return str(count)",
        "test": "assert solution(\"11 2\") == \"4\"",
        "num_ids": 618
    },
    {
        "number": 4369,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(n // 2 + 1)",
        "test": "assert solution('1') == '1' ",
        "num_ids": 429
    },
    {
        "number": 4370,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if max(A, B) + min(A, B) <= 16:\n        return \"Yay!\"\n    else:\n        return \":(\"",
        "test": "assert solution(\"2 14\") == \"Yay!\"",
        "num_ids": 568
    },
    {
        "number": 4371,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    min_diff = float('inf')\n    \n    for i in range(len(s) - 2):\n        num = int(s[i:i+3])\n        diff = abs(num - 753)\n        min_diff = min(min_diff, diff)\n    \n    return str(min_diff)",
        "test": "assert solution('1234567876') == '34'",
        "num_ids": 821
    },
    {
        "number": 4372,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    min_people = 1\n    min_swords = max(a)\n\n    for people in range(1, len(a) + 1):\n        for swords in range(1, len(a) + 1):\n            if sum([x // swords for x in a]) >= people:\n                min_people = min(min_people, people)\n                min_swords = min(min_swords, swords)\n\n    return f\"{min_people} {min_swords}\"",
        "test": "assert solution(\"6\\n13 52 0 13 26 52\") == \"12 13\" ",
        "num_ids": 1421
    },
    {
        "number": 4373,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, contests = stdin.split('\\n')\n    n = int(n)\n    contests = list(map(int, contests.split()))\n\n    days = 0\n    for i, contest_problems in enumerate(contests):\n        if contest_problems > days:\n            days = contest_problems\n            if days > n:\n                break\n\n    return str(days)",
        "test": "assert solution(\"3\\n1 1 1\") == \"1\"",
        "num_ids": 862
    },
    {
        "number": 4374,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    edges = [tuple(map(int, line.split())) for line in stdin.strip().split('\\n')[1:]]\n    \n    # Check if the graph is already a tree\n    visited = [False] * n\n    def dfs(node):\n        visited[node - 1] = True\n        for neighbor in range(n):\n            if not visited[neighbor] and (node, neighbor + 1) in edges:\n                dfs(neighbor + 1)\n    dfs(1)\n    if all(visited):\n        diameter = -1\n        for i in range(n):\n            for j in range(i + 1, n):\n                if (i + 1, j + 1) not in edges:\n                    diameter = max(diameter, 1 + shortest_path(i + 1, j + 1, edges))\n        return str(diameter)\n    \n    # Add edges to make the graph a tree\n    visited = [False] * n\n    def dfs(node, parent):\n        visited[node - 1] = True\n        for neighbor in range(n):\n            if not visited[neighbor] and (node, neighbor + 1) not in edges and (parent, neighbor + 1) not in edges:\n                edges.append((node, neighbor + 1))\n                dfs(neighbor + 1, node)\n    dfs(1, None)\n    \n    # Calculate the diameter\n    diameter = -1\n    for i in range(n):\n        for j in range(i + 1, n):\n            diameter = max(diameter, 1 + shortest_path(i + 1, j + 1, edges))\n    \n    # Print the result\n    res = str(diameter) + '\\n'\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if (i + 1, j + 1) not in edges:\n                res += ' '.join(map(str, [i + 1, j + 1])) + '\\n'\n    return res\n\ndef",
        "test": "assert solution(\"3 2\\n1 3\\n2 3\\n\") == \"2\" ",
        "num_ids": 2589
    },
    {
        "number": 4375,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k = map(int, stdin.splitlines()[0].split())\n    weights = list(map(int, stdin.splitlines()[1].split()))\n    graph = [[] for _ in range(n)]\n    for i in range(n-1):\n        u, v = map(int, stdin.splitlines()[i+2].split())\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    \n    # Helper function to check if distance between two vertices is more than k\n    def distance_more_than_k(u: int, v: int) -> bool:\n        visited = [False] * n\n        queue = [(u, 0)]\n        while queue:\n            node, d = queue.pop(0)\n            if node == v:\n                return True\n            if not visited[node]:\n                visited[node] = True\n                for nei in graph[node]:\n                    if visited[nei]:\n                        continue\n                    queue.append((nei, d+1))\n        return False\n    \n    # Find maximum total weight\n    max_weight = 0\n    for subset in itertools.combinations(range(n), n-k):\n        subset_weight = sum(weights[i] for i in subset)\n        for u, v in itertools.combinations(subset, 2):\n            if distance_more_than_k(u, v):\n                max_weight = max(max_weight, subset_weight)\n                break\n        else:\n            continue\n        break\n    \n    return str(max_weight)",
        "test": "assert solution(\"7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n\") == \"4\" ",
        "num_ids": 2732
    },
    {
        "number": 4376,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.split()[:2])\n    dorm_sizes = list(map(int, stdin.split()[2:n+2]))\n    room_numbers = list(map(int, stdin.split()[n+2:]))\n\n    # Compute total number of rooms\n    total_rooms = sum(dorm_sizes)\n\n    # Compute room numbers for each dormitory\n    dorm_room_numbers = [sum(dorm_sizes[:i]) for i in range(n)]\n\n    # Compute room number in each dormitory\n    room_numbers_per_dorm = []\n    for i in range(n):\n        room_numbers_per_dorm.extend([room_number for room_number in room_numbers if dorm_room_numbers[i] <= room_number < dorm_room_numbers[i] + dorm_sizes[i]])\n\n    # Compute the delivery information\n    deliveries = []\n    for i in range(m):\n        delivery = []\n        for j in range(n):\n            if dorm_room_numbers[j] <= room_numbers[i] < dorm_room_numbers[j] + dorm_sizes[j]:\n                delivery = [j+1, room_numbers[i] - dorm_room_numbers[j] + 1]\n                break\n        deliveries.append(delivery)\n\n    # Format the output\n    output = \"\"\n    for delivery in deliveries:\n        if delivery:\n            output += \" \".join(map(str, delivery)) + \"\\n\"\n        else:\n            output += \"0 0\\n\"\n\n    return output",
        "test": "assert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\\n\" ",
        "num_ids": 1983
    },
    {
        "number": 4377,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4 = map(int, stdin.split())\n    \n    # create all possible combinations of three integers\n    combinations = [(a, b, c) for a in range(1, x1+1) for b in range(1, x2+1) for c in range(1, x3+1)]\n    \n    # find the combination that satisfies the conditions\n    for a, b, c in combinations:\n        if a+b == x1 and a+c == x2 and b+c == x3 and a+b+c == x4:\n            return f\"{a} {b} {c}\"",
        "test": "assert solution(\"40 40 40 60\") == \"20 20 20\"",
        "num_ids": 1154
    },
    {
        "number": 4378,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    garland = stdin.readline().strip()\n    recolor_count = 0\n    diverse_garland = \"\"\n\n    for i in range(n):\n        if i > 0 and garland[i] == garland[i - 1]:\n            diverse_garland += \"G\" if garland[i] == \"R\" else \"R\"\n            recolor_count += 1\n        else:\n            diverse_garland += garland[i]\n\n    return str(recolor_count) + \"\\n\" + diverse_garland",
        "test": "assert solution(\"13\\nBBRRRRGGGGGRR\") == \"6\\nBGRBRBGBGBGRG\" ",
        "num_ids": 2092
    },
    {
        "number": 4379,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    max_len = 1\n    max_seq = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if is_increasing(arr[i:j]):\n                if j-i > max_len:\n                    max_len = j-i\n                    max_seq = [k for k in range(i, j)]\n    return str(max_len) + \"\\n\" + \" \".join(map(str, max_seq))\n\ndef",
        "test": "assert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\" ",
        "num_ids": 1642
    },
    {
        "number": 4380,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if (A * B) % 2 == 1:\n        return \"Yes\"\n\n    return \"No\"",
        "test": "assert solution(\"3 1\") == \"Yes\"",
        "num_ids": 528
    },
    {
        "number": 4381,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if Y % 2 == 0:\n        half_fare = Y // 2\n        total_cost = X + half_fare\n        return str(total_cost)\n    else:\n        return \"Invalid input. Y must be an even number.\"",
        "test": "assert solution(\"81 58\") == \"110\"",
        "num_ids": 532
    },
    {
        "number": 4382,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(n ** 3)",
        "test": "assert solution('2') == '8', \"Test case 1 failed\"",
        "num_ids": 435
    },
    {
        "number": 4383,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 5 or x == 7 or x == 3:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5\") == \"YES\"",
        "num_ids": 521
    },
    {
        "number": 4384,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N < 1000:\n        return \"ABC\"\n    elif N < 2000:\n        return \"ABD\"\n    else:\n        return \"ABE\"",
        "test": "assert solution(\"1\") == \"ABC\"",
        "num_ids": 618
    },
    {
        "number": 4385,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n\n    distances = [(b - a), (c - b), (d - c), (e - d)]\n    max_distance = max(distances)\n\n    if max_distance > k:\n        return \":( Yay!\"\n    else:\n        return \"Yay!\"",
        "test": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"",
        "num_ids": 1190
    },
    {
        "number": 4386,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, s = stdin.strip().split('\\n')\n    a = int(a)\n    if a < 3200:\n        return \"red\"\n    else:\n        return s",
        "test": "assert solution(\"3200\\npink\") == \"pink\"  # a >= 3200, print s",
        "num_ids": 654
    },
    {
        "number": 4387,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin)\n    \n    if rating < 1200:\n        return \"ABC\"\n    elif rating < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"",
        "test": "assert solution(\"1199\") == \"ABC\"",
        "num_ids": 577
    },
    {
        "number": 4388,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    new_n = \"\"\n    for digit in str(n):\n        if digit == \"1\":\n            new_n += \"9\"\n        elif digit == \"9\":\n            new_n += \"1\"\n        else:\n            new_n += digit\n    return new_n",
        "test": "assert solution(\"119\") == \"991\"",
        "num_ids": 678
    },
    {
        "number": 4389,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    result = []\n    for test_case in test_cases[1:]:\n        b = test_case\n        a = \"\"\n        i = 0\n        while i < len(b):\n            a += b[i] + b[i+1]\n            i += 2\n        result.append(a)\n    return \"\\n\".join(result)\n\ninput_string = \"\"\"4\nabbaac\nac\nbccddaaf\nzzzzzzzzzz\"\"\"\nprint(solution(input_string))",
        "test": "assert solution(\"zzzzzzzzzz\") == \"zzzzzz\" ",
        "num_ids": 922
    },
    {
        "number": 4390,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    results = []\n\n    for i in range(1, t + 1):\n        a, b = map(int, stdin.split('\\n')[i].split())\n\n        if a % b == 0:\n            results.append(0)\n        else:\n            results.append(b - a % b)\n\n    return \"\\n\".join(map(str, results))",
        "test": "assert solution(\"5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"",
        "num_ids": 1128
    },
    {
        "number": 4391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    temperatures = list(map(int, input().split()))\n\n    def avg_temperature(start, end):\n        return sum(temperatures[start:end+1]) / (end - start + 1)\n\n    def heat_intensity(n):\n        return max(avg_temperature(i, i+n-1) for i in range(len(temperatures)-n+1))\n\n    return str(heat_intensity(k))\n\ndef",
        "test": "assert solution(\"4 3\\n3 4 1 2\") == \"2.666666666666667\" ",
        "num_ids": 1092
    },
    {
        "number": 4392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    num_cases = int(lines[0])\n    results = []\n\n    for i in range(1, num_cases + 1):\n        n, m = map(int, lines[3 * i - 2].split())\n        a = list(map(int, lines[3 * i - 1].split()))\n        p = list(map(int, lines[3 * i].split()))\n\n        for pos in p:\n            if a[pos] > a[pos + 1]:\n                a[pos], a[pos + 1] = a[pos + 1], a[pos]\n\n        if a == sorted(a):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    return \"\\n\".join(results)",
        "test": "assert solution(\"6\\n3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\") == \"YES\\nNO\\nYES\\nYES\\nNO\\nYES\\n\" ",
        "num_ids": 1954
    },
    {
        "number": 4393,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split()\n    n = int(n)\n\n    result = \"\"\n    prev = \"\"\n    count = 1\n\n    for i in range(n):\n        if t[i] == prev:\n            count += 1\n        else:\n            result += prev * count\n            prev = t[i]\n            count = 1\n\n    result += prev * count\n\n    return result",
        "test": "assert solution(\"1\\nz\") == \"z\" ",
        "num_ids": 777
    },
    {
        "number": 4394,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    edges = []\n    for i in range(m):\n        u, v, w = map(int, stdin.split()[3*i+2:3*i+5])\n        edges.append((u, v, w))\n    \n    min_operations = 0\n    for edge in edges:\n        u, v, w = edge\n        min_operations += max(0, w - 1)\n    \n    return str(min_operations)\n\n\ninput_string = \"\"\nwith open('input.txt', 'r') as file:\n    input_string = file.read()\n\noutput_string = solution(input_string)\n\nwith open('output.txt', 'w') as file:\n    file.write(output_string) ",
        "test": "assert solution(\"\"\"",
        "num_ids": 2590
    },
    {
        "number": 4395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    garland = stdin.split('\\n')[1]\n\n    def is_nice(t: str) -> bool:\n        for i in range(n - 1):\n            if t[i] == t[i + 1] and (i - j) % 3 != 0:\n                return False\n        return True\n\n    min_recolors = n\n    min_garland = garland\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            t = list(garland)\n            if garland[i] == garland[j]:\n                continue\n            t[i] = garland[j]\n            t[j] = garland[i]\n            t = ''.join(t)\n\n            if is_nice(t):\n                recolors = sum([1 for k in range(n) if garland[k] != t[k]])\n                if recolors < min_recolors:\n                    min_recolors = recolors\n                    min_garland = ''.join(t)\n\n    return str(min_recolors) + '\\n' + min_garland",
        "test": "assert solution(\"7\\nRGBGRBB\\n\") == \"3\\nRGBRGBR\\n\"",
        "num_ids": 1884
    },
    {
        "number": 4396,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    total = 0\n    \n    for i in range(1, n+1):\n        x, u = lines[i].split()\n        if u == \"JPY\":\n            total += int(x)\n        else:\n            total += float(x) * 380000\n    \n    return f\"{total:.1f}\"\n\ninput_data = \"\"\"2\n10000 JPY\n0.10000000 BTC\"\"\"\nprint(solution(input_data)) # Output: 48000.0 ",
        "test": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"",
        "num_ids": 1444
    },
    {
        "number": 4397,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    j = N - (i - 1)\n    return str(j)",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 424
    },
    {
        "number": 4398,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, S, T = stdin.split()\n    N = int(N)\n    new_string = \"\"\n    for i in range(N):\n        new_string += S[i]\n        new_string += T[i]\n    return new_string",
        "test": "assert solution(\"2\\nip cc\") == \"icpc\"",
        "num_ids": 746
    },
    {
        "number": 4399,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to a list of characters\n    stations = list(stdin)\n    \n    # Check if there is a pair of stations that will be connected by a bus service\n    if (stations[0] == 'A' and stations[1] == 'B') or (stations[1] == 'A' and stations[2] == 'B') or (stations[0] == 'B' and stations[2] == 'A'):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"AAA\") == \"No\"",
        "num_ids": 643
    },
    {
        "number": 4400,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    rainy_days = 0\n    max_rainy_days = 0\n\n    for day in stdin:\n        if day == \"R\":\n            rainy_days += 1\n            if rainy_days > max_rainy_days:\n                max_rainy_days = rainy_days\n        else:\n            rainy_days = 0\n\n    return max_rainy_days",
        "test": "assert solution(\"RRR\") == \"3\"",
        "num_ids": 731
    },
    {
        "number": 4401,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    \n    # swap A and B\n    a, b = x, y\n    x, y = b, a\n    \n    # swap A and C\n    a, c = x, z\n    x, z = c, a\n    \n    return f\"{x} {y} {z}\"",
        "test": "assert solution(\"1 2 3\") == \"3 1 2\"",
        "num_ids": 858
    },
    {
        "number": 4402,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    age, price = map(int, stdin.split())\n    \n    if age < 6:\n        return \"0\"\n    elif age <= 12:\n        return str(price // 2)\n    elif age >= 13:\n        return str(price)\n    else:\n        return \"Invalid Age\"\n    \n",
        "test": "assert solution(\"30 100\") == \"100\"",
        "num_ids": 661
    },
    {
        "number": 4403,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    initial_value = 0\n    for symbol in stdin:\n        if symbol == \"+\":\n            initial_value += 1\n        else:\n            initial_value -= 1\n    return str(initial_value)",
        "test": "assert solution('+-++') == '2'",
        "num_ids": 565
    },
    {
        "number": 4404,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    year, month, day = stdin.split(\"/\")\n    year, month, day = int(year), int(month), int(day)\n    \n    if year == 2019 and month == 4 and day <= 30:\n        return \"Heisei\"\n    else:\n        return \"TBD\"",
        "test": "assert solution(\"2019/04/30\") == \"Heisei\"",
        "num_ids": 779
    },
    {
        "number": 4405,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    problems = stdin.split()\n    n = int(problems[0])\n    topics = problems[1:]\n    max_topics = len(set(topics))\n\n    def count_problems(contest_topics):\n        return sum([topics.count(topic) for topic in contest_topics])\n\n    def is_valid(contest_topics):\n        return len(set(contest_topics)) == len(contest_topics)\n\n    def backtracking(topics_remaining, contest_topics, current_count, best_count):\n        if not topics_remaining and current_count > best_count:\n            best_count = current_count\n        else:\n            for i, topic in enumerate(topics_remaining):\n                if i == 0 or topic != topics_remaining[i - 1]:\n                    new_topics = [topic]\n                    new_topics.extend(contest_topics)\n                    new_topics = sorted(list(set(new_topics)))\n                    if is_valid(new_topics):\n                        new_count = count_problems(new_topics)\n                        if new_count > best_count:\n                            new_topics_remaining = [topic for topic in topics_remaining if topic != topic]\n                            best_count = backtracking(new_topics_remaining, new_topics, new_count, best_count)\n        return best_count\n\n    return str(backtracking(topics, [], 0, 0))\n",
        "test": "assert solution(\"3\\n1337 1337 1337\") == \"3\"",
        "num_ids": 1710
    },
    {
        "number": 4406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    messages = list(map(int, input().split()))\n    \n    conversations = []\n    seen_messages = set()\n    \n    for message in messages:\n        if message not in seen_messages:\n            if len(conversations) >= k:\n                conversations.pop()\n            \n            conversations.insert(0, message)\n            seen_messages.add(message)\n    \n    return str(len(conversations)) + \"\\n\" + \" \".join(map(str, conversations))",
        "test": "assert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\\n\" ",
        "num_ids": 1142
    },
    {
        "number": 4407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, input().split())\n    coins = list(map(int, input().split()))\n    queries = [int(input()) for _ in range(q)]\n\n    def find_coins_to_sum(coins: list, target: int) -> int:\n        min_coins = float('inf')\n        for i in range(1, len(coins) + 1):\n            if i == 1:\n                if coins[i - 1] == target:\n                    return 1\n                elif coins[i - 1] > target:\n                    return -1\n            else:\n                for j in range(i):\n                    if coins[i - 1] + coins[j] == target:\n                        min_coins = min(min_coins, i - j)\n                    elif coins[i - 1] + coins[j] > target:\n                        break\n        return min_coins if min_coins != float('inf') else -1\n\n    answers = []\n    for query in queries:\n        answers.append(find_coins_to_sum(coins, query))\n\n    return '\\n'.join(map(str, answers))\n\nstdin = '''5 4\n2 4 8 2 4 \n8\n5\n14\n10'''\nprint(solution(stdin)) ",
        "test": "assert solution(\"6 3\\n16 8 32 16 8 8\\n4\\n12\\n8\\n16\") == \"1\\n-1\\n3\\n2\" ",
        "num_ids": 1760
    },
    {
        "number": 4408,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, k = map(int, lines[0].split())\n    cards = list(map(int, lines[1].split()))\n    favorites = list(map(int, lines[2].split()))\n    joy_levels = list(map(int, lines[3].split()))\n\n    card_dict = {}\n    for card in cards:\n        card_dict[card] = card_dict.get(card, 0) + 1\n\n    total_joy = 0\n    for favorite in favorites:\n        if favorite not in card_dict:\n            continue\n        joy = 0\n        count = card_dict[favorite]\n        for i, level in enumerate(joy_levels):\n            if count >= i:\n                joy += level\n        total_joy += joy\n\n    return str(total_joy)",
        "test": "assert solution(\"3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\" ",
        "num_ids": 1903
    },
    {
        "number": 4409,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    # Calculate the target value\n    target_value = sum(a) // n\n\n    # Initialize the operation list\n    operations = []\n\n    # Initialize the current array\n    current_array = a.copy()\n\n    # Loop until all elements are equal to the target value\n    while any(current_array[i] != target_value for i in range(n)):\n        # Find the pair of indices with the maximum difference\n        max_diff = 0\n        max_indices = []\n        for i in range(n):\n            for j in range(n):\n                if i != j and abs(current_array[i] - current_array[j]) > max_diff:\n                    max_diff = abs(current_array[i] - current_array[j])\n                    max_indices = [i, j]\n\n        # Perform the operation\n        if current_array[max_indices[0]] > current_array[max_indices[1]]:\n            operations.append(('1', max_indices[0]+1, max_indices[1]+1))\n            current_array[max_indices[0]] = target_value\n        else:\n            operations.append(('2', max_indices[0]+1, max_indices[1]+1))\n            current_array[max_indices[0]] = target_value - abs(current_array[max_indices[0]] - current_array[max_indices[1]])\n\n    # Print the result\n    result = [str(len(operations))]\n    result.extend([' '.join(operation) for operation in operations])\n    return '\\n'.join(result)",
        "test": "assert solution(\"4\\n1 1 1 1\") == \"0\" ",
        "num_ids": 1864
    },
    {
        "number": 4410,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    result = []\n    \n    for i in range(0, len(test_cases), 2):\n        n, k = map(int, test_cases[i].split())\n        s = test_cases[i+1]\n        \n        free_tables = s.count('0')\n        occupied_tables = s.count('1')\n        \n        if occupied_tables == 0 or occupied_tables == n:\n            result.append(free_tables)\n        else:\n            max_tables = 0\n            for i in range(occupied_tables):\n                index = s.find('1', i+1)\n                distance = index - i - 1\n                max_tables = max(max_tables, free_tables - (distance // k + 1))\n                \n            result.append(max_tables)\n            \n    return \"\\n\".join(map(str, result))\n\ninput_data = \"\"\"6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\"\"\"\n\nprint(solution(input_data)) ",
        "test": "assert solution(\"6 1\\n100010\") == \"1\"",
        "num_ids": 1706
    },
    {
        "number": 4411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    def is_bad(i, k, segments):\n        count = 0\n        for segment in segments:\n            if segment[0] <= i <= segment[1]:\n                count += 1\n        return count > k\n\n    n, k = map(int, stdin.split()[0:2])\n    segments = [(int(line.split()[0]), int(line.split()[1])) for line in stdin.split('\\n')[1:]]\n    segments.sort(key=lambda x: x[1])\n\n    bad_points = set()\n    for i in range(1, segments[-1][1] + 1):\n        if is_bad(i, k, segments):\n            bad_points.add(i)\n\n    if not bad_points:\n        return \"0\\n\"\n\n    min_segments = n\n    min_indices = set(range(1, n + 1))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if segments[i][0] <= segments[j][0] <= segments[i][1] <= segments[j][1]:\n                new_segments = segments[:i] + segments[j:]\n                new_bad_points = set()\n                for point in bad_points:\n                    if not is_bad(point, k, new_segments):\n                        new_bad_points.add(point)\n                if not new_bad_points:\n                    if len(new_segments) < min_segments:\n                        min_segments = len(new_segments)\n                        min_indices = set([i + 1, j + 1])\n                    elif len(new_segments) == min_segments:\n                        min_indices.add(i + 1)\n                        min_indices.add(j + 1)\n    return str(min_segments) + \"\\n\" + \" \".join(map(str, sorted(min_indices))) + \"\\n\"",
        "test": "assert solution(",
        "num_ids": 2605
    },
    {
        "number": 4412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(n, a, b, c):\n        return (a % b == 0 and a % c == 0) or (b % a == 0 and b % c == 0) or (c % a == 0 and c % b == 0)\n\n    def max_cumulative_prettiness(n, a):\n        a.sort(reverse=True)\n        max_prettiness = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if is_valid(n, a[i], a[j], a[k]):\n                        max_prettiness = max(max_prettiness, a[i] + a[j] + a[k])\n        return max_prettiness\n\n    q = int(stdin.readline().strip())\n    result = []\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        max_prettiness = max_cumulative_prettiness(n, a)\n        result.append(max_prettiness)\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"3\\n4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\") == \"30\\n31\\n10\"",
        "num_ids": 2119
    },
    {
        "number": 4413,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    result = []\n\n    for q in range(int(queries[0])):\n        n = int(queries[q * 2 + 1])\n        students = list(map(int, queries[q * 2 + 2].split()))\n        students.sort()\n\n        teams = []\n        for i in range(n):\n            if not teams or abs(students[i] - teams[-1][-1]) > 1:\n                teams.append([students[i]])\n            else:\n                teams[-1].append(students[i])\n\n        result.append(len(teams))\n\n    return \"\\n\".join(map(str, result))\n\ninput_data = \"\"\"4\n4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42\"\"\"\n\nprint(solution(input_data)) ",
        "test": "assert solution(\"1\\n5\\n2 3 4 99 100\") == \"2\"",
        "num_ids": 1266
    },
    {
        "number": 4414,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    for i in range(1, q+1):\n        a, b, n, S = map(int, stdin.splitlines()[i].split())\n        total_coins = a*n + b\n        if total_coins < S:\n            print(\"NO\")\n        else:\n            x = S // n\n            y = total_coins - x*n\n            if y >= 0 and y <= b:\n                print(\"YES\")\n            else:\n                print(\"NO\")",
        "test": "assert solution('1\\n2 3 4 5') == 'YES'",
        "num_ids": 1163
    },
    {
        "number": 4415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    def merge_sequences(increasing, decreasing):\n        return increasing + decreasing\n    \n    def is_valid_sequence(seq, increasing):\n        if not increasing:\n            return all(seq[i] <= seq[i+1] for i in range(len(seq)-1))\n        else:\n            return all(seq[i] >= seq[i+1] for i in range(len(seq)-1))\n    \n    def find_increasing_decreasing_sequences(a):\n        increasing = []\n        decreasing = []\n        for i in range(len(a)-1):\n            if a[i] < a[i+1]:\n                increasing.append(a[i])\n            elif a[i] > a[i+1]:\n                decreasing.append(a[i])\n        return increasing, decreasing\n    \n    def print_sequences(increasing, decreasing):\n        if not is_valid_sequence(increasing, False) or not is_valid_sequence(decreasing, True):\n            return \"NO\"\n        \n        increasing_str = \" \".join(map(str, increasing))\n        decreasing_str = \" \".join(map(str, decreasing))\n        return f\"YES\\n{len(increasing)}\\n{increasing_str}\\n{len(decreasing)}\\n{decreasing_str}\"\n    \n    increasing, decreasing = find_increasing_decreasing_sequences(a)\n    return print_sequences(increasing, decreasing)",
        "test": "assert solution(\"5\\n0 1 2 3 4\\n\") == \"YES\\n0\\n\"",
        "num_ids": 2608
    },
    {
        "number": 4416,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    books = []\n\n    for line in stdin.splitlines()[1:]:\n        t, a, b = map(int, line.split())\n        books.append((t, a, b))\n\n    books.sort(key=lambda x: x[0])\n    total_time = 0\n    alice_books = 0\n    bob_books = 0\n\n    for book in books:\n        total_time += book[0]\n        alice_books += book[1]\n        bob_books += book[2]\n\n        if alice_books >= k and bob_books >= k:\n            return str(total_time)\n\n    return \"-1\"",
        "test": "assert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\") == \"-1\" ",
        "num_ids": 2440
    },
    {
        "number": 4417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def check_condition(a_list, B, k):\n        return all(abs(a_i - B) <= k for a_i in a_list)\n\n    q = int(stdin.readline().strip())\n    results = []\n    for _ in range(q):\n        n, k = map(int, stdin.readline().strip().split())\n        a_list = list(map(int, stdin.readline().strip().split()))\n\n        # Check if it is possible to equalize prices of all given products\n        if not all(a_i > 0 for a_i in a_list):\n            results.append(-1)\n            continue\n\n        # Find the maximum possible equal price B\n        left = max(a_list)\n        right = sum(a_list) // n\n        while left <= right:\n            mid = (left + right) // 2\n            if check_condition(a_list, mid, k):\n                left = mid + 1\n            else:\n                right = mid - 1\n        B = left - 1\n\n        results.append(B)\n\n    return \" \".join(map(str, results))",
        "test": "assert solution(\"4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2 6 -1 7\"",
        "num_ids": 1471
    },
    {
        "number": 4418,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    def is_good(length: int) -> bool:\n        if length % 6 != 0:\n            return False\n        subsequence = [[] for _ in range(6)]\n        for i in range(length):\n            j = a[i] - 4\n            subsequence[j].append(i)\n        return all(len(s) >= length // 6 for s in subsequence)\n    \n    for i in range(n, 0, -1):\n        if is_good(i):\n            return str(n - i)\n    return str(n)",
        "test": "assert solution(\"5\\n4 8 15 16 23\") == \"5\"",
        "num_ids": 1371
    },
    {
        "number": 4419,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    output = []\n    test_cases = int(stdin.split(\"\\n\")[0])\n    for i in range(1, test_cases + 1):\n        a, b = map(int, stdin.split(\"\\n\")[i].split())\n        if a == b:\n            output.append(0)\n        else:\n            output.append(min(abs(a - b), abs(a - 2 * b - a)))\n    return \"\\n\".join(map(str, output))",
        "test": "assert solution(\"1\\n5 5\") == \"0\"",
        "num_ids": 1273
    },
    {
        "number": 4420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    output = []\n    test_cases = int(stdin.readline())\n    for _ in range(test_cases):\n        x, y, n = map(int, stdin.readline().split())\n        k = (n // x) * x + y\n        output.append(str(k))\n    return \"\\n\".join(output)",
        "test": "assert solution(\"4\\n2 3 4\\n4 5 6\\n6 7 8\\n8 9 10\") == \"4\\n\"",
        "num_ids": 1184
    },
    {
        "number": 4421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    candies = list(map(int, stdin.split()[2:]))\n    \n    max_gifts = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            total_candies = candies[i] + candies[j]\n            if total_candies % k == 0:\n                max_gifts += 1\n    \n    return str(max_gifts)",
        "test": "assert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"",
        "num_ids": 1226
    },
    {
        "number": 4422,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list[0])\n    K = int(input_list[1])\n    S = input_list[2]\n\n    if 1 <= N <= 50 and 1 <= K <= N and len(S) == N and S.isalpha():\n        S_list = list(S)\n        S_list[K-1] = S_list[K-1].lower()\n        return \"\".join(S_list)\n    else:\n        return \"Invalid input\"",
        "test": "assert solution(\"3 1\\nABC\") == \"aBC\"",
        "num_ids": 798
    },
    {
        "number": 4423,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def sort_key(restaurant: List[str]) -> str:\n        return restaurant[0]\n\n    def sort_key_descending(restaurant: List[str]) -> int:\n        return -int(restaurant[1])\n\n    lines = stdin.split('\\n')\n    restaurants = [line.split() for line in lines[1:-1]]\n    restaurants.sort(key=sort_key)\n\n    for city in set([restaurant[0] for restaurant in restaurants]):\n        restaurants_in_city = [restaurant for restaurant in restaurants if restaurant[0] == city]\n        restaurants_in_city.sort(key=sort_key_descending)\n        for restaurant in restaurants_in_city:\n            print(restaurants.index(restaurant) + 1)\n\nstdin = \"\"\"6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\n\"\"\"\nsolution(stdin) ",
        "test": "assert solution(\"6\\nkhabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\\n\"",
        "num_ids": 1675
    },
    {
        "number": 4424,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    return \"Yes\" if K * 500 >= X else \"No\"",
        "test": "assert solution(\"2 900\") == \"Yes\"",
        "num_ids": 618
    },
    {
        "number": 4425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n\n    # Calculate the probability of getting a score of K or above for each possible die roll\n    probabilities = [0] * N\n    for i in range(1, N+1):\n        if i == 1:\n            probabilities[i-1] = 1/48\n        elif i == 2:\n            probabilities[i-1] = 1/24\n        elif i == 3:\n            probabilities[i-1] = 1/12\n        else:\n            probabilities[i-1] = 1/N\n\n    # Calculate the probability of winning the game\n    winning_probability = sum(probabilities[K-1:])\n\n    # Calculate the probability of losing the game\n    losing_probability = 1 - winning_probability\n\n    return str(winning_probability)",
        "test": "assert solution(\"3 10\") == \"0.14583333333\"",
        "num_ids": 1234
    },
    {
        "number": 4426,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    days = {\n        'SUN': 0,\n        'MON': 1,\n        'TUE': 2,\n        'WED': 3,\n        'THU': 4,\n        'FRI': 5,\n        'SAT': 6\n    }\n\n    today = days[stdin.upper()]\n    next_sunday = (7 - today) % 7\n\n    return str(next_sunday)",
        "test": "assert solution('MON') == '6'",
        "num_ids": 722
    },
    {
        "number": 4427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x = list(map(int, stdin.split()))\n    for i in range(1, 11):\n        x = r * x - D\n        print(int(x))",
        "test": "assert solution(\"4 20 10\") == \"12\\n19\\n26\\n33\\n40\\n47\\n54\\n61\\n68\\n75\\n\" ",
        "num_ids": 1147
    },
    {
        "number": 4428,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1:]))\n    \n    max_sum = 0\n    \n    for i in range(n + 1):\n        for j in range(n - i + 1):\n            k = n - i - j\n            if i + j + k == n and sum(d[:i]) == sum(d[i:i+j]):\n                max_sum = max(max_sum, sum(d[:i]))\n    \n    return str(max_sum)",
        "test": "assert solution('3\\n4 1 2') == '0' ",
        "num_ids": 1314
    },
    {
        "number": 4429,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    def find_solution(x, y, z):\n        if x == y == z:\n            return \"NO\"\n        if x >= y + z or y >= x + z or z >= x + y:\n            return \"NO\"\n        if x == max(x, y, z):\n            a, b, c = x, y, z\n        elif y == max(x, y, z):\n            a, b, c = y, x, z\n        else:\n            a, b, c = z, x, y\n        return f\"YES\\n{a} {b} {c}\"\n\n    output = []\n    for i in range(int(stdin.split(\"\\n\")[0])):\n        x, y, z = map(int, stdin.split(\"\\n\")[i + 1].split())\n        result = find_solution(x, y, z)\n        output.append(result)\n\n    return \"\\n\".join(output)\n",
        "test": "assert solution(\"1\\n1000 2000 3000\") == \"NO\" ",
        "num_ids": 1897
    },
    {
        "number": 4430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    max_packed = 0\n    for i in range(1, n + 1):\n        # Empty all boxes\n        boxes = [k] * m\n        packed = 0\n\n        for j in range(i, n + 1):\n            # Find the first box that can fit the object\n            box_index = next((index for index, box_size in enumerate(boxes) if box_size >= a[j - 1]), None)\n\n            if box_index is None:\n                # No box can fit the object\n                break\n\n            # Pack the object in the chosen box\n            boxes[box_index] -= a[j - 1]\n            packed += 1\n\n        max_packed = max(max_packed, packed)\n\n    return str(max_packed)",
        "test": "assert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\" ",
        "num_ids": 1378
    },
    {
        "number": 4431,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[2]\n    available_letters = stdin.split()[3:]\n\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if all(letter in available_letters for letter in substring):\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"7 1\\naaaaaaa\\nb\\n\") == \"0\" ",
        "num_ids": 975
    },
    {
        "number": 4432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    def find_alternating_subsequence(a: list) -> int:\n        n = len(a)\n        dp = [0] * n\n        for i in range(n):\n            dp[i] = [0] * 2\n        dp[0][0] = a[0]\n        dp[0][1] = -a[0]\n        for i in range(1, n):\n            if a[i] > 0:\n                dp[i][0] = max(dp[i - 1][1] + a[i], dp[i - 1][0])\n                dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - a[i])\n            else:\n                dp[i][0] = max(dp[i - 1][0] - a[i], dp[i - 1][1])\n                dp[i][1] = max(dp[i - 1][0], dp[i - 1][1] + a[i])\n        return max(dp[-1][0], dp[-1][1])\n\n    t = int(stdin.readline())\n    result = []\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        result.append(find_alternating_subsequence(a))\n    return '\\n'.join(map(str, result))\n\nimport sys",
        "test": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-299999997\" ",
        "num_ids": 2059
    },
    {
        "number": 4433,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    def read_input() -> tuple:\n        n, m = map(int, stdin.readline().strip().split())\n        edges = [tuple(map(int, stdin.readline().strip().split())) for _ in range(m)]\n        return n, edges\n\n    def create_spanning_tree(n: int, edges: list) -> list:\n        graph = [[] for _ in range(n)]\n        for v, u in edges:\n            graph[v - 1].append(u - 1)\n            graph[u - 1].append(v - 1)\n\n        visited = [False] * n\n        spanning_tree = []\n        stack = [0]\n        while stack:\n            node = stack.pop()\n            if not visited[node]:\n                visited[node] = True\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        stack.append(neighbor)\n                        spanning_tree.append((node + 1, neighbor + 1))\n\n        return spanning_tree\n\n    def find_max_degree_spanning_tree(n: int, edges: list) -> list:\n        spanning_tree = create_spanning_tree(n, edges)\n        max_degree = max(len(neighbors) for neighbors in create_spanning_tree(n, edges))\n        return [edge for edge in spanning_tree if len(create_spanning_tree(n, edges + [edge])) == max_degree]\n\n    n, edges = read_input()\n    return \"\\n\".join(str(v) + \" \" + str(u) for v, u in find_max_degree_spanning_tree(n, edges))",
        "test": "assert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\\n\" ",
        "num_ids": 2910
    },
    {
        "number": 4434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    def get_neighbors(i, j, n):\n        return [(x, y) for x in range(max(0, i - 1), min(i + 2, n)) for y in range(max(0, j - 1), min(j + 2, n)) if (x, y) != (i, j)]\n\n    def bfs(start, end, n):\n        queue = [(start, 0)]\n        visited = set()\n        while queue:\n            cell, depth = queue.pop(0)\n            if cell == end:\n                return depth\n            if cell in visited:\n                continue\n            visited.add(cell)\n            for neighbor in get_neighbors(*cell, n):\n                queue.append((neighbor, depth + 1))\n        return -1\n\n    def is_valid(line: str) -> bool:\n        try:\n            n = int(line)\n            return 1 <= n < 500000 and n % 2 == 1\n        except ValueError:\n            return False\n\n    def main(stdin: str) -> str:\n        output = []\n        test_cases = stdin.split('\\n')\n        for t, test in enumerate(test_cases):\n            if t == 0:\n                continue\n            if not is_valid(test):\n                raise ValueError(f\"Invalid test case {t}: {test}\")\n            n = int(test)\n            start = (n // 2, n // 2)\n            end = (n // 2, n // 2 - 1)\n            answer = bfs(start, end, n)\n            output.append(str(answer))\n        return '\\n'.join(output)\n\n    return main(stdin)\n\ninput_text = \"\"\"3\n1\n5\n499993\"\"\"\noutput_text = solution(input_text)\nprint(output_text) ",
        "test": "assert solution(\"3\\n1\\n5\\n499993\\n\") == \"0\\n40\\n41664916690999888\"",
        "num_ids": 1813
    },
    {
        "number": 4435,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n\n    def get_min_moves(i: int, parity: int) -> int:\n        if i < 1 or i > n:\n            return -1\n\n        if (a[i - 1] % 2 != parity) and (i - a[i - 1] >= 1 or i + a[i - 1] <= n):\n            return 1\n\n        return min(get_min_moves(i - a[i - 1], 1 - parity), get_min_moves(i + a[i - 1], 1 - parity))\n\n    result = []\n    for i in range(1, n + 1):\n        result.append(get_min_moves(i, a[i - 1] % 2))\n\n    return \" \".join(map(str, result))",
        "test": "assert solution(\"3\\n1 2 3\") == \"-1 -1 -1\"",
        "num_ids": 1879
    },
    {
        "number": 4436,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    def factors(n: int) -> List[int]:\n        factors_list = []\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                factors_list.append(i)\n                if i != n // i:\n                    factors_list.append(n//i)\n        return factors_list\n\n    def prime_factors(n: int) -> List[int]:\n        factors_list = []\n        while n % 2 == 0:\n            factors_list.append(2)\n            n //= 2\n        for i in range(3, int(n**0.5)+1, 2):\n            while n % i == 0:\n                factors_list.append(i)\n                n //= i\n        if n > 2:\n            factors_list.append(n)\n        return factors_list\n\n    input_list = stdin.split('\\n')\n    t = int(input_list[0])\n    input_list = input_list[1:]\n\n    result = []\n    for n in input_list:\n        n = int(n)\n        if n < 2:\n            result.append(\"NO\")\n            continue\n\n        prime_factors_list = prime_factors(n)\n        if len(prime_factors_list) < 3:\n            result.append(\"NO\")\n            continue\n\n        result.append(\"YES\")\n        factors_list = factors(n)\n        for i in range(len(factors_list)):\n            for j in range(i+1, len(factors_list)):\n                for k in range(j+1, len(factors_list)):\n                    if factors_list[i] * factors_list[j] * factors_list[k] == n:\n                        result.append(f\"{factors_list[i]} {factors_list[j]} {factors_list[k]}\")\n                        break\n                else:\n                    continue\n                break\n            else:\n                continue\n            break\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"1\\n2\") == \"NO\"",
        "num_ids": 1609
    },
    {
        "number": 4437,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count_a = 0\n    count_b = 0\n    min_operations = 0\n\n    for i in range(n):\n        if s[i] == 'a':\n            count_a += 1\n        else:\n            count_b += 1\n\n        if i % 2 == 0 and (count_a - count_b) % 2 == 1:\n            min_operations += 1\n            if s[i] == 'a':\n                s = s[:i] + 'b' + s[i+1:]\n                count_a -= 1\n                count_b += 1\n            else:\n                s = s[:i] + 'a' + s[i+1:]\n                count_a += 1\n                count_b -= 1\n\n    return str(min_operations) + '\\n' + s",
        "test": "assert solution(\"2\\naa\") == \"1\\nba\" ",
        "num_ids": 1320
    },
    {
        "number": 4438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    key_points = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n\n    def adjacent_points(point):\n        return [(point[0] + 1, point[1]), (point[0] - 1, point[1]), (point[0], point[1] + 1), (point[0], point[1] - 1)]\n\n    def key_points_by_level(key_points):\n        levels = {}\n        for point in key_points:\n            level = max(point)\n            if level not in levels:\n                levels[level] = []\n            levels[level].append(point)\n        return levels\n\n    def distance(point1, point2):\n        return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1])\n\n    def visit_key_points(key_points, start_point):\n        visited = set()\n        queue = [start_point]\n        total_distance = 0\n\n        while queue:\n            current_point = queue.pop(0)\n            if current_point not in visited:\n                visited.add(current_point)\n                for adjacent_point in adjacent_points(current_point):\n                    if adjacent_point in key_points:\n                        if adjacent_point not in visited:\n                            queue.append(adjacent_point)\n                            total_distance += distance(current_point, adjacent_point)\n                    else:\n                        total_distance += distance(current_point, adjacent_point)\n\n        return total_distance\n\n    key_points.remove((0, 0))\n    levels = key_points_by_level(key_points)\n    min_distance = float('inf')\n\n    for level in sorted(levels.keys()):\n        for start_point in levels[level]:\n            total_distance = visit_key_points(key_points, start_point)\n            min_distance = min(min_distance, total_distance)\n\n    return str(min_distance)",
        "test": "assert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\") == \"9\" ",
        "num_ids": 2497
    },
    {
        "number": 4439,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str((set([1, 2, 3]) - set([A, B])).pop())",
        "test": "assert solution(\"2\\n3\") == \"1\"",
        "num_ids": 566
    },
    {
        "number": 4440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n\n    # Calculate the maximum possible volume\n    max_volume = (L**3) / (24 * (L - 2) * (L - 3))\n\n    # Return the result\n    return f\"{max_volume:.6f}\"",
        "test": "assert solution(\"10\") == \"3.125000000000\"",
        "num_ids": 903
    },
    {
        "number": 4441,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    if len(input_list) == 1:\n        return \"Hello World\"\n    else:\n        return str(int(input_list[1]) + int(input_list[2]))",
        "test": "assert solution(\"1\") == \"Hello World\"",
        "num_ids": 737
    },
    {
        "number": 4442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s1 = a * b\n    s2 = b * a\n    \n    if s1 < s2:\n        return s1\n    else:\n        return s2",
        "test": "assert solution(\"2 2\") == \"2\"",
        "num_ids": 574
    },
    {
        "number": 4443,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'c':\n        return 'd'\n    elif stdin == 'z':\n        return None\n    else:\n        return chr(ord(stdin) + 1)",
        "test": "assert solution('c') == 'd'",
        "num_ids": 511
    },
    {
        "number": 4444,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return T + S",
        "test": "assert solution(\"oder atc\") == \"atcoder\" ",
        "num_ids": 298
    },
    {
        "number": 4445,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    # Initialize variables\n    sum_of_non_deleted_elements = sum(a)\n    last_deleted_element_parity = None\n\n    # Iterate through the array\n    for i in range(n):\n        # Check if the current element should be deleted\n        if last_deleted_element_parity is None or last_deleted_element_parity != a[i] % 2:\n            # Delete the current element\n            sum_of_non_deleted_elements -= a[i]\n            last_deleted_element_parity = a[i] % 2\n        else:\n            # The current element should not be deleted\n            pass\n\n    # Return the result\n    return str(sum_of_non_deleted_elements)",
        "test": "assert solution(\"2\\n1000000 1000000\") == \"1000000\" ",
        "num_ids": 1411
    },
    {
        "number": 4446,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split()[:4])\n    h = list(map(int, stdin.split()[4:]))\n    \n    points = 0\n    for i in range(n):\n        if h[i] <= a:\n            points += 1\n            continue\n        \n        if h[i] <= b:\n            points += 1\n            continue\n        \n        if k > 0:\n            if h[i] - a > b:\n                h[i] -= a\n                k -= 1\n            else:\n                h[i] -= b\n        else:\n            h[i] -= max(a, b)\n    \n    return str(points)",
        "test": "assert solution(\"1 1 100 99\\n100\") == \"1\"",
        "num_ids": 1287
    },
    {
        "number": 4447,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    remainder_count = [0] * m\n    for num in a:\n        remainder_count[num % m] += 1\n\n    target_count = n // m\n    difference = [target_count - count for count in remainder_count]\n    min_moves = sum(abs(d) for d in difference) // 2\n\n    if min_moves == 0:\n        return f\"{min_moves}\\n{' '.join(map(str, a))}\"\n\n    result = [num + (min_moves if num % m >= target_count else 0) for num in a]\n    return f\"{min_moves}\\n{' '.join(map(str, result))}\"\n",
        "test": "assert solution('4 2\\n0 1 2 3') == '0\\n0 1 2 3' ",
        "num_ids": 1866
    },
    {
        "number": 4448,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    k = list(map(int, lines[1].split()))\n    special_offers = [tuple(map(int, lines[i+2].split())) for i in range(m)]\n    \n    days = [0] * n\n    for d, t in special_offers:\n        days[t-1] = d\n    \n    total_cost = sum(2 * k[i] if days[i] == 0 else 1 * k[i] for i in range(n))\n    max_days = max(days)\n    \n    if total_cost <= max_days:\n        return str(max_days)\n    else:\n        return str(total_cost)\n\ninput_str = \"\"\"5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\"\"\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\" ",
        "num_ids": 2097
    },
    {
        "number": 4449,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split('\\n')\n    result = []\n\n    for q in range(int(queries[0])):\n        n = int(queries[q * 2 + 1])\n        sticks = list(map(int, queries[q * 2 + 2].split()))\n\n        if len(sticks) != 4 * n:\n            result.append(\"NO\")\n            continue\n\n        sticks.sort()\n        areas = []\n        for i in range(n):\n            area = sticks[i * 4 + 0] * sticks[i * 4 + 1]\n            if area in areas:\n                result.append(\"NO\")\n                break\n            areas.append(area)\n        else:\n            result.append(\"YES\")\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\\nYES\\nNO\\nYES\\nYES\\n\"",
        "num_ids": 1888
    },
    {
        "number": 4450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    def read_input() -> tuple:\n        n, m, k = map(int, input().split())\n        edges = []\n        for _ in range(m):\n            x, y, w = map(int, input().split())\n            edges.append((x, y, w))\n        return n, edges, k\n\n    def create_graph(n: int, edges: list) -> dict:\n        graph = {i: [] for i in range(1, n + 1)}\n        for x, y, w in edges:\n            graph[x].append((y, w))\n            graph[y].append((x, w))\n        return graph\n\n    def dijkstra(graph: dict, start: int) -> list:\n        dist = [float('inf')] * len(graph)\n        dist[start - 1] = 0\n        queue = [(0, start)]\n\n        while queue:\n            d, node = heapq.heappop(queue)\n            if d > dist[node - 1]:\n                continue\n            for neighbor, weight in graph[node]:\n                new_dist = dist[node - 1] + weight\n                if new_dist < dist[neighbor - 1]:\n                    dist[neighbor - 1] = new_dist\n                    heapq.heappush(queue, (new_dist, neighbor))\n\n        return dist\n\n    def kth_smallest(dist: list, k: int) -> int:\n        sorted_dist = sorted(dist[1:])\n        return sorted_dist[k - 1]\n\n    n, edges, k = read_input()\n    graph = create_graph(n, edges)\n    dist = dijkstra(graph, 1)\n    return str(kth_smallest(dist, k))\n\ninput_data = \"\"\"6 10 5\n2 5 1\n5 3 9\n6 2 2\n1 3 1\n5 1 8\n6 5 10\n1 6 5\n6 4 6\n3 6 2\n3 4 5\n\"\"\"\n\nprint(solution(input_data)) # Output: 3\n\ninput_data = \"\"\"7 15 18\n2 6 3\n5 7 4\n6 5 4\n3 6 9\n6 7 7\n1 6 4\n7 1 6\n7 2 1\n4 3 2\n3 2 8\n5 3 6\n2 5 5\n3 7 9\n4 1 8\n2 1 1\n\"\"\"\n\nprint(solution(input_data)) # Output: 9 ",
        "test": "assert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == \"9\\n\" ",
        "num_ids": 3102
    },
    {
        "number": 4451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    students = list(map(int, stdin.split()[1:]))\n    \n    def diversity(team):\n        return max(team) - min(team)\n    \n    def min_total_diversity(students):\n        students.sort()\n        teams = []\n        for i in range(n):\n            team = [students[i]]\n            for j in range(i+1, n):\n                team.append(students[j])\n                if diversity(team) > 0:\n                    teams.append(team)\n                else:\n                    break\n        return sum(map(diversity, teams))\n    \n    res = float('inf')\n    for i in range(3, n-1):\n        for j in range(i+2, n):\n            a = min_total_diversity(students[:i])\n            b = min_total_diversity(students[i:j])\n            c = min_total_diversity(students[j:])\n            total = a + b + c\n            res = min(res, total)\n    \n    k = 0\n    for i in range(n):\n        if students[i] == res:\n            k += 1\n    \n    teams = []\n    for i in range(n):\n        if students[i] == res:\n            teams.append(k)\n        else:\n            teams.append(1)\n    \n    return str(res) + '\\n' + ' '.join(map(str, teams))",
        "test": "assert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150\\n') == '7486 3\\n3 3 3 2 2 2 2 1 1 1\\n' ",
        "num_ids": 2513
    },
    {
        "number": 4452,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    def is_round(num: int) -> bool:\n        return len(str(num)) > 1 and all(digit == '0' for digit in str(num)[1:])\n\n    def generate_summands(target: int) -> list:\n        summands = []\n        for i in range(1, 10):\n            if target >= i:\n                summands.append(i)\n                target -= i\n        if target > 0:\n            summands.append(target)\n        return summands\n\n    output = \"\"\n    cases = stdin.strip().split(\"\\n\")\n    for case in cases[1:]:\n        n = int(case)\n        if n <= 9:\n            output += f\"1\\n{n}\\n\"\n        else:\n            summands = generate_summands(n)\n            for i in range(len(summands) - 1, 0, -1):\n                if is_round(sum(summands[:i])):\n                    output += f\"{i}\\n\" + \" \".join(map(str, summands[:i])) + \"\\n\"\n                    break\n    return output",
        "test": "assert solution('10\\n1\\n1000\\n1000000\\n50000000') == '1\\n1000\\n1000000\\n50000000' ",
        "num_ids": 1762
    },
    {
        "number": 4453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    result = []\n\n    for i in range(q):\n        n = int(stdin.split(\"\\n\")[1 + i * 2].split()[0])\n        p = list(map(int, stdin.split(\"\\n\")[2 + i * 2].split()))\n        answer = [0] * n\n\n        for j in range(n):\n            answer[j] = p.index(j + 1)\n\n        result.append(\" \".join(map(str, answer)))\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1 \\n3 3 3 \\n2 3 3 2 1 3 \\n1 \\n2 2 2 2 \\n4 4 4 1 4\\n\"",
        "num_ids": 2067
    },
    {
        "number": 4454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def check_price(a: List[int], price: int) -> bool:\n        return sum(a) <= n * price\n\n    q = int(stdin.splitlines()[0])\n    result = []\n\n    for i in range(q):\n        n = int(stdin.splitlines()[i * 2 + 1])\n        a = list(map(int, stdin.splitlines()[i * 2 + 2].split()))\n        low, high = min(a), max(a)\n        while low < high:\n            mid = (low + high + 1) // 2\n            if check_price(a, mid):\n                low = mid\n            else:\n                high = mid - 1\n        result.append(low)\n\n    return \"\\n\".join(map(str, result))\n",
        "test": "assert solution(\"3\\n5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1\") == \"3\\n2\\n1\" ",
        "num_ids": 1535
    },
    {
        "number": 4455,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def find_mentors(skills, quarrels):\n        mentors = [0] * len(skills)\n        for i in range(len(skills)):\n            for j in range(len(skills)):\n                if i != j and (i, j) not in quarrels and skills[i] > skills[j]:\n                    mentors[i] += 1\n        return mentors\n\n    def parse_input(input_data: str) -> Tuple[List[int], List[Tuple[int, int]]]:\n        n, k = map(int, input_data.split()[:2])\n        skills = list(map(int, input_data.split()[2:2 + n]))\n        quarrels = []\n        for _ in range(k):\n            x, y = map(int, input_data.split()[2 + n + _ * 2:2 + n + (_ * 2) + 2])\n            quarrels.append((x - 1, y - 1))\n        return skills, quarrels\n\n    skills, quarrels = parse_input(stdin)\n    mentors = find_mentors(skills, quarrels)\n    return \" \".join(map(str, mentors))\n",
        "test": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"",
        "num_ids": 1804
    },
    {
        "number": 4456,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    p = list(map(int, stdin.split()[2:2*n+2]))\n    q = list(map(int, stdin.split()[2*n+4:]))\n\n    if not (len(p) == len(q) == len(set(p)) == len(set(q)) == n):\n        return \"NO\"\n\n    s = \"\"\n    for i in range(k):\n        s += chr(ord('a') + i)\n    for i in range(k, n):\n        s += \"z\"\n\n    if sorted(s[p_i - 1] for p_i in p) != sorted(s[q_i - 1] for q_i in q):\n        return \"NO\"\n\n    return \"YES\\n\" + s",
        "test": "assert solution(\"5 3\\n2 1 5 4 3\\n1 5 2 3 4\") == \"NO\"",
        "num_ids": 2125
    },
    {
        "number": 4457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a_list = list(map(int, stdin.split('\\n')[1].split()))\n    \n    # Calculate the number of shots needed for each can\n    num_shots = [sum(a_list[:i]) + 1 for i in range(n)]\n    \n    # Find the order of cans with the minimum number of shots\n    min_shots = min(num_shots)\n    min_can_order = [i + 1 for i, shots in enumerate(num_shots) if shots == min_shots]\n    \n    return str(min_shots) + '\\n' + ' '.join(map(str, min_can_order))",
        "test": "assert solution('2\\n1 4\\n') == '3\\n2 1 \\n' ",
        "num_ids": 1872
    },
    {
        "number": 4458,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    n, permutation = stdin.split('\\n')\n    n = int(n)\n    permutation = [int(x) for x in permutation.split()]\n\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            if permutation.index(i) >= permutation.index(j):\n                break\n        else:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"1\\n1\") == \"1\"",
        "num_ids": 1341
    },
    {
        "number": 4459,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    line_list = stdin.split()\n    n = int(line_list[0])\n    seq = line_list[1:]\n\n    # Check if the sequence is already a good sequence\n    if all(seq.count(str(i)) == int(i) for i in seq):\n        return \"0\"\n\n    # Create a dictionary to store the count of each element in the sequence\n    element_count = {}\n    for element in seq:\n        element_count[element] = element_count.get(element, 0) + 1\n\n    # Find the minimum number of elements to remove\n    min_count = n\n    for count in element_count.values():\n        if count > 1:\n            min_count = min(min_count, count - 1)\n\n    return str(min_count)",
        "test": "assert solution(\"1\\n1\") == \"0\"",
        "num_ids": 1128
    },
    {
        "number": 4460,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    for i in range(1, 6):\n        if eval(f\"x_{i}\") == 0:\n            return str(i)\n    return \"\"",
        "test": "assert solution(\"0 2 3 4 5\") == \"1\"",
        "num_ids": 812
    },
    {
        "number": 4461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    min_val = min(H * W // 3, H * (W // 2), (H // 2) * W)\n    max_val = max(H * W // 3, H * (W // 2), (H // 2) * W)\n    return str(max_val - min_val)",
        "test": "assert solution(\"10 10\") == \"12\"",
        "num_ids": 1108
    },
    {
        "number": 4462,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    def is_multiple_of_4(a: int, b: int) -> bool:\n        return a * b % 4 == 0\n\n    def permute_array(a: List[int]) -> bool:\n        n = len(a)\n        for i in range(n - 1):\n            if not is_multiple_of_4(a[i], a[i + 1]):\n                a[i], a[i + 1] = a[i + 1], a[i]\n        return is_multiple_of_4(a[0], a[-1])\n\n    n, *a = map(int, stdin.split())\n    return \"Yes\" if permute_array(a) else \"No\"\n",
        "test": "assert solution(\"4\\n2 4 6 8\\n\") == \"Yes\"",
        "num_ids": 924
    },
    {
        "number": 4463,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    \n    def can_satisfy(s: str, t: str) -> bool:\n        if len(s) > len(t):\n            return False\n        \n        s_chars = list(s)\n        t_chars = list(t)\n        for i in range(len(s)):\n            if s_chars[i] != t_chars[i]:\n                s_chars[i], t_chars[i] = t_chars[i], s_chars[i]\n                break\n        \n        s_chars.sort()\n        t_chars.sort()\n        \n        return s_chars < t_chars\n    \n    if can_satisfy(s, t):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"yx\\nxya\") == \"No\"",
        "num_ids": 826
    },
    {
        "number": 4464,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n\n    if C >= 0 and C < B:\n        multiple = A * (B - C)\n        if multiple % A == 0:\n            return \"YES\"\n\n    return \"NO\"",
        "test": "assert solution(\"7 5 5\") == \"NO\"",
        "num_ids": 723
    },
    {
        "number": 4465,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    area = A * B - A - B\n    return str(area)",
        "test": "assert solution(\"4 4\") == \"8\"",
        "num_ids": 455
    },
    {
        "number": 4466,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    return str(max(0, (X - Y) // (Y + 2 * Z)))",
        "test": "assert solution(\"10 2 1\") == \"2\" ",
        "num_ids": 571
    },
    {
        "number": 4467,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    points = stdin.split('\\n')[1:2*N+1]\n    red_points = [tuple(map(int, points[i].split())) for i in range(N)]\n    blue_points = [tuple(map(int, points[i+N].split())) for i in range(N)]\n\n    friendly_pairs = 0\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            if red_points[i][0] < blue_points[j][0] and red_points[i][1] < blue_points[j][1]:\n                friendly_pairs += 1\n\n    return str(friendly_pairs)",
        "test": "assert solution(\"1\\n1 1\\n2 2\") == \"0\"",
        "num_ids": 1731
    },
    {
        "number": 4468,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split()[:2])\n    times = list(map(int, stdin.split()[2:]))\n    times.sort()\n    total_time = 0\n    start_time = 0\n\n    for time in times:\n        if time < start_time:\n            total_time += t\n        else:\n            start_time = time\n            total_time += t\n\n    return str(total_time)",
        "test": "assert solution(\"1 1\\n0\\n\") == \"1\"",
        "num_ids": 1178
    },
    {
        "number": 4469,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    q = int(stdin.splitlines()[0])\n    queries = stdin.splitlines()[1:]\n\n    # Initialize variables\n    shelf = []\n    answers = []\n\n    for query in queries:\n        if query[0] == \"L\":\n            id = int(query[2:])\n            shelf.insert(0, id)\n        elif query[0] == \"R\":\n            id = int(query[2:])\n            shelf.append(id)\n        elif query[0] == \"?\":\n            id = int(query[2:])\n            index = shelf.index(id)\n            if index == 0:\n                answers.append(0)\n            else:\n                answers.append(len(shelf) - index - 1)\n\n    return \"\\n\".join(map(str, answers))",
        "test": "assert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\\n\" ",
        "num_ids": 1809
    },
    {
        "number": 4470,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    result = []\n    for _ in range(q):\n        n = int(stdin.split('\\n')[1])\n        moves = 0\n        while n != 1:\n            if n % 2 == 0:\n                n //= 2\n            elif n % 3 == 0:\n                n = n * 2 // 3\n            elif n % 5 == 0:\n                n = n * 4 // 5\n            else:\n                break\n            moves += 1\n        if n == 1:\n            result.append(moves)\n        else:\n            result.append(-1)\n    return '\\n'.join(map(str, result))\n\ninput_string = \"\"\"7\n1\n10\n25\n30\n14\n27\n1000000000000000000\"\"\"\nprint(solution(input_string)) ",
        "test": "assert solution(\"1\\n1\") == \"0\"",
        "num_ids": 1478
    },
    {
        "number": 4471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    test_cases = stdin.splitlines()[1:]\n    result = []\n    \n    for i in range(0, t*2, 2):\n        n = int(test_cases[i])\n        heights = list(map(int, test_cases[i+1].split()))\n        max_height = max(heights)\n        can_clear = True\n        \n        while max_height > 0:\n            for j in range(n):\n                if heights[j] > 0 and heights[j] <= max_height:\n                    heights[j] += 2\n                elif heights[j] > 0 and heights[j] > max_height:\n                    can_clear = False\n                    break\n            if not can_clear:\n                break\n            max_height = max(heights)\n            for j in range(n):\n                heights[j] -= 1\n        \n        if can_clear:\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n    \n    return \"\\n\".join(result)\n\n\ndef",
        "test": "assert solution(\"4\\n3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\\nNO\\nYES\\nYES\" ",
        "num_ids": 1455
    },
    {
        "number": 4472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n\n    def preprocess(s: str) -> str:\n        s = list(s)\n        for i in range(n):\n            if s[i] == s[n - i - 1]:\n                j = n - i - 1\n                while j < n - 1 and s[j] == s[n - i - 1]:\n                    j += 1\n                s[j] = chr(ord(s[j]) + 1)\n            if s[i] == 'a':\n                s[i] = 'b'\n        return ''.join(s)\n\n    a = preprocess(a)\n    b = preprocess(b)\n\n    if a == b:\n        return 0\n\n    def min_changes(a: str, b: str, n: int) -> int:\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][0] = 1\n            dp[0][i] = 1\n        for i in range(1, n):\n            for j in range(1, n):\n                if a[i] == b[j]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        return dp[n - 1][n - 1]\n\n    return min_changes(a, b, n)",
        "test": "assert solution(\"5\\nzcabd\\ndbaz\\n\") == \"0\" ",
        "num_ids": 1492
    },
    {
        "number": 4473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    queries = []\n\n    for i in range(t):\n        a, b, k = map(int, stdin.readline().strip().split())\n        queries.append((a, b, k))\n\n    results = []\n    for query in queries:\n        a, b, k = query\n        x = 0\n        for j in range(k):\n            if j % 2 == 0:\n                x += a\n            else:\n                x -= b\n        results.append(x)\n\n    return \" \".join(map(str, results))",
        "test": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\" ",
        "num_ids": 1343
    },
    {
        "number": 4474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    good_numbers = []\n    i = 1\n    while len(good_numbers) < n:\n        if is_good_number(i):\n            good_numbers.append(i)\n        i += 1\n    return str(good_numbers[n-1])\n\ndef",
        "test": "assert solution(\"8\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089\\n\"",
        "num_ids": 1206
    },
    {
        "number": 4475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    result = []\n    for i in range(1, t+1):\n        a, b, x, y, n = map(int, lines[i].split())\n        current_result = a * b\n        if a > x:\n            current_result = min(current_result, (a-x) * b + x * b)\n        if b > y:\n            current_result = min(current_result, a * (b-y) + a * y)\n        result.append(current_result)\n    return '\\n'.join(map(str, result))\n\nstdin = \"\"\"7\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\"\"\"\n\nprint(solution(stdin)) ",
        "test": "assert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n177177\\n999999999000000000\\n999999999\\n55\\n10\\n\"",
        "num_ids": 2242
    },
    {
        "number": 4476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n    for _ in range(t):\n        a, b = map(int, input().split())\n        moves = 0\n        while a != b:\n            if a > b:\n                if a % 2 == 0:\n                    a -= 1\n                else:\n                    a += 1\n            else:\n                if b % 2 == 0:\n                    b -= 1\n                else:\n                    b += 1\n            moves += 1\n        result.append(str(moves))\n    return '\\n'.join(result)",
        "test": "assert solution(\"5\\n2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"1\\n0\\n2\\n2\\n1\"",
        "num_ids": 1052
    },
    {
        "number": 4477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip().split()[0])\n    result = []\n    for x in stdin.strip().split()[1:]:\n        x = int(x)\n        digits = len(str(x))\n        result.append(digits + (digits * digits - digits) // 2)\n    return \"\\n\".join(map(str, result))\n\ninput_data = \"\"\"\n4\n22\n9999\n1\n777\n\"\"\"\n\noutput_data = solution(input_data)\nprint(output_data) ",
        "test": "assert solution(\"4\\n22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"",
        "num_ids": 826
    },
    {
        "number": 4478,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    sequences = []\n\n    for i in range(k):\n        length = int(stdin.split('\\n')[2*i+1])\n        sequence = stdin.split('\\n')[2*i+2].split()\n        sequences.append((length, sequence))\n\n    for i in range(k):\n        for j in range(i+1, k):\n            if sequences[i][0] == sequences[j][0] + 1 and sum(sequences[i][1]) == sum(sequences[j][1]):\n                return \"YES\\n{}\\n{}\\n{}\\n{}\\n\".format(i+1, 1, j+1, sequences[i][0])\n\n    return \"NO\"",
        "test": "assert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2\\n3\\n2\\n1 1 2 2 2 1\") == \"NO\"",
        "num_ids": 2226
    },
    {
        "number": 4479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    input_array, k = stdin.split()\n    A = list(map(int, input_array.split(',')))\n    K = int(k)\n    max_sum = 0\n    \n    for _ in range(K):\n        max_element_index = A.index(max(A))\n        A[max_element_index] = -A[max_element_index]\n        max_sum += abs(A[max_element_index])\n        \n    return str(max_sum)",
        "test": "assert solution([2,-3,-1,5,-4], 2) == 13",
        "num_ids": 778
    },
    {
        "number": 4480,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    import re\n\n    A = list(map(int, re.findall(r\"-?\\d+\", stdin)))\n\n    def find_partition(i, j):\n        if i + 1 == j:\n            return True\n        if i >= j:\n            return False\n        return (\n            A[i] + sum(A[i + 1 : j]) == sum(A[i + 1 : j]) + sum(A[j:])\n            and find_partition(i + 1, j)\n            and find_partition(i, j - 1)\n        )\n\n    return \"true\" if find_partition(0, len(A)) else \"false\"",
        "test": "assert solution([3,3,6,5,-2,2,5,1,-9,4]) == True",
        "num_ids": 1293
    },
    {
        "number": 4481,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    votes = lines[1:N+1]\n    count = {}\n\n    for vote in votes:\n        if vote in count:\n            count[vote] += 1\n        else:\n            count[vote] = 1\n\n    max_count = max(count.values())\n    result = [key for key, value in count.items() if value == max_count]\n    result.sort()\n\n    return '\\n'.join(result)",
        "test": "assert solution(\"2\\na\\nb\\n\") == \"a\\nb\"",
        "num_ids": 1345
    },
    {
        "number": 4482,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    n, *a = map(int, stdin.split())\n\n    # Find the minimum cost\n    min_cost = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            cost = (a[i] - a[j]) ** 2\n            if cost < min_cost:\n                min_cost = cost\n\n    # Return the result\n    return str(min_cost)",
        "test": "assert solution(\"3\\n10 -5 0\") == \"25\"",
        "num_ids": 1161
    },
    {
        "number": 4483,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    cake_price = a\n    donut_price = b\n    donuts_bought = x // b\n    amount_left = x - cake_price - donuts_bought * donut_price\n    return str(amount_left)",
        "test": "assert solution(\"10000\\n5000\\n10000\") == \"-5000\"",
        "num_ids": 1097
    },
    {
        "number": 4484,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n\n    mod = 10**9 + 7\n\n    count = 0\n\n    for i in range(N):\n        for j in range(M):\n            for k in range(N):\n                for l in range(M):\n                    if i != k and j != l:\n                        count += 1\n\n    return str(count % mod)\n",
        "test": "assert solution(\"1 1\") == \"0\"",
        "num_ids": 773
    },
    {
        "number": 4485,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    boats = []\n    for line in stdin.split('\\n')[1:]:\n        a, b = map(int, line.split())\n        boats.append((a, b))\n    \n    def check_service(island_a, island_b, visited_islands, boats) -> bool:\n        visited_islands.add(island_a)\n        for boat in boats:\n            if island_a == boat[0]:\n                if boat[1] not in visited_islands and check_service(boat[1], island_b, visited_islands.copy(), boats):\n                    return True\n        return False\n\n    if check_service(1, N, set(), boats):\n        return \"POSSIBLE\"\n    else:\n        return \"IMPOSSIBLE\"",
        "test": "assert solution(\"5 3\\n1 2\\n2 3\\n3 4\\n4 5\") == \"IMPOSSIBLE\"",
        "num_ids": 1942
    },
    {
        "number": 4486,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = ''\n    for i in range(1, len(s), 2):\n        result += s[i]\n    return result",
        "test": "assert solution(\"\") == \"\"",
        "num_ids": 448
    },
    {
        "number": 4487,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if A[-1] == B[0] and B[-1] == C[0]:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"rng gorilla apple\") == \"YES\"",
        "num_ids": 603
    },
    {
        "number": 4488,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"",
        "test": "assert solution(\"36\\n24\\n\") == \"GREATER\"",
        "num_ids": 4481
    },
    {
        "number": 4489,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    blue_cards = lines[1:n+1]\n    m = int(lines[n+1])\n    red_cards = lines[n+2:]\n\n    max_earning = 0\n\n    for blue_card in blue_cards:\n        earnings = blue_cards.count(blue_card) - red_cards.count(blue_card)\n        max_earning = max(max_earning, earnings)\n\n    return str(max_earning)",
        "test": "assert solution('1\\nbanana\\n1\\nbanana\\n1\\nbanana\\n1\\nbanana\\n') == '0'",
        "num_ids": 1384
    },
    {
        "number": 4490,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin\n    bond_map = {\n        'A': 'T',\n        'C': 'G',\n        'G': 'C',\n        'T': 'A'\n    }\n    return bond_map[b]",
        "test": "assert solution(\"A\") == \"T\"",
        "num_ids": 440
    },
    {
        "number": 4491,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split(\"\\n\")\n    N = int(rows[0])\n    grid = []\n    for row in rows[1:]:\n        grid.append(list(map(int, row.split())))\n    return str(solve(grid, N))\n\ndef",
        "test": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == \"14\"",
        "num_ids": 1458
    },
    {
        "number": 4492,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # split the input into two lines, one for N and x, and one for the array of candies\n    N, x = map(int, stdin.splitlines()[0].split())\n    candies = list(map(int, stdin.splitlines()[1].split()))\n\n    # initialize the number of operations to 0\n    operations = 0\n\n    # iterate over the candies array\n    for i in range(N - 1):\n        # calculate the difference in number of candies between this box and the next box\n        diff = candies[i] - candies[i + 1]\n\n        # if the difference is greater than x, we need to eat one candy in this box\n        if diff > x:\n            operations += 1\n            # reduce the number of candies in this box by 1\n            candies[i] -= 1\n        # if the difference is less than or equal to x, we don't need to do anything\n        elif diff <= x:\n            pass\n\n    return str(operations)",
        "test": "assert solution(\"10 1\\n1 1 1 1 1 1 1 1 1 1 1\") == \"0\"",
        "num_ids": 1532
    },
    {
        "number": 4493,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    grid = [list(map(int, row.split())) for row in stdin.split(\"\\n\")]\n    a = [grid[i][j] - grid[j][i] for i in range(3) for j in range(3)]\n    b = [grid[j][i] - grid[i][j] for i in range(3) for j in range(3)]\n    \n    if all(0 <= a[i] <= 100 and 0 <= b[i] <= 100 for i in range(6)):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1 0 2\\n2 1 2\\n1 0 1\") == \"No\"",
        "num_ids": 1510
    },
    {
        "number": 4494,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"ABC\"",
        "test": "assert solution(\"ABC\") == \"ARC\"",
        "num_ids": 362
    },
    {
        "number": 4495,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"4 8 2\") == \"3\" ",
        "num_ids": 662
    },
    {
        "number": 4496,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    day = int(stdin)\n    if day == 25:\n        return \"Christmas\"\n    elif day == 24:\n        return \"Christmas Eve\"\n    elif day == 23:\n        return \"Christmas Eve Eve\"\n    elif day == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"Invalid input\"",
        "test": "assert solution(\"25\") == \"Christmas\"",
        "num_ids": 820
    },
    {
        "number": 4497,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    max_count = 0\n    max_number = None\n\n    for i in range(1, n + 1):\n        count = 0\n        number = i\n\n        while number % 2 == 0:\n            count += 1\n            number //= 2\n\n        if count > max_count:\n            max_count = count\n            max_number = i\n\n    return str(max_number)",
        "test": "assert solution(\"7\") == \"4\"",
        "num_ids": 732
    },
    {
        "number": 4498,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if abs(a - c) <= d:\n        return \"Yes\"\n    if abs(b - a) <= d and abs(b - c) <= d:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"4 7 9 3\") == \"Yes\"",
        "num_ids": 780
    },
    {
        "number": 4499,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    acronym = ''.join([word[0].upper() for word in words])\n    return acronym",
        "test": "assert solution(\"atcoder beginner contest\") == \"ABC\"",
        "num_ids": 501
    },
    {
        "number": 4500,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    total_yen = A + B\n    if total_yen >= C:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('50 100 120') == 'Yes'",
        "num_ids": 681
    },
    {
        "number": 4501,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split()[:2])\n    x = list(map(int, stdin.split()[2:]))\n\n    def count_ways(start: int, target: int, sum_: int) -> int:\n        if start == N:\n            return int(sum_ == target * start)\n\n        return count_ways(start + 1, target, sum_) + count_ways(start + 1, target, sum_ + x[start])\n\n    return str(count_ways(0, A, 0))",
        "test": "assert solution(\"1 1\\n1\") == \"1\"",
        "num_ids": 1410
    },
    {
        "number": 4502,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.split('\\n')\n    n = int(n)\n    sequence = list(map(int, sequence.split()))\n\n    b = []\n    for i in range(n):\n        b.append(sequence[i])\n        b.reverse()\n\n    return ' '.join(map(str, b))",
        "test": "assert solution(\"1\\n1\") == \"1\"",
        "num_ids": 961
    },
    {
        "number": 4503,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    H, N = map(int, lines[0].split())\n    A = list(map(int, lines[1].split()))\n\n    # Check if Raccoon can win without using the same move twice or more\n    used_moves = set()\n    for a in A:\n        if H <= 0:\n            return \"Yes\"\n        if a in used_moves:\n            return \"No\"\n        used_moves.add(a)\n        H -= a\n\n    return \"Yes\" if H <= 0 else \"No\"",
        "test": "assert solution(\"10 3\\n5 5 6\") == \"No\"",
        "num_ids": 1120
    },
    {
        "number": 4504,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    def is_even(s: str) -> bool:\n        return s == s[::-1]\n\n    def even_string_length(s: str) -> int:\n        for i in range(len(s) - 1, -1, -1):\n            if is_even(s[:i]):\n                return i\n        return 0\n\n    s = stdin\n    return str(even_string_length(s))",
        "test": "assert solution(\"abaababaab\") == \"6\"",
        "num_ids": 790
    },
    {
        "number": 4505,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # check if stdin has length 3 and contains only a, b, and c\n    if len(stdin) != 3 or not set(stdin).issubset({'a', 'b', 'c'}):\n        return \"No\"\n    \n    # check if stdin is a permutation of \"abc\"\n    if sorted(stdin) == sorted(\"abc\"):\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n",
        "test": "assert solution(\"abc\") == \"Yes\"",
        "num_ids": 532
    },
    {
        "number": 4506,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    b = list(map(int, lines[2].split()))\n\n    # Modify b to minimize the sum\n    b_sum = sum(b)\n    b.sort(reverse=True)\n\n    # Compute the sum\n    result = 0\n    for l in range(n):\n        for r in range(l, n):\n            result += a[l] * b[l] * a[r] * b[r]\n\n    # Print the result modulo 998244353\n    return str(result % 998244353)",
        "test": "assert solution(\"2\\n1 3\\n4 2\") == \"20\" ",
        "num_ids": 1561
    },
    {
        "number": 4507,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    shovels = list(map(int, stdin.readline().split()))\n    offers = []\n\n    for _ in range(m):\n        x, y = map(int, stdin.readline().split())\n        offers.append((x, y))\n\n    offers.sort(key=lambda x: x[0], reverse=True)\n\n    shovels.sort()\n    shovels = [0] + shovels\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n\n    for i in range(1, n + 1):\n        for offer in offers:\n            if i >= offer[0]:\n                dp[i] = min(dp[i], dp[i - offer[0]] + shovels[i] * offer[1])\n            else:\n                break\n\n        dp[i] = min(dp[i], dp[i - 1] + shovels[i])\n\n    return str(dp[k])\n\ndef",
        "test": "assert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\") == \"17\\n\" ",
        "num_ids": 2687
    },
    {
        "number": 4508,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        edges.append((u, v))\n\n    result = 0\n\n    def dfs(node, visited, path_length):\n        nonlocal result\n        if path_length == 2:\n            result += 1\n            return\n\n        for neighbor in edges:\n            if neighbor[0] == node:\n                if neighbor[1] not in visited:\n                    visited.add(neighbor[1])\n                    dfs(neighbor[1], visited, path_length + 1)\n                    visited.remove(neighbor[1])\n\n    dfs(1, {1}, 0)\n    return str(result)",
        "test": "assert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == \"1\" ",
        "num_ids": 1610
    },
    {
        "number": 4509,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    t = int(stdin.readline().strip())\n    result = []\n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        \n        # Calculate the k-th number that is not divisible by n\n        count = 0\n        number = 1\n        while count < k:\n            if number % n != 0:\n                count += 1\n            number += 1\n        \n        # Add the result to the list\n        result.append(str(number - 1))\n    \n    # Return the result as a single string\n    return '\\n'.join(result)",
        "test": "assert solution(\"2\\n1 1\\n5 2\") == \"1\\n6\" ",
        "num_ids": 1764
    },
    {
        "number": 4510,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    messages = list(map(int, input().split()))\n    \n    conversations = [[] for _ in range(k)]\n    for message in messages:\n        found = False\n        for i in range(k):\n            if message in conversations[i]:\n                found = True\n                break\n        if not found:\n            if len(conversations[-1]) == k:\n                conversations.pop()\n            conversations.insert(0, [message])\n            for i in range(1, k):\n                conversations[i].insert(0, conversations[i-1][-1])\n                conversations[i-1].pop()\n    \n    result = [conversations[i][0] for i in range(len(conversations))]\n    \n    return str(len(result)) + \"\\n\" + \" \".join(map(str, result))\n\nstdin = \"7 2\\n1 2 3 2 1 3 2\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\\n\" ",
        "num_ids": 1420
    },
    {
        "number": 4511,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    stdin = stdin.split('\\n')\n    del stdin[0]\n    max_damage = 0\n    \n    for i in range(n):\n        k = int(stdin[0])\n        del stdin[0]\n        \n        cards = []\n        for j in range(k):\n            cost, damage = map(int, stdin[0].split())\n            del stdin[0]\n            cards.append((cost, damage))\n        \n        cards.sort(key=lambda x: x[0])\n        total_cost = 0\n        current_damage = 0\n        \n        for card in cards:\n            if total_cost + card[0] <= 3:\n                total_cost += card[0]\n                current_damage += card[1]\n            else:\n                break\n            \n            if i % 10 == 0:\n                current_damage *= 2\n            \n        max_damage = max(max_damage, current_damage)\n    \n    return str(max_damage)",
        "test": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\" ",
        "num_ids": 1991
    },
    {
        "number": 4512,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    s, q = stdin.split('\\n')\n    s = list(s)\n    queries = [list(map(int, query.split())) for query in stdin.split('\\n')[1:1+int(q)]]\n    \n    def replace_char(pos: int, char: str) -> None:\n        s[pos-1] = char\n    \n    def count_distinct_chars(l: int, r: int) -> int:\n        return len(set(s[l-1:r]))\n    \n    for query in queries:\n        if query[0] == 1:\n            replace_char(query[1], chr(query[2]))\n        else:\n            print(count_distinct_chars(query[1], query[2]))",
        "test": "assert solution(\"dfcbbcfeeedbaea\\n15\\n1 6 e\\n1 4 b\\n2 6 14\\n1 7 b\\n1 12 c\\n2 6 8\\n2 1 6\\n1 7 c\\n1 2 f\\n1 10 a\\n2 7 9\\n1 10 a\\n1 14 b\\n1 1 f\\n2 1 11\\n\") == \"5\\n2\\n5\\n2\\n6\\n\" ",
        "num_ids": 1583
    },
    {
        "number": 4513,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(board, i, j, digit):\n        for row in range(9):\n            if board[row][j] == digit and row != i:\n                return False\n        for col in range(9):\n            if board[i][col] == digit and col != j:\n                return False\n        start_row, start_col = i - i % 3, j - j % 3\n        for row in range(3):\n            for col in range(3):\n                if board[row + start_row][col + start_col] == digit and (row, col) != (i % 3, j % 3):\n                    return False\n        return True\n\n    def find_empty(board):\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] == 0:\n                    return i, j\n        return None\n\n    def solve(board):\n        empty = find_empty(board)\n        if not empty:\n            return True\n        i, j = empty\n        for digit in range(1, 10):\n            if is_valid(board, i, j, digit):\n                board[i][j] = digit\n                if solve(board):\n                    return True\n                board[i][j] = 0\n        return False\n\n    def change_field(board):\n        count = 0\n        while count < 9:\n            i, j = random.randint(0, 8), random.randint(0, 8)\n            if board[i][j] == 0:\n                board[i][j] = random.randint(1, 9)\n                count += 1\n\n    tests = int(stdin.readline().strip())\n    for test_num in range(tests):\n        board = [[int(x) for x in stdin.readline().strip()] for _ in range(9)]\n        solve(board)\n        change_field(board)\n        for i in range(9):\n            print(\"\".join(str(x) for x in board[i]))\n        if test_num < tests - 1:\n            print() ",
        "test": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\" ",
        "num_ids": 3067
    },
    {
        "number": 4514,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[:2])\n    tree = [[] for _ in range(n + 1)]\n    for i in range(2, n + 1):\n        tree[i].append(int(stdin.split()[i - 1]))\n\n    def dfs(node):\n        visited = set()\n        stack = [node]\n        result = []\n        while stack:\n            current = stack[-1]\n            if current in visited:\n                stack.pop()\n                continue\n            visited.add(current)\n            result.append(current)\n            for child in tree[current]:\n                if child not in visited:\n                    stack.append(child)\n        return result\n\n    queries = []\n    for _ in range(q):\n        u_i, k_i = map(int, stdin.split()[:2])\n        queries.append((u_i, k_i))\n\n    for u_i, k_i in queries:\n        sequence = dfs(u_i)\n        if len(sequence) < k_i:\n            print(\"-1\")\n        else:\n            print(sequence[k_i - 1])\n\ninput_str = \"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\"\nsolution(input_str) ",
        "test": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n6\\n8\\n-1\\n9\\n4\"",
        "num_ids": 1717
    },
    {
        "number": 4515,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip().split('\\n')[0])\n    result = []\n    for i in range(1, t+1):\n        a, b, c, n = map(int, stdin.strip().split('\\n')[i].split())\n        if a + b + c == n and (a == b == c or a == b or a == c or b == c):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n    return \"\\n\".join(result)\n\ninput_str = \"\"\"5\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\"\"\"\n\nprint(solution(input_str)) ",
        "test": "assert solution(\"5\\n5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\\nYES\\nNO\\nNO\\nYES\"",
        "num_ids": 1161
    },
    {
        "number": 4516,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    x = list(map(int, stdin.split()[2:]))\n    result = []\n    \n    for i in range(1, n+1):\n        p_i = [i] + [j for j in range(1, n+1) if j != i]\n        x_positions = [p_i.index(x_val) for x_val in x]\n        distances = [abs(x_positions[i] - x_positions[i+1]) for i in range(m-1)]\n        result.append(sum(distances))\n    \n    return ' '.join(map(str, result))",
        "test": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"",
        "num_ids": 1351
    },
    {
        "number": 4517,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def find_path(graph, start, end, visited):\n        if start == end:\n            return True\n        visited.add(start)\n        for neighbor in graph[start]:\n            if neighbor not in visited:\n                if find_path(graph, neighbor, end, visited):\n                    return True\n        return False\n\n    def create_graph(edges):\n        graph = {i: [] for i in range(1, n + 1)}\n        for edge in edges:\n            u, v = edge\n            graph[u].append(v)\n            graph[v].append(u)\n        return graph\n\n    def process_query(graph, k_vertices):\n        start = 1\n        for vertex in k_vertices:\n            visited = set()\n            if find_path(graph, start, vertex, visited):\n                return \"YES\"\n        return \"NO\"\n\n    input_lines = stdin.splitlines()\n    n, m = map(int, input_lines[0].split())\n    edges = [tuple(map(int, line.split())) for line in input_lines[1:n]]\n    queries = [line.split() for line in input_lines[n:n + m]]\n\n    graph = create_graph(edges)\n    results = []\n    for i in range(m):\n        k_vertices = list(map(int, queries[i][1:]))\n        results.append(process_query(graph, k_vertices))\n\n    return \"\\n\".join(results)",
        "test": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\" ",
        "num_ids": 2339
    },
    {
        "number": 4518,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(start: int, visited: set) -> bool:\n        if len(visited) == n:\n            return True\n        for i in range(1, n + 1):\n            if i not in visited and (start, i) in allowed_roads and (i, start) in allowed_roads:\n                visited.add(i)\n                if dfs(i, visited):\n                    return True\n                visited.remove(i)\n        return False\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        gangs = list(map(int, stdin.readline().split()))\n        allowed_roads = set()\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if gangs[i] != gangs[j]:\n                    allowed_roads.add((i + 1, j + 1))\n                    allowed_roads.add((j + 1, i + 1))\n        if dfs(1, set()):\n            print(\"YES\")\n            for i, j in allowed_roads:\n                print(i, j)\n        else:\n            print(\"NO\")",
        "test": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\\nYES\\n1 2\\n2 3\\n3 4\\n\" ",
        "num_ids": 2360
    },
    {
        "number": 4519,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    result = []\n    for _ in range(q):\n        n, k = map(int, stdin.readline().split())\n        s = list(stdin.readline().strip())\n        for i in range(n - 1, 0, -1):\n            if s[i] > s[i - 1]:\n                s[i - 1], s[i] = s[i], s[i - 1]\n                k -= 1\n                if k == 0:\n                    break\n        result.append(\"\".join(s))\n    return \"\\n\".join(result)\n\nstdin = open(\"input.txt\", \"r\")\nstdout = open(\"output.txt\", \"w\")\nstdout.write(solution(stdin))\nstdout.close() ",
        "test": "assert solution('7 11\\n1111100') == '1111100' ",
        "num_ids": 1575
    },
    {
        "number": 4520,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    segments = [(int(l), int(r)) for l, r in map(lambda x: x.split(), stdin.split()[2:])]\n    \n    # Sort the segments by their right ends\n    segments.sort(key=lambda x: x[1])\n    \n    # Initialize the count of segments covering each integer point\n    coverage = [0] * (n + 1)\n    \n    # Iterate through the segments and update the coverage count\n    for i, (l, r) in enumerate(segments, start=1):\n        coverage[l] += 1\n        coverage[r] -= 1\n        \n        if coverage[l] > k:\n            return str(i) + '\\n' + str(i)\n    \n    # Find the minimum number of segments to remove\n    m = 0\n    p = []\n    for i, c in enumerate(coverage[:-1], start=1):\n        if c <= k:\n            m += 1\n        else:\n            p.append(i)\n    \n    # Print the result\n    return str(m) + '\\n' + ' '.join(map(str, p)) ",
        "test": "assert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\\n\" ",
        "num_ids": 2509
    },
    {
        "number": 4521,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = [(int(x), int(v)) for x, v in zip(stdin.split()[1:2*n:2], stdin.split()[2:2*n:2])]\n\n    def distance(i, j):\n        x1, v1 = points[i]\n        x2, v2 = points[j]\n        return abs(x1 - x2) / ((v1 - v2) or 1)\n\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += distance(i, j)\n\n    return str(result)",
        "test": "assert solution(\"2\\n2 1\\n-3 0\") == \"0\" ",
        "num_ids": 1292
    },
    {
        "number": 4522,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    graph = [[] for _ in range(n)]\n    for u, v, w in (map(int, line.split()) for line in stdin.split('\\n')[2:-1]):\n        graph[u-1].append((v-1, w))\n        graph[v-1].append((u-1, w))\n    queries = list(map(int, stdin.split('\\n')[-1].split()))\n\n    def dfs(node, weight, visited):\n        visited[node] = True\n        for neighbor, w in graph[node]:\n            if not visited[neighbor]:\n                dfs(neighbor, max(weight, w), visited)\n\n    result = []\n    for q in queries:\n        count = 0\n        for i in range(n):\n            visited = [False] * n\n            dfs(i, 0, visited)\n            count += sum(w <= q for w in (max(graph[j][0][1], graph[j][1][1]) for j in range(n) if visited[j]))\n        result.append(count // 2)\n\n    return \" \".join(map(str, result))\n\ninputs = [\n    \"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\",\n    \"1 2\\n1 2\",\n    \"3 3\\n1 2 1\\n2 3 2\\n1 3 2\"\n]\n\nfor input in inputs:\n    print(solution(input)) ",
        "test": "assert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 2\") == \"1 3 3 \" ",
        "num_ids": 2379
    },
    {
        "number": 4523,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    result = []\n    \n    for i in range(1, t+1):\n        n = int(stdin.split('\\n')[i*2-1])\n        a = list(map(int, stdin.split('\\n')[i*2].split()))\n        \n        if n == 1:\n            result.append(\"YES\")\n        else:\n            a.sort()\n            count = 0\n            for j in range(n-1):\n                if abs(a[j] - a[j+1]) <= 1:\n                    count += 1\n                    if count == 1:\n                        a.remove(min(a[j], a[j+1]))\n                    else:\n                        a.remove(a[j])\n                        break\n            \n            if len(set(a)) == 1:\n                result.append(\"YES\")\n            else:\n                result.append(\"NO\")\n    \n    return '\\n'.join(result)\n\ninput_str = \"5\\n3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"5\\n3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\") == \"YES\\nYES\\nNO\\nNO\\nYES\"",
        "num_ids": 1557
    },
    {
        "number": 4524,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a, b = stdin.split('\\n', 2)[1:3]\n    \n    def to_int(binary: str) -> int:\n        return int(binary, 2)\n    \n    def to_binary(decimal: int) -> str:\n        return bin(decimal)[2:]\n    \n    def bitwise_and(binary1: str, binary2: str) -> str:\n        return to_binary(to_int(binary1) & to_int(binary2))\n    \n    def divide_round_down(binary: str) -> str:\n        return binary[:-1]\n    \n    answer = 0\n    while len(b) > 0:\n        answer += to_int(bitwise_and(a, b))\n        b = divide_round_down(b)\n    \n    return str(answer % 998244353)",
        "test": "assert solution(\"4 5\\n1001\\n10101\") == \"11\" ",
        "num_ids": 1203
    },
    {
        "number": 4525,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    result = []\n\n    for _ in range(t):\n        n = int(input().strip())\n        if n % 2 != 0 or n < 2:\n            result.append(\"NO\")\n            continue\n\n        first_half_sum = n // 2\n        second_half_sum = n\n        for i in range(1, n // 2 + 1):\n            if first_half_sum >= i and second_half_sum >= n - i:\n                result.append(\"YES\")\n                result.append(\" \".join(map(str, [i, n - i] + list(range(1, i)) + list(range(i + 1, n)))))\n                break\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n",
        "test": "assert solution(\"5\\n2\\n4\\n6\\n8\\n10\\n\") == \"NO\\nYES\\n2 4 1 5\\nNO\\nYES\\n2 4 6 8 1 3 5 11\\nNO\"",
        "num_ids": 1658
    },
    {
        "number": 4526,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    results = []\n    \n    for i in range(1, t + 1):\n        n = int(stdin.splitlines()[i * 2 - 1])\n        a = list(map(int, stdin.splitlines()[i * 2].split()))\n        \n        special_count = 0\n        for j in range(n):\n            for k in range(j + 1, n):\n                if sum(a[j:k+1]) == a[j]:\n                    special_count += 1\n                    \n        results.append(special_count)\n        \n    return '\\n'.join(map(str, results))",
        "test": "assert solution(\"5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\\n8\\n8 7 6 5 4 3 2 1\\n1\\n1\") == \"5\\n1\\n0\\n4\\n0\"",
        "num_ids": 1430
    },
    {
        "number": 4527,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    t = int(stdin.strip().split('\\n')[0])\n    stdin = stdin.strip().split('\\n')[1:]\n    \n    for i in range(t):\n        n = int(stdin[i*2])\n        segments = []\n        for j in range(n):\n            segments.append([int(x) for x in stdin[i*2+j+1].split()])\n        \n        max_size = 0\n        for subset in itertools.combinations(segments, n):\n            non_intersecting = True\n            for i in range(len(subset)):\n                for j in range(i+1, len(subset)):\n                    if not (subset[i][0] > subset[j][1] or subset[i][1] < subset[j][0]):\n                        non_intersecting = False\n                        break\n                if not non_intersecting:\n                    break\n            if non_intersecting:\n                max_size = max(max_size, len(subset))\n        result.append(max_size)\n    \n    return \"\\n\".join(str(x) for x in result)\n\nimport sys\nimport itertools\n\ninput_data = sys.stdin.read()\nprint(solution(input_data)) ",
        "test": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '3\\n4\\n2\\n7'",
        "num_ids": 2435
    },
    {
        "number": 4528,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.splitlines()[0])\n    answers = []\n    \n    for i in range(1, test_cases + 1):\n        h, m = map(int, stdin.splitlines()[i].split())\n        minutes_before_new_year = 60 * (23 - h) + (60 - m)\n        answers.append(minutes_before_new_year)\n    \n    return '\\n'.join(map(str, answers))",
        "test": "assert solution(\"5\\n23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"",
        "num_ids": 1812
    },
    {
        "number": 4529,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    test_cases = stdin.split(\"\\n\")[1:-1]\n    result = []\n\n    for n, s in zip(test_cases[0::2], test_cases[1::2]):\n        n = int(n)\n        x, y = 0, 0\n        move_dict = {'L': (-1, 0), 'R': (1, 0), 'U': (0, 1), 'D': (0, -1)}\n\n        for i in range(n):\n            dx, dy = move_dict[s[i]]\n            x += dx\n            y += dy\n\n        for l in range(1, n):\n            for r in range(l, n + 1):\n                new_x, new_y = x, y\n                for i in range(l, r):\n                    dx, dy = move_dict[s[i - 1]]\n                    new_x += dx\n                    new_y += dy\n\n                if new_x == 0 and new_y == 0:\n                    result.append(f\"{l} {r}\")\n                    break\n            else:\n                continue\n            break\n        else:\n            result.append(\"-1\")\n\n    return \"\\n\".join(result)\n",
        "test": "assert solution(\"4\\nLRUD\\n4\\nLURD\\n5\\nRRUDU\\n5\\nLLDDR\") == \"1 2\\n1 4\\n3 4\\n-1\"",
        "num_ids": 1590
    },
    {
        "number": 4530,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_pair(team1, team2):\n        return len(team1) == len(team2) and len(team1) == len(set(team1)) and len(team2) == len(set(team2))\n\n    def find_valid_pair(skills):\n        unique_skills = set(skills)\n        for size in range(1, len(skills) + 1):\n            for team1 in itertools.combinations(unique_skills, size):\n                team2 = tuple(sorted(skills))\n                if is_valid_pair(team1, team2):\n                    return size\n        return 0\n\n    t = int(stdin.readline())\n    result = []\n\n    for _ in range(t):\n        n = int(stdin.readline())\n        skills = list(map(int, stdin.readline().split()))\n        result.append(find_valid_pair(skills))\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"4\\n7\\n4 2 4 1 4 3\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == \"3\\n1\\n0\\n2\"",
        "num_ids": 1777
    },
    {
        "number": 4531,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    values = list(map(int, stdin.splitlines()[1].split()))\n    edges = [list(map(int, line.split())) for line in stdin.splitlines()[2:]]\n    \n    def distance(u, v):\n        visited = [False] * n\n        queue = [u]\n        visited[u-1] = True\n        dist = 0\n        \n        while queue:\n            node = queue.pop(0)\n            for neighbor in edges:\n                if neighbor[0] == node:\n                    neighbor = neighbor[1]\n                elif neighbor[1] == node:\n                    neighbor = neighbor[0]\n                else:\n                    continue\n                \n                if not visited[neighbor-1]:\n                    visited[neighbor-1] = True\n                    queue.append(neighbor)\n                    if neighbor == v:\n                        return dist + 1\n            dist += 1\n            \n        return -1\n    \n    max_cost = 0\n    for i in range(1, n+1):\n        cost = sum([distance(j, i) * values[j-1] for j in range(1, n+1)])\n        max_cost = max(max_cost, cost)\n        \n    return str(max_cost) ",
        "test": "assert solution(\"1\\n1337\") == \"0\" ",
        "num_ids": 2022
    },
    {
        "number": 4532,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    result = []\n    for i in range(1, t+1):\n        n, k = map(int, stdin.split('\\n')[i].split())\n        a = list(map(int, stdin.split('\\n')[i+1].split()))\n        x = 0\n        moves = 0\n        for j in range(n):\n            if a[j] % k != 0:\n                moves += k - a[j] % k\n                a[j] += k - a[j] % k\n        result.append(moves)\n    return '\\n'.join(map(str, result))\n\ntest_input = \"\"\"4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n\"\"\"\n\nprint(solution(test_input)) ",
        "test": "assert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"227\"",
        "num_ids": 2043
    },
    {
        "number": 4533,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def find_content_children(children_greed_factors: list, cookies_sizes: list) -> int:\n        cookies_sizes.sort(reverse=True)\n        children_greed_factors.sort(reverse=True)\n        content_children = 0\n        for child_greed_factor in children_greed_factors:\n            for cookie_size in cookies_sizes:\n                if cookie_size >= child_greed_factor:\n                    content_children += 1\n                    cookies_sizes.remove(cookie_size)\n                    break\n        return content_children\n\n    def main(input_data: str) -> str:\n        input_data = input_data.split(\",\")\n        children_greed_factors = [int(child_greed_factor) for child_greed_factor in input_data[0].strip(\"[]\").split(\",\")]\n        cookies_sizes = [int(cookie_size) for cookie_size in input_data[1].strip(\"[]\").split(\",\")]\n        content_children = find_content_children(children_greed_factors, cookies_sizes)\n        return str(content_children)\n\n    input_data = stdin.strip()\n    result = main(input_data)\n    return result",
        "test": "assert solution(\"[1,2,3],[1,1]\") == \"1\"",
        "num_ids": 1044
    },
    {
        "number": 4534,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 0 or k > 33:\n        return \"Invalid input\"\n\n    row = [1]\n\n    for i in range(1, k + 1):\n        prev_row = row\n        row = [1]\n\n        for j in range(1, i):\n            row.append(prev_row[j - 1] + prev_row[j])\n\n        row.append(1)\n\n    return row",
        "test": "assert solution(0) == [1]",
        "num_ids": 806
    },
    {
        "number": 4535,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input binary string to integer\n    n = int(stdin, 2)\n\n    # Count number of '1' bits\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n\n    return str(count)",
        "test": "assert solution('00000000000000000000000000001011') == '3'",
        "num_ids": 825
    },
    {
        "number": 4536,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    digits = list(map(int, stdin))\n    carry = 1\n    result = []\n\n    for i in range(len(digits)-1, -1, -1):\n        temp = digits[i] + carry\n        if temp > 9:\n            carry = 1\n            result.append(temp % 10)\n        else:\n            carry = 0\n            result.append(temp)\n\n    if carry == 1:\n        result.append(1)\n\n    result.reverse()\n    return \"\".join(map(str, result))\n",
        "test": "assert solution([9]) == [1,0]",
        "num_ids": 1099
    },
    {
        "number": 4537,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    max_value = max(A + B, A - B, A * B)\n    return str(max_value)",
        "test": "assert solution(\"3 1\") == \"4\"",
        "num_ids": 593
    },
    {
        "number": 4538,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, D = map(int, stdin.split(\"\\n\")[0].split())\n    points = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:N+1]]\n\n    # calculate distances\n    distances = [((x**2 + y**2)**0.5) for x, y in points]\n\n    # count points within distance D\n    count = sum(1 for dist in distances if dist <= D)\n\n    return str(count)",
        "test": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\\n\") == \"3\"",
        "num_ids": 1231
    },
    {
        "number": 4539,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(n))\n    return \"Yes\" if n % digits_sum == 0 else \"No\"",
        "test": "assert solution(\"12\") == \"Yes\"",
        "num_ids": 528
    },
    {
        "number": 4540,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, spots = stdin.strip().split('\\n')\n    N = int(N)\n    spots = list(map(int, spots.split()))\n\n    total_cost = 0\n    for i in range(N):\n        total_cost += abs(0 - spots[i])\n\n        for j in range(N):\n            if i != j:\n                total_cost += abs(spots[j] - spots[i])\n\n    for i in range(N):\n        print(total_cost)\n",
        "test": "assert solution(\"10\\n-1000 -5000 0 5000 1000 -1000\") == \"4900\\n4900\\n0\\n4900\\n900\\n4900\" ",
        "num_ids": 1083
    },
    {
        "number": 4541,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if stdin.lower() in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'",
        "test": "assert solution(\"a\") == \"vowel\" ",
        "num_ids": 581
    },
    {
        "number": 4542,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    black_count = s.count('B')\n    white_count = s.count('W')\n\n    if black_count == 0 or white_count == 0:\n        return str(min(black_count, white_count))\n    elif black_count > white_count:\n        return str(white_count)\n    else:\n        return str(black_count)\n\ndef",
        "test": "assert solution(\"BBBBBBBBBBWWWWWWW\") == \"10\" ",
        "num_ids": 767
    },
    {
        "number": 4543,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    concatenated_number = int(str(a) + str(b))\n    root = int(concatenated_number ** 0.5)\n    \n    if root ** 2 == concatenated_number:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1 21\") == \"Yes\"",
        "num_ids": 682
    },
    {
        "number": 4544,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    N, sequence = stdin.split('\\n')\n    N = int(N)\n    a = list(map(int, sequence.split()))\n\n    max_count = 0\n    for x in range(1, max(a) + 1):\n        count = 0\n        for i in range(N):\n            if a[i] == x:\n                count += 1\n        max_count = max(max_count, count)\n\n    return str(max_count)",
        "test": "assert solution(\"1\\n5\") == \"1\" ",
        "num_ids": 1328
    },
    {
        "number": 4545,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, A = list(map(int, stdin.split()))\n    return str(N*N - A)",
        "test": "assert solution(\"3\\n4\") == \"5\"",
        "num_ids": 558
    },
    {
        "number": 4546,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    return \"YES\" if b - a == c - b else \"NO\"",
        "test": "assert solution(\"2 4 6\") == \"YES\"",
        "num_ids": 517
    },
    {
        "number": 4547,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n // 10 == 9 or n % 10 == 9:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"29\") == \"Yes\"",
        "num_ids": 443
    },
    {
        "number": 4548,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = map(int, stdin.split()[:3])\n    toll_gates = list(map(int, stdin.split()[3:]))\n    min_cost = 0\n    \n    # Calculate the minimum cost to reach the goal\n    for i in range(M):\n        if toll_gates[i] < X:\n            min_cost += 1\n        elif toll_gates[i] > X:\n            min_cost += toll_gates[i] - X - 1\n        else:\n            continue\n            \n    return str(min_cost)",
        "test": "assert solution(\"10 2 5\\n4 7\\n\") == \"2\"",
        "num_ids": 1055
    },
    {
        "number": 4549,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    H, W = map(int, lines[0].split())\n    grid = [list(line) for line in lines[1:]]\n    square1001 = Square(H, W, grid)\n    return \"Yes\" if square1001.can_paint() else \"No\"\n\nclass Square:\n    def __init__(self, H, W, grid):\n        self.H = H\n        self.W = W\n        self.grid = grid\n\n    def can_paint(self):\n        def dfs(i, j, color):\n            if not (0 <= i < self.H and 0 <= j < self.W):\n                return True\n            if self.grid[i][j] == color:\n                return True\n            self.grid[i][j] = color\n            return all(dfs(x, y, color) for x, y in self._adjacent_squares(i, j))\n\n        return dfs(0, 0, '#') and dfs(self.H - 1, self.W - 1, '..')\n\n    def _adjacent_squares(self, i, j):\n        return [(x, y) for x in (i - 1, i, i + 1) for y in (j - 1, j, j + 1) if (x, y) != (i, j)]",
        "test": "assert solution(\"3 3\\n.#.\\n###\\n.#.\\n\") == \"Yes\"",
        "num_ids": 2235
    },
    {
        "number": 4550,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return \"Yes\"\n    if a == b + c or b == a + c or c == a + b:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"10 20 21\") == \"No\"",
        "num_ids": 645
    },
    {
        "number": 4551,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    left_sum = A + B\n    right_sum = C + D\n    if left_sum > right_sum:\n        return \"Left\"\n    elif left_sum == right_sum:\n        return \"Balanced\"\n    else:\n        return \"Right\"",
        "test": "assert solution(\"3 8 7 1\") == \"Left\"",
        "num_ids": 702
    },
    {
        "number": 4552,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input data\n    lines = stdin.split('\\n')\n    num_shops, open_hours = int(lines[0]), []\n    for i in range(1, num_shops + 1):\n        open_hours.append(list(map(int, lines[i].split())))\n    profit = list(map(int, lines[num_shops + 1].split()))\n    \n    # Calculate the maximum profit\n    max_profit = 0\n    for i in range(1, num_shops + 1):\n        shop_profit = 0\n        for j in range(10):\n            if open_hours[i - 1][j] == 1:\n                shop_profit += profit[j]\n        max_profit = max(max_profit, shop_profit)\n    \n    return str(max_profit)",
        "test": "assert solution(\"2\\n0 0 0 0 0 0 0 0 0 0\\n1 1 1 1 1 1 1 1 1 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n-2 -3 4 -2 -3 4 -2 -3 4 -2\") == \"2\\n\" ",
        "num_ids": 2277
    },
    {
        "number": 4553,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B, S = stdin.split()\n    if len(S) != int(A) + int(B) + 1:\n        return \"No\"\n    if S[int(A) - 1] != '-':\n        return \"No\"\n    for i in range(len(S)):\n        if i == int(A) - 1:\n            continue\n        if not S[i].isdigit() or int(S[i]) < 0 or int(S[i]) > 9:\n            return \"No\"\n    return \"Yes\"",
        "test": "assert solution(\"2 3\\n12-34a\") == \"No\"",
        "num_ids": 978
    },
    {
        "number": 4554,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    # determine the distance between the two rectangles\n    distance = b - a - W\n    # return the minimum distance\n    return str(abs(distance))",
        "test": "assert solution(\"100000 50000 100000\") == \"50000\"",
        "num_ids": 529
    },
    {
        "number": 4555,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    integers = sorted([i for i in range(A, B+1)])\n    return '\\n'.join([str(x) for x in integers[:K] + integers[-K:]])",
        "test": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"",
        "num_ids": 920
    },
    {
        "number": 4556,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.split()\n    return name[0][0].upper() + \"xC\"",
        "test": "assert solution('AtCoder s Contest') == 'AxC'",
        "num_ids": 528
    },
    {
        "number": 4557,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    \n    if X > A + B:\n        return \"NO\"\n    \n    if X <= A:\n        return \"YES\"\n    \n    return \"YES\" if X - A <= B else \"NO\"",
        "test": "assert solution(\"100 100 201\") == \"NO\"",
        "num_ids": 591
    },
    {
        "number": 4558,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    return str(X - t)",
        "test": "assert solution(\"100 17\") == \"83\" ",
        "num_ids": 743
    },
    {
        "number": 4559,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, *numbers = stdin.split()\n    n = int(n)\n    product = 1\n\n    for num in numbers:\n        product *= int(num)\n\n    if product > 10**18:\n        return \"-1\"\n    else:\n        return str(product)\n",
        "test": "assert solution(\"2\\n1000000000 1000000000\") == \"1000000000000000000\"",
        "num_ids": 1556
    },
    {
        "number": 4560,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n == 0:\n        return \"Yes\"\n    elif n < 0:\n        return \"No\"\n    elif n <= a:\n        return \"Yes\"\n    elif n % 500 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1\\n1\") == \"Yes\"",
        "num_ids": 750
    },
    {
        "number": 4561,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n\n    if A + B > X + 1:\n        return \"dangerous\"\n    elif A + B <= X:\n        return \"delicious\"\n    else:\n        return \"safe\"",
        "test": "assert solution(\"4 1 6\") == \"dangerous\"",
        "num_ids": 617
    },
    {
        "number": 4562,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    largest_square = 0\n\n    for i in range(1, n + 1):\n        square = i * i\n        if square <= n and square > largest_square:\n            largest_square = square\n\n    return str(largest_square)",
        "test": "assert solution(\"10\") == \"9\"",
        "num_ids": 533
    },
    {
        "number": 4563,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def solve(t, a):\n        return lcm(t, a)\n\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    t_a = []\n\n    for i in range(1, n + 1):\n        t, a = map(int, lines[i].split())\n        t_a.append((t, a))\n\n    result = 1\n    for i in range(1, n):\n        result = lcm(result, solve(t_a[i][0], t_a[i][1]))\n\n    return str(result * (t_a[-1][0] + t_a[-1][1]))",
        "test": "assert solution(\"2\\n1 1\\n1 1\\n\") == \"2\"",
        "num_ids": 1613
    },
    {
        "number": 4564,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) != len(set(stdin)):\n        return \"no\"\n    else:\n        return \"yes\"",
        "test": "assert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"yes\"",
        "num_ids": 607
    },
    {
        "number": 4565,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split(\"\\n\")\n    N = int(N)\n    \n    min_changes = N\n    for i in range(N):\n        changes = S[:i].count(\"W\") + S[i:].count(\"E\")\n        min_changes = min(min_changes, changes)\n    \n    return str(min_changes)",
        "test": "assert solution(\"3\\nWWE\") == \"1\"",
        "num_ids": 842
    },
    {
        "number": 4566,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    roads = [[] for _ in range(N+1)]\n    for i in range(M):\n        a, b = map(int, stdin.split()[2*i+2:2*i+4])\n        roads[a].append(i+1)\n        roads[b].append(i+1)\n    return '\\n'.join([str(len(road)) for road in roads[1:]])",
        "test": "assert solution(\"2 1\\n1 2\") == \"1\\n1\"",
        "num_ids": 1728
    },
    {
        "number": 4567,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    n = int(input_lines[0])\n    scores = [int(score) for score in input_lines[1:]]\n    \n    max_grade = sum(scores)\n    \n    for i in range(1, max_grade + 1):\n        if max_grade % 10 == 0 and i <= max_grade:\n            continue\n        else:\n            return str(max_grade)\n    \n    return \"0\"  # If the loop doesn't return anything, it means the max grade is 0.\n",
        "test": "assert solution(\"2\\n5\\n10\") == \"15\"",
        "num_ids": 1001
    },
    {
        "number": 4568,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    S = stdin.split(\"\\n\")[1]\n    max_count = 0\n    for i in range(1, N):\n        count = len(set(S[:i]) & set(S[i:]))\n        if count > max_count:\n            max_count = count\n    return str(max_count)",
        "test": "assert solution(\"1\\nxyz\\n\") == \"0\" ",
        "num_ids": 1025
    },
    {
        "number": 4569,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    weather_dict = {\"Sunny\": \"Cloudy\", \"Cloudy\": \"Rainy\", \"Rainy\": \"Sunny\"}\n    return weather_dict[stdin]",
        "test": "assert solution(\"Sunny\") == \"Cloudy\"",
        "num_ids": 688
    },
    {
        "number": 4570,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    fee1 = A * N\n    fee2 = B\n    minimum_fee = min(fee1, fee2)\n    return str(minimum_fee)",
        "test": "assert solution(\"7 17 120\") == \"119\"",
        "num_ids": 748
    },
    {
        "number": 4571,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    total_exec_time = 0\n    # Calculate the expected time for solving the M cases with 1/2 probability\n    total_exec_time += 1900 * (1 + 1/2 + 1/4 + 1/8 + ...)\n    # Calculate the expected time for solving the remaining cases with 100 milliseconds\n    total_exec_time += 100 * (N - M)\n    return str(int(total_exec_time))",
        "test": "assert solution(\"1 3\") == \"2400\"",
        "num_ids": 978
    },
    {
        "number": 4572,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    missing_letter = None\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\n    for letter in alphabet:\n        if letter not in stdin:\n            missing_letter = letter\n            break\n\n    return missing_letter",
        "test": "assert solution(\"atcoderregularcontest\") == \"b\"",
        "num_ids": 629
    },
    {
        "number": 4573,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    X = list(map(int, stdin.split()[1:]))\n    result = []\n    \n    def find_median(X: list) -> int:\n        X.sort()\n        n = len(X)\n        if n % 2 == 0:\n            return (X[n//2 - 1] + X[n//2]) / 2\n        else:\n            return X[n//2]\n    \n    for i in range(N):\n        X_without_i = X[:i] + X[i+1:]\n        B_i = find_median(X_without_i)\n        result.append(B_i)\n    \n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"",
        "num_ids": 1193
    },
    {
        "number": 4574,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    sticks = list(map(int, stdin.split()))\n    N = sticks[0]\n    del sticks[0]\n    sticks.sort(reverse=True)\n\n    # Check if four different sticks can be selected\n    if len(set(sticks)) < 4:\n        return \"0\"\n\n    # Check if a rectangle can be formed\n    for i in range(N - 3):\n        for j in range(i + 1, N - 2):\n            for k in range(j + 1, N - 1):\n                for l in range(k + 1, N):\n                    if sticks[i] == sticks[j] == sticks[k] == sticks[l]:\n                        continue\n                    if sticks[i] + sticks[j] > sticks[k] and sticks[i] + sticks[j] > sticks[l]:\n                        return str(sticks[i] * sticks[j])\n    return \"0\"",
        "test": "assert solution(\"4\\n1 1 1 1\") == \"0\"",
        "num_ids": 1663
    },
    {
        "number": 4575,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    D, X = map(int, lines[1].split())\n    A = [int(line) for line in lines[2:]]\n\n    chocolate_prepared = D * X\n\n    for i in range(N):\n        chocolate_eaten = 0\n        for j in range(D):\n            if (j + 1) % (A[i] + 1) == 0:\n                chocolate_eaten += 1\n        chocolate_prepared -= chocolate_eaten\n\n    return str(chocolate_prepared)\n\ninput_str = \"\"\"3\n7 1\n2\n5\n10\"\"\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"1\\n3 1\\n1\") == \"2\"",
        "num_ids": 1211
    },
    {
        "number": 4576,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n    \n    def count_ways(coins: list, target: int) -> int:\n        dp = [0] * (target + 1)\n        dp[0] = 1\n        for coin in coins:\n            for i in range(coin, target + 1):\n                dp[i] += dp[i - coin]\n        return dp[target]\n    \n    return str(count_ways([500, 100, 50], X))",
        "test": "assert solution(\"0\\n0\\n0\\n0\") == \"1\"",
        "num_ids": 1515
    },
    {
        "number": 4577,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C >= A and C <= B:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"1 3 2\") == \"Yes\"",
        "num_ids": 467
    },
    {
        "number": 4578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    m_list = list(map(int, input().split()))\n\n    count = 0\n    for i in range(N):\n        count += X // m_list[i]\n\n    return str(count)",
        "test": "assert solution(\"6 1200\\n100\\n120\\n140\\n160\\n180\\n200\") == \"8\\n\"",
        "num_ids": 1319
    },
    {
        "number": 4579,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    items = set()\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n\n    for i in range(1, n + 1):\n        items.add(lines[i])\n\n    return str(len(items))",
        "test": "assert solution(\"3\\napple\\norange\\napple\") == \"2\"",
        "num_ids": 911
    },
    {
        "number": 4580,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N = int(stdin.split()[0])\n    ratings = list(map(int, stdin.split()[1:]))\n\n    # Define the color mapping\n    color_mapping = {\n        (1, 399): \"gray\",\n        (400, 799): \"brown\",\n        (800, 1199): \"green\",\n        (1200, 1599): \"cyan\",\n        (1600, 1999): \"blue\",\n        (2000, 2399): \"yellow\",\n        (2400, 2799): \"orange\",\n        (2800, 4800): \"red\",\n    }\n\n    # Create a set to store the different colors\n    colors = set()\n\n    # Iterate through the ratings and add the corresponding color to the set\n    for rating in ratings:\n        for range_ in color_mapping:\n            if range_[0] <= rating <= range_[1]:\n                colors.add(color_mapping[range_])\n                break\n\n    # Return the minimum and maximum possible number of different colors\n    return f\"{len(colors)} {len(colors)}\"",
        "test": "assert solution(\"6\\n1600 1600 1600 1600 1600 1600\") == \"1 1\"",
        "num_ids": 2256
    },
    {
        "number": 4581,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    price = 700  # price of a bowl of ramen\n\n    # Check if the customer wants to add boiled egg\n    if S[0] == 'o':\n        price += 100\n\n    # Check if the customer wants to add sliced pork\n    if S[1] == 'o':\n        price += 100\n\n    # Check if the customer wants to add green onions\n    if S[2] == 'o':\n        price += 100\n\n    return str(price)",
        "test": "assert solution(\"oxo\") == \"900\"",
        "num_ids": 767
    },
    {
        "number": 4582,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == b:\n        return \"H\"\n    else:\n        return \"D\"",
        "test": "assert solution('H H') == 'H'",
        "num_ids": 686
    },
    {
        "number": 4583,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin)\n    formula = f\"{A}+{B}+{C}+{D}=7\"\n    return formula",
        "test": "assert solution(\"1222\") == \"1+2+2+2=7\" ",
        "num_ids": 1495
    },
    {
        "number": 4584,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, *bosses = stdin.split()\n    n = int(n)\n    \n    subordinates = [0] * (n+1)\n    \n    for i in range(2, n+1):\n        boss = int(bosses[i-2])\n        subordinates[boss] += 1\n        \n    return '\\n'.join(map(str, subordinates[1:]))",
        "test": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"",
        "num_ids": 919
    },
    {
        "number": 4585,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    time = 1\n    while True:\n        if time * (time + 1) // 2 >= x:\n            break\n        time += 1\n    return str(time)",
        "test": "assert solution(\"1\") == \"1\" ",
        "num_ids": 546
    },
    {
        "number": 4586,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = str(n)\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"1118\") == \"Yes\"",
        "num_ids": 687
    },
    {
        "number": 4587,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    parts = stdin.split('\\n')\n    N = int(parts[0])\n    A = list(map(int, parts[1].split()))\n    B = list(map(int, parts[2].split()))\n    C = list(map(int, parts[3].split()))\n\n    def is_valid(upper: int, middle: int, lower: int) -> bool:\n        return upper < middle and middle < lower\n\n    def build_altar(i: int, j: int, k: int) -> bool:\n        return is_valid(A[i], B[j], C[k])\n\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if i != j and j != k and i != k and build_altar(i, j, k):\n                    count += 1\n\n    return str(count)\n\ninput_str = '''2\n1 5\n2 4\n3 6'''\nprint(solution(input_str)) ",
        "test": "assert solution(\"5\\n1 2 3 4 5\\n2 3 4 5 6\\n3 4 5 6 7\") == \"10\"",
        "num_ids": 1809
    },
    {
        "number": 4588,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x_hex = \"0x\" + x\n    y_hex = \"0x\" + y\n\n    if x_hex < y_hex:\n        return \"<\"\n    elif x_hex > y_hex:\n        return \">\"\n    else:\n        return \"=\"",
        "test": "assert solution(\"A B\") == \"<\"",
        "num_ids": 790
    },
    {
        "number": 4589,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    h, w = map(int, lines[0].split())\n    s = lines[1:h+1]\n    \n    def count_bombs(i, j):\n        count = 0\n        for x in range(-1, 2):\n            for y in range(-1, 2):\n                if 0 <= i+x < h and 0 <= j+y < w and s[i+x][j+y] == '#':\n                    count += 1\n        return str(count)\n    \n    result = []\n    for i in range(h):\n        row = \"\"\n        for j in range(w):\n            if s[i][j] == '.':\n                row += count_bombs(i, j)\n            else:\n                row += s[i][j]\n        result.append(row)\n    \n    return \"\\n\".join(result)\n\nstdin = \"3 5\\n.....\\n.#.#.\\n.....\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\\n1#2#1\\n11211\"",
        "num_ids": 2321
    },
    {
        "number": 4590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split()[:3])\n    A = list(map(int, stdin.split()[3:N+3]))\n    B = list(map(int, stdin.split()[N+3:]))\n\n    desk_A = [0] * N\n    desk_B = [0] * M\n\n    for i in range(N):\n        desk_A[i] = (i+1, A[i])\n\n    for i in range(M):\n        desk_B[i] = (i+1, B[i])\n\n    desk_A.sort(key=lambda x: x[1])\n    desk_B.sort(key=lambda x: x[1])\n\n    total_time = 0\n    books_read = 0\n\n    while total_time < K and (desk_A or desk_B):\n        if desk_A and (not desk_B or desk_A[0][1] <= desk_B[0][1]):\n            total_time += desk_A.pop(0)[1]\n            books_read += 1\n        else:\n            total_time += desk_B.pop(0)[1]\n            books_read += 1\n\n    return books_read\n\ninput_str = \"3 4 240\\n60 90 120\\n80 150 80 150\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"",
        "num_ids": 1637
    },
    {
        "number": 4591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n\n    min_money = min(X * A + Y * B, X * A + (Y + 1) * B + 2 * C)\n\n    return str(min_money)",
        "test": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"",
        "num_ids": 955
    },
    {
        "number": 4592,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    N = int(stdin.strip())\n    MOD = 1000000007\n\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1) % MOD\n\n    def count_divisors(n):\n        count = 0\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                if n // i == i:\n                    count += 1\n                else:\n                    count += 2\n        return count\n\n    result = count_divisors(factorial(N))\n\n    return str(result)",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 970
    },
    {
        "number": 4593,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    largest_power = None\n    for b in range(2, int(x**0.5)+1):\n        p = 2\n        while b**p <= x:\n            if largest_power is None or b**p > largest_power:\n                largest_power = b**p\n            p += 1\n    return str(largest_power)",
        "test": "assert solution(\"10\") == \"9\"",
        "num_ids": 681
    },
    {
        "number": 4594,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    diameters = [int(d) for d in lines[1:]]\n\n    # Sort the diameters in descending order\n    diameters.sort(reverse=True)\n\n    # Initialize the number of layers and the index of the last mochi used\n    layers = 1\n    last_used = 0\n\n    # Iterate through the diameters\n    for i in range(1, N):\n        # Check if the current diameter is smaller than the diameter of the mochi directly below it\n        if diameters[i] < diameters[last_used]:\n            # If it is, increase the number of layers and update the index of the last mochi used\n            layers += 1\n            last_used = i\n\n    return str(layers)",
        "test": "assert solution(\"2\\n10\\n10\") == \"1\"",
        "num_ids": 999
    },
    {
        "number": 4595,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    dp = [0] * (n + 1)\n    max_length = 0\n    for i in range(1, n + 1):\n        for j in range(i):\n            if s[j] == 'A' and s[i - 1] == 'Z':\n                dp[i] = max(dp[i], dp[j] + i - j)\n                max_length = max(max_length, dp[i])\n    return max_length",
        "test": "assert solution(\"QWERTYASDFZXCV\") == 5, \"Should return 5\"",
        "num_ids": 1131
    },
    {
        "number": 4596,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    count = 0\n\n    while all(x % 2 == 0 for x in A):\n        A = [x // 2 for x in A]\n        count += 1\n\n    return str(count)",
        "test": "assert solution('3\\n8 12 40') == '2'",
        "num_ids": 726
    },
    {
        "number": 4597,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = 1\n    for i in range(2, N+1):\n        result = (result * i) % (10**9 + 7)\n    return str(result)",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 440
    },
    {
        "number": 4598,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    return str((N * (N + 1)) // 2)  # Calculate the sum of first N natural numbers using the formula (N * (N + 1)) // 2.",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 466
    },
    {
        "number": 4599,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    N = int(input_data[0])\n    cards = list(map(int, input_data[1].split()))\n\n    alice_cards = []\n    bob_cards = []\n\n    for i in range(N):\n        if i % 2 == 0:\n            alice_cards.append(cards[i])\n        else:\n            bob_cards.append(cards[i])\n\n    alice_score = sum(alice_cards)\n    bob_score = sum(bob_cards)\n\n    return str(alice_score - bob_score)",
        "test": "assert solution(\"2\\n3 1\") == \"2\"",
        "num_ids": 957
    },
    {
        "number": 4600,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, M = map(int, lines[0].split())\n    problem_status = [{} for _ in range(N + 1)]\n\n    for i in range(1, M + 1):\n        problem, verdict = lines[i].split()\n        problem = int(problem)\n\n        if verdict == \"AC\":\n            if problem not in problem_status[problem]:\n                problem_status[problem][\"AC\"] = i\n            else:\n                problem_status[problem][\"AC\"] = min(problem_status[problem][\"AC\"], i)\n        else:\n            if problem not in problem_status[problem]:\n                problem_status[problem][\"WA\"] = i\n            else:\n                problem_status[problem][\"WA\"] = min(problem_status[problem][\"WA\"], i)\n\n    correct_answers = 0\n    penalties = 0\n\n    for problem in range(1, N + 1):\n        if \"AC\" in problem_status[problem]:\n            correct_answers += 1\n            penalties += problem_status[problem][\"AC\"] - problem_status[problem][\"WA\"] - 1\n\n    return f\"{correct_answers} {penalties}\"",
        "test": "assert solution(\"1 2\\n1 WA\\n1 AC\") == \"1 0\"",
        "num_ids": 2250
    },
    {
        "number": 4601,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    H = list(map(int, stdin.split()[2:]))\n\n    # Sort the monsters in ascending order of their health\n    H.sort()\n\n    # Initialize the number of attacks needed and the current index\n    attacks_needed = 0\n    current_index = 0\n\n    # Iterate through the monsters, using Special Move when possible\n    for monster_health in H:\n        if K > 0:\n            attacks_needed += monster_health - 1\n            K -= 1\n        else:\n            attacks_needed += monster_health - H[current_index]\n            current_index += 1\n\n    # If there are any remaining monsters, use Attack to finish them off\n    if current_index < N:\n        attacks_needed += N - current_index\n\n    return str(attacks_needed)",
        "test": "assert solution(\"3 1\\n4 1 5\") == \"5\"",
        "num_ids": 1328
    },
    {
        "number": 4602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    K = int(lines[1])\n    x = [int(x) for x in lines[2].split()]\n    \n    min_distance = 0\n    for i in range(N):\n        min_distance += min(abs(x[i] - 0), abs(x[i] - K))\n    \n    return str(min_distance)",
        "test": "assert solution(\"4\\n100\\n1 2 3 4\") == \"16\"",
        "num_ids": 1096
    },
    {
        "number": 4603,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    train_unlimited = min(a, b)\n    bus_ordinary = c\n    return str(train_unlimited + bus_ordinary)",
        "test": "assert solution(\"600\\n300\\n220\\n420\") == \"520\"",
        "num_ids": 716
    },
    {
        "number": 4604,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = stdin.split()\n    n = int(n)\n    a = [int(i) for i in a]\n\n    mod = 10**9 + 7\n    count = 0\n\n    for i in range(1, n - 1):\n        if a[i] == a[i + 1]:\n            count = 0\n            break\n\n    if count == 0:\n        return \"0\"\n\n    if a[0] == a[-1]:\n        count *= 2\n\n    return str(count % mod)",
        "test": "assert solution(\"4\\n2 2 2 2\") == \"0\"",
        "num_ids": 1485
    },
    {
        "number": 4605,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n\n    def digit_sum(num: int) -> int:\n        return sum(map(int, str(num)))\n\n    total_sum = 0\n    for i in range(1, N + 1):\n        if A <= digit_sum(i) <= B:\n            total_sum += i\n\n    return str(total_sum)\n",
        "test": "assert solution(\"20 2 5\") == \"84\"",
        "num_ids": 699
    },
    {
        "number": 4606,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABC\" + stdin.strip()",
        "test": "assert solution(\"100\") == \"ABC100\"",
        "num_ids": 404
    },
    {
        "number": 4607,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    takahashi_count = 0\n\n    for day in range(1, b + 1):\n        if day == a:\n            takahashi_count += 1\n\n    return str(takahashi_count)",
        "test": "assert solution(\"2 29\") == \"1\"",
        "num_ids": 647
    },
    {
        "number": 4608,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Check if it is possible to lighten up Button 2\n    visited = [False] * (N + 1)\n    visited[1] = True\n\n    def dfs(i: int) -> bool:\n        if i == 2:\n            return True\n        if visited[i]:\n            return False\n        visited[i] = True\n        return dfs(a[i - 1])\n\n    if dfs(1):\n        count = 0\n        for i in range(1, N + 1):\n            if not visited[i]:\n                count += 1\n        return str(count)\n    else:\n        return \"-1\"",
        "test": "assert solution(\"4\\n4\\n2\\n1\\n3\") == \"-1\"",
        "num_ids": 1160
    },
    {
        "number": 4609,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    nums = [int(x) for x in lines[1:]]\n\n    written_nums = set()\n    for num in nums:\n        if num in written_nums:\n            written_nums.remove(num)\n        else:\n            written_nums.add(num)\n\n    return str(len(written_nums))",
        "test": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"",
        "num_ids": 1430
    },
    {
        "number": 4610,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    balls = list(map(int, stdin.split()[2:]))\n    \n    if len(set(balls)) <= K:\n        return \"0\"\n    \n    balls.sort()\n    low, high = 0, N-1\n    result = 0\n    \n    while low < high:\n        if len(set(balls[low:high+1])) <= K:\n            result = high - low + 1\n            low += 1\n        else:\n            high -= 1\n            \n    return str(result)",
        "test": "assert solution('6 2\\n1 1 2 2 3 3') == '2'",
        "num_ids": 1339
    },
    {
        "number": 4611,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    points = []\n    for i in range(1, n + 1):\n        line = lines[i].split()\n        points.append((int(line[1]), int(line[2])))\n\n    points.sort(key=lambda x: x[1])\n    points.sort(key=lambda x: x[0])\n\n    for i in range(1, n):\n        if points[i][1] <= points[i - 1][1]:\n            return \"No\"\n\n    return \"Yes\"\n\nstdin = \"2\\n3 1 2\\n6 1 1\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"3\\n3 1 2\\n4 2 1\\n6 1 1\") == \"No\"",
        "num_ids": 2301
    },
    {
        "number": 4612,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = (a + b) / 2\n    return str(int(round(x)))",
        "test": "assert solution(\"1 3\") == \"2\"",
        "num_ids": 561
    },
    {
        "number": 4613,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    from queue import Queue\n\n    # read input\n    N, M = map(int, stdin.split())\n    edges = []\n    for _ in range(M):\n        a, b = map(int, input().split())\n        edges.append((a, b))\n\n    # construct adjacency list\n    adj_list = defaultdict(list)\n    for a, b in edges:\n        adj_list[a].append(b)\n        adj_list[b].append(a)\n\n    # BFS to find bridges\n    def bfs(start, end):\n        queue = Queue()\n        queue.put(start)\n        seen = set()\n        seen.add(start)\n        while not queue.empty():\n            node = queue.get()\n            for neighbor in adj_list[node]:\n                if neighbor == end:\n                    return True\n                if neighbor not in seen:\n                    seen.add(neighbor)\n                    queue.put(neighbor)\n        return False\n\n    # count bridges\n    count = 0\n    for a, b in edges:\n        if not bfs(a, b):\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\" ",
        "num_ids": 2221
    },
    {
        "number": 4614,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B:\n        return str(C)\n    elif A == C:\n        return str(B)\n    else:\n        return str(A)",
        "test": "assert solution(\"5 7 5\") == \"7\"",
        "num_ids": 608
    },
    {
        "number": 4615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n    \n    def dissolved_sugar(mass: int, density: int) -> int:\n        return mass * density // 100\n    \n    def water_mass(density: int) -> int:\n        return F - dissolved_sugar(F, density)\n    \n    def feasible(water_density: int, sugar_density: int) -> bool:\n        return (water_mass(water_density) >= 100*A and water_mass(water_density) <= 300*B) or (water_mass(sugar_density) >= 100*A and water_mass(sugar_density) <= 300*B)\n    \n    def density_sugar_water(water_density: int, sugar_density: int) -> int:\n        return dissolved_sugar(water_mass(water_density), water_density) + dissolved_sugar(water_mass(sugar_density), sugar_density)\n    \n    def max_density_sugar_water() -> tuple[int, int]:\n        max_density = 0\n        max_sugar = 0\n        for water_density in range(1, E+1):\n            for sugar_density in range(1, E+1):\n                if water_density + sugar_density > max_density and feasible(water_density, sugar_density):\n                    max_density = water_density + sugar_density\n                    max_sugar = density_sugar_water(water_density, sugar_density)\n        return max_sugar, max_density\n    \n    return ' '.join(map(str, max_density_sugar_water()))",
        "test": "assert solution('4 5 10 20 15 100') == '50 25'",
        "num_ids": 2118
    },
    {
        "number": 4616,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    i = s.index(\"i\")\n    n = s.rindex(\"n\")\n    return f\"i{n-i-1}n\"",
        "test": "assert solution(\"internationalization\") == \"i18n\"",
        "num_ids": 575
    },
    {
        "number": 4617,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split(\"\\n\")\n    if len(rows) != 2:\n        return \"NO\"\n    \n    row1, row2 = rows\n    \n    if len(row1) != len(row2):\n        return \"NO\"\n    \n    for i in range(len(row1)):\n        if row1[i] != row2[-(i+1)]:\n            return \"NO\"\n    \n    return \"YES\"",
        "test": "assert solution(\"abc\\ndef\") == \"NO\"",
        "num_ids": 789
    },
    {
        "number": 4618,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s, K = stdin.split(\"\\n\")\n    substrings = sorted(set(s[i:j+1] for i in range(len(s)) for j in range(i, len(s)) if s[i:j+1] != \"\"))\n    return substrings[int(K)-1]",
        "test": "assert solution(\"aba\\n4\") == \"b\"",
        "num_ids": 655
    },
    {
        "number": 4619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    W, H, N = map(int, input_lines[0].split())\n    x_y_a = []\n\n    for i in range(1, N+1):\n        x_y_a.append(tuple(map(int, input_lines[i].split())))\n\n    def paint(W: int, H: int, x_y_a: list) -> int:\n        def is_black(x: int, y: int, a: int) -> bool:\n            if a == 1:\n                return x < x_y_a[i][0]\n            elif a == 2:\n                return x > x_y_a[i][0]\n            elif a == 3:\n                return y < x_y_a[i][1]\n            else:\n                return y > x_y_a[i][1]\n\n        white_area = W * H\n        for i in range(N):\n            for x in range(W+1):\n                for y in range(H+1):\n                    if is_black(x, y, x_y_a[i][2]):\n                        white_area -= 1\n\n        return white_area\n\n    return str(paint(W, H, x_y_a))",
        "test": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\\n\") == \"9\"",
        "num_ids": 2469
    },
    {
        "number": 4620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    time = [0] * N\n    for i in range(1, N):\n        C, S, F = map(int, lines[i].split())\n        time[i] = S // F * F + C\n    time[N-1] = 0\n    return '\\n'.join(map(str, time))\n\ndef",
        "test": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\"",
        "num_ids": 1444
    },
    {
        "number": 4621,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split()[0].split())\n    image = [list(row) for row in stdin.split()[1:]]\n    extended_image = [['.' for _ in range(W)] for _ in range(2*H)]\n    for i in range(H):\n        for j in range(W):\n            extended_image[(i+1)//2][j] = image[i][j]\n    return '\\n'.join([''.join(row) for row in extended_image])",
        "test": "assert solution(\"3 5\\n.*..*\\n*.*..\\n*****\\n*.*..\\n.*..*\") == \".*..*\\n*.*..\\n*****\\n*.*..\\n.*..*\\n.*..*\\n*.*..\\n.*..*\"",
        "num_ids": 1396
    },
    {
        "number": 4622,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    n, *sequence = stdin.split()\n    n = int(n)\n\n    if len(set(sequence)) == n:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"",
        "num_ids": 1825
    },
    {
        "number": 4623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def find_teams(n, weights):\n        weights.sort()\n        max_teams = 0\n        for i in range(n - 1):\n            if i > 0 and weights[i] == weights[i - 1]:\n                continue\n            left, right = i + 1, n - 1\n            while left < right:\n                if weights[i] + weights[left] + weights[right] == sum(weights):\n                    max_teams += right - left\n                    left += 1\n                    right -= 1\n                elif weights[i] + weights[left] + weights[right] < sum(weights):\n                    left += 1\n                else:\n                    right -= 1\n        return max_teams\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        weights = list(map(int, stdin.readline().split()))\n        max_teams = find_teams(n, weights)\n        print(max_teams)\n\ntest_cases = \"\"\"5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\"\"\"\n\nsolution(test_cases) ",
        "test": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\\n3\\n4\\n1\\n2\\n\"",
        "num_ids": 1878
    },
    {
        "number": 4624,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    result = []\n\n    for test_case in test_cases[1:]:\n        n, x = map(int, test_case.split())\n        floor = 1\n        apartments_per_floor = 2\n\n        while apartments_per_floor < n:\n            floor += 1\n            apartments_per_floor += x\n\n        result.append(str(floor))\n\n    return \"\\n\".join(result)\n\ninput_str = \"\"\"4\n7 3\n1 5\n22 5\n987 13\"\"\"\n\nprint(solution(input_str)) ",
        "test": "assert solution('4\\n7 3\\n1 5\\n22 5\\n987 13') == '3\\n1\\n5\\n77'",
        "num_ids": 1097
    },
    {
        "number": 4625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    outputs = []\n    for i in range(t):\n        stdin = stdin.split('\\n')[1:]\n        n, m = map(int, stdin[0].split())\n        s = stdin[1]\n        p = list(map(int, stdin[2].split()))\n        counts = [0] * 26\n        for char in s:\n            counts[ord(char) - ord('a')] += 1\n        for i in range(m):\n            for j in range(p[i] - 1, n):\n                counts[ord(s[j]) - ord('a')] -= 1\n        for j in range(n):\n            counts[ord(s[j]) - ord('a')] += 1\n        outputs.append(' '.join(map(str, counts)))\n    return '\\n'.join(outputs)\n\ninput_data = '''4 2\nabca\n1 3\n10 5\ncodeforces\n2 8 3 2 9\n26 10\nqwertyuioplkjhgfdsazxcvbnm\n20 10 1 2 3 5 10 5 9 4'''\n\nprint(solution(input_data)) ",
        "test": "assert solution(\"3\\n4 2\\nabca\\n1 3\\n10 5\\ncodeforces\\n2 8 3 2 9\\n26 10\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 0 0 0\\n2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"",
        "num_ids": 2452
    },
    {
        "number": 4626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.splitlines()[0])\n    result = []\n    for i in range(1, test_cases + 1):\n        a, b, c = map(int, stdin.splitlines()[i].split())\n        if a == b or a == c or b == c:\n            result.append(\"0\")\n        else:\n            result.append(str(min(abs(a - b), abs(a - c), abs(b - c))))\n    return \"\\n\".join(result)",
        "test": "assert solution(\"8\\n3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\\n\") == \"0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4\\n\"",
        "num_ids": 1913
    },
    {
        "number": 4627,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split(\"\\n\")\n    result = []\n    for case in range(1, int(cases.pop(0))+1):\n        n = int(cases.pop(0))\n        a = list(map(int, cases.pop(0).split()))\n        similar = False\n        for i in range(n):\n            for j in range(i+1, n):\n                if (a[i] % 2 == a[j] % 2) or (abs(a[i]-a[j]) == 1):\n                    similar = True\n                    break\n            if similar:\n                break\n        result.append(\"YES\" if similar else \"NO\")\n    return \"\\n\".join(result)",
        "test": "assert solution(\"1\\n3\\n1 2 3\") == \"YES\" ",
        "num_ids": 1749
    },
    {
        "number": 4628,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    roads = []\n    couriers = []\n    \n    for i in range(m):\n        x, y, w = map(int, stdin.split()[3*i+3:3*(i+1)+3])\n        roads.append((x, y, w))\n        \n    for i in range(k):\n        a, b = map(int, stdin.split()[3*m+2*i+3:3*m+2*i+5])\n        couriers.append((a, b))\n        \n    # Sort the roads by the order of the start point and the end point\n    roads.sort(key=lambda x: (x[0], x[1]))\n    \n    # Initialize the graph with the cost of the roads\n    graph = {(x, y): w for x, y, w in roads}\n    \n    # Floyd-Warshall algorithm to find the shortest path between each pair of vertices\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                graph[i, j] = min(graph[i, j], graph[i, k] + graph[k, j])\n    \n    # Find the minimum total courier routes cost\n    min_total_cost = float('inf')\n    for zero_road in range(2):\n        # Choose the road with cost zero if possible\n        if zero_road:\n            for x, y, w in roads:\n                if w == 0:\n                    graph[x, y] = 0\n                    graph[y, x] = 0\n                    break\n        # Calculate the total cost of courier routes\n        total_cost = sum(graph[a, b] for a, b in couriers)\n        min_total_cost = min(min_total_cost, total_cost)\n    \n    return str(min_total_cost)",
        "test": "assert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5') == '13\\n' ",
        "num_ids": 2820
    },
    {
        "number": 4629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    queries = [int(n) for n in stdin.splitlines()[1:]]\n\n    result = []\n    for n in queries:\n        m = n\n        while not is_good(m):\n            m += 1\n        result.append(str(m))\n\n    return \"\\n\".join(result)\n\ndef",
        "test": "assert solution('7\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000') == '1\\n3\\n9\\n13\\n27\\n6561\\n19683'",
        "num_ids": 1214
    },
    {
        "number": 4630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    queries = []\n    for i in range(q):\n        n = int(stdin.split('\\n')[2*i+1])\n        p = list(map(int, stdin.split('\\n')[2*i+2].split()))\n        queries.append((n, p))\n\n    for n, p in queries:\n        books = {i: i for i in range(1, n+1)}\n        days = [0] * n\n        for i in range(n):\n            if books[i] == i:\n                days[i] = 1\n            else:\n                for j in range(1, n+1):\n                    if books[j] == i:\n                        books[j], books[i] = books[i], books[j]\n                        days[i] = days[j] + 1\n                        break\n\n        print(\" \".join(map(str, days)))",
        "test": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1 \\n3 3 3 \\n2 3 3 2 1 3 \\n1 \\n2 2 2 2 \\n4 4 4 1 4\\n\"",
        "num_ids": 2008
    },
    {
        "number": 4631,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def min_dist(x, y, xs):\n        return min(abs(x - xi) for xi in xs)\n\n    def get_min_dist_sum(xs, ys):\n        return sum(min_dist(x, y, xs) for x, y in zip(xs, ys))\n\n    n, m = map(int, stdin.split()[:2])\n    xs = list(map(int, stdin.split()[2:]))\n    ys = [i for i in range(-2 * 10**9, 2 * 10**9 + 1)]\n\n    min_dist_sum = float('inf')\n    min_ys = None\n\n    for i in range(len(ys) - m + 1):\n        current_ys = ys[i:i+m]\n        dist_sum = get_min_dist_sum(xs, current_ys)\n        if dist_sum < min_dist_sum:\n            min_dist_sum = dist_sum\n            min_ys = current_ys\n\n    return f\"{min_dist_sum}\\n{' '.join(map(str, min_ys))}\"",
        "test": "assert solution(\"3 5\\n0 3 1\\n\") == \"7\\n5 -2 4 -1 2\\n\"",
        "num_ids": 1573
    },
    {
        "number": 4632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    test_case_count = int(test_cases[0])\n\n    for i in range(1, test_case_count + 1):\n        n = int(test_cases[i * 2 - 1])\n        packages = []\n\n        for j in range(n):\n            x, y = map(int, test_cases[i * 2 + j].split())\n            packages.append((x, y))\n\n        path = find_shortest_path(packages)\n        if path is None:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            print(path)\n\ndef",
        "test": "assert solution(\"1\\n4\\n4 3\") == \"YES\\nRRRRUUU\" ",
        "num_ids": 2617
    },
    {
        "number": 4633,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split('\\n')\n    t = int(stdin_list[0])\n    outputs = []\n\n    for i in range(1, t * 2 + 1, 2):\n        n, s = map(int, stdin_list[i].split(' '))\n        digits_sum = sum(int(digit) for digit in str(n))\n        moves = 0\n\n        while digits_sum > s:\n            n += 1\n            digits_sum = sum(int(digit) for digit in str(n))\n            moves += 1\n\n        outputs.append(moves)\n\n    return '\\n'.join(map(str, outputs))",
        "test": "assert solution(\"1\\n2 1\") == \"8\"",
        "num_ids": 1351
    },
    {
        "number": 4634,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_moves(a: List[int]) -> int:\n        n = len(a)\n        for i in range(n):\n            if a[i] == 0:\n                continue\n            j = i\n            while j < n and a[j] == 1:\n                j += 1\n            if j == n:\n                break\n            if j - i > 1:\n                return j - i - 1\n        return 0\n\n    t = int(stdin.readline())\n    result = []\n\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        result.append(find_min_moves(a))\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"\"\"5",
        "num_ids": 1854
    },
    {
        "number": 4635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    result = []\n\n    for i in range(1, t+1):\n        n, k = map(int, stdin.splitlines()[i].split())\n        s = ''\n\n        for j in range(k):\n            s += chr(ord('a') + j)\n\n        if n > k:\n            s += ''.join(chr(ord('a') + j) for j in range(k, n))\n\n        result.append(s)\n\n    return '\\n'.join(result)\n",
        "test": "assert solution(\"3\\n7 3\\n4 4\\n6 2\") == \"cbcacab\\nabcd\\nbaabab\"",
        "num_ids": 917
    },
    {
        "number": 4636,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    t = int(stdin.split('\\n')[0])\n    for i in range(1, t*2, 2):\n        n = int(stdin.split('\\n')[i])\n        a = list(map(int, stdin.split('\\n')[i+1].split()))\n        if len(a) != n:\n            raise ValueError(\"Invalid input\")\n        moves, a_total, b_total = play_game(n, a)\n        result.append(f\"{moves} {a_total} {b_total}\\n\")\n    return \"\".join(result)\n\ndef",
        "test": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\\n\" ",
        "num_ids": 2166
    },
    {
        "number": 4637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    result = []\n    for i in range(1, t + 1):\n        n, k = map(int, lines[i].split())\n        a = list(map(int, lines[i + 1].split()))\n        b = list(map(int, lines[i + 2].split()))\n        \n        if k == 0:\n            result.append(sum(a))\n        else:\n            a.sort()\n            b.sort()\n            result.append(sum(a))\n            \n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4\\n1 2 2 1\\n4 4 5 4\") == \"6\\n27\\n39\\n11\\n17\\n\"",
        "num_ids": 1716
    },
    {
        "number": 4638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    \n    def sum_until(arr, x, y):\n        if x > y:\n            x, y = y, x\n        return sum(arr[x:y+1])\n    \n    t = [0] * n\n    for i in range(1, n):\n        t[i] = min(sum_until(a, i, n-1) + c, sum_until(b, i, n-1))\n    \n    return \" \".join(map(str, t))",
        "test": "assert solution(\"10 1\\n3 2 3 1 3 3 1 4 1\\n1 2 3 4 4 1 2 1 3\") == \"0 2 4 7 8 11 13 14 16 17\\n\"",
        "num_ids": 1810
    },
    {
        "number": 4639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    t = int(stdin.readline())\n    results = []\n\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n\n        # Generate the list of strings\n        strings = []\n        for i in range(n - 2):\n            for j in range(n - i - 2):\n                strings.append('a' * (i + 1) + 'b' * (2 - j) + 'a' * (j + 1))\n\n        # Sort the list of strings\n        strings.sort()\n\n        # Print the k-th string\n        results.append(strings[k - 1])\n\n    return '\\n'.join(results)",
        "test": "assert solution(\"7\\n5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2\\n20 100\") == \"aaabb\\naabab\\nbaaba\\nbbaaa\\nabb\\nbab\\naaaaaaaaabaaaaaaaa\" ",
        "num_ids": 1863
    },
    {
        "number": 4640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    result = []\n    \n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        x = list(map(int, stdin.readline().split()))\n        y = list(map(int, stdin.readline().split()))\n        \n        platforms = []\n        points = []\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                if x[i] == x[j] or y[i] == y[j]:\n                    continue\n                \n                if x[i] < x[j] and y[i] < y[j]:\n                    a, b = x[i], x[j]\n                    c, d = y[i], y[j]\n                elif x[i] > x[j] and y[i] > y[j]:\n                    a, b = x[j], x[i]\n                    c, d = y[j], y[i]\n                else:\n                    continue\n                \n                if a - b >= k:\n                    platforms.append((c, d, a - k, b + k))\n        \n        for i in range(n):\n            for j in platforms:\n                if x[i] >= j[2] and x[i] <= j[3] and y[i] == j[0]:\n                    points.append(i)\n        \n        result.append(len(points))\n    \n    return \"\\n\".join(map(str, result))\n\n\ninput_data = \"\"\"7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\"\"\"\n\nprint(solution(input_data)) ",
        "test": "assert solution(input_data) == output_data",
        "num_ids": 2419
    },
    {
        "number": 4641,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    q, x = map(int, stdin.splitlines()[0].split())\n    queries = list(map(int, stdin.splitlines()[1:]))\n    a = []\n    mex = 0\n    result = []\n\n    for y in queries:\n        a.append(y)\n        a.sort()\n        mex = 0\n        while mex < len(a) and a[mex] == mex:\n            mex += 1\n        if mex == len(a):\n            mex = len(a)\n        result.append(mex)\n\n    return \"\\n\".join(map(str, result))\n",
        "test": "assert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"",
        "num_ids": 1165
    },
    {
        "number": 4642,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    test_cases = stdin.strip().split('\\n')\n\n    for case in test_cases:\n        n, x, y = map(int, case.strip().split())\n        a_1 = x - 1\n        a_n = y + 1\n        a_i = (y - x) // (n - 1)\n\n        array = [a_1 + i * a_i for i in range(n)]\n        result.append(' '.join(map(str, array)))\n\n    return '\\n'.join(result)\n\nt = int(input())\nstdin = '\\n'.join([input() for _ in range(t)])\nprint(solution(stdin)) ",
        "test": "assert solution(\"5\\n2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7\" ",
        "num_ids": 1735
    },
    {
        "number": 4643,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    n = input_list[0]\n    array = input_list[1:]\n    sorted_array = sorted(array)\n    return ' '.join(map(str, sorted_array))",
        "test": "assert solution(\"3 3 1 2\") == \"1 2 3\"",
        "num_ids": 722
    },
    {
        "number": 4644,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    outputs = []\n\n    for i in range(1, t * 2 + 1, 2):\n        n = int(stdin.splitlines()[i])\n        a = list(map(int, stdin.splitlines()[i + 1].split()))\n\n        # If the sum of elements is odd, return \"YES\"\n        if sum(a) % 2 != 0:\n            outputs.append(\"YES\")\n        else:\n            # If the sum of elements is even, iterate through the array and find the indices of two elements that can be swapped to obtain an odd sum\n            for j in range(n):\n                for k in range(j + 1, n):\n                    if (sum(a) - a[j] + a[k]) % 2 != 0 or (sum(a) - a[k] + a[j]) % 2 != 0:\n                        outputs.append(\"YES\")\n                        break\n                else:\n                    continue\n                break\n            else:\n                outputs.append(\"NO\")\n\n    return \"\\n\".join(outputs)\n\nstdin = \"5\\n2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"5\\n2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1\") == \"YES\\nNO\\nYES\\nNO\\nNO\" ",
        "num_ids": 1285
    },
    {
        "number": 4645,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    res = []\n\n    def permute(n: int, start: int) -> bool:\n        if start == n:\n            res.append(' '.join(map(str, range(1, n + 1))))\n            return True\n        for i in range(start, n + 1):\n            if len(res) > 0 and abs(res[-1][start - 1] - i) not in range(2, 5):\n                continue\n            p[start - 1] = i\n            permute(n, start + 1)\n            if len(res) > 0:\n                p[start - 1] = 0\n\n    for i in range(1, t + 1):\n        p = [0] * int(lines[i])\n        permute(int(lines[i]), 1)\n        if len(res) == 0:\n            res.append('-1')\n\n    return '\\n'.join(res)",
        "test": "assert solution(\"6\\n10\\n2\\n4\\n6\\n7\\n13\") == \"9 6 10 8 4 7 3 1 5 2\\n-1\\n3 1 4 2\\n5 3 6 2 4 1\\n5 1 3 6 2 4 7\\n13 9 7 11 8 4 1 3 5 2 6 10 12\" ",
        "num_ids": 1916
    },
    {
        "number": 4646,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    def swap(a: list, i: int, j: int) -> None:\n        a[i], a[j] = a[j], a[i]\n\n    def is_good(a: list) -> bool:\n        n = len(a)\n        for i in range(n):\n            if i % 2 != a[i] % 2:\n                return False\n        return True\n\n    def min_moves(a: list) -> int:\n        n = len(a)\n        if n % 2 == 1:\n            return -1\n        if is_good(a):\n            return 0\n        moves = 0\n        for i in range(n):\n            if not is_good(a):\n                if i % 2 != a[i] % 2:\n                    swap(a, i, i + 1)\n                    moves += 1\n            else:\n                break\n        return moves if is_good(a) else -1\n\n    tests = int(stdin.readline())\n    results = []\n\n    for _ in range(tests):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().strip().split()))\n        result = min_moves(a)\n        results.append(result)\n\n    return \"\\n\".join(map(str, results))\n",
        "test": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\") == \"2\\n1\\n-1\\n0\" ",
        "num_ids": 1676
    },
    {
        "number": 4647,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    colors = list(map(int, stdin.split(\"\\n\")[1].split()))\n    edges = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[2:n+1]]\n    \n    def dfs(node, parent):\n        for child in edges[node-1]:\n            if child != parent:\n                dfs(child, node)\n                colors[node-1] += colors[child-1]\n    \n    dfs(1, -1)\n    \n    result = []\n    for i in range(1, n+1):\n        white_count = colors[i-1]\n        black_count = n - white_count\n        max_diff = white_count - black_count\n        result.append(max_diff)\n    \n    return \" \".join(map(str, result))\n\nstdin = \"\"\"9\n0 1 1 1 0 0 0 0 1\n1 2\n1 3\n3 4\n3 5\n2 6\n4 7\n6 8\n5 9\"\"\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\") == \"0 -1 1 -1 \" ",
        "num_ids": 2080
    },
    {
        "number": 4648,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n\n    for _ in range(t):\n        n = int(input())\n        steps = 0\n\n        while n != 1:\n            if n % 6 == 0:\n                n //= 6\n                steps += 1\n            else:\n                n *= 2\n                steps += 1\n\n        if n == 1:\n            result.append(steps)\n        else:\n            result.append(-1)\n\n    return '\\n'.join(map(str, result))\n",
        "test": "assert solution(\"1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489\") == \"0\\n-1\\n2\\n-1\\n-1\\n12\\n36\"",
        "num_ids": 1108
    },
    {
        "number": 4649,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(s, t):\n        return any(s[i:i + len(t)] == t for i in range(len(s) - len(t) + 1))\n\n    q = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(q):\n        n, k = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n\n        if k == 1:\n            result.append(0)\n            continue\n\n        if k == n:\n            result.append(0)\n            continue\n\n        if k > n:\n            result.append(k - n)\n            continue\n\n        # Check if the substring is already a substring of the infinite string\n        if is_substring(\"RGBRGBRGB\" * 100, s[:k]):\n            result.append(0)\n        else:\n            # Find the smallest number of characters to change\n            min_changes = float('inf')\n            for i in range(len(s) - k + 1):\n                substring = s[i:i + k]\n                changes = 0\n                for j, c in enumerate(substring):\n                    if c != \"RGB\"[j % 3]:\n                        changes += 1\n                min_changes = min(min_changes, changes)\n            result.append(min_changes)\n\n    return \"\\n\".join(map(str, result))\n\ninput_str = \"\"\"3\n5 2\nBGGGG\n5 3\nRBRGR\n5 5\nBBBRR\"\"\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"5 2\\nBGGGG\\n5 3\\nRBRGR\\n5 5\\nBBBRR\") == \"1\\n0\\n3\" ",
        "num_ids": 1410
    },
    {
        "number": 4650,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_elements_divisible_by_3(arr: List[int]) -> int:\n        arr.sort()\n        n = len(arr)\n        count = 0\n        i = 0\n        while i < n:\n            if arr[i] % 3 == 0:\n                count += 1\n            i += 1\n        return count\n\n    queries = stdin.split(\"\\n\")\n    t = int(queries[0])\n    result = []\n    for i in range(1, t * 2 + 1, 2):\n        n = int(queries[i])\n        arr = list(map(int, queries[i + 1].split()))\n        max_count = find_max_elements_divisible_by_3(arr)\n        result.append(str(max_count))\n    return \"\\n\".join(result)",
        "test": "assert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"",
        "num_ids": 1551
    },
    {
        "number": 4651,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    q = int(lines[0])\n    result = []\n\n    for i in range(1, q + 1):\n        n = int(lines[i * 2 - 1])\n        perm = [int(x) for x in lines[i * 2].split()]\n        min_perm = min_permutation(perm)\n        result.append(min_perm)\n\n    return \"\\n\".join(map(str, result))\n\ndef",
        "test": "assert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 5 2 4 3\\n1 2 3 4\\n1\\n1 4 3 2\"",
        "num_ids": 1626
    },
    {
        "number": 4652,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    # split input into queries\n    queries = stdin.strip().split(\"\\n\")\n    result = []\n\n    # iterate over queries\n    for q in queries:\n        # split query into n and p\n        n, *p = map(int, q.split())\n\n        # check if p[1] is immediately after p[0] in clockwise order\n        if p[1] == (p[0] + 1) % n:\n            # check if p[2] is immediately after p[1] in clockwise order\n            if p[2] == (p[1] + 1) % n:\n                # check if p[3] is immediately after p[2] in clockwise order\n                if p[3] == (p[2] + 1) % n:\n                    # check if p[n-1] is immediately after p[n-2] in clockwise order\n                    if p[n-1] == (p[n-2] + 1) % n:\n                        result.append(\"YES\")\n                    else:\n                        result.append(\"NO\")\n                else:\n                    result.append(\"NO\")\n            else:\n                result.append(\"NO\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"1\\n1\") == \"YES\"",
        "num_ids": 1333
    },
    {
        "number": 4653,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split('\\n')[1:]\n    result = []\n\n    for case in cases:\n        n, k = map(int, case.split())\n        if k == 1:\n            result.append(str(n))\n        else:\n            result.append(str(n // k))\n\n    return '\\n'.join(result)\n\ndef",
        "test": "assert solution('5\\n5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015\\n'",
        "num_ids": 1195
    },
    {
        "number": 4654,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    t = int(lines[0])\n    result = []\n    for i in range(1, t+1):\n        n, k = map(int, lines[i].split())\n        a = [0] * k\n        for j in range(k):\n            if n - sum(a[:j]) >= 2:\n                a[j] = 2\n            elif n - sum(a[:j]) == 1:\n                a[j] = 1\n            else:\n                a[j] = 0\n        if all(x % 2 == 0 for x in a) or all(x % 2 == 1 for x in a):\n            result.append(f\"YES {' '.join(map(str, a))}\")\n        else:\n            result.append(\"NO\")\n    return \"\\n\".join(result)",
        "test": "assert solution(\"8\\n10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == \"YES\\n4 2 4\\nYES\\n55 5 5 35\\nNO\\nNO\\nYES\\n1 1 1 1 1 1 1 1\\nNO\\nYES\\n3 1 1\\nYES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120\\n\" ",
        "num_ids": 2248
    },
    {
        "number": 4655,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    result = []\n    \n    for _ in range(queries):\n        piles = list(map(int, stdin.split()[1:]))\n        piles.sort(reverse=True)\n        piles = [piles[0], piles[1], piles[2]]\n        max_candies = sum(piles) // 2\n        alice_candies = 0\n        bob_candies = 0\n        \n        while alice_candies < max_candies:\n            alice_candies += piles[2]\n            piles[2] = 0\n            bob_candies += piles[1]\n            piles[1] = 0\n        while bob_candies < max_candies:\n            bob_candies += piles[0]\n            piles[0] = 0\n            alice_candies += piles[1]\n            piles[1] = 0\n        result.append(max_candies)\n        \n    return '\\n'.join(map(str, result))\n",
        "test": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\\n\"",
        "num_ids": 1612
    },
    {
        "number": 4656,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    result = []\n\n    def is_beautiful(necklace: str, k: int) -> bool:\n        if len(necklace) == 1:\n            return True\n        for i in range(1, len(necklace)):\n            if necklace[i:] + necklace[:i] == necklace:\n                return True\n        return False\n\n    for _ in range(cases):\n        n, k = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n        max_length = 0\n\n        for i in range(1, n):\n            for j in range(i, n):\n                necklace = s[i:j+1]\n                if is_beautiful(necklace, k):\n                    max_length = max(max_length, len(necklace))\n\n        result.append(max_length)\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"6\\n6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\\n\") == \"6\\n3\\n5\\n4\\n15\\n10\\n\" ",
        "num_ids": 2044
    },
    {
        "number": 4657,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def count_odd_sum_segments(arr, k):\n        n = len(arr)\n        if k > n:\n            return False\n        if k == n:\n            return all(sum(arr[:i]) % 2 == 1 for i in range(1, n + 1))\n        if k == 1:\n            return sum(arr) % 2 == 1\n        return False\n\n    def print_division(arr, k):\n        n = len(arr)\n        if k > n:\n            return False\n        if k == n:\n            print(1, n)\n        elif k == 1:\n            print(1, n)\n        else:\n            current_sum = 0\n            for i in range(n):\n                current_sum += arr[i]\n                if current_sum % 2 == 1 and i + 1 >= k:\n                    print(1, i + 1)\n                    break\n            else:\n                return False\n        return True\n\n    q = int(stdin.readline())\n    for _ in range(q):\n        n, k = map(int, stdin.readline().split())\n        arr = list(map(int, stdin.readline().split()))\n        if count_odd_sum_segments(arr, k):\n            print(\"YES\")\n            print_division(arr, k)\n        else:\n            print(\"NO\")",
        "test": "assert solution(\"3\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"YES\\n1 3 5\\nNO\\nNO\"",
        "num_ids": 2082
    },
    {
        "number": 4658,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # Convert binary string to integer\n    num = int(stdin, 2)\n    \n    # Reverse the bits\n    reversed_num = 0\n    for i in range(32):\n        bit = (num >> i) & 1\n        reversed_num |= (bit << (31 - i))\n    \n    # Convert the result to binary string\n    reversed_bin_str = bin(reversed_num)[2:]\n    return reversed_bin_str.zfill(32)",
        "test": "assert solution('00000010100101000001111010011100') == '00111001011110000010100101000000'",
        "num_ids": 970
    },
    {
        "number": 4659,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    numRows = int(stdin)\n    result = [[1] * i for i in range(1, numRows + 1)]\n    for i in range(numRows):\n        for j in range(1, i):\n            result[i][j] = result[i - 1][j - 1] + result[i - 1][j]\n    return result",
        "test": "assert solution(1) == [[1]]",
        "num_ids": 792
    },
    {
        "number": 4660,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    lines = lines[1:]\n    email_list = []\n\n    for email in lines:\n        if is_valid_email(email):\n            email_list.append(email)\n\n    email_list.sort()\n\n    return str(email_list)\n\ndef",
        "test": "assert solution(\"2\\njane@example\\njohn@example.com\") == \"[]\"",
        "num_ids": 1382
    },
    {
        "number": 4661,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[-1] + fib[-2])\n    cubes = list(map(lambda x: x**3, fib))\n    return str(cubes)",
        "test": "assert solution(\"3\") == \"[0, 1, 1]\"",
        "num_ids": 934
    },
    {
        "number": 4662,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    import xml.etree.ElementTree as ET\n    lines = stdin.strip().split('\\n')\n    tree = ET.fromstringlist(lines[1:])\n    max_depth = 0\n\n    def dfs(node, depth):\n        nonlocal max_depth\n        max_depth = max(max_depth, depth)\n        for child in node:\n            dfs(child, depth + 1)\n\n    dfs(tree, 0)\n    return str(max_depth) ",
        "test": "assert solution(\"\"\"3",
        "num_ids": 1133
    },
    {
        "number": 4663,
        "max_answer_num": 17,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    lines = stdin.split(\"\\n\")\n    for line in lines:\n        if line.isdigit() and len(line) == 10 and line[0] in [\"7\", \"8\", \"9\"]:\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n    return \"\\n\".join(result)",
        "test": "assert solution(\"7891234567\") == \"YES\"",
        "num_ids": 907
    },
    {
        "number": 4664,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    m_count, m_str, n_count, n_str = stdin.strip().split('\\n')\n    m = set(map(int, m_str.split()))\n    n = set(map(int, n_str.split()))\n\n    # Compute symmetric difference\n    symmetric_diff = m.symmetric_difference(n)\n\n    # Sort and return\n    return '\\n'.join(str(x) for x in sorted(symmetric_diff))",
        "test": "assert solution(\"3\\n2 4 6\\n4\\n3 6 9\\n\") == \"2\\n3\\n4\\n9\"",
        "num_ids": 1015
    },
    {
        "number": 4665,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n_students = int(lines[0])\n    columns = lines[1].split()\n    column_indices = {columns[i]: i for i in range(len(columns))}\n\n    marks_sum = 0\n    for i in range(2, n_students + 2):\n        row = lines[i].split()\n        marks_sum += int(row[column_indices['MARKS']])\n\n    average_marks = round(marks_sum / n_students, 2)\n    return str(average_marks)",
        "test": "assert solution(\"3\\nNAME MARKS CLASS\\nJohn 70 A\\nKaren 85 B\\nDavid 90 A\") == \"81.67\"",
        "num_ids": 1775
    },
    {
        "number": 4666,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n % 2 != 0:\n        return \"Weird\"\n    elif 2 <= n <= 5:\n        return \"Not Weird\"\n    elif 6 <= n <= 20:\n        return \"Weird\"\n    else:\n        return \"Not Weird\"\n    \n",
        "test": "assert solution(\"1\") == \"Weird\"",
        "num_ids": 695
    },
    {
        "number": 4667,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    xml_doc = \"\".join(lines[1:n+1])\n    score = 0\n    stack = []\n    i = 0\n    while i < len(xml_doc):\n        if xml_doc[i] == \"<\":\n            if i+1 < len(xml_doc) and xml_doc[i+1] == \"/\":  # closing tag\n                j = xml_doc.find(\">\", i)\n                if len(stack) > 0:\n                    score += len(stack[-1])\n                stack.pop()\n                i = j+1\n            else:  # opening tag\n                j = xml_doc.find(\">\", i)\n                tag = xml_doc[i+1:j]\n                stack.append(tag)\n                i = j+1\n        else:\n            i += 1\n    if len(stack) > 0:\n        score += len(stack[-1])\n    return str(score)",
        "test": "assert solution(stdin=f\"3\\n<a x=\\\"1\\\" y=\\\"2\\\"/>\\n<b x=\\\"1\\\" y=\\\"2\\\" z=\\\"3\\\"/>\\n<c/>\") == \"2\"",
        "num_ids": 1454
    },
    {
        "number": 4668,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [list(map(float, line.split())) for line in stdin.split(\"\\n\") if line]\n    AB = np.array(B) - np.array(A)\n    BC = np.array(C) - np.array(B)\n    CD = np.array(D) - np.array(C)\n    X = np.cross(AB, BC)\n    Y = np.cross(BC, CD)\n    dot_product = np.dot(X, Y) / np.linalg.norm(X) / np.linalg.norm(Y)\n    radians = np.arccos(dot_product)\n    degrees = np.rad2deg(radians)\n    return f\"{degrees:.2f}\"",
        "test": "assert solution(\"-10 10 -10 10 0 0\") == \"90.00\"",
        "num_ids": 2038
    },
    {
        "number": 4669,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n = int(input_list[0])\n    words = input_list[1:]\n    \n    score = 0\n    for word in words:\n        vowel_count = 0\n        for letter in word:\n            if letter in ['a', 'e', 'i', 'o', 'u', 'y']:\n                vowel_count += 1\n        if vowel_count % 2 == 0:\n            score += 2\n        else:\n            score += 1\n    \n    return str(score)",
        "test": "assert solution(\"2\\napple banana\") == \"3\"",
        "num_ids": 907
    },
    {
        "number": 4670,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    roman_numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    prev_numeral = None\n    total_value = 0\n\n    for char in stdin:\n        if char in roman_numerals:\n            numeral_value = roman_numerals[char]\n            if prev_numeral is not None and numeral_value > prev_numeral:\n                total_value -= prev_numeral * 2\n            total_value += numeral_value\n            prev_numeral = numeral_value\n        else:\n            return 'False'\n\n    if total_value >= 1 and total_value <= 3999:\n        return 'True'\n    else:\n        return 'False'",
        "test": "assert solution(\"III\") == \"True\", \"Invalid Roman Numeral\"",
        "num_ids": 1219
    },
    {
        "number": 4671,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    mobile_numbers = stdin.split('\\n')\n    mobile_numbers = sorted(mobile_numbers)\n    for number in mobile_numbers:\n        number = number.strip()\n        if number.startswith('+91'):\n            number = number[3:]\n        elif number.startswith('91'):\n            number = number[2:]\n        elif number.startswith('0'):\n            number = number[1:]\n        if len(number) != 10:\n            continue\n        print(f\"+91 {number[:5]} {number[5:]}\")",
        "test": "assert solution(\"5\\n+91 9999 999999\\n91 9999999999\\n01234567890\\n09999 999999\\n9999999999\") == \"+91 1234567890\\n+91 9999 999999\\n+91 9999999999\\n+91 9999999999\\n+91 9999 999999\\n\" ",
        "num_ids": 2039
    },
    {
        "number": 4672,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    marks = {}\n    n = int(stdin.split('\\n')[0])\n    for i in range(1, n+1):\n        name, *marks_list = stdin.split('\\n')[i].split(' ')\n        marks[name] = [int(x) for x in marks_list]\n    query_name = stdin.split('\\n')[n+1]\n    query_marks = marks[query_name]\n    average = sum(query_marks)/len(query_marks)\n    return f\"{average:.2f}\"\n\ninput_str = \"\"\"3\nalpha 20 30 40\nbeta 30 50 70\ngamma 80 90 100\nbeta\"\"\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"2\\nalpha 20 30 40\\nbeta 30 50 70\\nbeta\") == \"50.00\"",
        "num_ids": 1232
    },
    {
        "number": 4673,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    people = [x.split() for x in stdin.split('\\n') if x.strip()]\n    people.sort(key=lambda x: (x[2], int(x[0])))\n    result = []\n    for person in people:\n        title = \"Mr.\" if person[3] == \"M\" else \"Ms.\"\n        result.append(f\"{title} {person[1]} {person[0]}\")\n    return \"\\n\".join(result)\n\ninput_data = \"\"\"5\n3 Mary Davids 23 F\n5 Henry Williams 22 M\n2 John Smith 22 M\n4 Sarah Lee 21 F\n1 David Lee 21 M\"\"\"\n\nprint(solution(input_data)) ",
        "test": "assert solution(\"5\\nMary 23 F\\nHenry 21 M\\nDavid 23 M\\nSusan 21 F\\nJohn 23 M\") == \"Ms. Mary George\\nMs. Susan Thomas\\nMr. Henry Davids\\nMr. David Davids\\nMr. John Davids\" ",
        "num_ids": 2050
    },
    {
        "number": 4674,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, n = map(int, stdin.split())\n    coordinates = [(i, j, k) for i in range(x+1) for j in range(y+1) for k in range(z+1) if i+j+k != n]\n    return str(coordinates).replace(\" \", \"\").replace(\"'\", \"\").replace(\"(\", \"[\").replace(\")\", \"]\")\n\nx = 1\ny = 1\nz = 2\nn = 3\nstdin = f\"{x}\\n{y}\\n{z}\\n{n}\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"1\\n1\\n2\\n3\") == \"[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,2]]\" ",
        "num_ids": 1935
    },
    {
        "number": 4675,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    c, d = complex(a, b), complex(a, b)\n    return f'{c+d}\\n{c-d}\\n{c*d}\\n{c/d}\\n{abs(c)}\\n{abs(d)}\\n'",
        "test": "assert solution(\"1.23 0\") == \"1.23+0.00i\"",
        "num_ids": 2330
    },
    {
        "number": 4676,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    odd_str, even_str = stdin.strip().split('\\n')\n    password = ''\n    \n    for i in range(len(odd_str)):\n        password += odd_str[i]\n        if i < len(even_str):\n            password += even_str[i]\n    \n    return password",
        "test": "assert solution(\"xyz\\nabc\\n\") == \"xaybzc\"",
        "num_ids": 610
    },
    {
        "number": 4677,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    editor_string = \"\"\n    for key in stdin:\n        if key == \"0\":\n            editor_string += \"0\"\n        elif key == \"1\":\n            editor_string += \"1\"\n        elif editor_string:\n            editor_string = editor_string[:-1]\n    return editor_string",
        "test": "assert solution('01B0') == '00'",
        "num_ids": 704
    },
    {
        "number": 4678,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    A = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    \n    # Sort the heights in ascending order\n    A.sort()\n    \n    # Initialize the stool height and total height\n    stool_height = 0\n    total_height = 0\n    \n    # Iterate through the sorted heights\n    for height in A:\n        # If the current height is greater than the stool height, update the stool height\n        if height > stool_height:\n            stool_height = height\n        # Add the stool height to the total height\n        total_height += stool_height\n    \n    return str(total_height)",
        "test": "assert solution('1\\n1') == '1'",
        "num_ids": 925
    },
    {
        "number": 4679,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    S_A, S_B, S_C = stdin.split('\\n')\n\n    A_deck = [letter for letter in S_A]\n    B_deck = [letter for letter in S_B]\n    C_deck = [letter for letter in S_C]\n\n    def get_next_player(card: str) -> str:\n        if card == 'a':\n            return 'A'\n        elif card == 'b':\n            return 'B'\n        else:\n            return 'C'\n\n    def play_game(deck_A: list, deck_B: list, deck_C: list) -> str:\n        while True:\n            if deck_A:\n                card = deck_A.pop(0)\n                next_player = get_next_player(card)\n                if next_player == 'A':\n                    continue\n                elif next_player == 'B':\n                    return play_game(deck_B, deck_A, deck_C)\n                else:\n                    return play_game(deck_C, deck_B, deck_A)\n            elif deck_B:\n                card = deck_B.pop(0)\n                next_player = get_next_player(card)\n                if next_player == 'B':\n                    continue\n                elif next_player == 'A':\n                    return play_game(deck_A, deck_B, deck_C)\n                else:\n                    return play_game(deck_C, deck_A, deck_B)\n            elif deck_C:\n                card = deck_C.pop(0)\n                next_player = get_next_player(card)\n                if next_player == 'C':\n                    continue\n                elif next_player == 'B':\n                    return play_game(deck_B, deck_C, deck_A)\n                else:\n                    return play_game(deck_A, deck_C, deck_B)\n            else:\n                return 'A'\n\n    winner = play_game(A_deck, B_deck, C_deck)\n    return winner",
        "test": "assert solution(\"aca\\naccc\\nca\") == \"A\"",
        "num_ids": 2061
    },
    {
        "number": 4680,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c != 17:\n        return \"NO\"\n    return \"YES\"",
        "test": "assert solution(\"6 6 6\") == \"NO\"",
        "num_ids": 581
    },
    {
        "number": 4681,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N == 0:\n        return \"2\"\n    elif N == 1:\n        return \"1\"\n    else:\n        L_i_minus_2 = 2\n        L_i_minus_1 = 1\n\n        for i in range(2, N + 1):\n            L_i = L_i_minus_1 + L_i_minus_2\n            L_i_minus_2 = L_i_minus_1\n            L_i_minus_1 = L_i\n\n        return str(L_i)",
        "test": "assert solution(\"5\") == \"11\"",
        "num_ids": 764
    },
    {
        "number": 4682,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    area = (a + b) * h // 2\n    return str(area)",
        "test": "assert solution(\"3\\n4\\n2\") == \"7\" ",
        "num_ids": 587
    },
    {
        "number": 4683,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = stdin.split()\n    n = int(n)\n    a = [int(x) for x in a]\n\n    MOD = 10**9 + 7\n    total = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            total = (total + a[i] * a[j]) % MOD\n\n    return str(total)",
        "test": "assert solution(\"3\\n1 2 3\") == \"11\"",
        "num_ids": 1020
    },
    {
        "number": 4684,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    num = r * 100 + g * 10 + b\n    return \"YES\" if num % 4 == 0 else \"NO\"",
        "test": "assert solution(\"4 3 2\") == \"YES\"",
        "num_ids": 582
    },
    {
        "number": 4685,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    \n    def find_largest_sum(A, B, C, K) -> int:\n        sums = [A + B + C, A * 2 + B + C, A + B * 2 + C, A + B + C * 2]\n        return max(sums)\n    \n    largest_sum = find_largest_sum(A, B, C, K)\n    \n    return str(largest_sum)",
        "test": "assert solution(\"1 1 1\\n2\") == \"4\"",
        "num_ids": 1087
    },
    {
        "number": 4686,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    freq_dict = {}\n    for letter in stdin:\n        if letter not in freq_dict:\n            freq_dict[letter] = 1\n        else:\n            freq_dict[letter] += 1\n\n    for key, value in freq_dict.items():\n        if value % 2 != 0:\n            return \"No\"\n\n    return \"Yes\"\n",
        "test": "assert solution(\"abaccaba\") == \"Yes\"",
        "num_ids": 856
    },
    {
        "number": 4687,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # split input by lines\n    lines = stdin.strip().split('\\n')\n    n, k = map(int, lines[0].split())\n    operations = []\n    \n    # parse operations\n    for i in range(1, n+1):\n        a, b = map(int, lines[i].split())\n        operations.extend([a] * b)\n    \n    # sort the array in ascending order\n    operations.sort()\n    \n    # return the k-th smallest element\n    return str(operations[k-1])",
        "test": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == \"3\"",
        "num_ids": 1375
    },
    {
        "number": 4688,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N == 1:\n        return str(K)\n    elif N == 2:\n        return str(K * (K - 1))\n    else:\n        return str(K * (K - 1) ** (N - 2))",
        "test": "assert solution(\"2 2\") == \"2\"",
        "num_ids": 916
    },
    {
        "number": 4689,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    K, N = map(int, stdin.split()[0:2])\n    A = list(map(int, stdin.split()[2:]))\n\n    def min_distance(A: list, K: int) -> int:\n        def min_distance_helper(A: list, K: int, i: int, j: int, memo: dict) -> int:\n            if i == j:\n                return 0\n\n            if (i, j) in memo:\n                return memo[(i, j)]\n\n            min_dist = float('inf')\n            for k in range(i, j):\n                dist = A[k] + min_distance_helper(A, K, i, k, memo) + min_distance_helper(A, K, k + 1, j, memo)\n                min_dist = min(min_dist, dist)\n\n            memo[(i, j)] = min_dist\n            return memo[(i, j)]\n\n        return min_distance_helper(A, K, 0, N, {})\n\n    return str(min_distance(A, K))",
        "test": "assert solution(\"10 1\\n5\") == \"5\" ",
        "num_ids": 1337
    },
    {
        "number": 4690,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    area1 = A * B\n    area2 = C * D\n\n    if area1 > area2:\n        return str(area1)\n    elif area1 < area2:\n        return str(area2)\n    else:\n        return str(area1)",
        "test": "assert solution(\"3 5 2 7\") == \"15\"",
        "num_ids": 814
    },
    {
        "number": 4691,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    # Get number of test cases from input\n    num_test_cases = int(stdin.split('\\n')[0])\n\n    # Initialize counters for each verdict\n    ac_count = 0\n    wa_count = 0\n    tle_count = 0\n    re_count = 0\n\n    # Loop through each verdict in input\n    for verdict in stdin.split('\\n')[1:]:\n        if verdict == \"AC\":\n            ac_count += 1\n        elif verdict == \"WA\":\n            wa_count += 1\n        elif verdict == \"TLE\":\n            tle_count += 1\n        elif verdict == \"RE\":\n            re_count += 1\n\n    # Format output string\n    output = f\"AC x {ac_count}\\nWA x {wa_count}\\nTLE x {tle_count}\\nRE x {re_count}\"\n\n    return output",
        "test": "assert solution(\"6\\nAC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"",
        "num_ids": 1658
    },
    {
        "number": 4692,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    # convert input to integer\n    m = int(stdin)\n\n    # calculate hours until new year\n    hours_until_new_year = 24 - m\n\n    # calculate number of days until new year\n    days_until_new_year = hours_until_new_year // 24\n\n    # calculate hours until new year on the last day\n    hours_until_new_year %= 24\n\n    # calculate total hours until new year\n    total_hours_until_new_year = (days_until_new_year * 24) + hours_until_new_year\n\n    # return result\n    return str(total_hours_until_new_year)",
        "test": "assert solution(\"1\") == \"23\"",
        "num_ids": 1040
    },
    {
        "number": 4693,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = A + B\n    if result >= 10:\n        return \"error\"\n    else:\n        return str(result)",
        "test": "assert solution(\"6 3\") == \"9\"",
        "num_ids": 494
    },
    {
        "number": 4694,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    import heapq\n\n    N, *coordinates = stdin.split()\n    N = int(N)\n\n    coordinates = [int(x) for x in coordinates]\n\n    max_coordinate = max(coordinates)\n    min_coordinate = min(coordinates)\n    distance = max_coordinate - min_coordinate\n\n    if distance < N:\n        return str(distance)\n\n    coordinates = [(x, i) for i, x in enumerate(coordinates)]\n    coordinates.sort(key=lambda x: x[0])\n\n    heap = []\n    for i in range(N):\n        x = coordinates[i]\n        if len(heap) < 2 or abs(heap[0][0] - x[0]) <= abs(heap[1][0] - x[0]):\n            heapq.heappush(heap, x)\n        else:\n            heapq.heappushpop(heap, x)\n\n    while len(heap) > 1:\n        x1, i1 = heapq.heappop(heap)\n        x2, i2 = heapq.heappop(heap)\n\n        if i2 == i1 + 1 and abs(x2 - x1) == 1:\n            return str(abs(coordinates[i1][0] - coordinates[i2][0]))\n\n        return str(max_coordinate - min_coordinate)\n\n    return str(max_coordinate - min_coordinate)",
        "test": "assert solution(\"4\\n2 3 7 9\") == \"7\"",
        "num_ids": 1172
    },
    {
        "number": 4695,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    \n    if (x in [1, 2, 3, 4, 5] and y in [1, 2, 3, 4, 5]) or (x in [6, 7, 8, 9, 10] and y in [6, 7, 8, 9, 10]) or (x in [11, 12] and y in [11, 12]):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"4 8\") == \"No\"",
        "num_ids": 1081
    },
    {
        "number": 4696,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    product = a * b\n    if product % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "test": "assert solution(\"3 4\") == \"Even\"",
        "num_ids": 545
    },
    {
        "number": 4697,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    Scc_groups = 0\n    while M >= 2:\n        Scc_groups += 1\n        M -= 2\n    while N > 0 and M >= 2:\n        Scc_groups += 1\n        N -= 1\n        M -= 2\n    return str(Scc_groups) ",
        "test": "assert solution('2 8') == '4'",
        "num_ids": 750
    },
    {
        "number": 4698,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N, T, M, drinks = parse_input(stdin)\n    result = []\n    \n    for i in range(1, M + 1):\n        new_T = [T[j] if j != drinks[i - 1][0] else drinks[i - 1][1] for j in range(N)]\n        result.append(sum(new_T))\n    \n    return '\\n'.join(map(str, result))\n\ndef",
        "test": "assert solution(\"5\\n10 20 30 40 50\\n3\\n1 10\\n2 20\\n3 30\") == \"10\\n30\\n60\\n\" ",
        "num_ids": 1282
    },
    {
        "number": 4699,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, K, *D = map(int, stdin.split())\n    D = set(D)\n    i = 0\n    while i <= N:\n        i_str = str(i)\n        valid = True\n        for digit in i_str:\n            if int(digit) in D:\n                valid = False\n                break\n        if valid:\n            return i\n        i += 1",
        "test": "assert solution(\"200 2\\n1 2 3\\n\") == \"200\"",
        "num_ids": 1096
    },
    {
        "number": 4700,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n, m = int(input_list[0]), int(input_list[1])\n    hill = [int(h) for h in input_list[2:2 + n]]\n    roads = [tuple(map(int, input_list[2 + n + i * 2:2 + n + i * 2 + 2])) for i in range(m)]\n\n    good_observatories = set()\n\n    for obs in range(1, n + 1):\n        elevation = hill[obs - 1]\n        good = True\n        for road in roads:\n            if obs in road and elevation <= hill[road.index(obs) - 1]:\n                good = False\n                break\n        if good:\n            good_observatories.add(obs)\n\n    return str(len(good_observatories))",
        "test": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"",
        "num_ids": 1633
    },
    {
        "number": 4701,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    value = 1\n    for i in range(n):\n        if i % 2 == 0:\n            value *= 2\n        else:\n            value += k\n    return str(value)",
        "test": "assert solution(\"1\\n1\") == \"2\"",
        "num_ids": 772
    },
    {
        "number": 4702,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return str(x ^ 1)  # XOR operator with 1",
        "test": "assert solution(\"0\") == \"1\"",
        "num_ids": 401
    },
    {
        "number": 4703,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    n = len(s)\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        dp[i] = int(s[i-1]) * dp[i-1]\n        if i-2 >= 0:\n            dp[i] += int(s[i-2]+s[i-1]) * dp[i-2]\n    return str(dp[n])",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 1193
    },
    {
        "number": 4704,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, cards = stdin.split(\"\\n\")\n    N = int(N)\n    cards = list(map(int, cards.split()))\n\n    if N % 2 == 0:\n        snuke_cards = cards[:N // 2]\n        raccoon_cards = cards[N // 2:]\n    else:\n        snuke_cards = cards[:N // 2 + 1]\n        raccoon_cards = cards[N // 2 + 1:]\n\n    snuke_sum = sum(snuke_cards)\n    raccoon_sum = sum(raccoon_cards)\n\n    return str(abs(snuke_sum - raccoon_sum))",
        "test": "assert solution(\"10\\n0 0 0 0 0 0 0 0 0 0\") == \"0\"",
        "num_ids": 992
    },
    {
        "number": 4705,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    meals_count = N // 15\n    total_meals = meals_count * 15\n    total_price = total_meals * 800\n    total_paid_back = meals_count * 200\n    result = total_price - total_paid_back\n    return str(result)\n\ndef",
        "test": "assert solution(\"20\") == \"15800\" ",
        "num_ids": 448
    },
    {
        "number": 4706,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes the input string from Standard Input, splits it into a list of strings,\n    creates a list of lists, and then prints the concatenated string on the diagonal.\n    \"\"\"\n    input_list = stdin.split()\n    matrix = [list(row) for row in input_list]\n\n    diagonal_string = \"\"\n    for i in range(3):\n        diagonal_string += matrix[i][i]\n\n    return diagonal_string",
        "test": "assert solution(\"ant\\nobe\\nrec\") == \"abc\"",
        "num_ids": 686
    },
    {
        "number": 4707,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    s_1, s_2, s_3 = stdin\n    count = 0\n\n    if s_1 == '1':\n        count += 1\n    if s_2 == '1':\n        count += 1\n    if s_3 == '1':\n        count += 1\n\n    return str(count)",
        "test": "assert solution(\"101\") == \"2\"  # marbles on square 1 and 3",
        "num_ids": 528
    },
    {
        "number": 4708,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, K, X, Y = map(int, stdin.split())\n    \n    if K >= N:\n        return str(X * N)\n    else:\n        return str(X * K + (N - K) * Y)",
        "test": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"",
        "num_ids": 1095
    },
    {
        "number": 4709,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, op, B = stdin.split()\n    if op == \"+\":\n        result = int(A) + int(B)\n    elif op == \"-\":\n        result = int(A) - int(B)\n    else:\n        raise ValueError(\"Invalid operator\")\n    return str(result)",
        "test": "assert solution(\"1 + 2\") == \"3\"",
        "num_ids": 775
    },
    {
        "number": 4710,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 1200:\n        return \"ABC\"\n    else:\n        return \"ARC\"",
        "test": "assert solution(\"1000\") == \"ABC\"",
        "num_ids": 496
    },
    {
        "number": 4711,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    total_price = min(a + b, a + c, b + c)\n    return str(total_price)",
        "test": "assert solution(\"700 600 780\") == \"1300\"",
        "num_ids": 483
    },
    {
        "number": 4712,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    H, W = map(int, lines[0].split())\n    pixels = [line.strip() for line in lines[1:H+1]]\n    \n    # Add box around the pixels\n    pixels = ['#' * (W+2)] + ['#' + row + '#' for row in pixels] + ['#' * (W+2)]\n    \n    # Output the result\n    return '\\n'.join(pixels)",
        "test": "assert solution(\"3 1\\na\\nb\\nc\") == \"###\\n#a#\\n#b#\\n#c#\\n###\"",
        "num_ids": 1620
    },
    {
        "number": 4713,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split('\\n')\n    N = int(N)\n    x = 0\n    max_x = 0\n\n    for char in S:\n        if char == 'I':\n            x += 1\n        else:\n            x -= 1\n        max_x = max(max_x, x)\n\n    return str(max_x)",
        "test": "assert solution(\"2\\nDD\") == \"0\"",
        "num_ids": 794
    },
    {
        "number": 4714,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    count = 0\n    for i in range(A, B + 1):\n        if str(i) == str(i)[::-1]:\n            count += 1\n\n    return str(count)",
        "test": "assert solution('11009 11332') == '4'",
        "num_ids": 677
    },
    {
        "number": 4715,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    colors = set([a, b, c])\n    return f\"{len(colors)}\"",
        "test": "assert solution(\"3 1 4\") == \"3\"",
        "num_ids": 522
    },
    {
        "number": 4716,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    sticks = list(map(int, stdin.split()[2:]))\n    sticks.sort(reverse=True)\n    \n    toy_length = 0\n    for i in range(K):\n        toy_length += sticks[i]\n    \n    return str(toy_length)\n\nstdin = \"5 3\\n1 2 3 4 5\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\"",
        "num_ids": 1021
    },
    {
        "number": 4717,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = list(map(int, stdin.split()))\n    distance_a = abs(x - a)\n    distance_b = abs(x - b)\n    if distance_a < distance_b:\n        return \"A\"\n    else:\n        return \"B\"",
        "test": "assert solution(\"5 2 7\") == \"B\"",
        "num_ids": 630
    },
    {
        "number": 4718,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    year, month, day = stdin.split(\"/\")\n    new_year = \"2018\"\n    new_date = f\"{new_year}/{month}/{day}\"\n    return new_date",
        "test": "assert solution(\"2017/01/07\") == \"2018/01/07\" ",
        "num_ids": 926
    },
    {
        "number": 4719,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    strings = lines[1:n+1]\n    \n    def is_subsequence(s, t):\n        i = 0\n        for c in t:\n            if i < len(s) and s[i] == c:\n                i += 1\n        return i == len(s)\n    \n    def longest_subsequences(s: str, t: str) -> List[str]:\n        subseqs = []\n        for i in range(len(s) - len(t) + 1):\n            if is_subsequence(t, s[i:i+len(t)]):\n                subseqs.append(s[i:i+len(t)])\n        return subseqs\n    \n    longest_subs = [longest_subsequences(s, strings[0]) for s in strings]\n    \n    def find_longest_common_subsequence(s1: str, s2: str) -> str:\n        m, n = len(s1), len(s2)\n        dp = [[0] * (n+1) for _ in range(m+1)]\n        for i in range(m-1, -1, -1):\n            for j in range(n-1, -1, -1):\n                if s1[i] == s2[j]:\n                    dp[i][j] = dp[i+1][j+1] + 1\n                else:\n                    dp[i][j] = max(dp[i+1][j], dp[i][j+1])\n        i, j = 0, 0\n        lcs = \"\"\n        while i < m and j < n:\n            if s1[i] == s2[j]:\n                lcs = s1[i] + lcs\n                i += 1\n                j += 1\n            elif dp[i+1][j] > dp[i][j+1]:\n                i += 1\n            else:\n                j += 1\n        return lcs\n    \n    longest_common_subseq = [find_longest_common_subsequence(strings[0], s) for s in strings[1:]]\n    \n    max_len = max(len(s) for s in strings)\n    min_lcs = \"\"\n    for s in longest_common_subseq:\n        if len(s) == max_len and (min_lcs == \"\" or s < min_lcs):\n            min_lcs = s\n    \n    return min_lcs",
        "test": "assert solution(\"2\\naba\\naba\") == \"aba\"",
        "num_ids": 2236
    },
    {
        "number": 4720,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    seats = [False] * 100001\n    \n    for i in range(n):\n        l, r = map(int, stdin.split()[2*i+1:2*i+3])\n        for j in range(l, r+1):\n            seats[j] = True\n    \n    return str(sum(seats))",
        "test": "assert solution(\"1\\n24 30\") == \"7\"",
        "num_ids": 1431
    },
    {
        "number": 4721,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    num_blocks = (n-1) * (m-1)\n    return str(num_blocks)",
        "test": "assert solution('3 4') == '6'",
        "num_ids": 545
    },
    {
        "number": 4722,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return \"Possible\"\n    elif a + b == 0:\n        return \"Impossible\"\n    else:\n        if (a + b) % 3 == 0:\n            return \"Possible\"\n        else:\n            return \"Impossible\"",
        "test": "assert solution(\"100 50\") == \"Possible\"",
        "num_ids": 711
    },
    {
        "number": 4723,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    s, t = stdin.split()\n    t = t.replace('?', '')\n\n    # find all possible strings that satisfy Condition 1\n    possible_strings = []\n    for i in range(len(s) - len(t) + 1):\n        if s[i:i + len(t)] == t:\n            possible_strings.append(s[:i] + t + s[i + len(t):])\n\n    # check if there are any possible strings\n    if not possible_strings:\n        return \"UNRESTORABLE\"\n\n    # sort the possible strings lexicographically\n    possible_strings.sort()\n\n    # return the first string (which is the lexicographically smallest)\n    return possible_strings[0]",
        "test": "assert solution(\"abc\\ndef\") == \"UNRESTORABLE\"",
        "num_ids": 1024
    },
    {
        "number": 4724,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    R, G = map(int, stdin.split())\n    return str(G - R + R)",
        "test": "assert solution(\"0\\n4500\") == \"4500\"",
        "num_ids": 497
    },
    {
        "number": 4725,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(set(stdin))\n    count = len(stdin)\n    if count <= 2:\n        return 0\n    else:\n        return count - 2\n    \n",
        "test": "assert solution(\"aaaaaa\") == 0",
        "num_ids": 974
    },
    {
        "number": 4726,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    m, n, t = map(int, stdin.split())\n    if t == 1:\n        return \"AC\" if n <= 20 else \"TLE\"\n    elif t == 2:\n        return \"AC\" if n <= 15 else \"TLE\"\n    elif t == 3:\n        return \"AC\" if n <= 50 else \"TLE\"\n    elif t == 4:\n        return \"AC\" if n <= 20 else \"TLE\"\n    elif t == 5:\n        return \"AC\" if n <= 10000 else \"TLE\"\n    elif t == 6:\n        return \"AC\" if n <= 20000 else \"TLE\"\n    elif t == 7:\n        return \"AC\" if n <= 1000000 else \"TLE\"",
        "test": "assert solution(\"100000000 500 3\") == \"TLE\"",
        "num_ids": 1534
    },
    {
        "number": 4727,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    def merge(row: List[int]) -> List[int]:\n        result = []\n        current = 0\n        for num in row:\n            if num != 0:\n                if current == 0:\n                    current = num\n                elif num == current:\n                    current *= 2\n                    result.append(0)\n                else:\n                    result.append(current)\n                    current = num\n        if current != 0:\n            result.append(current)\n        while len(result) < 4:\n            result.append(0)\n        return result\n\n    def move_row(row: List[int], direction: int) -> List[int]:\n        if direction == 0:  # left\n            return merge([row[2], row[3], row[0], row[1]])\n        elif direction == 1:  # up\n            return merge([row[1], row[0], row[3], row[2]])\n        elif direction == 2:  # right\n            return merge([row[1], row[0], row[3], row[2]])\n        else:  # down\n            return merge([row[1], row[0], row[3], row[2]])\n\n    stdin_list = stdin.strip().split(\"\\n\")\n    grid = []\n    for i in range(4):\n        row = list(map(int, stdin_list[i].strip().split(\" \")))\n        grid.append(row)\n\n    direction = int(stdin_list[-1].strip())\n    new_grid = []\n    for row in grid:\n        new_row = move_row(row, direction)\n        new_grid.append(new_row)\n\n    return \"\\n\".join([\" \".join(map(str, row)) for row in new_grid])",
        "test": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\\n\") == \"2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n1024 1024 64 4\\n\"",
        "num_ids": 5277
    },
    {
        "number": 4728,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    def parse_molecule(molecule: str) -> dict:\n        parsed = {}\n        atom_index = 0\n        while atom_index < len(molecule):\n            atom = molecule[atom_index]\n            count = 1\n            if atom_index + 1 < len(molecule) and molecule[atom_index + 1].isdigit():\n                count = int(molecule[atom_index + 1])\n                atom_index += 1\n            if atom in parsed:\n                parsed[atom] += count\n            else:\n                parsed[atom] = count\n            atom_index += 1\n        return parsed\n\n    def calculate_output(stdin: str) -> int:\n        input_molecule, input_count, output_molecule = stdin.split()\n        input_count = int(input_count)\n\n        input_parsed = parse_molecule(input_molecule)\n        output_parsed = parse_molecule(output_molecule)\n\n        output_count = 0\n        for atom, count in output_parsed.items():\n            if atom in input_parsed:\n                output_count += min(input_parsed[atom], count)\n\n        return output_count\n\n    return str(calculate_output(stdin))",
        "test": "assert solution(\"H 2\\nO\") == \"0\"",
        "num_ids": 2383
    },
    {
        "number": 4729,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    password, message = stdin.split()\n    password_chars = set(password)\n    password_len = len(password)\n    \n    for i in range(password_len):\n        if password[i] not in password_chars:\n            return \"FAIL\"\n        \n        if password[i] not in message:\n            return \"FAIL\"\n        \n        start_index = message.index(password[i])\n        message = message[start_index+1:]\n        \n        for j in range(i+1, password_len):\n            if password[j] not in message:\n                return \"FAIL\"\n            \n            start_index = message.index(password[j])\n            message = message[start_index+1:]\n            \n    return \"PASS\"",
        "test": "assert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"",
        "num_ids": 961
    },
    {
        "number": 4730,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    L = stdin.strip()\n    stack = []\n    for i, c in enumerate(L):\n        if c in ['(', '[', '{']:\n            stack.append((c, i))\n        elif c in [')', ']', '}']:\n            if not stack:\n                return f\"{c} {i}\"\n            if c == ')' and stack[-1][0] == '(':\n                stack.pop()\n            elif c == ']' and stack[-1][0] == '[':\n                stack.pop()\n            elif c == '}' and stack[-1][0] == '{':\n                stack.pop()\n            else:\n                return f\"{c} {i}\"\n    if stack:\n        return \"ok so far\"\n    else:\n        return \"ok so far\"",
        "test": "assert solution(\"27\\n[ { [[()]] (({})) } ] () {}\") == \"ok so far\" ",
        "num_ids": 1332
    },
    {
        "number": 4731,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    words = [word.strip() for word in stdin.split('\\n')[1:]]\n    last_letter = words[0][-1]\n\n    for i in range(1, len(words)):\n        if words[i][0] != last_letter:\n            return f\"Player {i % 2 + 1} lost\"\n        last_letter = words[i][-1]\n\n    return \"Fair Game\"",
        "test": "assert solution(\"2\\napple\\nneat\") == \"Player 2 lost\" ",
        "num_ids": 1095
    },
    {
        "number": 4732,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    A, operation, B = stdin.splitlines()\n    A, B = int(A), int(B)\n    if operation == '+':\n        result = A + B\n    elif operation == '*':\n        result = A * B\n    return str(result)\n\ninput_str = \"\"\"1000\n*\n100\"\"\"\nprint(solution(input_str))\n\ninput_str = \"\"\"10000\n+\n10\"\"\"\nprint(solution(input_str))\n\ninput_str = \"\"\"10\n+\n1000\"\"\"\nprint(solution(input_str)) ",
        "test": "assert solution('1000\\n*\\n100') == '100000'",
        "num_ids": 1837
    },
    {
        "number": 4733,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, shuffle_type = stdin.split()\n    n = int(n)\n\n    if shuffle_type == \"out\":\n        num_shuffles = 0\n        while n != 1:\n            n = n // 2 + n % 2\n            num_shuffles += 1\n        return f\"{num_shuffles}\"\n    else:\n        num_shuffles = 0\n        while n != 1:\n            n = n // 2 + n % 2\n            num_shuffles += 1\n        return f\"{num_shuffles - 1}\"",
        "test": "assert solution(\"8 out\") == \"3\"",
        "num_ids": 1115
    },
    {
        "number": 4734,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    Y, P = stdin.split()\n\n    if Y[-1] == 'e':\n        return Y + 'x' + P\n    elif Y[-1] in ['a', 'i', 'o', 'u']:\n        return Y[:-1] + 'ex' + P\n    else:\n        return Y + 'ex' + P",
        "test": "assert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"",
        "num_ids": 713
    },
    {
        "number": 4735,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    if (year - 2018) % 26 == 0:\n        return \"yes\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"2019\") == \"no\"",
        "num_ids": 534
    },
    {
        "number": 4736,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    counts, K = stdin.split('\\n')\n    counts = [int(count) for count in counts.split()]\n    K = int(K)\n\n    if K > 10 or K < 1:\n        return \"Invalid input\"\n\n    total_count = sum(counts)\n    if total_count > 1000 or total_count < 1:\n        return \"Invalid input\"\n\n    counts.sort()\n    counts.reverse()\n\n    result = 0\n    for i in range(K):\n        result += counts[i] * factorial(total_count - i - 1)\n\n    return str(result)\n\n\ndef",
        "test": "assert solution(\"10 10 10 20 0 10 10 10 10 10\\n4\") == \"1820000\\n\" ",
        "num_ids": 1319
    },
    {
        "number": 4737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, p = map(int, stdin.split()[:2])\n    times = list(map(int, stdin.split()[2:]))\n    \n    # sort problems by ascending time estimation\n    sorted_times = sorted(zip(times, range(N)))\n    \n    # initialize variables\n    num_AC = 0\n    penalty_time = 0\n    used_problems = set()\n    \n    # iterate through sorted problems\n    for time, i in sorted_times:\n        if time > 300:\n            break\n        if i not in used_problems:\n            num_AC += 1\n            used_problems.add(i)\n            if num_AC == N:\n                break\n    \n    # compute penalty time\n    penalty_time = sum(times[:p]) + sum(times[p+1:])\n    \n    return f\"{num_AC} {penalty_time}\"",
        "test": "assert solution(\"7 2\\n30 270 995 996 997 998 999\\n\") == \"0 0\\n\"",
        "num_ids": 1899
    },
    {
        "number": 4738,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    for k in range(1, n + 1):\n        if n % k != 0:\n            continue\n\n        if all(stdin[i] == stdin[i - k] for i in range(k, n, k)):\n            return str(k)\n    return str(n)",
        "test": "assert solution(\"aaaaaaaa\") == \"1\"",
        "num_ids": 684
    },
    {
        "number": 4739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(arr, x):\n        left = 0\n        right = len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == x:\n                return True\n            elif arr[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n\n    def find_possible_speeds(times, distances, total_stones):\n        speeds = []\n        for i in range(1, len(times)):\n            time_diff = times[i] - times[i - 1]\n            distance_diff = abs(distances[i] - distances[i - 1])\n            if distance_diff > time_diff:\n                speed = (distance_diff // time_diff)\n                if not binary_search(speeds, speed):\n                    speeds.append(speed)\n        return len(speeds), speeds\n\n    M, N = [int(x) for x in stdin.split()]\n    times = [int(x) for x in input().split()]\n    distances = [int(x) for x in input().split()]\n\n    possible_speeds_count, possible_speeds = find_possible_speeds(times, distances, M)\n    return str(possible_speeds_count) + \"\\n\" + \" \".join(str(x) for x in possible_speeds)",
        "test": "assert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\\n\" ",
        "num_ids": 1921
    },
    {
        "number": 4740,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    prefix_number = stdin[:3]\n    if prefix_number == \"555\":\n        return \"1\"\n    else:\n        return \"0\"",
        "test": "assert solution('5551212') == '1'",
        "num_ids": 590
    },
    {
        "number": 4741,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('/'))\n    if a % b == 0:\n        return '0/1'\n\n    a *= 5\n    b *= 9\n    gcd = math.gcd(a, b)\n    a //= gcd\n    b //= gcd\n\n    if b == 1:\n        return f'{a}/1'\n    else:\n        return f'{a}/{b}'",
        "test": "assert solution(\"32/1\") == \"0/1\"",
        "num_ids": 776
    },
    {
        "number": 4742,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    l, melody1, melody2 = stdin.split(\"\\n\")\n    l = int(l)\n\n    # Convert the input strings to lists of notes\n    notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    melody1 = [notes.index(note) for note in melody1.split(\" \")]\n    melody2 = [notes.index(note) for note in melody2.split(\" \")]\n\n    # Check if melody2 is a transposition of melody1\n    for n in range(1, 12):\n        if melody2 == [(note + n) % 12 for note in melody1]:\n            return \"Transposition\"\n\n    # Check if melody2 is a retrograde of melody1\n    if melody2 == melody1[::-1]:\n        return \"Retrograde\"\n\n    # Check if melody2 is an inversion of melody1\n    if melody2 == [melody1[0]] + [11 - (note - melody1[0]) % 12 for note in melody1[1:]]:\n        return \"Inversion\"\n\n    # If none of the above, return \"Nonsense\"\n    return \"Nonsense\"",
        "test": "assert solution(\"4\\nC E G A\\nG F# D C\") == \"Nonsense\" ",
        "num_ids": 2274
    },
    {
        "number": 4743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    def find_nearest_consonant(consonant: str) -> str:\n        hard_consonants = \"bcdfghjklmnpqrstvwxyz\"\n        index = hard_consonants.index(consonant.lower())\n        if index % 2 == 0:\n            new_index = index + 1\n        else:\n            new_index = index - 1\n        return hard_consonants[new_index]\n\n    def replace_first_letter(word: str) -> str:\n        if word[0].lower() in \"aeiou\":\n            return word\n        new_first_letter = find_nearest_consonant(word[0])\n        return new_first_letter + word[1:]\n\n    def replace_subsequent_consonants(word: str) -> str:\n        result = \"\"\n        for i, char in enumerate(word):\n            if char.lower() in \"bcdfghjklmnpqrstvwxyz\":\n                new_char = find_nearest_consonant(char)\n                if i == 1:\n                    result += new_char\n                else:\n                    result += char.lower()\n            else:\n                result += char.lower()\n        return result\n\n    def add_ending(word: str) -> str:\n        hard_consonants = \"bcdfghjklmnpqrstvwxyz\"\n        last_consonant = \"\"\n        for char in word[::-1]:\n            if char.lower() in hard_consonants:\n                last_consonant = char.lower()\n                break\n        if last_consonant == \"s\":\n            return word + \"uh\"\n        if last_consonant == \"t\":\n            return word + \"oh\"\n        if last_consonant == \"r\":\n            return word + \"ah\"\n        if last_consonant == \"p\":\n            return word + \"oh\"\n        if last_consonant == \"m\":\n            return word + \"uh\"\n        if last_consonant == \"k\":\n            return word + \"uh\"\n        if last_consonant == \"j\":\n            return word + \"uh\"\n        if last_consonant == \"h\":\n            return word + \"oh\"\n        if last_consonant == \"g\":\n            return word + \"oh\"\n        if last_consonant == \"f\":\n            return word + \"uh\"\n        if last_consonant == \"d\":\n            return word + \"ah\"\n        if last_consonant == \"c\":\n            return word + \"ah\"\n        if last_consonant == \"b\":\n            return word + \"ah\"\n        return word + \"ah\"\n\n    words = stdin.split()\n    result = []\n    for word in words:\n        if word == \"-\":\n            continue\n        if word == \"each\":\n            result.append(\"dach\")\n        elif word.isdigit():\n            result.append(word)\n        else:\n            new_word = replace_first_letter(word)\n            new_word = replace_subsequent_consonants(new_word)\n            new_word = add_ending(new_word)\n            result.append(new_word)\n    return \" \".join(result)",
        "test": "assert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\" ",
        "num_ids": 2218
    },
    {
        "number": 4744,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    v = int(stdin)\n    \n    # Calculate the dimensions of the box\n    w = int(v ** 0.5)\n    h = v // w\n    \n    # Calculate the surface area of the box\n    surface_area = 2 * (w * h + w * w + h * h)\n    \n    # Calculate the cost of the box\n    cost = surface_area\n    \n    return str(cost)",
        "test": "assert solution(\"1\") == \"6\"",
        "num_ids": 829
    },
    {
        "number": 4745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, X = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n\n    prices.sort(reverse=True)\n    max_items = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if prices[i] + prices[j] > X:\n                max_items += 1\n\n    return str(max_items)",
        "test": "assert solution(\"4 10\\n1 3 1 7\") == \"4\" ",
        "num_ids": 923
    },
    {
        "number": 4746,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    capacity, num_stations = map(int, stdin.split()[0:2])\n    measurements = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    for i in range(num_stations):\n        num_leave, num_enter, num_wait = measurements[i]\n        if num_leave + num_enter + num_wait > capacity or num_leave < 0 or num_enter < 0 or num_wait < 0:\n            return \"impossible\"\n\n    if measurements[0][1] + measurements[0][2] != 0 or measurements[-1][0] + measurements[-1][2] != 0:\n        return \"impossible\"\n\n    for i in range(num_stations - 1):\n        if measurements[i][0] > capacity - (measurements[i + 1][1] + measurements[i + 1][2]):\n            return \"impossible\"\n\n    return \"possible\"\n",
        "test": "assert solution(\"1 2\\n0 1 0\\n1 0 1\") == \"impossible\" ",
        "num_ids": 1321
    },
    {
        "number": 4747,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1 or k == 1:\n        return str(n)\n\n    def dp(n: int, k: int, depth: int) -> float:\n        if depth == 0:\n            return 1\n        if depth == 1:\n            return n\n        if depth > k:\n            return 0\n\n        result = 0\n        for i in range(1, n + 1):\n            result += dp(n, k, depth - 1) / n\n        return result\n\n    expected_score = dp(n, k, k)\n    return f\"{expected_score:.3f}\"",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 1805
    },
    {
        "number": 4748,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    H, N, M = list(map(int, stdin.split()))\n    if H == 1:\n        return f\"{N+M-1} 0\"\n    if H == 2:\n        return f\"{N+M-2} 0\"\n    if H == 3:\n        return f\"{N+M-3} 0\"\n    if H == 4:\n        return f\"{N+M-4} 4\"\n    \n    A = min(H//2, N, M)\n    B = H - 2*A\n    return f\"{2*A - N - M} {4*A - 2*N - 2*M}\"",
        "test": "assert solution(\"1 1 0\") == \"0 0\"",
        "num_ids": 1038
    },
    {
        "number": 4749,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    grid = [line.strip() for line in stdin.split(\"\\n\")[1:]]\n    \n    # Check if every row has the same number of black squares as it has white squares\n    for row in grid:\n        if row.count(\"B\") != row.count(\"W\"):\n            return \"0\"\n    \n    # Check if every column has the same number of black squares as it has white squares\n    for i in range(n):\n        column = \"\".join([grid[j][i] for j in range(n)])\n        if column.count(\"B\") != column.count(\"W\"):\n            return \"0\"\n    \n    # Check if no row or column has 3 or more consecutive squares of the same color\n    for row in grid:\n        for i in range(n - 2):\n            if row[i:i+3] == \"BBB\" or row[i:i+3] == \"WWW\":\n                return \"0\"\n    \n    for i in range(n):\n        column = \"\".join([grid[j][i] for j in range(n)])\n        for j in range(n - 2):\n            if column[j:j+3] == \"BBB\" or column[j:j+3] == \"WWW\":\n                return \"0\"\n    \n    return \"1\"\n",
        "test": "assert solution(\"4\\nBWWB\\nBWBB\\nWBBW\\nWBWW\") == \"0\"",
        "num_ids": 2140
    },
    {
        "number": 4750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split(\"\\n\")[0])\n    result = []\n    \n    for i in range(1, q+1):\n        l1, r1, l2, r2 = map(int, stdin.split(\"\\n\")[i].split(\" \"))\n        \n        found = False\n        a = l1\n        b = l2\n        \n        while not found:\n            if a == r1 or b == r2:\n                break\n            if a == b:\n                a += 1\n            else:\n                found = True\n        \n        result.append(f\"{a} {b}\")\n    \n    return \"\\n\".join(result)",
        "test": "assert solution(\"5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"",
        "num_ids": 1344
    },
    {
        "number": 4751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    input = stdin.splitlines()\n    head = list(map(int, input[0][1:-1].split(\",\")))\n    pos = int(input[1])\n    slow = head\n    fast = head\n    if pos == -1:\n        return \"false\"\n    else:\n        for i in range(pos):\n            fast = fast.next\n        while slow != fast:\n            if fast is None or fast.next is None:\n                return \"false\"\n            slow = slow.next\n            fast = fast.next.next\n        return \"true\"\n    ",
        "test": "assert solution(\"[1,2,3,4,5]\") == \"false\"",
        "num_ids": 1274
    },
    {
        "number": 4752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    nums, target = stdin.split(',')\n    nums = list(map(int, nums.strip('[]').split()))\n    target = int(target)\n    \n    hash_map = {}\n    \n    for i in range(len(nums)):\n        complement = target - nums[i]\n        if complement in hash_map:\n            return [hash_map[complement], i]\n        hash_map[nums[i]] = i\n    \n    return \"No two numbers in the array add up to the target\" ",
        "test": "assert solution([0, 4, 3, 0], 0) == [0, 3], \"Solution does not work correctly\" ",
        "num_ids": 1026
    },
    {
        "number": 4753,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n == 3:\n        return \"0\"\n\n    return str(n - 3)",
        "test": "assert solution(\"3\") == \"0\"",
        "num_ids": 747
    },
    {
        "number": 4754,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    socks = [int(x) for x in stdin.split()[1:]]\n\n    if len(socks) != 2 * n:\n        raise ValueError(\"Invalid input: number of socks does not match the given n\")\n\n    pile = socks[:n]\n    auxiliary_pile = socks[n:]\n\n    def is_pair_possible():\n        for i in range(n):\n            if pile[i] != auxiliary_pile[i]:\n                return False\n        return True\n\n    def move_sock_from_top_to_auxiliary_pile():\n        nonlocal pile, auxiliary_pile\n        sock = pile.pop(0)\n        auxiliary_pile.append(sock)\n\n    def move_sock_from_auxiliary_pile_to_top():\n        nonlocal pile, auxiliary_pile\n        sock = auxiliary_pile.pop(0)\n        pile.append(sock)\n\n    def pair_socks_from_top():\n        nonlocal pile, auxiliary_pile\n        if not pile or not auxiliary_pile:\n            return\n        if pile[0] == auxiliary_pile[0]:\n            pile.pop(0)\n            auxiliary_pile.pop(0)\n\n    def count_moves(pile, auxiliary_pile):\n        if is_pair_possible():\n            return 0\n        move_sock_from_top_to_auxiliary_pile()\n        return 1 + count_moves(pile, auxiliary_pile)\n\n    return \"impossible\" if not is_pair_possible() else count_moves(pile, auxiliary_pile)",
        "test": "assert solution(\"1\\n3 7\") == \"impossible\" ",
        "num_ids": 1572
    },
    {
        "number": 4755,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    c, k = map(int, stdin.strip().split())\n    bill = 10 ** k\n    return str(bill * round(c / bill))",
        "test": "assert solution(\"123450995 1\") == \"123451000\"",
        "num_ids": 811
    },
    {
        "number": 4756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    citizens = []\n    for i in range(N):\n        x, y = map(int, stdin.readline().strip().split())\n        citizens.append((x, y))\n\n    min_unusefulness = float('inf')\n    min_a = None\n\n    for a in range(-1000000, 1000001):\n        unusefulness = 0\n        for citizen in citizens:\n            distance = abs(citizen[0] + a - citizen[1])\n            unusefulness += distance ** 2\n\n        if unusefulness < min_unusefulness:\n            min_unusefulness = unusefulness\n            min_a = a\n\n    return str(min_a / 1000000.0)",
        "test": "assert solution(\"3\\n0 1\\n1 0\\n1 1\") == \"0.000000\" ",
        "num_ids": 1278
    },
    {
        "number": 4757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    E = int(lines[1])\n    songs = set()\n    villagers = [[] for _ in range(N + 1)]\n\n    for i in range(2, E + 2):\n        present = list(map(int, lines[i].split()))\n        for villager in present[1:]:\n            villagers[villager].append(i - 2)\n        songs.add(i - 2)\n\n    result = []\n    for i in range(1, N + 1):\n        if set(villagers[i]).issuperset(songs):\n            result.append(str(i))\n\n    return '\\n'.join(result)",
        "test": "assert solution(",
        "num_ids": 1601
    },
    {
        "number": 4758,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, t, m = map(int, stdin.split())\n    return str(n * t * m)",
        "test": "assert solution(\"3 4 5\") == \"60\"",
        "num_ids": 384
    },
    {
        "number": 4759,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, at_bats = stdin.split('\\n')\n    n = int(n)\n    at_bats = list(map(int, at_bats.split()))\n\n    official_at_bats = [at_bat for at_bat in at_bats if at_bat != -1]\n    bases = sum(official_at_bats)\n    slugging_percentage = bases / n\n\n    return str(slugging_percentage)",
        "test": "assert solution(\"3\\n3 0 2\") == \"1.6666666666666667\"",
        "num_ids": 1020
    },
    {
        "number": 4760,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    sieve = [True] * (N + 1)\n    sieve[0] = sieve[1] = False\n    count = 0\n\n    for i in range(2, N + 1):\n        if sieve[i]:\n            count += 1\n            if count == K:\n                return str(i)\n\n            for j in range(i * i, N + 1, i):\n                sieve[j] = False\n\n    return \"No such integer\"",
        "test": "assert solution(\"15 12\") == \"7\"",
        "num_ids": 858
    },
    {
        "number": 4761,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_combination(num: int) -> bool:\n        if num < 123456 or num > 987654:\n            return False\n        digits = [int(d) for d in str(num)]\n        if len(set(digits)) != 6:\n            return False\n        for digit in digits:\n            if digit == 0:\n                return False\n            if num % digit != 0:\n                return False\n        return True\n\n    L, H = map(int, stdin.split())\n    total = 0\n    for num in range(L, H + 1):\n        if is_valid_combination(num):\n            total += 1\n    return str(total)",
        "test": "assert solution(\"198765 198769\") == \"0\"",
        "num_ids": 946
    },
    {
        "number": 4762,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1.00000000\"\n    elif n == 2:\n        return \"0.50000000\"\n    else:\n        return str(1 - (1 / n) * ((n-1) / (n-2)))",
        "test": "assert solution(\"2\") == \"0.50000000\"",
        "num_ids": 752
    },
    {
        "number": 4763,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    target = int(stdin)\n    if target < 1 or target > 180:\n        return \"impossible\"\n    \n    triple_count = target // 60\n    double_count = (target - triple_count * 60) // 30\n    single_count = (target - triple_count * 60 - double_count * 30)\n\n    if triple_count == 3:\n        return f\"triple {20}\\ntriple {20}\\ntriple {20}\"\n    elif triple_count == 2:\n        if double_count == 2:\n            return f\"triple {20}\\ntriple {20}\\ndouble {15}\"\n        elif double_count == 1:\n            return f\"triple {20}\\ntriple {20}\\nsingle {9}\"\n    elif triple_count == 1:\n        if double_count == 2:\n            return f\"triple {19}\\ntriple {20}\\ndouble {15}\"\n        elif double_count == 1:\n            return f\"triple {19}\\ndouble {15}\\nsingle {9}\"\n        elif double_count == 0:\n            return f\"triple {19}\\nsingle {9}\\nsingle {9}\"\n    elif triple_count == 0:\n        if double_count == 2:\n            return f\"double {18}\\ndouble {15}\\nsingle {9}\"\n        elif double_count == 1:\n            return f\"double {18}\\nsingle {9}\\nsingle {9}\"\n    else:\n        return \"impossible\"",
        "test": "assert solution(\"1000\") == \"impossible\"",
        "num_ids": 1762
    },
    {
        "number": 4764,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, h, v = map(int, stdin.split())\n    if n < 2 or n > 10000:\n        return \"Invalid input\"\n    if h < 0 or h >= n or v < 0 or v >= n:\n        return \"Invalid input\"\n    \n    volume = n * n * 4\n    max_volume = 0\n    \n    for i in range(h, n - h):\n        for j in range(v, n - v):\n            volume = (n - i) * (n - j) * 4\n            max_volume = max(max_volume, volume)\n    \n    return str(max_volume)",
        "test": "assert solution(\"5 2 2\") == \"36\" ",
        "num_ids": 745
    },
    {
        "number": 4765,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    ingredients = []\n\n    for i in range(1, N + 1):\n        sourness, bitterness = map(int, stdin.split(\"\\n\")[i].split())\n        ingredients.append((sourness, bitterness))\n\n    min_diff = float(\"inf\")\n    for i in range(1, 2 ** N):\n        mask = bin(i)[2:].zfill(N)\n        sourness = 1\n        bitterness = 0\n\n        for j in range(N):\n            if mask[j] == \"1\":\n                sourness *= ingredients[j][0]\n                bitterness += ingredients[j][1]\n\n        diff = abs(sourness - bitterness)\n        min_diff = min(min_diff, diff)\n\n    return str(min_diff)",
        "test": "assert solution(\"2\\n3 8\\n5 8\") == \"1\"",
        "num_ids": 1428
    },
    {
        "number": 4766,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    output = \"\"\n    for line in stdin.splitlines():\n        if line.startswith(\"Simon says \"):\n            output += line[11:] + \"\\n\"\n    return output.strip()",
        "test": "assert solution(\"1\\nSimon says smile.\") == \"smile.\"",
        "num_ids": 630
    },
    {
        "number": 4767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    v = [int(x) for x in stdin.split()]\n    for i in range(1, 20):\n        if v[i-2] == 1:\n            v[i-2] = 0\n            if i == 20:\n                return \"0\"\n        else:\n            if i == 19:\n                return \"1\"\n            break\n    return str(20-i) ",
        "test": "assert solution(\"1 2 4 6 10 12 16 18\") == \"0\" ",
        "num_ids": 1318
    },
    {
        "number": 4768,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    dna_strings = stdin.split()[2:]\n    \n    unlikelihood = 0\n    edges = []\n    \n    # Calculate the unlikeliness and edges between DNA strings\n    for i in range(n):\n        for j in range(i+1, n):\n            count = 0\n            for k in range(k):\n                if dna_strings[i][k] != dna_strings[j][k]:\n                    count += 1\n            unlikelihood += count\n            edges.append((i, j))\n    \n    # Find the minimal unlikeliness and corresponding edges\n    min_unlikelihood = unlikelihood\n    min_edges = edges\n    \n    for edge in edges:\n        new_unlikelihood = unlikelihood - edge[2]\n        if new_unlikelihood < min_unlikelihood:\n            min_unlikelihood = new_unlikelihood\n            min_edges = [edge]\n        elif new_unlikelihood == min_unlikelihood:\n            min_edges.append(edge)\n    \n    # Print the minimal unlikelihood and corresponding edges\n    output = \"\"\n    output += str(min_unlikelihood) + \"\\n\"\n    for edge in min_edges:\n        output += str(edge[0]) + \" \" + str(edge[1]) + \"\\n\"\n    \n    return output",
        "test": "assert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\\n0 1\\n0 2\\n0 3\\n\"",
        "num_ids": 2398
    },
    {
        "number": 4769,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    def is_anagram(word1: str, word2: str) -> bool:\n        return sorted(word1) == sorted(word2)\n\n    def find_multigram_roots(word: str, root_length: int, multigram_roots: set) -> None:\n        for i in range(1, len(word) - root_length + 1):\n            if is_anagram(word[:i], word[i:i + root_length]):\n                multigram_roots.add(word[:i])\n\n    def find_shortest_multigram_root(word: str) -> str:\n        for i in range(1, len(word) // 2 + 1):\n            if is_anagram(word[:i], word[i:]):\n                return word[:i]\n        return \"\"\n\n    multigram_roots = set()\n    max_root_length = len(stdin) // 2\n\n    for root_length in range(1, max_root_length + 1):\n        find_multigram_roots(stdin, root_length, multigram_roots)\n\n    shortest_multigram_root = find_shortest_multigram_root(stdin)\n\n    if not shortest_multigram_root:\n        return \"-1\"\n\n    for multigram_root in sorted(multigram_roots, key=len):\n        if is_anagram(shortest_multigram_root, multigram_root):\n            return multigram_root",
        "test": "assert solution(\"ab\") == \"-1\" ",
        "num_ids": 1401
    },
    {
        "number": 4770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    if N == M:\n        return f\"Dr. Chaz needs 1 more piece of chicken!\"\n    else:\n        P = max(0, M - N)\n        Q = min(0, M - N)\n        if P == 0:\n            return f\"Dr. Chaz will have {Q} piece[s] of chicken left over!\"\n        else:\n            return f\"Dr. Chaz needs {P} more piece[s] of chicken!\"\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) ",
        "test": "assert solution(\"2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\" ",
        "num_ids": 839
    },
    {
        "number": 4771,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, V = map(int, lines[0].split())\n    \n    boxes = []\n    for i in range(1, n+1):\n        l, w, h = map(int, lines[i].split())\n        boxes.append((l, w, h))\n    \n    max_box = max(boxes, key=lambda x: x[0] * x[1] * x[2])\n    max_volume = max_box[0] * max_box[1] * max_box[2]\n    \n    return str(max_volume - V)",
        "test": "assert solution(\"4 980\\n10 10 10\\n10 5 2\\n5 3 2\\n90 5 2\") == \"20\" ",
        "num_ids": 1198
    },
    {
        "number": 4772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_word(word: str, crossword: List[List[str]]) -> bool:\n        for i in range(len(crossword)):\n            for j in range(len(crossword[0])):\n                if crossword[i][j] == word[0] and is_valid_word_at_position(word[1:], crossword, i, j):\n                    return True\n        return False\n\n    def is_valid_word_at_position(word: str, crossword: List[List[str]], row: int, col: int) -> bool:\n        if len(word) == 0:\n            return True\n\n        if col + len(word) > len(crossword[0]):\n            return False\n\n        if any(crossword[i][col] != '#' for i in range(row, len(crossword))):\n            return False\n\n        if any(crossword[i][col + len(word)] != '#' for i in range(row, len(crossword))):\n            return False\n\n        if col > 0 and crossword[row][col - 1] != '#':\n            return False\n\n        if col + len(word) < len(crossword[0]) and crossword[row][col + len(word)] != '#':\n            return False\n\n        if row > 0 and crossword[row - 1][col] != '#':\n            return False\n\n        if row + 1 < len(crossword) and crossword[row + 1][col] != '#':\n            return False\n\n        return is_valid_word_at_position(word[1:], crossword, row, col + 1)\n\n    input_lines = stdin.strip().split('\\n')\n    rows, cols = map(int, input_lines[0].strip().split())\n    crossword = [list(line.strip()) for line in input_lines[1:]]\n\n    words = sorted(set(word for i in range(rows) for j in range(cols) for word in islice(find_words(crossword, i, j), 2)))\n    return words[-1]\n\ndef",
        "test": "assert solution(\"4 4\\nluko#a#kula\\ni#as\") == \"as\" ",
        "num_ids": 2215
    },
    {
        "number": 4773,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # Define the macro character and the macro\n    macro_char = \"M\"\n    macro = \"NSE\"\n    \n    # Initialize variables\n    encoded_route = \"\"\n    macro_count = 0\n    macro_index = 0\n    i = 0\n    \n    # Iterate through the route\n    while i < len(stdin):\n        # Check if the current character is a macro character\n        if stdin[i] == macro_char:\n            # Increment the macro index\n            macro_index += 1\n            # If the macro index is equal to the length of the macro, reset it to 0\n            if macro_index == len(macro):\n                macro_index = 0\n            # Add the macro character to the encoded route\n            encoded_route += macro_char\n        else:\n            # Add the current character to the encoded route\n            encoded_route += stdin[i]\n            # Increment the macro index\n            macro_index += 1\n            # If the macro index is equal to the length of the macro, reset it to 0\n            if macro_index == len(macro):\n                macro_index = 0\n        i += 1\n    \n    # Calculate the length of the encoded route\n    encoded_length = len(encoded_route)\n    \n    # Calculate the length of the original route\n    original_length = len(stdin)\n    \n    # Calculate the length of the encoded route with macros\n    encoded_with_macro_length = len(macro) + 1 + len(encoded_route)\n    \n    # Determine the minimum length needed\n    min_length = min(encoded_length, original_length, encoded_with_macro_length)\n    \n    return str(min_length)",
        "test": "assert solution('NSEW') == '4' ",
        "num_ids": 1629
    },
    {
        "number": 4774,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    operators = [\"*\", \"/\", \"+\", \"-\"]\n    results = set()\n\n    for i in range(len(operators)):\n        for j in range(i + 1, len(operators)):\n            for k in range(j + 1, len(operators)):\n                for l in range(k + 1, len(operators)):\n                    try:\n                        op1 = operators[i]\n                        op2 = operators[j]\n                        op3 = operators[k]\n                        op4 = operators[l]\n\n                        result = f\"{a} {op1} {b} {op2} {c} {op3} {d}\"\n                        if eval(result) == True:\n                            results.add(result)\n                    except ZeroDivisionError:\n                        pass\n\n    if not results:\n        return \"problems ahead\"\n    else:\n        return \"\\n\".join(sorted(results))\n\ninput_1 = \"1 2 3 4\"\nprint(solution(input_1))\n\ninput_2 = \"0 4 2 2\"\nprint(solution(input_2)) ",
        "test": "assert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\"",
        "num_ids": 1558
    },
    {
        "number": 4775,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    n, m = len(a), len(b)\n    for i in range(m):\n        line = \"\"\n        if b[i] == a[0]:\n            for j in range(n):\n                if j == 0:\n                    line += b[i]\n                elif i == 0:\n                    line += a[j]\n                else:\n                    line += \".\"\n            break\n    return line + \"\\n\" + a + \"\\n\" + line + \"\\n\" + \"\".join([b[i] if i == 0 else \".\" for i in range(m)]) + \"\\n\" + \"\".join([a[j] if j == 0 else \".\" for j in range(n)])",
        "test": "assert solution(\"MAMA TATA\") == '.T..\\nMAMA\\n.T..\\n.A..'",
        "num_ids": 1217
    },
    {
        "number": 4776,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    events = []\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    for i in range(1, N+1):\n        s, t = map(int, lines[i].split())\n        events.append((s, t))\n\n    days = set()\n    for s, t in events:\n        for i in range(s, t+1):\n            days.add(i)\n\n    return str(len(days))",
        "test": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"",
        "num_ids": 1021
    },
    {
        "number": 4777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    a = b = 0\n    \n    for i in range(k):\n        if i % 3 == 0:\n            a += 1\n        else:\n            b += 1\n    \n    return f\"{a} {b}\"\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) ",
        "test": "assert solution(\"4\") == \"2 3\" ",
        "num_ids": 610
    },
    {
        "number": 4778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    num_precincts, num_districts = map(int, lines[0].split())\n    total_votes = 0\n    wasted_votes_A = 0\n    wasted_votes_B = 0\n    for i in range(1, num_precincts+1):\n        district, votes_A, votes_B = map(int, lines[i].split())\n        total_votes += votes_A + votes_B\n        if votes_A > votes_B:\n            winner = \"A\"\n            loser = \"B\"\n            wasted_votes_loser = votes_B\n            wasted_votes_winner = votes_A - votes_B\n        else:\n            winner = \"B\"\n            loser = \"A\"\n            wasted_votes_loser = votes_A\n            wasted_votes_winner = votes_B - votes_A\n        wasted_votes_A += wasted_votes_loser\n        wasted_votes_B += wasted_votes_winner\n    efficiency_gap = abs(wasted_votes_A - wasted_votes_B) / total_votes\n    output = \"\"\n    for i in range(1, num_districts+1):\n        output += winner + \" \"\n        for j in range(1, num_precincts+1):\n            if int(lines[j].split()[0]) == i:\n                if winner == \"A\":\n                    votes_A, votes_B = map(int, lines[j].split()[1:])\n                    output += str(votes_A) + \" \" + str(votes_B) + \"\\n\"\n                else:\n                    votes_B, votes_A = map(int, lines[j].split()[1:])\n                    output += str(votes_B) + \" \" + str(votes_A) + \"\\n\"\n    output += str(efficiency_gap)\n    return output",
        "test": "assert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"",
        "num_ids": 3028
    },
    {
        "number": 4779,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    a = [int(x) for x in input_list[1:]]\n    max_value = 0\n\n    for k in range(1, n):\n        left_sum = sum([x**2 for x in a[:k]])\n        right_sum = sum(a[k:])\n        max_value = max(max_value, left_sum * right_sum)\n\n    return str(max_value)",
        "test": "assert solution(\"2\\n1\\n1\") == \"1\"",
        "num_ids": 863
    },
    {
        "number": 4780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N1, N2, first_row, second_row, T = stdin.split()\n    N1, N2, T = int(N1), int(N2), int(T)\n    first_row = first_row[::-1]\n    second_row = second_row[::-1]\n    if N1 < N2:\n        first_row, second_row = second_row, first_row\n        N1, N2 = N2, N1\n    \n    ants = first_row + second_row\n    # After T seconds, the ant in position i in the final array will be the ant in position (i + N1) in the original array\n    final_ants = [ants[(i + N1) % len(ants)] for i in range(len(ants))]\n    return ''.join(final_ants)\n\ndef",
        "test": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\" ",
        "num_ids": 1818
    },
    {
        "number": 4781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    K, N = map(int, input().split())\n    T_list = []\n    Z_list = []\n    for i in range(N):\n        T, Z = map(str, input().split())\n        T_list.append(int(T))\n        Z_list.append(Z)\n    \n    box_holder = K - 1\n    for i in range(N):\n        if Z_list[i] == \"P\":\n            continue\n        elif Z_list[i] == \"T\":\n            box_holder = (box_holder + 1) % 8\n        else:\n            break\n    \n    return str(box_holder + 1)\n\nstdin_str = \"\"\nprint(solution(stdin_str)) ",
        "test": "assert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"4\" ",
        "num_ids": 1295
    },
    {
        "number": 4782,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    \n    # Calculate the maximum cost of plowing the roads\n    max_cost = (n * (n - 1)) // 2\n    \n    # Calculate the minimum cost of plowing the roads\n    min_cost = n - 1\n    \n    # Return the maximum cost\n    return str(max_cost)",
        "test": "assert solution(\"4 3\") == \"6\"",
        "num_ids": 767
    },
    {
        "number": 4783,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.splitlines()[0].split())\n    vault = [list(map(int, line.split())) for line in stdin.splitlines()[1:M+1]]\n    \n    # Initialize a 2D array to store the minimum ladder length to reach each cell in the vault\n    ladder_length = [[float('inf') for _ in range(N)] for _ in range(M)]\n    ladder_length[0][0] = 0\n    \n    # BFS to find the shortest ladder length to reach each cell in the vault\n    queue = [(0, 0)]\n    while queue:\n        y, x = queue.pop(0)\n        for dy, dx in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            ny, nx = y+dy, x+dx\n            if 0 <= ny < M and 0 <= nx < N:\n                if vault[y][x] < vault[ny][nx]:\n                    ladder_length[ny][nx] = min(ladder_length[ny][nx], ladder_length[y][x]+1)\n                    queue.append((ny, nx))\n    \n    # The special coin is at the bottom right corner, so we need to reach the bottom left corner\n    ladder_length[M-1][N-1] = 0\n    \n    # BFS to find the shortest ladder length to reach each cell in the vault\n    queue = [(M-1, 0)]\n    while queue:\n        y, x = queue.pop(0)\n        for dy, dx in [(-1, 0), (0, 1)]:\n            ny, nx = y+dy, x+dx\n            if 0 <= ny < M and 0 <= nx < N:\n                if vault[y][x] < vault[ny][nx]:\n                    ladder_length[ny][nx] = min(ladder_length[ny][nx], ladder_length[y][x]+1)\n                    queue.append((ny, nx))\n    \n    # The shortest ladder length to reach the special coin from the entrance\n    return str(ladder_length[0][0])",
        "test": "assert solution(\"1 4\\n4 3 2 1\") == \"0\" ",
        "num_ids": 1785
    },
    {
        "number": 4784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    plan_limit, months = map(int, stdin.split('\\n')[0].split())\n    plan_usage = list(map(int, stdin.split('\\n')[1:]))\n\n    available_megabytes = sum(plan_usage) % plan_limit\n\n    return str(available_megabytes)",
        "test": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\" ",
        "num_ids": 807
    },
    {
        "number": 4785,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    hiss = False\n    for i in range(len(stdin) - 1):\n        if stdin[i:i+2] == \"ss\":\n            hiss = True\n            break\n    return \"hiss\" if hiss else \"no hiss\"",
        "test": "assert solution(\"amiss\") == \"hiss\"",
        "num_ids": 485
    },
    {
        "number": 4786,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    # parse the input\n    n, keywords = int(stdin.splitlines()[0]), stdin.splitlines()[1:]\n\n    # create a set of keywords\n    unique_keywords = set()\n    for keyword in keywords:\n        unique_keywords.add(keyword.lower().replace(\"-\", \" \"))\n\n    # calculate the number of non-similar keywords\n    non_similar_keywords = len(unique_keywords)\n\n    return str(non_similar_keywords)",
        "test": "assert solution(\"5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux\") == \"5\" ",
        "num_ids": 981
    },
    {
        "number": 4787,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    tablet_count = stdin.count('T')\n    compass_count = stdin.count('C')\n    gear_count = stdin.count('G')\n\n    tablet_points = tablet_count ** 2\n    compass_points = compass_count ** 2\n    gear_points = gear_count ** 2\n    unique_cards_points = 7 * (tablet_count + compass_count + gear_count - max(tablet_count, compass_count, gear_count))\n\n    total_points = tablet_points + compass_points + gear_points + unique_cards_points\n\n    return str(total_points)",
        "test": "assert solution(\"CCC\") == \"9\" ",
        "num_ids": 1113
    },
    {
        "number": 4788,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    current_direction, correct_direction = map(int, stdin.split())\n    if current_direction == correct_direction:\n        return \"0\"\n    delta = abs(correct_direction - current_direction)\n    if delta > 180:\n        delta = 360 - delta\n    return str(delta)\n\ninput_1 = \"315\\n45\"\ninput_2 = \"180\\n270\"\nprint(solution(input_1))  # Output: 90\nprint(solution(input_2))  # Output: 90 ",
        "test": "assert solution(\"315\\n45\") == \"90\"",
        "num_ids": 884
    },
    {
        "number": 4789,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    num_signatures, *signature_desks = stdin.split()\n    num_signatures = int(num_signatures)\n    signature_desks = [int(desk) for desk in signature_desks]\n\n    # Initialize the number of passes and the current desk number\n    passes = 0\n    current_desk = 1\n\n    # Iterate through the signature desks\n    for signature_desk in signature_desks:\n        # Calculate the number of passes needed for the current signature\n        passes += max(signature_desk - current_desk, 0)\n\n        # Update the current desk number\n        current_desk = signature_desk + 1\n\n    # Add the remaining passes needed for the last signature\n    passes += max(num_signatures - current_desk + 1, 0)\n\n    return str(passes)",
        "test": "assert solution(\"5\\n11\\n20\\n33\\n40\\n55\") == \"1\" ",
        "num_ids": 1021
    },
    {
        "number": 4790,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    black_count = s.count('B')\n    white_count = s.count('W')\n\n    if black_count == white_count:\n        return \"1\"\n\n    s = s[1:] + [s[0]]\n\n    for i in range(len(s) - 1):\n        if s[i] == 'B' and s[i+1] == 'W':\n            return \"1\"\n        if s[i] == 'W' and s[i+1] == 'B':\n            return \"1\"\n\n    return \"0\"",
        "test": "assert solution(\"WWBWBB\") == \"1\"",
        "num_ids": 1276
    },
    {
        "number": 4791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3, s4 = map(int, stdin.split())\n    \n    # Calculate the area of the quadrilateral with the given side lengths\n    def area(a, b, c, d):\n        s = (a + b + c + d) / 2\n        return (s*(s-a)*(s-b)*(s-c)*(s-d)) ** 0.5\n    \n    # Find the maximum area of a quadrilateral\n    max_area = area(s1, s2, s3, s4)\n    for a in range(s1+1, s2+1):\n        for b in range(s2+1, s3+1):\n            for c in range(s3+1, s4+1):\n                d = s1 + s2 + s3 + s4 - a - b - c\n                max_area = max(max_area, area(a, b, c, d))\n    \n    # Round the answer to an accuracy of 10^-6\n    return f\"{max_area:.6f}\"",
        "test": "assert solution(\"1 2 1 1\") == \"1.299038105676658\" ",
        "num_ids": 1236
    },
    {
        "number": 4792,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    output = \"\"\n    prev_char = \"\"\n    for char in stdin:\n        if char == prev_char:\n            continue\n        output += char\n        prev_char = char\n    return output",
        "test": "assert solution(\"robert\") == \"robert\"",
        "num_ids": 636
    },
    {
        "number": 4793,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    s, v1, v2 = map(int, stdin.split())\n\n    if s % v1 != 0:\n        return \"Impossible\"\n\n    v2_bottles = s // v1\n    v1_bottles = s // v2\n\n    if v1_bottles * v1 == s and v2_bottles * v2 == s:\n        return f\"{v1_bottles} {v2_bottles}\"\n    else:\n        return \"Impossible\"",
        "test": "assert solution(\"1000 900 7\") == \"Impossible\"",
        "num_ids": 1126
    },
    {
        "number": 4794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.splitlines()[0].split())\n    grid = [list(line.strip()) for line in stdin.splitlines()[1:]]\n\n    def is_valid_parking_space(row: int, col: int, size: int) -> bool:\n        for i in range(size):\n            for j in range(size):\n                if col + j >= cols or row + i >= rows:\n                    return False\n                if grid[row + i][col + j] == '#':\n                    return False\n        return True\n\n    def count_squashed_cars(row: int, col: int, size: int) -> int:\n        count = 0\n        for i in range(size):\n            for j in range(size):\n                if grid[row + i][col + j] == 'X':\n                    count += 1\n        return count\n\n    def count_valid_spaces(size: int) -> int:\n        count = 0\n        for row in range(rows):\n            for col in range(cols):\n                if is_valid_parking_space(row, col, size):\n                    count += 1\n        return count\n\n    output = []\n    for size in range(1, 5):\n        output.append(str(count_valid_spaces(size)))\n    return '\\n'.join(output)",
        "test": "assert solution(\"\"\"4 4",
        "num_ids": 1957
    },
    {
        "number": 4795,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    P_list = []\n    \n    for i in range(1, N+1):\n        P = int(stdin.split('\\n')[i])\n        P_list.append(P)\n    \n    X = 0\n    for i in range(N):\n        number = P_list[i] // 10\n        pow = P_list[i] % 10\n        X += number ** pow\n    \n    return str(X)",
        "test": "assert solution(\"2\\n212\\n1253\") == \"1953566\"",
        "num_ids": 745
    },
    {
        "number": 4796,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    A, B, C, I, J, K = map(int, stdin.split())\n    \n    # calculate the volume of the cocktail\n    cocktail_volume = I * A / (I + J + K) + J * B / (I + J + K) + K * C / (I + J + K)\n    \n    # calculate the volume left over for each juice\n    leftover_A = A - cocktail_volume\n    leftover_B = B - cocktail_volume\n    leftover_C = C - cocktail_volume\n    \n    # round the values to 6 decimal places\n    leftover_A = round(leftover_A, 6)\n    leftover_B = round(leftover_B, 6)\n    leftover_C = round(leftover_C, 6)\n    \n    # return the result\n    return f\"{leftover_A} {leftover_B} {leftover_C}\"",
        "test": "assert solution(\"9 9 9\\n3 2 1\") == \"0.000000 3.000000 6.000000\"",
        "num_ids": 1459
    },
    {
        "number": 4797,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    for char in stdin:\n        if char == '<':\n            if result:\n                result.pop()\n        else:\n            result.append(char)\n    return ''.join(result)",
        "test": "assert solution(\"<<<<<<<<<abc\") == \"abc\"",
        "num_ids": 594
    },
    {
        "number": 4798,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    short_variation = \"\"\n    for char in stdin:\n        if char == \"-\":\n            continue\n        elif char.isupper():\n            short_variation += char\n    return short_variation",
        "test": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"",
        "num_ids": 577
    },
    {
        "number": 4799,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    G, S, C = map(int, stdin.split())\n    buying_power = G * 3 + S * 2 + C\n    victory_cards = [\"Province\", \"Duchy\", \"Estate\"]\n    victory_costs = [8, 5, 2]\n    treasure_cards = [\"Gold\", \"Silver\", \"Copper\"]\n    treasure_costs = [6, 3, 0]\n    best_victory_card = \"\"\n    best_treasure_card = \"\"\n    for i in range(len(victory_cards)):\n        if victory_costs[i] <= buying_power:\n            best_victory_card = victory_cards[i]\n            break\n    for i in range(len(treasure_cards)):\n        if treasure_costs[i] <= buying_power:\n            best_treasure_card = treasure_cards[i]\n            break\n    return best_victory_card + \" or \" + best_treasure_card if best_victory_card != \"\" else best_treasure_card",
        "test": "assert solution(\"2 1 0\") == \"Province or Gold\"",
        "num_ids": 1481
    },
    {
        "number": 4800,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d, s = map(int, input().split())\n\n    if d < s:\n        return \"impossible\"\n\n    remaining_problems = n - k\n    avg_difficulty = (d * remaining_problems + s * k) / n\n\n    return f\"{avg_difficulty:.6f}\"",
        "test": "assert solution(\"10 3\\n80 90\") == \"75.7142857\" ",
        "num_ids": 810
    },
    {
        "number": 4801,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n    greedy_subsequence = []\n    \n    for a in A:\n        if not greedy_subsequence or a > greedy_subsequence[-1]:\n            greedy_subsequence.append(a)\n            \n    return str(len(greedy_subsequence)) + '\\n' + ' '.join(map(str, greedy_subsequence))",
        "test": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'",
        "num_ids": 972
    },
    {
        "number": 4802,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.strip().split())\n    m = m - 45\n    if m < 0:\n        m += 60\n        h = h - 1\n    if h < 0:\n        h += 24\n    return f\"{h} {m}\"",
        "test": "assert solution(\"10 10\") == \"9 25\"",
        "num_ids": 657
    },
    {
        "number": 4803,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N = float(stdin)\n    epsilon = 1e-5\n    a = 1.0\n    while True:\n        a_next = a ** (1 / (a ** (1 / a)))\n        if abs(a_next - a) < epsilon:\n            break\n        a = a_next\n    return f\"{a:.6f}\"",
        "test": "assert solution(\"1.000000\") == \"1.000000\"",
        "num_ids": 1110
    },
    {
        "number": 4804,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin)\n    result = []\n    \n    # Trivial cases\n    if S == 1:\n        result.append(\"1,1\")\n    elif S == 2:\n        result.append(\"2,1\")\n    elif S % 2 == 0:\n        result.append(\"2,1\")\n        result.append(\"1,2\")\n    else:\n        for i in range(3, S+1, 2):\n            if i <= S // 2:\n                result.append(f\"{i},{S-i}\")\n            else:\n                result.append(f\"{S-i},{i}\")\n    \n    result.sort(key=lambda x: (int(x.split(',')[0]), int(x.split(',')[1])))\n    \n    output = f\"{S}:\" + '\\n'\n    output += '\\n'.join(result)\n    \n    return output ",
        "test": "assert solution(\"50\") == \"50:\\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\\n\" ",
        "num_ids": 1433
    },
    {
        "number": 4805,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    unique_words = set(words)\n\n    if len(words) == len(unique_words):\n        return \"yes\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"",
        "num_ids": 662
    },
    {
        "number": 4806,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # Define the mapping between the monster's moves and the mech's counter moves\n    monster_moves = {'R': 'S', 'B': 'K', 'L': 'H'}\n    combo_breaker = 'C'\n\n    # Initialize the mech's move sequence\n    mech_moves = []\n\n    # Iterate over the monster's moves\n    i = 0\n    while i < len(stdin):\n        # Check for a combination of three moves\n        if i + 3 <= len(stdin) and stdin[i:i+3] in ['RBL', 'LBR', 'LRB']:\n            # Add the combo breaker move\n            mech_moves.append(combo_breaker)\n            # Move the index three steps forward\n            i += 3\n        else:\n            # Add the counter move for the current monster move\n            mech_moves.append(monster_moves[stdin[i]])\n            # Move the index one step forward\n            i += 1\n\n    # Convert the mech's move sequence to a single string\n    mech_moves_str = ''.join(mech_moves)\n\n    return mech_moves_str",
        "test": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"",
        "num_ids": 1377
    },
    {
        "number": 4807,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.strip().split())\n    for i in range(1, n + 1):\n        if i % x == 0 and i % y == 0:\n            print(\"FizzBuzz\")\n        elif i % x == 0:\n            print(\"Fizz\")\n        elif i % y == 0:\n            print(\"Buzz\")\n        else:\n            print(i)",
        "test": "assert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n\" ",
        "num_ids": 1110
    },
    {
        "number": 4808,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, dm = map(int, stdin.split()[:2])\n    d = list(map(int, stdin.split()[2:]))\n    \n    k = 0\n    while k < n and d[-k-1] <= dm:\n        k += 1\n    \n    if k == n:\n        return \"It had never snowed this early!\"\n    else:\n        return f\"It hadn't snowed this early in {k} years!\" ",
        "test": "assert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\" ",
        "num_ids": 1058
    },
    {
        "number": 4809,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    s, n = map(int, stdin.split())\n    if n % 2 == 0:\n        winner = (n // 2) + 1\n    else:\n        winner = n // 2 + 1\n\n    return str(winner)",
        "test": "assert solution('10 2') == '2'",
        "num_ids": 1740
    },
    {
        "number": 4810,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    matrix_size = int(len(stdin) ** 0.5)\n    matrix = [list(stdin[i:i + matrix_size]) for i in range(0, len(stdin), matrix_size)]\n    decrypted = ''.join([''.join(col) for col in zip(*matrix)])\n    return decrypted",
        "test": "assert solution(\"bok\") == \"bok\"",
        "num_ids": 1001
    },
    {
        "number": 4811,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    smallest_bar_size = 1\n    number_of_breaks = 0\n    \n    while smallest_bar_size < K:\n        smallest_bar_size *= 2\n        number_of_breaks += 1\n    \n    return f\"{smallest_bar_size} {number_of_breaks}\"",
        "test": "assert solution('7') == '8 3'",
        "num_ids": 595
    },
    {
        "number": 4812,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    common_word, lists, phrases = stdin.split(\"\\n\")\n\n    lists = [list(filter(None, lists.split(\" \"))) for lists in lists.split(\"\\n\")]\n    phrases = phrases.split(\"\\n\")\n\n    def find_rhyming_word(word: str, lists: list) -> str:\n        for lst in lists:\n            for ending in lst:\n                if word.endswith(ending):\n                    return ending\n        return \"\"\n\n    def is_rhyming_phrase(phrase: str, common_word: str, lists: list) -> bool:\n        words = phrase.split(\" \")\n        if len(words) < 2 or len(words) > 3:\n            return False\n        rhyming_word = find_rhyming_word(common_word, lists)\n        for word in words:\n            if not word.endswith(rhyming_word):\n                return False\n        return True\n\n    result = []\n    for phrase in phrases:\n        if is_rhyming_phrase(phrase, common_word, lists):\n            result.append(\"YES\\n\")\n        else:\n            result.append(\"NO\\n\")\n\n    return \"\".join(result)",
        "test": "assert solution('drought\\n2\\nautht autk oubt outte oute\\nought\\n2\\ndifficult route\\nworried and fraught\\nforever in doubt\\napples and pears\\n') == 'YES\\nYES\\nYES\\nYES\\nNO\\n' ",
        "num_ids": 2279
    },
    {
        "number": 4813,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    word, permutation = stdin.split()\n    letters = sorted(set(permutation))\n    for letter in word:\n        if letter in letters:\n            letters.remove(letter)\n        else:\n            return \"LOSE\"\n    return \"WIN\"",
        "test": "assert solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"LOSE\"",
        "num_ids": 998
    },
    {
        "number": 4814,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def check_order(names: List[str]) -> str:\n        if names == sorted(names):\n            return \"INCREASING\"\n        elif names == sorted(names, reverse=True):\n            return \"DECREASING\"\n        else:\n            return \"NEITHER\"\n\n    N = int(stdin.split('\\n')[0])\n    names = stdin.split('\\n')[1:N+1]\n    return check_order(names)",
        "test": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"",
        "num_ids": 1043
    },
    {
        "number": 4815,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    def parse_input(stdin: str) -> tuple:\n        lines = stdin.split('\\n')\n        n, p, m = map(int, lines[0].split())\n        players = lines[1:n+1]\n        scores = {}\n        for line in lines[n+1:]:\n            name, score = line.split()\n            score = int(score)\n            if name in scores:\n                scores[name] += score\n            else:\n                scores[name] = score\n        return n, p, scores\n\n    def get_winners(n: int, p: int, scores: dict) -> list:\n        winners = [player for player, score in scores.items() if score >= p]\n        return winners\n\n    def format_output(winners: list) -> str:\n        output = \"\"\n        for winner in winners:\n            output += f\"{winner} wins!\\n\"\n        if output == \"\":\n            output = \"No winner!\"\n        return output\n\n    n, p, scores = parse_input(stdin)\n    winners = get_winners(n, p, scores)\n    return format_output(winners)",
        "test": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nGeorge 3\\nKelly 1\") == \"George wins!\\n\"",
        "num_ids": 1867
    },
    {
        "number": 4816,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    x, y, x1, y1, x2, y2 = map(float, stdin.split())\n    \n    # Check if the goat is outside the rectangle\n    if (x < x1 and x < x2) or (x > x1 and x > x2):\n        return str(abs(x - x1))\n    if (y < y1 and y < y2) or (y > y1 and y > y2):\n        return str(abs(y - y1))\n    \n    # If the goat is inside the rectangle, find the shortest distance to a corner\n    dist1 = math.sqrt((x - x1)**2 + (y - y1)**2)\n    dist2 = math.sqrt((x - x2)**2 + (y - y2)**2)\n    dist3 = math.sqrt((x - x1)**2 + (y - y2)**2)\n    dist4 = math.sqrt((x - x2)**2 + (y - y1)**2)\n    return str(min(dist1, dist2, dist3, dist4)) ",
        "test": "assert solution(\"6 0 0 2 7 6\") == \"2.0\"",
        "num_ids": 1490
    },
    {
        "number": 4817,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    def find_next_permutation(num: str) -> str:\n        n = len(num)\n        i = n - 2\n        while i >= 0 and num[i] >= num[i + 1]:\n            i -= 1\n        if i == -1:\n            return \"0\"\n        j = n - 1\n        while num[j] <= num[i]:\n            j -= 1\n        num = num[:i] + num[j] + num[i + 1:j] + num[i]\n        return int(num)\n\n    num = stdin.strip()\n    num = str(find_next_permutation(num))\n    return num",
        "test": "assert solution(\"0\") == \"0\"",
        "num_ids": 769
    },
    {
        "number": 4818,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    task_times = list(map(int, stdin.split()[2:2+n]))\n    quiet_intervals = list(map(int, stdin.split()[2+n:]))\n\n    max_tasks = 0\n    current_task = 0\n    current_time = 0\n\n    for quiet_interval in quiet_intervals:\n        while current_time < quiet_interval:\n            current_time += task_times[current_task]\n            current_task += 1\n            if current_task == n:\n                break\n        if current_task == n:\n            break\n        max_tasks += 1\n\n    return str(max_tasks)\n\ndef",
        "test": "assert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\") == \"3\\n\" ",
        "num_ids": 1869
    },
    {
        "number": 4819,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    input_list = [int(num.strip()) for num in stdin.split('\\n') if num.strip().isdigit()]\n    modulo_list = [num % 42 for num in input_list]\n    distinct_count = len(set(modulo_list))\n    return str(distinct_count)",
        "test": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"10\"",
        "num_ids": 825
    },
    {
        "number": 4820,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, b = map(int, stdin.strip().split())\n    if b == 0:\n        return \"yes\"\n    elif b == 1:\n        return \"no\"\n    elif b == 2:\n        if N == 1:\n            return \"yes\"\n        else:\n            return \"no\"\n    elif b == 3:\n        if N == 1 or N == 2:\n            return \"yes\"\n        else:\n            return \"no\"\n    elif b == 4:\n        if N == 1 or N == 2 or N == 3:\n            return \"yes\"\n        else:\n            return \"no\"\n    elif b == 5:\n        if N == 1 or N == 2 or N == 3 or N == 4:\n            return \"yes\"\n        else:\n            return \"no\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"10000000000 50\") == \"no\"",
        "num_ids": 1059
    },
    {
        "number": 4821,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    cards = {}\n    for card in stdin:\n        if card in cards:\n            return \"GRESKA\"\n        else:\n            cards[card] = True\n\n    missing_cards = {\"P\": 13, \"K\": 13, \"H\": 13, \"T\": 13}\n\n    for card in cards:\n        suit, number = card[0], card[1:]\n        if number == \"0\":\n            missing_cards[suit] -= 1\n        else:\n            missing_cards[suit] -= int(number)\n\n    result = []\n    for suit in \"P\", \"K\", \"H\", \"T\":\n        result.append(str(missing_cards[suit]))\n\n    return \" \".join(result)",
        "test": "assert solution(\"H02H10P11H02\") == \"GRESKA\" ",
        "num_ids": 1170
    },
    {
        "number": 4822,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    R, S, K = map(int, stdin.split()[0].split())\n    R, S, K = R, S, min(K, R)  # K cannot be greater than R\n    grid = [list(line.strip()) for line in stdin.split()[1:]]\n    \n    max_flies = 0\n    max_shot = \"\"\n    for i in range(R - K + 1):\n        for j in range(S - K + 1):\n            flies_count = 0\n            for k in range(i, i + K):\n                for l in range(j, j + K):\n                    if grid[k][l] == '*':\n                        flies_count += 1\n            if flies_count > max_flies:\n                max_flies = flies_count\n                max_shot = f\"{i},{j}\"\n                \n    shot_row, shot_col = map(int, max_shot.split(','))\n    shot_grid = [['.' for _ in range(S)] for _ in range(R)]\n    shot_grid[shot_row][shot_col] = '+'\n    for i in range(shot_row, shot_row + K):\n        shot_grid[i][shot_col] = '-'\n        shot_grid[i][shot_col + K - 1] = '-'\n    for j in range(shot_col, shot_col + K):\n        shot_grid[shot_row][j] = '|'\n        shot_grid[shot_row + K - 1][j] = '|'\n    \n    result = [str(max_flies)] + [\"\".join(row) for row in shot_grid]\n    return \"\\n\".join(result)",
        "test": "assert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == \"2\\n......\\n.*.*.*\\n+--+..\\n|*.|..\\n|.*|..\\n+--+..\\n*....*\" ",
        "num_ids": 3329
    },
    {
        "number": 4823,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    cards = stdin.split()\n    ranks = [card[0] for card in cards]\n    unique_ranks = set(ranks)\n    max_rank = max([ranks.count(rank) for rank in unique_ranks])\n    return str(max_rank)",
        "test": "assert solution('AC AD AH AS KD') == '4'",
        "num_ids": 957
    },
    {
        "number": 4824,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    C, P = map(int, stdin.readline().split())\n    heights = list(map(int, stdin.readline().split()))\n\n    def rotate(piece: list) -> list:\n        return [list(i) for i in zip(*piece[::-1])]\n\n    def move_left(piece: list) -> list:\n        return [[0] + i[:-1] for i in piece]\n\n    def move_right(piece: list) -> list:\n        return [[i[-1] + 1] + i[:-1] for i in piece]\n\n    def is_valid(piece: list, heights: list) -> bool:\n        for row in piece:\n            if any(row[i] > heights[i] for i in range(len(row))):\n                return False\n        return True\n\n    def drop(piece: list, heights: list) -> int:\n        total = 0\n        for rotation in range(4):\n            for move in range(-3, 4):\n                new_heights = [max(heights[i], max(piece[j][i] for j in range(len(piece)))) for i in range(C)]\n                new_piece = [[piece[j][i] + move for j in range(len(piece))] for i in range(len(piece[0]))]\n                if is_valid(new_piece, new_heights):\n                    total += drop(rotate(new_piece), new_heights)\n        return total\n\n    pieces = [\n        [[1, 1, 1], [0, 0, 0]],\n        [[0, 2, 2], [0, 0, 0]],\n        [[3, 3, 0], [0, 0, 0]],\n        [[4, 0, 0], [4, 0, 0]],\n        [[0, 0, 5], [5, 5, 0]],\n        [[6, 0, 0], [0, 6, 0]],\n        [[0, 7, 0], [0, 0, 7]]\n    ]\n\n    piece = pieces[P - 1]\n    return drop(piece, heights)",
        "test": "assert solution(\"5 1\\n0 0 0 0 0\") == \"7\\n\" ",
        "num_ids": 2652
    },
    {
        "number": 4825,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    translation_table = {\n        'a': '@',\n        'n': '[]\\\\[]',\n        'b': '8',\n        'o': '0',\n        'c': '(',\n        'p': '|D',\n        'd': '|)',\n        'q': '(|,|)',\n        'e': '3',\n        'r': '|Z',\n        'f': '#',\n        's': '$',\n        'g': '6',\n        't': '][',\n        'h': '[-]',\n        'u': '|_|',\n        'i': '|',\n        'v': '\\\\/',\n        'j': '|<',\n        'w': '\\\\\\\\/',\n        'k': '|<',\n        'x': '}{',\n        'l': '1',\n        'y': '`/',\n        'm': '[]/[]',\n        'z': '2'\n    }\n\n    result = []\n    for char in stdin:\n        if char.lower() in translation_table:\n            result.append(translation_table[char.lower()])\n        else:\n            result.append(char)\n\n    return ''.join(result)",
        "test": "assert solution(\"What's the Frequency, Kenneth?\") == '//[-]@[\\']\\'[\\'3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'[\\'[-]?') ",
        "num_ids": 2012
    },
    {
        "number": 4826,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n % 2 == 1:\n        return \"Alice\"\n    else:\n        return \"Bob\"",
        "test": "assert solution('1') == 'Alice'",
        "num_ids": 442
    },
    {
        "number": 4827,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split('\\n')\n    num_words = int(words[0])\n    sentence = words[1:num_words]\n    number = len(words[num_words].replace('$', ''))\n    number_str = num_to_word(number)\n    \n    for i in range(num_words):\n        if '$' in sentence[i]:\n            sentence[i] = sentence[i].replace('$', number_str)\n    \n    return ' '.join(sentence)\n\ndef",
        "test": "assert solution(\"7\\n$is\\tthe\\tnumber\\tof\\tletters\\nhere\") == \"thirty is the number of letters here\" ",
        "num_ids": 1857
    },
    {
        "number": 4828,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    nop_count = 0\n    i = 0\n    while i < len(stdin):\n        if stdin[i].isupper():\n            i += 1\n            while i < len(stdin) and stdin[i].islower():\n                i += 1\n        else:\n            nop_count += 1\n            i += 1\n    return str(nop_count)",
        "test": "assert solution(\"Abcd\") == \"0\"",
        "num_ids": 788
    },
    {
        "number": 4829,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    left, right = map(int, stdin.strip().split())\n    if left == 0 and right == 0:\n        return \"Not a moose\"\n    if left == right:\n        return f\"Even {2*left}\"\n    else:\n        return f\"Odd {max(left, right)*2}\"",
        "test": "assert solution(\"3 3\") == \"Even 6\"",
        "num_ids": 778
    },
    {
        "number": 4830,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def parse_input(stdin: str) -> tuple:\n        lines = stdin.splitlines()\n        n_words = int(lines[0])\n        dictionary = lines[1:1 + n_words]\n        key_presses = lines[-1]\n        return n_words, dictionary, key_presses\n\n    def generate_key_map() -> dict:\n        key_map = {}\n        for i in range(10):\n            if i == 0:\n                key_map[str(i)] = \"\"\n            elif i == 1:\n                key_map[str(i)] = \"a\"\n            elif i == 2:\n                key_map[str(i)] = \"b\"\n            elif i == 3:\n                key_map[str(i)] = \"c\"\n            elif i == 4:\n                key_map[str(i)] = \"d\"\n            elif i == 5:\n                key_map[str(i)] = \"e\"\n            elif i == 6:\n                key_map[str(i)] = \"f\"\n            elif i == 7:\n                key_map[str(i)] = \"g\"\n            elif i == 8:\n                key_map[str(i)] = \"h\"\n            elif i == 9:\n                key_map[str(i)] = \"i\"\n        return key_map\n\n    def is_valid_word(word: str, key_map: dict, key_presses: str) -> bool:\n        for char, key in zip(word, key_presses):\n            if char not in key_map[key]:\n                return False\n        return True\n\n    n_words, dictionary, key_presses = parse_input(stdin)\n    key_map = generate_key_map()\n    valid_words = 0\n\n    for word in dictionary:\n        if is_valid_word(word, key_map, key_presses):\n            valid_words += 1\n\n    return str(valid_words)",
        "test": "assert solution(\"2\\nja\\nla\\n52\\n\") == \"2\"",
        "num_ids": 2048
    },
    {
        "number": 4831,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    p_frame = \"..#..\\n.#.#.\\n#.{}.#\\n.#.#.\\n..#..\\n\"\n    w_frame = \"..*..\\n.*.*.\\n*.{}.*\\n.*.*.\\n..*..\\n\"\n    output = \"\"\n    \n    for i, letter in enumerate(stdin):\n        if i % 2 == 0:\n            output += p_frame.format(letter)\n        else:\n            output += w_frame.format(letter)\n    \n    return output.rstrip(\"\\n\")",
        "test": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"",
        "num_ids": 1892
    },
    {
        "number": 4832,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    \n    # calculate area in Euclidian geometry\n    area_euclid = 3.141593 * R * R\n    \n    # calculate area in taxicab geometry\n    area_taxicab = (R * R) * (4 * R + 4)\n    \n    return f\"{area_euclid:.6f}\\n{area_taxicab:.6f}\"\n\ndef",
        "test": "assert solution(\"21\") == \"1385.442360\\n882.000000\" ",
        "num_ids": 881
    },
    {
        "number": 4833,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    expenses = [int(i) for i in lines[1].split()]\n\n    total_expenses = sum(filter(lambda x: x < 0, expenses))\n\n    return str(total_expenses)",
        "test": "assert solution(\"5\\n129 44 394 253 147\") == \"0\" ",
        "num_ids": 502
    },
    {
        "number": 4834,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    times = list(map(int, stdin.split()[1:]))\n    max_time = max(times)\n    return str(N * max_time)",
        "test": "assert solution(\"3\\n2 2 2\") == \"6\"",
        "num_ids": 610
    },
    {
        "number": 4835,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    t, N, M = map(int, stdin.splitlines()[0].split())\n    grid = stdin.splitlines()[1:]\n    \n    # Initialize variables\n    queue = [(0, 0)]\n    visited = set()\n    directions = {'U': (0, -1), 'D': (0, 1), 'L': (-1, 0), 'R': (1, 0)}\n    total_zones = 0\n    min_zones = float('inf')\n    \n    # Breadth-first search\n    while queue:\n        x, y = queue.pop(0)\n        visited.add((x, y))\n        \n        if grid[x][y] == 'S':\n            min_zones = min(min_zones, total_zones)\n        \n        if total_zones >= t:\n            break\n        \n        for direction in directions:\n            new_x, new_y = x + directions[direction][0], y + directions[direction][1]\n            \n            if 0 <= new_x < N and 0 <= new_y < M and (new_x, new_y) not in visited and grid[new_x][new_y] != '1':\n                queue.append((new_x, new_y))\n                total_zones += 1\n    \n    # Return output\n    return \"NOT POSSIBLE\" if min_zones == float('inf') else str(min_zones)",
        "test": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"",
        "num_ids": 2767
    },
    {
        "number": 4836,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N, C = map(int, stdin.split()[:2])\n    weights = list(map(int, stdin.split()[2:]))\n    \n    unique_weights = set(weights)\n    max_different_fruits = 0\n    \n    for weight in unique_weights:\n        if weight <= C:\n            current_different_fruits = weights.count(weight)\n            if current_different_fruits > max_different_fruits:\n                max_different_fruits = current_different_fruits\n    \n    return str(max_different_fruits)",
        "test": "assert solution(\"7 5\\n1 5 4 3 2 1 1\") == \"3\"",
        "num_ids": 876
    },
    {
        "number": 4837,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    rounds, symbols, friends_count = stdin.split('\\n')\n    symbols = symbols.split()\n    friends_symbols = stdin.split('\\n')[2:]\n    \n    actual_score = 0\n    possible_score = 0\n    \n    for i in range(len(symbols)):\n        friends_score = [0] * len(friends_symbols)\n        for j in range(len(friends_symbols)):\n            friends_score[j] = compare_symbols(symbols[i], friends_symbols[j][i])\n            possible_score += friends_score[j]\n        actual_score += max(friends_score)\n    \n    return f\"{actual_score}\\n{possible_score}\"\n\ndef",
        "test": "assert solution('5\\nSSPPR\\n2\\nPPRRS\\nRRSSP') == '10\\n15\\n' ",
        "num_ids": 1583
    },
    {
        "number": 4838,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    times = [int(line) for line in lines[1:]]\n    \n    time = 0\n    for i in range(n):\n        if times[i] == time + 1:\n            time += 1\n        else:\n            break\n    \n    if time == 0:\n        return \"still running\"\n    else:\n        return str(time)",
        "test": "assert solution(\"1\\n1\") == \"1\"",
        "num_ids": 1052
    },
    {
        "number": 4839,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    canisters = list(map(int, stdin.readline().split()))\n    balloons = list(range(1, n+1))\n\n    max_fraction = 0\n    canisters.sort(reverse=True)\n\n    for i in range(len(balloons)):\n        balloon_size = balloons[i]\n        current_fraction = canisters[i] / balloon_size\n        max_fraction = max(max_fraction, current_fraction)\n\n    return max_fraction if max_fraction >= 0.6 else \"impossible\"",
        "test": "assert solution(\"2\\n2 2\") == \"impossible\" ",
        "num_ids": 1733
    },
    {
        "number": 4840,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    gunnar_dice = [tuple(map(int, line.strip().split())) for line in stdin.split(\"\\n\")[0].split(\" \")]\n    emma_dice = [tuple(map(int, line.strip().split())) for line in stdin.split(\"\\n\")[1].split(\" \")]\n\n    def roll_dice(dice: list) -> int:\n        return sum(random.randint(a, b) for a, b in dice)\n\n    def simulate_game(dice1: list, dice2: list) -> int:\n        return 1 if roll_dice(dice1) > roll_dice(dice2) else 0\n\n    gunnar_win_probability = sum(simulate_game(gunnar_dice, emma_dice) for _ in range(10000)) / 10000\n    emma_win_probability = sum(simulate_game(emma_dice, gunnar_dice) for _ in range(10000)) / 10000\n\n    if gunnar_win_probability > emma_win_probability:\n        return \"Gunnar\"\n    elif gunnar_win_probability < emma_win_probability:\n        return \"Emma\"\n    else:\n        return \"Tie\"",
        "test": "assert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\" ",
        "num_ids": 1821
    },
    {
        "number": 4841,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    bites = [int(x) if x.isdigit() else x for x in stdin.split()]\n    \n    last_bite = 0\n    for bite in bites:\n        if bite == \"mumble\":\n            return \"something is fishy\"\n        if bite <= last_bite:\n            return \"something is fishy\"\n        last_bite = bite\n    \n    return \"makes sense\"",
        "test": "assert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"",
        "num_ids": 1012
    },
    {
        "number": 4842,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    n = int(input_values[0])\n    sequence = [int(x) for x in input_values[1:]]\n\n    def find_degree(sequence):\n        differences = [sequence[i+1] - sequence[i] for i in range(len(sequence)-1)]\n        if differences.count(differences[0]) == len(differences):\n            return 1\n        else:\n            return 2\n\n    degree = find_degree(sequence)\n    next_value = sequence[-1] + (sequence[-1] - sequence[-2])\n\n    return f\"{degree} {next_value}\" ",
        "test": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"",
        "num_ids": 1148
    },
    {
        "number": 4843,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    from collections import Counter\n\n    def is_valid(positions: list) -> bool:\n        rows = set()\n        cols = set()\n        diagonals1 = Counter()\n        diagonals2 = Counter()\n\n        for x, y in positions:\n            if x in rows or y in cols:\n                return False\n            diagonals1[x - y] += 1\n            diagonals2[x + y] += 1\n            rows.add(x)\n            cols.add(y)\n\n        for count in diagonals1.values():\n            if count > 1:\n                return False\n        for count in diagonals2.values():\n            if count > 1:\n                return False\n\n        return True\n\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    positions = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    if len(positions) == n and all(0 <= x < n and 0 <= y < n for x, y in positions) and is_valid(positions):\n        return \"CORRECT\"\n    else:\n        return \"INCORRECT\"",
        "test": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"INCORRECT\" ",
        "num_ids": 2102
    },
    {
        "number": 4844,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    matrix = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    result = [0] * N\n\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            result[i] |= matrix[i][j]\n\n    return ' '.join(map(str, result))",
        "test": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"",
        "num_ids": 1532
    },
    {
        "number": 4845,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    D, M = map(int, stdin.split())\n    from datetime import datetime\n    date = datetime(2009, M, D)\n    return date.strftime(\"%A\")",
        "test": "assert solution(\"17 1\") == \"Saturday\"",
        "num_ids": 764
    },
    {
        "number": 4846,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    L, D, X = map(int, stdin.strip().split())\n    N, M = None, None\n    for i in range(L, D + 1):\n        if sum(int(digit) for digit in str(i)) == X:\n            if N is None:\n                N = i\n            M = i\n    return str(N) + \"\\n\" + str(M)",
        "test": "assert solution(\"1\\n100\\n4\") == \"4\\n40\"",
        "num_ids": 934
    },
    {
        "number": 4847,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def triangle_area(x1, y1, x2, y2, x3, y3):\n        return abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\n    def point_in_triangle(x1, y1, x2, y2, x3, y3, x, y):\n        def sign(p1, p2, p3):\n            return (p1[0] - p3[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p3[1])\n\n        d1 = sign((x1, y1), (x2, y2), (x, y))\n        d2 = sign((x2, y2), (x3, y3), (x, y))\n        d3 = sign((x3, y3), (x1, y1), (x, y))\n\n        has_neg = (d1 < 0) or (d2 < 0) or (d3 < 0)\n        has_pos = (d1 > 0) or (d2 > 0) or (d3 > 0)\n        return not (has_neg and has_pos)\n\n    def read_triangle_coordinates():\n        x1, y1 = map(int, input().split())\n        x2, y2 = map(int, input().split())\n        x3, y3 = map(int, input().split())\n        return x1, y1, x2, y2, x3, y3\n\n    def read_apple_tree_coordinates(n):\n        return [(int(input().split()[0]), int(input().split()[1])) for _ in range(n)]\n\n    x1, y1, x2, y2, x3, y3 = read_triangle_coordinates()\n    n = int(input())\n    apple_trees = read_apple_tree_coordinates(n)\n\n    triangle_area = triangle_area(x1, y1, x2, y2, x3, y3)\n    apple_trees_in_triangle = sum(point_in_triangle(x1, y1, x2, y2, x3, y3, x, y) for x, y in apple_trees)\n\n    return f\"{triangle_area:.1f}\\n{apple_trees_in_triangle}\"\n\nstdin = \"\"\"3 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4\"\"\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\" ",
        "num_ids": 2584
    },
    {
        "number": 4848,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3 or n > 10**5:\n        return \"Invalid input\"\n\n    m = 2\n    while True:\n        if m * n >= 2 * n and n % (m * m) != 0:\n            return str(m)\n        m += 1",
        "test": "assert solution(\"3\") == \"2\"",
        "num_ids": 498
    },
    {
        "number": 4849,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    blimps = stdin.split('\\n')\n    cia_blimps = []\n\n    for i in range(len(blimps)):\n        if 'FBI' in blimps[i]:\n            cia_blimps.append(i + 1)\n\n    if not cia_blimps:\n        return \"HE GOT AWAY!\"\n    else:\n        return ' '.join(map(str, cia_blimps))",
        "test": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"",
        "num_ids": 1047
    },
    {
        "number": 4850,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_triangle(a: int, b: int, c: int) -> bool:\n        return a + b > c and a + c > b and b + c > a\n\n    def compute_max_side(a: int, b: int, c: int) -> int:\n        return max(a, b, c)\n\n    lines = stdin.split('\\n')\n    triangles_count = int(lines[0])\n    triangles = []\n\n    for i in range(1, triangles_count + 1):\n        triangle_sides = list(map(int, lines[i].split()))\n        if is_valid_triangle(*triangle_sides):\n            triangles.append(triangle_sides)\n        else:\n            raise ValueError(\"Invalid triangle input\")\n\n    max_side_lengths = [compute_max_side(*triangle) for triangle in triangles]\n    rod_length = sum(max_side_lengths)\n\n    return round(rod_length, 4)\n\ndef",
        "test": "assert solution(\"2\\n3 3 3\\n4 5 4\") == \"6.843530573929037\" ",
        "num_ids": 1252
    },
    {
        "number": 4851,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    current_number = n\n    while True:\n        digits_sum = sum(int(digit) for digit in str(current_number))\n        if current_number % digits_sum == 0:\n            return str(current_number)\n        current_number += 1",
        "test": "assert solution(\"25\") == \"27\"",
        "num_ids": 611
    },
    {
        "number": 4852,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determine the number of distinct integers to which the input expression can evaluate in DPG.\n    \"\"\"\n    input_list = stdin.split(\"+\")\n    result = set()\n    for i in range(len(input_list) - 1):\n        result.add(int(input_list[i]) + int(input_list[i + 1]))\n        result.add(int(input_list[i]) + int(input_list[i + 1]))\n        result.add(int(input_list[i]) * int(input_list[i + 1]))\n\n    return str(len(result))",
        "test": "assert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\" ",
        "num_ids": 1204
    },
    {
        "number": 4853,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(x) for x in stdin.split()]\n    n, a = inputs[0], inputs[1:]\n    p = [1]\n    for i in range(1, n+1):\n        p.append(p[-1] * i)\n    p.reverse()\n    C = [0] * (n+1)\n    for i in range(n+1):\n        C[i] = sum([a[j]*p[j] for j in range(i+1)])\n    return \" \".join([str(x) for x in C])",
        "test": "assert solution('2 2 -4 5') == '5 -2 4'",
        "num_ids": 1046
    },
    {
        "number": 4854,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N, C = map(int, stdin.split()[:2])\n    message = list(map(int, stdin.split()[2:]))\n    frequency = {}\n\n    # Count frequency of each number\n    for num in message:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n\n    # Sort the message based on frequency and value\n    sorted_message = sorted(message, key=lambda x: (-frequency[x], x))\n\n    return \" \".join(map(str, sorted_message))",
        "test": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"",
        "num_ids": 1175
    },
    {
        "number": 4855,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    A, I = map(int, stdin.split())\n    total_citations = A * I\n    bribed_scientists = total_citations - (A - 1)\n    return str(bribed_scientists)\n\ninput_data = \"38 24\"\nprint(solution(input_data)) ",
        "test": "assert solution(\"1 100\") == \"100\" ",
        "num_ids": 538
    },
    {
        "number": 4856,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    a, b = int(nums[0]), int(nums[1])\n    a_reversed = str(a)[::-1]\n    b_reversed = str(b)[::-1]\n    larger_num = max(a_reversed, b_reversed)\n    return larger_num",
        "test": "assert solution(\"221 231\") == \"132\" ",
        "num_ids": 591
    },
    {
        "number": 4857,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    l, w = map(int, stdin.split())\n    weights = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    result = []\n    for word in words:\n        if len(word) == l and sum(weights[char] for char in word) == w:\n            result.append(word)\n    if result:\n        return result[0]\n    return \"impossible\"",
        "test": "assert solution(\"13 100\") == \"impossible\"",
        "num_ids": 1441
    },
    {
        "number": 4858,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    M, N, C = list(map(int, lines[0].split()))\n    C = chr(ord(C[0]) - 33)\n    first_frame = []\n    for i in range(1, M + 1):\n        first_frame.append(lines[i])\n    second_frame = []\n    for i in range(M + 2, 2 * M + 1):\n        second_frame.append(lines[i])\n\n    for i in range(M):\n        first_frame[i] = [c for c in first_frame[i]]\n    for i in range(M):\n        second_frame[i] = [c for c in second_frame[i]]\n\n    for i in range(M):\n        for j in range(N):\n            if first_frame[i][j] == C and second_frame[i][j] == C:\n                first_frame[i][j] = second_frame[i][j] = \" \"\n\n    for i in range(M):\n        for j in range(N):\n            if first_frame[i][j] == \" \":\n                for k in range(i, -1, -1):\n                    if first_frame[k][j] == C:\n                        first_frame[i][j] = second_frame[i][j] = C\n                        break\n\n    for i in range(M):\n        first_frame[i] = \"\".join(first_frame[i])\n\n    return \"\\n\".join(first_frame) + \"\\n\\n\"\n\ninput_string = \"\"\".X\n--\n.X\n--\"\"\"\nprint(solution(input_string)) ",
        "test": "assert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\nBABABABABABA\\nBBABABABABAB\\nBABABABABABA\") == \"BBABABABABAC\\nBBBABABABABA\\nBBABABABABAB\" ",
        "num_ids": 2808
    },
    {
        "number": 4859,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    b, d, c, l = map(int, stdin.split())\n    output = []\n\n    for i in range(l + 1):\n        if b + d + c == l + i:\n            output.append((i, c, b - i))\n            output.append((i, b - i, c))\n        elif b + d + c > l + i:\n            output.append((i, c, b - i))\n            output.append((i, b - i, c))\n            output.append((i, b, c - i))\n        elif b + d + c < l + i:\n            output.append((i, b, c - i))\n            output.append((i, c, b - i))\n            output.append((i, b - i, c))\n\n    if not output:\n        return \"impossible\"\n\n    output.sort(key=lambda x: (x[0], x[1], x[2]))\n    return '\\n'.join(map(lambda x: ' '.join(map(str, x)), output))",
        "test": "assert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n\" ",
        "num_ids": 2140
    },
    {
        "number": 4860,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(line.strip()) for line in stdin.split(\"\\n\")[1:]]\n    missing_numbers = []\n\n    for i in range(1, numbers[-1] + 1):\n        if i not in numbers:\n            missing_numbers.append(i)\n\n    if not missing_numbers:\n        return \"good job\"\n    else:\n        return \"\\n\".join(str(num) for num in missing_numbers)",
        "test": "assert solution('6\\n1\\n3\\n4\\n6\\n7\\n8') == '2\\n5'",
        "num_ids": 1211
    },
    {
        "number": 4861,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s, v = list(map(float, stdin.split()))\n    s *= 1 + 1 / c\n    t = s / v\n    c = round(((n * (log2(n) ** c * sqrt(2)) / (p * 1e9)) / t).isqrt(), 6)\n    return f\"{t} {c}\"\n\nprint(solution(input())) ",
        "test": "assert solution(\"4 0.001 1000000 50\") == \"50.0 1.999999999999999\" ",
        "num_ids": 1261
    },
    {
        "number": 4862,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0 or N == 1:\n        return \"0\"\n    elif N == 2:\n        return \"1\"\n    else:\n        return str((N * (N-1)) // 2)\n\ndef",
        "test": "assert solution(\"4\") == \"10\\n\"",
        "num_ids": 544
    },
    {
        "number": 4863,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    answers = stdin.split('\\n')[1:]\n    score = 0\n    for i in range(n):\n        if answers[i] == 'A':\n            score += 1\n    return str(score)",
        "test": "assert solution(\"3\\nA\\nB\\nA\") == \"2\"",
        "num_ids": 2014
    },
    {
        "number": 4864,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    R, C, Z_R, Z_C = map(int, stdin.split()[:4])\n    input_matrix = [list(row.strip()) for row in stdin.split('\\n')[1:]]\n    \n    output_matrix = [['' for _ in range(C * Z_C)] for _ in range(R * Z_R)]\n    \n    for i in range(R):\n        for j in range(C):\n            for k in range(Z_R):\n                for l in range(Z_C):\n                    output_matrix[i * Z_R + k][j * Z_C + l] = input_matrix[i][j]\n    \n    return '\\n'.join([''.join(row) for row in output_matrix])",
        "test": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\\n\") == \"..xx..\\nxx..xx\\n..xx..\"",
        "num_ids": 1802
    },
    {
        "number": 4865,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.splitlines()[0])\n    output = []\n    \n    for i in range(1, test_cases+1):\n        adjustment, minutes_to_change, hour, minutes = stdin.splitlines()[i].split()\n        minutes = int(minutes)\n        hour = int(hour)\n        minutes_to_change = int(minutes_to_change)\n        \n        if adjustment == \"F\":\n            if hour + minutes_to_change / 60 > 24:\n                new_hour = (hour + minutes_to_change // 60) % 24\n                new_minutes = minutes + (minutes_to_change % 60)\n                if new_minutes >= 60:\n                    new_hour += 1\n                    new_minutes -= 60\n            else:\n                new_hour = hour + minutes_to_change // 60\n                new_minutes = minutes + (minutes_to_change % 60)\n                if new_minutes >= 60:\n                    new_hour += 1\n                    new_minutes -= 60\n        else:\n            if hour - minutes_to_change / 60 < 0:\n                new_hour = hour - minutes_to_change // 60\n                new_minutes = minutes - (minutes_to_change % 60)\n                if new_minutes < 0:\n                    new_hour -= 1\n                    new_minutes += 60\n            else:\n                new_hour = hour - minutes_to_change // 60\n                new_minutes = minutes - (minutes_to_change % 60)\n                if new_minutes < 0:\n                    new_hour -= 1\n                    new_minutes += 60\n                    \n        output.append(f\"{new_hour} {new_minutes}\")\n    \n    return \"\\n\".join(output)",
        "test": "assert solution(\"1\\nF 60 13 20\") == \"14 20\"",
        "num_ids": 2072
    },
    {
        "number": 4866,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    month, day = stdin.split()\n    day = int(day)\n    \n    if (month == \"OCT\" and day == 31) or (month == \"DEC\" and day == 25):\n        return \"yup\"\n    else:\n        return \"nope\"",
        "test": "assert solution(\"OCT 31\") == \"yup\"",
        "num_ids": 783
    },
    {
        "number": 4867,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.splitlines()[0].split())\n    U, L, R, D = map(int, stdin.splitlines()[1].split())\n    crossword = stdin.splitlines()[2:M+2]\n\n    frame_top = '#' * (L + R + N)\n    frame_bottom = frame_top\n    frame_left = '#' * (U + D + M)\n    frame_right = frame_left\n\n    frame_list = [frame_top]\n\n    for i in range(M):\n        row = frame_left + crossword[i] + frame_right\n        frame_list.append(row)\n\n    frame_list.append(frame_bottom)\n\n    framed_puzzle = '\\n'.join(frame_list)\n\n    return framed_puzzle",
        "test": "assert solution(\"\"\"4 4",
        "num_ids": 2182
    },
    {
        "number": 4868,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    white_pieces = {}\n    black_pieces = {}\n\n    for piece in stdin.split(\",\"):\n        piece_type = piece[-1]\n        if piece_type.islower():\n            white_pieces[piece] = piece_type\n        else:\n            black_pieces[piece] = piece_type\n\n    board = [\n        [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n    ]\n\n    for piece, piece_type in white_pieces.items():\n        x, y = piece[1:3]\n        board[8 - int(y)][ord(x) - ord(\"a\")] = \"K\" if piece_type == \"k\" else piece_type.upper()\n\n    for piece, piece_type in black_pieces.items():\n        x, y = piece[1:3]\n        board[8 - int(y)][ord(x) - ord(\"a\")] = \"k\" if piece_type == \"k\" else piece_type.lower()\n\n    output = \"\"\n    for row in board:\n        output += \"|\" + \"|\".join(row) + \"|\\n\"\n\n    return output",
        "test": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+",
        "num_ids": 4751
    },
    {
        "number": 4869,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    A, N = map(float, stdin.split())\n    if N**2 < 4*A:\n        return \"Need more materials!\"\n    else:\n        return \"Diablo is happy!\"",
        "test": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"",
        "num_ids": 810
    },
    {
        "number": 4870,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    f, s, g, u, d = map(int, stdin.split())\n    s -= 1\n    g -= 1\n    if s == g:\n        return \"0\"\n    if s > g:\n        return \"use the stairs\"\n    if u >= f or d >= f:\n        return \"use the stairs\"\n    if s + u * (f - s) < g:\n        return \"use the stairs\"\n    if g - s > d * (f - g):\n        return \"use the stairs\"\n    up = min(u, (g - s) // d)\n    down = (g - s) % d\n    return str(up + down + 2 * (f - g))",
        "test": "assert solution(\"10 1 1000000 2 1\") == \"use the stairs\"",
        "num_ids": 1304
    },
    {
        "number": 4871,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    scores = [int(score) for score in stdin.split('\\n')[1:]]\n    \n    group_score = 0\n    for i in range(n):\n        group_score += scores[i] * (4/5)**i\n    \n    current_group_score = group_score / 5\n    \n    average_new_group_score = 0\n    for i in range(n):\n        scores_without_i = scores[:i] + scores[i+1:]\n        new_group_score = 0\n        for j in range(n-1):\n            new_group_score += scores_without_i[j] * (4/5)**j\n        new_group_score /= 4/5\n        average_new_group_score += new_group_score\n    \n    average_new_group_score /= n\n    \n    return f\"{current_group_score:.1f}\\n{average_new_group_score:.6f}\"",
        "test": "assert solution(\"1\\n500\") == \"500.0\\n500.0\" ",
        "num_ids": 2109
    },
    {
        "number": 4872,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    dirty_pushes = list(map(int, stdin.split()))\n    dirty_pushes.sort()\n    n = dirty_pushes[0]\n    days = dirty_pushes[1:]\n    \n    cleanup_phases = 0\n    dirtiness = 0\n    for day in days:\n        dirtiness += day\n        if dirtiness >= 20:\n            cleanup_phases += 1\n            dirtiness -= 20\n    \n    return str(cleanup_phases)",
        "test": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"",
        "num_ids": 1279
    },
    {
        "number": 4873,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    W, H = map(int, stdin.splitlines()[0].split())\n    grid = [list(line.strip()) for line in stdin.splitlines()[1:]]\n\n    def neighbors(x, y):\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < W and 0 <= ny < H and grid[ny][nx] != '#':\n                yield nx, ny\n\n    def dfs(x, y, visited):\n        if (x, y) in visited:\n            return 0\n        visited.add((x, y))\n        if grid[y][x] == 'G':\n            return 1\n        if grid[y][x] == 'T':\n            return 0\n        return sum(dfs(nx, ny, visited) for nx, ny in neighbors(x, y))\n\n    start_x, start_y = next((x, y) for y, row in enumerate(grid) for x, cell in enumerate(row) if cell == 'P')\n    return str(dfs(start_x, start_y, set()))",
        "test": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"",
        "num_ids": 2410
    },
    {
        "number": 4874,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    grid = []\n    for i in range(1, n + 1):\n        grid.append(list(lines[i]))\n\n    num_moves = 0\n    for i in range(n):\n        if grid[i][0] == '_':\n            for j in range(1, m):\n                if grid[i][j] == '_' and grid[i][j - 1] != '_':\n                    num_moves += 1\n        else:\n            for j in range(m):\n                if grid[i][j] == '_' and grid[i][j - 1] != '_':\n                    num_moves += 1\n\n    return str(num_moves)",
        "test": "assert solution(\"10 10\\n_________$$$$$$\\n_________$$$$$$\\n_________$$$$$$\\n_________$$$$$$\\n_____$___$_____$$\\n____$__$_____$____\\n___$____$_____$___\\n__$_____$______$___ \\n_$_______$______$___\\n$________$_____$____ \\n_________$_____$____ \\n_________$_____$____ \\n_________$_____$____ \\n_________$_____$____ \\n_________$_____$____\") == \"10\" ",
        "num_ids": 3111
    },
    {
        "number": 4875,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    pig_latin = \"\"\n    words = stdin.split()\n    \n    for word in words:\n        if word[0].lower() in \"aeiouy\":\n            pig_latin += word + \"yay \"\n        else:\n            vowels = \"aeiouy\"\n            while word[0].lower() not in vowels:\n                word = word[1:] + word[0]\n            pig_latin += word + \"ay \"\n            \n    return pig_latin.strip()",
        "test": "assert solution(\"and ordinary\") == \"andyay ordinaryyay\"",
        "num_ids": 1333
    },
    {
        "number": 4876,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    restaurants = stdin.strip().split('\\n')\n    n = int(restaurants[0])\n    restaurants = restaurants[1:]\n    for i in range(n):\n        k = int(restaurants[i*2])\n        items = restaurants[i*2+1:(i+1)*2]\n        if \"pea soup\" in items and \"pancakes\" in items:\n            return items[0]\n    return \"Anywhere is fine I guess\"",
        "test": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n2\\nnymble\\npea soup\\npancakes\\n3\\npunsch\\npea soup\\npea soup\") == \"nymble\\npea soup\\npancakes\" ",
        "num_ids": 1521
    },
    {
        "number": 4877,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    if b == 0:\n        return str(h // a)\n    else:\n        return str(h // (a - b))",
        "test": "assert solution(\"10 3 20\") == \"2\"",
        "num_ids": 703
    },
    {
        "number": 4878,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    R1, S = map(int, stdin.split())\n    R2 = 2 * S - R1\n    return str(R2)",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 498
    },
    {
        "number": 4879,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    a, b, c = stdin.split()\n\n    # Determine the right-of-way\n    if (a == \"North\" and b == \"West\") or (a == \"South\" and b == \"East\"):\n        # You want to pass straight through\n        if c == \"East\" or c == \"West\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        # You want to turn left\n        if c == \"North\" or c == \"South\":\n            return \"No\"\n        else:\n            return \"Yes\"",
        "test": "assert solution(\"North East South\") == \"No\"",
        "num_ids": 971
    },
    {
        "number": 4880,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    last_n_letters_of_plaintext = stdin.split('\\n')[1]\n    ciphertext = stdin.split('\\n')[2]\n\n    key = last_n_letters_of_plaintext\n    plaintext = ''\n\n    for i in range(m):\n        plaintext += chr(((ord(ciphertext[i]) - ord('a') - ord(key[i % n])) % 26) + ord('a'))\n\n    return plaintext",
        "test": "assert solution(\"20 50\\nsecretkey\\nkmvqsfcyhjlmxzuknvvzyz\") == \"secretkey\"",
        "num_ids": 1619
    },
    {
        "number": 4881,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, N + 1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    if even_count == N or odd_count == N:\n        return \"Either\"\n    elif even_count > odd_count:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "test": "assert solution(\"3\") == \"Odd\"",
        "num_ids": 682
    },
    {
        "number": 4882,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    result = []\n\n    for i in range(1, N + 1):\n        cost = int(lines[i])\n        if cost == 0:\n            result.append(\"1\")\n        else:\n            result.append(str(len(str(cost))))\n\n    return \"\\n\".join(result)\n\nstdin = \"\"\"5\n314\n1\n5926\n5\n35897\"\"\"\n\nprint(solution(stdin)) # Output: 3\\n1\\n4\\n1\\n5 ",
        "test": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'",
        "num_ids": 782
    },
    {
        "number": 4883,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    translations, words = stdin.split(\"\\n\")\n    translations = translations.split(\"\\n\")\n    translations = {translation.split()[0]: translation.split()[1] for translation in translations}\n    words = words.split(\"\\n\")\n\n    result = []\n    for word1, word2 in words:\n        if len(word1) != len(word2):\n            result.append(\"no\")\n        else:\n            for letter1, letter2 in zip(word1, word2):\n                if letter1 not in translations or translations[letter1] != letter2:\n                    result.append(\"no\")\n                    break\n            else:\n                result.append(\"yes\")\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"5 4\\na b\\nc d\\ne f\\ng h\\ni j\\nk l\\nm n\\no p\\nwork\\npeople\\ncan the\") == \"yes\\nno\\nno\\nno\"",
        "num_ids": 2211
    },
    {
        "number": 4884,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    num_contestants, num_problems = map(int, stdin.split())\n    carrot_count = num_problems // num_contestants\n    return str(carrot_count)",
        "test": "assert solution(\"5 3\\ncarrots are good for your eyes\\ncarrots are a good source of vitamin A\\ncarrots are a good source of vitamin C\\ncarrots are a good source of vitamin K\\ncarrots are a good source of fiber\") == \"3\" ",
        "num_ids": 890
    },
    {
        "number": 4885,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into lines\n    lines = stdin.split(\"\\n\")\n\n    # Initialize the board with empty squares\n    board = [[\"\" for j in range(8)] for i in range(8)]\n\n    # Fill the board with pieces\n    for i in range(len(lines)):\n        for j in range(len(lines[i])):\n            if lines[i][j] != \" \":\n                board[i][j] = lines[i][j]\n\n    # Initialize lists for white and black pieces\n    white_pieces = []\n    black_pieces = []\n\n    # Loop through the board and add pieces to lists\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \"K\":\n                white_pieces.append(\"Ke\" + chr(ord(\"a\") + j) + str(i + 1))\n            elif board[i][j] == \"Q\":\n                white_pieces.append(\"Qd\" + chr(ord(\"a\") + j) + str(i + 1))\n            elif board[i][j] == \"R\":\n                if i == 0:\n                    white_pieces.append(\"Ra\" + chr(ord(\"a\") + j))\n                elif i == 7:\n                    white_pieces.append(\"Rh\" + chr(ord(\"a\") + j))\n            elif board[i][j] == \"B\":\n                if j == 0 or j == 2:\n                    white_pieces.append(\"Bc\" + chr(ord(\"a\") + j) + str(i + 1))\n                elif j == 5 or j == 7:\n                    white_pieces.append(\"Bf\" + chr(ord(\"a\") + j) + str(i + 1))\n            elif board[i][j] == \"N\":\n                if i == 1:\n                    white_pieces.append(\"Nb\" + chr(ord(\"a\") + j))\n                elif i == 6:\n                    white_pieces.append(\"Ng\" + chr(ord(\"a\") + j))\n                elif i == 7:\n                    white_pieces.append(\"Nc\" + chr(ord(\"a\") + j))\n            elif board[i][j] == \"P\":\n                if i == 1:\n                    white_pieces.append(\"a\" + str(i + 1))\n                elif i == 6:\n                    white_pieces.append(\"c\" + str(i + 1))\n                elif i == 7:\n                    white_pieces.append(\"e\" + str(i + 1))\n            elif board[i][j] == \"p\":\n                if i == 0:\n                    black_pieces.append(\"Ke\" + chr(ord(\"a\") + j))\n                elif i == 1:\n                    black_pieces.append(\"Qd\" + chr(ord(\"a\") + j))\n                elif i == 7:\n                    black_pieces.append(\"Ra\" + chr(ord(\"a\") + j))\n                elif i == 6:\n                    black_pieces.append(\"Rh\" + chr(ord(\"a\") + j))\n                elif i == 0:\n                    black_pieces.append(\"Bc\" + chr(ord(\"a\") + j))\n                elif i == 1:\n                    black_pieces.append(\"Bf\" + chr(ord(\"a\") + j))\n                elif i == 2:\n                    black_pieces.append(\"Nb\" + chr(ord(\"a\") + j))\n                elif i == 3:\n                    black_pieces.append(\"Ng\" + chr(ord(\"a\") + j))\n                elif i == 4:\n                    black_pieces.append(\"Nc\" + chr(ord(\"a\") + j))\n                elif i == 5:\n                    black_pieces.append(\"a\" + str(i + 1))\n                elif i == 6:\n                    black_pieces.append(\"c\" + str(i + 1))\n                elif i == 7:\n                    black_pieces.append(\"e\" + str(i + 1))\n\n    # Sort white pieces",
        "test": "assert solution(input_string) == expected_output",
        "num_ids": 3553
    },
    {
        "number": 4886,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    \n    if K == N:\n        return \"Your wish is granted!\"\n    elif K > N // 2:\n        return \"You will become a flying monkey!\"\n    else:\n        return \"Your wish is granted!\"",
        "test": "assert solution('8 3') == 'Your wish is granted!'",
        "num_ids": 683
    },
    {
        "number": 4887,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    area = int(stdin)\n    fence_length = area ** 0.5\n    return f\"{fence_length:.6f}\"  # round to 6 decimal places and return as string",
        "test": "assert solution(\"10000000000\") == \"1621514.928149\"",
        "num_ids": 660
    },
    {
        "number": 4888,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, T = map(int, lines[0].split())\n    tasks = list(map(int, lines[1].split()))\n    time_left = T\n    tasks_completed = 0\n\n    for task in tasks:\n        if time_left >= task:\n            time_left -= task\n            tasks_completed += 1\n        else:\n            break\n\n    return str(tasks_completed)",
        "test": "assert solution(\"6 180\\n45 30 55 20 80 20\") == \"4\" ",
        "num_ids": 1011
    },
    {
        "number": 4889,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    rods = list(map(int, stdin.split(\"\\n\")[1:]))\n    javelin_length = sum(rods) - (len(rods) - 1)\n    return str(javelin_length)\n\ninput_str = \"4\\n21\\n34\\n18\\n9\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"",
        "num_ids": 978
    },
    {
        "number": 4890,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split()[:4])\n    bottles = list(map(int, stdin.split()[4:]))\n    \n    # Check if it's possible to refill the fridge\n    if sum(bottles) + n > s * d:\n        return \"impossible\"\n    \n    # Calculate the probability of each slot\n    probabilities = [0] * s\n    for i in range(s):\n        if bottles[i] != 0:\n            probabilities[i] = 1 - (bottles[i] / (d - bottles[i]))\n        else:\n            probabilities[i] = 1\n    \n    # Calculate the number of bottles to place in each slot\n    bottle_count = [0] * s\n    bottle_count[0] = n\n    for i in range(1, s):\n        if probabilities[i] < probabilities[i - 1]:\n            bottle_count[i] = bottles[i - 1] - d + bottles[i]\n            bottle_count[i - 1] = d - bottle_count[i]\n        else:\n            bottle_count[i] = bottles[i - 1] - d + bottles[i]\n            bottle_count[i - 1] = d - bottle_count[i]\n    \n    # Check if all the next m students will get a cold soda\n    if sum(bottle_count) == m:\n        return ' '.join(map(str, bottle_count))\n    else:\n        return \"impossible\"",
        "test": "assert solution(\"3 1 2 1\\n1 0\") == \"impossible\"",
        "num_ids": 2439
    },
    {
        "number": 4891,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    pieces_count = [int(x) for x in stdin.split()]\n    required_pieces_count = [1, 1, 2, 2, 2, 8]\n    diff = [required - actual for required, actual in zip(required_pieces_count, pieces_count)]\n    return ' '.join(map(str, diff))",
        "test": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"",
        "num_ids": 1316
    },
    {
        "number": 4892,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    passwords = {}\n    for i in range(1, n+1):\n        password, prob = lines[i].split(\" \")\n        prob = float(prob)\n        passwords[password] = prob\n\n    # Calculate the expected number of attempts\n    total_prob = sum(passwords.values())\n    expected_attempts = 0\n    for password, prob in passwords.items():\n        expected_attempts += (total_prob - prob) / prob * prob\n\n    return str(expected_attempts)",
        "test": "assert solution(\"3\\n123456 0.5\\nqwerty 0.25\\npassword 0.25\") == \"2.0\"",
        "num_ids": 1439
    },
    {
        "number": 4893,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_min_distance(n: int, p: int, distances: List[int]) -> int:\n        distances.sort()\n        min_distance = 0\n        for i in range(1, n + 1):\n            min_distance += p * (i + 1)\n            if min_distance > distances[i - 1]:\n                return min_distance - p * (i)\n        return min_distance\n\n    lines = stdin.split(\"\\n\")\n    n, p = map(int, lines[0].split())\n    distances = list(map(int, lines[1].split()))\n\n    return str(calculate_min_distance(n, p, distances))",
        "test": "assert solution(\"3 1\\n1 2 4\") == \"1\"",
        "num_ids": 1430
    },
    {
        "number": 4894,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def note_to_staff(note: str, staff: str) -> str:\n        if len(note) == 1:\n            return staff.replace(\"-\", \"*\", 1)\n        else:\n            return staff.replace(\"-\", \"*\", int(note[1]) * 2)\n\n    notes = stdin.split()\n    staffs = [\"G:\", \"F:\", \"E:\", \"D:\", \"C:\", \"B:\", \"A:\", \"g:\", \"f:\", \"e:\", \"d:\", \"c:\", \"b:\", \"a:\"]\n    output = \"\"\n\n    for i, note in enumerate(notes):\n        if i % 5 == 0:\n            output += \"\\n\"\n        output += note_to_staff(note, staffs[i % 10])\n\n    return output",
        "test": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"G:                                                                \\nF: -------------------------------------*--------------------\\nE:      *   *             *   *        *   *   *\\nD: ----*-------**-----*-------------*-------*-----\\nC: * *  *  *  **       * *    *         ** **\\nB: --------------------------**-----------------*-----*\\nA:                             *             \\ng: -----------------------------------------------*----------\\nf:                                                    \\ne: --------------------------------------------------------\\nd:                                                    \\nc:                                                    \\nb:                                                    \\na: -----------------------------------------------------\\n\"",
        "num_ids": 2285
    },
    {
        "number": 4895,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    sticks = [int(x) for x in lines[1].split()]\n    sticks.sort()\n\n    for i in range(n - 2):\n        if sticks[i] + sticks[i + 1] > sticks[i + 2]:\n            return \"possible\"\n\n    return \"impossible\"",
        "test": "assert solution(\"3\\n1 1 1\") == \"possible\"",
        "num_ids": 1102
    },
    {
        "number": 4896,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    bricks = [int(x) for x in stdin.split()[1:]]\n    towers = 1\n    base = bricks[0]\n\n    for i in range(1, n):\n        if bricks[i] > base:\n            towers += 1\n            base = bricks[i]\n\n    return str(towers)",
        "test": "assert solution(\"10\\n3 3 3 3 3 3 3 3 3 3\") == \"1\"",
        "num_ids": 1039
    },
    {
        "number": 4897,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    runners = []\n    \n    for i in range(1, n + 1):\n        runner_name, a, b = lines[i].split()\n        runners.append((runner_name, float(a), float(b)))\n    \n    def time_for_team(team):\n        total_time = 0\n        for i, runner in enumerate(team, 1):\n            total_time += runner[1] if i == 1 else runner[2]\n        return total_time\n    \n    best_team = None\n    for team in itertools.permutations(runners):\n        team_time = time_for_team(team)\n        if best_team is None or team_time < time_for_team(best_team):\n            best_team = team\n    \n    return f\"{time_for_team(best_team):.2f}\\n{best_team[0][0]}\\n{best_team[1][0]}\\n{best_team[2][0]}\\n{best_team[3][0]}\" ",
        "test": "assert solution(\"6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE\" ",
        "num_ids": 3271
    },
    {
        "number": 4898,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    def get_min_room_count(minions: List[Tuple[int, int]]) -> int:\n        minions.sort(key=lambda x: x[1])\n        room_count = 1\n        last_room_temp = minions[0][1]\n        for i in range(1, len(minions)):\n            if minions[i][0] <= last_room_temp:\n                continue\n            room_count += 1\n            last_room_temp = minions[i][1]\n        return room_count\n\n    lines = stdin.splitlines()\n    num_minions = int(lines[0])\n    minions = [(int(lines[i].split()[0]), int(lines[i].split()[1])) for i in range(1, num_minions + 1)]\n\n    return str(get_min_room_count(minions))",
        "test": "assert solution(\"2\\n1 2\\n2 4\") == \"1\"",
        "num_ids": 1778
    },
    {
        "number": 4899,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.strip()\n    if len(input_string) > 1000:\n        return \"Invalid input. Length should be at most 1000.\"\n    \n    if len(input_string) < 3:\n        return \"Invalid input. Length should be at least 3.\"\n    \n    if not input_string.endswith(\"ey\"):\n        return \"Invalid input. The input should end with 'ey'.\"\n    \n    if not input_string.startswith(\"he\"):\n        return \"Invalid input. The input should start with 'he'.\"\n    \n    e_count = input_string.count(\"e\")\n    new_string = input_string[:2] + e_count * \"e\" + \"y\"\n    return new_string",
        "test": "assert solution(\"hey\") == \"heey\"",
        "num_ids": 768
    },
    {
        "number": 4900,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    distance_table = []\n    for i in range(n):\n        distance_table.append(list(map(int, lines[i+1].split())))\n    \n    roads = []\n    for i in range(1, n):\n        for j in range(i+1, n):\n            if distance_table[i][j] != 0:\n                roads.append((i+1, j+1))\n    \n    return \"\\n\".join(f\"{u} {v}\" for u, v in roads)",
        "test": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\\n\" ",
        "num_ids": 2517
    },
    {
        "number": 4901,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    # Divide the message in half\n    half_len = len(stdin) // 2\n    first_half = stdin[:half_len]\n    second_half = stdin[half_len:]\n\n    # Calculate the rotation value for each half\n    rotation_value_first_half = sum(ord(char) - ord('A') for char in first_half)\n    rotation_value_second_half = sum(ord(char) - ord('A') for char in second_half)\n\n    # Rotate each character in the first half by the rotation value\n    rotated_first_half = \"\"\n    for char in first_half:\n        new_char = chr(((ord(char) - ord('A') + rotation_value_first_half) % 26) + ord('A'))\n        rotated_first_half += new_char\n\n    # Rotate each character in the second half by the rotation value\n    rotated_second_half = \"\"\n    for char in second_half:\n        new_char = chr(((ord(char) - ord('A') + rotation_value_second_half) % 26) + ord('A'))\n        rotated_second_half += new_char\n\n    # Rotate each character in the first half by the corresponding character in the second half\n    decrypted_message = \"\"\n    for i in range(half_len):\n        new_char = chr(((ord(rotated_first_half[i]) - ord('A') + ord(rotated_second_half[i]) - ord('A')) % 26) + ord('A'))\n        decrypted_message += new_char\n\n    return decrypted_message",
        "test": "assert solution(\"EWPGAJRB\") == \"ABCD\"",
        "num_ids": 1964
    },
    {
        "number": 4902,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # Remove all non-letter characters and convert the string to lowercase\n    input_string = \"\".join(c for c in stdin.lower() if c.isalpha())\n    \n    # Find all palindromes in the string\n    palindromes = [input_string[i:j] for i in range(len(input_string)) for j in range(i+1, len(input_string)+1) if input_string[i:j] == input_string[i:j][::-1]]\n    \n    # Find all anagrams of the palindromes\n    anagrams = []\n    for palindrome in palindromes:\n        for i in range(len(input_string)):\n            for j in range(i+1, len(input_string)+1):\n                substring = input_string[i:j]\n                if substring == palindrome:\n                    anagrams.append(substring)\n    \n    # Calculate the minimum number of characters to remove\n    min_chars_to_remove = len(input_string)\n    for anagram in anagrams:\n        chars_to_remove = len(input_string) - len(anagram)\n        if chars_to_remove < min_chars_to_remove:\n            min_chars_to_remove = chars_to_remove\n    \n    return min_chars_to_remove",
        "test": "assert solution(\"abcdcba\") == 0",
        "num_ids": 1392
    },
    {
        "number": 4903,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    jon_aah, doctor_aah = stdin.split(\"\\n\")\n    if jon_aah.count(\"a\") >= doctor_aah.count(\"a\"):\n        return \"go\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"aaah\\naaaaaah\") == \"no\"",
        "num_ids": 666
    },
    {
        "number": 4904,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    alice_score = 0\n    barbara_score = 0\n    prev_score = 0\n\n    for i in range(0, len(stdin), 2):\n        player = stdin[i]\n        points = int(stdin[i+1])\n\n        if player == \"A\":\n            alice_score += points\n        else:\n            barbara_score += points\n\n        if alice_score >= 11 or barbara_score >= 11:\n            if (alice_score - barbara_score) >= 2:\n                return \"A\"\n            elif (barbara_score - alice_score) >= 2:\n                return \"B\"\n\n        if alice_score == barbara_score and alice_score == 10:\n            if alice_score - prev_score >= 2:\n                return \"A\"\n            elif barbara_score - prev_score >= 2:\n                return \"B\"\n            else:\n                prev_score = alice_score\n\n    return \"A\" if alice_score > barbara_score else \"B\"",
        "test": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"",
        "num_ids": 1955
    },
    {
        "number": 4905,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, M, A, B, K, G, streets, time_needed = parse_input(stdin)\n    blocked_streets = get_blocked_streets(N, M, K, G, streets, time_needed)\n    return str(get_least_time(A, B, blocked_streets, time_needed))\n\ndef",
        "test": "assert solution(\"10 10\\n1 10 10 4\\n1 2 2\\n2 3 4\\n3 4 10\\n4 5 8\\n5 6 6\\n6 7 2\\n7 8 4\\n8 9 3\\n9 10 8\") == \"26\" ",
        "num_ids": 1964
    },
    {
        "number": 4906,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    operation, message = stdin.split(\" \", 1)\n    if operation == \"E\":\n        return encode(message)\n    else:\n        return decode(message)\n\ndef",
        "test": "assert solution(\"D H3e2l3o1W1o3r4l2d1!2\") == \"HHHeellloWooorrrrlld!!\"",
        "num_ids": 1234
    },
    {
        "number": 4907,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    # Alice starts the game and plays optimally\n    if n % 3 == 2:\n        return \"Alice\\n1\"\n\n    # Bob wins\n    return \"Bob\\n\"",
        "test": "assert solution(\"2\") == \"Alice\\n1\"",
        "num_ids": 481
    },
    {
        "number": 4908,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b == c:\n        return f\"{a}+{b}={c}\"\n    elif a - b == c:\n        return f\"{a}-{b}={c}\"\n    elif a * b == c:\n        return f\"{a}*{b}={c}\"\n    elif a / b == c:\n        return f\"{a}/{b}={c}\"\n    else:\n        return \"No solution found\"",
        "test": "assert solution(\"5 3 8\") == \"5+3=8\"",
        "num_ids": 1086
    },
    {
        "number": 4909,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    n, *direct_connections = map(int, stdin.split())\n    if n > 1:\n        for i in range(1, n):\n            if direct_connections[i] == 0:\n                return \"NO\"\n            for j in range(i):\n                if direct_connections[j] >= i - j:\n                    break\n            else:\n                return \"NO\"\n        return \"YES\"\n    else:\n        return \"YES\"",
        "test": "assert solution(\"6\\n1 2 1 2 1 1\") == \"YES\"",
        "num_ids": 1325
    },
    {
        "number": 4910,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n', 1)[0])\n    categories = dict()\n    for i in range(N):\n        category = stdin.split('\\n', i + 2)[i + 1]\n        if category not in categories:\n            categories[category] = 1\n        else:\n            categories[category] += 1\n\n    max_categories = []\n    max_count = 0\n    for category, count in categories.items():\n        if count > max_count:\n            max_count = count\n            max_categories = [category]\n        elif count == max_count:\n            max_categories.append(category)\n\n    return '\\n'.join(sorted(max_categories)) ",
        "test": "assert solution(\"8\\nwolfman\\nwitch\\nmonster\\ngoblin\\nwitch\\nmonster\\nmonster\\nmonster\\nmonster\\nmonster\") == \"monster\" ",
        "num_ids": 1337
    },
    {
        "number": 4911,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    lines = stdin.split('\\n')\n    attributes = lines[0].split()\n    songs = []\n    for line in lines[1:-1]:\n        songs.append(line.split())\n    \n    # Sort the songs based on the given commands\n    commands = lines[-1].split('\\n')\n    for command in commands:\n        # Sort the songs based on the given command\n        sorted_songs = sorted(songs, key=lambda x: x[attributes.index(command)])\n        \n        # Print the sorted songs\n        print(f\"{command} {' '.join(attributes)}\")\n        for song in sorted_songs:\n            print(' '.join(song))\n        print()",
        "test": "assert solution(",
        "num_ids": 2078
    },
    {
        "number": 4912,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    h, w, n = map(int, stdin.split()[:3])\n    bricks = list(map(int, stdin.split()[3:]))\n    \n    bricks_used = 0\n    for i in range(h):\n        if i == h - 1:\n            break\n        layer_width = 0\n        for j in range(n):\n            if bricks_used >= n:\n                return \"NO\"\n            if layer_width + bricks[bricks_used] <= w:\n                layer_width += bricks[bricks_used]\n                bricks_used += 1\n            else:\n                return \"NO\"\n    \n    return \"YES\"",
        "test": "assert solution(\"2 2 1\\n1\\n\") == \"YES\" ",
        "num_ids": 1448
    },
    {
        "number": 4913,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    vaccinated = []\n    control = []\n    \n    for i in range(1, N+1):\n        line = lines[i]\n        if line[0] == 'Y':\n            vaccinated.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    vaccinated_count = len(vaccinated)\n    control_count = len(control)\n    infection_rates = {\n        'A': 0,\n        'B': 0,\n        'C': 0\n    }\n    \n    for person in vaccinated:\n        for i, infection in enumerate(person):\n            if infection == 'Y':\n                infection_rates[chr(ord('A') + i)] += 1\n    \n    for person in control:\n        for i, infection in enumerate(person):\n            if infection == 'Y':\n                infection_rates[chr(ord('A') + i)] += 1\n    \n    for key in infection_rates:\n        infection_rates[key] /= (vaccinated_count + control_count)\n        infection_rates[key] *= 100\n    \n    vaccine_efficacy = []\n    \n    for key in infection_rates:\n        if infection_rates[key] < 100:\n            vaccine_efficacy.append(f\"Not Effective\")\n        else:\n            vaccine_efficacy.append(f\"{infection_rates[key]:.2f}\")\n    \n    return '\\n'.join(vaccine_efficacy)\n\ninput_str = \"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\\nYYNY\"\nprint(solution(input_str)) ",
        "test": "assert solution(input()) == \"Not Effective\\n66.666667\\n50.000000\"",
        "num_ids": 3400
    },
    {
        "number": 4914,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    correct_answers = stdin\n    n = len(correct_answers)\n\n    adrian_sequence = \"ABCA\" * (n // 3) + \"AB\" + \"A\" if n % 3 != 0 else \"ABCA\" * (n // 3)\n    bruno_sequence = \"BACB\" * (n // 3) + \"AB\" + \"A\" if n % 3 != 0 else \"BACB\" * (n // 3)\n    goran_sequence = \"CCAA\" * (n // 3) + \"AB\" + \"A\" if n % 3 != 0 else \"CCAA\" * (n // 3)\n\n    adrian_count = sum([1 if adrian_sequence[i] == correct_answers[i] else 0 for i in range(n)])\n    bruno_count = sum([1 if bruno_sequence[i] == correct_answers[i] else 0 for i in range(n)])\n    goran_count = sum([1 if goran_sequence[i] == correct_answers[i] else 0 for i in range(n)])\n\n    result = max(adrian_count, bruno_count, goran_count)\n    names = []\n    if result == adrian_count:\n        names.append(\"Adrian\")\n    if result == bruno_count:\n        names.append(\"Bruno\")\n    if result == goran_count:\n        names.append(\"Goran\")\n\n    names.sort()\n\n    return f\"{result}\\n{' '.join(names)}\"",
        "test": "assert solution(\"10\\nACBCABACBCA\") == \"7\\nBruno\\nGoran\\nAdrian\" ",
        "num_ids": 2270
    },
    {
        "number": 4915,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    log = {}\n    for line in stdin.split('\\n')[:-1]:\n        minutes, problem, result = line.split()\n        minutes = int(minutes)\n        if problem not in log:\n            log[problem] = {}\n        log[problem][minutes] = result\n\n    problems_solved = set()\n    total_time = 0\n    for problem in log:\n        time_solved = max(log[problem])\n        result = log[problem][time_solved]\n        if result == 'right':\n            problems_solved.add(problem)\n            total_time += time_solved\n        else:\n            for minute in sorted(log[problem].keys()):\n                if minute <= time_solved and log[problem][minute] == 'right':\n                    total_time += minute\n                    break\n\n    return f\"{len(problems_solved)} {total_time}\"",
        "test": "assert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n-1\") == \"4 502\" ",
        "num_ids": 1902
    },
    {
        "number": 4916,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    installation = [list(map(int, line.split())) for line in stdin.split('\\n')[1:1+n]]\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    path = [[float('inf') for _ in range(n)] for _ in range(n)]\n\n    def shortest_path(i: int, j: int) -> int:\n        if i < 0 or i >= n or j < 0 or j >= n:\n            return float('inf')\n        if visited[i][j]:\n            return path[i][j]\n        visited[i][j] = True\n\n        if installation[i][j] == k:\n            return 0\n\n        options = [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]\n        min_distance = float('inf')\n        for option in options:\n            distance = shortest_path(*option)\n            if distance != float('inf'):\n                min_distance = min(min_distance, distance)\n\n        path[i][j] = min_distance + 1\n        return path[i][j]\n\n    start_i, start_j = 0, 0\n    for i in range(n):\n        for j in range(n):\n            if installation[i][j] == 1:\n                start_i, start_j = i, j\n                break\n    result = shortest_path(start_i, start_j)\n    return str(result) if result != float('inf') else '-1'\n\ninput_str = '''10 5\n5 1 3 4 2 4 2 1 2 1\n4 5 3 4 1 5 3 1 1 4\n4 2 4 1 5 4 5 2 4 1\n5 2 1 5 5 3 5 2 3 2\n5 5 2 3 2 3 1 5 5 5\n3 4 2 4 2 2 4 4 2 3\n1 5 1 1 2 5 4 1 5 3\n2 2 4 1 2 5 1 4 3 5\n5 3 2 1 4 3 5 2 3 1\n3 4 2 5 2 5 3 4 4 2'''\n\nprint(solution(input_str)) ",
        "test": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\") == \"5\" ",
        "num_ids": 3460
    },
    {
        "number": 4917,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    pots = []\n\n    for i in range(1, n + 1):\n        a, b = lines[i].split(\" \")\n        pots.append([int(a), int(b)])\n\n    for pot in pots:\n        if pot[0] != 0:\n            return \"edward is right\"\n\n    return \"gunilla has a point\"",
        "test": "assert solution(\"2\\n1 3\\n1 7\") == \"edward is right\"",
        "num_ids": 1247
    },
    {
        "number": 4918,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[0:2])\n    queries = stdin.split()[2:]\n    guests = [[] for _ in range(n + 1)]\n    visited = [False] * (n + 1)\n\n    def dfs(guest, group):\n        visited[guest] = True\n        guests[group].append(guest)\n        for i in range(n + 1):\n            if not visited[i] and guests[i]:\n                if guest in guests[i]:\n                    guests[i] += guests[group]\n                    guests[group] = []\n                else:\n                    dfs(i, group)\n\n    for query in queries:\n        if query[0] == 't':\n            a, b = map(int, query[1:].split())\n            if guests[a]:\n                dfs(b, a)\n            elif guests[b]:\n                dfs(a, b)\n            else:\n                guests[a].append(a)\n                guests[b].append(b)\n        else:\n            a = int(query[1:])\n            for group in guests:\n                if a in group:\n                    return str(len(group))\n\n    return \"Invalid query\"",
        "test": "assert solution(\"5 4\\ns 2\\nt 1 2\\ns 1\\ns 2\\ns 3\\ns 4\\ns 5\") == \"5\\n1\\n1\\n1\\n1\" ",
        "num_ids": 1908
    },
    {
        "number": 4919,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, trips, q, queries = stdin.split(\"\\n\")\n    n = int(n)\n    q = int(q)\n    trips_dict = {}\n    for trip in trips.split(\"\\n\"):\n        country, year = trip.split()\n        year = int(year)\n        if country not in trips_dict:\n            trips_dict[country] = [year]\n        else:\n            trips_dict[country].append(year)\n\n    for query in queries.split(\"\\n\"):\n        country, k = query.split()\n        k = int(k)\n        year = trips_dict[country][k-1]\n        print(year)\n\nstdin = '''4\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999\n3\nSweden 1\nIceland 1\nIceland 2'''\nsolution(stdin) ",
        "test": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1982\\n2016\\n\"",
        "num_ids": 1384
    },
    {
        "number": 4920,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize variables to store the number of good itineraries\n    good_itineraries = 0\n    # Iterate over the input string\n    for i in range(len(stdin) - 1):\n        # If the current and next events are of different types and are unique in the sequence, increment good_itineraries\n        if stdin[i] != stdin[i+1] and stdin.count(stdin[i]) == 1 and stdin.count(stdin[i+1]) == 1:\n            good_itineraries += 1\n    return str(good_itineraries)",
        "test": "assert solution(\"aaaaaaaaaa\") == \"0\"",
        "num_ids": 1320
    },
    {
        "number": 4921,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    seen_words = set()\n    result = []\n    \n    for word in words:\n        if word.lower() not in seen_words:\n            seen_words.add(word.lower())\n            result.append(word)\n        else:\n            result.append(\".\")\n            \n    return \" \".join(result)",
        "test": "assert solution(\"Engineering will save the world from inefficiency\") == \"Engineering will save the world from inefficiency\"",
        "num_ids": 1742
    },
    {
        "number": 4922,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split()[:2])\n    clauses = [list(map(int, line.strip().split())) for line in stdin.split(\"\\n\")[1:]]\n\n    if len(clauses) < 8:\n        return \"unsatisfactory\"\n\n    return \"satisfactory\"",
        "test": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"",
        "num_ids": 1843
    },
    {
        "number": 4923,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, outcomes = stdin.splitlines()\n    n = int(n)\n    outcomes = list(map(int, outcomes.split()))\n    \n    for i in range(len(outcomes)):\n        if outcomes.count(outcomes[i]) == 1:\n            return str(i+1)\n    \n    return \"none\"",
        "test": "assert solution(\"2\\n1 2\") == \"1\"",
        "num_ids": 1080
    },
    {
        "number": 4924,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    current_time, explosion_time = stdin.split(\"\\n\")\n    current_hour, current_minute, current_second = map(int, current_time.split(\":\"))\n    target_hour, target_minute, target_second = map(int, explosion_time.split(\":\"))\n\n    total_seconds_current = current_hour * 3600 + current_minute * 60 + current_second\n    total_seconds_target = target_hour * 3600 + target_minute * 60 + target_second\n\n    if total_seconds_target < total_seconds_current:\n        total_seconds_target += 24 * 3600\n\n    time_delta = total_seconds_target - total_seconds_current\n\n    hours = time_delta // 3600\n    time_delta %= 3600\n    minutes = time_delta // 60\n    seconds = time_delta % 60\n\n    return f\"{hours:02d}:{minutes:02d}:{seconds:02d}\"\n\ninput_data = \"20:00:00\\n04:00:00\"\nprint(solution(input_data)) ",
        "test": "assert solution(\"12:30:45\\n12:30:46\") == \"00:00:01\"",
        "num_ids": 2014
    },
    {
        "number": 4925,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    l, n = map(int, stdin.split())\n    k = 1\n    while True:\n        if n <= k * l:\n            return str(k)\n        k += 1",
        "test": "assert solution(\"100 10\") == \"1\"",
        "num_ids": 760
    },
    {
        "number": 4926,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    e = 1\n    factorial = 1\n    for i in range(n):\n        factorial *= i + 1\n        e += 1 / factorial\n        \n    return str(e)",
        "test": "assert solution('10000') == '2.7182818284590452' ",
        "num_ids": 987
    },
    {
        "number": 4927,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = map(int, stdin.split())\n    if N % 2 == 0:\n        if P + Q <= N:\n            return \"paul\"\n        else:\n            return \"opponent\"\n    else:\n        if P <= N:\n            return \"paul\"\n        else:\n            return \"opponent\"",
        "test": "assert solution(\"1000000000 1000000000 1000000000\") == \"opponent\" ",
        "num_ids": 720
    },
    {
        "number": 4928,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    max_pieces = 0\n\n    for i in range(n+1):\n        for j in range(n+1):\n            pieces = 2 * i * j\n            max_pieces = max(max_pieces, pieces)\n\n    return str(max_pieces)",
        "test": "assert solution(\"1\") == \"2\" ",
        "num_ids": 622
    },
    {
        "number": 4929,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    def reverse_case(password: str) -> str:\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in password])\n\n    def can_form(password: str, stored_password: str) -> bool:\n        return password in [stored_password, stored_password[1:], stored_password[:-1]]\n\n    stored_password, attempted_password = stdin.strip().split('\\n')\n\n    if attempted_password == stored_password or can_form(attempted_password, stored_password):\n        return 'Yes'\n    elif attempted_password.lower() == stored_password.lower():\n        return 'Yes'\n    elif reverse_case(attempted_password) == stored_password:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(\"password123\\npassword123\") == \"Yes\"",
        "num_ids": 1346
    },
    {
        "number": 4930,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    decoded_words = []\n\n    for word in words:\n        decoded_word = \"\"\n        for i, char in enumerate(word):\n            if char in \"aeiou\":\n                decoded_word += char + \"p\" + char\n            else:\n                decoded_word += char\n        decoded_words.append(decoded_word)\n\n    return \" \".join(decoded_words)",
        "test": "assert solution(\"repelepenapa\") == \"ravela\"",
        "num_ids": 1017
    },
    {
        "number": 4931,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n\n    if x == 0:\n        return \"ALL GOOD\"\n\n    if y >= 100:\n        return \"IMPOSSIBLE\"\n\n    delta = x / (y - 1)\n    result = -x / y\n\n    if abs(delta) <= 1e-6:\n        return str(result)\n    else:\n        return \"IMPOSSIBLE\"",
        "test": "assert solution(\"0 1\") == \"ALL GOOD\" ",
        "num_ids": 880
    },
    {
        "number": 4932,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    dogs_behaviour, arrival_times = stdin.split(\"\\n\")\n    A, B, C, D = map(int, dogs_behaviour.split())\n    P, M, G = map(int, arrival_times.split())\n\n    def get_dog_attack_times(behaviour: int) -> list:\n        attack_times = []\n        time = 1\n        while True:\n            attack_times.append(time)\n            time += behaviour\n            time += (60 - behaviour)\n        return attack_times\n\n    dog1_attack_times = get_dog_attack_times(A)\n    dog2_attack_times = get_dog_attack_times(C)\n\n    def get_attacked_dogs(arrival_time: int) -> str:\n        dog1_attacked = 1 in [time for time in dog1_attack_times if time <= arrival_time]\n        dog2_attacked = 1 in [time for time in dog2_attack_times if time <= arrival_time]\n        return \"both\" if dog1_attacked and dog2_attacked else \"one\" if dog1_attacked or dog2_attacked else \"none\"\n\n    return \"\\n\".join([get_attacked_dogs(time) for time in [P, M, G]])\n\nstdin = \"2 2 3 3\\n1 3 4\"\nprint(solution(stdin)) ",
        "test": "assert solution('3 4 5 6\\n7 8 9') == 'none\\nboth\\none\\n'",
        "num_ids": 2569
    },
    {
        "number": 4933,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    d = c - (c - a) // 2\n    return str(d)",
        "test": "assert solution(\"-2 0 2\") == \"0\"",
        "num_ids": 647
    },
    {
        "number": 4934,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    h, v = map(int, stdin.split())\n    ladder_length = (h ** 2 - (h - 1) ** 2) / (2 * math.tan(math.radians(v)))\n    return str(math.ceil(ladder_length))",
        "test": "assert solution(\"1000 45\") == \"1000\"",
        "num_ids": 778
    },
    {
        "number": 4935,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    n = int(input_lines[0].split()[0])\n    g = float(input_lines[0].split()[1])\n    velocities = []\n\n    for line in input_lines[1:]:\n        d, theta = map(float, line.split())\n        theta = math.radians(theta)\n        velocity = (g * d) / (math.cos(theta) * math.sin(theta))\n        velocities.append(velocity)\n\n    return \"\\n\".join(str(velocity) for velocity in velocities)\n\ndef",
        "test": "assert solution(\"1 10\\n100 90\") == \"20.0\\n\" ",
        "num_ids": 1762
    },
    {
        "number": 4936,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    temperatures = [int(x) for x in stdin.splitlines()[1].split()]\n    best_day = 0\n    best_temp = float('inf')\n    \n    for day in range(1, n-1):\n        current_temp = max(temperatures[day-1], temperatures[day+1])\n        if current_temp < best_temp:\n            best_day = day\n            best_temp = current_temp\n            \n    return f\"{best_day} {best_temp}\"",
        "test": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"",
        "num_ids": 1296
    },
    {
        "number": 4937,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, a = map(int, lines[0].split())\n    e = list(map(int, lines[1].split()))\n    \n    # sort the ships Finni has in descending order\n    e.sort(reverse=True)\n    \n    # initialize the number of wins\n    wins = 0\n    \n    # loop through the solar systems and compare ships\n    for i in range(n):\n        if a >= e[i]:\n            wins += 1\n            a -= e[i]\n        else:\n            break\n    \n    return str(wins)",
        "test": "assert solution(\"2 6\\n1 2 3\") == \"2\"",
        "num_ids": 1271
    },
    {
        "number": 4938,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    max_diff, queue = stdin.split('\\n')\n    max_diff = int(max_diff)\n    \n    women = 0\n    men = 0\n    count = 0\n    \n    for gender in queue:\n        if gender == 'W':\n            women += 1\n        else:\n            men += 1\n        \n        diff = abs(women - men)\n        if diff <= max_diff:\n            count += 1\n        else:\n            return str(count)\n    \n    return str(count)",
        "test": "assert solution(\"1\\nMWWMWMMWM\") == \"9\"",
        "num_ids": 1114
    },
    {
        "number": 4939,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    def process_throw_command(start_index, current_index, command):\n        if command.isdigit():\n            command = int(command)\n            if command == 0:\n                return current_index\n            return (current_index + command) % n\n        elif command.startswith(\"undo\"):\n            m = int(command.split()[-1])\n            return (current_index - m) % n\n        else:\n            raise ValueError(\"Invalid command\")\n\n    n, k = map(int, stdin.split()[:2])\n    commands = stdin.split()[2:]\n    current_index = 0\n\n    for command in commands:\n        current_index = process_throw_command(0, current_index, command)\n\n    return str(current_index)",
        "test": "assert solution(\"1 1\\n0\") == \"0\"",
        "num_ids": 1463
    },
    {
        "number": 4940,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    P = [list(map(int, stdin.split()[i:i+M])) for i in range(1, N*M+1, M)]\n    \n    time = [0]*N\n    available = [i for i in range(N)]\n    \n    for i in range(M):\n        P_sorted = sorted([(P[j][i], j) for j in available])\n        for p, j in P_sorted:\n            time[j] += p\n            available.remove(j)\n    \n    return ' '.join(map(str, time))",
        "test": "assert solution(\"2 1\\n1 2\") == \"2 3\" ",
        "num_ids": 1693
    },
    {
        "number": 4941,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n = int(input_lines[0])\n    dutch_sentence = input_lines[1:n+1]\n    m = int(input_lines[n+1])\n    dictionary = {}\n\n    for i in range(n+2, len(input_lines)):\n        word, translation, is_correct = input_lines[i].split()\n        dictionary[word] = {\"translation\": translation, \"is_correct\": is_correct}\n\n    english_sentence = []\n    for word in dutch_sentence:\n        english_sentence.append(dictionary[word][\"translation\"])\n\n    correct_translations = 0\n    incorrect_translations = 0\n    for i in range(len(english_sentence)):\n        if dictionary[dutch_sentence[i]][\"is_correct\"] == \"correct\":\n            correct_translations += 1\n        else:\n            incorrect_translations += 1\n\n    if correct_translations == len(english_sentence):\n        return \" \".join(english_sentence) + \"\\ncorrect\"\n    else:\n        return str(correct_translations) + \" correct\\n\" + str(incorrect_translations) + \" incorrect\" ",
        "test": "assert solution(\"5\\nlets play\\n3\\nlets 1\\nplay 1\\nlets_play 1\") == \"1 correct\\n2 incorrect\" ",
        "num_ids": 2396
    },
    {
        "number": 4942,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    tree_count = int(lines[0])\n    tree_days = list(map(int, lines[1].split()))\n    \n    total_days = max(tree_days)\n    max_days = 0\n    \n    for i in range(tree_count):\n        max_days += (tree_days[i] - (total_days - tree_days[i]))\n        \n    return str(max_days + 1)",
        "test": "assert solution(\"1\\n5\") == \"6\"  # Example 3",
        "num_ids": 1071
    },
    {
        "number": 4943,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    def read_input(stdin: str) -> tuple:\n        lines = stdin.splitlines()\n        num_corners = int(lines[0])\n        points = []\n        for i in range(1, num_corners + 1):\n            x, y = map(float, lines[i].split())\n            points.append((x, y))\n        target_area = int(lines[num_corners + 1])\n        return num_corners, points, target_area\n\n    def find_center(points: list) -> tuple:\n        x_sum = 0\n        y_sum = 0\n        for x, y in points:\n            x_sum += x\n            y_sum += y\n        return x_sum / len(points), y_sum / len(points)\n\n    def resize_polygon(points: list, target_area: int) -> list:\n        num_corners = len(points)\n        if num_corners < 3:\n            return []\n\n        cx, cy = find_center(points)\n        max_distance = 0\n        for x, y in points:\n            distance = ((x - cx) ** 2 + (y - cy) ** 2) ** 0.5\n            if distance > max_distance:\n                max_distance = distance\n\n        scale_factor = (target_area / (0.5 * max_distance ** 2)) ** 0.5\n        resized_points = []\n        for x, y in points:\n            new_x = cx + scale_factor * (x - cx)\n            new_y = cy + scale_factor * (y - cy)\n            resized_points.append((new_x, new_y))\n        return resized_points\n\n    num_corners, points, target_area = read_input(stdin)\n    resized_points = resize_polygon(points, target_area)\n\n    for x, y in resized_points:\n        print(f\"{x:.6f} {y:.6f}\")",
        "test": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\\n\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\\n\"",
        "num_ids": 3572
    },
    {
        "number": 4944,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 1:\n        return \"1\"\n\n    days = 1\n    new_printers = 1\n\n    while n > 1:\n        if new_printers > n:\n            days += 1\n            new_printers = 1\n            n -= 1\n        else:\n            days += 1\n            new_printers += 1\n            n -= new_printers\n\n    return str(days)",
        "test": "assert solution('1') == '1'",
        "num_ids": 640
    },
    {
        "number": 4945,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    # split the input into lines\n    lines = stdin.split(\"\\n\")\n\n    # parse input\n    a, b = map(int, lines[0].split())\n    m, sigma = map(int, lines[1].split())\n\n    # check if constraints are satisfied\n    if a <= 0 or b <= 0 or m < 2 or sigma < 2:\n        return \"Invalid input\"\n\n    # find the maximum rent\n    max_rent = max(a * x + b * y for x in range(1, m) for y in range(1, m - x + 1) if 2 * x + y >= sigma)\n\n    return str(max_rent)",
        "test": "assert solution(\"3 1\\n12 16\") == \"34\"",
        "num_ids": 955
    },
    {
        "number": 4946,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    languages = list(map(int, lines[1].split()))\n    \n    # Calculate the awkwardness level\n    awkwardness = n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, abs(i - j))\n    \n    return str(awkwardness)",
        "test": "assert solution(\"4\\n1 2 3 1\") == \"3\"",
        "num_ids": 1433
    },
    {
        "number": 4947,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    paces_conversion_ratio = 1000 * 5280 / 4854\n    roman_paces = int(x * paces_conversion_ratio + 0.5)\n    return str(roman_paces)",
        "test": "assert solution(\"1.0\") == \"1088\"",
        "num_ids": 731
    },
    {
        "number": 4948,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()[:2]))\n    holes = [list(map(int, line.split())) for line in stdin.split('\\n')[1:1+n]]\n    cut_z = 0\n    cut_thickness = 0\n    slice_thicknesses = []\n    while len(slice_thicknesses) < s:\n        min_thickness = float('inf')\n        for hole in holes:\n            r, x, y, z = hole\n            if z <= cut_z:\n                continue\n            d = ((x-50)**2 + (y-50)**2)**0.5\n            if d <= r:\n                min_thickness = min(min_thickness, r)\n        if min_thickness == float('inf'):\n            break\n        cut_thickness += min_thickness\n        slice_thicknesses.append(cut_thickness)\n        cut_z += 100\n    if len(slice_thicknesses) == s:\n        return '\\n'.join(f\"{t:.6f}\" for t in slice_thicknesses)\n    else:\n        return \"Impossible\"",
        "test": "assert solution(\"3 4\") == \"25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\\n\"",
        "num_ids": 2807
    },
    {
        "number": 4949,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    dimensions = stdin.split()\n    n = int(dimensions[0])\n    w, h = int(dimensions[1]), int(dimensions[2])\n    matches = [int(x) for x in stdin.split('\\n')[1:]]\n\n    # Define function to check if match fits in box\n    def match_fits(match_length, box_width, box_height):\n        return match_length <= box_width and match_length <= box_height\n\n    # Check if each match fits in the box\n    output = \"\"\n    for match in matches:\n        if match_fits(match, w, h):\n            output += \"DA\\n\"\n        else:\n            output += \"NE\\n\"\n\n    return output\n",
        "test": "assert solution(\"1 5 5\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\\n\"",
        "num_ids": 1571
    },
    {
        "number": 4950,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    distances = []\n    times = []\n\n    for i in range(1, n+1):\n        t, d = map(int, lines[i].split())\n        times.append(t)\n        distances.append(d)\n\n    max_speed = 0\n    for i in range(1, n):\n        delta_time = times[i] - times[i-1]\n        delta_distance = distances[i] - distances[i-1]\n        speed = delta_distance / delta_time\n        max_speed = max(max_speed, int(speed))\n\n    return str(max_speed)",
        "test": "assert solution(\"2\\n0 0\\n7 42\") == \"6\"",
        "num_ids": 1523
    },
    {
        "number": 4951,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    lines = lines[1:]\n    for i in range(n):\n        assumptions, conclusion = lines[i].split(\"->\")\n        assumptions = assumptions.split()\n        if not assumptions:\n            axiom = conclusion.strip()\n            if not axiom.isalpha() or not axiom.isupper() or not (1 <= len(axiom) <= 5):\n                return str(i+1)\n        else:\n            assumptions = [a.strip() for a in assumptions]\n            for assumption in assumptions:\n                if not assumption.isalpha() or not assumption.isupper() or not (1 <= len(assumption) <= 5):\n                    return str(i+1)\n            conclusion = conclusion.strip()\n            if not conclusion.isalpha() or not conclusion.isupper() or not (1 <= len(conclusion) <= 5):\n                return str(i+1)\n    return \"correct\"",
        "test": "assert solution(\"1\\nA -> B\\nA -> C\\nB -> D\\nC -> D\") == \"correct\"",
        "num_ids": 1650
    },
    {
        "number": 4952,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    candidates = {}\n    for line in stdin.split('\\n'):\n        if line == \"***\":\n            break\n        candidates[line] = candidates.get(line, 0) + 1\n\n    max_votes = max(candidates.values())\n    winners = [name for name, votes in candidates.items() if votes == max_votes]\n\n    if len(winners) == 1:\n        return winners[0]\n    else:\n        return \"Runoff!\"",
        "test": "assert solution(\"David Johnson\\nBarbara Skinner\\nDavid Johnson\\nBarbara Skinner\\nDavid Johnson\\nBarbara Skinner\\n***\") == \"Runoff!\"",
        "num_ids": 2024
    },
    {
        "number": 4953,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    characters = []\n    \n    for i in range(1, n+1):\n        name, language, *additional_languages = lines[i].split()\n        characters.append((name, language, set(additional_languages)))\n    \n    def can_converse(char1, char2):\n        language1, language2 = char1[1], char2[1]\n        for character in characters:\n            if language1 in character[2] and language2 in character[2]:\n                return True\n        return False\n    \n    def check_converse_all_pairs(characters_to_leave):\n        for i in range(n):\n            for j in range(n):\n                if i == j or (i, j) in characters_to_leave:\n                    continue\n                if not can_converse(characters[i], characters[j]):\n                    return False\n        return True\n    \n    for i in range(1, n+1):\n        if check_converse_all_pairs(set((i,))):\n            return str(1)\n    \n    for i in range(1, n-1):\n        for j in range(i+1, n):\n            if check_converse_all_pairs(set((i, j))):\n                return str(2)\n    \n    return str(n)",
        "test": "assert solution(\"2\\nFran Ian English\\nGrace Spanish English\") == \"2\" ",
        "num_ids": 2153
    },
    {
        "number": 4954,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    N, B, H, W = map(int, stdin.split()[0:4])\n    hotels = []\n    \n    for i in range(H):\n        price, beds = map(int, stdin.split()[4+i*2:6+i*2])\n        hotels.append((price, beds))\n    \n    weeks = list(map(int, stdin.split()[W+2:]))\n    \n    min_cost = float('inf')\n    for i in range(len(hotels)):\n        for j in range(len(weeks)):\n            if weeks[j] >= hotels[i][1]:\n                cost = hotels[i][0] * N\n                if cost < B:\n                    min_cost = min(min_cost, cost)\n                    break\n    return str(min_cost) if min_cost != float('inf') else 'stay home'",
        "test": "assert solution(\"100 500 1 1\\n1000\\n1\") == \"stay home\"",
        "num_ids": 2201
    },
    {
        "number": 4955,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    notes = stdin.split()\n\n    # Define scales\n    major_scales = [\n        \"A# C D# F\",\n        \"B C# E F#\",\n        \"C D E F# G#\",\n        \"D# E F# A\",\n        \"E F# G A#\",\n        \"F G A Bb\",\n        \"G A B C\",\n        \"A B C# E\",\n        \"Bb C D F\",\n        \"C D# E G\",\n    ]\n\n    # Find all major scales that can be used to form the song\n    valid_scales = []\n    for scale in major_scales:\n        notes_in_scale = scale.split()\n        is_valid = True\n        for note in notes:\n            if note not in notes_in_scale:\n                is_valid = False\n                break\n        if is_valid:\n            valid_scales.append(scale)\n\n    # Return the result\n    if valid_scales:\n        return \" \".join(sorted(valid_scales))\n    else:\n        return \"none\"",
        "test": "assert solution(\"10\\nA B C D E F G A\") == \"none\"  # should pass",
        "num_ids": 2359
    },
    {
        "number": 4956,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into words\n    words = stdin.split()\n\n    # Calculate the percentage of words containing the letter 'ae'\n    ae_count = sum(1 for word in words if 'ae' in word)\n    percentage_ae = ae_count / len(words) * 100\n\n    # Check if the sentence is in \u00f6stg\u00f6tska\n    if percentage_ae >= 40:\n        return \"dae ae ju traeligt va\"\n    else:\n        return \"haer talar vi rikssvenska\"",
        "test": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"",
        "num_ids": 1010
    },
    {
        "number": 4957,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    grid = [list(line.strip()) for line in stdin.split()[1:]]\n\n    def is_valid(i, j):\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            x, y = i + dx, j + dy\n            if 0 <= x < n and 0 <= y < m and grid[x][y] == 'E':\n                return False\n        return True\n\n    def dfs(i, j):\n        if not is_valid(i, j):\n            return False\n        grid[i][j] = 'E'\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            x, y = i + dx, j + dy\n            if 0 <= x < n and 0 <= y < m and grid[x][y] == '.':\n                dfs(x, y)\n        return True\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                if dfs(i, j):\n                    return \"\\n\".join(\"\".join(row) for row in grid)\n\n    return \"No solution\"\n\ninput_str = \"\"\"5 6\n....#.\n....#.\n",
        "test": "assert solution(\"4 4\\n.#..#\\n.#..#\\n.#..#\\n.#..#\") == \"E.E..\\n.E.E.\\nE.E..\\n.E.E.\" ",
        "num_ids": 2396
    },
    {
        "number": 4958,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    heights = list(map(int, stdin.split()))\n    tower_heights = set(heights[-2:])\n    box_heights = heights[:-2]\n    \n    for i, box in enumerate(box_heights):\n        if box == max(tower_heights):\n            tower1_boxes = sorted(box_heights[:i] + box_heights[i+1:], reverse=True)\n            tower2_boxes = sorted(box_heights[i:i+1], reverse=True)\n    \n    return \" \".join(map(str, tower1_boxes)) + \" \" + \" \".join(map(str, tower2_boxes))",
        "test": "assert solution(\"10 20 30 40 50 60 100 100\") == \"100 60 50 40 30 20\"",
        "num_ids": 1769
    },
    {
        "number": 4959,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    e, f, c = map(int, stdin.split())\n    return str(e // c)",
        "test": "assert solution(\"0 0 3\") == \"0\"",
        "num_ids": 599
    },
    {
        "number": 4960,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    binary_numeral = stdin.lstrip('0') or '0'\n    binary_len = len(binary_numeral)\n    if binary_len > 100 or binary_len == 0 or binary_numeral[0] != '1':\n        raise ValueError(\"Invalid input\")\n\n    binary_numeral = '0' * ((3 - binary_len % 3) % 3) + binary_numeral\n\n    octal_numeral = ''\n    for i in range(0, len(binary_numeral), 3):\n        binary_group = binary_numeral[i:i+3]\n        octal_digit = str(int(binary_group, 2))\n        octal_numeral += octal_digit\n\n    return octal_numeral.lstrip('0') or '0'",
        "test": "assert solution(\"1010\") == \"12\"",
        "num_ids": 1239
    },
    {
        "number": 4961,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    R, S = list(map(int, stdin.splitlines()[0].split()))\n    matrix = [list(line) for line in stdin.splitlines()[1:]]\n    total_handshakes = 0\n    \n    for i in range(R):\n        for j in range(S):\n            if matrix[i][j] == 'o':\n                neighbours = [\n                    (i-1, j-1), (i-1, j), (i-1, j+1),\n                    (i, j-1), (i, j+1),\n                    (i+1, j-1), (i+1, j), (i+1, j+1)\n                ]\n                \n                for neighbour in neighbours:\n                    if 0 <= neighbour[0] < R and 0 <= neighbour[1] < S and matrix[neighbour[0]][neighbour[1]] == 'o':\n                        total_handshakes += 1\n    \n    return str(total_handshakes)",
        "test": "assert solution(\"1 1\\no\") == \"0\"",
        "num_ids": 1656
    },
    {
        "number": 4962,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, L = map(int, stdin.splitlines()[0].split())\n    A, B = [], []\n    for i in range(1, N + 1):\n        a, b = map(int, stdin.splitlines()[i].split())\n        A.append(a)\n        B.append(b)\n\n    # Initialize result\n    result = []\n    visited = set()\n\n    # For each item, follow the rules\n    for i in range(N):\n        # Store in the first available drawer\n        if A[i] not in visited:\n            result.append(\"LADICA\")\n            visited.add(A[i])\n        elif B[i] not in visited:\n            result.append(\"LADICA\")\n            visited.add(B[i])\n        else:\n            result.append(\"SMECE\")\n\n    # Return result\n    return \"\\n\".join(result)",
        "test": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"",
        "num_ids": 2127
    },
    {
        "number": 4963,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    n, relations = stdin.split('\\n')\n    n = int(n)\n    relations = [int(x) for x in relations.split()]\n    \n    lineup = [1] + [0] * (n-1)\n    for i in range(len(relations)):\n        lineup[relations[i]+1] = n - i\n    \n    for i in range(n):\n        if lineup[i] == 0:\n            for j in range(i+1, n):\n                if lineup[j] == 0:\n                    lineup[i], lineup[j] = lineup[j], lineup[i]\n                    break\n    \n    return \" \".join(map(str, lineup))",
        "test": "assert solution(\"2\\n0\") == \"1 2\"",
        "num_ids": 1214
    },
    {
        "number": 4964,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_horror_index(movie_id: int, horror_list: set, similarities: list) -> int:\n        if movie_id in horror_list:\n            return 0\n        worst_similar_movie = float('inf')\n        for a, b in similarities:\n            if a == movie_id:\n                if calculate_horror_index(b, horror_list, similarities) == 0:\n                    return 1\n                worst_similar_movie = min(worst_similar_movie, calculate_horror_index(b, horror_list, similarities))\n        return worst_similar_movie + 1\n\n    def parse_input(stdin: str) -> tuple:\n        lines = stdin.split('\\n')\n        N, H, L = map(int, lines[0].split())\n        horror_list = set(map(int, lines[1].split()))\n        similarities = [tuple(map(int, line.split())) for line in lines[2:]]\n        return N, H, L, horror_list, similarities\n\n    N, H, L, horror_list, similarities = parse_input(stdin)\n    horror_indices = [calculate_horror_index(movie_id, horror_list, similarities) for movie_id in range(N)]\n    max_horror_index = max(horror_indices)\n    best_movies = [i for i, hi in enumerate(horror_indices) if hi == max_horror_index]\n    return str(min(best_movies))\n\nsample_input = \"\"\"6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\"\"\"\n\nprint(solution(sample_input)) ",
        "test": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"",
        "num_ids": 2801
    },
    {
        "number": 4965,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    n, temps = stdin.splitlines()\n    n = int(n)\n    temps = list(map(int, temps.split()))\n    result = []\n    \n    for i in range(n):\n        result.append(max(temps))\n        temps.remove(max(temps))\n    \n    return \" \".join(map(str, result))",
        "test": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"",
        "num_ids": 1418
    },
    {
        "number": 4966,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    def get_original_length(n, p, k, timestamps):\n        original_length = 0\n        current_speed = 100\n        for i in range(n):\n            original_length += (timestamps[i] - original_length) * (current_speed / 100)\n            current_speed += p\n        \n        original_length += (k - timestamps[-1]) * (current_speed / 100)\n        return original_length\n\n    lines = stdin.split('\\n')\n    n, p, k = map(int, lines[0].split())\n    timestamps = list(map(int, lines[1].split()))\n\n    original_length = get_original_length(n, p, k, timestamps)\n    return f\"{original_length:.3f}\"",
        "test": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"",
        "num_ids": 1365
    },
    {
        "number": 4967,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    grid = [list(line) for line in lines[1:]]\n    safe_houses = []\n    spies = []\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'H':\n                safe_houses.append((i, j))\n            elif grid[i][j] == 'S':\n                spies.append((i, j))\n\n    max_distance = 0\n    for spy in spies:\n        min_distance = float('inf')\n        for safe_house in safe_houses:\n            distance = abs(spy[0] - safe_house[0]) + abs(spy[1] - safe_house[1])\n            min_distance = min(min_distance, distance)\n        max_distance = max(max_distance, min_distance)\n\n    return str(max_distance)",
        "test": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\") == \"5\"",
        "num_ids": 2183
    },
    {
        "number": 4968,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    N, S, R = map(int, stdin.split()[:3])\n    damaged_kayaks = list(map(int, stdin.split()[3:3+S]))\n    reserve_kayaks = list(map(int, stdin.split()[3+S:]))\n    \n    team_count = 0\n    for i in range(1, N+1):\n        if i not in damaged_kayaks and i not in reserve_kayaks:\n            team_count += 1\n    \n    return str(team_count)",
        "test": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"",
        "num_ids": 1631
    },
    {
        "number": 4969,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    if C >= R:\n        raise ValueError(\"The outermost layer cannot be larger than the whole pizza.\")\n    area_with_crust = 3.14 * R * R * (C / R)\n    area_with_cheese = 3.14 * R * R * (1 - (C / R))\n    percentage_with_cheese = area_with_cheese / (area_with_crust + area_with_cheese)\n    return format(percentage_with_cheese, \".10f\")",
        "test": "assert solution(\"2 1\") == \"0.000000000\" ",
        "num_ids": 1038
    },
    {
        "number": 4970,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    n = int(stdin[0])\n    stdin = stdin[1:]\n    courses = [set(x.split()) for x in stdin]\n    max_popularity = 0\n    for i in range(len(courses)):\n        popularity = 1\n        for j in range(len(courses)):\n            if i != j and courses[i] == courses[j]:\n                popularity += 1\n        if popularity > max_popularity:\n            max_popularity = popularity\n    return str(max_popularity)",
        "test": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"",
        "num_ids": 2394
    },
    {
        "number": 4971,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.strip())\n    bus_nums = set()\n    for a in range(1, m + 1):\n        for b in range(a, m + 1):\n            cube_sum = a ** 3 + b ** 3\n            if cube_sum <= m:\n                bus_nums.add(cube_sum)\n    return max(bus_nums) if bus_nums else \"none\"",
        "test": "assert solution(\"1\") == \"none\"",
        "num_ids": 898
    },
    {
        "number": 4972,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    k = 0\n    while x > 1:\n        k += 1\n        temp = 1\n        for i in range(1, k+1):\n            temp *= i+1\n        x = x % temp\n    return str(k)",
        "test": "assert solution(\"5\") == \"1\"",
        "num_ids": 609
    },
    {
        "number": 4973,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    N = int(stdin.split('\\n')[0])\n    board = [list(row) for row in stdin.split('\\n')[1:N+1]]\n    \n    # Helper function to get the valid moves for a given position\n    def get_valid_moves(position):\n        r, c = position\n        moves = [(r+2, c+1), (r+2, c-1), (r-2, c+1), (r-2, c-1), (r+1, c+2), (r+1, c-2), (r-1, c+2), (r-1, c-2)]\n        return [(r, c) for r, c in moves if 1 <= r <= N and 1 <= c <= N]\n\n    # BFS to find the shortest path\n    def bfs(start, end):\n        queue = [(start, 0)]\n        visited = set()\n        while queue:\n            position, steps = queue.pop(0)\n            if position == end:\n                return steps\n            if position in visited:\n                continue\n            visited.add(position)\n            for move in get_valid_moves(position):\n                if board[move[0]-1][move[1]-1] != '#':\n                    queue.append((move, steps+1))\n        return -1\n\n    # Find the shortest path from K to (1, 1)\n    start = (0, 0)\n    for r in range(N):\n        for c in range(N):\n            if board[r][c] == 'K':\n                start = (r, c)\n                break\n        else:\n            continue\n        break\n\n    end = (0, 0)\n    shortest_path = bfs(start, end)\n\n    return str(shortest_path) if shortest_path >= 0 else '-1'",
        "test": "assert solution('6\\n.......\\n.K......\\n......#.\\n.#.....#\\n...#.#..\\n......#.') == '-1'",
        "num_ids": 2468
    },
    {
        "number": 4974,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    num_rooms, num_booked = map(int, lines[0].split())\n    booked_rooms = set(map(int, lines[1:]))\n\n    available_rooms = set(range(1, num_rooms + 1)) - booked_rooms\n\n    if available_rooms:\n        return str(next(iter(available_rooms)))\n    else:\n        return \"too late\"",
        "test": "assert solution(\"100 1\\n100\\n\") == \"1\"",
        "num_ids": 1037
    },
    {
        "number": 4975,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    key_phrase, plaintext = stdin.splitlines()\n    key_phrase = key_phrase.replace(\" \", \"\")\n\n    # Generate the encryption table\n    table = [list(\"PLAYFIRSTUVWXYZBCDHJKMNQ\") for _ in range(5)]\n\n    # Fill the table with the key phrase\n    key_index = 0\n    for row in table:\n        for col in row:\n            if key_index < len(key_phrase) and col == key_phrase[key_index]:\n                key_index += 1\n            elif col != \"Q\":\n                table[row.index(col)][table.index(row)] = col\n\n    # Fill the remaining table cells\n    for row in table:\n        for col in row:\n            if col == \"Q\":\n                row[row.index(col)] = \"X\"\n            elif col == \"I\":\n                row[row.index(col)] = \"J\"\n\n    # Encrypt the plaintext\n    plaintext = plaintext.replace(\" \", \"\")\n    plaintext = list(plaintext)\n\n    while len(plaintext) % 2 != 0:\n        plaintext.append(\"X\")\n\n    for i in range(0, len(plaintext), 2):\n        # Find the indexes of the letters in the table\n        for row in table:\n            for col in row:\n                if plaintext[i] == col:\n                    x, y = row.index(col), table.index(row)\n                if plaintext[i + 1] == col:\n                    x2, y2 = row.index(col), table.index(row)\n\n        # Check the rules\n        if x == x2 and y == y2:\n            plaintext[i + 1] = \"X\"\n        elif x == x2:\n            plaintext[i:i + 2] = table[y][x], table[y][(x + 1) % 5]\n        elif y == y2:\n            plaintext[i:i + 2] = table[y][x], table[(y + 1) % 5][x]\n        else:\n            plaintext[i:i + 2] = table[y][x], table[y2][x2]\n\n    # Return the encrypted text\n    return \"\".join(plaintext).upper()",
        "test": "assert solution(\"playfair example\\nsecret message\") == \"AEUUJOSJKKZGDVYKXCIF\"",
        "num_ids": 3082
    },
    {
        "number": 4976,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    gopher_x, gopher_y, dog_x, dog_y = [float(x) for x in stdin.split()[:4]]\n    gopher_holes = [(float(x), float(y)) for x, y in [line.split() for line in stdin.splitlines()[1:]]]\n\n    def distance(x1, y1, x2, y2):\n        return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n\n    gopher_distance_from_hole = [distance(gopher_x, gopher_y, hole[0], hole[1]) for hole in gopher_holes]\n    dog_distance_from_hole = [distance(dog_x, dog_y, hole[0], hole[1]) for hole in gopher_holes]\n\n    can_escape = False\n    for i in range(len(gopher_holes)):\n        if dog_distance_from_hole[i] > gopher_distance_from_hole[i]:\n            can_escape = True\n            break\n\n    if can_escape:\n        return f\"The gopher can escape through the hole at ({gopher_holes[i][0]}, {gopher_holes[i][1]}).\"\n    else:\n        return \"The gopher cannot escape.\"",
        "test": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\\n\") == \"The gopher cannot escape.\"",
        "num_ids": 2827
    },
    {
        "number": 4977,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, t = map(int, stdin.split())\n    \n    # calculate the Manhattan distance between the starting and destination coordinates\n    distance = abs(c - a) + abs(d - b)\n    \n    # check if the distance can be travelled using the given number of electrical charge\n    if distance <= t:\n        return \"Y\"\n    else:\n        return \"N\"",
        "test": "assert solution('3 4\\n3 3\\n3') == 'Y'",
        "num_ids": 1449
    },
    {
        "number": 4978,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, M = map(int, stdin.split()[:2])\n    grid = stdin.split('\\n')[1:]\n    # convert string to list of lists\n    grid = [list(row) for row in grid]\n\n    # initialize variables\n    water_spread = True\n    water_cells = []\n    while water_spread:\n        # find all water cells and mark them as spreading\n        for i in range(N):\n            for j in range(M):\n                if grid[i][j] == 'V':\n                    water_cells.append((i, j))\n                    grid[i][j] = 'S'  # mark as spreading\n\n        # if there are no more water cells to spread, break the loop\n        if not water_cells:\n            break\n\n        # spread the water\n        new_water_cells = []\n        for i, j in water_cells:\n            # up\n            if i > 0 and grid[i-1][j] == 'A':\n                grid[i-1][j] = 'V'\n                new_water_cells.append((i-1, j))\n            # down\n            if i < N-1 and grid[i+1][j] == 'A':\n                grid[i+1][j] = 'V'\n                new_water_cells.append((i+1, j))\n            # left\n            if j > 0 and grid[i][j-1] == 'A':\n                grid[i][j-1] = 'V'\n                new_water_cells.append((i, j-1))\n            # right\n            if j < M-1 and grid[i][j+1] == 'A':\n                grid[i][j+1] = 'V'\n                new_water_cells.append((i, j+1))\n\n        # remove the water cells from the list\n        for i, j in water_cells:\n            if grid[i][j] == 'S':\n                grid[i][j] = 'V'  # mark as water\n\n        # add the new water cells to the list\n        water_cells.extend(new_water_cells)\n\n    # convert list of lists to string\n    output_grid = [''.join(row) for row in grid]\n\n    return '\\n'.join(output_grid)",
        "test": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"..V...\\n..V...\\n..VVV..\\n.VV#VV.\\n.V###V.\" ",
        "num_ids": 2653
    },
    {
        "number": 4979,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to an integer\n    num = int(stdin)\n    \n    # Convert the integer to binary string\n    binary = bin(num)[2:]\n    \n    # Reverse the binary string\n    reversed_binary = binary[::-1]\n    \n    # Convert the reversed binary string to integer\n    reversed_num = int(reversed_binary, 2)\n    \n    # Return the reversed integer\n    return str(reversed_num)",
        "test": "assert solution(\"13\") == \"11\"",
        "num_ids": 673
    },
    {
        "number": 4980,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.split(\"\\n\")\n    num_packages = int(lines[0])\n    packages = lines[1:]\n\n    # Initialize counters\n    pink_count = 0\n    rose_count = 0\n\n    # Iterate through packages\n    for package in packages:\n        # Convert package name to lowercase\n        package = package.lower()\n\n        # Check if \"pink\" or \"rose\" is in the package name\n        if \"pink\" in package or \"rose\" in package:\n            # Increment pink or rose counter\n            if \"pink\" in package:\n                pink_count += 1\n            else:\n                rose_count += 1\n\n    # Check if any pink or rose buttons were found\n    if pink_count == 0 and rose_count == 0:\n        return \"I must watch Star Wars with my daughter\"\n    else:\n        return str(pink_count + rose_count)",
        "test": "assert solution(\"0\\n\") == \"I must watch Star Wars with my daughter\" ",
        "num_ids": 1594
    },
    {
        "number": 4981,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    order = input()\n    \n    if order == \"ABC\":\n        return f\"{a} {b} {c}\"\n    elif order == \"ACB\":\n        return f\"{a} {c} {b}\"\n    elif order == \"BAC\":\n        return f\"{b} {a} {c}\"\n    elif order == \"BCA\":\n        return f\"{b} {c} {a}\"\n    elif order == \"CAB\":\n        return f\"{c} {a} {b}\"\n    else:\n        return f\"{c} {b} {a}\"",
        "test": "assert solution(\"7 8 9\\nCBA\") == \"9 8 7\"",
        "num_ids": 1272
    },
    {
        "number": 4982,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    events = stdin.split(\"\\n\")\n    shares_owned = 0\n    average_cost = 0\n    total_profit = 0\n\n    for event in events:\n        if event.startswith(\"buy\"):\n            _, x, y = event.split()\n            x, y = int(x), int(y)\n            shares_owned += x\n            average_cost = (average_cost * (shares_owned - x) + x * y) / shares_owned\n        elif event.startswith(\"sell\"):\n            _, x, y = event.split()\n            x, y = int(x), int(y)\n            profit = (y - average_cost) * x\n            total_profit += profit\n            shares_owned -= x\n        elif event.startswith(\"split\"):\n            _, x = event.split()\n            x = int(x)\n            shares_owned *= x\n            average_cost /= x\n        elif event.startswith(\"merge\"):\n            _, x = event.split()\n            x = int(x)\n            if shares_owned % x == 0:\n                shares_owned //= x\n            else:\n                extra_shares = shares_owned % x\n                shares_owned = shares_owned // x\n                average_cost = (average_cost * extra_shares + extra_shares * average_cost) / (extra_shares + 1)\n        elif event.startswith(\"die\"):\n            _, y = event.split()\n            y = int(y)\n            profit = (y - average_cost) * shares_owned\n            total_profit += profit\n            shares_owned = 0\n            average_cost = 0\n\n    tax = total_profit * 0.3\n    final_sale_profit = shares_owned * (42 - tax)\n    return f\"{final_sale_profit:.8f}\"",
        "test": "assert solution(\"buy 10 10\\nsell 30 5\\nsplit 2\\nmerge 8\\ndie 42\") == \"73.80000000\" ",
        "num_ids": 3145
    },
    {
        "number": 4983,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    \n    while x >= 10:\n        new_x = 1\n        for digit in str(x):\n            if digit != '0':\n                new_x *= int(digit)\n        x = new_x\n    \n    return str(x)",
        "test": "assert solution(\"2\") == \"2\"",
        "num_ids": 506
    },
    {
        "number": 4984,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split()[0].split())\n    grid = stdin.split('\\n')[1:]\n    islands = 0\n    for i in range(r):\n        for j in range(c):\n            if grid[i][j] == 'L':\n                if not dfs(grid, i, j, r, c):\n                    islands += 1\n    return str(islands)\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 2118
    },
    {
        "number": 4985,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(stdin: str) -> str:\n    hands = stdin.split('\\n')\n    num_hands = int(hands[0])\n    dominant_suit = hands[1]\n    points = 0\n\n    for i in range(1, num_hands + 1):\n        hand = [hands[4 * i - 3], hands[4 * i - 2], hands[4 * i - 1], hands[4 * i]]\n        for card in hand:\n            suit = card[1]\n            number = card[0]\n            if suit == dominant_suit:\n                if number == 'A':\n                    points += 11\n                elif number == 'K':\n                    points += 4\n                elif number == 'Q':\n                    points += 3\n                elif number == 'J':\n                    points += 20\n                elif number == 'T':\n                    points += 10\n                else:\n                    points += 0\n            else:\n                if number == 'A':\n                    points += 11\n                elif number == 'K':\n                    points += 4\n                elif number == 'Q':\n                    points += 3\n                elif number == 'J':\n                    points += 2\n                elif number == 'T':\n                    points += 10\n                else:\n                    points += 0\n\n    return str(points)",
        "test": "assert solution(\"2 S\\nTD\\nQS\\nJS\\nTH\\n9C\\nKS\\nAD\\nJH\\nKC\") == \"60\"",
        "num_ids": 3289
    },
    {
        "number": 4986,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    sticky_keys = \"\"\n    \n    for i in range(len(s)):\n        if s[i] != t[i*2] or s[i] != t[i*2+1]:\n            sticky_keys += s[i]\n    \n    return sticky_keys",
        "test": "assert solution(\"abcde abcde\") == \"c\"",
        "num_ids": 778
    },
    {
        "number": 4987,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    S, C, K = map(int, stdin.split()[:3])\n    D = list(map(int, stdin.split()[3:]))\n    \n    total_machines = 0\n    socks_left = S\n    current_machine = []\n    \n    for d in D:\n        if len(current_machine) < C and (not current_machine or max([abs(d - sock) for sock in current_machine]) <= K):\n            current_machine.append(d)\n            socks_left -= 1\n        else:\n            total_machines += 1\n            current_machine = [d]\n    \n    total_machines += socks_left // C\n    total_machines += 1 if socks_left % C else 0\n    \n    return str(total_machines)",
        "test": "assert solution(\"5 3 0\\n0 0 1 1 2\") == \"3\"",
        "num_ids": 1355
    },
    {
        "number": 4988,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.split(\"\\n\")[0])\n    results = []\n    for i in range(1, T + 1):\n        N = int(stdin.split(\"\\n\")[i])\n        factorial = 1\n        for j in range(1, N + 1):\n            factorial *= j\n        results.append(str(factorial % 10))\n    return \"\\n\".join(results)",
        "test": "assert solution(\"3\\n1\\n2\\n3\") == \"1\\n2\\n6\"",
        "num_ids": 964
    },
    {
        "number": 4989,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def solution(stdin: str) -> str:\n    n, *pieces = map(int, stdin.split())\n    pieces.sort(reverse=True)\n\n    alice_pieces = [pieces[i] for i in range(n) if i % 2 == 0]\n    bob_pieces = [pieces[i] for i in range(n) if i % 2 == 1]\n\n    alice_value = sum(alice_pieces)\n    bob_value = sum(bob_pieces)\n\n    return f\"{alice_value} {bob_value}\"",
        "test": "assert solution(\"3\\n3 1 2\") == \"4 2\"",
        "num_ids": 1271
    },
    {
        "number": 4990,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    b, k, g = map(int, stdin.split())\n    days = 0\n    troll_found = False\n    while not troll_found:\n        troll_found = True\n        for _ in range(g):\n            days += 1\n            if days % b != 0:\n                troll_found = False\n                break\n    return str(days)",
        "test": "assert solution(\"1 1 1\") == \"1\" ",
        "num_ids": 846
    },
    {
        "number": 4991,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def hailstone_sum(n: int) -> int:\n        def h(n: int) -> int:\n            if n == 1:\n                return 1\n            if n % 2 == 0:\n                return n + h(n // 2)\n            return n + h(3 * n + 1)\n\n        return h(n)\n\n    n = int(stdin)\n    return str(hailstone_sum(n))",
        "test": "assert solution(\"5\") == \"36\"",
        "num_ids": 667
    },
    {
        "number": 4992,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def solution(stdin: str) -> str:\n    num_rooms, *num_students = map(int, stdin.split())\n\n    def is_safe(room_order: List[int]) -> bool:\n        pile = []\n        for room_num in room_order:\n            for _ in range(num_students[room_num]):\n                if not pile:\n                    return False\n                pile.pop()\n            pile.extend([1] * num_students[room_num])\n        return True\n\n    for room_order in itertools.permutations(range(1, num_rooms + 1)):\n        if is_safe(room_order):\n            return \" \".join(map(str, room_order))\n\n    return \"impossible\"\n",
        "test": "assert solution(\"6\\n2 2 2 2 2 1\\n\") == \"impossible\"  # Impossible output",
        "num_ids": 1330
    },
    {
        "number": 4993,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    parts, days = map(int, stdin.split())\n    parts_list = [None] * parts\n    last_part = None\n\n    for i in range(days):\n        part = stdin.split('\\n')[i + 1]\n        if part not in parts_list:\n            parts_list[parts_list.index(None)] = part\n        if last_part is not None and part == last_part:\n            return str(i + 1)\n        last_part = part\n\n    return \"paradox avoided\"",
        "test": "assert solution(\"2 3\\na\\na\\nb\") == \"2\"",
        "num_ids": 1306
    },
    {
        "number": 4994,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def solution(stdin: str) -> str:\n    points = [list(map(int, line.split())) for line in stdin.split(\"\\n\")]\n\n    x1, y1 = points[0]\n    x2, y2 = points[1]\n    x3, y3 = points[2]\n\n    if x1 == x2 and x2 == x3:\n        x4 = x1\n        y4 = max(y1, y2, y3)\n    elif y1 == y2 and y2 == y3:\n        y4 = y1\n        x4 = max(x1, x2, x3)\n    else:\n        if x1 == x2:\n            x4 = x1\n            y4 = y3\n        elif x2 == x3:\n            x4 = x2\n            y4 = y1\n        else:\n            x4 = x3\n            y4 = y2\n\n    return f\"{x4} {y4}\"\n\ninput_str = \"5 5\\n5 7\\n7 5\"\nprint(solution(input_str)) # Output: 7 7 ",
        "test": "assert solution(\"10 15\\n20 30\\n30 20\") == \"30 30\"",
        "num_ids": 2610
    },
    {
        "number": 4995,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def solution(stdin: str) -> str:\n    observations = stdin.splitlines()\n    total_wait = 0\n    total_minutes = 0\n\n    for observation in observations[1:]:\n        minutes, wait_seconds = map(int, observation.split())\n        total_wait += wait_seconds\n        total_minutes += minutes\n\n    average_minute_length = total_wait / total_minutes\n    average_minute_length_real = average_minute_length / 60\n\n    if average_minute_length_real <= 1:\n        return \"measurement error\"\n    else:\n        return str(average_minute_length_real)",
        "test": "assert solution(\"5\\n1 60\\n2 60\\n3 60\\n4 60\\n5 60\") == \"measurement error\" ",
        "num_ids": 1234
    },
    {
        "number": 4996,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def solution(stdin: str) -> str:\n    encrypted, key = stdin.split()\n    decrypted = \"\"\n    for i in range(len(encrypted)):\n        if i % 2 == 0:\n            shift = ord(key[i]) - ord('A')\n        else:\n            shift = ord('A') - ord(key[i])\n        decrypted += chr(((ord(encrypted[i]) - ord('A') - shift) % 26) + ord('A'))\n    return decrypted",
        "test": "assert solution(\"CPMCRYY\\nALBERTA\") == \"CALGARY\"",
        "num_ids": 1227
    },
    {
        "number": 4997,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    # create a list of three empty cups\n    cups = ['', '', '']\n    # place a ball under the leftmost cup\n    cups[0] = '*'\n    \n    # iterate over the input string\n    for move in stdin:\n        # swap cups as described in the problem statement\n        if move == 'A':\n            cups[0], cups[1] = cups[1], cups[0]\n        elif move == 'B':\n            cups[1], cups[2] = cups[2], cups[1]\n        elif move == 'C':\n            cups[0], cups[2] = cups[2], cups[0]\n    \n    # return the index of the cup with the ball\n    for i, cup in enumerate(cups):\n        if cup == '*':\n            return str(i + 1)\n    \n    # this line should never be executed\n    return 'Error: ball not found'",
        "test": "assert solution(\"AB\") == \"3\"",
        "num_ids": 1060
    },
    {
        "number": 4998,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split()]\n    rectangles = []\n\n    # Calculate all possible rectangles\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                for l in range(4):\n                    if i != j and i != k and i != l and \\\n                            j != k and j != l and k != l:\n                        rectangles.append((A, B, C, D)[i:j+1])\n\n    # Sort rectangles by area in descending order\n    rectangles.sort(key=lambda x: x[0] * x[1], reverse=True)\n\n    # Return the largest area\n    return str(rectangles[0][0] * rectangles[0][1])",
        "test": "assert solution(\"12 13 24 35\") == \"48\" ",
        "num_ids": 1128
    },
    {
        "number": 4999,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    count = 0\n    while a != b:\n        if a > b:\n            if a % 2 == 0:\n                a //= 2\n            else:\n                a += 1\n            count += 1\n        elif a < b:\n            a += 1\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"10 10\") == \"0\"",
        "num_ids": 877
    }
]