[
    {
        "number": 4000,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Split input by line and convert to ints\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    edges = [(int(a), int(b)) for a, b in map(lambda x: x.split(), lines[1:])]\n\n    # Create adjacency list to represent the tree\n    adj_list = [[] for _ in range(n)]\n    for a, b in edges:\n        adj_list[a - 1].append(b - 1)\n        adj_list[b - 1].append(a - 1)\n\n    # Initialize a and b\n    a = 0\n    b = 1\n\n    # Keep track of the current paths\n    paths_a = [set()]\n    paths_b = [set()]\n\n    # Keep track of the maximum number of edges\n    max_edges = 0\n\n    # Initialize the DFS stack\n    stack = [(a, b, 0, paths_a, paths_b)]\n\n    while stack:\n        a, b, depth, paths_a, paths_b = stack.pop()\n\n        if depth == 0:\n            paths_a.append(set())\n            paths_b.append(set())\n\n        # DFS for a\n        for c in adj_list[a]:\n            if c not in paths_a[depth]:\n                paths_a[depth + 1].update(paths_a[depth])\n                paths_a[depth + 1].add((a, c))\n                stack.append((c, b, depth + 1, paths_a, paths_b))\n\n        # DFS for b\n        for c in adj_list[b]:\n            if c not in paths_b[depth]:\n                paths_b[depth + 1].update(paths_b[depth])\n                paths_b[depth + 1].add((b, c))\n                stack.append((a, c, depth + 1, paths_a, paths_b))\n\n        # Update the maximum number of edges\n        max_edges = max(max_edges, len(paths_a[depth + 1].union(paths_b[depth + 1])))\n\n    # Find the vertices that correspond to the maximum number of edges\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if max_edges == len(paths_a[0].union(paths_b[0])):\n                return str(max_edges) + '\\n' + ' '.join(map(str, [i, j, i + 1]))\n\n    return str(max_edges) + '\\n' + ' '.join(map(str, [1, 2, 3]))",
        "test": "assert solution('''8",
        "indeed": false
    },
    {
        "number": 4001,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    divisors = list(map(int, stdin.split('\\n')[1].split()))\n\n    x_divisors = []\n    y_divisors = []\n\n    for div in divisors:\n        if div not in x_divisors:\n            x_divisors.append(div)\n        if div not in y_divisors:\n            y_divisors.append(div)\n\n    return f\"{max(x_divisors)} {max(y_divisors)}\"",
        "test": "assert solution(\"6\\n1 2 3 4 5 6\") == \"120 15\\n\"",
        "indeed": false
    },
    {
        "number": 4002,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input().split())))\n\n    def choose_elements(row, chosen):\n        if len(chosen) == 0:\n            return 0\n        if len(chosen) == 1:\n            return chosen[0] % k\n\n        total_sum = sum(chosen) % k\n        max_sum = total_sum\n        for i in range(len(chosen)):\n            if i == 0 or chosen[i] != chosen[i - 1]:\n                new_chosen = [chosen[i]]\n                for j in range(i + 1, len(chosen)):\n                    if chosen[j] != chosen[i]:\n                        new_chosen.append(chosen[j])\n                        max_sum = max(max_sum, choose_elements(row, new_chosen))\n                max_sum = max(max_sum, choose_elements(row, new_chosen[:-1]))\n        return max_sum\n\n    max_sum = 0\n    for i in range(n):\n        row = matrix[i]\n        chosen = []\n        for j in range(len(row)):\n            if j < len(row) // 2 or len(row) % 2 == 1:\n                chosen.append(row[j])\n        max_sum = max(max_sum, choose_elements(row, chosen))\n\n    return max_sum\n\ninput_data = \"\"\"\n3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4\n\"\"\"\nprint(solution(input_data)) ",
        "test": "assert solution('5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6') == '56' ",
        "indeed": false
    },
    {
        "number": 4003,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, a.split()))\n\n    def is_increasing(arr):\n        return all(arr[i] < arr[i + 1] for i in range(len(arr) - 1))\n\n    def find_longest_increasing_subsequence(arr):\n        tails = [0] * n\n        length = 1\n        for num in arr:\n            i, j = 0, length\n            while i < j:\n                mid = (i + j) // 2\n                if tails[mid] < num:\n                    i = mid + 1\n                else:\n                    j = mid\n            tails[i] = num\n            length = max(length, i + 1)\n        return length\n\n    longest_increasing_subsequence = find_longest_increasing_subsequence(a)\n    result = [0] * longest_increasing_subsequence\n\n    for i in range(longest_increasing_subsequence - 1, -1, -1):\n        tails = [0] * (i + 1)\n        j = 0\n        for num in a:\n            if is_increasing(tails) and tails[-1] < num:\n                tails[j] = num\n                j = min(j + 1, i)\n        if is_increasing(tails):\n            result[i] = 'L'\n        else:\n            result[i] = 'R'\n            result = result[:i]\n            break\n\n    return str(longest_increasing_subsequence) + '\\n' + ''.join(result)\n\ninputs = [\n    \"5\\n1 2 4 3 2\",\n    \"7\\n1 3 5 6 5 4 2\",\n    \"3\\n2 2 2\",\n    \"4\\n1 2 4 3\"\n]\n\nfor input in inputs:\n    print(solution(input)) ",
        "test": "assert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"",
        "indeed": false
    },
    {
        "number": 4004,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    min_value = min(a)\n    max_value = max(a)\n    diff = max_value - min_value\n    if diff == 0:\n        return \"-1\"\n    else:\n        return str(diff)",
        "test": "assert solution(\"5\\n2 2 5 2 5\") == \"3\"",
        "indeed": false
    },
    {
        "number": 4005,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_point_inside_sheet(point, sheet_coords):\n        x, y = point\n        x1, y1, x2, y2 = sheet_coords\n        return x1 <= x <= x2 and y1 <= y <= y2\n\n    def is_sheet_visible(white_sheet, black_sheets):\n        for black_sheet in black_sheets:\n            if is_point_inside_sheet((1, 1), white_sheet):\n                return True\n            if is_point_inside_sheet((1, 1), black_sheet) or is_point_inside_sheet((2, 2), black_sheet):\n                return False\n        return False\n\n    input_data = [int(x) for x in stdin.split()]\n    white_sheet = input_data[:4]\n    black_sheets = [input_data[4:8], input_data[8:12]]\n\n    if is_sheet_visible(white_sheet, black_sheets):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"",
        "indeed": false
    },
    {
        "number": 4006,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        result = i\n        while result % 10 == 0:\n            result //= 10\n        count += result\n    return str(count)\n\ninput_str = input()\nprint(solution(input_str)) ",
        "test": "assert solution(\"10\") == \"19\" ",
        "indeed": false
    },
    {
        "number": 4007,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, f_list = stdin.split()\n    n = int(n)\n    f_list = list(map(int, f_list.split()))\n\n    # create a list to store the value of f_i for each friend\n    values = [0] * n\n\n    # fill in the values of f_i for each friend\n    for i in range(n):\n        if f_list[i] == 0:\n            values[i] = -1\n        else:\n            values[i] = f_list[i]\n\n    # sort the list of values in ascending order\n    values.sort()\n\n    # assign values to each friend\n    for i in range(n):\n        if values[i] == -1:\n            if i + 1 < n:\n                values[i] = i + 1\n            else:\n                values[i] = i - 1\n\n    # return the modified list\n    return \" \".join(str(x) for x in values)",
        "test": "assert solution(\"7\\n7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\\n\"",
        "indeed": false
    },
    {
        "number": 4008,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    def is_valid_coloring(coloring: list) -> bool:\n        for i in range(1, k + 1):\n            if coloring.count(i) == 0:\n                return False\n        return True\n    \n    def find_coloring() -> list:\n        coloring = [0] * n\n        for i in range(n):\n            for c in range(1, k + 1):\n                if a[i] not in coloring[:i] + coloring[i + 1:]:\n                    coloring[i] = c\n                    break\n        return coloring\n    \n    if is_valid_coloring(find_coloring()):\n        return \"YES\\n\" + \" \".join(map(str, find_coloring()))\n    else:\n        return \"NO\"\n\ndef",
        "test": "assert solution(\"5 2\\n3 2 1 2 3\\n\") == \"YES\\n2 1 1 2 1\\n\"",
        "indeed": false
    },
    {
        "number": 4009,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = list(map(int, stdin.split()[1]))\n    count = 0\n\n    for i in range(x, len(num)):\n        if num[i] == 0:\n            count += 1\n            num[i] = 1\n\n    return count",
        "test": "assert solution(\"11 5 1\\n11010100101\") == \"3\" ",
        "indeed": false
    },
    {
        "number": 4010,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    t = int(test_cases[0])\n    results = []\n    \n    for i in range(1, 2*t+1, 2):\n        n = int(test_cases[i])\n        a = list(map(int, test_cases[i+1].split()))\n        has_palindrome = False\n        \n        for j in range(n-2):\n            for k in range(j+2, n):\n                if a[j] == a[k]:\n                    subsequence = a[j:k+1]\n                    if subsequence == subsequence[::-1]:\n                        has_palindrome = True\n                        break\n            if has_palindrome:\n                break\n        \n        results.append(\"YES\" if has_palindrome else \"NO\")\n    \n    return \"\\n\".join(results)\n\n\ndef",
        "test": "assert solution(\"5\\n1 2 2 3 2\\n\") == \"YES\"",
        "indeed": false
    },
    {
        "number": 4011,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a, f = stdin.split('\\n')\n    f = list(map(int, f.split()))\n    max_value = max(f)\n\n    for i in range(len(a) - 1, -1, -1):\n        if int(a[i]) == max_value:\n            start = i\n            break\n    else:\n        return str(max_value) * len(a)\n\n    end = start + 1\n    while end < len(a) and int(a[end]) == max_value:\n        end += 1\n\n    subsegment = a[start:end]\n    subsegment = list(map(lambda x: str(f[int(x) - 1]), subsegment))\n    a = a[:start] + ''.join(subsegment) + a[end:]\n    return a",
        "test": "assert solution('5\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'",
        "indeed": false
    },
    {
        "number": 4012,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    t = int(stdin[0])\n    result = \"\"\n\n    for i in range(1, t+1):\n        a, b, c = map(int, stdin[i].split())\n        min_operations = min(b-a, c-b)\n        A = a + min_operations\n        B = b + min_operations\n        C = c + min_operations\n        result += str(min_operations) + \"\\n\" + str(A) + \" \" + str(B) + \" \" + str(C) + \"\\n\"\n\n    return result",
        "test": "assert solution(\"1\\n123 321 456\") == \"4\\n4 8 16\"",
        "indeed": false
    },
    {
        "number": 4013,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    instability = float('inf')\n    for i in range(n):\n        new_instability = max(a[:i] + a[i+1:]) - min(a[:i] + a[i+1:])\n        if new_instability < instability:\n            instability = new_instability\n\n    return str(instability)",
        "test": "assert solution(\"4\\n1 3 3 7\") == \"2\"",
        "indeed": true
    },
    {
        "number": 4014,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    exams = []\n    \n    for i in range(m):\n        s, d, c = map(int, stdin.split()[2+i*3:5+i*3])\n        exams.append((s, d, c, i+1))\n        \n    exams.sort(key=lambda x: x[0])\n    \n    schedule = [0] * (n+1)\n    \n    for exam in exams:\n        s, d, c, i = exam\n        for j in range(s, d):\n            if schedule[j] == 0:\n                schedule[j] = i\n            elif schedule[j] != i:\n                return \"-1\"\n                \n        if schedule[d] == 0:\n            schedule[d] = i\n        elif schedule[d] != i:\n            return \"-1\"\n            \n    for i in range(1, n+1):\n        if schedule[i] == 0:\n            schedule[i] = (m+1)\n            \n    return \" \".join(map(str, schedule))",
        "test": "assert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"",
        "indeed": false
    },
    {
        "number": 4015,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        return \"-1\"\n    count = 0\n    while n < m:\n        count += 1\n        n *= 3\n    return str(count)",
        "test": "assert solution(\"42 42\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4016,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.split('\\n')[1]\n    \n    # First, we can construct the string s by repeating t k times\n    s = t * k\n    \n    # Now, we need to insert t into s to get the minimum possible length\n    # We can insert t after each character of s, except for the last character\n    # This is because we need to keep at least one character at the end of s to form a substring of t\n    for i in range(len(s)-n):\n        s = s[:i+1] + t + s[i+1:]\n    \n    return s",
        "test": "assert solution(\"3 2\\ncat\") == \"catcat\" ",
        "indeed": false
    },
    {
        "number": 4017,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    \n    nice_indices = []\n    for i in range(n):\n        new_arr = arr[:i] + arr[i+1:]\n        if sum(new_arr) == sum(set(new_arr)):\n            nice_indices.append(i+1)\n    \n    return str(len(nice_indices)) + \"\\n\" + \" \".join(map(str, nice_indices))\n",
        "test": "assert solution(\"4\\n8 3 5 2\") == \"2\\n1 4\"",
        "indeed": false
    },
    {
        "number": 4018,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(input())\n\n    def is_subsequence(t, s):\n        i = 0\n        for c in s:\n            if i < len(t) and c == t[i]:\n                i += 1\n        return i == len(t)\n\n    def all_subsequences(s):\n        for i in range(len(s) + 1):\n            for t in itertools.combinations(s, i):\n                yield ''.join(t)\n\n    subsequences = set(all_subsequences(s))\n    filtered_subsequences = set(filter(lambda t: is_subsequence(t, s), subsequences))\n\n    if len(filtered_subsequences) < k:\n        return -1\n\n    costs = [n - len(t) for t in filtered_subsequences]\n    return min(costs)",
        "test": "assert solution(\"5 6\\naaaaa\\n\") == \"15\"",
        "indeed": false
    },
    {
        "number": 4019,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    graph = [[0 for _ in range(n)] for _ in range(n)]\n    edges = []\n    \n    for i in range(m):\n        v, u = map(int, input().split())\n        graph[v-1][u-1] = graph[u-1][v-1] = 1\n        edges.append((v-1, u-1))\n    \n    def dfs(node, visited):\n        visited[node] = True\n        for neighbor in range(n):\n            if graph[node][neighbor] == 1 and not visited[neighbor]:\n                dfs(neighbor, visited)\n    \n    spanning_tree = False\n    for i in range(n):\n        visited = [False] * n\n        dfs(i, visited)\n        if all(visited):\n            if graph[0][i] == 1 and D == sum(graph[0]):\n                spanning_tree = True\n                break\n    \n    if not spanning_tree:\n        return \"NO\"\n    \n    result = []\n    for i in range(1, n):\n        for j in range(i):\n            if graph[0][i] == graph[0][j] == 1:\n                graph[0][i], graph[0][j] = 0, 0\n                result.append((i+1, j+1))\n                break\n    \n    for edge in edges:\n        if edge not in result:\n            result.append(edge)\n    \n    result.sort()\n    for edge in result:\n        print(edge[0], edge[1])\n    \n    return \"YES\"\n\ndef",
        "test": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n2 1\\n2 3\\n3 4\\n\"",
        "indeed": false
    },
    {
        "number": 4020,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    start, end = stdin.split()\n    start_hour, start_minute = map(int, start.split(':'))\n    end_hour, end_minute = map(int, end.split(':'))\n\n    # Compute the total number of minutes in the contest\n    total_minutes = (end_hour - start_hour) * 60 + (end_minute - start_minute)\n\n    # Compute the midpoint in minutes\n    midpoint_minutes = total_minutes // 2\n\n    # Compute the midpoint in hours and minutes\n    midpoint_hours = midpoint_minutes // 60\n    midpoint_minutes = midpoint_minutes % 60\n\n    # Adjust the midpoint to be within the same day\n    midpoint_hours += start_hour\n    midpoint_hours %= 24\n\n    # Format the output\n    return f\"{midpoint_hours:02d}:{midpoint_minutes:02d}\"",
        "test": "assert solution(\"10:00\\n11:00\") == \"10:30\"",
        "indeed": false
    },
    {
        "number": 4021,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return str(a // 2)\n    else:\n        return str(a // 2 + 1)",
        "test": "assert solution(\"2\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4022,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    segments = []\n    for line in stdin.splitlines():\n        l, r = map(int, line.split())\n        segments.append((l, r))\n\n    max_length = 0\n    for i in range(len(segments)):\n        remaining_segments = segments[:i] + segments[i+1:]\n        intersection = set()\n        for segment in remaining_segments:\n            if segment[0] <= segment[1]:\n                intersection.add(max(segment[0], segment[1]))\n        if intersection:\n            max_length = max(max_length, max(intersection) - min(intersection))\n\n    return str(max_length)\n\n\ninput_string = \"\"\"4\n1 3\n2 6\n0 4\n3 3\n\n5\n2 6\n1 3\n0 4\n1 20\n0 4\n\n3\n4 5\n1 2\n9 20\n\n2\n3 10\n1 5\"\"\"\n\noutput = solution(input_string)\nprint(output) ",
        "test": "assert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4023,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Check if wall is already complete\n    if all(a[i] == a[i - 1] for i in range(1, n)):\n        return \"YES\"\n\n    # Check if wall can be completed with bricks\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            # Check if there is a part with the same height before the current part\n            j = i - 2\n            while j >= 0:\n                if a[j] == a[i]:\n                    break\n                j -= 1\n            else:\n                return \"NO\"\n\n    return \"YES\"\n",
        "test": "assert solution(\"3\\n4 5 3\") == \"NO\"",
        "indeed": false
    },
    {
        "number": 4024,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[2]\n    if len(s) < k:\n        return -1\n\n    subs = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            subs.append(s[i:j])\n\n    subs = list(set(subs))\n    subs.sort(key=len)\n    cost = 0\n    for sub in subs:\n        if len(set(sub)) == k:\n            cost += len(sub)\n            break\n    return str(cost)\n\nstdin = input()\noutput = solution(stdin)\nprint(output) ",
        "test": "assert solution(\"5 6\\naaaaa\") == \"15\"",
        "indeed": false
    },
    {
        "number": 4025,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    days = [a, b, c]\n    max_days = 0\n\n    for i in range(7):\n        current_days = days[i % 3]\n        current_count = 1\n        while current_days > 0:\n            current_days -= 1\n            current_count += 1\n            if current_count > max_days:\n                max_days = current_count\n\n    return str(max_days)\n\ninput_data = \"2 1 1\"\nprint(solution(input_data)) ",
        "test": "assert solution(\"3 2 1\") == \"4\"",
        "indeed": false
    },
    {
        "number": 4026,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    test_cases = re.findall(r\"(\\d+ \\d+)(?:\\n(\\d+) \\d+\\n(\\d+) \\d+){2}\\n(\\d+) \\d+\\n(\\d+) \\d+)\", stdin)\n    result = []\n\n    for tc in test_cases:\n        n, m = map(int, tc[0].split())\n        tiles = []\n        for i in range(1, len(tc), 2):\n            tiles.append([list(map(int, re.findall(r\"\\d+\", tc[i + 1])))])\n        tiles.append([list(map(int, re.findall(r\"\\d+\", tc[1])))])\n\n        def can_construct(n: int, m: int, tiles: list) -> bool:\n            def place_tile(grid, tile, x: int, y: int) -> bool:\n                for i in range(2):\n                    for j in range(2):\n                        if grid[x + i][y + j] != 0 and grid[x + i][y + j] != tile[i][j]:\n                            return False\n                return True\n\n            def is_symmetric(grid) -> bool:\n                for i in range(m):\n                    for j in range(m):\n                        if grid[i][j] != grid[j][i]:\n                            return False\n                return True\n\n            grid = [[0] * m for _ in range(m)]\n            for tile in tiles:\n                for i in range(m - 2):\n                    for j in range(m - 2):\n                        if place_tile(grid, tile, i, j):\n                            grid[i][j] = tile[0][0]\n                            grid[i][j + 1] = tile[0][1]\n                            grid[i + 1][j] = tile[1][0]\n                            grid[i + 1][j + 1] = tile[1][1]\n                            break\n                    else:\n                        continue\n                    break\n            return is_symmetric(grid)\n\n        if can_construct(n, m, tiles):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n\ntest_case = \"\"\"6\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\"\n\nprint(solution(test_case)) ",
        "test": "assert solution(\"6\\n3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\") == \"YES\\nNO\\nYES\\nYES\\nYES\" ",
        "indeed": false
    },
    {
        "number": 4027,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return str(n // 2)\n    else:\n        return str(n // 2) + \"\\n\" + str(n // 2 + 1)",
        "test": "assert solution(\"5\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4028,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    MOD = 1000000007\n\n    def dfs(pos, depth, open_count, close_count):\n        if pos == len(s) and open_count == close_count:\n            return 1\n        if pos == len(s) or depth == 2 * n:\n            return 0\n\n        result = 0\n        if s[pos] == '(':\n            result += dfs(pos + 1, depth + 1, open_count + 1, close_count)\n        else:\n            result += dfs(pos + 1, depth + 1, open_count, close_count + 1)\n\n        return result % MOD\n\n    return dfs(0, 0, 0, 0)\n",
        "test": "assert solution(\"3\\n(()\") == \"4\"",
        "indeed": false
    },
    {
        "number": 4029,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return 0\n\n    num_zeros = count_leading_zeros(n)\n    if num_zeros > 0:\n        return -1\n\n    num_moves = 0\n    while n % 25 != 0:\n        num_zeros = count_leading_zeros(n)\n        if num_zeros > 0:\n            return -1\n        n = swap_adjacent_digits(n)\n        num_moves += 1\n\n    return num_moves\n\n\ndef",
        "test": "assert solution(\"705\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4030,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    colors = set(s)\n    color_map = {char: i + 1 for i, char in enumerate(colors)}\n    color_count = len(colors)\n\n    colored = [color_map[c] for c in s]\n\n    sorted_colored = sorted(colored)\n\n    min_swaps = 0\n    for i in range(len(sorted_colored)):\n        if colored[i] != sorted_colored[i]:\n            min_swaps += 1\n\n    return f\"{color_count}\\n{' '.join(map(str, colored))}\"",
        "test": "assert solution(\"8\\naaabbcbb\") == \"2\\n1 2 1 2 1 2 1 1 \\n\"",
        "indeed": false
    },
    {
        "number": 4031,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    strings = stdin.splitlines()[1:]\n    for i in range(n):\n        for j in range(i+1, n):\n            if not strings[j].startswith(strings[i]):\n                return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(strings)",
        "test": "assert solution(\"5\\na\\nabacaba\\nba\\naba\\naba\") == \"NO\"",
        "indeed": false
    },
    {
        "number": 4032,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    difficulties = list(map(int, input().split()))\n    left_solved = 0\n    right_solved = 0\n\n    while left_solved < n and difficulties[left_solved] <= k:\n        left_solved += 1\n    while right_solved < n and difficulties[n - right_solved - 1] <= k:\n        right_solved += 1\n\n    return str(min(left_solved, right_solved))\n\nprint(solution(stdin=None)) ",
        "test": "assert solution(\"5 2\\n3 1 2 1 3\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4033,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    # Check if a and b are equal\n    if a == b:\n        # If they are, return the perimeter of the rectangle formed by a and b tiles\n        return str(2 * (a + b))\n\n    # Check if a is greater than b\n    if a > b:\n        # If it is, swap a and b\n        a, b = b, a\n\n    # Calculate the perimeter of the rectangle formed by a and b tiles\n    perimeter = 2 * (a + b)\n\n    # Check if a is odd\n    if a % 2 == 1:\n        # If it is, add the missing side to form a rectangle\n        perimeter += 1\n\n    # Check if b is odd\n    if b % 2 == 1:\n        # If it is, add the missing side to form a rectangle\n        perimeter += 1\n\n    # Return the perimeter of the rectangle\n    return str(perimeter)",
        "test": "assert solution(\"3 9\") == \"14\"",
        "indeed": false
    },
    {
        "number": 4034,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    \n    if n == 1:\n        return \"YES\\n0\"\n    \n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            return \"YES\\n0\" + \"1\" * (n - 1)\n    \n    for i in range(n - 1, 0, -1):\n        if s[i] < s[i - 1]:\n            return \"YES\\n1\" + \"0\" * (n - 1)\n    \n    return \"NO\"\n\n\ndef",
        "test": "assert solution(\"8\\naaabbcbb\\n\") == \"YES\\n01011011\\n\"",
        "indeed": false
    },
    {
        "number": 4035,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return \"-1\"\n    \n    for price in range(1, B + 1):\n        tax_8_percent = price * 0.08\n        tax_10_percent = price * 0.1\n        if int(tax_8_percent) == A and int(tax_10_percent) == B:\n            return str(price)\n    return \"-1\"",
        "test": "assert solution(\"2 3\") == \"-1\"",
        "indeed": false
    },
    {
        "number": 4036,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= k:\n        return \"NO\"\n    if k == 1:\n        return \"YES\\n\" + str(n)\n    if k == 2:\n        return \"YES\\n\" + str(1) + \" \" + str(n-1)\n    if k == 3:\n        return \"YES\\n\" + str(1) + \" \" + str(n//2) + \" \" + str(n - n//2)\n    if n % 3 == 0:\n        a = (n//3, n//3, n//3)\n    elif n % 3 == 1:\n        a = (n//3 + 1, n//3, n//3 - 1)\n    else:\n        a = (n//3, n//3 + 1, n//3)\n    if all(x > 0 for x in a) and sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n\ninput_data = [\n    \"26 6\",\n    \"8 3\",\n    \"1 1\",\n    \"9 4\"\n]\n\nfor data in input_data:\n    print(solution(data)) ",
        "test": "assert solution(\"8 3\") == \"NO\\n\"",
        "indeed": false
    },
    {
        "number": 4037,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[:2])\n    projects = []\n    for line in stdin.split('\\n')[2:]:\n        a, b = map(int, line.split())\n        projects.append((a, b))\n\n    dp = [0] * (r + 1)\n    for i in range(1, n + 1):\n        for j in range(r, 0, -1):\n            if j >= projects[i - 1][0]:\n                dp[j] = max(dp[j], dp[j - projects[i - 1][0]] + projects[i - 1][1])\n\n    max_size = 0\n    for i in range(1, n + 1):\n        if dp[r - projects[i - 1][0]] + projects[i - 1][1] >= r:\n            max_size += 1\n            r -= projects[i - 1][0]\n            r += projects[i - 1][1]\n\n    return str(max_size)\n",
        "test": "assert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"",
        "indeed": false
    },
    {
        "number": 4038,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindromic(matrix: List[List[int]]) -> bool:\n        for i in range(len(matrix)):\n            for j in range(len(matrix)):\n                if matrix[i][j] != matrix[j][i] or matrix[i][j] != matrix[i][len(matrix) - j - 1]:\n                    return False\n        return True\n\n    def print_matrix(matrix: List[List[int]]) -> None:\n        for row in matrix:\n            print(\" \".join(map(str, row)))\n\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n\n    if len(numbers) != n * n:\n        return \"NO\"\n\n    for i in range(n):\n        for j in range(n):\n            matrix = [[0] * n for _ in range(n)]\n            matrix[i][j] = numbers[i * n + j]\n            if is_palindromic(matrix):\n                print_matrix(matrix)\n                return\n\n    return \"NO\"",
        "test": "assert solution(\"3\\n1 1 1 1 1 3 3 3 3 \") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\"",
        "indeed": false
    },
    {
        "number": 4039,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, r, projects = map(int, stdin.split())\n    ratings = [r]\n    for _ in range(n):\n        a, b = map(int, input().split())\n        ratings.append(ratings[-1] + b)\n\n    for i in range(n):\n        if ratings[i] < 0:\n            return \"NO\"\n        if ratings[i] < projects[i]:\n            return \"NO\"\n\n    return \"YES\"\n\ninput_str = input()\nn, r = map(int, input_str.split())\nprojects = []\nfor _ in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprint(solution(input_str)) ",
        "test": "assert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\") == \"YES\"",
        "indeed": false
    },
    {
        "number": 4040,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[0:3])\n    c = list(map(int, stdin.split()[3:]))\n    assert(1 <= n <= 1000 and 1 <= m <= 1000 and 1 <= d <= 1000 and m <= n and sum(c) <= n)\n    \n    # Initialize the river with 0s and 1s for platforms\n    river = [0] * (n + 2)\n    river[0] = 1\n    river[n + 1] = 1\n    \n    # Check if there is a valid solution\n    def check_solution() -> bool:\n        for i in range(n + 1):\n            if river[i] == 1 and i + d > n:\n                return False\n        return True\n    \n    # Move platforms left or right\n    def move_platform(i: int, j: int) -> None:\n        while i < j:\n            river[i], river[j] = river[j], river[i]\n            i += 1\n            j -= 1\n    \n    # Check if platforms do not intersect\n    def check_intersection() -> bool:\n        for i in range(n + 2):\n            if river[i] != 0 and i + c[river[i] - 1] > n:\n                return False\n        return True\n    \n    if not check_solution():\n        return \"NO\"\n    \n    # Move platforms until we start jumping\n    while not check_intersection():\n        for i in range(1, m + 1):\n            if c[i - 1] + river[i] <= n:\n                move_platform(i, c[i - 1] + river[i])\n            if c[i - 1] - river[i] >= 1:\n                move_platform(i, c[i - 1] - river[i])\n    \n    # Print the answer\n    ans = [0] * (n + 2)\n    for i in range(1, m + 1):\n        if river[i] == 0:\n            continue\n        ans[c[river[i] - 1] + river[i]] = river[i]\n    return \"YES\" + \"\\n\" + \" \".join(map(str, ans[1:n+1])) ",
        "test": "assert solution(\"10 1 11\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 1 \\n\"",
        "indeed": false
    },
    {
        "number": 4041,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    i, j = 0, 0\n    max_len = 0\n    \n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            max_len = max(max_len, i - j + 1)\n            j += 1\n        i += 1\n    \n    return str(max_len)",
        "test": "assert solution(\"baaba\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4042,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(x // 1)\n    b = int((x % 1) * 10)\n    return f\"{a + b} {a + b - 1}\"",
        "test": "assert solution(\"2.572479\") == \"10 3\"",
        "indeed": false
    },
    {
        "number": 4043,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    \n    def is_valid_tree(n: int, d: int, k: int) -> bool:\n        return n * k >= 2 * d - 1 and n * k <= 2 * d + k - 1\n    \n    if not is_valid_tree(n, d, k):\n        return \"NO\"\n    \n    edges = set()\n    vertices = set(range(1, n+1))\n    \n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            if len(vertices & {i, j}) == 2:\n                edges.add((i, j))\n                \n    if len(edges) == n - 1:\n        return \"YES\" + \"\\n\" + \"\\n\".join(f\"{i} {j}\" for i, j in sorted(edges))\n    else:\n        return \"NO\"",
        "test": "assert solution(\"6 2 3\") == \"NO\"",
        "indeed": false
    },
    {
        "number": 4044,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    \n    if x > a:\n        a, b = b, a\n        x = n - x\n        \n    s = [\"0\"] * a + [\"1\"] * b\n    for i in range(x):\n        s[i], s[i + 1] = s[i + 1], s[i]\n    \n    return \"\".join(s)",
        "test": "assert solution(\"2 2 1\") in [\"1100\", \"0011\"]",
        "indeed": false
    },
    {
        "number": 4045,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split()\n    n = int(n)\n    if s == t or s[0] == t[0] or s[1] == t[1]:\n        return \"NO\"\n    if n > 1:\n        if s[0] == s[1] or t[0] == t[1]:\n            return \"NO\"\n    res = \"\"\n    for i in range(n):\n        if s[0] != s[1]:\n            res += s[0]\n            res += s[1]\n        else:\n            res += t[0]\n            res += t[1]\n        if t[0] != t[1]:\n            res += t[0]\n            res += t[1]\n        else:\n            res += s[0]\n            res += s[1]\n    return \"YES\\n\" + res\n\ndef",
        "test": "assert solution(\"3\\naa\\ncb\") == \"YES\\nacbacbab\"",
        "indeed": false
    },
    {
        "number": 4046,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    q = list(map(int, stdin.splitlines()[1].split()))\n\n    def restore_permutation(n: int, q: list) -> str:\n        p = [0] * n\n        p[0] = 1\n\n        for i in range(n - 1):\n            p[i + 1] = p[i] + q[i]\n\n        if p[-1] == n:\n            return \" \".join(map(str, p))\n        return \"-1\"\n\n    return restore_permutation(n, q)\n\n\ndef",
        "test": "assert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"",
        "indeed": false
    },
    {
        "number": 4047,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    x = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    # find the minimum coordinate\n    min_x = min(x)\n\n    # calculate the cost of moving all chips to the minimum coordinate\n    cost = 0\n    for i in range(n):\n        if x[i] != min_x:\n            cost += abs(x[i] - min_x)\n\n    return str(cost)",
        "test": "assert solution(\"5\\n2 2 2 3 3\") == \"2\" ",
        "indeed": false
    },
    {
        "number": 4048,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N < 2 or N > 10**12:\n        return \"Invalid input\"\n\n    i, j = 1, 1\n    moves = 0\n\n    while i * j < N:\n        if i * j + i < N:\n            i += 1\n        else:\n            j += 1\n        moves += 1\n\n    return str(moves)",
        "test": "assert solution(\"10\") == \"5\"",
        "indeed": false
    },
    {
        "number": 4049,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n    \n    min_wins = 0\n    max_wins = 0\n    \n    for i in range(3):\n        for j in range(3):\n            if (i == 0 and j == 2) or (i == 1 and j == 0) or (i == 2 and j == 1):\n                min_wins += min(a[i], b[j])\n                max_wins += max(a[i], b[j])\n            elif (i == 1 and j == 2) or (i == 2 and j == 0):\n                min_wins += max(a[i], b[j])\n                max_wins += min(a[i], b[j])\n            else:\n                min_wins += a[i]\n                max_wins += b[j]\n    \n    return f\"{min_wins} {max_wins}\" ",
        "test": "assert solution(\"15\\n5 5 5\\n5 5 5\") == \"0 15\"",
        "indeed": false
    },
    {
        "number": 4050,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = [a[i-1] for i in range(1, 2*n+1, 2)]\n    max_sum = max(a)\n    min_sum = min(a)\n\n    if max_sum - min_sum >= n:\n        return \"0\"\n\n    k = n - (max_sum - min_sum)\n    ans = []\n    i = 0\n    while i < n:\n        if a[i] == min_sum:\n            ans.append((i+1, i+k))\n            i += k\n        else:\n            i += 1\n\n    result = [str(len(ans))] + [f\"{l} {r}\" for (l, r) in ans]\n    return \"\\n\".join(result)\n",
        "test": "assert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n') == '2\\n3 4\\n1 1\\n'",
        "indeed": false
    },
    {
        "number": 4051,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    def can_sort(a: List[int]) -> bool:\n        stacks = []\n        for i in range(n):\n            height = a[i]\n            while stacks and height > stacks[-1][0]:\n                if height - stacks[-1][0] <= 2:\n                    return False\n                height -= 1\n            stacks.append((height, i))\n        \n        sorted_a = [0] * n\n        index = 0\n        while stacks:\n            height, i = stacks.pop()\n            sorted_a[index] = a[i]\n            index += 1\n        \n        return sorted_a == sorted(a)\n    \n    return \"YES\" if can_sort(a) else \"NO\" ",
        "test": "assert solution(\"3\\n3 1 2\") == \"NO\"",
        "indeed": false
    },
    {
        "number": 4052,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    if s == t:\n        return \"0\"\n\n    for i in range(n - 1):\n        if s[i:i+2] == t[i:i+2][::-1]:\n            return str(i) + \" \" + str(i + 1)\n\n    return \"-1\"\n\nstdin = open(\"input.txt\")\nstdout = open(\"output.txt\", \"w\")\nstdout.write(solution(stdin))\nstdout.close() ",
        "test": "assert solution(\"4\\nabcd\\naccd\\n\") == \"-1\" ",
        "indeed": false
    },
    {
        "number": 4053,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    prefixes_suffixes = stdin.read().splitlines()\n    prefixes, suffixes = prefixes_suffixes[:n-1], prefixes_suffixes[n-1:]\n\n    def is_prefix_suffix(s: str, prefixes: List[str], suffixes: List[str]) -> bool:\n        for p in prefixes:\n            if s.startswith(p):\n                return True\n        for s in suffixes:\n            if s.endswith(s):\n                return True\n        return False\n\n    guesses = set()\n    for s in prefixes + suffixes:\n        for i in range(2, n):\n            prefix = s[:i]\n            suffix = s[-i:]\n            if is_prefix_suffix(prefix, prefixes, suffixes) and is_prefix_suffix(suffix, prefixes, suffixes):\n                guesses.add(s)\n\n    answer = ''\n    for s in prefixes_suffixes:\n        if s in guesses:\n            answer += 'P'\n        else:\n            answer += 'S'\n\n    return answer",
        "test": "assert solution(\"3\\na\\naa\\na\\n\") == \"PPSS\"",
        "indeed": false
    },
    {
        "number": 4054,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a list of numbers, returns the number of unique pairs of numbers that can be added to form a perfect square.\n\n    Args:\n        stdin: A string containing a list of space-separated integers.\n\n    Returns:\n        A string containing the number of unique pairs of numbers that can be added to form a perfect square.\n    \"\"\"\n    nums = list(map(int, stdin.split()))\n    unique_pairs = set()\n\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            total = nums[i] + nums[j]\n            if int(total ** 0.5) ** 2 == total:\n                unique_pairs.add(frozenset([nums[i], nums[j]]))\n\n    return str(len(unique_pairs))",
        "test": "assert solution(\"2 4 6 8 10\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4055,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, light_array = [int(x) for x in stdin.split()]\n    min_k = n + 1\n    \n    for i in range(1, n-1):\n        if light_array[i-1] == light_array[i+1] == 1 and light_array[i] == 0:\n            continue\n        else:\n            left = i - 2\n            right = i + 2\n            while left >= 0 and right < n:\n                if light_array[left] == light_array[right] == 1 and light_array[i] == 0:\n                    if i - left - 1 < min_k:\n                        min_k = i - left - 1\n                    break\n                elif left == 0 and right == n - 1:\n                    min_k = 0\n                    break\n                left -= 1\n                right += 1\n                \n    return str(min_k)\n\ndef",
        "test": "assert solution(\"5\\n1 1 0 0 0\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4056,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    \n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n    \n    lcm_result = 1\n    for i in a:\n        lcm_result = lcm(lcm_result, i)\n    \n    return str(lcm_result)\n\ndef",
        "test": "assert solution(\"6\\n6 90 12 18 30 18\") == \"4\\n\" ",
        "indeed": false
    },
    {
        "number": 4057,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n = int(input_lines[0])\n    coins = list(map(int, input_lines[1].split()))\n\n    coin_count = {}\n    for coin in coins:\n        if coin not in coin_count:\n            coin_count[coin] = 1\n        else:\n            coin_count[coin] += 1\n\n    pockets_count = 0\n    for count in coin_count.values():\n        pockets_count += count\n\n    return str(pockets_count)\n",
        "test": "assert solution(\"1\\n100\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4058,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[:2])\n    heaters = list(map(int, stdin.split()[2:]))\n\n    def find_warmup_range(pos):\n        return [max(pos - r + 1, 0), min(pos + r - 1, n - 1)]\n\n    heaters_count = 0\n    warmed_up_elements = [False] * n\n    for i, heater in enumerate(heaters):\n        if heater == 1:\n            warmup_range = find_warmup_range(i)\n            warmed_up_elements[warmup_range[0]:warmup_range[1] + 1] = [True] * (warmup_range[1] - warmup_range[0] + 1)\n\n    if all(warmed_up_elements):\n        return str(heaters_count)\n    else:\n        return \"-1\"\n",
        "test": "assert solution(\"5 3\\n1 0 0 0 1\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4059,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for A in range(1, N+1):\n        for B in range(1, N+1):\n            C = N - A*B\n            if C > 0 and C <= N:\n                count += 1\n    return str(count)",
        "test": "assert solution('1') == '0'",
        "indeed": false
    },
    {
        "number": 4060,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    \n    count = 0\n    for i in range(n):\n        if s[i] == '(' and i > 0 and s[i - 1] == ')' or s[i] == ')' and i < n - 1 and s[i + 1] == '(':\n            count += 1\n            \n    return count",
        "test": "assert solution(\"6\\n()()()\") == \"0\\n\"",
        "indeed": false
    },
    {
        "number": 4061,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    for i in range(len(s), 0, -1):\n        if s.startswith(t):\n            return i\n    return 0\n\ndef",
        "test": "assert solution(\"baaba\\nab\") == 2",
        "indeed": false
    },
    {
        "number": 4062,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    max_value = 0\n\n    for x in range(a, b + 1):\n        for y in range(c, d + 1):\n            product = x * y\n            if product > max_value:\n                max_value = product\n\n    return str(max_value)",
        "test": "assert solution(\"1 2 1 1\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4063,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, problems = map(int, stdin.split())\n    problems = list(map(int, problems.split()))\n    arc_count = 0\n    abc_count = 0\n    choices = set()\n    \n    for problem in problems:\n        if problem >= 5:\n            arc_count += 1\n        else:\n            abc_count += 1\n    \n    for i in range(1, 10001):\n        if (N - arc_count) == (N - abc_count):\n            choices.add(i)\n        if i == 5:\n            break\n        if i % 2 == 0:\n            arc_count += 1\n        else:\n            abc_count += 1\n    \n    return str(len(choices))",
        "test": "assert solution(\"10\\n1000 999 998 997 996 995 994 993 992\") == \"1\\n\"",
        "indeed": false
    },
    {
        "number": 4064,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[0].split())\n    a = list(map(int, stdin.split()[1].split()))\n    \n    good_times = 0\n    for i in range(n):\n        if l <= a[i] <= r:\n            if i == 0 or a[i] - 1 != a[i-1]:\n                good_times += 1\n    \n    return str(good_times)\n\ndef",
        "test": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"",
        "indeed": false
    },
    {
        "number": 4065,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    difficulties = list(map(int, stdin.split()[1:]))\n\n    if n == 1:\n        return \"1\"\n\n    max_problems = 1\n    for i in range(1, n):\n        if difficulties[i] * 2 <= difficulties[i - 1]:\n            max_problems += 1\n        else:\n            break\n\n    return str(max_problems)",
        "test": "assert solution(\"5\\n2 10 50 110 250\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4066,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    lcm = lambda x, y: x * y // math.gcd(x, y)\n    min_lcm = math.inf\n    min_pair = None\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lcm(a[i], a[j]) < min_lcm:\n                min_lcm = lcm(a[i], a[j])\n                min_pair = (i + 1, j + 1)\n\n    return f\"{min_pair[0]} {min_pair[1]}\"",
        "test": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"",
        "indeed": true
    },
    {
        "number": 4067,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    \n    count = {\"0\": 0, \"1\": 0, \"2\": 0}\n    for char in s:\n        count[char] += 1\n    \n    min_replacements = float(\"inf\")\n    result = \"\"\n    \n    for char in \"012\":\n        if count[char] != n // 3:\n            replacements = abs(count[char] - n // 3)\n            if replacements < min_replacements:\n                min_replacements = replacements\n                result = char * (n // 3) + char.swapcase() * (n // 3) + char.swapcase() * (n // 3)\n    \n    return result",
        "test": "assert solution(\"000000\") == \"001122\"",
        "indeed": false
    },
    {
        "number": 4068,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, broken_steps = map(int, stdin.split())\n    broken_steps = set(broken_steps)\n\n    dp = [0] * (n + 1)\n    dp[0] = 1\n\n    MOD = 1000000007\n\n    for i in range(1, n + 1):\n        if i not in broken_steps:\n            dp[i] += dp[i - 1]\n            if i - 2 >= 0 and i - 2 not in broken_steps:\n                dp[i] += dp[i - 2]\n            dp[i] %= MOD\n\n    return str(dp[n])\n",
        "test": "assert solution(\"10 2\\n3\\n5\\n\") == \"14\"",
        "indeed": false
    },
    {
        "number": 4069,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.strip().split())\n    if k % 2 == 0:\n        return str(min(abs(x + (k // 2) * d), abs(x - (k // 2) * d)))\n    else:\n        return str(min(abs(x + (k // 2 + 1) * d), abs(x - (k // 2) * d)))",
        "test": "assert solution(\"6 2 4\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4070,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n // 2)",
        "test": "assert solution(\"14\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4071,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    return str(a * (a + 1) // 2)",
        "test": "assert solution(\"1\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4072,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if 10 <= a <= 999:\n        return str(int(str(a)[-1]) % 2)\n    else:\n        return \"Invalid input\"",
        "test": "assert solution(\"927\") == \"1\"",
        "indeed": true
    },
    {
        "number": 4073,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] == 11:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"3\\n1 2 3\") == \"3\"",
        "indeed": false
    },
    {
        "number": 4074,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    for n, k in stdin.split(\"\\n\")[1:]:\n        n, k = int(n), int(k)\n        if n == 1:\n            result.append(\"1\")\n        elif k == 1:\n            result.append(str(n))\n        else:\n            x = 1\n            while x * (k + 1) <= n:\n                x += 1\n            result.append(str(x * k))\n    return \"\\n\".join(result)\n",
        "test": "assert solution(\"5\\n8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\") == \"2\\n8\\n1\\n999999733\\n1\" ",
        "indeed": false
    },
    {
        "number": 4075,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def count_states(k, s, p):\n        def count_on_states(switches):\n            return sum(switches) % 2 == p\n\n        def backtrack(index, used, count):\n            if index == len(s):\n                return count\n\n            if count_on_states(used):\n                count += 1\n\n            used[s[index] - 1] = True\n            count = backtrack(index + 1, used, count)\n            used[s[index] - 1] = False\n\n            return backtrack(index + 1, used, count)\n\n        used = [False] * len(s)\n        return backtrack(0, used, 0)\n\n    N, M = map(int, stdin.readline().split())\n    k_list, s_list, p_list = [], [], []\n    for i in range(M):\n        k_list.append(int(stdin.readline().split()[0]))\n        s_list.append(list(map(int, stdin.readline().split())))\n        p_list.append(int(stdin.readline().split()[0]))\n\n    result = 1\n    for i in range(M):\n        result *= count_states(k_list[i], s_list[i], p_list[i])\n\n    return str(result % (10**9 + 7))\n\ninput_str = \"2 2\\n2 1 2\\n1 2\\n0 1\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\" ",
        "indeed": false
    },
    {
        "number": 4076,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n\n    angle_hour = H * 30 + M / 2\n    angle_minute = M * 6\n    angle_diff = angle_hour - angle_minute\n\n    distance = (A * A + B * B - 2 * A * B * math.cos(math.radians(angle_diff))) ** 0.5\n\n    return f\"{distance:.9f}\"\n\ndef",
        "test": "assert solution(\"3 4 0 0\") == \"6.00000000000000000000\"",
        "indeed": false
    },
    {
        "number": 4077,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def median(l, r):\n        if len(a[l:r+1]) % 2 == 0:\n            return (a[l:r+1][len(a[l:r+1])//2-1] + a[l:r+1][len(a[l:r+1])//2]) / 2\n        else:\n            return a[l:r+1][len(a[l:r+1])//2]\n\n    count = 0\n    for l in range(n):\n        for r in range(l, n):\n            if median(l, r) == m:\n                count += 1\n\n    return str(count)\n",
        "test": "assert solution(\"3 1\\n1 1 1\") == \"6\"",
        "indeed": false
    },
    {
        "number": 4078,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split()[2+i*2:4+i*2])\n        segments.append((l, r))\n    \n    def max_min_difference(a, segments):\n        max_d = 0\n        for l, r in segments:\n            a[l-1:r] = [x-1 for x in a[l-1:r]]\n            max_d = max(max_d, max(a)-min(a))\n        return max_d\n    \n    max_d = 0\n    q = 0\n    chosen_segments = []\n    for i, (l, r) in enumerate(segments):\n        new_a = a.copy()\n        new_a[l-1:r] = [x-1 for x in new_a[l-1:r]]\n        new_d = max_min_difference(new_a, segments[:i]+segments[i+1:])\n        if new_d > max_d:\n            max_d = new_d\n            q = i+1\n            chosen_segments = [i+1]\n        elif new_d == max_d:\n            chosen_segments.append(i+1)\n    \n    return f\"{max_d}\\n{q}\\n{' '.join(map(str, chosen_segments))}\"",
        "test": "assert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\\n\"",
        "indeed": false
    },
    {
        "number": 4079,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_diverse(s: str) -> bool:\n        if len(s) > 26:\n            return False\n        if len(set(s)) != len(s):\n            return False\n        for i in range(len(s) - 1):\n            if abs(ord(s[i]) - ord(s[i+1])) != 1:\n                return False\n        return True\n\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    lines = lines[1:]\n    for i, s in enumerate(lines):\n        if is_diverse(s):\n            print(\"Yes\")\n        else:\n            print(\"No\")",
        "test": "assert solution(\"xyz\") == \"Yes\"",
        "indeed": false
    },
    {
        "number": 4080,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def max_diff(a, segments):\n        n = len(a)\n        max_diff = 0\n        for l, r in segments:\n            for i in range(l - 1, r):\n                max_diff = max(max_diff, a[i] - a[i - l + 1])\n                a[i] -= 1\n        return max_diff\n\n    def find_segments(a, m):\n        n = len(a)\n        segments = set()\n        for i in range(n):\n            for j in range(i + 1, n):\n                if a[i] != a[j]:\n                    segments.add((i + 1, j + 1))\n        segments = sorted(list(segments))[:m]\n        return segments\n\n    n, m = map(int, stdin.split()[0].split())\n    a = list(map(int, stdin.split()[1].split()))\n    segments = [list(map(int, stdin.split()[i + 2].split())) for i in range(m)]\n\n    segments = find_segments(a, m)\n    max_diff = max_diff(a, segments)\n    q = len(segments)\n\n    result = [max_diff, q] + sorted([i + 1 for i, segment in enumerate(segments)])\n\n    return \" \".join(map(str, result))",
        "test": "assert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\\n\"",
        "indeed": false
    },
    {
        "number": 4081,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    if len(a) != n:\n        raise ValueError(\"Invalid input\")\n\n    left, right = [1] * n, [1] * n\n    for i in range(1, n):\n        left[i] = max(left[i], left[i - 1] + 1)\n        right[n - i - 1] = max(right[n - i - 1], right[n - i] + 1)\n\n    max_k = max(left) + max(right) - 1\n    s = \"\"\n    for i in range(n):\n        if left[i] + right[i] - 1 == max_k:\n            if i == 0 or i == n - 1:\n                s += \"R\"\n            else:\n                if a[i] < a[i - 1]:\n                    s += \"L\"\n                else:\n                    s += \"R\"\n\n    return str(max_k) + \"\\n\" + s\n\ndef",
        "test": "assert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\\n\"",
        "indeed": false
    },
    {
        "number": 4082,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # find the maximum length of increasing subarray without removing any element\n    max_length = 1\n    current_length = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 1\n\n    # remove one element and find the maximum length of increasing subarray\n    max_length_after_removing = 1\n    current_length_after_removing = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            current_length_after_removing += 1\n            max_length_after_removing = max(max_length_after_removing, current_length_after_removing)\n        else:\n            current_length_after_removing = 1\n    max_length = max(max_length, max_length_after_removing)\n\n    return str(max_length)",
        "test": "assert solution(\"2\\n1 2\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4083,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i] == a[i+1]:\n            count += 1\n            if count == k:\n                return str(i+1)\n    return str(count)",
        "test": "assert solution('5 3\\n1 2 3 4 5\\n') == '2'",
        "indeed": false
    },
    {
        "number": 4084,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    # Calculate the number of blue balls among the first N balls\n    total_blue = (N // (A + B) * A) + min(N % (A + B), A)\n    return str(total_blue)",
        "test": "assert solution('8 3 4') == '4'",
        "indeed": true
    },
    {
        "number": 4085,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find_x(divisors: List[int]) -> int:\n        divisors.sort()\n        n = len(divisors)\n        for i in range(n - 2, -1, -1):\n            if divisors[i] * divisors[i + 1] <= divisors[-1]:\n                return divisors[i] * divisors[i + 1]\n        return -1\n\n    t = int(stdin.splitlines()[0])\n    result = []\n    for i in range(t):\n        n = int(stdin.splitlines()[2 * i + 1])\n        divisors = list(map(int, stdin.splitlines()[2 * i + 2].split()))\n        x = find_x(divisors)\n        result.append(str(x))\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"1\\n2\\n2\") == \"-1\"",
        "indeed": false
    },
    {
        "number": 4086,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    unique_a = list(set(a))\n    x = len(unique_a)\n    result = []\n    \n    for num in unique_a:\n        result.append(a[a.index(num):][0])\n    \n    return str(x) + '\\n' + ' '.join(map(str, result))\n\n\ninput_string = '''6\n1 5 5 1 6 1'''\n\noutput = solution(input_string)\nprint(output)\n\ninput_string = '''5\n2 4 2 4 4'''\n\noutput = solution(input_string)\nprint(output)\n\ninput_string = '''5\n6 6 6 6 6'''\n\noutput = solution(input_string)\nprint(output) ",
        "test": "assert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"",
        "indeed": false
    },
    {
        "number": 4087,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    while True:\n        a += 1\n        if sum(int(digit) for digit in str(a)) % 4 == 0:\n            return str(a)",
        "test": "assert solution(\"432\") == \"435\"",
        "indeed": false
    },
    {
        "number": 4088,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split(\"\\n\")[0])\n    output = []\n\n    for i in range(q):\n        s, m, b = stdin.split(\"\\n\")[3*i+1:3*i+4]\n        b = [int(x) for x in b.split(\" \")]\n\n        for j in range(len(s)):\n            s_modified = s[:j] + s[j+1:]\n            if b == get_b(s_modified):\n                output.append(s_modified)\n                break\n\n    return \"\\n\".join(output)\n\n\ndef",
        "test": "assert solution(\"abac\\n3\\n2 1 0\\nabc\\n1\\n0\\nabba\\n3\\n1 0 1\\necosdcefr\\n10\\n38 13 24 14 11 5 3 24 17 0\") == \"aac\\nb\\na\\ncodeforces\"",
        "indeed": false
    },
    {
        "number": 4089,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1 or N > 1000000000000001:\n        return \"Invalid input\"\n\n    def get_dog_name(number: int) -> str:\n        if number <= 26:\n            return chr(96 + number)\n\n        base = 26\n        result = \"\"\n        while number > 0:\n            remainder = (number - 1) % base\n            result = chr(97 + remainder) + result\n            number = (number - 1) // base\n            base += 1\n        return result\n\n    return get_dog_name(N)",
        "test": "assert solution(\"1\") == \"a\"",
        "indeed": false
    },
    {
        "number": 4090,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    words = stdin.split()[1:]\n\n    def compare_segments(i1: int, j1: int, i2: int, j2: int) -> bool:\n        if j1 - i1 != j2 - i2:\n            return False\n        for t in range(j1 - i1 + 1):\n            if words[i1 + t] != words[i2 + t]:\n                return False\n        return True\n\n    def abbreviate(i1: int, j1: int, i2: int, j2: int) -> None:\n        nonlocal text, n\n        if i1 > 0 and compare_segments(i1 - 1, j1, i2 - 1, j2):\n            abbreviate(i1 - 1, j1, i2 - 1, j2)\n        else:\n            if i1 > 0:\n                abbreviated_word = words[i1][0].upper()\n            else:\n                abbreviated_word = \"\"\n            abbreviated_word += words[i1 + j1 - 1][0].upper()\n            text = text[:i1] + abbreviated_word + text[j1:]\n            n -= j1 - i1\n\n    text = \" \".join(words)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    if compare_segments(i, j, k, l):\n                        abbreviate(i, j, k, l)\n                        break\n\n    return text",
        "test": "assert solution(\"10\\na ab a a b ab a a b c\") == 13",
        "indeed": false
    },
    {
        "number": 4091,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    difficulties = list(map(int, stdin.split()))\n    \n    max_profit = 0\n    best_distribution = None\n    \n    for start_index in range(n - k + 1):\n        end_index = start_index + k - 1\n        current_difficulties = difficulties[start_index : end_index + 1]\n        current_profit = max(current_difficulties)\n        \n        if current_profit > max_profit:\n            max_profit = current_profit\n            best_distribution = [1] * k\n            best_distribution[current_difficulties.index(max_profit)] += len(current_difficulties)\n        elif current_profit == max_profit:\n            current_distribution = [1] * k\n            current_distribution[current_difficulties.index(max_profit)] += len(current_difficulties)\n            if current_distribution != best_distribution:\n                best_distribution = current_distribution\n    \n    return str(max_profit) + \"\\n\" + \" \".join(map(str, best_distribution))\n",
        "test": "assert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"",
        "indeed": false
    },
    {
        "number": 4092,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    array = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    min_insertions = 0\n    \n    i = 0\n    while i < n:\n        current_sum = array[i]\n        j = i + 1\n        while j < n and current_sum != 0:\n            current_sum += array[j]\n            j += 1\n        \n        if current_sum == 0:\n            min_insertions += 1\n            i = j - 1\n        else:\n            i = j\n    \n    return str(min_insertions)",
        "test": "assert solution(\"5\\n4 -2 3 -9 2\\n\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4093,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    output = []\n\n    for i in range(1, t + 1):\n        n, m = map(int, lines[i].split())\n\n        # Handle edge cases\n        if n == 1:\n            output.append(str(m))\n            continue\n        if m == 0:\n            output.append(str(n - 1))\n            continue\n\n        # Calculate the answer\n        max_sum = m\n        for j in range(1, n):\n            max_sum += max(j, n - j)\n\n        output.append(str(max_sum))\n\n    return '\\n'.join(output)",
        "test": "assert solution(\"5\\n1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"",
        "indeed": false
    },
    {
        "number": 4094,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    sequence = [7, 77, 777, 7777, 77777, 777777]\n    for i, num in enumerate(sequence):\n        if num % K == 0:\n            return str(i + 1)\n    return \"-1\"",
        "test": "assert solution(\"101\") == \"4\" ",
        "indeed": false
    },
    {
        "number": 4095,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:]))\n    \n    def median(left, right):\n        if (right - left + 1) % 2 == 0:\n            return (p[left + (right - left) // 2 - 1] + p[left + (right - left) // 2]) // 2\n        else:\n            return p[left + (right - left) // 2]\n    \n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if median(i, j - 1) == m:\n                count += 1\n    \n    return str(count)\n\ndef",
        "test": "assert solution(\"5 5\\n1 2 3 4 5\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4096,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups = list(map(int, input().split()))\n\n    if sum(cups) < m:\n        return \"-1\"\n\n    days = 0\n    pages_written = 0\n\n    while pages_written < m:\n        days += 1\n        max_cups_to_drink = min(n, m - pages_written)\n\n        for cup in cups:\n            pages_written += min(cup, max_cups_to_drink)\n            max_cups_to_drink -= 1\n\n            if max_cups_to_drink == 0:\n                break\n\n    return str(days)\n\n\nstdin = \"5 8\\n2 3 1 1 2\"\nprint(solution(stdin)) ",
        "test": "assert solution('7 10\\n1 3 4 2 1 4 2') == '2'",
        "indeed": false
    },
    {
        "number": 4097,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n    min_changes = -1\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if b[j] - b[i] == b[i+1] - b[j]:\n                min_changes = max(min_changes, j - i - 1)\n\n    return str(min_changes)",
        "test": "assert solution(\"2\\n500 500\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4098,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    students = list(map(int, stdin.split()[2:]))\n    students.sort()\n    total_students = 0\n    teams = []\n\n    for i in range(n - k + 1):\n        team = students[i:]\n        if max(team) - min(team) <= 5:\n            total_students += len(team)\n            teams.append(team)\n\n    return str(total_students)",
        "test": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"",
        "indeed": false
    },
    {
        "number": 4099,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_average(scores: list) -> float:\n        return sum(scores) / len(scores)\n\n    def calculate_minimum_score(goal: int, scores: list, k: int) -> int:\n        if goal <= calculate_average(scores):\n            return -1\n\n        total_scores = sum(scores)\n        total_subjects = len(scores) + 1\n        return goal * total_subjects - total_scores\n\n    input_list = stdin.split(\"\\n\")\n    n, k, m = map(int, input_list[0].split())\n    scores = list(map(int, input_list[1].split()))\n\n    minimum_score = calculate_minimum_score(m, scores, k)\n    return str(minimum_score)",
        "test": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"",
        "indeed": false
    },
    {
        "number": 4100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, k, q, *answers = map(int, stdin.split())\n\n    # Initialize scores\n    scores = [k] * n\n\n    # Process answers\n    for i in range(q):\n        player = answers[i] - 1\n        for j in range(n):\n            if j != player:\n                scores[j] -= 1\n\n    # Check survivors\n    survivors = [\n        \"Yes\" if score > 0 else \"No\"\n        for score in scores\n    ]\n\n    # Return output\n    return \"\\n\".join(survivors)",
        "test": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"",
        "indeed": false
    },
    {
        "number": 4101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = [[int(x) for x in stdin.split('\\n')[i].split()] for i in range(1, n+1)]\n    \n    # Initialize the final matrix with the same elements as a\n    final_matrix = [row[:] for row in a]\n    \n    # Initialize the list of inverted rows and columns\n    inverted_rows = [0] * n\n    inverted_cols = [0] * m\n    \n    # Sort the matrix by inverting rows and columns\n    for i in range(n):\n        if sum(a[i]) > (n+m-1) / 2:\n            # Invert the row\n            inverted_rows[i] = 1\n            final_matrix[i] = [1 - x for x in final_matrix[i]]\n            \n            # Invert the corresponding columns\n            for j in range(m):\n                if final_matrix[i][j] == 1:\n                    inverted_cols[j] = 1 - inverted_cols[j]\n    \n    # Check if the matrix is sorted\n    is_sorted = True\n    for i in range(n):\n        for j in range(m):\n            if final_matrix[i][j] < a[i][j]:\n                is_sorted = False\n                break\n        if not is_sorted:\n            break\n    \n    # Return the answer\n    if is_sorted:\n        return \"YES\\n\" + \"\".join(map(str, inverted_rows)) + \"\\n\" + \"\".join(map(str, inverted_cols))\n    else:\n        return \"NO\"",
        "test": "assert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"",
        "indeed": false
    },
    {
        "number": 4102,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    if len(set(stdin)) == len(stdin):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"121\") == \"No\"",
        "indeed": false
    },
    {
        "number": 4103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a, segments = stdin.split()\n    n = int(n)\n    b = int(b)\n    a = int(a)\n    segments = [int(s) for s in segments.split()]\n    \n    # Initialize accumulator and battery charge\n    accumulator_charge = 0\n    battery_charge = b\n    \n    # Count the number of segments that can be traversed using the accumulator and battery\n    accumulator_traversal_count = 0\n    battery_traversal_count = 0\n    \n    # Traverse the segments\n    for i in range(n):\n        # If the current segment is exposed, charge the accumulator\n        if segments[i] == 1 and accumulator_charge < a:\n            accumulator_charge += 1\n        # Use the battery to traverse the segment\n        if battery_charge > 0:\n            battery_charge -= 1\n            battery_traversal_count += 1\n        # Use the accumulator to traverse the segment\n        if accumulator_charge > 0:\n            accumulator_charge -= 1\n            accumulator_traversal_count += 1\n    \n    # Return the maximum number of segments that can be traversed using the accumulator and battery\n    return max(accumulator_traversal_count, battery_traversal_count)",
        "test": "assert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\" ",
        "indeed": false
    },
    {
        "number": 4104,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin\n    result = eval(expression)\n    return str(result)",
        "test": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"",
        "indeed": false
    },
    {
        "number": 4105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    pairs = [(i, (i + 1) % n) for i in range(n)]\n\n    for b in range(1, k + 1):\n        for g in range(1, k + 1):\n            valid = True\n            for i in range(n):\n                if (b, g) == (b[pairs[i]], g[pairs[i]]):\n                    valid = False\n                    break\n                if (b, g) == (g[pairs[i]], b[pairs[i]]):\n                    valid = False\n                    break\n            if valid:\n                for i in range(n - 1):\n                    if (b[pairs[i]], g[pairs[i]]) == (b[pairs[i + 1]], g[pairs[i + 1]]):\n                        valid = False\n                        break\n                    if (b[pairs[i]], g[pairs[i]]) == (g[pairs[i + 1]], b[pairs[i + 1]]):\n                        valid = False\n                        break\n            if valid:\n                result = \"\"\n                for i in range(n):\n                    result += f\"{b} {g}\\n\"\n                return \"YES\\n\" + result\n    return \"NO\"",
        "test": "assert solution(\"10 4\") == \"YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\"",
        "indeed": false
    },
    {
        "number": 4106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    \n    if x > n:\n        return \"-1\"\n    \n    a.sort(reverse=True)\n    max_sum = 0\n    repost_count = 0\n    \n    for i in range(n - k + 1):\n        current_sum = sum(a[i:i+k])\n        max_sum = max(max_sum, current_sum)\n        \n        if i + k <= n:\n            max_sum = max(max_sum, current_sum + a[i + k])\n        \n    if x < n - k + 1:\n        return \"-1\"\n    \n    return str(max_sum)",
        "test": "assert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\\n\"",
        "indeed": false
    },
    {
        "number": 4107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    routers, rooms = stdin.split()\n    min_cost = float('inf')\n    \n    for i in range(n):\n        if routers[i] == '1':\n            min_cost = min(min_cost, i * (i + 1) // 2)\n    \n    return str(min_cost + sum(int(i) for i in rooms))",
        "test": "assert solution(\"6 1\\n000000\") == \"21\"",
        "indeed": false
    },
    {
        "number": 4108,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if len(S) != len(T):\n        return \"No\"\n\n    for c in set(S):\n        if S.count(c) != T.count(c):\n            return \"No\"\n\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            S = S[:i] + T[i] + S[i + 1:]\n            T = T[:i] + S[i] + T[i + 1:]\n\n    return \"Yes\" if S == T else \"No\"",
        "test": "assert solution('abcd\\nefgh') == 'No'",
        "indeed": false
    },
    {
        "number": 4109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = map(int, input().split())\n    books = []\n\n    for _ in range(N):\n        A, C = map(int, input().split())\n        books.append((A, C))\n\n    books.sort(key=lambda x: x[1] / x[0], reverse=True)\n\n    total_money_spent = 0\n    total_increase = 0\n\n    for i in range(N):\n        A, C = books[i]\n        total_money_spent += C\n        total_increase += A * M\n\n        if total_increase >= X * M:\n            return f\"Yes\\n{total_money_spent}\"\n\n    return \"No\"\n\ninput_str = \"\"\"3 2 10\n1 10\n2 20\n3 30\n\"\"\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"3 4 10 20 30 40 50 60 70 80 90\") == \"Yes 120\"",
        "indeed": false
    },
    {
        "number": 4110,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split()[0:2])\n    p_c_list = [list(map(int, line.split())) for line in stdin.split('\\n')[1:-1]]\n    p_c_dict = {100*i: (p_c[0], p_c[1]) for i, p_c in enumerate(p_c_list)}\n\n    def score(problems: int) -> int:\n        base_score = sum(problems[i] * 100 * i for i in range(1, D+1))\n        perfect_bonus = sum(problems[i] * p_c_dict[100*i][1] for i in range(1, D+1) if problems[i] == p_c_dict[100*i][0])\n        return base_score + perfect_bonus\n\n    min_problems = 1\n    max_problems = sum(p_c[0] for p_c in p_c_list)\n\n    while min_problems < max_problems:\n        guess = (min_problems + max_problems) // 2\n        guess_score = score([guess] * D)\n        if guess_score >= G:\n            max_problems = guess\n        else:\n            min_problems = guess + 1\n\n    return str(min_problems)",
        "test": "assert solution(\"3 2000\\n1 1000\\n2 1200\\n\") == \"5\"",
        "indeed": false
    },
    {
        "number": 4111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n    candies = [i + 1 for i in range(n)]\n    \n    def eat_candies(candy_indices: list) -> int:\n        total_weight = sum(weights[i - 1] for i in candy_indices)\n        return total_weight % 2 == 0\n\n    good_candies = [candy for candy in candies if eat_candies(candies[:candy-1] + candies[candy:])]\n    return len(good_candies)\n\ninput_string = input()\noutput = solution(input_string)\nprint(output) ",
        "test": "assert solution(\"\"\"7",
        "indeed": false
    },
    {
        "number": 4112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, input().split()))\n    \n    # Check if it's possible to repost pictures according to the conditions\n    if x > n or k > x:\n        return \"-1\"\n    \n    # Sort the pictures in descending order by their beauty\n    a.sort(reverse=True)\n    \n    # Calculate the maximum sum of reposted pictures\n    max_sum = 0\n    for i in range(x):\n        max_sum += a[i]\n    \n    # Check if each segment of the news feed has at least one picture reposted by Vova\n    for i in range(x, n):\n        if i - x >= k - 1:\n            break\n        max_sum -= a[i - k]\n    else:\n        return \"-1\"\n    \n    return str(max_sum)",
        "test": "assert solution(\"6 1 5\\n10 30 30 70 10 10\\n\") == \"-1\"",
        "indeed": false
    },
    {
        "number": 4113,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    # Calculate the maximum number of cakes that can be bought for N dollars\n    cakes_max = N // 4\n    \n    # Calculate the maximum number of doughnuts that can be bought for N dollars\n    doughnuts_max = N // 7\n    \n    # Check if there is a way to buy some cakes and some doughnuts for exactly N dollars\n    if cakes_max * 4 + doughnuts_max * 7 == N:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1\") == \"No\"",
        "indeed": false
    },
    {
        "number": 4114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    coordinates_and_altitudes = [list(map(int, line.split())) for line in lines[1:]]\n    \n    altitudes = {coordinates: altitude for coordinates, altitude in coordinates_and_altitudes}\n    coordinates = set(coordinates for coordinates, altitude in coordinates_and_altitudes)\n    \n    max_altitude = max(altitudes.values())\n    height = 0\n    \n    for x in range(101):\n        for y in range(101):\n            altitude = max_altitude - abs(x - C_X) - abs(y - C_Y)\n            if altitude >= 0:\n                height = max(height, altitude)\n                altitudes[(x, y)] = altitude\n                coordinates.add((x, y))\n                \n    for x in range(101):\n        for y in range(101):\n            if altitudes[(x, y)] == height:\n                C_X, C_Y = x, y\n                break\n        else:\n            continue\n        break\n    \n    return f\"{C_X} {C_Y} {height}\"",
        "test": "assert solution(\"10\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n4 4 5\\n4 5 5\\n5 4 5\\n5 3 5\\n6 2 5\\n7 2 5\") == \"4 4 5\\n\"",
        "indeed": false
    },
    {
        "number": 4115,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    left, right = 0, len(s) - 1\n    hugs = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            hugs += 1\n            left += 1\n        else:\n            left += 1\n            right -= 1\n\n    return hugs",
        "test": "assert solution(\"level\") == 0",
        "indeed": false
    },
    {
        "number": 4116,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    for i in range(1, 10):\n        for j in range(i, 10):\n            if i * j == n:\n                return \"Yes\"\n\n    return \"No\"\n",
        "test": "assert solution('10') == 'Yes'",
        "indeed": true
    },
    {
        "number": 4117,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, sticks = stdin.split('\\n')\n    N = int(N)\n    sticks = [int(x) for x in sticks.split()]\n    count = 0\n    \n    for i in range(N-2):\n        for j in range(i+1, N-1):\n            for k in range(j+1, N):\n                if sticks[i] != sticks[j] and sticks[j] != sticks[k] and sticks[i] != sticks[k]:\n                    if sticks[i] + sticks[j] > sticks[k] and sticks[j] + sticks[k] > sticks[i] and sticks[i] + sticks[k] > sticks[j]:\n                        count += 1\n                        \n    return str(count)\n",
        "test": "assert solution(\"5\\n4 4 9 7 5\") == \"5\"",
        "indeed": true
    },
    {
        "number": 4118,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > 0 and B > 0 and A <= 9 and B <= 9:\n        return str(A * B)\n    else:\n        return \"-1\"",
        "test": "assert solution(\"2 5\") == \"10\"",
        "indeed": true
    },
    {
        "number": 4119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, M, *coordinates = map(int, stdin.split())\n    visited = set(coordinates)\n\n    def distance(x: int, y: int) -> int:\n        return abs(x - y)\n\n    def move_piece(x: int, y: int, x_y: int) -> int:\n        return distance(x, x_y) + distance(x_y, y)\n\n    def min_moves(N: int, M: int, visited: set[int]) -> int:\n        min_moves = 0\n        for x in range(N):\n            if x not in visited:\n                min_move = float('inf')\n                for y in visited:\n                    min_move = min(min_move, move_piece(x, y, x + 1))\n                    min_move = min(min_move, move_piece(x, y, x - 1))\n                min_moves += min_move\n        return min_moves\n\n    return str(min_moves(N, M, visited))",
        "test": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"",
        "indeed": false
    },
    {
        "number": 4120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    roads = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:1+m]]\n    k_ways = []\n    min_sum = float('inf')\n    for i in range(1, 1<<m):\n        road_set = [j for j in range(m) if (i & (1 << j))]\n        sum_distances = sum([bin(i).count('1') for i in range(n)])\n        if sum_distances < min_sum:\n            min_sum = sum_distances\n            k_ways = [road_set]\n        elif sum_distances == min_sum:\n            k_ways.append(road_set)\n    \n    return str(len(k_ways)) + '\\n' + '\\n'.join([''.join(['1' if j in way else '0' for j in range(m)]) for way in k_ways])",
        "test": "assert solution(\"\"\"4 4 3",
        "indeed": false
    },
    {
        "number": 4121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    if len(a) != n:\n        return \"NO\"\n\n    a.sort()\n\n    # Check if all parts have the same height\n    if len(set(a)) == 1:\n        return \"YES\"\n\n    # Check if wall is already completed\n    if a == list(range(1, len(a) + 1)):\n        return \"YES\"\n\n    return \"NO\"",
        "test": "assert solution(\"3\\n4 5 3\") == \"YES\"",
        "indeed": false
    },
    {
        "number": 4122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n\n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return str(i + 1)\n\n    return \"-1\"",
        "test": "assert solution(\"1000000000000 5\\n-1 0 0 0 0\\n\") == \"4999999999996\\n\"",
        "indeed": false
    },
    {
        "number": 4123,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    two_grams = {}\n    for i in range(len(s) - 1):\n        two_gram = s[i:i+2]\n        if two_gram in two_grams:\n            two_grams[two_gram] += 1\n        else:\n            two_grams[two_gram] = 1\n\n    max_count = 0\n    most_frequent_two_gram = \"\"\n    for two_gram in two_grams:\n        if two_grams[two_gram] > max_count:\n            max_count = two_grams[two_gram]\n            most_frequent_two_gram = two_gram\n\n    return most_frequent_two_gram\n",
        "test": "assert solution(\"7\\nABACABA\") == \"AB\"",
        "indeed": false
    },
    {
        "number": 4124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    moves = 0\n    while s and t:\n        if s[0] == t[0]:\n            s = s[1:]\n            t = t[1:]\n        else:\n            if len(s) < len(t):\n                s = s[1:]\n            else:\n                t = t[1:]\n        moves += 1\n    return moves + len(s) + len(t)\n\nstdin = input()\nresult = solution(stdin)\nprint(result) ",
        "test": "assert solution(\"codeforces\\nyes\\n\") == \"9\\n\"",
        "indeed": false
    },
    {
        "number": 4125,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split()[0:2])\n    x_list = list(map(int, stdin.split()[2:]))\n\n    x_list.sort()\n    max_d = x_list[-1] - x_list[0]\n\n    for i in range(n - 1):\n        max_d = min(max_d, x_list[i + 1] - x_list[i])\n\n    return str(max_d)",
        "test": "assert solution(\"5 2\\n3 5 8 10 12\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4126,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    middle = n // 2\n\n    # Check if the length of S is odd\n    if n % 2 == 0:\n        return \"No\"\n\n    # Check if S is a palindrome\n    if s != s[::-1]:\n        return \"No\"\n\n    # Check if the 1-st through ((N-1)/2)-th characters are a palindrome\n    if s[:middle] != s[:middle][::-1]:\n        return \"No\"\n\n    # Check if the (N+3)/2-st through N-th characters are a palindrome\n    if s[(n + 3) // 2 - 1:] != s[(n + 3) // 2 - 1:][::-1]:\n        return \"No\"\n\n    return \"Yes\"",
        "test": "assert solution(\"racecar\") == \"No\"",
        "indeed": true
    },
    {
        "number": 4127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    product = A * B\n    return int(product)",
        "test": "assert solution(\"90000000000000 0.10\") == \"900000000000000\"",
        "indeed": false
    },
    {
        "number": 4128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline().strip())\n    for _ in range(cases):\n        n = int(stdin.readline().strip())\n        if n == 1:\n            print(0)\n        elif n == 2:\n            print(1)\n        else:\n            count = 0\n            for i in range(1, n//2 + 1):\n                if i > n - i:\n                    break\n                count += 1\n            print(count)\n            ",
        "test": "assert solution(\"6\\n7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"",
        "indeed": false
    },
    {
        "number": 4129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def read_input():\n        n, m, s = map(int, input().split())\n        adj_list = [[] for _ in range(n)]\n        for _ in range(m):\n            u, v = map(int, input().split())\n            adj_list[u-1].append(v-1)\n            adj_list[v-1].append(u-1)\n        return adj_list, s-1\n\n    def dfs(adj_list, visited, start):\n        stack = [start]\n        count = 0\n        while stack:\n            curr = stack.pop()\n            if not visited[curr]:\n                count += 1\n                visited[curr] = True\n                for neighbor in adj_list[curr]:\n                    if not visited[neighbor]:\n                        stack.append(neighbor)\n        return count\n\n    adj_list, s = read_input()\n    visited = [False] * len(adj_list)\n    visited[s] = True\n    extra_roads = m - dfs(adj_list, visited, s) + 1\n    return str(extra_roads)",
        "test": "assert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *weights = stdin.split()\n    n = int(n)\n    weights = list(map(int, weights))\n\n    # Sort the weights in ascending order\n    weights.sort()\n\n    # Find the maximum possible number of boxers in a team\n    max_team = 0\n    for i in range(n):\n        if weights[i] != 1:\n            max_team += 1\n        else:\n            break\n\n    # Return the maximum possible number of boxers in a team\n    return str(max_team)",
        "test": "assert solution(\"6\\n1 1 1 4 4 4\") == \"5\" ",
        "indeed": false
    },
    {
        "number": 4131,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    prefectures = {}\n    for i in range(1, m + 1):\n        prefecture, year = map(int, lines[i].split())\n        if prefecture not in prefectures:\n            prefectures[prefecture] = []\n        prefectures[prefecture].append(year)\n\n    for prefecture, years in prefectures.items():\n        years.sort()\n\n    result = []\n    for prefecture in range(1, n + 1):\n        if prefecture in prefectures:\n            for i, year in enumerate(prefectures[prefecture], start=1):\n                result.append(f\"{prefecture:06d}{i:06d}\")\n\n    return '\\n'.join(result)",
        "test": "assert solution('2 4\\n1 32\\n1 63\\n2 12\\n2 20') == '000001000001\\n000001000002\\n000002000001\\n000002000002'",
        "indeed": false
    },
    {
        "number": 4132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    healths = [int(x) for x in lines[1].split()]\n\n    while len(healths) > 1:\n        attacker = random.randrange(len(healths))\n        defender = random.choice([i for i in range(len(healths)) if i != attacker])\n\n        healths[defender] -= healths[attacker]\n        healths = [health for health in healths if health > 0]\n\n    return str(healths[0])",
        "test": "assert solution(\"5\\n5 5 5 5 5\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4133,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_input(input_str: str) -> bool:\n        if len(input_str) < 13 or len(input_str) > 1024:\n            return False\n        valid_chars = \"?(){}<>\"\n        if not all(char in valid_chars for char in input_str):\n            return False\n        jaws_count = 0\n        for char in input_str:\n            if char in \"{}\":\n                jaws_count += 1\n        if jaws_count % 2 != 0:\n            return False\n        return True\n\n    def get_values(jaws: str, jaws_count: int, values: str) -> str:\n        if jaws_count <= 0:\n            return values\n        jaws = jaws[1:-1]\n        if jaws[0] == \"{\":\n            values += \"9\"\n        else:\n            values += \"0\"\n        return get_values(jaws, jaws_count - 1, values)\n\n    def get_feeding_values(jaws: str, values: str) -> str:\n        jaws_count = jaws.count(\"{\")\n        return get_values(jaws, jaws_count, values)\n\n    if not is_valid_input(stdin):\n        return \"false\"\n\n    jaws = stdin[stdin.find(\"(\") + 1:stdin.find(\")\")]\n    values = get_feeding_values(jaws, \"\")\n    return values",
        "test": "assert solution(\"?(__-_+_/_____):-__>__,_____<__\") == \"false\"",
        "indeed": false
    },
    {
        "number": 4134,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_xor(path: list) -> int:\n        xor = 0\n        for i in range(len(path) - 1):\n            xor ^= path[i][0] ^ path[i][1]\n        return xor\n\n    def is_valid_path(path: list, k: int) -> bool:\n        return calculate_xor(path) == k\n\n    def dfs(i: int, j: int, path: list) -> int:\n        if i == n and j == m:\n            if is_valid_path(path, k):\n                return 1\n            return 0\n\n        count = 0\n        if i + 1 <= n:\n            path.append((i + 1, j))\n            count += dfs(i + 1, j, path)\n            path.pop()\n\n        if j + 1 <= m:\n            path.append((i, j + 1))\n            count += dfs(i, j + 1, path)\n            path.pop()\n\n        return count\n\n    n, m, k = map(int, stdin.split()[:3])\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    initial_path = [(1, 1)]\n    return str(dfs(0, 0, initial_path)) ",
        "test": "assert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"5\"",
        "indeed": false
    },
    {
        "number": 4135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split()\n    n = int(n)\n    t = list(t)\n\n    for d in range(n, 0, -1):\n        if n % d == 0:\n            substring = t[0:d]\n            substring.reverse()\n            for i in range(0, d):\n                t[i] = substring[i]\n\n    return \"\".join(t)",
        "test": "assert solution(\"16\\nplmaetwoxesisiht\") == \"thisisexampletwo\"",
        "indeed": false
    },
    {
        "number": 4136,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)",
        "test": "assert solution(\"5 14\") == \"19\"",
        "indeed": true
    },
    {
        "number": 4137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def interpret(code: str) -> str:\n        memory = [0] * 30000\n        ptr = 0\n        index = 0\n\n        while index < len(code):\n            if code[index] == '>':\n                ptr += 1\n            elif code[index] == '<':\n                ptr -= 1\n            elif code[index] == '+':\n                memory[ptr] = (memory[ptr] + 1) % 256\n            elif code[index] == '-':\n                memory[ptr] = (memory[ptr] - 1) % 256\n            elif code[index] == '.':\n                print(chr(memory[ptr]), end='')\n            elif code[index] == ',':\n                memory[ptr] = ord(input())\n            elif code[index] == '[':\n                if memory[ptr] == 0:\n                    index = code.find(']', index)\n            elif code[index] == ']':\n                index = code.rfind('[', 0, index)\n\n            index += 1\n\n        return ''.join(map(chr, memory[:ptr+1]))\n\n    def evaluate(expression: str) -> str:\n        code = []\n        for i, c in enumerate(expression):\n            if c in ('+', '-'):\n                if i == 0:\n                    code.append('>')\n                else:\n                    code.append(c)\n            else:\n                code.append(c)\n\n        code.append('<')\n        code.extend(['[', '-'] * len(code))\n        code.append('>')\n        code.extend(['-', ']', '+'] * len(code))\n        code.append('<')\n        code.append('.')\n\n        return ''.join(code)\n\n    bf_program = evaluate(stdin)\n    bf_output = interpret(bf_program)\n\n    return bf_program",
        "test": "assert solution('9-7') == '+++++++++>+++++++><[<->-]<' ",
        "indeed": false
    },
    {
        "number": 4138,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    k = [int(line) for line in stdin.splitlines()[1:]]\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    result = []\n    \n    for i in range(q):\n        result.append(sequence[k[i]-1])\n    \n    return \"\\n\".join(result)",
        "test": "assert solution(\"4\\n2132\\n506\\n999999999999999999\\n1000000000000000000\") == \"8\\n2\\n4\\n1\\n\" ",
        "indeed": false
    },
    {
        "number": 4139,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        str_i = str(i)\n        if '7' in str_i and '5' in str_i and '3' in str_i:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"575\") == \"4\"",
        "indeed": false
    },
    {
        "number": 4140,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i] == s[i+1]:\n            count += 1\n    return str(count // 2)",
        "test": "assert solution(\"000\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4141,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    count = 0\n    \n    for num in numbers:\n        if num % 2 == 0 and num % 3 != 0 and num % 5 != 0:\n            return \"DENIED\"\n    \n    return \"APPROVED\"",
        "test": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"",
        "indeed": true
    },
    {
        "number": 4142,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function checks if the given string is easily playable or not.\n\n    Args:\n        stdin (str): A string of length between 1 and 100 (inclusive).\n\n    Returns:\n        str: Yes if the given string is easily playable, and No otherwise.\n    \"\"\"\n    dance = list(stdin)\n    n = len(dance)\n\n    if n % 2 == 0:\n        for i in range(0, n, 2):\n            if dance[i] not in ['R', 'U', 'D']:\n                return \"No\"\n        for i in range(1, n, 2):\n            if dance[i] not in ['L', 'U', 'D']:\n                return \"No\"\n    else:\n        for i in range(0, n, 2):\n            if dance[i] not in ['L', 'U', 'D']:\n                return \"No\"\n        for i in range(1, n, 2):\n            if dance[i] not in ['R', 'U', 'D']:\n                return \"No\"\n\n    return \"Yes\"",
        "test": "assert solution(\"LDUURDD\") == \"No\"",
        "indeed": false
    },
    {
        "number": 4143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    time = 0\n\n    # Train can occupy at most A people\n    while N > 0:\n        time += 1\n        N -= A\n\n    # Bus can occupy at most B people\n    while N > 0:\n        time += 1\n        N -= B\n\n    # Taxi can occupy at most C people\n    while N > 0:\n        time += 1\n        N -= C\n\n    # Airplane can occupy at most D people\n    while N > 0:\n        time += 1\n        N -= D\n\n    # Ship can occupy at most E people\n    while N > 0:\n        time += 1\n        N -= E\n\n    return str(time)",
        "test": "assert solution('5\\n3\\n2\\n4\\n3\\n5\\n') == '7'",
        "indeed": false
    },
    {
        "number": 4144,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    def count_sequences(N: int) -> int:\n        MOD = 10**9 + 7\n        dp = [0] * 10\n        dp[0] = 1\n        for i in range(1, N):\n            for j in range(10):\n                if j > 0:\n                    dp[j] += dp[j - 1]\n                dp[j] %= MOD\n        return sum(dp) % MOD\n\n    return str(count_sequences(N))",
        "test": "assert solution(\"2\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4145,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime = X\n    while True:\n        prime += 1\n        if is_prime(prime):\n            return str(prime)",
        "test": "assert solution(\"20\") == \"23\"",
        "indeed": false
    },
    {
        "number": 4146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.strip().split('\\n')\n    n = int(n)\n    sequence = [int(x) for x in sequence.split(' ') if x]\n\n    if n % 2 != 0 or len(sequence) != n:\n        return \"Invalid input\"\n\n    elements_count = {}\n    for element in sequence:\n        if element in elements_count:\n            elements_count[element] += 1\n        else:\n            elements_count[element] = 1\n\n    if len(elements_count) != 2:\n        return \"Sequence is not /\\/\\/\\/\"\n\n    different_elements = [x for x in elements_count.keys()]\n    if different_elements[0] == different_elements[1]:\n        return \"Sequence is not /\\/\\/\\/\"\n\n    if abs(elements_count[different_elements[0]] - elements_count[different_elements[1]]) > 1:\n        return \"Sequence is not /\\/\\/\\/\"\n\n    return min(elements_count[different_elements[0]], elements_count[different_elements[1]])",
        "test": "assert solution(\"6\\n3 1 3 1 3 2\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4147,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N, A, B, C = map(int, stdin.split()[:4])\n    bamboos = list(map(int, stdin.split()[4:]))\n\n    # Sort the bamboos in descending order of length\n    bamboos.sort(reverse=True)\n\n    # Initialize the minimum MP needed to achieve the objective\n    min_mp = 0\n\n    # Use Extension Magic twice on the bamboo of length 98 to obtain a bamboo of length 100. (MP consumed: 2)\n    if B == 98:\n        min_mp += 2\n        B = 100\n        bamboos.remove(98)\n\n    # Use Composition Magic on the bamboos of lengths 40, 30 to obtain a bamboo of length 70. (MP consumed: 10)\n    if C == 90:\n        min_mp += 10\n        C = 70\n        bamboos.remove(40)\n        bamboos.remove(30)\n\n    # Use Shortening Magic once on the bamboo of length 21 to obtain a bamboo of length 20. (MP consumed: 1)\n    if C == 80:\n        min_mp += 1\n        C = 20\n        bamboos.remove(21)\n\n    # Use Composition Magic on the bamboo of length 70 obtained in step 2 and the bamboo of length 20 obtained in step 3 to obtain a bamboo of length 90. (MP consumed: 10)\n    if B == 80:\n        min_mp += 10\n        B = 90\n        bamboos.remove(70)\n        bamboos.remove(20)\n\n    return str(min_mp)",
        "test": "assert solution('3 10 8 7\\n2\\n2\\n4') == '0'  # Sample Input 2",
        "indeed": false
    },
    {
        "number": 4148,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split(\"\\n\")\n    n = int(n)\n    result = \"\"\n    for char in s:\n        shifted_char = chr((ord(char) - 65 + n) % 26 + 65)\n        result += shifted_char\n    return result",
        "test": "assert solution(\"2\\nABCXYZ\") == \"CDEZAB\"",
        "indeed": true
    },
    {
        "number": 4149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, b = stdin.split(\"\\n\")\n    n = int(n)\n    b = [int(x) for x in b.split()]\n\n    # Initialize the array with prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 121",
        "test": "assert solution(\"1\\n2750131 199999\\n\") == \"199999\"",
        "indeed": false
    },
    {
        "number": 4150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    students = list(map(int, stdin.split()[2:]))\n\n    first_team = []\n    second_team = []\n    while students:\n        first_coach_index = max(students)\n        first_coach_students = []\n        for i, student in enumerate(students):\n            if student == first_coach_index:\n                first_coach_students.append(i)\n        for index in first_coach_students[:k+1]:\n            first_team.append(students[index])\n            students.pop(index)\n        if not students:\n            break\n        second_coach_index = min(students)\n        second_coach_students = []\n        for i, student in enumerate(students):\n            if student == second_coach_index:\n                second_coach_students.append(i)\n        for index in second_coach_students[-k-1:]:\n            second_team.append(students[index])\n            students.pop(index)\n\n    result = \"\"\n    for student in first_team:\n        result += \"1\"\n    for student in second_team:\n        result += \"2\"\n\n    return result",
        "test": "assert solution(\"5 1\\n2 1 3 5 4\") == \"22111\"",
        "indeed": false
    },
    {
        "number": 4151,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_monotonic(a):\n        b = [0] * len(a)\n        for i in range(len(a)):\n            b[i] = a.index(a[i])\n        return b\n\n    def count_monotonic(a):\n        b = is_monotonic(a)\n        return b\n\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    b = count_monotonic(a)\n    result = 1\n    for i in range(1, len(b)):\n        if b[i] != b[i - 1]:\n            result += 1\n    return str(result % 998244353)",
        "test": "assert solution(\"2\\n100 1\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sequence = list(map(int, stdin.readline().split()))\n\n    def is_good(sequence):\n        for i in range(len(sequence)):\n            for j in range(len(sequence)):\n                if i != j and 2 ** d == sequence[i] + sequence[j]:\n                    return True\n        return False\n\n    if n == 0:\n        return str(0)\n\n    if is_good(sequence):\n        return str(0)\n\n    for i in range(n):\n        new_sequence = sequence.copy()\n        new_sequence.pop(i)\n        if is_good(new_sequence):\n            return str(1)\n\n    return str(n)",
        "test": "assert solution(\"5\\n1 2 3 4 5\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4153,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to list\n    cubes = list(stdin)\n    n = len(cubes)\n\n    # Initialize variables\n    red_count = 0\n    blue_count = 0\n    result = 0\n\n    # Count red and blue cubes\n    for cube in cubes:\n        if cube == '0':\n            red_count += 1\n        elif cube == '1':\n            blue_count += 1\n\n    # Check if there are more blue cubes or red cubes\n    if red_count >= blue_count:\n        result = blue_count\n    else:\n        result = red_count\n\n    # Return result\n    return str(result)",
        "test": "assert solution(\"0110\") == \"2\"  # Remove the first and third cubes",
        "indeed": false
    },
    {
        "number": 4154,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    N, M = map(int, lines[0].strip().split(\" \"))\n    gate_ranges = [(int(line.strip().split(\" \")[0]), int(line.strip().split(\" \")[1])) for line in lines[1:]]\n\n    def is_valid_id_card(card_num: int, gate_range: tuple) -> bool:\n        return card_num >= gate_range[0] and card_num <= gate_range[1]\n\n    valid_id_cards = set()\n    for i in range(1, N+1):\n        valid = True\n        for gate_range in gate_ranges:\n            if not is_valid_id_card(i, gate_range):\n                valid = False\n                break\n        if valid:\n            valid_id_cards.add(i)\n\n    return str(len(valid_id_cards))",
        "test": "assert solution(\"4 2\\n1 3\\n2 4\\n\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4155,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    h = [int(x) for x in lines[1].split()]\n\n    # sort the heights in descending order\n    h.sort(reverse=True)\n\n    # initialize the counter and result\n    count = 0\n    result = 0\n\n    for i in range(N):\n        # check if we can increase the current height\n        if h[i] > count:\n            result += h[i] - count\n            count = h[i]\n\n        # increase the counter\n        count += 1\n\n    return str(result)",
        "test": "assert solution(\"4\\n1 2 2 1\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    def is_valid(x):\n        count = 0\n        for i in range(1, n+1):\n            count += a[i-1] - a[i-2]\n            if count < 0:\n                return False\n            if count > w:\n                return False\n        return True\n    \n    count = 0\n    for x in range(w+1):\n        if is_valid(x):\n            count += 1\n    \n    return str(count)",
        "test": "assert solution(\"2 4\\n-1 1\") == \"4\\n\"",
        "indeed": false
    },
    {
        "number": 4157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    numbers = [int(x) for x in stdin.split()[1:]]\n    \n    # Helper function to check if the number can be obtained by dividing by 3 or multiplying by 2\n    def can_be_obtained(number, target):\n        if number % 3 == 0 and number // 3 == target:\n            return True\n        if number * 2 == target:\n            return True\n        return False\n    \n    # Helper function to check if the given sequence can be rearranged\n    def can_rearrange(numbers):\n        for i in range(1, len(numbers)):\n            if not can_be_obtained(numbers[i-1], numbers[i]):\n                return False\n        return True\n    \n    # Function to reorder the sequence\n    def reorder(numbers):\n        result = []\n        i = 0\n        while len(result) < len(numbers):\n            for j in range(i, len(numbers)):\n                if can_be_obtained(numbers[i-1], numbers[j]):\n                    result.append(numbers[j])\n                    i = j + 1\n                    break\n            if i == len(numbers):\n                return None\n        return result\n    \n    # Check if the given sequence can be rearranged\n    if not can_rearrange(numbers):\n        return \"The sequence cannot be rearranged.\"\n    \n    # Rearrange the sequence and return the result\n    result = reorder(numbers)\n    if result is None:\n        return \"The sequence cannot be rearranged.\"\n    return \" \".join(str(x) for x in result)",
        "test": "assert solution('4\\n42 28 84 126\\n') == '126 42 84 28\\n'",
        "indeed": false
    },
    {
        "number": 4158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = list(map(int, stdin.split()[1:]))\n    points.sort()\n    max_points = []\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = points[j] - points[i]\n            power_of_two = 0\n            while distance > 0:\n                distance >>= 1\n                power_of_two += 1\n            if power_of_two > 0:\n                max_points.append((points[i], points[j]))\n                break\n    max_length = len(max_points)\n    if max_length == 1:\n        return str(max_length) + \"\\n\" + str(max_points[0][0]) + \" \" + str(max_points[0][1])\n    else:\n        max_points = sorted(max_points, key=lambda x: x[1]-x[0])\n        return str(max_length) + \"\\n\" + \" \".join(map(str, max_points[-1]))",
        "test": "assert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"",
        "indeed": false
    },
    {
        "number": 4159,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    \n    takahashi_cookies = A\n    aoki_cookies = B\n    \n    for _ in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n    \n    return f\"{takahashi_cookies} {aoki_cookies}\"",
        "test": "assert solution(\"2 3 3\") == \"0 2\"",
        "indeed": false
    },
    {
        "number": 4160,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    balance = 100\n    years = 0\n    \n    while balance < X:\n        interest = balance * 0.01\n        balance += interest\n        years += 1\n        \n    return str(years)",
        "test": "assert solution(\"103\") == \"3\"",
        "indeed": false
    },
    {
        "number": 4161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def gcd_sum(K):\n        sum = 0\n        for a in range(1, K + 1):\n            for b in range(1, K + 1):\n                for c in range(1, K + 1):\n                    sum += gcd(a, b) * gcd(b, c) * gcd(c, a)\n        return sum\n\n    return str(gcd_sum(K))\n\ninput_data = input()\nprint(solution(input_data)) ",
        "test": "assert solution(\"2\") == \"9\"",
        "indeed": false
    },
    {
        "number": 4162,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    a_list = [int(x) for x in lines[1].split()]\n\n    f_max = 0\n    for m in range(1, 100000):\n        f = sum(m % x for x in a_list)\n        if f > f_max:\n            f_max = f\n\n    return str(f_max)",
        "test": "assert solution(\"3\\n3 4 6\") == \"10\"",
        "indeed": false
    },
    {
        "number": 4163,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    D = [list(map(int, line.split())) for line in lines[1:]]\n    \n    for i in range(N - 2):\n        if D[i][0] == D[i][1] and D[i+1][0] == D[i+1][1] and D[i+2][0] == D[i+2][1]:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"3\\n1 2\\n1 2\\n1 2\") == \"No\"",
        "indeed": true
    },
    {
        "number": 4164,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip())\n    area_r = 3.14 * r ** 2\n    area_1 = 3.14 * 1 ** 2\n    result = area_r / area_1\n    return str(int(result))",
        "test": "assert solution(\"2\") == \"4\"",
        "indeed": false
    },
    {
        "number": 4165,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    sides = [int(x) for x in lines[1].split()]\n\n    longest_side = max(sides)\n    other_sides_sum = sum(sides) - longest_side\n\n    return \"Yes\" if longest_side < other_sides_sum else \"No\"",
        "test": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"",
        "indeed": true
    },
    {
        "number": 4166,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split(' '))\n    conditions = [tuple(map(int, line.split(' '))) for line in lines[1:]]\n\n    for i in range(10**(N-1), 10**N):\n        digits = [int(digit) for digit in str(i)]\n        if len(digits) != N:\n            continue\n\n        if all(digits[s-1] == c for s, c in conditions):\n            return str(i)\n\n    return '-1'",
        "test": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"",
        "indeed": false
    },
    {
        "number": 4167,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n\n    for a in range(1, N + 1):\n        for b in range(1, N - a + 1):\n            for c in range(1, N - a - b + 1):\n                if (a + b) % K == 0 and (b + c) % K == 0 and (c + a) % K == 0:\n                    count += 1\n\n    return str(count)",
        "test": "assert solution('4 3') == '22'",
        "indeed": false
    },
    {
        "number": 4168,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    elif N < 0:\n        N = abs(N)\n        result = \"\"\n        while N != 0:\n            N, remainder = divmod(N, 2)\n            if remainder == 1:\n                result = \"1\" + result\n                N += 1\n            else:\n                result = \"0\" + result\n        return result\n    else:\n        return bin(N) [2:] ",
        "test": "assert solution(\"0\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4169,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.splitlines()\n    N, M = map(int, lines[0].split())\n    stores = []\n    for i in range(1, N + 1):\n        A, B = map(int, lines[i].split())\n        stores.append((A, B))\n\n    # Calculate the minimum amount of money\n    money = 0\n    for i in range(N):\n        A, B = stores[i]\n        q, r = divmod(M, B)\n        money += q * A\n        M = r\n        if M == 0:\n            break\n    return str(money)",
        "test": "assert solution(\"3 10\\n10 2\\n1 3\\n5 5\") == \"50\"",
        "indeed": false
    },
    {
        "number": 4170,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    h_values = list(map(int, lines[1].split(' ')))\n    \n    max_moves = 0\n    for i in range(n):\n        if i < n-1 and h_values[i] >= h_values[i+1]:\n            max_moves += 1\n    \n    return str(max_moves)",
        "test": "assert solution(\"7\\n10 4 8 7 3 6 9\") == \"3\"",
        "indeed": false
    },
    {
        "number": 4171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    a.sort()\n    min_operations = 0\n    equal_numbers = 1\n\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            equal_numbers += 1\n        else:\n            min_operations += equal_numbers // 2\n            equal_numbers = 1\n\n    min_operations += equal_numbers // 2\n\n    return str(min_operations)",
        "test": "assert solution(\"5 3\\n1 2 3 4 5\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    # Remove duplicates and sort the array\n    a = sorted(list(set(a)))\n    \n    # Initialize variables\n    min_moves = 0\n    equal_elements = 0\n    i = 0\n    \n    # Iterate through the array\n    while i < len(a) and equal_elements < k:\n        count = a.count(a[i])\n        equal_elements += count\n        min_moves += count * (a[i] - i)\n        i += count\n        \n    return str(min_moves)",
        "test": "assert solution(\"7 5\\n3 3 2 1 1 1 3\\n\") == \"4\" ",
        "indeed": false
    },
    {
        "number": 4173,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    result = []\n    \n    for i in range(1, q+1):\n        n, a, b = map(int, stdin.splitlines()[i].split())\n        \n        # If the first bottle can fill the required volume, use only one bottle\n        if n <= a:\n            result.append(n * b)\n        # If the second bottle can fill the required volume, use only one bottle\n        elif n <= b:\n            result.append(n * a)\n        # If both bottles can fill the required volume, use the cheapest bottle\n        else:\n            result.append(min(n // a * a * b, n // b * b * a))\n    \n    return \"\\n\".join(map(str, result))\n\ninput_str = \"\"\"4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\"\"\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\" ",
        "indeed": false
    },
    {
        "number": 4174,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split()[0].split(\" \"))\n    L = list(map(int, stdin.split()[1].split(\" \")))\n\n    bounces = [0]\n    for i in range(N):\n        bounces.append(bounces[-1] + L[i])\n\n    count = 0\n    for b in bounces:\n        if b <= X:\n            count += 1\n\n    return str(count)\n\ninput_str = input()\nprint(solution(input_str)) ",
        "test": "assert solution(\"10 10000\\n10 20 30 40 50 60 70 80 90 100 110 120 130 140 150\") == \"21\\n\"",
        "indeed": false
    },
    {
        "number": 4175,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split('\\n')\n    n = int(words[0])\n    words = words[1:]\n    used = set()\n    \n    for i in range(1, n):\n        if words[i][0] != words[i-1][-1]:\n            return \"No\"\n        if words[i] in used:\n            return \"No\"\n        used.add(words[i])\n        \n    return \"Yes\"",
        "test": "assert solution(\"\"\"4",
        "indeed": false
    },
    {
        "number": 4176,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_pieces = max(A, B) * 2\n    return str(min_pieces)",
        "test": "assert solution(\"2 3\") == \"6\" ",
        "indeed": false
    },
    {
        "number": 4177,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    return 'x' * len(stdin)",
        "test": "assert solution(\"sardine\") == \"xxxxxxx\"",
        "indeed": true
    },
    {
        "number": 4178,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    n, heights = stdin.split(\"\\n\")\n    n = int(n)\n    heights = list(map(int, heights.split()))\n\n    # Check if heights are non-decreasing\n    for i in range(1, n):\n        if heights[i] < heights[i - 1]:\n            heights[i] += 1\n            if heights[i] < heights[i - 1]:\n                return \"No\"\n\n    return \"Yes\"",
        "test": "assert solution(\"3\\n3 2 1\") == \"No\"",
        "indeed": true
    },
    {
        "number": 4179,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, M, C = map(int, lines[0].split())\n    B = list(map(int, lines[1].split()))\n    total_codes = 0\n    \n    for i in range(2, 2 + N):\n        A = list(map(int, lines[i].split()))\n        if sum([A[j] * B[j] for j in range(M)]) + C > 0:\n            total_codes += 1\n    \n    return str(total_codes)",
        "test": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"",
        "indeed": true
    },
    {
        "number": 4180,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    bills = [1000, 500, 100, 50, 10, 5, 1]\n    change = 0\n    for bill in bills:\n        while n >= bill:\n            n -= bill\n            change += bill\n    return str(change)",
        "test": "assert solution(\"2000\") == \"0\" ",
        "indeed": false
    },
    {
        "number": 4181,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, *data = map(int, stdin.split())\n    A, B = data[:N+1], data[N+1:]\n\n    dp = [0] * (N+1)\n    for i in range(N+1):\n        for j in range(i+1, N+1):\n            dp[j] = max(dp[j], dp[i] + min(A[i], B[j-1]))\n\n    return str(dp[-1])",
        "test": "assert solution(\"5\\n100 100 100 100 100 100\\n100 100 100 100 100\") == \"500\"",
        "indeed": false
    },
    {
        "number": 4182,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split()[:4])\n    xs = list(map(int, stdin.split()[4:4 + n]))\n    ys = list(map(int, stdin.split()[4 + n:]))\n    \n    xs.sort()\n    ys.sort()\n    \n    for i in range(len(xs)):\n        for j in range(len(ys)):\n            if xs[i] <= ys[j]:\n                if xs[i] == x or ys[j] == y:\n                    continue\n                if x < xs[i] <= y and xs[i] < y:\n                    return \"No War\"\n                if y < ys[j] >= x and ys[j] > x:\n                    return \"No War\"\n    return \"War\"",
        "test": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"",
        "indeed": false
    },
    {
        "number": 4183,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    clocks_count, *clocks = stdin.split()\n    clocks = list(map(int, clocks))\n    max_time = max(clocks)\n    result = max_time * max_count\n    return str(result)\n\nstdin = input()\nprint(solution(stdin))",
        "test": "assert solution(\"2\\n2\\n3\") == \"6\"",
        "indeed": false
    },
    {
        "number": 4184,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    W = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    min_diff = float(\"inf\")\n    for T in range(1, N):\n        S_1 = sum(W[:T])\n        S_2 = sum(W[T:])\n        diff = abs(S_1 - S_2)\n        min_diff = min(min_diff, diff)\n    \n    return str(min_diff)",
        "test": "assert solution(\"3\\n1 2 3\") == \"0\"",
        "indeed": true
    },
    {
        "number": 4185,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def min_moves(matrix: List[List[int]]) -> int:\n        n, m = len(matrix), len(matrix[0])\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] != (i - 1) * m + j + 1:\n                    return n * m - 1\n        return 0\n\n    def shift_column(matrix: List[List[int]], col: int) -> None:\n        n, m = len(matrix), len(matrix[0])\n        temp = matrix[0][col]\n        for i in range(n - 1, 0, -1):\n            matrix[i][col] = matrix[i - 1][col]\n        matrix[0][col] = temp\n\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n    original = [row[:] for row in matrix]\n\n    min_moves_before = min_moves(matrix)\n    if min_moves_before == 0:\n        return \"0\"\n\n    for col in range(m):\n        shift_column(matrix, col)\n        min_moves_after = min_moves(matrix)\n        if min_moves_after < min_moves_before:\n            min_moves_before = min_moves_after\n        else:\n            matrix = original\n            break\n\n    return str(min_moves_before)",
        "test": "assert solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4186,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, skills = stdin.split()\n    n = int(n)\n    skills = list(map(int, skills.split()))\n\n    # Sort the skills in ascending order\n    skills.sort()\n\n    # Initialize variables\n    min_problems = float(\"inf\")\n    num_teams = 0\n\n    # Iterate through the sorted skills\n    for i in range(len(skills)):\n        # If the current skill is equal to the previous skill, skip this iteration\n        if i > 0 and skills[i] == skills[i - 1]:\n            continue\n\n        # Count the number of pairs with the current skill\n        num_pairs = skills.count(skills[i]) // 2\n\n        # If the number of pairs is greater than or equal to the number of teams needed,\n        # calculate the minimum number of problems needed for the current skill\n        if num_pairs >= (n // 2) - num_teams:\n            min_problems = min(min_problems, n // 2 - num_teams)\n            num_teams += num_pairs\n\n    return str(min_problems)\n",
        "test": "assert solution(\"2\\n1 100\\n\") == \"99\" ",
        "indeed": false
    },
    {
        "number": 4187,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, schedule = stdin.split(\"\\n\")\n    n = int(n)\n    schedule = [int(x) for x in schedule.split()]\n\n    max_rest_count = 0\n    current_rest_count = 0\n\n    for i in range(n):\n        if schedule[i] == 0:\n            max_rest_count = max(max_rest_count, current_rest_count)\n            current_rest_count = 0\n        else:\n            current_rest_count += 1\n\n    return str(max_rest_count)\n\ndef",
        "test": "assert solution(\"6\\n0 1 0 1 1 0\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4188,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    if stdin == 1:\n        return 1\n    elif stdin == 2:\n        return 0\n    elif stdin == 3:\n        return 1\n    elif stdin == 4:\n        return 1\n    elif stdin == 5:\n        return 0\n    elif stdin == 6:\n        return 1\n    elif stdin == 7:\n        return 0\n    elif stdin == 8:\n        return 1\n    elif stdin == 9:\n        return 1\n    elif stdin == 10:\n        return 1\n    elif stdin == 11:\n        return 0\n    elif stdin == 12:\n        return 0\n    elif stdin == 13:\n        return 1\n    elif stdin == 14:\n        return 1\n    elif stdin == 15:\n        return 0\n    elif stdin == 16:\n        return 0",
        "test": "assert solution(1) == 1, \"Incorrect output for input 1\"",
        "indeed": false
    },
    {
        "number": 4189,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    cheese_types = {\"soft\": 0, \"hard\": 0}\n    for line in stdin.split(\"\\n\")[1:]:\n        cheese_name, cheese_type = line.split()\n        cheese_types[cheese_type] += 1\n\n    return str(min(cheese_types.values()))",
        "test": "assert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == \"4\" ",
        "indeed": false
    },
    {
        "number": 4190,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n    \n    # Sort b to obtain the lexicographically minimum possible array c\n    b.sort()\n    \n    c = [(a[i] + b[i]) % n for i in range(n)]\n    \n    return ' '.join(map(str, c))\n\ndef",
        "test": "assert solution('7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1') == '0 0 0 1 0 2 4\\n'",
        "indeed": false
    },
    {
        "number": 4191,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(stdin.strip())\n    if input_list.count('1') >= 2:\n        return '1'\n    else:\n        return '0'",
        "test": "assert solution(\"1\\n0\\n0\\n1\\n\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4192,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n\n    time_to_travel = D / S\n\n    if time_to_travel <= T:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution(\"1000 15 80\") == \"Yes\"",
        "indeed": true
    },
    {
        "number": 4193,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    grid = [list(map(int, line.split())) for line in lines[:-2]]\n    numbers = list(map(int, lines[-2].split()))\n\n    for number in numbers:\n        for i in range(3):\n            if all(grid[i][j] == number for j in range(3)):\n                return 'Yes'\n            if all(grid[j][i] == number for j in range(3)):\n                return 'Yes'\n        if grid[0][0] == grid[1][1] == grid[2][2] == number or \\\n           grid[0][2] == grid[1][1] == grid[2][0] == number:\n            return 'Yes'\n\n    return 'No'",
        "test": "assert solution(\"\"\"84 97 66",
        "indeed": false
    },
    {
        "number": 4194,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split(' '))\n    assignments = list(map(int, lines[1].split(' ')))\n\n    # sort assignments by completion time\n    assignments.sort()\n\n    # check if all assignments can be completed\n    if sum(assignments) > N:\n        return -1\n\n    # count number of days Takahashi can hang out\n    max_hangout_days = N - sum(assignments)\n\n    return str(max_hangout_days)",
        "test": "assert solution(\"41 2\\n5 6\") == \"30\"",
        "indeed": false
    },
    {
        "number": 4195,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str(N)\n    else:\n        count = N - 1\n        result = D * 100\n        while count > 0:\n            result += D * 100\n            count -= 1\n        return str(result)",
        "test": "assert solution(\"0 5\") == \"5\"",
        "indeed": false
    },
    {
        "number": 4196,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    N, *A = map(int, stdin.split())\n\n    max_gcd = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            max_gcd = max(max_gcd, gcd(A[i], A[j]))\n\n    return str(max_gcd)",
        "test": "assert solution(\"3\\n7 6 8\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4197,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *a_values = map(int, stdin.split())\n    order = [i for i in range(1, n+1)]\n    \n    for i in range(n):\n        a = a_values[i]\n        if a == 1:\n            order = [order[i]] + order[:i] + order[i+1:]\n        elif a == n:\n            order = order[:i+1] + [order[i]] + order[i+1:]\n        else:\n            j = order.index(a)\n            order = order[:i+1] + order[i+1:j] + [order[i]] + order[j:]\n            \n    return ' '.join(map(str, order))\n\ndef",
        "test": "assert solution(\"5\\n4 5 3 2 1\") == \"5 4 3 2 1\"",
        "indeed": false
    },
    {
        "number": 4198,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_value = 0\n    for N in range(1, 1000000000):\n        price = A * N + B * len(str(N))\n        if price <= X:\n            max_value = max(max_value, N)\n        else:\n            break\n    return str(max_value) if max_value > 0 else \"0\"",
        "test": "assert solution(\"10 7 100\") == \"9\"  # The integer 9 is sold for 10*9 + 7*1 = 97 yen, and this is the greatest integer that can be bought.",
        "indeed": false
    },
    {
        "number": 4199,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    h = list(map(int, stdin.split()[2:]))\n    count = 0\n    for i in h:\n        if i >= K:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"",
        "indeed": true
    },
    {
        "number": 4200,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.strip().split('\\n')\n    n, m = map(int, input_lines[0].split())\n    votes = list(map(int, input_lines[1].split()))\n    \n    total_votes = sum(votes)\n    min_votes = total_votes / (4 * m)\n    \n    popular_items = [item for item, vote in enumerate(votes) if vote >= min_votes]\n    \n    if len(popular_items) >= m:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"",
        "indeed": true
    },
    {
        "number": 4201,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def count_black_squares(grid: List[List[str]], rows: List[int], columns: List[int]) -> int:\n        count = 0\n        for i in range(len(grid)):\n            if i in rows:\n                count += grid[i].count('#')\n            else:\n                count += sum(1 for j in range(len(grid[0])) if grid[i][j] == '#' and j not in columns)\n        return count\n\n    def red_squares_count(grid: List[List[str]], rows: List[int], columns: List[int]) -> int:\n        count = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == '#' and (i in rows or j in columns):\n                    count += 1\n        return count\n\n    h, w, k = stdin.split()\n    h, w, k = int(h), int(w), int(k)\n\n    grid = [list(row) for row in stdin.split('\\n')[1:]]\n    total_black_squares = sum(row.count('#') for row in grid)\n    total_red_squares = total_black_squares - k\n\n    result = 0\n    for rows in range(2**h):\n        row_indices = [i for i in range(h) if (1 << i) & rows]\n        for columns in range(2**w):\n            column_indices = [j for j in range(w) if (1 << j) & columns]\n\n            if count_black_squares(grid, row_indices, column_indices) == total_black_squares - k:\n                if red_squares_count(grid, row_indices, column_indices) == total_red_squares:\n                    result += 1\n\n    return str(result)\n\ninput_str = \"2 3 2\\n..#\\n###\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"2 2 2\\n..\\n#.\\n\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4202,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    mod = 2019\n\n    def is_valid(i: int, j: int) -> bool:\n        return L <= i < j <= R\n\n    def calculate_result(i: int, j: int) -> int:\n        return (i * j) % mod\n\n    min_result = mod\n    for i in range(L, R):\n        for j in range(i + 1, R + 1):\n            if is_valid(i, j):\n                result = calculate_result(i, j)\n                min_result = min(min_result, result)\n\n    return str(min_result)",
        "test": "assert solution('2020 2040') == '2'",
        "indeed": false
    },
    {
        "number": 4203,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[0] != 'A' or s[2] != 'C' or s.count('C') != 1:\n        return \"WA\"\n    for i in range(len(s)):\n        if i not in [0, 2] and not s[i].islower():\n            return \"WA\"\n    return \"AC\"",
        "test": "assert solution(\"NotAC\") == \"WA\"",
        "indeed": false
    },
    {
        "number": 4204,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    K = int(K)\n    \n    for _ in range(5 * 10**15):\n        S = S.replace('2', '22').replace('3', '333').replace('4', '4444').replace('5', '55555').replace('6', '666666').replace('7', '7777777').replace('8', '8888888').replace('9', '99999999')\n    \n    return S[K-1]",
        "test": "assert solution(\"1214\\n4\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4205,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *p = map(int, stdin.split())\n\n    if len(p) != N:\n        return \"NO\"\n\n    p_sorted = sorted(p)\n\n    if p == p_sorted:\n        return \"YES\"\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n                if p == p_sorted:\n                    return \"YES\"\n                p[i], p[j] = p[j], p[i]\n\n    return \"NO\"",
        "test": "assert solution('5\\n5 2 3 4 1') == 'YES'",
        "indeed": true
    },
    {
        "number": 4206,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    count = 0\n    while s > 0:\n        if s % 3 == 0:\n            count += 1\n        s //= 10\n    return str(count)",
        "test": "assert solution(\"3121\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4207,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n\n    c = [a_i * d + b_i for a_i, b_i in zip(a, b)]\n\n    max_zeroes = len([x for x in c if x == 0])\n\n    return str(max_zeroes)\n",
        "test": "assert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4208,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    left_boots = stdin.splitlines()[1]\n    right_boots = stdin.splitlines()[2]\n    \n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if is_compatible(left_boots[i], right_boots[j]):\n                pairs.append((i + 1, j + 1))\n    \n    if not pairs:\n        return \"0\\n\"\n    \n    result = [0] * n\n    for pair in pairs:\n        result[pair[0] - 1] += 1\n        result[pair[1] - 1] += 1\n    \n    max_count = max(result)\n    \n    output = str(max_count) + \"\\n\"\n    for i in range(n):\n        if result[i] == max_count:\n            output += str(i + 1) + \" \"\n    \n    return output\n\ndef",
        "test": "assert solution('7\\nabaca?b\\nzabbbcc\\n') == '5\\n6 5\\n2 3\\n4 6\\n7 4\\n1 2\\n'",
        "indeed": false
    },
    {
        "number": 4209,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n = int(n)\n    a = list(map(int, a.split()))\n    \n    # Find the maximum sum\n    max_sum = max(a)\n    \n    # Initialize the blocks\n    blocks = []\n    \n    # Iterate through the array\n    for i in range(n):\n        if a[i] == max_sum:\n            block_start = i\n            while i < n and a[i] == max_sum:\n                i += 1\n            block_end = i - 1\n            blocks.append((block_start, block_end))\n    \n    # Print the number of blocks\n    print(len(blocks))\n    \n    # Print the blocks\n    for block in blocks:\n        print(block[0], block[1])\n    \n    return \"\"",
        "test": "assert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\"",
        "indeed": false
    },
    {
        "number": 4210,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible(x: int, y: int, k: int) -> bool:\n        return (x * 10 + y) % k == 0\n\n    n, k = map(int, stdin.split())\n    a = list(map(int, input().split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_divisible(a[i], a[j], k):\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"4 2\\n2 78 4 10\") == \"12\"",
        "indeed": false
    },
    {
        "number": 4211,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    a = [0] * n\n    max_sum = 0\n\n    for i in range(n - 1, -1, -1):\n        a[i] = max(b[i], a[i + 1])\n        max_sum = max(max_sum, a[i])\n\n    return str(max_sum)",
        "test": "assert solution(\"5\\n2 5 3 7 9\") == \"27\"",
        "indeed": false
    },
    {
        "number": 4212,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n\n    def is_valid(a: int, b: int, c: int) -> bool:\n        return (a >= 0) and (b > a) and (c >= 0) and (c <= M - a)\n\n    def score(A: list[int]) -> int:\n        return sum(d for i, (a, b, c, d) in enumerate(quadruples) if (A[b] - A[a]) == c)\n\n    N, M, Q, *inputs = stdin.split()\n    N, M, Q = int(N), int(M), int(Q)\n\n    quadruples = [tuple(map(int, inputs[i:i+4])) for i in range(0, Q*4, 4)]\n\n    A = list(range(1, M+1))\n    A = sorted(A)\n\n    max_score = 0\n    for perm in itertools.permutations(A):\n        current_score = score(perm)\n        max_score = max(max_score, current_score)\n\n    return str(max_score)",
        "test": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"",
        "indeed": false
    },
    {
        "number": 4213,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into the sequence length and the sequence values\n    parts = stdin.strip().split('\\n')\n    n, seq = int(parts[0]), [int(x) for x in parts[1].split()]\n\n    # Find the maximum absolute difference of two elements in the sequence\n    max_diff = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                diff = abs(seq[i] - seq[j])\n                if diff > max_diff:\n                    max_diff = diff\n\n    # Return the result\n    return str(max_diff)",
        "test": "assert solution(\"4\\n1 4 6 3\") == \"5\"",
        "indeed": true
    },
    {
        "number": 4214,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    towns = []\n    for i in range(1, N+1):\n        x, y = map(int, lines[i].split())\n        towns.append((x, y))\n\n    paths = []\n    def distance(town1, town2):\n        return ((town1[0] - town2[0]) ** 2 + (town1[1] - town2[1]) ** 2) ** 0.5\n\n    def permute(towns, start, end):\n        if start == end:\n            paths.append(sum(distance(towns[i], towns[i-1]) for i in range(1, end+1)))\n        else:\n            for i in range(start, end+1):\n                towns[start], towns[i] = towns[i], towns[start]\n                permute(towns, start+1, end)\n                towns[start], towns[i] = towns[i], towns[start]\n\n    permute(towns, 0, N-1)\n    return str(sum(paths) / len(paths))",
        "test": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"",
        "indeed": false
    },
    {
        "number": 4215,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A - 2 * B)",
        "test": "assert solution(\"12 4\") == \"4\"",
        "indeed": false
    },
    {
        "number": 4216,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    min_f = float('inf')\n    min_pair = None\n\n    for i in range(1, N + 1):\n        if N % i == 0:\n            j = N // i\n            f = max(len(str(i)), len(str(j)))\n            if f < min_f:\n                min_f = f\n                min_pair = (i, j)\n\n    return str(min_f)",
        "test": "assert solution(\"100\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4217,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, M, *data = map(int, stdin.split())\n    \n    liked_foods = set(range(1, M + 1))\n    \n    for i in range(N):\n        num_liked_foods, *liked_food_indices = data[:K_i]\n        data = data[K_i:]\n        \n        for food_index in range(1, M + 1):\n            if food_index not in liked_food_indices:\n                liked_foods.discard(food_index)\n                \n    return str(len(liked_foods))\n",
        "test": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\\n2 3 2\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4218,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    odd_count = 0\n    for i in range(1, N + 1):\n        if i % 2 == 1:\n            odd_count += 1\n    probability = odd_count / N\n    return \"{0:.10f}\".format(probability)",
        "test": "assert solution('4') == '0.5000000000'",
        "indeed": true
    },
    {
        "number": 4219,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    N = int(input_lines[0])\n    people = [[] for _ in range(N)]\n\n    for i in range(1, N + 1):\n        A_i = int(input_lines[i * 2 - 1])\n        for j in range(A_i):\n            x, y = map(int, input_lines[i * 2 - 1 + j].split())\n            people[i - 1].append((x - 1, y))\n\n    max_honest = 0\n    for honest_count in range(N + 1):\n        seen = set()\n        for person in people:\n            for testimonial in person:\n                if testimonial[1] == 1:\n                    seen.add(testimonial[0])\n        if len(seen) == honest_count:\n            max_honest = honest_count\n        else:\n            break\n\n    return str(max_honest)",
        "test": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0') == '2'  # Sample Input",
        "indeed": false
    },
    {
        "number": 4220,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split()\n    K = int(K)\n    if len(S) > K:\n        return S[:K] + '...'\n    else:\n        return S",
        "test": "assert solution(\"7\\nnikoandsolstice\") == \"nikoand...\"",
        "indeed": true
    },
    {
        "number": 4221,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S[-1] == \"s\":\n        return S + \"es\"\n    else:\n        return S + \"s\"",
        "test": "assert solution(\"apple\") == \"apples\"",
        "indeed": true
    },
    {
        "number": 4222,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    snuke_snacks = []\n    for i in range(K):\n        num_snacks, *snacks = stdin.split()[2*(i+1)-1:2*(i+2)]\n        snuke_snacks.append(set(map(int, snacks)))\n\n    takahashi_victims = set()\n    for i in range(1, N+1):\n        has_snack = False\n        for j in range(K):\n            if i in snuke_snacks[j]:\n                has_snack = True\n                break\n        if not has_snack:\n            takahashi_victims.add(i)\n\n    return len(takahashi_victims)",
        "test": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4223,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split(\"\\n\")\n    N = int(N)\n\n    i = 0\n    result = \"\"\n    while i < N:\n        count = 1\n        while i + 1 < N and S[i] == S[i + 1]:\n            count += 1\n            i += 1\n        result += S[i] + str(count)\n        i += 1\n\n    return result\n\n\ndef",
        "test": "assert solution(\"1\\na\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4224,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.split()\n    n = int(n)\n    sequence = list(map(int, sequence.split()))\n\n    def calculate_operations(sequence: list) -> int:\n        operations = 0\n        for i in range(n):\n            if sequence[i] % 2 == 0:\n                operations += 1\n            elif sequence[i] % 3 == 0:\n                operations += 1\n            else:\n                operations += 2\n        return operations\n\n    max_operations = calculate_operations(sequence)\n    max_operations_sequence = sequence\n\n    for i in range(n):\n        if sequence[i] % 2 == 0:\n            sequence[i] = sequence[i] // 2\n            operations = calculate_operations(sequence)\n            if operations > max_operations:\n                max_operations = operations\n                max_operations_sequence = sequence\n\n            sequence[i] = sequence[i] * 2\n            operations = calculate_operations(sequence)\n            if operations > max_operations:\n                max_operations = operations\n                max_operations_sequence = sequence\n\n        if sequence[i] % 3 == 0:\n            sequence[i] = sequence[i] // 3\n            operations = calculate_operations(sequence)\n            if operations > max_operations:\n                max_operations = operations\n                max_operations_sequence = sequence\n\n            sequence[i] = sequence[i] * 3\n            operations = calculate_operations(sequence)\n            if operations > max_operations:\n                max_operations = operations\n                max_operations_sequence = sequence\n\n    return str(max_operations)",
        "test": "assert solution(\"10000\\n1000000000 9999999998 10000000001\") == \"13\\n\"",
        "indeed": false
    },
    {
        "number": 4225,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, k = map(int, stdin.split())\n\n    # Sort the cards by value in descending order\n    cards = sorted([1] * a + [0] * b + [-1] * c, reverse=True)\n\n    # Pick up K cards with the maximum sum\n    result = sum(cards[:k])\n\n    return str(result)\n",
        "test": "assert solution('2 1 1 3') == '2'",
        "indeed": false
    },
    {
        "number": 4226,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n\n    for cranes in range(1, X + 1):\n        turtles = X - cranes\n        if 4 * turtles + 2 * cranes == Y:\n            return \"Yes\"\n\n    return \"No\"",
        "test": "assert solution(\"1 4\") == \"No\"",
        "indeed": false
    },
    {
        "number": 4227,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, M = map(int, lines[0].split())\n    graph = {i: set() for i in range(1, N+1)}\n    for line in lines[1:]:\n        a, b = map(int, line.split())\n        graph[a].add(b)\n        graph[b].add(a)\n    \n    def dfs(v: int, visited: set, path: List[int]) -> int:\n        visited.add(v)\n        if len(visited) == N:\n            return 1\n        result = 0\n        for u in graph[v]:\n            if u not in visited:\n                result += dfs(u, visited.copy(), path + [u])\n        return result\n    \n    return str(dfs(1, set(), [1]))",
        "test": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"2\"",
        "indeed": true
    },
    {
        "number": 4228,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = [L + i - 1 for i in range(1, N + 1)]\n    \n    # Calculate the sum of all apples\n    sum_all = sum(apples)\n    \n    # Calculate the sum of the remaining apples after eating one\n    sum_remaining = sum_all - apples[0]\n    \n    # Calculate the difference between the two sums\n    diff = abs(sum_all - sum_remaining)\n    \n    # Calculate the final result\n    result = sum_remaining - diff\n    \n    return str(result)",
        "test": "assert solution('3 1') == '4'",
        "indeed": false
    },
    {
        "number": 4229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    fizzbuzz_sum = 0\n\n    for i in range(1, N + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            fizzbuzz_sum += 0\n        elif i % 3 == 0:\n            fizzbuzz_sum += 0\n        elif i % 5 == 0:\n            fizzbuzz_sum += i\n        else:\n            fizzbuzz_sum += i\n\n    return str(fizzbuzz_sum)",
        "test": "assert solution(\"15\") == \"60\"",
        "indeed": false
    },
    {
        "number": 4230,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split()[0:2])\n    sequence = list(map(int, stdin.split()[2:]))\n\n    diff = float('inf')\n    result = None\n\n    for i in range(X - 100, X + 101):\n        if i not in sequence:\n            current_diff = abs(i - X)\n            if current_diff < diff:\n                diff = current_diff\n                result = i\n\n    return str(result)",
        "test": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"",
        "indeed": true
    },
    {
        "number": 4231,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split()[0].split())\n    chosen_rows, chosen_cols = map(int, stdin.split()[1].split())\n\n    total_cells = rows * cols\n    painted_cells = chosen_rows * cols + chosen_cols * rows - chosen_cols * chosen_rows\n    remaining_cells = total_cells - painted_cells\n\n    return str(remaining_cells)",
        "test": "assert solution(\"4 3\\n3 2\") == \"6\"",
        "indeed": false
    },
    {
        "number": 4232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def find_x(seq, k):\n        seq.sort()\n        n = len(seq)\n        for i in range(1, 10**9):\n            count = 0\n            for j in range(n):\n                if seq[j] <= i:\n                    count += 1\n                    if count == k:\n                        return i\n        return -1\n\n    n, k = map(int, stdin.split()[:2])\n    seq = list(map(int, stdin.split()[2:]))\n\n    x = find_x(seq, k)\n    return str(x)",
        "test": "assert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\" ",
        "indeed": false
    },
    {
        "number": 4233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(row) for row in stdin.split()[n+1:]]\n\n    def can_place_star(x, y, size):\n        for i in range(size):\n            for j in range(size):\n                if x + i >= n or y + j >= m or grid[x + i][y + j] == '*':\n                    return False\n        return True\n\n    def place_star(x, y, size):\n        for i in range(size):\n            for j in range(size):\n                if x + i < n and y + j < m:\n                    grid[x + i][y + j] = '*'\n\n    def print_grid():\n        for row in grid:\n            print(''.join(row))\n\n    stars = []\n    k = 0\n\n    for x in range(n):\n        for y in range(m):\n            if grid[x][y] == '.':\n                for size in range(1, min(n - x, m - y) + 1):\n                    if can_place_star(x, y, size):\n                        k += 1\n                        stars.append((x, y, size))\n                        place_star(x, y, size)\n                        break\n\n    if k > n * m:\n        return \"-1\"\n\n    if not stars:\n        return \"-1\"\n\n    print(k)\n    for x, y, size in stars:\n        print(x, y, size)\n\n    print_grid()",
        "test": "assert solution(\"6 8\\n....*\\n...**\\n..****\\n...**\\n....*\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"",
        "indeed": false
    },
    {
        "number": 4234,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    k = 0\n    result = []\n\n    for i in range(n):\n        if i % 2 == 0 and s[i] == s[i+1]:\n            k += 1\n        else:\n            result.append(s[i])\n\n    return k, ''.join(result)",
        "test": "assert solution(\"string\") == \"0\\nstring\"",
        "indeed": false
    },
    {
        "number": 4235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n\n    def dfs(start, visited, path_length):\n        visited[start] = True\n        if path_length > 2:\n            return True\n\n        for v in range(1, n + 1):\n            if not visited[v] and (v, start) in edges:\n                visited[v] = True\n                path_length += 1\n                if dfs(v, visited, path_length):\n                    return True\n                path_length -= 1\n                visited[v] = False\n\n        visited[start] = False\n        return False\n\n    for i in range(1, n + 1):\n        visited = [False] * (n + 1)\n        if dfs(i, visited, 0):\n            return \"NO\"\n\n    orientation = [\"0\"] * m\n    for u, v in edges:\n        if (u, v) in edges:\n            orientation[edges.index((u, v))] = \"1\"\n        else:\n            orientation[edges.index((v, u))] = \"1\"\n\n    return \"YES\\n\" + \"\".join(orientation) ",
        "test": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"",
        "indeed": false
    },
    {
        "number": 4236,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m = map(int, stdin.split()[0:2])\n    segments = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    \n    # Find the points that don't belong to any segment\n    points = set(range(1, m+1))\n    for l, r in segments:\n        points -= set(range(l, r+1))\n    \n    # Print the output\n    k = len(points)\n    points_list = sorted(list(points))\n    output = f\"{k}\\n{' '.join(map(str, points_list))}\"\n    return output",
        "test": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"",
        "indeed": false
    },
    {
        "number": 4237,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % c != 0 and i % d != 0:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"4 9 2 3\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4238,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(N))\n    if digits_sum % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"123456789\") == \"Yes\"",
        "indeed": false
    },
    {
        "number": 4239,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    i = 0\n    while True:\n        withdraw_amount = (6**i + 9**i)\n        if withdraw_amount >= N:\n            if withdraw_amount == N:\n                return \"1\"\n            else:\n                return str(i+1)\n        i += 1",
        "test": "assert solution('1') == '1'",
        "indeed": false
    },
    {
        "number": 4240,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if len(s) != len(t):\n        return \"No\"\n    \n    return \"Yes\" if s in [t[i:] + t[:i] for i in range(len(t))] else \"No\"",
        "test": "assert solution(\"abc\\nabc\") == \"Yes\"",
        "indeed": true
    },
    {
        "number": 4241,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if T in S:\n        return 0\n\n    for i in range(len(S) - len(T) + 1):\n        if S[i:i+len(T)] == T:\n            return len(S) - len(T) - i\n\n    return len(S)",
        "test": "assert solution(\"abcd\\nab\") == \"4\"",
        "indeed": false
    },
    {
        "number": 4242,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    divisors = [i for i in range(1, min(A, B)+1) if A%i == 0 and B%i == 0]\n    return str(divisors[-K])",
        "test": "assert solution('8 12 2') == '2'",
        "indeed": true
    },
    {
        "number": 4243,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    max_happiness = 0\n    \n    # Iterate over all possible combinations of 500-yen, 100-yen, 50-yen, 10-yen, 5-yen, and 1-yen coins\n    for i in range(X // 500 + 1):\n        for j in range(X // 100 + 1):\n            for k in range(X // 50 + 1):\n                for l in range(X // 10 + 1):\n                    for m in range(X // 5 + 1):\n                        n = X - 500*i - 100*j - 50*k - 10*l - 5*m\n                        happiness = i*1000 + j*500 + k*100 + l*50 + m*25 + n*5\n                        max_happiness = max(max_happiness, happiness)\n                        \n    return str(max_happiness)",
        "test": "assert solution(\"0\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input from stdin\n    n, x_coordinates = stdin.split()\n    n = int(n)\n    x_coordinates = list(map(int, x_coordinates.split()))\n\n    # Calculate the minimum total stamina\n    minimum_stamina = float('inf')\n    for p in range(1, 101):\n        total_stamina = 0\n        for x in x_coordinates:\n            total_stamina += (x - p) ** 2\n        if total_stamina < minimum_stamina:\n            minimum_stamina = total_stamina\n\n    return str(minimum_stamina)",
        "test": "assert solution(\"5\\n1 2 3 4 5\\n\") == \"4\"",
        "indeed": false
    },
    {
        "number": 4245,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if B < A:\n        return \"Invalid Input\"\n\n    count = 0\n    while B > 0:\n        count += 1\n        B -= A\n\n    return str(count)",
        "test": "assert solution(\"4 10\") == \"3\"",
        "indeed": false
    },
    {
        "number": 4246,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    forecast, actual = stdin.split()\n    count = 0\n    for i in range(3):\n        if forecast[i] == actual[i]:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"CSS\\nCSR\") == \"2\"",
        "indeed": true
    },
    {
        "number": 4247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Split input by newline and read n and p\n    n, p = stdin.split()\n    n = int(n)\n    p = list(map(int, p.split()))\n\n    # Initialize count\n    count = 0\n\n    # Iterate through p\n    for i in range(1, n - 1):\n        # Check if p_i is the second smallest number among p_{i-1}, p_i, and p_{i+1}\n        if p[i - 1] < p[i] < p[i + 1] or p[i - 1] > p[i] > p[i + 1]:\n            count += 1\n\n    # Return the count\n    return str(count)",
        "test": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    points = [list(map(float, line.strip().split())) for line in stdin.split('\\n')[1:]]\n    x_values = [point[0] for point in points]\n    y_values = [point[1] for point in points]\n    sum_x = sum(x_values)\n    sum_y = sum(y_values)\n    sum_xy = sum([x*y for x,y in zip(x_values, y_values)])\n    sum_x_sq = sum([x**2 for x in x_values])\n    sum_y_sq = sum([y**2 for y in y_values])\n    n = len(points)\n    theta = (n*sum_xy - sum_x*sum_y)/(n*sum_x_sq - (sum_x**2))\n    return f\"{theta:.3f}\"\n\ndef",
        "test": "assert solution(",
        "indeed": false
    },
    {
        "number": 4249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n    \n    def dfs(i, day):\n        if i == n:\n            return day if day <= m else float('inf')\n        result = float('inf')\n        for j in range(i, n):\n            for k in range(j, n):\n                result = min(result, dfs(k+1, day + max(0, cups[k] - k + 1)))\n        return result\n    \n    result = dfs(0, 0)\n    return -1 if result == float('inf') else result\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "assert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4250,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = list(map(int, stdin.split()[2:]))\n\n    s_set = set(s)\n    t = []\n    for i in range(1, k+1):\n        if i in s_set:\n            t.append(i)\n            s_set.remove(i)\n\n    return \" \".join(map(str, t))",
        "test": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"",
        "indeed": false
    },
    {
        "number": 4251,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    matrix = [list(map(int, stdin.split()[2 + i * m:2 + (i + 1) * m])) for i in range(n)]\n    k_max = 0\n    for k in range(1, max(max(matrix[i]) for i in range(n)) - min(matrix[i][0] for i in range(n)) + 1):\n        acceptable = True\n        for i in range(n):\n            if not all(matrix[i][j] - matrix[i][j-1] >= k for j in range(1, m)):\n                acceptable = False\n                break\n        if acceptable:\n            k_max = k\n            break\n    return str(k_max)",
        "test": "assert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, name = stdin.split()\n    n = int(n)\n    x_count = name.count('x')\n    x_count_consecutive = 0\n    \n    for i in range(n - 2):\n        if name[i:i+3] == 'xxx':\n            x_count_consecutive += 1\n            \n    if x_count_consecutive == 0:\n        return '0'\n    else:\n        return str(x_count - x_count_consecutive)",
        "test": "assert solution(\"xxoxx\") == 0",
        "indeed": false
    },
    {
        "number": 4253,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r ** 2\n    return str(area)",
        "test": "assert solution('4') == '48'",
        "indeed": true
    },
    {
        "number": 4254,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n\n    if W >= S:\n        return \"unsafe\"\n    else:\n        return \"safe\"",
        "test": "assert solution(\"4 5\") == \"unsafe\"",
        "indeed": true
    },
    {
        "number": 4255,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return str(int(area))",
        "test": "assert solution('3 4 5') == '6'",
        "indeed": true
    },
    {
        "number": 4256,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if B >= A:\n        times = min(B // A, C)\n    else:\n        times = 0\n    return str(times)",
        "test": "assert solution('2 11 4') == '4'",
        "indeed": true
    },
    {
        "number": 4257,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)  # converting result to string and returning the value. ",
        "test": "assert solution(\"2 5\") == \"10\"",
        "indeed": true
    },
    {
        "number": 4258,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    total_biscuits = B * (T // A + 1)\n    return str(total_biscuits)",
        "test": "assert solution(\"4 6 9\") == \"18\"",
        "indeed": false
    },
    {
        "number": 4259,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    multiple_found = False\n    for i in range(A, B+1):\n        if i % K == 0:\n            multiple_found = True\n            break\n    return \"OK\" if multiple_found else \"NG\"",
        "test": "assert solution(\"7\\n500 600\") == \"OK\"",
        "indeed": true
    },
    {
        "number": 4260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    t = T / X\n    return f\"{t:.3f}\"\n\ndef",
        "test": "assert solution(\"8 3\") == \"2.666666667\" ",
        "indeed": false
    },
    {
        "number": 4261,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    transferred_water = min(A - B, C)\n    return str(C - transferred_water)",
        "test": "assert solution(\"6 4 3\") == \"1\"",
        "indeed": true
    },
    {
        "number": 4262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    P = list(map(int, stdin.split('\\n')[1].split()))\n    Q = list(map(int, stdin.split('\\n')[2].split()))\n\n    a = 0\n    b = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            if P[i] > P[j]:\n                a += 1\n            if Q[i] > Q[j]:\n                b += 1\n\n    return abs(a - b)\n",
        "test": "assert solution(\"4\\n1 2 3 4\\n2 1 4 3\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4263,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    max_length = 0\n    \n    for i in range(len(S)):\n        for j in range(i, len(S)):\n            substring = S[i:j+1]\n            if set(substring) <= set(\"ACGT\"):\n                max_length = max(max_length, len(substring))\n                \n    return str(max_length)",
        "test": "assert solution(\"ATCODER\") == \"3\" ",
        "indeed": true
    },
    {
        "number": 4264,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if len(str(i)) % 2 != 0:\n            count += 1\n    return str(count)",
        "test": "assert solution('11') == '9'",
        "indeed": true
    },
    {
        "number": 4265,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    n = len(S)\n    dp = [[0] * 26 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for c in range(26):\n            dp[i][c] = dp[i - 1][c] + 1\n            if S[i - 1] != chr(ord('a') + c):\n                dp[i][c] = min(dp[i][c], dp[i - 1][ord(S[i - 1])] + 1)\n    return min(dp[n])\n\ndef",
        "test": "assert solution(\"cupofcoffee\\ncupofhottea\") == \"4\" ",
        "indeed": false
    },
    {
        "number": 4266,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    start = max(1, X - K + 1)\n    end = min(100, X + K - 1)\n    return \" \".join(map(str, range(start, end + 1)))",
        "test": "assert solution(\"1 4\") == \"4\"",
        "indeed": false
    },
    {
        "number": 4267,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    temperature = int(stdin)\n    if temperature >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('25') == 'No' ",
        "indeed": true
    },
    {
        "number": 4268,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def distance(point1, point2):\n        return (sum([(point1[i] - point2[i])**2 for i in range(D)]))**0.5\n    \n    lines = stdin.strip().split(\"\\n\")\n    N, D = map(int, lines[0].split())\n    points = [list(map(int, line.split())) for line in lines[1:]]\n    \n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if int(distance(points[i], points[j])) == distance(points[i], points[j]):\n                count += 1\n    \n    return str(count)",
        "test": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\\n\") == \"1\"",
        "indeed": true
    },
    {
        "number": 4269,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    for i in range(len(S) - 1):\n        if S[i] == S[i + 1]:\n            return \"Bad\"\n    return \"Good\"",
        "test": "assert solution(\"1234\") == \"Good\"",
        "indeed": true
    },
    {
        "number": 4270,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *ingredients = stdin.split()\n    N = int(N)\n    values = [float(v) for v in ingredients]\n\n    while len(values) > 1:\n        new_values = []\n        for i in range(0, len(values), 2):\n            if i + 1 < len(values):\n                new_value = (values[i] + values[i+1]) / 2\n                new_values.append(new_value)\n            else:\n                new_values.append(values[i])\n        values = new_values\n\n    return str(values[0])",
        "test": "assert solution(\"2\\n3 4\") == \"3.5\"",
        "indeed": false
    },
    {
        "number": 4271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    C = list(map(int, lines[3].split()))\n    \n    satisfaction = 0\n    \n    for i in range(N):\n        satisfaction += B[i]\n        if i != N-1:\n            satisfaction += C[i]\n            \n    return str(satisfaction)\n\ninput_str = \"\"\"\n3\n3 1 2\n2 5 4\n3 6\n\"\"\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"2\\n1 2\\n5 4\\n\") == \"9\"",
        "indeed": false
    },
    {
        "number": 4272,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    count = 0\n    for i in range(len(S)-2):\n        if S[i:i+3] == \"ABC\":\n            count += 1\n    return str(count)",
        "test": "assert solution(\"10\\nZABCDBABCQ\\n\") == \"2\"",
        "indeed": true
    },
    {
        "number": 4273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    people = stdin.split('\\n')[1:]\n    \n    count = 0\n    \n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if i != j and i != k and j != k:\n                    if (people[i][0] in \"MARCH\" and people[j][0] in \"MARCH\" and people[k][0] in \"MARCH\"):\n                        if people[i][0] != people[j][0] and people[i][0] != people[k][0] and people[j][0] != people[k][0]:\n                            count += 1\n                            \n    return str(count)",
        "test": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4274,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == n:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"3 3\") == \"Yes\"  # AC ",
        "indeed": true
    },
    {
        "number": 4275,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"sippuu\") == \"Yes\"",
        "indeed": true
    },
    {
        "number": 4276,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, t = map(int, lines[0].split())\n    routes = []\n    for i in range(1, n + 1):\n        c, ti = map(int, lines[i].split())\n        routes.append((c, ti))\n    \n    routes.sort(key=lambda x: x[1])  # Sort by time\n    \n    min_cost = float('inf')\n    for i in range(n):\n        if routes[i][1] <= t:\n            min_cost = min(min_cost, routes[i][0])\n        else:\n            break\n    \n    if min_cost == float('inf'):\n        return \"TLE\"\n    else:\n        return str(min_cost)",
        "test": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == \"4\"",
        "indeed": true
    },
    {
        "number": 4277,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = list(map(int, stdin.split()))\n    return str(min(N * A, B))",
        "test": "assert solution(\"4 2 9\") == \"8\"",
        "indeed": true
    },
    {
        "number": 4278,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_anagram(s1: str, s2: str) -> bool:\n        return sorted(s1) == sorted(s2)\n\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    anagram_pairs = 0\n\n    for i in range(N):\n        s1 = lines[i + 1]\n        for j in range(i + 1, N):\n            s2 = lines[j + 1]\n            if is_anagram(s1, s2):\n                anagram_pairs += 1\n\n    return str(anagram_pairs)",
        "test": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split(\"\\n\")[0])\n    k = list(map(int, stdin.split(\"\\n\")[1:q+1]))\n\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n\n    result = []\n    for i in range(q):\n        result.append(sequence[k[i]-1])\n\n    return \"\\n\".join(result)\n\ndef",
        "test": "assert solution(\"4\\n2132\\n506\\n999999999\\n1000000000\") == \"8\\n2\\n9\\n8\\n\" ",
        "indeed": false
    },
    {
        "number": 4280,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k = map(int, stdin.split()[:2])\n    roads = [(int(x), int(y)) for x, y in (line.strip().split() for line in stdin.splitlines()[2:])]\n\n    # Prepare adjacency matrix\n    adj_matrix = [[0] * n for _ in range(n)]\n    for x, y in roads:\n        adj_matrix[x - 1][y - 1] = 1\n        adj_matrix[y - 1][x - 1] = 1\n\n    # Calculate the number of roads for each company\n    num_roads_for_companies = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if adj_matrix[i][j] == 1:\n                num_roads_for_companies[i] += 1\n\n    # Check the number of companies needed\n    for r in range(1, n):\n        num_not_good_cities = 0\n        for i in range(n):\n            if len(set(j for j in range(n) if adj_matrix[i][j] == 1 and num_roads_for_companies[j] > 0)) > k:\n                num_not_good_cities += 1\n        if num_not_good_cities <= k:\n            break\n\n    # Prepare the output\n    c_list = [1] * (n - 1)\n    for i in range(n - 1):\n        c_list[i] = (i % r) + 1\n\n    output = f\"{r}\\n\" + \" \".join(map(str, c_list))\n\n    return output",
        "test": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\") == \"1\\n1 1\\n\"",
        "indeed": false
    },
    {
        "number": 4281,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, initial_positions = list(map(int, stdin.split()))\n    final_positions = [x - 1 if x > 1 else x + 1 if x < n else 0 for x in initial_positions]\n    occupied_houses = set(final_positions)\n    min_occupied = len(occupied_houses)\n    max_occupied = len(occupied_houses)\n    \n    for i in range(n):\n        final_positions[i] = initial_positions[i] + 1 if initial_positions[i] > 1 else initial_positions[i] - 1 if initial_positions[i] < n else 0\n        occupied_houses = set(final_positions)\n        min_occupied = min(min_occupied, len(occupied_houses))\n        max_occupied = max(max_occupied, len(occupied_houses))\n        \n        final_positions[i] = initial_positions[i] - 1 if initial_positions[i] > 1 else initial_positions[i] + 1 if initial_positions[i] < n else 0\n        occupied_houses = set(final_positions)\n        min_occupied = min(min_occupied, len(occupied_houses))\n        max_occupied = max(max_occupied, len(occupied_houses))\n        \n        final_positions[i] = initial_positions[i]\n    \n    return str(min_occupied) + \" \" + str(max_occupied)",
        "test": "assert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"",
        "indeed": false
    },
    {
        "number": 4282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    kids = [0] * n\n    for i in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        kids[a-1] = b\n        kids[b-1] = a\n    for i in range(n):\n        if kids[i] == 0:\n            start = i\n            break\n    kids = [0] * n\n    kids[start] = 1\n    i = 0\n    while kids[start] != n:\n        next_kid = kids[i]\n        kids[i] = next_kid + 1\n        i = (i + 1) % n\n    return \" \".join(map(str, kids))",
        "test": "assert solution(\"3\\n2 3\\n3 1\\n1 2\") == \"3 1 2\" ",
        "indeed": false
    },
    {
        "number": 4283,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    skills = list(map(int, stdin.split()[1:]))\n    skills.sort()\n    max_balanced_team = 0\n\n    for i in range(len(skills) - 2):\n        for j in range(i + 1, len(skills) - 1):\n            for k in range(j + 1, len(skills)):\n                if abs(skills[i] - skills[j]) <= 5 and abs(skills[j] - skills[k]) <= 5:\n                    max_balanced_team = max(max_balanced_team, 3)\n\n    for i in range(len(skills) - 1):\n        for j in range(i + 1, len(skills)):\n            if abs(skills[i] - skills[j]) <= 5:\n                max_balanced_team = max(max_balanced_team, 2)\n\n    return str(max_balanced_team)\n\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) ",
        "test": "assert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"",
        "indeed": false
    },
    {
        "number": 4284,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    result = []\n    for _ in range(q):\n        k, n, a, b = map(int, stdin.readline().strip().split())\n        if k == 0 or (a > b):\n            result.append(-1)\n            continue\n        if n * (b - a) <= k:\n            result.append(n)\n        else:\n            result.append(k // (b - a) + n - 1)\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"15 5 4 3\") == \"-1\"",
        "indeed": false
    },
    {
        "number": 4285,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    mod = 10**9 + 7\n    total = 0\n\n    for i in range(3**n):\n        bin_str = format(i, f'0{n}b')\n        t = \"\"\n        for j in range(n):\n            if s[j] == \"?\":\n                t += \"abc\"[int(bin_str[j])]\n            else:\n                t += s[j]\n\n        count = 0\n        for j in range(n - 2):\n            if t[j:j+3] == \"abc\":\n                count += 1\n\n        total = (total + count) % mod\n\n    return str(total)",
        "test": "assert solution(\"7\\n???????\\n\") == \"2835\"",
        "indeed": false
    },
    {
        "number": 4286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def read_line() -> List[int]:\n        return list(map(int, input().split()))\n    \n    n, m = read_line()\n    a = read_line()\n    special_offers = [read_line() for _ in range(m)]\n    \n    # Initialize a graph with vertices and their weights\n    graph = {i: {\"weight\": a[i], \"neighbors\": set()} for i in range(n)}\n    \n    # Add edges from special offers\n    for x, y, w in special_offers:\n        graph[x-1][\"neighbors\"].add((y-1, w))\n        graph[y-1][\"neighbors\"].add((x-1, w))\n    \n    def dfs(graph: Dict[int, Dict[str, Union[int, Set]]], visited: Set[int], current: int, current_weight: int, total_weight: int) -> int:\n        if current in visited:\n            return total_weight\n        visited.add(current)\n        \n        for neighbor, weight in graph[current][\"neighbors\"]:\n            total_weight = min(total_weight, dfs(graph, visited, neighbor, current_weight + weight, total_weight))\n        \n        return total_weight\n    \n    # Find the minimum cost to make the graph connected\n    min_cost = float('inf')\n    for i in range(n):\n        visited = set()\n        min_cost = min(min_cost, dfs(graph, visited, i, 0, float('inf')))\n    \n    return str(min_cost)",
        "test": "assert solution(\"4 0\\n1 3 3 7\") == \"16\"",
        "indeed": false
    },
    {
        "number": 4287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.readline().split())\n    rain_segments = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n    \n    def is_in_rain(x: int) -> bool:\n        for l, r in rain_segments:\n            if l <= x < r:\n                return True\n        return False\n    \n    def next_position(x: int) -> int:\n        return x + 1\n    \n    def fatigue(x: int, umbrella_weights: List[int]) -> int:\n        total_fatigue = 0\n        for weight in umbrella_weights:\n            total_fatigue += weight\n        return total_fatigue\n    \n    def min_fatigue(a: int, n: int, m: int, rain_segments: List[Tuple[int, int]], umbrellas: List[Tuple[int, int]]) -> int:\n        umbrella_positions = sorted([(x, p) for x, p in umbrellas])\n        total_fatigue = 0\n        x = 0\n        umbrella_weights = []\n        \n        while x <= a:\n            if is_in_rain(x):\n                if not umbrella_weights:\n                    return -1\n                umbrella_weights.pop()\n            else:\n                for position, weight in umbrella_positions:\n                    if position == x:\n                        umbrella_weights.append(weight)\n                        break\n            total_fatigue += fatigue(x, umbrella_weights)\n            x = next_position(x)\n            \n        return total_fatigue\n    \n    return str(min_fatigue(a, n, m, rain_segments, umbrellas))\n\ninput_stdin = open('input.txt')\noutput_stdout = open('output.txt', 'w')\n\noutput_stdout.write(solution(input_stdin))\n\ninput_stdin.close()\noutput_stdout.close() ",
        "test": "assert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"",
        "indeed": false
    },
    {
        "number": 4288,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B or B == C or A == C:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"5 7 5\") == \"Yes\"",
        "indeed": false
    },
    {
        "number": 4289,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    T, A = map(int, re.findall(r'\\d+', lines[1]))\n    H = list(map(int, re.findall(r'\\d+', lines[2])))\n\n    min_distance = float('inf')\n    index = -1\n\n    for i in range(N):\n        avg_temp = T - H[i] * 0.006\n        distance = abs(avg_temp - A)\n\n        if distance < min_distance:\n            min_distance = distance\n            index = i + 1\n\n    return str(index)\n\nstdin = \"2\\n12 5\\n1000 2000\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4290,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    count = 0\n    for i in range(N + 1):\n        for j in range(N + 1):\n            k = N - i\n            l = M - j\n            count += (2 * i * j) * (k * l)\n    return str(count // 4)",
        "test": "assert solution(\"0 2\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split()[0:2])\n    S = stdin.split()[2]\n\n    queries = []\n    for i in range(Q):\n        l, r = map(int, stdin.split()[2+i:2+i+2])\n        queries.append((l, r))\n\n    def count_substrings(s: str, sub: str) -> int:\n        count = 0\n        sub_len = len(sub)\n        for i in range(len(s) - sub_len + 1):\n            if s[i:i+sub_len] == sub:\n                count += 1\n        return count\n\n    for query in queries:\n        l, r = query\n        substring = S[l-1:r]\n        count = count_substrings(substring, 'AC')\n        print(count)",
        "test": "assert solution(\"10 1\\nTATANTA\\n3 7\\n\") == \"1\\n\"",
        "indeed": false
    },
    {
        "number": 4292,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, k = map(int, lines[0].split())\n    prices = list(map(int, lines[1].split()))\n\n    total_price = sum(sorted(prices)[0:k])\n\n    return str(total_price)",
        "test": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"",
        "indeed": true
    },
    {
        "number": 4293,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    min_time = min(P + Q, P + R, Q + R, P + Q + R)\n    return str(min_time)",
        "test": "assert solution(\"1 3 4\") == \"4\"",
        "indeed": true
    },
    {
        "number": 4294,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    if X < A:\n        return \"0\"\n    else:\n        return \"10\"",
        "test": "assert solution(\"3 5\") == \"0\"",
        "indeed": true
    },
    {
        "number": 4295,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    while N >= K:\n        N = abs(N - K)\n    return str(N)",
        "test": "assert solution('10 5') == '0'",
        "indeed": false
    },
    {
        "number": 4296,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A1, A2, A3 = map(int, stdin.split())\n    total = A1 + A2 + A3\n    if total >= 22:\n        return \"bust\"\n    else:\n        return \"win\"",
        "test": "assert solution(\"5 7 9\") == \"win\"",
        "indeed": true
    },
    {
        "number": 4297,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    i = 2\n    while True:\n        if i % n == 0:\n            return str(i)\n        i += 1",
        "test": "assert solution(\"7\") == \"14\"  # 14 is divisible by both 2 and 7.",
        "indeed": false
    },
    {
        "number": 4298,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    min_inspectors = int(N / (2 * D + 1))\n    if N % (2 * D + 1) != 0:\n        min_inspectors += 1\n    return str(min_inspectors)",
        "test": "assert solution(\"6 2\") == \"2\"",
        "indeed": true
    },
    {
        "number": 4299,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    digit = N % 10\n    if digit == 2 or digit == 4 or digit == 5 or digit == 7 or digit == 9:\n        return \"hon\"\n    elif digit == 0 or digit == 1 or digit == 6 or digit == 8:\n        return \"pon\"\n    else:\n        return \"bon\"",
        "test": "assert solution(\"16\") == \"pon\"",
        "indeed": true
    },
    {
        "number": 4300,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input by lines\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    d = [int(x) for x in lines[1].split()]\n    \n    # Compute the sum of all possible combinations of two takoyaki\n    total_health = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            total_health += d[i] * d[j]\n    \n    # Return the result as a string\n    return str(total_health)",
        "test": "assert solution(\"3\\n3 1 2\\n\") == \"11\"",
        "indeed": true
    },
    {
        "number": 4301,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1:]))\n    result = \"\"\n\n    for i in range(n):\n        max_val = -1\n        for j in range(n):\n            if j != i:\n                max_val = max(max_val, a[j])\n        result += str(max_val) + \"\\n\"\n\n    return result",
        "test": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\\n\"",
        "indeed": false
    },
    {
        "number": 4302,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(max(A + A, B + A, A + B))",
        "test": "assert solution(\"3 4\") == \"7\"",
        "indeed": false
    },
    {
        "number": 4303,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    lines = stdin.splitlines()\n    N, K = map(int, lines[0].split())\n    x = list(map(int, lines[1].split()))\n\n    # Initialize variables\n    candles_left = K\n    time = 0\n    last_position = 0\n    next_candle = 0\n\n    # Loop through candles and calculate time taken to light K candles\n    while candles_left > 0:\n        if next_candle < N and x[next_candle] <= last_position:\n            candles_left -= 1\n            time = max(time, abs(x[next_candle] - last_position))\n            last_position = x[next_candle]\n            next_candle += 1\n        else:\n            time += 1\n            last_position += 1 if last_position < x[next_candle] else -1\n\n    return str(time)",
        "test": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\" ",
        "indeed": false
    },
    {
        "number": 4304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # Calculate the height of the two towers\n    height_west = 1 + sum(range(a))\n    height_east = 1 + sum(range(b))\n\n    # Calculate the depth of the snow cover\n    depth = abs(height_west - height_east)\n\n    return str(depth)",
        "test": "assert solution(\"12 16\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4305,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    if H <= 0 or A <= 0:\n        return \"Invalid input\"\n    count = 0\n    while H > 0:\n        H -= A\n        count += 1\n    return str(count)",
        "test": "assert solution('10 4') == '3'",
        "indeed": true
    },
    {
        "number": 4306,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(min(b, d) - max(a, c))",
        "test": "assert solution(\"0 75 25 100\") == \"50\"",
        "indeed": false
    },
    {
        "number": 4307,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n\n    for num in range(1, n + 1):\n        if num % 2 == 1:\n            divisors = 0\n            for i in range(1, num + 1):\n                if num % i == 0:\n                    divisors += 1\n            if divisors == 8:\n                count += 1\n\n    return str(count)",
        "test": "assert solution('10') == '0'  # No odd number has 8 divisors between 1 and 10",
        "indeed": true
    },
    {
        "number": 4308,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    crackers = N // K\n    remaining = N % K\n    max_crackers = crackers + 1\n    min_crackers = crackers - remaining + 1\n    return str(abs(max_crackers - min_crackers))",
        "test": "assert solution(\"7 3\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4309,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    for i in range(100, N + 1):\n        if i == int(\"\".join([str(i) for _ in range(len(str(N)))])):\n            return str(i)\n    \n    return \"No such ABC exists.\"",
        "test": "assert solution(\"333\") == \"333\"",
        "indeed": false
    },
    {
        "number": 4310,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    costs = [0] + sorted([abs(A_1 - A_2), abs(A_1 - A_3), abs(A_2 - A_3)])\n    return str(costs[0] + sum(costs))",
        "test": "assert solution(\"1 2 3\") == \"4\"",
        "indeed": false
    },
    {
        "number": 4311,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    i = 1\n    m = 0\n\n    while True:\n        if i == 1:\n            a.append(s)\n        else:\n            if a[i - 1] % 2 == 0:\n                a.append(a[i - 1] // 2)\n            else:\n                a.append(3 * a[i - 1] + 1)\n\n        if a[-1] == s:\n            m = i\n            break\n\n        i += 1\n\n    return str(m)",
        "test": "assert solution(\"1\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4312,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    takahashi_health = A\n    aoki_health = C\n\n    takahashi_turn = True\n\n    while takahashi_health > 0 and aoki_health > 0:\n        if takahashi_turn:\n            aoki_health -= B\n        else:\n            takahashi_health -= D\n        takahashi_turn = not takahashi_turn\n\n    if takahashi_health <= 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n",
        "test": "assert solution(\"10 9 10 10\") == \"No\"",
        "indeed": true
    },
    {
        "number": 4313,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    values = [int(x) for x in lines[1].split()]\n    costs = [int(x) for x in lines[2].split()]\n\n    # Initialize variables\n    max_value = 0\n    selected_values = []\n\n    # Iterate through all possible combinations of gems\n    for i in range(2**n):\n        selected = [j for j in range(n) if (i & (1 << j))]\n        selected_costs = [costs[j] for j in selected]\n        selected_values = [values[j] for j in selected]\n        total_value = sum(selected_values)\n        total_cost = sum(selected_costs)\n\n        # Update the maximum value if necessary\n        if total_value - total_cost > max_value:\n            max_value = total_value - total_cost\n\n    # Return the result\n    return str(max_value)",
        "test": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"",
        "indeed": false
    },
    {
        "number": 4314,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    H, W = map(int, input_lines[0].split())\n    matrix = []\n    for i in range(1, H+1):\n        row = input_lines[i]\n        matrix.append(row)\n\n    # Find all rows and columns that consist only of white squares\n    rows_to_remove = []\n    columns_to_remove = []\n    for i in range(H):\n        all_white = True\n        for j in range(W):\n            if matrix[i][j] != '.':\n                all_white = False\n                break\n        if all_white:\n            rows_to_remove.append(i)\n\n    for j in range(W):\n        all_white = True\n        for i in range(H):\n            if matrix[i][j] != '.':\n                all_white = False\n                break\n        if all_white:\n            columns_to_remove.append(j)\n\n    # Remove rows and columns\n    for i in sorted(rows_to_remove, reverse=True):\n        matrix.pop(i)\n\n    for j in sorted(columns_to_remove, reverse=True):\n        for i in range(len(matrix)):\n            matrix[i] = matrix[i][:j] + matrix[i][j+1:]\n\n    # Print the final state of the grid\n    final_grid = ''\n    for row in matrix:\n        final_grid += row + '\\n'\n    return final_grid",
        "test": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"",
        "indeed": false
    },
    {
        "number": 4315,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin.strip())\n    circumference = 2 * 3.14 * R\n    return f\"{circumference:.6f}\"",
        "test": "assert solution(\"1\") == \"6.28318530717958623200\" or abs(float(solution(\"1\")) - 6.28) <= 1e-2 ",
        "indeed": false
    },
    {
        "number": 4316,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.upper()\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    double_chars = [char for char, count in char_count.items() if count == 2]\n    if len(double_chars) == 2:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"ASSA\") == \"Yes\"",
        "indeed": true
    },
    {
        "number": 4317,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    results = [a + b, a - b, a * b]\n    max_result = max(results)\n    return str(max_result)",
        "test": "assert solution(\"-2 3\") == \"-1\\nThe largest number among A + B = 1, A - B = -5, and A \\times B = -6 is -1.\\n\"",
        "indeed": true
    },
    {
        "number": 4318,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = stdin.split()\n    N = int(N)\n    H = [int(height) for height in H]\n\n    count = 0\n    for i in range(N):\n        if all(H[j] <= H[i] for j in range(i)):\n            count += 1\n\n    return str(count)\n\ninput_data = \"4\\n6 5 6 8\"\nprint(solution(input_data)) # Expected Output: \"3\" ",
        "test": "assert solution(\"4\\n6 5 6 8\") == \"3\"",
        "indeed": true
    },
    {
        "number": 4319,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    numbers = list(map(int, stdin.splitlines()[1].split()))\n    \n    stairways = []\n    current_stairway = []\n    for number in numbers:\n        if number not in current_stairway:\n            current_stairway.append(number)\n        else:\n            stairways.append(current_stairway)\n            current_stairway = [number]\n    \n    stairways.append(current_stairway)\n    \n    output = \"\"\n    output += str(len(stairways)) + \"\\n\"\n    for stairway in stairways:\n        output += str(len(stairway)) + \" \"\n    \n    return output.strip()",
        "test": "assert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"",
        "indeed": true
    },
    {
        "number": 4320,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        x = 1\n        k = 1\n        while x * (2 ** (k - 1)) < n:\n            k += 1\n        x = n // (2 ** (k - 1))\n        if x * (2 ** (k - 1)) == n:\n            print(x)\n        else:\n            print(-1)\n\nwith open('input.txt') as stdin:\n    solution(stdin) ",
        "test": "assert solution(\"2\\n6\") == \"1 2\"",
        "indeed": false
    },
    {
        "number": 4321,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    for _ in range(k):\n        if n % 10 == 0:\n            n //= 10\n        else:\n            n -= 1\n    return str(n)",
        "test": "assert solution(\"512 4\") == \"50\"",
        "indeed": true
    },
    {
        "number": 4322,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, heights = stdin.split()\n    n = int(n)\n    heights = list(map(int, heights.split()))\n    \n    # Sort the heights in descending order\n    heights.sort(reverse=True)\n    \n    # Initialize variables for the maximum balanced circle\n    max_circle = []\n    max_circle_size = 0\n    \n    # Iterate through the sorted heights\n    for i in range(n):\n        # Check if the current height is within the range of the previous heights in the circle\n        if max_circle and heights[i] - max_circle[-1] <= 1:\n            # If it is, append the current height to the circle\n            max_circle.append(heights[i])\n            # If the size of the circle is greater than the max size, update the max circle and size\n            if len(max_circle) > max_circle_size:\n                max_circle_size = len(max_circle)\n        else:\n            # If the current height is not within the range, reset the circle and append the current height\n            max_circle = [heights[i]]\n    \n    # Convert the max circle to a string and return it\n    max_circle_str = \" \".join(map(str, max_circle))\n    return max_circle_str",
        "test": "assert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\\n\"",
        "indeed": false
    },
    {
        "number": 4323,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    songs = [list(map(int, line.split())) for line in stdin.split('\\n')[2:-1]]\n    songs.sort(key=lambda x: x[0] - x[1])\n\n    total_size = sum(a for a, b in songs)\n\n    if total_size > m:\n        return \"-1\"\n\n    count = 0\n    total = 0\n\n    for a, b in songs:\n        if total + b > m:\n            break\n        count += 1\n        total += b\n\n    return str(count) if count == n else \"-1\"\n\ninput_str = \"\"\"4 21\n10 8\n7 4\n3 1\n5 4\"\"\"\nprint(solution(input_str))  # Output: 2\n\ninput_str = \"\"\"4 16\n10 8\n7 4\n3 1\n5 4\"\"\"\nprint(solution(input_str))  # Output: -1",
        "test": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\" ",
        "indeed": false
    },
    {
        "number": 4324,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, a, b = map(int, stdin.readline().split())\n        # Check if b is greater than the number of distinct letters in the alphabet\n        if b > 26:\n            return \"impossible\"\n        # Initialize the string with lowercase letters\n        s = \"abcdefghijklmnopqrstuvwxyz\"[:n]\n        # Check if the length of the string is not divisible by a, if it is, return \"impossible\"\n        if n % a != 0:\n            return \"impossible\"\n        # Initialize a list to store the substrings\n        substrings = []\n        # Loop through the string and add substrings of length a to the list\n        for i in range(n - a + 1):\n            substrings.append(s[i:i+a])\n        # Initialize a set to store the unique letters in each substring\n        unique_letters = set()\n        # Loop through the list of substrings\n        for substring in substrings:\n            # If the length of the unique letters in the substring is less than b, return \"impossible\"\n            if len(set(substring)) < b:\n                return \"impossible\"\n            # Add the unique letters in the substring to the set of unique letters\n            unique_letters.update(substring)\n        # If the length of the unique letters is less than the number of distinct letters in the alphabet, return \"impossible\"\n        if len(unique_letters) < 26:\n            return \"impossible\"\n        # Otherwise, return the string\n        return s\n    \n",
        "test": "assert solution(\"4\\n7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"tleelte\\nqwerty\\nvvvvvv\\nabcde\\n\"",
        "indeed": false
    },
    {
        "number": 4325,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = map(int, stdin.split())\n    minutes = N // X * T\n    pieces_left = N % X\n    if pieces_left:\n        minutes += T\n    return str(minutes)",
        "test": "assert solution(\"20 12 6\") == \"12\"",
        "indeed": true
    },
    {
        "number": 4326,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    num_students = int(stdin)\n    max_groups = num_students // 3\n    return str(max_groups)",
        "test": "assert solution(\"8\") == \"2\"",
        "indeed": true
    },
    {
        "number": 4327,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    if A < 2 or P < 2:\n        return \"0\"\n\n    pies = 0\n    if A >= 2:\n        pies += A // 2\n\n    if P >= 6:\n        pies += P // 6\n\n    return str(pies)",
        "test": "assert solution('2 5') == '6'",
        "indeed": false
    },
    {
        "number": 4328,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B % A == 0:\n        return str(A + B)\n    else:\n        return str(B - A)",
        "test": "assert solution(\"4 12\") == \"16\"",
        "indeed": true
    },
    {
        "number": 4329,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    S, T = lines\n    if T == S + T[-1]:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"abc\\nabcd\") == \"Yes\"",
        "indeed": true
    },
    {
        "number": 4330,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n\n    if A == B:\n        return \"IMPOSSIBLE\"\n\n    K = (A + B) // 2\n\n    if abs(A - K) == abs(B - K):\n        return str(K)\n    else:\n        return \"IMPOSSIBLE\"",
        "test": "assert solution(\"2 16\") == \"9\"",
        "indeed": true
    },
    {
        "number": 4331,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if str(7) in str(n):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"117\") == \"Yes\"",
        "indeed": true
    },
    {
        "number": 4332,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s_n = sum(map(int, str(n)))\n    if n % s_n == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"12\") == \"Yes\"",
        "indeed": true
    },
    {
        "number": 4333,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n\n    x_3 = x_1 + x_2 - x_1\n    y_3 = y_1 + y_2 - y_1\n\n    x_4 = y_1 - y_2 + x_1\n    y_4 = x_2 - x_1 + y_1\n\n    return f\"{x_3} {y_3} {x_4} {y_4}\"\n\ninput_data = input()\nprint(solution(input_data)) ",
        "test": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\" ",
        "indeed": false
    },
    {
        "number": 4334,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    s, t = lines[0].split(\" \")\n    a, b = map(int, lines[1].split(\" \"))\n    u = lines[2]\n\n    if u == s:\n        return f\"{a - 1} {b}\"\n    else:\n        return f\"{a} {b - 1}\"",
        "test": "assert solution(\"red blue\\n3 4\\nred\") == \"2 4\"",
        "indeed": true
    },
    {
        "number": 4335,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    half_len = N // 2\n    if S[:half_len] == S[half_len:]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"6\\nabcabc\\n\") == \"Yes\"",
        "indeed": true
    },
    {
        "number": 4336,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    area_rectangle = W * H\n\n    # Check if (x,y) is on the border\n    if x == 0 or x == W or y == 0 or y == H:\n        area_part = area_rectangle\n        multiple_ways = 0\n    else:\n        # Calculate areas of the parts\n        area_part = (W - x) * y + x * (H - y)\n        area_other = area_rectangle - area_part\n\n        # Check if there are multiple ways to cut the rectangle\n        if area_part == area_other:\n            multiple_ways = 1\n        else:\n            multiple_ways = 0\n\n    return f\"{area_part:.6f} {multiple_ways}\"",
        "test": "assert solution('2 3 1 2') == '3.000000 0' ",
        "indeed": false
    },
    {
        "number": 4337,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    colors = set()\n    for color in stdin.split()[1:]:\n        colors.add(color)\n    \n    if len(colors) == 3:\n        return \"Three\"\n    else:\n        return \"Four\"",
        "test": "assert solution(\"5\\nG G W P P\") == \"Three\"",
        "indeed": true
    },
    {
        "number": 4338,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n    max_doors = 0\n    \n    for durability in a:\n        max_doors += durability // x\n    \n    return str(max_doors)",
        "test": "assert solution(\"5 3 3\\n1 2 4 2 3\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4339,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n\n    good_pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                good_pairs += 1\n\n    return str(good_pairs)",
        "test": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == \"7\"",
        "indeed": true
    },
    {
        "number": 4340,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = a.copy()\n\n    for i in range(n):\n        if b[i] == 1:\n            b[i] = 2\n        elif b[i] == 2:\n            b[i] = 1\n        elif b[i] == 3:\n            b[i] = 4\n        elif b[i] == 4:\n            b[i] = 3\n        elif b[i] == 5:\n            b[i] = 6\n        elif b[i] == 6:\n            b[i] = 5\n        elif b[i] == 7:\n            b[i] = 8\n        elif b[i] == 8:\n            b[i] = 7\n        elif b[i] == 9:\n            b[i] = 10\n        elif b[i] == 10:\n            b[i] = 9\n\n    return ' '.join(map(str, b))",
        "test": "assert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\" ",
        "indeed": false
    },
    {
        "number": 4341,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find(parent, i):\n        if parent[i] == i:\n            return i\n        return find(parent, parent[i])\n\n    def union(parent, rank, x, y):\n        x = find(parent, x)\n        y = find(parent, y)\n        if x == y:\n            return\n        if rank[x] < rank[y]:\n            parent[x] = y\n        elif rank[x] > rank[y]:\n            parent[y] = x\n        else:\n            parent[y] = x\n            rank[x] += 1\n\n    def is_cycle(cycle):\n        for i in range(len(cycle)):\n            for j in range(i + 1, len(cycle)):\n                if (cycle[i], cycle[j]) in edges or (cycle[j], cycle[i]) in edges:\n                    return True\n        return False\n\n    n, m = map(int, stdin.split()[0:2])\n    edges = set()\n    for i in range(m):\n        v1, v2 = map(int, stdin.split()[2:])\n        edges.add((v1, v2))\n        edges.add((v2, v1))\n\n    parent = list(range(n))\n    rank = [0] * n\n    cycles = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (find(parent, i) == find(parent, j)) and ((i, j) in edges or (j, i) in edges):\n                cycle = []\n                for k in range(n):\n                    if find(parent, k) == find(parent, i):\n                        cycle.append(k)\n                cycles.append(cycle)\n    count = 0\n    for cycle in cycles:\n        if is_cycle(cycle):\n            count += 1\n    return str(count)",
        "test": "assert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\" ",
        "indeed": false
    },
    {
        "number": 4342,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, colors, edges = stdin.strip().split('\\n')\n    n = int(n)\n    colors = [int(color) for color in colors.split()]\n    adj_list = {i: set() for i in range(1, n+1)}\n    for edge in edges.strip().split('\\n'):\n        u, v = [int(x) for x in edge.split()]\n        adj_list[u].add(v)\n        adj_list[v].add(u)\n    \n    def is_nice(u, v, visited):\n        if colors[u-1] == colors[v-1]:\n            return False\n        visited.add(u)\n        for neighbor in adj_list[u]:\n            if neighbor not in visited:\n                if is_nice(neighbor, v, visited) or is_nice(v, neighbor, visited):\n                    return True\n        visited.remove(u)\n        return False\n    \n    count = 0\n    for edge in edges.strip().split('\\n'):\n        u, v = [int(x) for x in edge.split()]\n        visited = set()\n        if is_nice(u, v, visited) or is_nice(v, u, visited):\n            count += 1\n    \n    return str(count)",
        "test": "assert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"4\"",
        "indeed": false
    },
    {
        "number": 4343,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = stdin.split()\n    k = int(k)\n    s = list(s)\n    t = list(t)\n\n    def increment(arr: list, index: int) -> None:\n        if arr[index] == 'z':\n            arr[index] = 'a'\n            increment(arr, index - 1)\n        else:\n            arr[index] = chr(ord(arr[index]) + 1)\n\n    def is_valid(arr: list) -> bool:\n        for i in range(k):\n            if s[i] > arr[i]:\n                return False\n            if t[i] < arr[i]:\n                return False\n        return True\n\n    def count_valid(arr: list) -> int:\n        count = 0\n        for i in range(k):\n            if s[i] <= arr[i] <= t[i]:\n                count += 1\n            elif s[i] > arr[i]:\n                break\n        return count\n\n    def find_median(arr: list, index: int, count: int) -> str:\n        if count == 0:\n            return ''.join(arr)\n        if index == k:\n            return ''.join(arr)\n\n        target = count // 2\n        for i in range(26):\n            arr[index] = chr(ord('a') + i)\n            count_current = count_valid(arr)\n            if count_current >= target:\n                if count_current == target:\n                    return ''.join(arr)\n                return find_median(arr, index + 1, count_current - target)\n            count += count_current\n\n    return find_median(s, 0, 0)",
        "test": "assert solution(\"5\\nafogk\\nasdji\\n\") == \"alvuw\"",
        "indeed": false
    },
    {
        "number": 4344,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    ratings = list(map(int, stdin.split()[2:]))\n    \n    if k > len(ratings):\n        return \"NO\"\n    \n    for i in range(len(ratings)):\n        ratings[i] = (i+1, ratings[i])\n    \n    ratings.sort(key=lambda x: x[1])\n    \n    result = []\n    for i in range(len(ratings)):\n        if len(result) == k:\n            break\n        if i == 0 or ratings[i][1] != ratings[i-1][1]:\n            result.append(ratings[i][0])\n    \n    if len(result) == k:\n        return \"YES\\n\" + \" \".join(map(str, result))\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5 4\\n15 13 15 15 12\\n\") == \"NO\"",
        "indeed": false
    },
    {
        "number": 4345,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n\n    if len(a) != n:\n        return \"NO\"\n\n    increasing = []\n    decreasing = []\n\n    for i in range(n):\n        if i > 0 and a[i] > a[i - 1]:\n            increasing.append(a[i])\n        elif i > 0 and a[i] < a[i - 1]:\n            decreasing.append(a[i])\n\n    if len(increasing) + len(decreasing) != n:\n        return \"NO\"\n\n    result = [0] * n\n    j = 0\n    k = len(decreasing) - 1\n\n    for i in range(n):\n        if a[i] == increasing[j]:\n            result[i] = 0\n            j += 1\n        elif a[i] == decreasing[k]:\n            result[i] = 1\n            k -= 1\n\n    if j != len(increasing) or k != -1:\n        return \"NO\"\n\n    return \"YES\\n\" + \" \".join(map(str, result))\n\ndef",
        "test": "assert solution(\"5\\n1 2 4 0 2\") == \"NO\" ",
        "indeed": false
    },
    {
        "number": 4346,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n    \n    for i in range(t):\n        L, v, l, r = map(int, stdin.split()[1:])\n        lanterns = [x for x in range(v, L+1, v)]\n        train_positions = [x for x in range(l, r+1)]\n        seen_lanterns = [x for x in lanterns if x not in train_positions]\n        result.append(len(seen_lanterns))\n    \n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\" ",
        "indeed": false
    },
    {
        "number": 4347,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 != 0:\n        raise ValueError(\"The input should be an even number\")\n\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            result += 1\n\n    return str(result)",
        "test": "assert solution(\"2\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4348,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = list(stdin.split()[1])\n    for _ in range(k):\n        if 'a' in s:\n            s.remove('a')\n        elif 'b' in s:\n            s.remove('b')\n        elif 'c' in s:\n            s.remove('c')\n        elif 'd' in s:\n            s.remove('d')\n        elif 'e' in s:\n            s.remove('e')\n        elif 'f' in s:\n            s.remove('f')\n        elif 'g' in s:\n            s.remove('g')\n        elif 'h' in s:\n            s.remove('h')\n        elif 'i' in s:\n            s.remove('i')\n        elif 'j' in s:\n            s.remove('j')\n        elif 'k' in s:\n            s.remove('k')\n        elif 'l' in s:\n            s.remove('l')\n        elif 'm' in s:\n            s.remove('m')\n        elif 'n' in s:\n            s.remove('n')\n        elif 'o' in s:\n            s.remove('o')\n        elif 'p' in s:\n            s.remove('p')\n        elif 'q' in s:\n            s.remove('q')\n        elif 'r' in s:\n            s.remove('r')\n        elif 's' in s:\n            s.remove('s')\n        elif 't' in s:\n            s.remove('t')\n        elif 'u' in s:\n            s.remove('u')\n        elif 'v' in s:\n            s.remove('v')\n        elif 'w' in s:\n            s.remove('w')\n        elif 'x' in s:\n            s.remove('x')\n        elif 'y' in s:\n            s.remove('y')\n        elif 'z' in s:\n            s.remove('z')\n    return ''.join(s)\n\nwhile True:\n    try:\n        n, k = map(int, input().split())\n        s = input()\n        result = solution(f\"{n} {k}\\n{s}\")\n        if result:\n            print(result)\n        else:\n            print()\n    except:\n        break\n        ",
        "test": "assert solution(\"15 9\\ncccaabababaccbc\") == \"cccccc\"",
        "indeed": false
    },
    {
        "number": 4349,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    k = list(map(int, stdin.splitlines()[1].split()))\n    special_offers = []\n    for line in stdin.splitlines()[2:]:\n        special_offers.append(tuple(map(int, line.split())))\n\n    def min_days(n, m, k, special_offers):\n        def can_buy(day, type, price):\n            for offer in special_offers:\n                if offer[0] <= day and offer[1] == type:\n                    return True, 1\n            return False, price\n\n        days = [float('inf')] * n\n        for i in range(n):\n            days[i] = 0\n            for j in range(k[i]):\n                days[i] = max(days[i], days[i] + 1)\n                price = 1 if can_buy(days[i], i, 1)[0] else 2\n                days[i] += price\n\n        return min(days)\n\n    return str(min_days(n, m, k, special_offers))",
        "test": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\" ",
        "indeed": false
    },
    {
        "number": 4350,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_star_valid(star_size, x, y, grid):\n        if star_size == 0:\n            return False\n        max_row, max_col = len(grid), len(grid[0])\n        if x < 0 or x >= max_row or y < 0 or y >= max_col:\n            return False\n        for i in range(max_row):\n            for j in range(max_col):\n                if i == x and j == y:\n                    continue\n                if grid[i][j] == '*':\n                    dist = abs(i - x) + abs(j - y)\n                    if dist <= star_size:\n                        return False\n        return True\n\n    def place_stars(grid, n_stars):\n        stars = []\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == '*':\n                    for k in range(1, n_stars + 1):\n                        if is_star_valid(k, i, j, grid):\n                            stars.append((i, j, k))\n        return stars\n\n    grid = [list(row) for row in stdin.split()]\n    n_rows, n_cols = len(grid), len(grid[0])\n    stars = place_stars(grid, n_rows * n_cols)\n\n    if not stars:\n        return \"-1\"\n\n    result = [str(len(stars))]\n    for x, y, s in stars:\n        result.append(f\"{x + 1} {y + 1} {s}\")\n    return \"\\n\".join(result)\n\ndef",
        "test": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"",
        "indeed": false
    },
    {
        "number": 4351,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    str_n = str(n)\n    if str_n == str_n[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"575\") == \"Yes\" ",
        "indeed": true
    },
    {
        "number": 4352,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A > B:\n        return \"Alice\"\n    elif B > A:\n        return \"Bob\"\n    else:\n        return \"Draw\"",
        "test": "assert solution(\"8 6\") == \"Alice\"",
        "indeed": false
    },
    {
        "number": 4353,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(',', ' ')\n    return s",
        "test": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"",
        "indeed": true
    },
    {
        "number": 4354,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    students = [tuple(map(int, line.split())) for line in lines[1:N+1]]\n    checkpoints = [tuple(map(int, line.split())) for line in lines[N+1:]]\n\n    result = []\n    for i in range(N):\n        distances = [abs(students[i][0]-checkpoints[j][0])+abs(students[i][1]-checkpoints[j][1]) for j in range(M)]\n        min_distance = min(distances)\n        min_index = distances.index(min_distance)\n        result.append(min_index+1)\n\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"",
        "indeed": true
    },
    {
        "number": 4355,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = a + a ** 2 + a ** 3\n    return str(result)",
        "test": "assert solution(\"2\") == \"14\"",
        "indeed": true
    },
    {
        "number": 4356,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    image_a = [''.join(line.split()) for line in lines[1:N+1]]\n    template_b = [''.join(line.split()) for line in lines[N+2:]]\n\n    for i in range(N - M + 1):\n        for j in range(N - M + 1):\n            if ''.join([image_a[i+k][j:j+M] for k in range(M)]) == ''.join(template_b):\n                return 'Yes'\n    return 'No'",
        "test": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.#\\n.#') == 'No'",
        "indeed": false
    },
    {
        "number": 4357,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    max_sum = 0\n\n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                for l in range(1, 10):\n                    for m in range(1, 10):\n                        for n in range(1, 10):\n                            if i != A and i != B and i != C and j != A and j != B and j != C and k != A and k != B and k != C and l != A and l != B and l != C and m != A and m != B and m != C and n != A and n != B and n != C:\n                                sum_of_panels = i + j + k + l + m + n\n                                if sum_of_panels > max_sum:\n                                    max_sum = sum_of_panels\n\n    return max_sum",
        "test": "assert solution(\"5 3 4\") == \"16\"",
        "indeed": false
    },
    {
        "number": 4358,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    prices = [int(i) for i in stdin.split('\\n')[1:]]\n    prices.sort(reverse=True)\n    discounted_price = prices[0] / 2\n    normal_price_sum = sum(prices[1:])\n    total_price = discounted_price + normal_price_sum\n    return str(int(total_price))\n\ninput_str = \"\"\"3\n4980\n7980\n6980\"\"\"\n\nprint(solution(input_str)) ",
        "test": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"",
        "indeed": true
    },
    {
        "number": 4359,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    time = 0\n    while not (time % 10 == 0):\n        time += 1\n    delay = max(A, B, C, D, E)\n    time += delay\n    return time",
        "test": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"",
        "indeed": false
    },
    {
        "number": 4360,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *numbers = stdin.split()\n    n = int(n)\n    total_inverse = sum(1/int(number) for number in numbers)\n    result = 1/total_inverse\n    return f\"{result:.5f}\"",
        "test": "assert abs(float(solution(\"3\\n10 30 50\")) - 4.5) < 1e-5",
        "indeed": false
    },
    {
        "number": 4361,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N, K = map(int, stdin.split()[0:2])\n    heights = list(map(int, stdin.split()[2:]))\n\n    # Sort the heights in ascending order\n    heights.sort()\n\n    # Calculate the minimum possible value of h_max - h_min\n    h_max = heights[K - 1]\n    h_min = heights[0]\n    h_max_minus_min = h_max - h_min\n\n    # Return the result\n    return str(h_max_minus_min)",
        "test": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4362,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isupper():\n        return \"A\"\n    else:\n        return \"a\"",
        "test": "assert solution(\"A\") == \"A\"",
        "indeed": true
    },
    {
        "number": 4363,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    count = 0\n\n    for X in range(K + 1):\n        for Y in range(K + 1):\n            Z = S - X - Y\n            if 0 <= Z <= K:\n                count += 1\n\n    return str(count)\n",
        "test": "assert solution(\"2 2\") == \"6\"",
        "indeed": false
    },
    {
        "number": 4364,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to integer\n    S = int(stdin)\n\n    # Check if S is valid in YYMM format\n    year_YYMM = S // 100\n    if year_YYMM > 21:\n        return \"NA\"\n\n    month_YYMM = S % 100\n    if month_YYMM < 1 or month_YYMM > 12:\n        return \"NA\"\n\n    # Check if S is valid in MMYY format\n    month_MMYY = S // 100\n    if month_MMYY < 1 or month_MMYY > 12:\n        return \"NA\"\n\n    year_MMYY = S % 100\n    if year_MMYY > 21:\n        return \"NA\"\n\n    # Check if S is valid in both formats\n    if year_YYMM == year_MMYY and month_YYMM == month_MMYY:\n        return \"AMBIGUOUS\"\n\n    # Determine the format of S\n    if year_YYMM > year_MMYY:\n        return \"YYMM\"\n    else:\n        return \"MMYY\"",
        "test": "assert solution(\"0519\") == \"MMYY\"",
        "indeed": false
    },
    {
        "number": 4365,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    if K % 2 == 0:\n        K -= 1\n    count = 0\n    for i in range(1, K+1, 2):\n        count += K // 2 - (i - 2) // 2\n    return str(count)",
        "test": "assert solution(\"5\") == \"6\"  # Sample Input: \"5\"",
        "indeed": false
    },
    {
        "number": 4366,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    start_time = A + B\n    return str(start_time) if 0 <= start_time <= 23 else str(start_time - 24)",
        "test": "assert solution(\"9 12\") == \"21\"",
        "indeed": true
    },
    {
        "number": 4367,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    if N >= 10:\n        return str(R)\n    else:\n        return str(R + 100 * (10 - N))",
        "test": "assert solution(\"2 2919\") == \"3719\"",
        "indeed": true
    },
    {
        "number": 4368,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    while N > 0:\n        N //= K\n        count += 1\n    return str(count)",
        "test": "assert solution(\"11 2\") == \"4\"  # sample test case 1",
        "indeed": true
    },
    {
        "number": 4369,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # read the input value\n    N = int(stdin)\n    \n    # calculate the number of sheets required\n    sheets = 1 + (N - 1) // 2\n    \n    # return the result\n    return str(sheets)",
        "test": "assert solution(\"5\") == \"3\"",
        "indeed": true
    },
    {
        "number": 4370,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if abs(a - b) <= 1:\n        return \"Yay!\"\n    else:\n        return \":(\"",
        "test": "assert solution(\"1 15\") == \":(\"",
        "indeed": true
    },
    {
        "number": 4371,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to a list of digits\n    digits = list(map(int, stdin))\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through the list of digits\n    for i in range(len(digits) - 2):\n        # Extract three consecutive digits and convert them to an integer\n        num = int(''.join(map(str, digits[i:i+3])))\n        \n        # Calculate the absolute difference between the number and 753\n        diff = abs(num - 753)\n        \n        # Update the minimum difference if necessary\n        min_diff = min(min_diff, diff)\n    \n    return str(min_diff)",
        "test": "assert solution(\"1234567876\") == \"34\"",
        "indeed": true
    },
    {
        "number": 4372,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input().strip())\n    a = list(map(int, input().split()))\n\n    # Sort the swords by the number of remaining swords\n    a.sort()\n\n    # Find the minimum number of people y and the number of swords z\n    y = 1\n    z = a[0]\n\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            continue\n\n        if a[i] - a[i - 1] <= z:\n            y += 1\n        else:\n            break\n\n    return str(y) + \" \" + str(z)",
        "test": "assert solution(\"2\\n2 9\") == \"1 7\"",
        "indeed": false
    },
    {
        "number": 4373,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort(reverse=True)\n    days = 1\n    problems_solved = 0\n\n    for i in range(n):\n        if a[i] >= days:\n            problems_solved += days\n            days += 1\n\n    return str(days - 1)",
        "test": "assert solution(\"3\\n1 1 1\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4374,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *edges = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for i in range(m):\n        graph[edges[i * 2 - 1]].append(edges[i * 2])\n        graph[edges[i * 2]].append(edges[i * 2 - 1])\n\n    def bfs(graph, start):\n        visited = [False] * (n + 1)\n        queue = [start]\n        visited[start] = True\n        distance = [0] * (n + 1)\n        distance[start] = 0\n        while queue:\n            vertex = queue.pop(0)\n            for neighbor in graph[vertex]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    distance[neighbor] = distance[vertex] + 1\n                    queue.append(neighbor)\n        return distance\n\n    def diameter(graph):\n        max_distance = 0\n        for i in range(1, n + 1):\n            distance = bfs(graph, i)\n            max_distance = max(max_distance, max(distance))\n        return max_distance\n\n    if m == n - 1:\n        return str(diameter(graph))\n\n    distance = bfs(graph, 1)\n    max_distance = max(distance)\n    min_diameter = diameter(graph)\n    result = []\n\n    def dfs(graph, start, visited, depth):\n        if depth > min_diameter:\n            return\n        visited[start] = True\n        for neighbor in graph[start]:\n            if not visited[neighbor]:\n                dfs(graph, neighbor, visited, depth + 1)\n\n    for i in range(1, n + 1):\n        if not distance[i] == max_distance:\n            continue\n        visited = [False] * (n + 1)\n        dfs(graph, i, visited, 0)\n        for j in range(1, n + 1):\n            if visited[j]:\n                result.append((i, j))\n\n    min_diameter = min_diameter if min_diameter != n - 1 else n - 1\n    return str(min_diameter) + \"\\n\" + \"\\n\".join(f\"{i} {j}\" for i, j in result)",
        "test": "assert solution(\"2 0\\n\") == \"1\\n1 2\"",
        "indeed": false
    },
    {
        "number": 4375,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    weights = list(map(int, stdin.splitlines()[1].split()))\n    graph = [[] for _ in range(n)]\n    for u, v in map(lambda x: tuple(map(int, x.split())), stdin.splitlines()[2:]):\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    \n    def dfs(node: int, parent: int, visited: set) -> int:\n        if visited:\n            return max(weights[node], *[dfs(child, node, visited - {node} | {child}) for child in graph[node] if child not in visited])\n        else:\n            return weights[node]\n    \n    def is_valid(subset: set) -> bool:\n        for u in subset:\n            for v in subset:\n                if u != v and abs(u - v) <= k:\n                    return False\n        return True\n    \n    subsets = [set(range(n))]\n    while subsets:\n        subset = max(subsets, key=lambda x: sum(weights[i] for i in x))\n        subsets.remove(subset)\n        for node in subset:\n            visited = subset - {node}\n            if dfs(node, -1, visited) > weights[node]:\n                subsets.append(visited)\n            else:\n                return str(sum(weights[i] for i in subset if is_valid({i})))\n    return \"0\" ",
        "test": "assert solution(input) == 4 ",
        "indeed": false
    },
    {
        "number": 4376,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a_list = list(map(int, stdin.split()[2:n+2]))\n    b_list = list(map(int, stdin.split()[n+2:]))\n    dorms = []\n    for i in range(n):\n        dorms.extend([i+1]*a_list[i])\n    output = []\n    for b in b_list:\n        output.append(f\"{dorms.index(b)+1} {b}\")\n    return \"\\n\".join(output)",
        "test": "assert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\\n\" ",
        "indeed": false
    },
    {
        "number": 4377,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4 = list(map(int, stdin.split()))\n    possibilities = []\n    \n    # Check all possible combinations of a, b, and c\n    for a in range(2, x1 + 1):\n        for b in range(2, x2 + 1):\n            for c in range(2, x3 + 1):\n                if a + b + c == x4 and a + b == x1 and a + c == x2 and b + c == x3:\n                    possibilities.append((a, b, c))\n    \n    # Print the first solution found\n    print(possibilities[0])",
        "test": "assert solution('40 40 40 60') in ['20 20 20', '20 20 20']",
        "indeed": false
    },
    {
        "number": 4378,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, initial_garland = stdin.split('\\n')\n    n = int(n)\n    garland = list(initial_garland)\n    recolored_lamp = 0\n    \n    # Iterate through all the lamps in the garland\n    for i in range(n-1):\n        # If the adjacent lamps have the same color, recolor one of them\n        if garland[i] == garland[i+1]:\n            garland[i] = 'R' if garland[i] == 'G' else 'G'\n            recolored_lamp += 1\n    \n    # Check if the garland is diverse\n    diverse = True\n    for i in range(n-1):\n        if garland[i] == garland[i+1]:\n            diverse = False\n            break\n    \n    # If the garland is not diverse, recolor the lamps until it is diverse\n    if not diverse:\n        recolored_lamp += 1\n        while not diverse:\n            # Choose a random lamp to recolor\n            lamp_to_recolor = random.randint(0, n-1)\n            # Check the adjacent lamps to the chosen lamp\n            for i in range(max(0, lamp_to_recolor-1), min(lamp_to_recolor+2, n)):\n                # If the adjacent lamps have the same color, recolor the chosen lamp\n                if garland[i] == garland[lamp_to_recolor]:\n                    garland[lamp_to_recolor] = 'R' if garland[lamp_to_recolor] == 'G' else 'G'\n                    recolored_lamp += 1\n                    break\n            # Check if the garland is diverse\n            diverse = True\n            for i in range(n-1):\n                if garland[i] == garland[i+1]:\n                    diverse = False\n                    break\n                \n    return f\"{recolored_lamp}\\n{''.join(garland)}\"",
        "test": "assert solution(\"8\\nBBBGBRRR\") == \"2\\nBRBGBRGR\"",
        "indeed": false
    },
    {
        "number": 4379,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    array = list(map(int, stdin.split('\\n')[1].split()))\n\n    max_length = 1\n    max_indices = [1]\n\n    for i in range(1, len(array)):\n        if array[i] == array[i - 1] + 1:\n            max_length += 1\n            max_indices.append(i + 1)\n        else:\n            if max_length > 1:\n                return str(max_length) + '\\n' + ' '.join(map(str, max_indices)) + '\\n'\n            max_length = 1\n            max_indices = [i + 1]\n\n    return str(max_length) + '\\n' + ' '.join(map(str, max_indices)) + '\\n'",
        "test": "assert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\"",
        "indeed": false
    },
    {
        "number": 4380,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for C in range(1, 4):\n        if (A * B * C) % 2 != 0:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"3 1\") == \"Yes\"",
        "indeed": true
    },
    {
        "number": 4381,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    return str(X + Y // 2)",
        "test": "assert solution(\"81 58\") == \"110\"",
        "indeed": true
    },
    {
        "number": 4382,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    num_of_passwords = (n*n) * n  # 3-digit password, each digit between 1 and N\n    return str(num_of_passwords)",
        "test": "assert solution('2') == '8'",
        "indeed": true
    },
    {
        "number": 4383,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X % 3 == 0 or X % 5 == 0 or X % 7 == 0:\n        return \"YES\"\n    return \"NO\"",
        "test": "assert solution('5') == 'YES'",
        "indeed": false
    },
    {
        "number": 4384,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if 1 <= n <= 999:\n        return \"ABC\"\n    elif 1000 <= n <= 1998:\n        return \"ABD\"\n    else:\n        return \"Invalid Input\"",
        "test": "assert solution(\"1\") == \"ABC\"",
        "indeed": true
    },
    {
        "number": 4385,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n\n    distances = [b - a, c - b, d - c, e - d]\n\n    for distance in distances:\n        if distance > k:\n            return \":( There exists a pair of antennas that cannot communicate directly.\"\n\n    return \"Yay! No pair of antennas that cannot communicate directly.\" ",
        "test": "assert solution(\"0\\n1\\n2\\n3\\n4\\n5\\n\") == \":( ",
        "indeed": false
    },
    {
        "number": 4386,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, s = stdin.split('\\n')\n    a = int(a)\n    if a >= 3200:\n        return s\n    else:\n        return \"red\"",
        "test": "assert solution(\"3200\\npink\") == \"pink\"",
        "indeed": true
    },
    {
        "number": 4387,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin.strip())\n\n    if rating < 1200:\n        return \"ABC\"\n    elif rating < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"",
        "test": "assert solution('1199') == 'ABC'",
        "indeed": true
    },
    {
        "number": 4388,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = \"\"\n\n    # Check if the number is greater than or equal to 111 and less than or equal to 999\n    if n >= 111 and n <= 999:\n        # Convert the number to a string\n        n_str = str(n)\n        # Iterate through each digit in the number\n        for digit in n_str:\n            # If the digit is 1, replace it with 9\n            if digit == \"1\":\n                result += \"9\"\n            # If the digit is 9, replace it with 1\n            elif digit == \"9\":\n                result += \"1\"\n            # If the digit is not 1 or 9, append it to the result as is\n            else:\n                result += digit\n\n        # Return the result\n        return result\n    else:\n        # If the number is not within the given range, return an error message\n        return \"Error: n must be between 111 and 999.\"",
        "test": "assert solution('119') == '991'",
        "indeed": true
    },
    {
        "number": 4389,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    t = int(stdin[0])\n    stdin.pop(0)\n\n    result = []\n\n    for b in stdin:\n        substrings = []\n        for i in range(len(b) - 1):\n            for j in range(i + 2, len(b) + 1):\n                substrings.append(b[i:j])\n        a = ''.join(substrings)\n        result.append(a)\n\n    return '\\n'.join(result)",
        "test": "assert solution(\"ac\") == \"ac\"",
        "indeed": false
    },
    {
        "number": 4390,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    output_list = []\n\n    for i in range(1, len(input_list)):\n        a, b = map(int, input_list[i].split())\n        moves = 0\n\n        while a % b != 0:\n            a += 1\n            moves += 1\n\n        output_list.append(moves)\n\n    return '\\n'.join(map(str, output_list))",
        "test": "assert solution(\"5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"",
        "indeed": true
    },
    {
        "number": 4391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    temperatures = list(map(int, stdin.split()[2:]))\n    \n    def average_temperature(start, end):\n        return sum(temperatures[start:end+1])/(end-start+1)\n    \n    def max_heat_intensity():\n        max_intensity = 0\n        for i in range(n-k+1):\n            max_intensity = max(max_intensity, average_temperature(i, i+k-1))\n        return max_intensity\n    \n    return str(max_heat_intensity())\n\ndef",
        "test": "assert solution(\"4 3\\n3 4 1 2\") == \"2.666666666666667\"",
        "indeed": false
    },
    {
        "number": 4392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.strip().split('\\n')\n    cases = [case.split() for case in cases]\n\n    output = []\n\n    for case in cases[1:]:\n        n, m = int(case[0]), int(case[1])\n        a = list(map(int, case[2:2+n]))\n        p = list(map(int, case[2+n:]))\n\n        if n == 1:\n            output.append(\"YES\")\n            continue\n\n        for i in range(n-1):\n            if a[i] > a[i+1]:\n                for j in range(m):\n                    if p[j] == i+1:\n                        a[i], a[i+1] = a[i+1], a[i]\n                        break\n                else:\n                    output.append(\"NO\")\n                    break\n        else:\n            output.append(\"YES\")\n\n    return \"\\n\".join(output)\n",
        "test": "assert solution(\"3\\n3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\") == \"YES\\nNO\\nYES\\nNO\\nYES\\n\" ",
        "indeed": false
    },
    {
        "number": 4393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split()\n    n = int(n)\n\n    decrypted = \"\"\n    for char in t:\n        count = t.count(char)\n        decrypted += char * count\n\n    return decrypted[:n]\n\ninput_string = input()\nresult = solution(input_string)\nprint(result) ",
        "test": "assert solution(\"10\\noopppssss\") == \"oops\"",
        "indeed": false
    },
    {
        "number": 4394,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    edges = []\n    for i in range(m):\n        u, v, w = map(int, stdin.split()[3*i+2:3*i+5])\n        edges.append((u-1, v-1, w))\n    \n    def find(parent, u):\n        if parent[u] != u:\n            parent[u] = find(parent, parent[u])\n        return parent[u]\n\n    def union(parent, rank, u, v):\n        u = find(parent, u)\n        v = find(parent, v)\n        if u == v:\n            return False\n        if rank[u] > rank[v]:\n            parent[v] = u\n        elif rank[u] < rank[v]:\n            parent[u] = v\n        else:\n            parent[v] = u\n            rank[u] += 1\n        return True\n\n    def kruskal(edges, n):\n        edges.sort(key=lambda x: x[2])\n        parent = [i for i in range(n)]\n        rank = [0] * n\n        mst_cost = 0\n        mst_edges = []\n        for edge in edges:\n            if union(parent, rank, edge[0], edge[1]):\n                mst_edges.append(edge)\n                mst_cost += edge[2]\n            if len(mst_edges) == n - 1:\n                break\n        return mst_cost, mst_edges\n\n    initial_cost, _ = kruskal(edges, n)\n    operations = 0\n    while True:\n        min_cost, _ = kruskal(edges, n)\n        if min_cost == initial_cost:\n            break\n        operations += 1\n        for i in range(m):\n            u, v, w = edges[i]\n            if w == 1:\n                continue\n            edges[i] = (u, v, w-1)\n    return str(operations)\n\ninput_string = \"\"\nfor i in range(int(input().split()[0])):\n    input_string += input() + \"\\n\"\n\nprint(solution(input_string)) ",
        "test": "assert solution(",
        "indeed": false
    },
    {
        "number": 4395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    garland = stdin.readline().strip()\n\n    recolors = 0\n    new_garland = \"\"\n\n    for i in range(n):\n        if i > 0 and garland[i] == garland[i-1]:\n            if new_garland[-1] != garland[i]:\n                recolors += 1\n            new_garland += garland[i]\n        else:\n            recolors += 1\n            new_garland += garland[i]\n\n    return str(recolors) + \"\\n\" + new_garland",
        "test": "assert solution(\"7\\nRGBGRBB\") == \"3\\nRGBRGBR\" ",
        "indeed": false
    },
    {
        "number": 4396,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    total_yen = 0\n    \n    for i in range(1, N+1):\n        x, u = lines[i].split()\n        if u == 'JPY':\n            total_yen += int(x)\n        else:\n            total_yen += 380000.0 * float(x)\n    \n    return str(total_yen)",
        "test": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"",
        "indeed": false
    },
    {
        "number": 4397,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    j = N - i + 1\n    return str(j)",
        "test": "assert solution(\"4 2\") == \"3\"",
        "indeed": true
    },
    {
        "number": 4398,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    S, T = stdin.split()[1:]\n    \n    result = \"\"\n    for i in range(N):\n        result += S[i]\n        result += T[i]\n        \n    return result",
        "test": "assert solution(\"2\\nip cc\") == \"icpc\"",
        "indeed": true
    },
    {
        "number": 4399,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    if (s[0] == 'A' and s[1] == 'B') or (s[1] == 'A' and s[2] == 'B') or (s[0] == 'B' and s[2] == 'A'):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"ABA\") == \"Yes\"",
        "indeed": true
    },
    {
        "number": 4400,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    rainy_days = 0\n    max_rainy_days = 0\n    for day in stdin:\n        if day == 'R':\n            rainy_days += 1\n            if rainy_days > max_rainy_days:\n                max_rainy_days = rainy_days\n        else:\n            rainy_days = 0\n    return str(max_rainy_days)",
        "test": "assert solution(\"SSS\") == \"0\"",
        "indeed": true
    },
    {
        "number": 4401,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = x, y, z\n    \n    # swap contents of A and B\n    a, b = b, a\n    \n    # swap contents of A and C\n    a, c = c, a\n    \n    return f\"{a} {b} {c}\" ",
        "test": "assert solution(\"1 2 3\") == \"3 1 2\"",
        "indeed": true
    },
    {
        "number": 4402,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    age, cost = map(int, stdin.split())\n    if age <= 5:\n        return \"0\"\n    elif age <= 12:\n        return str(cost // 2)\n    else:\n        return str(cost)",
        "test": "assert solution(\"30 100\") == \"100\"",
        "indeed": true
    },
    {
        "number": 4403,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    takahashi_mind = 0\n    for symbol in stdin:\n        if symbol == '+':\n            takahashi_mind += 1\n        else:\n            takahashi_mind -= 1\n    return str(takahashi_mind)",
        "test": "assert solution(\"+-++\") == \"2\"",
        "indeed": true
    },
    {
        "number": 4404,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    date_components = stdin.split('/')\n    year, month, day = int(date_components[0]), int(date_components[1]), int(date_components[2])\n\n    if year == 2019 and month == 4 and day <= 30:\n        return 'Heisei'\n    else:\n        return 'TBD'",
        "test": "assert solution(\"2019/04/30\") == \"Heisei\"",
        "indeed": false
    },
    {
        "number": 4405,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    topics = list(map(int, input().split()))\n\n    unique_topics = list(set(topics))\n    contests = []\n\n    for topic in unique_topics:\n        problems_with_topic = [i for i, x in enumerate(topics) if x == topic]\n        while len(problems_with_topic) > 0:\n            contest = []\n            contest.append(problems_with_topic.pop(0))\n            for i in range(1, len(problems_with_topic)):\n                if len(contest) == len(contest) * 2:\n                    break\n                contest.append(problems_with_topic.pop(i))\n            if len(contest) > 0:\n                contests.append(contest)\n\n    return str(sum([len(contest) for contest in contests]))\n\nprint(solution(stdin)) ",
        "test": "assert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"",
        "indeed": false
    },
    {
        "number": 4406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    messages = list(map(int, stdin.split()))\n    unique_messages = list(set(messages))\n    conversations = []\n    \n    for message in messages:\n        if conversations and conversations[-1] == message:\n            continue\n        elif len(conversations) < k:\n            conversations.insert(0, message)\n        else:\n            conversations.pop()\n            conversations.insert(0, message)\n    \n    return str(len(conversations)) + \"\\n\" + \" \".join(map(str, conversations))\n\n\ninput_str = input()\nprint(solution(input_str)) ",
        "test": "assert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\\n\" ",
        "indeed": false
    },
    {
        "number": 4407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[0:2])\n    coins = list(map(int, stdin.split()[2:]))\n    queries = list(map(int, stdin.split()[2+n:]))\n\n    def find_coins(target: int) -> int:\n        coins_used = 0\n        for coin in coins:\n            if target % coin == 0:\n                coins_used += target // coin\n                break\n        return coins_used\n\n    answers = []\n    for b in queries:\n        answers.append(find_coins(b))\n\n    return \" \".join(map(str, answers))\n\ndef",
        "test": "assert solution(",
        "indeed": false
    },
    {
        "number": 4408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def count_joy(cards, favorite_num):\n        return sum(1 for card in cards if card == favorite_num)\n\n    def max_joy(players_favorite_nums, cards, h):\n        max_joy_level = 0\n        for i in range(len(cards)):\n            joy_level = sum(h[j] * count_joy(cards[:j] + cards[j+1:], num) for j, num in enumerate(players_favorite_nums))\n            max_joy_level = max(max_joy_level, joy_level)\n        return max_joy_level\n\n    n, k = map(int, stdin.readline().strip().split())\n    cards = list(map(int, stdin.readline().strip().split()))\n    players_favorite_nums = list(map(int, stdin.readline().strip().split()))\n    h = list(map(int, stdin.readline().strip().split()))\n\n    return str(max_joy(players_favorite_nums, cards, h))",
        "test": "assert solution(\"3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\\n\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n = int(n)\n    a = list(map(int, a.split()))\n\n    if all(x == a[0] for x in a):\n        return \"0\"\n\n    min_ops = n\n    ops = []\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                continue\n\n            if abs(a[i] - a[j]) > 10**18:\n                continue\n\n            if a[i] > a[j]:\n                a[i] = a[i] - abs(a[i] - a[j])\n                ops.append((2, i, j))\n            else:\n                a[i] = a[i] + abs(a[i] - a[j])\n                ops.append((1, i, j))\n\n            min_ops = min(min_ops, len(ops))\n\n            if all(x == a[0] for x in a):\n                break\n\n        if all(x == a[0] for x in a):\n            break\n\n    return str(min_ops) + '\\n' + '\\n'.join(str(i) for i in ops)\n\ninput_data = \"5 2 4 6 6 6\"\noutput_data = solution(input_data)\nprint(output_data) ",
        "test": "assert solution(\"3\\n2 8 10\") == \"2\\n2 2 1\\n2 3 2\\n\"",
        "indeed": false
    },
    {
        "number": 4410,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(s: str, k: int) -> bool:\n        n = len(s)\n        for i in range(n):\n            if s[i] == '1':\n                for j in range(i - k, i + k + 1):\n                    if j >= 0 and j < n and s[j] == '1' and i != j:\n                        return False\n        return True\n\n    cases = stdin.split(\"\\n\")\n    result = []\n    for case in range(1, len(cases), 2):\n        n, k = map(int, cases[case - 1].split())\n        s = cases[case]\n        if not is_valid(s, k):\n            result.append(0)\n        else:\n            result.append(s.count('0'))\n\n    return \"\\n\".join(map(str, result))\n",
        "test": "assert solution(\"2\\n6 1\\n100010\\n6 2\\n000000\\n5 1\\n10101\\n3 1\\n001\\n2 2\\n00\\n1 1\\n0\") == \"1\\n2\\n0\\n1\\n1\"",
        "indeed": false
    },
    {
        "number": 4411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    segments = []\n    \n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    \n    segments.sort(key=lambda x: x[1] - x[0])\n    \n    count = [0] * n\n    for i in range(n):\n        for j in range(i, n):\n            if segments[j][0] > segments[i][1]:\n                break\n            count[j] += 1\n    \n    ans = []\n    for i in range(n):\n        if count[i] > k:\n            ans.append(i)\n    \n    return len(ans), ' '.join(map(str, ans))",
        "test": "assert solution(input_str) == \"3\\n1 4 5\"",
        "indeed": false
    },
    {
        "number": 4412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_pretty(a, b, c):\n        return (a % b == 0 and a % c == 0) or (b % a == 0 and b % c == 0) or (c % a == 0 and c % b == 0)\n\n    def max_prettiness(a, b, c):\n        return max(a + b, a + c, b + c)\n\n    queries = stdin.split('\\n')\n    output = []\n\n    for i in range(0, len(queries), 2):\n        n = int(queries[i])\n        a = list(map(int, queries[i + 1].split()))\n\n        best_prettiness = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if is_pretty(a[i], a[j], a[k]):\n                        best_prettiness = max(best_prettiness, max_prettiness(a[i], a[j], a[k]))\n\n        output.append(str(best_prettiness))\n\n    return '\\n'.join(output)\n\n\nq = int(input())\nfor i in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solution(f\"{n}\\n{' '.join(map(str, a))}\")) ",
        "test": "assert solution(\"3\\n4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\") == \"30\\n31\\n10\"",
        "indeed": false
    },
    {
        "number": 4413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def minimum_teams(skills):\n        skills.sort()\n        min_teams = 1\n        min_diff = abs(skills[0] - skills[1])\n        for i in range(1, len(skills) - 1):\n            diff = abs(skills[i] - skills[i + 1])\n            if diff <= 1:\n                min_teams += 1\n            else:\n                min_diff = min(min_diff, diff)\n        return min_teams, min_diff\n\n    q = int(stdin.splitlines()[0])\n    result = []\n    for i in range(q):\n        n = int(stdin.splitlines()[i * 2 + 1])\n        skills = list(map(int, stdin.splitlines()[i * 2 + 2].split()))\n        min_teams, min_diff = minimum_teams(skills)\n        result.append(min_teams)\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"4\\n4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"",
        "indeed": false
    },
    {
        "number": 4414,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    answers = []\n\n    for i in range(1, q+1):\n        a, b, n, S = map(int, stdin.split('\\n')[i].split())\n        total = n * a + b\n\n        if total < S:\n            answers.append(\"NO\")\n        elif total == S:\n            answers.append(\"YES\")\n        else:\n            for x in range(0, a+1):\n                y = (S - n*x) // n\n                if x * n + y * n == S and y <= b:\n                    answers.append(\"YES\")\n                    break\n            else:\n                answers.append(\"NO\")\n\n    return \"\\n\".join(answers)\n",
        "test": "assert solution(\"4\\n1 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18\") == \"YES\\nNO\\nNO\\nYES\" ",
        "indeed": false
    },
    {
        "number": 4415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    # Check if there is a contradiction in the input\n    if any(a[i] > a[i+1] for i in range(n-1)) or any(a[i] < a[i+1] for i in range(n-1)):\n        return \"NO\"\n    \n    increasing = []\n    decreasing = []\n    i = 0\n    d = n-1\n    \n    while i < d:\n        if a[i] < a[i+1]:\n            increasing.append(a[i])\n            i += 1\n        else:\n            decreasing.append(a[d])\n            d -= 1\n    \n    increasing.append(a[i])\n    decreasing.append(a[d])\n    \n    return \"YES\\n\" + str(len(increasing)) + \"\\n\" + \" \".join(map(str, increasing)) + \"\\n\" + str(len(decreasing)) + \"\\n\" + \" \".join(map(str, decreasing)) + \"\\n\"",
        "test": "assert solution(\"5\\n4 3 1 5 3\") == \"YES\\n1\\n4\\n5 4 3 1\"",
        "indeed": false
    },
    {
        "number": 4416,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    books = []\n    \n    for line in stdin.split(\"\\n\")[2:]:\n        t, a, b = map(int, line.split())\n        books.append((t, a, b))\n    \n    def is_valid(book_set):\n        a_books, b_books = 0, 0\n        total_time = 0\n        \n        for t, a, b in book_set:\n            a_books += a\n            b_books += b\n            total_time += t\n        \n        return a_books >= k and b_books >= k\n    \n    def dfs(book_set, book_set_size, current_book_index, time_spent, a_books, b_books):\n        if not (a_books >= k and b_books >= k) or len(book_set) != book_set_size:\n            return\n        \n        global min_total_time\n        min_total_time = min(min_total_time, time_spent)\n        \n        for i in range(current_book_index, n):\n            if is_valid(book_set + [(i+1, books[i][1], books[i][2])]):\n                dfs(book_set + [(i+1, books[i][1], books[i][2])], book_set_size+1, i+1, time_spent+books[i][0], a_books+books[i][1], b_books+books[i][2])\n                \n    min_total_time = float('inf')\n    for i in range(n):\n        if books[i][1] >= k or books[i][2] >= k:\n            dfs([(i+1, books[i][1], books[i][2])], 1, i+1, books[i][0], books[i][1], books[i][2])\n    \n    return str(min_total_time) if min_total_time != float('inf') else \"-1\"",
        "test": "assert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\") == \"8\"",
        "indeed": false
    },
    {
        "number": 4417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    result = []\n    for i in range(q):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        a_max = max(a)\n        b_min = max(a_max - k, 1)\n        b_max = min(a_max + k, 100000000)\n        if b_max - b_min > k:\n            result.append(-1)\n        else:\n            result.append(b_max)\n    return \" \".join(map(str, result))\n\nstdin = open(\"input.txt\", \"r\")\nprint(solution(stdin)) ",
        "test": "assert solution(\"4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"",
        "indeed": false
    },
    {
        "number": 4418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    good_arrays = [4, 8, 15, 16, 23, 42]\n    good_arrays_set = set(good_arrays)\n    good_arrays_count = {good_array: 0 for good_array in good_arrays}\n    \n    for element in a:\n        if element in good_arrays_set:\n            good_arrays_count[element] += 1\n    \n    good_arrays_count = sorted(good_arrays_count.items(), key=lambda x: x[1], reverse=True)\n    \n    min_removal = 0\n    for good_array, count in good_arrays_count:\n        if count == 0:\n            continue\n        if n % 6 == 0 and count % 6 == 0:\n            min_removal += count\n        else:\n            min_removal += count - count % 6\n            n -= count - count % 6\n        n //= 6\n        if n % 6 != 0:\n            min_removal += 6 - n % 6\n            break\n    \n    return str(min_removal)\n\ninput_string = \"\"\nwith open('input.txt', 'r') as input_file:\n    input_string = input_file.read()\n    \noutput = solution(input_string)\nprint(output) ",
        "test": "assert solution(\"12\\n4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4419,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    result = []\n    \n    for i in range(t):\n        a, b = map(int, stdin.split('\\n')[i+1].split())\n        count = 0\n        \n        while a != b:\n            if b > a:\n                k = min(10, b - a)\n                a += k\n                count += k\n            else:\n                k = min(10, a - b)\n                a -= k\n                count += k\n                \n        result.append(count)\n    \n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"1\\n10 10\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n_test_cases = int(stdin.readline().strip())\n    result = []\n    for i in range(n_test_cases):\n        x, y, n = map(int, stdin.readline().strip().split())\n        k = x * (n // x) + y\n        if k > n:\n            k -= x\n        result.append(str(k))\n    return '\\n'.join(result)",
        "test": "assert solution(\"7\\n7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\\n\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\\n\"",
        "indeed": false
    },
    {
        "number": 4421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    d = list(map(int, stdin.split()[2:]))\n    \n    pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (d[i] + d[j]) % k == 0:\n                pairs += 1\n                \n    return str(pairs)",
        "test": "assert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\\n\"",
        "indeed": false
    },
    {
        "number": 4422,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    line1, line2 = stdin.split('\\n')\n    n, k = map(int, line1.split())\n    s = line2\n\n    if 1 <= k <= n and len(s) == n and s.isalpha() and s.replace('A', '').replace('B', '').replace('C', '') == '':\n        new_s = list(s)\n        new_s[k-1] = new_s[k-1].lower()\n        return ''.join(new_s)\n    else:\n        return 'Invalid Input'",
        "test": "assert solution(\"3 1\\nABC\") == \"aBC\"",
        "indeed": true
    },
    {
        "number": 4423,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    restaurants = []\n\n    for i in range(1, n + 1):\n        city, score = lines[i].split()\n        restaurants.append((city, int(score), i))\n\n    restaurants.sort(key=lambda x: (x[0], -x[1]))\n\n    result = []\n    for restaurant in restaurants:\n        result.append(str(restaurant[2]))\n\n    return '\\n'.join(result)",
        "test": "assert solution(\"6\\nkhabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"",
        "indeed": true
    },
    {
        "number": 4424,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    coins, target = map(int, stdin.split())\n    if coins * 500 >= target:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('2 900') == 'Yes'",
        "indeed": true
    },
    {
        "number": 4425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N <= 1:\n        return \"1.0\"\n\n    def p_win(n: int) -> float:\n        if n <= 0:\n            return 0.0\n        if n >= K:\n            return 1.0\n        return (1 / 3) * (p_win(n - 1) + p_win(n // 2) + p_win(n - 1))\n\n    return str(p_win(N))",
        "test": "assert solution(\"5 100\") == \"0.196607142857143\"",
        "indeed": false
    },
    {
        "number": 4426,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    today = stdin.upper()\n    days = [\"SU\", \"MO\", \"TU\", \"WE\", \"TH\", \"FR\", \"SA\"]\n    if today in days:\n        index = days.index(today)\n        days_to_next_sunday = 6 - index\n        if days_to_next_sunday == 0:\n            return \"Today is Sunday, so there are no more Sundays in the future.\"\n        elif days_to_next_sunday == 1:\n            return \"Tomorrow is Sunday.\"\n        else:\n            return f\"The next Sunday is in {days_to_next_sunday} days.\"\n    else:\n        return \"Invalid input. Please enter a valid day of the week.\" ",
        "test": "assert solution('MON') == 1",
        "indeed": false
    },
    {
        "number": 4427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x2000 = map(int, stdin.split())\n    \n    # Initialize the first value\n    x = x2000\n    \n    # Iterate over the years 2001 to 2010\n    for i in range(1, 11):\n        # Calculate the next value using the formula\n        x = r * x - D\n        \n        # Print the result\n        print(int(x))",
        "test": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\\n\" ",
        "indeed": false
    },
    {
        "number": 4428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n = int(stdin.split('\\n')[0])\n    d = list(map(int, stdin.split('\\n')[1].split()))\n\n    # Initialize the sums\n    sum1, sum2, sum3 = 0, 0, 0\n\n    # Loop through the array\n    for i in range(n):\n        # Calculate the sum for each part\n        if i < n // 3:\n            sum1 += d[i]\n        elif n // 3 <= i < 2 * n // 3:\n            sum2 += d[i]\n        else:\n            sum3 += d[i]\n\n    # Check if sum1 and sum3 are equal and return the maximum\n    if sum1 == sum3:\n        return str(sum1)\n    else:\n        return str(0)",
        "test": "assert solution(\"5\\n1 3 2 1 4\") == \"4\"",
        "indeed": false
    },
    {
        "number": 4429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split(\"\\n\")[0])\n    results = []\n\n    for i in range(1, test_cases + 1):\n        x, y, z = list(map(int, stdin.split(\"\\n\")[i].split()))\n\n        if x == max(x, y, z) and y == max(x, y, z) and z == max(x, y, z):\n            a, b, c = sorted([x, y, z])\n            results.append(\"YES\\n\" + str(a) + \" \" + str(b) + \" \" + str(c))\n        else:\n            results.append(\"NO\")\n\n    return \"\\n\".join(results)\n",
        "test": "assert solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"",
        "indeed": false
    },
    {
        "number": 4430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, input().split())\n    objects = list(map(int, input().split()))\n\n    max_packed = 0\n    for i in range(n):\n        packed = 0\n        empty_boxes = m\n        for j in range(i, n):\n            if empty_boxes == 0:\n                break\n            if objects[j] <= k:\n                packed += 1\n                empty_boxes -= 1\n        max_packed = max(max_packed, packed)\n\n    return str(max_packed)\n\ninput_str = sys.stdin.read()\nprint(solution(input_str)) ",
        "test": "assert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4431,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    available_letters = stdin.readline().split()\n    \n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if all(char in available_letters for char in substring):\n                count += 1\n                \n    return str(count)",
        "test": "assert solution('10 3\\nsadfaasdda\\nf a d') == '21'",
        "indeed": false
    },
    {
        "number": 4432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_alternating(subseq: List[int]) -> bool:\n        if len(subseq) <= 1:\n            return True\n        direction = subseq[1] - subseq[0]\n        for i in range(2, len(subseq)):\n            if (subseq[i] - subseq[i - 1]) * direction <= 0:\n                return False\n        return True\n\n    def max_alternating_subseq(a: List[int]) -> int:\n        max_sum = 0\n        for i in range(len(a)):\n            for j in range(i + 1, len(a) + 1):\n                subseq = a[i:j]\n                if is_alternating(subseq) and sum(subseq) > max_sum:\n                    max_sum = sum(subseq)\n        return max_sum\n\n    t = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        result.append(max_alternating_subseq(a))\n\n    return \"\\n\".join(map(str, result))\n\n\ndef",
        "test": "assert solution('4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000') == '2\\n-1\\n6\\n-2999999997\\n'",
        "indeed": false
    },
    {
        "number": 4433,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    adj_list = [[] for _ in range(n)]\n    edges = set()\n\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        adj_list[v - 1].append(u - 1)\n        adj_list[u - 1].append(v - 1)\n        edges.add((v - 1, u - 1))\n\n    def dfs(node: int, visited: set, parent: int) -> int:\n        max_degree = 0\n        for neighbor in adj_list[node]:\n            if neighbor not in visited:\n                visited.add(node)\n                max_degree = max(max_degree, dfs(neighbor, visited, node))\n                visited.remove(node)\n        return max_degree + 1\n\n    max_degree = 0\n    spanning_tree = set()\n    visited = set()\n\n    for i in range(n):\n        if i not in visited:\n            degree = dfs(i, visited, -1)\n            if degree > max_degree:\n                max_degree = degree\n                spanning_tree = set()\n            if degree >= max_degree:\n                spanning_tree.add(i)\n\n    result = []\n    for node in spanning_tree:\n        for neighbor in adj_list[node]:\n            if neighbor not in spanning_tree:\n                result.append(f\"{node + 1} {neighbor + 1}\")\n\n    return \"\\n\".join(result)\n\n\ndef",
        "test": "assert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\\n2 4\\n3 4\"",
        "indeed": false
    },
    {
        "number": 4434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    t = int(stdin.split('\\n')[0])\n    for i in range(1, t+1):\n        n = int(stdin.split('\\n')[i])\n        min_moves = (n*n) - 1\n        result.append(min_moves)\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"3\\n1\\n5\\n499993\") == \"0\\n40\\n41664916690999888\" ",
        "indeed": false
    },
    {
        "number": 4435,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    d = [-1] * n\n    \n    for i in range(n):\n        if a[i] % 2 == 1:\n            target_parity = 0\n        else:\n            target_parity = 1\n        \n        left = i - a[i]\n        right = i + a[i]\n        if 1 <= left < n and a[left] % 2 == target_parity:\n            d[i] = 1\n        if 1 <= right < n and a[right] % 2 == target_parity:\n            if d[i] == -1:\n                d[i] = 1\n            else:\n                d[i] += 1\n            \n    return ' '.join(map(str, d))",
        "test": "assert solution(\"1\\n1 \\n\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4436,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    output = []\n    cases = int(stdin.strip().split(\"\\n\")[0])\n    for i in range(1, cases + 1):\n        n = int(stdin.strip().split(\"\\n\")[i])\n        if n % 2 == 0 or n < 8:\n            output.append(\"NO\")\n        else:\n            for a in range(2, n // 2 + 1):\n                for b in range(a, n // a + 1):\n                    c = n // (a * b)\n                    if c > 1 and c < b:\n                        output.append(\"YES\")\n                        output.append(f\"{a} {b} {c}\")\n                        break\n                else:\n                    continue\n                break\n            else:\n                output.append(\"NO\")\n    return \"\\n\".join(output)",
        "test": "assert solution(\"1\\n4\") == \"NO\"",
        "indeed": false
    },
    {
        "number": 4437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    ops = 0\n    for i in range(n):\n        if s[i] == 'a':\n            ops += n - i - 1\n            for j in range(i + 1, n):\n                s = s[:j] + 'b' + s[j + 1:]\n        else:\n            ops += i + 1\n            for j in range(i + 1, n):\n                s = s[:j] + 'a' + s[j + 1:]\n\n    return str(ops) + '\\n' + s\n\ninput_data = int(input())\ninput_string = input()\n\noutput = solution(input_string)\nprint(output) ",
        "test": "assert solution(\"6\\nababab\") == \"0\\nababab\"",
        "indeed": false
    },
    {
        "number": 4438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def distance(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n    def find_min_distance(points, level):\n        min_distance = float('inf')\n        for i, p in enumerate(points):\n            if max(p) == level:\n                distance_to_p = sum(distance(p, q) for q in points[:i] + points[i+1:])\n                min_distance = min(min_distance, distance_to_p)\n        return min_distance\n\n    n = int(stdin.split('\\n')[0])\n    points = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    points.sort(key=lambda p: max(p))\n\n    total_distance = 0\n    for level in range(1, max(max(p) for p in points) + 1):\n        min_distance = find_min_distance(points, level)\n        total_distance += min_distance\n\n    return str(total_distance)",
        "test": "assert solution('5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3') == '9'",
        "indeed": false
    },
    {
        "number": 4439,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    a, b = map(int, stdin.split())\n\n    # find the correct choice\n    for i in range(1, 4):\n        if i != a and i != b:\n            return str(i)",
        "test": "assert solution(\"1\\n2\") == \"3\" ",
        "indeed": true
    },
    {
        "number": 4440,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    max_volume = 0\n    \n    for a in range(1, L//2 + 1):\n        for b in range(a, L//2 + 1):\n            c = L - a - b\n            volume = a * b * c\n            if volume > max_volume:\n                max_volume = volume\n    \n    return format(max_volume, '.12f')",
        "test": "assert solution('3') == '1.000000000000'",
        "indeed": false
    },
    {
        "number": 4441,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    if len(lines) == 1:\n        return \"Hello World\"\n    elif len(lines) == 3:\n        A = int(lines[1])\n        B = int(lines[2])\n        return str(A + B)\n    else:\n        return \"Invalid input\"",
        "test": "assert solution(\"1\\n\") == \"Hello World\"",
        "indeed": true
    },
    {
        "number": 4442,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    str1 = str(a) * b\n    str2 = str(b) * a\n    return min(str1, str2)",
        "test": "assert solution(\"4 3\") == \"3333\"",
        "indeed": true
    },
    {
        "number": 4443,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    if stdin != 'z':\n        next_char = chr(ord(stdin) + 1)\n        return next_char\n    else:\n        return \"Invalid input\"",
        "test": "assert solution('c') == 'd'",
        "indeed": true
    },
    {
        "number": 4444,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return T + S",
        "test": "assert solution(\"oder atc\") == \"atcoder\" ",
        "indeed": true
    },
    {
        "number": 4445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_sum(a):\n        a.sort(reverse=True)\n        even_sum = sum(a[::2])\n        odd_sum = sum(a[1::2])\n        return min(even_sum, odd_sum)\n\n    def find_min_sum_game(a):\n        n = len(a)\n        if n == 0:\n            return 0\n        if n == 1:\n            return a[0]\n\n        even_sum = odd_sum = 0\n        prev_parity = None\n        for i, x in enumerate(a):\n            if i % 2 == 0:\n                if prev_parity == \"odd\":\n                    even_sum += x\n                else:\n                    odd_sum += x\n                prev_parity = \"even\"\n            else:\n                if prev_parity == \"even\":\n                    even_sum += x\n                else:\n                    odd_sum += x\n                prev_parity = \"odd\"\n\n        return min(even_sum, odd_sum)\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    return str(find_min_sum_game(a))",
        "test": "assert solution(\"6\\n5 1 2 4 6 3\") == \"0\\n\"",
        "indeed": false
    },
    {
        "number": 4446,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split()[:4])\n    h = list(map(int, stdin.split()[4:]))\n\n    points = 0\n    for i in range(n):\n        if h[i] <= a:\n            points += 1\n        elif h[i] <= a + k * (b - a):\n            points += 1\n            h[i] -= a\n        else:\n            points += (h[i] - a) // b\n            h[i] = a + ((h[i] - a) % b)\n\n    return str(points)",
        "test": "assert solution(\"1 1 100 99\\n100\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, input().split()))\n    \n    c = [0] * m\n    for x in a:\n        c[x % m] += 1\n    \n    min_moves = max(c) - min(c)\n    if min_moves > 0:\n        min_moves = m - min_moves\n    \n    print(min_moves)\n    \n    a = sorted(a, key=lambda x: x % m)\n    mid = n // 2\n    a[mid:mid + min_moves] = [x + 1 for x in a[mid:mid + min_moves]]\n    \n    for i in range(mid + min_moves, n):\n        if a[i] % m == (m - 1):\n            a[i] += 1\n        elif a[i] % m == 0:\n            a[i] -= 1\n    \n    print(\" \".join(map(str, a)))\n    \n",
        "test": "assert solution('4 2\\n0 1 2 3\\n') == '0\\n0 1 2 3\\n' ",
        "indeed": false
    },
    {
        "number": 4448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n\n    def calculate_price(day: int, i: int) -> int:\n        for j in range(m):\n            if d[j] == day and t[j] == i:\n                return 1\n        return 2\n\n    d = []\n    t = []\n    for _ in range(m):\n        day, i = map(int, stdin.split())\n        d.append(day)\n        t.append(i)\n\n    max_day = 0\n    for day in range(1, 1001):\n        current_price = sum(calculate_price(day, i) * k[i] for i in range(n))\n        if current_price >= sum(k):\n            max_day = day\n            break\n\n    return str(max_day)",
        "test": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\"",
        "indeed": false
    },
    {
        "number": 4449,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def check_area(rectangles: List[Tuple[int, int]]) -> bool:\n        area = rectangles[0][0] * rectangles[0][1]\n        for rectangle in rectangles[1:]:\n            if rectangle[0] * rectangle[1] != area:\n                return False\n        return True\n\n    q = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        sticks = list(map(int, stdin.readline().strip().split()))\n\n        if len(sticks) != 4 * n:\n            raise ValueError(\"Invalid input\")\n\n        sticks.sort(reverse=True)\n        rectangles = []\n\n        for i in range(n):\n            rectangles.append((sticks.pop(), sticks.pop()))\n\n        if check_area(rectangles):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n",
        "test": "assert solution(\"5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\\nYES\\nNO\\nYES\\nYES\"",
        "indeed": false
    },
    {
        "number": 4450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    adjacency_matrix = [[0] * n for _ in range(n)]\n\n    for _ in range(m):\n        x, y, w = map(int, stdin.readline().split())\n        adjacency_matrix[x - 1][y - 1] = adjacency_matrix[y - 1][x - 1] = w\n\n    # Floyd-Warshall algorithm to calculate all shortest paths\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                adjacency_matrix[i][j] = min(adjacency_matrix[i][j], adjacency_matrix[i][k] + adjacency_matrix[k][j])\n\n    # Calculate the k-th smallest shortest path\n    shortest_paths = sorted(adjacency_matrix[i][j] for i in range(n) for j in range(n) if i < j)\n    kth_shortest_path = shortest_paths[k - 1]\n\n    return str(kth_shortest_path)",
        "test": "assert solution(",
        "indeed": false
    },
    {
        "number": 4451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_div_team_div(students: List[int]) -> int:\n        students.sort()\n        n = len(students)\n        min_div = float('inf')\n        for i in range(n - 2):\n            a = students[i]\n            b = students[i + 1]\n            c = students[i + 2]\n            min_div = min(min_div, max(a, max(b, c)) - min(a, min(b, c)))\n        return min_div\n\n    def find_team_assignment(students: List[int]) -> List[int]:\n        students.sort()\n        n = len(students)\n        teams = []\n        i = 0\n        while i < n:\n            team = [students[i], students[i + 1], students[i + 2]]\n            teams.append(team)\n            i += 3\n        return teams\n\n    students = [int(x) for x in stdin.split()[1:]]\n    min_div = find_min_div_team_div(students)\n    teams = find_team_assignment(students)\n    return f\"{min_div} {len(teams)}\\n{' '.join(str(team_id) for team_id in range(1, len(teams) + 1) for team in teams if team_id == teams.index(team) + 1)}\" ",
        "test": "assert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"",
        "indeed": false
    },
    {
        "number": 4452,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_round(num: int) -> bool:\n        num_str = str(num)\n        return all(digit == '0' for digit in num_str[1:])\n\n    def sum_of_round_numbers(n: int) -> list[int]:\n        result = []\n        for i in range(1, n + 1):\n            if is_round(i):\n                result.append(i)\n                n -= i\n                if n == 0:\n                    return result\n        return []\n\n    def print_result(n: int) -> None:\n        summands = sum_of_round_numbers(n)\n        print(len(summands), *summands)\n\n    test_cases = int(stdin.readline())\n    for _ in range(test_cases):\n        n = int(stdin.readline())\n        print_result(n)\n\ninput_str = \"\"\nwith open('input.txt', 'r') as file:\n    input_str = file.read()\n\nsolution(input_str) ",
        "test": "assert solution(\"5\\n5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"",
        "indeed": false
    },
    {
        "number": 4453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_cycle(p):\n        visited = set()\n        start = 0\n        while start not in visited:\n            visited.add(start)\n            start = p[start] - 1\n        return start\n\n    def find_first_day(p, start):\n        current = start\n        for i in range(n):\n            if p[current] - 1 == start:\n                return i\n            current = p[current] - 1\n        return -1\n\n    output = []\n    for q in range(int(stdin.splitlines()[0])):\n        n = int(stdin.splitlines()[q * 2 + 1])\n        p = list(map(int, stdin.splitlines()[q * 2 + 2].split()))\n        start = find_cycle(p)\n        first_day = find_first_day(p, start)\n        result = [first_day] * n\n        output.append(\" \".join(map(str, result)))\n    return \"\\n\".join(output) ",
        "test": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1 \\n3 3 3 \\n2 3 3 2 1 3 \\n1 \\n2 2 2 2 \\n4 4 4 1 4\\n\" ",
        "indeed": false
    },
    {
        "number": 4454,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split(\"\\n\")[0])\n    result = []\n\n    for i in range(1, q + 1):\n        n = int(stdin.split(\"\\n\")[i * 2 - 1])\n        prices = list(map(int, stdin.split(\"\\n\")[i * 2].split()))\n\n        min_price = min(prices)\n        new_prices = [min_price] * n\n\n        total_sales = sum(prices)\n        total_new_sales = sum(new_prices)\n\n        while total_new_sales < total_sales:\n            min_price += 1\n            new_prices = [min_price] * n\n            total_new_sales = sum(new_prices)\n\n        result.append(min_price)\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"3\\n5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1\") == \"3\\n2\\n1\"",
        "indeed": true
    },
    {
        "number": 4455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    skills = list(map(int, stdin.readline().split()))\n    quarrels = []\n    for _ in range(k):\n        x, y = map(int, stdin.readline().split())\n        quarrels.append((x-1, y-1))\n\n    mentors = [0] * n\n\n    for i in range(n):\n        for j in range(n):\n            if skills[i] > skills[j] and (i, j) not in quarrels and (j, i) not in quarrels:\n                mentors[i] += 1\n\n    return \" \".join(map(str, mentors))",
        "test": "assert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\" ",
        "indeed": false
    },
    {
        "number": 4456,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:2+n]))\n    q = list(map(int, stdin.split()[2+n:2+2*n]))\n    \n    s = \"\"\n    for i in range(n):\n        for j in range(k):\n            s += chr(97 + j)\n            if j == k - 1:\n                break\n    if n == 1:\n        return \"YES\\n\" + s\n    \n    for i in range(1, n):\n        if s[p[i] - 1] <= s[p[i - 1] - 1]:\n            return \"NO\"\n        if s[q[i] - 1] <= s[q[i - 1] - 1]:\n            return \"NO\"\n    \n    return \"YES\\n\" + s[p.index(1)] + s[q.index(1)] + s[p.index(2)] + s[q.index(2)]",
        "test": "assert solution(\"5 2\\n1 2 3 4 5\\n5 4 3 2 1\") == \"NO\"",
        "indeed": false
    },
    {
        "number": 4457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def shoot(can, shots):\n        return shots + (a_list[can - 1] * shots + 1)\n\n    n, a_list = stdin.split()\n    n = int(n)\n    a_list = [int(x) for x in a_list.split()]\n\n    min_shots = float('inf')\n    min_order = None\n\n    for order in itertools.permutations(range(1, n + 1)):\n        shots = 0\n        for can in order:\n            shots = shoot(can, shots)\n        if shots < min_shots:\n            min_shots = shots\n            min_order = order\n\n    return str(min_shots) + '\\n' + ' '.join(str(x) for x in min_order) + '\\n'",
        "test": "assert solution(\"4\\n10 10 10 10\") == \"64\\n2 1 4 3\\n\"",
        "indeed": false
    },
    {
        "number": 4458,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, permutation = stdin.split()\n    N = int(N)\n    permutation = [int(x) for x in permutation.split()]\n\n    count = 0\n    for i in range(1, N+1):\n        if all(permutation[i-1] <= permutation[j-1] for j in range(1, i)):\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"10\\n2 9 8 7 6 5 4 3 1 10\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4459,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    if n == 0:\n        return \"0\"\n\n    count_dict = {}\n    for num in a:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    min_count = min(count_dict.values())\n    max_count = max(count_dict.values())\n\n    if min_count == max_count:\n        return \"0\"\n\n    min_elements = 0\n    for count in count_dict.values():\n        min_elements += count - min_count\n\n    return str(min_elements)",
        "test": "assert solution(\"6\\n1 2 2 3 3 4\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4460,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    \n    if x_1 == 0:\n        return \"1\"\n    elif x_2 == 0:\n        return \"2\"\n    elif x_3 == 0:\n        return \"3\"\n    elif x_4 == 0:\n        return \"4\"\n    else:\n        return \"5\"",
        "test": "assert solution(\"0 2 3 4 5\") == \"1\"",
        "indeed": true
    },
    {
        "number": 4461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    max_area = H * W\n    min_area = min(H, W)**2\n    return str(max_area - min_area)",
        "test": "assert solution(\"5 5\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4462,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    # check if permutation is possible\n    for i in range(N-1):\n        if a[i] * a[i+1] % 4 != 0:\n            return \"No\"\n    return \"Yes\"",
        "test": "assert solution(\"3\\n1 10 20\") == \"No\"",
        "indeed": false
    },
    {
        "number": 4463,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    \n    for i in range(len(s)):\n        s_prime = s[:i] + s[i+1:] + s[i]\n        if s_prime < t:\n            return \"Yes\"\n    \n    return \"No\"",
        "test": "assert solution('xy\\naxy\\n') == 'No'",
        "indeed": false
    },
    {
        "number": 4464,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n\n    # Find the smallest multiple of A greater than C\n    target_multiple = (C // A + 1) * A\n\n    # Check if the target multiple is congruent to C modulo B\n    if target_multiple % B == C:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"9 10 3\") == \"NO\"",
        "indeed": false
    },
    {
        "number": 4465,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    area = A * B\n    road_width = min(A, B)\n    road_length = max(A, B)\n    area_of_road = road_width * road_length\n    total_area = area - area_of_road\n    return str(total_area)",
        "test": "assert solution(\"3 3\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4466,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = list(map(int, stdin.split()))\n    num_seats = (X - 2*Z) // Y\n    return str(num_seats)",
        "test": "assert solution(\"13 3 1\") == \"3\"",
        "indeed": false
    },
    {
        "number": 4467,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n', 1)[0])\n    points = stdin.split('\\n')[1:]\n    red_points = [tuple(map(int, points[i].split())) for i in range(N)]\n    blue_points = [tuple(map(int, points[N + i].split())) for i in range(N)]\n    red_points.sort()\n    blue_points.sort()\n\n    pairs = 0\n    i = 0\n    j = 0\n\n    while i < N and j < N:\n        if red_points[i][0] < blue_points[j][0] and red_points[i][1] < blue_points[j][1]:\n            pairs += 1\n            i += 1\n            j += 1\n        elif red_points[i][0] > blue_points[j][0]:\n            i += 1\n        else:\n            j += 1\n\n    return str(pairs)",
        "test": "assert solution(\"4\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\") == \"4\"",
        "indeed": false
    },
    {
        "number": 4468,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    num_people, time = map(int, input_list[0].split())\n    push_times = list(map(int, input_list[1].split()))\n\n    max_time = 0\n    current_time = 0\n\n    for i in range(num_people):\n        current_time = push_times[i]\n        if current_time > max_time:\n            max_time = current_time + time\n        else:\n            max_time = max(max_time, current_time + time)\n\n    return str(max_time)",
        "test": "assert solution(\"2 4\\n0 3\") == \"7\"",
        "indeed": false
    },
    {
        "number": 4469,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    shelf = []\n    answers = []\n    for query in stdin.split('\\n')[1:]:\n        if query[0] == 'L':\n            index = int(query[2:])\n            shelf.insert(0, index)\n        elif query[0] == 'R':\n            index = int(query[2:])\n            shelf.append(index)\n        else:\n            index = int(query[2:])\n            if shelf.index(index) == 0:\n                answers.append(0)\n            elif shelf.index(index) == len(shelf) - 1:\n                answers.append(len(shelf))\n            else:\n                if shelf.index(index) < shelf.index(shelf[0]):\n                    answers.append(shelf.index(shelf[0]) - shelf.index(index) + 1)\n                else:\n                    answers.append(len(shelf) - shelf.index(index) - 1)\n    return '\\n'.join(map(str, answers)) ",
        "test": "assert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\\n\"",
        "indeed": false
    },
    {
        "number": 4470,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    queries = int(stdin.split('\\n')[0])\n    result = []\n\n    for i in range(queries):\n        n = int(stdin.split('\\n')[i+1])\n        count = 0\n\n        while n != 1:\n            if n % 2 == 0:\n                n //= 2\n                count += 1\n            elif n % 3 == 0:\n                n = n * 2 // 3\n                count += 2\n            elif n % 5 == 0:\n                n //= 5\n                count += 3\n            else:\n                result.append(-1)\n                break\n        else:\n            result.append(count)\n\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"1\\n1\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        field = [0] * n\n        for x in a:\n            if x > 0:\n                field[a.index(x)] = x\n        while any(field):\n            i = field.index(max(field))\n            field[i] += 2\n            field = [x - 1 if x > 0 else 0 for x in field]\n        if all(x == 0 for x in field):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"",
        "test": "assert solution(\"4\\n3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\\nNO\\nYES\\nYES\"",
        "indeed": false
    },
    {
        "number": 4472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_equal(a: str, b: str) -> bool:\n        return all(a[i] == b[i] for i in range(len(a)))\n\n    def preprocess_move(a: list, i: int, c: str) -> None:\n        a[i] = c\n\n    def can_make_equal(a: list, b: list, i: int) -> bool:\n        return all(a[j] == b[j] for j in range(i))\n\n    def can_make_equal_with_preprocess(a: list, b: list, i: int, c: str) -> bool:\n        return can_make_equal(a, b, i) and all(a[j] == b[j] or a[j] == c or b[j] == c for j in range(len(a)))\n\n    n = int(stdin.split('\\n')[0])\n    a = list(stdin.split('\\n')[1])\n    b = list(stdin.split('\\n')[2])\n\n    min_preprocess_moves = float('inf')\n\n    for i in range(n):\n        for c in set('abcdefghijklmnopqrstuvwxyz'):\n            new_a = a.copy()\n            new_b = b.copy()\n            preprocess_move(new_a, i, c)\n            min_preprocess_moves = min(min_preprocess_moves, 0 if is_equal(new_a, new_b) else can_make_equal_with_preprocess(new_a, new_b, i, c))\n\n    return min_preprocess_moves",
        "test": "assert solution(\"5\\nzcabd\\ndbazc\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    answers = []\n\n    for _ in range(t):\n        a, b, k = map(int, stdin.readline().split())\n        x = 0\n        for i in range(k):\n            if i % 2 == 0:\n                x += a\n            else:\n                x -= b\n        answers.append(x)\n\n    return \"\\n\".join(map(str, answers))",
        "test": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"",
        "indeed": false
    },
    {
        "number": 4474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        if n == 1:\n            print(1)\n        elif n == 2:\n            print(3)\n        else:\n            k = 1\n            while (3**k) < n:\n                k += 1\n            print(3**(k-1) + n - 3**(k-2))\n    return \"\" ",
        "test": "assert solution(\"8\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089\\n\" ",
        "indeed": false
    },
    {
        "number": 4475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b, x, y, n = map(int, stdin.readline().split())\n        if a >= x and b >= y:\n            product = a * b\n            if n >= max(x - a, y - b):\n                product = min(a * x, b * y)\n            else:\n                decrease_a = min(n, a - x)\n                a -= decrease_a\n                decrease_b = min(n - decrease_a, b - y)\n                b -= decrease_b\n                product = a * b\n            print(product)\n        else:\n            print(\"Error: Invalid input\")\n    return \"\"",
        "test": "assert solution(\"1\\n12 8 8 7 2\") == \"77\"",
        "indeed": false
    },
    {
        "number": 4476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n    for i in range(t):\n        a, b = map(int, stdin.split()[1:])\n        moves = 0\n        while a != b:\n            if a > b:\n                if a % 2 == 0:\n                    a -= 1\n                else:\n                    a += 1\n            else:\n                if b % 2 == 0:\n                    b -= 1\n                else:\n                    b += 1\n            moves += 1\n        result.append(moves)\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"5\\n2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"1\\n0\\n2\\n2\\n1\\n\"",
        "indeed": false
    },
    {
        "number": 4477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n    \n    for x in stdin.split()[1:]:\n        x = int(x)\n        digits = len(str(x))\n        calls = 0\n        \n        for i in range(1, 10):\n            calls += digits * i\n        \n        result.append(str(calls))\n    \n    return \"\\n\".join(result)",
        "test": "assert solution(\"4\\n22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"",
        "indeed": false
    },
    {
        "number": 4478,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def sum_without_element(sequence, index):\n        return sum(sequence[:index]) + sum(sequence[index + 1:])\n\n    lines = stdin.split(\"\\n\")\n    k = int(lines[0])\n    sequences = []\n    for i in range(k):\n        n = int(lines[2 * i + 1])\n        sequence = list(map(int, lines[2 * i + 2].split()))\n        sequences.append((sequence, n))\n\n    for i, (seq1, n1) in enumerate(sequences):\n        for j, (seq2, n2) in enumerate(sequences):\n            if i != j:\n                for x in range(n1):\n                    for y in range(n2):\n                        if sum_without_element(seq1, x) == sum_without_element(seq2, y):\n                            return \"YES\\n{}\\n{}\\n{}\\n{}\".format(i + 1, x + 1, j + 1, y + 1)\n    return \"NO\"",
        "test": "assert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\") == \"NO\"",
        "indeed": false
    },
    {
        "number": 4479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, K = list(map(int, stdin.split()))\n    A.sort()\n\n    for i in range(K):\n        A[i] = -A[i]\n\n    return str(sum(A))",
        "test": "assert solution(\"3 -1 0 2 3\") == \"6\"",
        "indeed": false
    },
    {
        "number": 4480,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    n = len(A)\n    total_sum = sum(A)\n    if total_sum % 3 != 0:\n        return \"false\"\n\n    target_sum = total_sum // 3\n    dp = [False] * (1 + target_sum)\n    dp[0] = True\n\n    for num in A:\n        for i in range(target_sum, -1, -1):\n            if dp[i]:\n                dp[i + num] = True\n\n    return \"true\" if dp[target_sum] else \"false\"\n",
        "test": "assert solution([0,2,1,-6,6,7,9,-1,2,0,1]) == False",
        "indeed": false
    },
    {
        "number": 4481,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    votes = stdin.split(\"\\n\")\n    n = int(votes[0])\n    counts = {}\n\n    for i in range(1, n+1):\n        vote = votes[i]\n        if vote in counts:\n            counts[vote] += 1\n        else:\n            counts[vote] = 1\n\n    max_count = max(counts.values())\n    max_votes = [vote for vote, count in counts.items() if count == max_count]\n    max_votes.sort()\n\n    return \"\\n\".join(max_votes)",
        "test": "assert solution(\"7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\") == \"beet\\nvet\" ",
        "indeed": true
    },
    {
        "number": 4482,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    n, *numbers = map(int, stdin.split())\n\n    # Sort the numbers in ascending order\n    numbers.sort()\n\n    # Calculate the total cost\n    total_cost = sum((numbers[-1] - x) ** 2 for x in numbers)\n\n    # Return the result\n    return str(total_cost)",
        "test": "assert solution(\"3\\n1 1 1\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4483,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    cake_price = A\n    donut_price = B\n    total_price = cake_price + donut_price\n    cake_count = X // cake_price\n    donut_count = X // donut_price\n\n    total_donuts = min(cake_count, donut_count)\n    total_price = total_donuts * donut_price\n    amount_left = X - total_price\n\n    return str(amount_left)",
        "test": "assert solution(\"200\\n50\\n100\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4484,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    MOD = 10**9 + 7\n\n    # Case when no animals are present\n    if N == 0 and M == 0:\n        return \"0\"\n\n    # Case when only dogs or only monkeys are present\n    if N == 0 or M == 0:\n        return str((N + M) % MOD)\n\n    # Calculate the number of ways to arrange N dogs and M monkeys\n    result = 0\n    result += (N * (N - 1) * M) // 2\n    result += (M * (M - 1) * N) // 2\n    result += N * M\n\n    # Calculate the number of ways to arrange N dogs and M monkeys with no two adjacent animals\n    result -= (N * (N - 1) * M) // 2\n    result -= (M * (M - 1) * N) // 2\n\n    return str(result % MOD)",
        "test": "assert solution(\"3 3\") == \"16\"",
        "indeed": false
    },
    {
        "number": 4485,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    services = [tuple(map(int, line.split())) for line in lines[1:-1]]\n    island_n = (n, n)\n\n    def dfs(visited: set, current: tuple) -> bool:\n        if current == island_n:\n            return True\n        visited.add(current)\n        for service in services:\n            if service not in visited and current[0] == service[0] and current[1] != service[1]:\n                if dfs(visited, (service[1], service[1])):\n                    return True\n        return False\n\n    if dfs(set(), (1, 1)):\n        return \"POSSIBLE\"\n    else:\n        return \"IMPOSSIBLE\"",
        "test": "assert solution(\"5 3\\n1 2\\n2 3\\n3 4\\n4 5\") == \"IMPOSSIBLE\"",
        "indeed": false
    },
    {
        "number": 4486,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = \"\"\n    for i in range(1, len(s), 2):\n        result += s[i]\n    return result",
        "test": "assert solution(\"python\") == \"ytn\"",
        "indeed": false
    },
    {
        "number": 4487,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if A[-1] == B[0] and B[-1] == C[0]:\n        return \"YES\"\n    return \"NO\"",
        "test": "assert solution(\"rng gorilla apple\") == \"YES\"",
        "indeed": true
    },
    {
        "number": 4488,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"",
        "test": "assert solution('36\\n24\\n') == 'GREATER'",
        "indeed": true
    },
    {
        "number": 4489,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def count_cards(cards, card_type):\n        count = 0\n        for card in cards:\n            if card.startswith(card_type):\n                count += 1\n        return count\n\n    blue_cards, red_cards = stdin.split(\":\")\n    blue_cards = blue_cards.split()\n    red_cards = red_cards.split()\n\n    blue_count = count_cards(blue_cards, \"apple\")\n    red_count = count_cards(red_cards, \"grape\")\n\n    balance = blue_count - red_count\n    return str(balance)",
        "test": "assert solution(\"0\\n\\n0\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4490,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    bonds = {\"A\": \"T\", \"C\": \"G\", \"G\": \"C\", \"T\": \"A\"}\n    return bonds[stdin]",
        "test": "assert solution('A') == 'T'",
        "indeed": true
    },
    {
        "number": 4491,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    grid = [list(map(int, line.split())) for line in lines[1:]]\n\n    def dfs(i: int, j: int, visited: set) -> int:\n        if (i, j) in visited:\n            return 0\n        visited.add((i, j))\n        if i == 2 and j == n:\n            return grid[i][j]\n        if i < 2:\n            return dfs(i + 1, j, visited) + grid[i][j]\n        if j < n:\n            return dfs(i, j + 1, visited) + grid[i][j]\n        return 0\n\n    max_candies = 0\n    for i in range(1, 3):\n        for j in range(1, n + 1):\n            max_candies = max(max_candies, dfs(i, j, set()))\n\n    return str(max_candies)",
        "test": "assert solution(\"1\\n1\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4492,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, x = map(int, stdin.split()[0:2])\n    candies = list(map(int, stdin.split()[2:]))\n\n    operations = 0\n    for i in range(N - 1):\n        if candies[i] + candies[i + 1] > x:\n            operations += candies[i] - x + candies[i + 1]\n            candies[i] = x - candies[i + 1]\n\n    return operations",
        "test": "assert solution(\"5 4\\n2 3 4 5 6\") == \"3\"",
        "indeed": false
    },
    {
        "number": 4493,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    matrix = [list(map(int, row.split())) for row in stdin.strip().split(\"\\n\")]\n\n    # Generate all possible sets of integers\n    for a1 in range(11):\n        for a2 in range(11):\n            for a3 in range(11):\n                for b1 in range(11):\n                    for b2 in range(11):\n                        for b3 in range(11):\n                            # Check if the numbers in the matrix satisfy the conditions\n                            if (\n                                matrix[0][0] == a1 + b1\n                                and matrix[0][1] == a1 + b2\n                                and matrix[0][2] == a1 + b3\n                                and matrix[1][0] == a2 + b1\n                                and matrix[1][1] == a2 + b2\n                                and matrix[1][2] == a2 + b3\n                                and matrix[2][0] == a3 + b1\n                                and matrix[2][1] == a3 + b2\n                                and matrix[2][2] == a3 + b3\n                            ):\n                                return \"Yes\"\n\n    return \"No\"",
        "test": "assert solution(\"2 1 2\\n1 0 1\\n1 1 2\") == \"No\"",
        "indeed": true
    },
    {
        "number": 4494,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    last_week = stdin\n    this_week = None\n\n    if last_week == 'ABC':\n        this_week = 'ARC'\n    elif last_week == 'ARC':\n        this_week = 'ABC'\n\n    return this_week",
        "test": "assert solution(\"ABC\") == \"ARC\"",
        "indeed": true
    },
    {
        "number": 4495,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    \n    count = 0\n    for num in range(a, b+1):\n        if num % x == 0:\n            count += 1\n    \n    return str(count)",
        "test": "assert solution(\"4 8 2\") == \"3\"",
        "indeed": false
    },
    {
        "number": 4496,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    day = int(stdin)\n    if day == 25:\n        return \"Christmas\"\n    elif day == 24:\n        return \"Christmas Eve\"\n    elif day == 23:\n        return \"Christmas Eve Eve\"\n    elif day == 22:\n        return \"Christmas Eve Eve Eve\"",
        "test": "assert solution(\"25\") == \"Christmas\"",
        "indeed": true
    },
    {
        "number": 4497,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    max_count = 0\n    result = 0\n    for i in range(1, N + 1):\n        count = 0\n        num = i\n        while num % 2 == 0:\n            count += 1\n            num //= 2\n        if count > max_count:\n            max_count = count\n            result = i\n    return str(result)",
        "test": "assert solution(\"7\") == \"4\"",
        "indeed": false
    },
    {
        "number": 4498,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if abs(a - c) <= d:\n        return \"Yes\"\n    if abs(a - b) <= d and abs(b - c) <= d:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"4 7 9 3\") == \"Yes\"",
        "indeed": true
    },
    {
        "number": 4499,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    initials = [word[0].upper() for word in words]\n    return \"\".join(initials)",
        "test": "assert solution(\"atcoder beginner contest\") == \"ABC\"",
        "indeed": true
    },
    {
        "number": 4500,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A + B >= C:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"50 100 120\") == \"Yes\"",
        "indeed": true
    },
    {
        "number": 4501,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split()[0:2])\n    x = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    for i in range(N):\n        if x[i] == A:\n            count += 1\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            if x[i] + x[j] == A:\n                count += 1\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if x[i] + x[j] + x[k] == A:\n                    count += 1\n    \n    return str(count)",
        "test": "assert solution(\"2 10\\n4 6\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4502,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sequence = stdin.split()[1:]\n    b = []\n\n    for i in range(n):\n        b.append(sequence[i])\n        b.reverse()\n\n    return \" \".join(b)",
        "test": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"",
        "indeed": true
    },
    {
        "number": 4503,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    health, moves_count = map(int, stdin.split()[:2])\n    moves = list(map(int, stdin.split()[2:]))\n\n    moves.sort(reverse=True)\n    used_moves = set()\n\n    for move in moves:\n        health -= move\n        used_moves.add(move)\n\n        if health <= 0:\n            return \"Yes\"\n\n        if len(used_moves) == moves_count:\n            break\n\n    return \"No\"",
        "test": "assert solution(\"10 2\\n3 4\") == \"No\"",
        "indeed": true
    },
    {
        "number": 4504,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    even_string = stdin\n    length = len(even_string)\n    while length > 0:\n        if length % 2 == 0 and even_string[-1] == even_string[-2]:\n            return str(length)\n        length -= 1\n        even_string = even_string[:-1]",
        "test": "assert solution(\"abababababa\") == \"6\"",
        "indeed": false
    },
    {
        "number": 4505,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    if sorted(stdin) == sorted('abc'):\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution('abc') == 'Yes'",
        "indeed": true
    },
    {
        "number": 4506,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n\n    # Calculate f(l, r)\n    f = [0] * (n + 1)\n    for i in range(n):\n        for j in range(i, n + 1):\n            f[j] += a[i] * b[i]\n\n    # Calculate prefix sums\n    f_prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        f_prefix_sum[i] = f_prefix_sum[i - 1] + f[i]\n\n    # Calculate minimum value\n    min_value = 0\n    for i in range(1, n + 1):\n        min_value += f_prefix_sum[i] - f_prefix_sum[i - 1]\n\n    # Return modulo\n    return str(min_value % 998244353)",
        "test": "assert solution(\"1\\n1000000\\n1000000\") == \"757402647\"",
        "indeed": false
    },
    {
        "number": 4507,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    shovel_costs = list(map(int, stdin.readline().split()))\n    special_offers = []\n\n    for _ in range(m):\n        offer_x, offer_y = map(int, stdin.readline().split())\n        special_offers.append((offer_x, offer_y))\n\n    shovel_costs.sort()\n    special_offers.sort(key=lambda x: x[0], reverse=True)\n\n    min_cost = float('inf')\n    for offer in special_offers:\n        if offer[1] == 0:\n            continue\n\n        offer_x, offer_y = offer\n        sorted_shovels = [i for i in range(len(shovel_costs)) if shovel_costs[i] <= offer_x]\n\n        if len(sorted_shovels) < k:\n            continue\n\n        sorted_shovels = sorted_shovels[:k]\n        cheapest_shovels = sorted_shovels[:offer_y]\n        remaining_shovels = sorted_shovels[offer_y:]\n\n        total_cost = sum(shovel_costs[i] for i in remaining_shovels)\n        total_cost += sum(shovel_costs[i] for i in range(len(shovel_costs)) if i not in remaining_shovels)\n        total_cost -= offer_y * shovel_costs[cheapest_shovels[-1]]\n\n        min_cost = min(min_cost, total_cost)\n\n    return str(min_cost)\n\n\ninput_str = \"\"\nwith open('input.txt', 'r') as file:\n    input_str = file.read()\n\noutput = solution(input_str)\nwith open('output.txt', 'w') as file:\n    file.write(output) ",
        "test": "assert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == \"17\"",
        "indeed": false
    },
    {
        "number": 4508,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    edges = stdin.split('\\n')[1:]\n    graph = [[0] * n for _ in range(n)]\n    for edge in edges:\n        u, v = map(int, edge.split())\n        graph[u-1][v-1] = graph[v-1][u-1] = 1\n\n    def dfs(u: int, visited: set, parents: dict) -> None:\n        if u in visited:\n            return\n        visited.add(u)\n        for v in range(n):\n            if graph[u][v] == 1 and v not in visited:\n                parents[v] = u\n                dfs(v, visited, parents)\n\n    visited = set()\n    parents = {}\n    dfs(0, visited, parents)\n\n    min_edges = 0\n    for v in range(1, n):\n        if v not in parents:\n            continue\n        path = [v]\n        u = parents[v]\n        while u != 0:\n            path.append(u)\n            u = parents[u]\n        if len(path) - 1 > 2:\n            min_edges += len(path) - 1 - 2\n\n    return str(min_edges)",
        "test": "assert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4509,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def next_number(n: int, k: int) -> int:\n        result = 0\n        while k > 0:\n            result += n + result // n\n            k -= 1\n        return result\n\n    test_cases = int(stdin.strip().split('\\n')[0])\n    result = []\n\n    for i in range(1, test_cases + 1):\n        n, k = map(int, stdin.strip().split('\\n')[i].split())\n        result.append(str(next_number(n, k - 1)))\n\n    return '\\n'.join(result)",
        "test": "assert solution(\"6\\n3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\") == \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\\n\"",
        "indeed": false
    },
    {
        "number": 4510,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    messages = list(map(int, stdin.split()[1].split()))\n    \n    conversations = {}\n    result = []\n    \n    for i in range(n):\n        message_id = messages[i]\n        if message_id not in conversations:\n            conversations[message_id] = 1\n            if len(result) == k:\n                result.pop()\n            result.insert(0, message_id)\n        else:\n            conversations[message_id] += 1\n            result.remove(message_id)\n            result.insert(0, message_id)\n            \n    return str(len(result)) + \"\\n\" + \" \".join(map(str, result))\n",
        "test": "assert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\" ",
        "indeed": false
    },
    {
        "number": 4511,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    max_damage = 0\n\n    for i in range(1, n + 1):\n        k = int(lines[i])\n        cards = []\n        for j in range(k):\n            card_cost, card_damage = map(int, lines[i + j + 1].split())\n            cards.append((card_cost, card_damage))\n        cards.sort(key=lambda x: x[0])\n\n        total_cost = 0\n        current_damage = 0\n        for card in cards:\n            card_cost, card_damage = card\n            if total_cost + card_cost <= 3:\n                total_cost += card_cost\n                current_damage += card_damage\n            else:\n                break\n\n        if i % 10 == 0:\n            current_damage *= 2\n\n        max_damage = max(max_damage, current_damage)\n\n    return str(max_damage)",
        "test": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n\") == \"263\"",
        "indeed": false
    },
    {
        "number": 4512,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    s, q = stdin.split('\\n')\n    s = list(s)\n    queries = stdin.split('\\n')[2:]\n    for query in queries:\n        query = query.split()\n        if query[0] == '1':\n            s[int(query[1])-1] = query[2]\n        elif query[0] == '2':\n            l, r = int(query[1])-1, int(query[2])-1\n            sub_s = set(s[l:r+1])\n            print(len(sub_s))",
        "test": "assert solution(\"dfcbbcfeeedbaea\\n15\\n1 6 e\\n1 4 b\\n2 6 14\\n1 7 b\\n1 12 c\\n2 6 8\\n2 1 6\\n1 7 c\\n1 2 f\\n1 10 a\\n2 7 9\\n1 10 a\\n1 14 b\\n1 1 f\\n2 1 11\") == \"5\\n2\\n5\\n2\\n6\\n\" ",
        "indeed": false
    },
    {
        "number": 4513,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.strip())\n    result = []\n\n    for i in range(test_cases):\n        sudoku_board = []\n        for j in range(9):\n            sudoku_board.append(list(map(int, stdin.readline().strip())))\n\n        changed_elements = 0\n        while changed_elements < 9:\n            row = random.randint(0, 8)\n            col = random.randint(0, 8)\n            if sudoku_board[row][col] != 0:\n                sudoku_board[row][col] = random.randint(1, 9)\n                changed_elements += 1\n\n        result.append(\"\".join(map(str, [row for row in sudoku_board])))\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"",
        "indeed": false
    },
    {
        "number": 4514,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[:2])\n    p = [None] + list(map(int, stdin.split()[2:]))\n    query = [list(map(int, stdin.split()[2+n+i:2+n+i+2])) for i in range(q)]\n\n    tree = [[] for _ in range(n+1)]\n    for i in range(2, n+1):\n        tree[p[i]].append(i)\n\n    def dfs(u, depth):\n        for v in tree[u]:\n            if v not in visited:\n                visited.add(v)\n                dfs(v, depth+1)\n                order.append(v)\n\n    def find_kth(u, k):\n        visited.clear()\n        order.clear()\n        visited.add(u)\n        dfs(u, 1)\n        return order[k-1] if len(order) >= k else -1\n\n    result = []\n    for query_i in query:\n        u, k = query_i\n        result.append(find_kth(u, k))\n\n    return \" \".join(map(str, result))",
        "test": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\\n\") == \"3\\n6\\n8\\n-1\\n9\\n4\\n\"",
        "indeed": false
    },
    {
        "number": 4515,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, c, n = map(int, stdin.readline().strip().split())\n        if (n + a + b + c) % 3 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
        "test": "assert solution(\"5\\n5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\\nYES\\nNO\\nNO\\nYES\\n\"",
        "indeed": false
    },
    {
        "number": 4516,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))[m:]\n    result = []\n\n    for i in range(1, n + 1):\n        p = [i] + [j for j in range(1, n + 1) if j != i]\n        p_x = [p.index(x[j]) + 1 for j in range(m)]\n        result.append(sum(abs(p_x[j] - p_x[j + 1]) for j in range(m - 1)))\n\n    return \" \".join(map(str, result))",
        "test": "assert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8\\n'",
        "indeed": false
    },
    {
        "number": 4517,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, next(stdin).split())\n    edges = [list(map(int, next(stdin).split())) for _ in range(n-1)]\n    queries = [list(map(int, next(stdin).split())) + list(map(int, next(stdin).split())) for _ in range(m)]\n\n    def dfs(start, visited, query):\n        visited.add(start)\n        for end in (v for u, v in edges if u == start):\n            if end not in visited:\n                if end in query or any(end in (u for u, v in edges if v == q) for q in query):\n                    return True\n                elif dfs(end, visited, query):\n                    return True\n        return False\n\n    for k, *query in queries:\n        if dfs(1, set(), set(query)):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\ndef",
        "test": "assert solution(",
        "indeed": false
    },
    {
        "number": 4518,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_reachable(graph, start, end):\n        visited = [False] * len(graph)\n        queue = [start]\n        while queue:\n            current = queue.pop(0)\n            visited[current] = True\n            for neighbor in graph[current]:\n                if not visited[neighbor]:\n                    queue.append(neighbor)\n        return visited[end]\n\n    def add_road(graph, x, y):\n        graph[x].add(y)\n        graph[y].add(x)\n\n    def find_roads(graph, gangs, start):\n        result = []\n        for i, gang in enumerate(gangs):\n            if i != start and gang != gangs[start]:\n                add_road(graph, start, i)\n                result.append((start, i))\n        return result\n\n    def find_all_roads(graph, gangs):\n        roads = []\n        for i, gang in enumerate(gangs):\n            for j in range(i + 1, len(gangs)):\n                if gangs[j] != gang:\n                    add_road(graph, i, j)\n                    roads.append((i, j))\n        return roads\n\n    t = int(stdin.pop(0))\n    output = []\n\n    for _ in range(t):\n        n = int(stdin.pop(0))\n        gangs = list(map(int, stdin.pop(0).split()))\n        graph = [set() for _ in range(n)]\n        roads = find_roads(graph, gangs, 0)\n\n        for i in range(1, n):\n            if not is_reachable(graph, 0, i):\n                output.append(\"NO\")\n                break\n\n            if i == n - 1:\n                output.append(\"YES\")\n                for x, y in roads:\n                    output.append(f\"{x+1} {y+1}\")\n\n        if output[-1] == \"NO\":\n            break\n\n    return \"\\n\".join(output)",
        "test": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"\"\"YES",
        "indeed": false
    },
    {
        "number": 4519,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    result = []\n    for i in range(q):\n        n, k = map(int, input().split())\n        binary_string = input()\n        if n == k:\n            result.append(binary_string)\n        else:\n            min_string = ''\n            max_count = n // 2\n            for j in range(n):\n                if k < max_count:\n                    min_string += '0'\n                    k -= 1\n                else:\n                    min_string += '1'\n                    k -= 1\n                    max_count -= 1\n            result.append(min_string)\n    return result\n\n\nwith open('input.txt', 'r') as file:\n    stdin = file.read()\n\noutput = solution(stdin)\n\nwith open('output.txt', 'w') as file:\n    for string in output:\n        file.write(string + '\\n')\n",
        "test": "assert solution(\"3\\n8 5\\n11011010\\n7 9\\n1111100\\n7 11\\n1111100\") == \"01011110\\n0101111\\n0011111\"",
        "indeed": false
    },
    {
        "number": 4520,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def is_bad_point(point, segments):\n        return sum(1 for segment in segments if segment[0] <= point <= segment[1]) > k\n\n    def remove_segments(segments, removed_segments):\n        new_segments = []\n        for segment in segments:\n            if segment not in removed_segments:\n                new_segments.append(segment)\n        return new_segments\n\n    lines = stdin.split(\"\\n\")\n    n, k = map(int, lines[0].split())\n    segments = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    bad_points = []\n    for i in range(1, 201):\n        if is_bad_point(i, segments):\n            bad_points.append(i)\n\n    min_removed_segments = []\n    for segment in segments:\n        new_segments = remove_segments(segments, [segment])\n        bad_point_count = sum(1 for i in range(1, 201) if is_bad_point(i, new_segments))\n        if bad_point_count == 0:\n            min_removed_segments.append(segment)\n\n    return str(len(min_removed_segments)) + \"\\n\" + \" \".join(str(segments.index(segment)+1) for segment in min_removed_segments)\n\ninput_str = \"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\"\nprint(solution(input_str)) # Output: \"3\\n1 4 7\" ",
        "test": "assert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\"",
        "indeed": false
    },
    {
        "number": 4521,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def distance(x1: int, v1: int, x2: int, v2: int) -> int:\n        if v1 == v2:\n            return abs(x1 - x2)\n        else:\n            return abs(x1 - x2) // abs(v1 - v2)\n\n    def min_distance(x_i: int, v_i: int, x_j: int, v_j: int) -> int:\n        if x_i > x_j:\n            x_i, v_i, x_j, v_j = x_j, v_j, x_i, v_i\n        return distance(x_i, v_i, x_j, v_j)\n\n    def main(stdin: str) -> str:\n        n = int(stdin.readline().strip())\n        x = list(map(int, stdin.readline().strip().split()))\n        v = list(map(int, stdin.readline().strip().split()))\n\n        total_distance = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                total_distance += min_distance(x[i], v[i], x[j], v[j])\n\n        return str(total_distance)\n\n    return main(io.StringIO(stdin))",
        "test": "assert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == \"19\"",
        "indeed": false
    },
    {
        "number": 4522,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(node, visited, parent, weight, tree, weights):\n        visited[node] = True\n        for n in tree[node]:\n            if not visited[n]:\n                dfs(n, visited, node, max(weight, weights[node - 1]), tree, weights)\n\n    def count_pairs(queries, tree, weights):\n        n = len(tree)\n        visited = [False] * n\n        tree_weight = [0] * n\n        for i in range(1, n):\n            tree_weight[i] = tree_weight[tree[i][0]] + weights[i - 1]\n\n        for i in range(1, n):\n            dfs(i, [False] * n, -1, 0, tree, weights)\n\n        pairs = [0] * len(queries)\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                for k in range(len(queries)):\n                    if tree_weight[i] + tree_weight[j] <= queries[k]:\n                        pairs[k] += 1\n        return pairs\n\n    n, m = map(int, stdin.readline().strip().split())\n    tree = [[] for _ in range(n + 1)]\n    weights = []\n    for i in range(1, n):\n        u, v, w = map(int, stdin.readline().strip().split())\n        tree[u].append(v)\n        tree[v].append(u)\n        weights.append(w)\n\n    queries = list(map(int, stdin.readline().strip().split()))\n    return ' '.join(map(str, count_pairs(queries, tree, weights)))",
        "test": "assert solution(\"1 2\\n1 2\\n\") == \"0 0 \"",
        "indeed": false
    },
    {
        "number": 4523,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    t = int(test_cases[0])\n    result = []\n    \n    for i in range(1, t*2, 2):\n        n = int(test_cases[i])\n        a = list(map(int, test_cases[i+1].split()))\n        if len(set(a)) == 1:\n            result.append(\"YES\")\n        else:\n            for i in range(n):\n                for j in range(i+1, n):\n                    if abs(a[i] - a[j]) <= 1:\n                        a.remove(min(a[i], a[j]))\n                        break\n                if len(set(a)) == 1:\n                    result.append(\"YES\")\n                    break\n            else:\n                result.append(\"NO\")\n                \n    return \"\\n\".join(result)\n\ninput_str = \"\"\"5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\"\"\"\n\nprint(solution(input_str)) ",
        "test": "assert solution(\"5\\n3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\") == \"YES\\nYES\\nNO\\nNO\\nYES\" ",
        "indeed": false
    },
    {
        "number": 4524,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = int(stdin.split()[1], 2)\n    b = int(stdin.split()[2], 2)\n\n    answer = 0\n    while b > 0:\n        answer += a & b\n        b >>= 1\n\n    return str(answer % 998244353)",
        "test": "assert solution(\"4 5\\n1001\\n10101\\n\") == \"11\" ",
        "indeed": false
    },
    {
        "number": 4525,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    t = int(test_cases[0])\n    result = []\n\n    for i in range(1, t+1):\n        n = int(test_cases[i])\n        a = []\n\n        for j in range(1, n+1):\n            if j <= n // 2:\n                a.append(j * 2)\n            else:\n                a.append((j - n // 2) * 2 - 1)\n\n        if sum(a[:n//2]) != sum(a[n//2:]):\n            result.append(\"NO\")\n        else:\n            result.append(\"YES\")\n            result.append(\" \".join(str(x) for x in a))\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"5\\n2\\n4\\n6\\n8\\n10\\n\") == \"NO\\nYES\\n2 4 1 5\\nNO\\nYES\\n2 4 6 8 1 3 5 11\\nNO\\n\"",
        "indeed": false
    },
    {
        "number": 4526,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    result = []\n\n    for i in range(t):\n        n = int(stdin.split(\"\\n\")[2 * i + 1])\n        a = list(map(int, stdin.split(\"\\n\")[2 * i + 2].split()))\n        special_count = 0\n\n        for j in range(n):\n            for k in range(j + 2, n + 1):\n                if sum(a[j:k]) == a[j]:\n                    special_count += 1\n\n        result.append(special_count)\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\\n8\\n8 7 6 5 4 3 2 1\\n1\\n1\") == \"5\\n1\\n0\\n4\\n0\"",
        "indeed": false
    },
    {
        "number": 4527,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_intersection(segment1, segment2):\n        if segment1[0] > segment1[1]:\n            segment1[0], segment1[1] = segment1[1], segment1[0]\n        if segment2[0] > segment2[1]:\n            segment2[0], segment2[1] = segment2[1], segment2[0]\n        return max(segment1[0], segment2[0]), min(segment1[1], segment2[1])\n\n    def is_subset(subset, segment):\n        for subsegment in subset:\n            intersection = get_intersection(subsegment, segment)\n            if intersection[0] <= intersection[1]:\n                return False\n        return True\n\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        segments = []\n        for _ in range(n):\n            segments.append(list(map(int, stdin.readline().strip().split())))\n\n        max_subset_size = 0\n        for i in range(1, n + 1):\n            for subset in itertools.combinations(segments, i):\n                if all(is_subset(subset, segment) for segment in segments):\n                    max_subset_size = max(max_subset_size, i)\n\n        print(max_subset_size)\n\nimport itertools\nimport sys",
        "test": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '3\\n4\\n2\\n7\\n' ",
        "indeed": false
    },
    {
        "number": 4528,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    result = []\n    for i in range(1, t + 1):\n        h, m = [int(x) for x in stdin.split(\"\\n\")[i].split()]\n        if h == 0 and m == 0:\n            result.append(\"0\")\n        else:\n            mins_to_newyear = 60 - m\n            if h > 0:\n                mins_to_newyear += (24 - h) * 60\n            result.append(str(mins_to_newyear))\n    return \"\\n\".join(result)",
        "test": "assert solution(\"1\\n23 55\") == \"5\"",
        "indeed": false
    },
    {
        "number": 4529,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.strip().split('\\n')\n    result = []\n\n    for i in range(0, len(test_cases), 2):\n        n = int(test_cases[i])\n        s = test_cases[i + 1]\n        min_length = n + 1\n        min_substring = \"\"\n\n        for length in range(1, n + 1):\n            for i in range(n - length + 1):\n                substring = s[i:i + length]\n                if substring.count(\"L\") == substring.count(\"R\") and substring.count(\"U\") == substring.count(\"D\"):\n                    if length < min_length:\n                        min_length = length\n                        min_substring = substring\n\n        if min_length == n + 1:\n            result.append(\"-1\")\n        else:\n            result.append(f\"{min_substring.index('L') + 1} {min_substring.index('L') + min_length}\")\n\n    return \"\\n\".join(result)\n\ndef",
        "test": "assert solution(\"4\\nLRUD\\n4\\nLURD\\n5\\nRRUDU\\n5\\nLLDDR\") == \"1 2\\n1 4\\n3 4\\n-1\\n\"",
        "indeed": false
    },
    {
        "number": 4530,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def valid_pair(stdin: str) -> bool:\n        n = int(stdin.split()[0])\n        skills = list(map(int, stdin.split()[1:]))\n        skills.sort()\n\n        for i in range(len(skills)):\n            if skills[i] != i + 1:\n                return False\n\n        return True\n\n    def max_size(stdin: str) -> int:\n        n = int(stdin.split()[0])\n        skills = list(map(int, stdin.split()[1:]))\n        max_size = 0\n\n        for i in range(1, n + 1):\n            if valid_pair(stdin):\n                max_size = i\n            stdin = stdin.replace(str(i), \"\", 1)\n\n        return max_size\n\n    t = int(stdin.split()[0])\n    result = []\n\n    for _ in range(t):\n        n = int(input().split()[0])\n        stdin = \" \".join(input().split())\n        result.append(max_size(stdin))\n\n    return \"\\n\".join(map(str, result))\n",
        "test": "assert solution(\"4\\n7\\n4 2 4 1 4 3\\n5\\n2 1 5 4 3\\n1\\n1\\n1 1 1 3\") == \"3\\n1\\n0\\n2\\n\"",
        "indeed": false
    },
    {
        "number": 4531,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n = int(stdin.split('\\n')[0])\n    values = list(map(int, stdin.split('\\n')[1].split()))\n    edges = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.split('\\n')[i + 2].split())\n        edges.append((u, v))\n\n    # Calculate distances\n    distances = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        distances[i][i] = 0\n    for u, v in edges:\n        distances[u - 1][v - 1] = 1\n        distances[v - 1][u - 1] = 1\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                distances[i][j] = min(distances[i][j], distances[i][k] + distances[k][j])\n\n    # Calculate max cost\n    max_cost = 0\n    for v in range(n):\n        cost = sum(distances[i][v] * values[i] for i in range(n))\n        max_cost = max(max_cost, cost)\n\n    return str(max_cost)\n",
        "test": "assert solution(\"1\\n1337\") == \"0\" ",
        "indeed": true
    },
    {
        "number": 4532,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_moves(n: int, k: int, a: list) -> int:\n        x = 0\n        moves = 0\n        for i in range(1, n+1):\n            if x < k and a[i-1] % k != 0:\n                a[i-1] += x + 1\n                x += 1\n                moves += 1\n            else:\n                moves += 1\n        return moves\n\n    t = int(stdin.readline())\n    result = []\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        result.append(find_min_moves(n, k, a))\n\n    return \"\\n\".join(map(str, result))\n",
        "test": "assert solution(\"10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"18\"",
        "indeed": false
    },
    {
        "number": 4533,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    children, cookies = stdin.split(\"\\n\")\n    children = [int(x) for x in children.split(\",\")]\n    cookies = [int(x) for x in cookies.split(\",\")]\n\n    max_children = 0\n    for child in children:\n        for cookie in cookies:\n            if cookie >= child:\n                max_children += 1\n                cookies.remove(cookie)\n                break\n\n    return str(max_children)",
        "test": "assert solution(\"1 2\\n1 2 3\") == \"2\" ",
        "indeed": false
    },
    {
        "number": 4534,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 0 or k > 33:\n        return \"Invalid input. Please provide an index between 0 and 33.\"\n    else:\n        row = []\n        for i in range(k + 1):\n            if i == 0:\n                row.append(1)\n            elif i == k:\n                row.append(1)\n            else:\n                row.append(row[i - 1] + row[i])\n        return row",
        "test": "assert solution(\"0\") == [1]",
        "indeed": false
    },
    {
        "number": 4535,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin, 2)).count(\"1\"))",
        "test": "assert solution(\"00000000000000000000000000001011\") == \"3\"",
        "indeed": false
    },
    {
        "number": 4536,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    num = int(''.join(map(str, stdin)))\n    num += 1\n    return list(map(int, str(num)))",
        "test": "assert solution([1,2,3]) == [1,2,4]",
        "indeed": false
    },
    {
        "number": 4537,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    max_val = max(A + B, A - B, A * B)\n    return str(max_val)",
        "test": "assert solution(\"3 1\") == \"4\"",
        "indeed": true
    },
    {
        "number": 4538,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split(\"\\n\")\n    n, d = map(int, lines[0].split())\n    points = []\n    for i in range(1, n+1):\n        x, y = map(int, lines[i].split())\n        points.append((x, y))\n\n    # count points within distance D\n    count = 0\n    for point in points:\n        x, y = point\n        dist = (x**2 + y**2)**0.5\n        if dist <= d:\n            count += 1\n\n    # return result\n    return str(count)",
        "test": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"",
        "indeed": true
    },
    {
        "number": 4539,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def f(x):\n        return sum(int(digit) for digit in str(x))\n\n    N = int(stdin)\n    return \"Yes\" if N % f(N) == 0 else \"No\"",
        "test": "assert solution(\"12\") == \"Yes\"",
        "indeed": true
    },
    {
        "number": 4540,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    N = int(input_lines[0])\n    coordinates = [int(x) for x in input_lines[1].split(\" \")]\n    results = []\n    \n    for i in range(1, N+1):\n        total_cost = 0\n        for j in range(N+1):\n            if j != i:\n                total_cost += abs(coordinates[j-1] - coordinates[j])\n        results.append(total_cost)\n    \n    return \"\\n\".join([str(x) for x in results])",
        "test": "assert solution(\"5\\n-2 1 4 -3 5\") == \"13\\n12\\n10\\n8\\n10\\n\"",
        "indeed": false
    },
    {
        "number": 4541,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    c = stdin.lower()\n    if c in vowels:\n        return \"vowel\"\n    else:\n        return \"consonant\"",
        "test": "assert solution(\"a\") == \"vowel\"",
        "indeed": true
    },
    {
        "number": 4542,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    min_new_stones = 1\n    count_black = 0\n    count_white = 0\n\n    for stone in s:\n        if stone == \"B\":\n            count_black += 1\n        else:\n            count_white += 1\n\n    if count_black > count_white:\n        min_new_stones = count_white\n    else:\n        min_new_stones = count_black\n\n    return str(min_new_stones)",
        "test": "assert solution('WWWW') == '0'",
        "indeed": false
    },
    {
        "number": 4543,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    num = int(str(a) + str(b))\n    root = int(num ** 0.5)\n    return \"Yes\" if root * root == num else \"No\"",
        "test": "assert solution(\"1 21\") == \"Yes\"",
        "indeed": true
    },
    {
        "number": 4544,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N, sequence = stdin.split('\\n')\n    N = int(N)\n    sequence = list(map(int, sequence.split()))\n    \n    # Initialize variables\n    max_count = 0\n    X = -1\n    \n    # Iterate over all possible X values\n    for x in range(10**5 + 1):\n        # Initialize count and current sequence\n        count = 0\n        current_sequence = sequence.copy()\n        \n        # Iterate over all elements in the sequence\n        for i in range(N):\n            # Choose the operation with the highest effect\n            if current_sequence[i] == x - 1:\n                current_sequence[i] += 1\n            elif current_sequence[i] == x + 1:\n                current_sequence[i] -= 1\n            \n            # Count the number of elements equal to X\n            if current_sequence[i] == x:\n                count += 1\n                \n        # Update the maximum count\n        if count > max_count:\n            max_count = count\n            X = x\n            \n    # Print the result\n    return str(max_count)",
        "test": "assert solution(\"2\\n2 2\") == \"2\"",
        "indeed": true
    },
    {
        "number": 4545,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    A = int(lines[1])\n\n    black_squares = N * N - A\n    return str(black_squares)",
        "test": "assert solution(\"3\\n4\") == \"5\"",
        "indeed": true
    },
    {
        "number": 4546,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b - a == c - b:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"2 4 6\") == \"YES\"",
        "indeed": true
    },
    {
        "number": 4547,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 10 == 9:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"29\") == \"Yes\"",
        "indeed": false
    },
    {
        "number": 4548,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def min_cost(N, M, X, A):\n        if N == 1 or N == X:\n            return 0\n\n        A = set(A)\n        if N - 1 in A:\n            return 1\n\n        dp = [float('inf')] * (N + 1)\n        dp[X] = 0\n\n        for i in range(N - 1):\n            for j in range(X, N + 1):\n                if j not in A:\n                    dp[j] = min(dp[j], dp[j - 1] + 1)\n\n        return dp[N]\n\n    N, M, X = map(int, stdin.split('\\n')[0].split())\n    A = list(map(int, stdin.split('\\n')[1].split()))\n    return str(min_cost(N, M, X, A))",
        "test": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4549,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def can_paint_square(i, j, canvas):\n        if canvas[i][j] != '.':\n            return canvas[i][j] == '#'\n        queue = [(i, j)]\n        visited = {(i, j)}\n        while queue:\n            r, c = queue.pop(0)\n            if canvas[r][c] != '.' or (r, c) not in visited:\n                continue\n            visited.add((r, c))\n            if canvas[r][c] == '#':\n                for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    new_r, new_c = r + dr, c + dc\n                    if 0 <= new_r < H and 0 <= new_c < W and (new_r, new_c) not in visited:\n                        queue.append((new_r, new_c))\n        return all(canvas[r][c] == '#' for r in range(H) for c in range(W) if canvas[r][c] != '.' and (r, c) not in visited)\n\n    def paint_square(i, j, canvas, num_times):\n        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            new_i, new_j = i + dr, j + dc\n            if 0 <= new_i < H and 0 <= new_j < W:\n                canvas[new_i][new_j] = '#'\n                num_times -= 1\n                if num_times > 0:\n                    paint_square(new_i, new_j, canvas, num_times)\n\n    stdin = stdin.strip()\n    H, W = map(int, stdin.split()[:2])\n    canvas = [list(line) for line in stdin.split('\\n')[1:]]\n    s = canvas[H - 1][W - 1]\n    num_times = H + W - 1 if s == '#' else 0\n    return 'Yes' if can_paint_square(H - 1, W - 1, canvas) else 'No'",
        "test": "assert solution('3 3\\n.#.\\n###\\n.#.\\n') == 'Yes'",
        "indeed": false
    },
    {
        "number": 4550,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    if a + b == c or a + c == b or b + c == a:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"10 30 20\") == \"Yes\"",
        "indeed": true
    },
    {
        "number": 4551,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    left_total = A + B\n    right_total = C + D\n\n    if left_total > right_total:\n        return \"Left\"\n    elif left_total < right_total:\n        return \"Right\"\n    else:\n        return \"Balanced\"",
        "test": "assert solution(\"3 8 7 1\") == \"Left\"",
        "indeed": true
    },
    {
        "number": 4552,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    num_shops = int(lines[0])\n    F = [[int(x) for x in line.split()] for line in lines[1:1 + num_shops]]\n    P = [[int(x) for x in line.split()] for line in lines[1 + num_shops:]]\n\n    def max_profit(F, P):\n        M = [[0] * 11 for _ in range(num_shops + 1)]\n        for j in range(5):\n            for k in range(2):\n                M[0][j * 2 + k] = P[0][j * 2 + k]\n\n        for i in range(1, num_shops + 1):\n            for j in range(5):\n                for k in range(2):\n                    M[i][j * 2 + k] = max(\n                        M[i - 1][j * 2 + k],\n                        M[i][j * 2 + k] + P[i][j * 2 + k] * F[i - 1][j + 1][k]\n                    )\n\n        return M[num_shops][9]\n\n    return str(max_profit(F, P))",
        "test": "assert solution(\"1\\n1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\") == \"8\\n\"",
        "indeed": false
    },
    {
        "number": 4553,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, S = stdin.split()\n    \n    if len(S) != int(A) + int(B) + 1:\n        return \"No\"\n    \n    if not S[int(A)-1].isdigit() or not S[int(A)].isdigit():\n        return \"No\"\n    \n    if not S[int(A)+1:].isdigit():\n        return \"No\"\n    \n    return \"Yes\"",
        "test": "assert solution(\"2 3\\n32-987\") == \"No\"",
        "indeed": false
    },
    {
        "number": 4554,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input values\n    W, a, b = map(int, stdin.split())\n\n    # Calculate the minimum distance\n    distance = min(abs(a - b), abs(a + W - b))\n\n    return str(distance)",
        "test": "assert solution(\"3 2 6\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into A, B, and K\n    A, B, K = map(int, stdin.split())\n\n    # Sort the integers between A and B in ascending order\n    integers_between = sorted(range(A, B+1))\n\n    # Select the K smallest integers or K largest integers\n    if K <= len(integers_between) // 2:\n        result = integers_between[:K]\n    else:\n        result = integers_between[-K:]\n\n    # Return the result as a string\n    return ' '.join(map(str, result))",
        "test": "assert solution(\"10 20 5\") == \"10\\n11\\n12\\n13\\n14\\n20\\n\"",
        "indeed": false
    },
    {
        "number": 4556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.strip().split()\n    if len(name) < 3:\n        raise ValueError(\"Invalid input\")\n    contest_name = name[0]\n    first_char = contest_name[0].upper()\n    return first_char + \"C\"",
        "test": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"",
        "indeed": false
    },
    {
        "number": 4557,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if A + B < 2 * X or (A + B) % 2 != 0:\n        return \"NO\"\n    else:\n        return \"YES\"",
        "test": "assert solution(\"1 1 1\") == \"YES\"",
        "indeed": false
    },
    {
        "number": 4558,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    return str(X - t)",
        "test": "assert solution(\"100 17\") == \"83\"",
        "indeed": false
    },
    {
        "number": 4559,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Computes the product of N integers in the input string.\n    If the result exceeds 10^18, prints -1 instead.\n\n    Args:\n    - stdin: A string containing the input in the format specified in the problem statement.\n\n    Returns:\n    - The result of the product, as a string.\n    \"\"\"\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    A = [int(x) for x in lines[1].split()]\n\n    result = 1\n    for a in A:\n        result *= a\n        if result > 10**18:\n            return \"-1\"\n\n    return str(result)",
        "test": "assert solution(\"2\\n1000000000 1000000000\") == \"1000000000000000000\"",
        "indeed": false
    },
    {
        "number": 4560,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n <= a:\n        return \"Yes\"\n    elif n % 500 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"12\\n1\") == \"No\"",
        "indeed": false
    },
    {
        "number": 4561,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    if X+1 <= B <= 2*X+1:\n        return \"safe\"\n    if B <= X:\n        return \"delicious\"\n    return \"dangerous\"",
        "test": "assert solution(\"4 3 6\") == \"safe\"",
        "indeed": true
    },
    {
        "number": 4562,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    largest_square = 0\n\n    for i in range(1, n + 1):\n        if i * i <= n:\n            largest_square = i * i\n        else:\n            break\n\n    return str(largest_square)",
        "test": "assert solution('10') == '9'",
        "indeed": true
    },
    {
        "number": 4563,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    ratios = []\n    \n    for i in range(1, N+1):\n        T, A = map(int, lines[i].split())\n        ratios.append((T, A))\n    \n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    min_votes = 1\n    for i in range(N-1, 0, -1):\n        T, A = ratios[i]\n        gcd_value = gcd(T, A)\n        T //= gcd_value\n        A //= gcd_value\n        \n        min_votes = (min_votes * T) + (min_votes * A)\n    \n    return str(min_votes)",
        "test": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"  # Sample Input",
        "indeed": false
    },
    {
        "number": 4564,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if len(set(stdin)) == len(stdin) else \"no\"",
        "test": "assert solution(\"a\") == \"yes\"",
        "indeed": true
    },
    {
        "number": 4565,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    leader = None\n    min_changes = N\n\n    for i in range(N):\n        if S[i] == 'E':\n            if leader is None or i < leader:\n                leader = i\n            if i - leader < min_changes:\n                min_changes = i - leader\n        elif S[i] == 'W':\n            if leader is None or i > leader:\n                leader = i\n            if leader - i < min_changes:\n                min_changes = leader - i\n\n    return str(min_changes)",
        "test": "assert solution(\"10\\nEEWEWWWEWW\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4566,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    N, M = map(int, input_lines[0].split())\n    connections = [0] * (N + 1)  # plus one to handle 1-indexing\n\n    for line in input_lines[1:]:\n        if not line:\n            continue\n        a, b = map(int, line.split())\n        connections[a] += 1\n        connections[b] += 1\n\n    return '\\n'.join(map(str, connections[1:]))  # exclude the first element (which is just a sentinel)\n\nstdin = \"4 3\\n1 2\\n2 3\\n1 4\"\nprint(solution(stdin))  # Output: 2\\n2\\n1\\n1 ",
        "test": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"",
        "indeed": true
    },
    {
        "number": 4567,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, *scores = stdin.split()\n    N = int(N)\n    scores = list(map(int, scores))\n\n    max_grade = sum(scores)\n    if max_grade % 10 != 0:\n        return str(max_grade)\n    else:\n        return str(sum(scores[:N-1]))",
        "test": "assert solution(\"2\\n10\\n15\") == \"25\"",
        "indeed": false
    },
    {
        "number": 4568,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    max_count = 0\n\n    for i in range(N):\n        x = set(S[:i])\n        y = set(S[i:])\n        count = len(x.intersection(y))\n        if count > max_count:\n            max_count = count\n\n    return str(max_count)",
        "test": "assert solution(\"6\\naabbca\") == \"2\" ",
        "indeed": true
    },
    {
        "number": 4569,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"Sunny\":\n        return \"Cloudy\"\n    elif stdin == \"Cloudy\":\n        return \"Rainy\"\n    else:\n        return \"Sunny\"",
        "test": "assert solution(\"Sunny\") == \"Cloudy\"",
        "indeed": true
    },
    {
        "number": 4570,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    fee_plan_1 = A * N\n    fee_plan_2 = B\n    min_fee = min(fee_plan_1, fee_plan_2)\n    return str(min_fee)",
        "test": "assert solution(\"7 17 120\") == \"119\"",
        "indeed": true
    },
    {
        "number": 4571,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    prob_success = 0.5\n    prob_fail = 0.5\n    time_success = 1900\n    time_fail = 100\n    total_time = 0\n    expected_trials = 0\n\n    for i in range(M):\n        prob_success *= prob_fail\n        expected_trials += prob_success * time_fail\n\n    total_time += expected_trials\n\n    prob_success = 0.5\n    prob_fail = 0.5\n    for i in range(N-M):\n        prob_success *= prob_fail\n        expected_trials += prob_success * time_success\n\n    total_time += expected_trials\n\n    return str(int(total_time))\n\ninput_str = input()\nprint(solution(input_str)) ",
        "test": "assert solution(\"10 2\") == \"18000\"  # 8 cases, 1/2 probability, 1900ms, 2 cases, 1/2 probability, 100ms",
        "indeed": false
    },
    {
        "number": 4572,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    letters = set(list(\"abcdefghijklmnopqrstuvwxyz\"))\n    for char in stdin:\n        if char in letters:\n            letters.remove(char)\n    if len(letters) == 0:\n        return \"None\"\n    else:\n        return min(letters) ",
        "test": "assert solution(\"atcoderregularcontest\") == \"b\"",
        "indeed": true
    },
    {
        "number": 4573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    x = list(map(int, stdin.split('\\n')[1].split()))\n    result = []\n\n    for i in range(n):\n        temp = x.copy()\n        temp.pop(i)\n        temp.sort()\n        if n % 2 == 0:\n            mid = n // 2\n            result.append(temp[mid])\n        else:\n            mid = (n + 1) // 2\n            result.append(temp[mid - 1])\n\n    return '\\n'.join(map(str, result))\n\nstdin = \"4\\n2 4 4 3\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\\n\"",
        "indeed": false
    },
    {
        "number": 4574,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *sticks = map(int, stdin.split())\n\n    sticks.sort()\n    max_area = 0\n\n    for i in range(n - 3):\n        for j in range(i + 1, n - 2):\n            for k in range(j + 1, n - 1):\n                for l in range(k + 1, n):\n                    if sticks[i] + sticks[j] == sticks[k] + sticks[l]:\n                        max_area = max(max_area, sticks[i] * sticks[j])\n\n    return str(max_area)",
        "test": "assert solution(\"1\\n1\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4575,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    D, X = map(int, lines[1].split())\n    A = list(map(int, lines[2:]))\n\n    chocolate_pieces = 0\n    for i in range(N):\n        chocolate_pieces += (D // (A[i] + 1))\n\n    return str(chocolate_pieces + X)",
        "test": "assert solution(\"2\\n5 2\\n3\\n4\") == \"21\\n\"",
        "indeed": false
    },
    {
        "number": 4576,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n    \n    # Count combinations of 500 yen coins\n    count = 1\n    for i in range(X // 500):\n        count *= (A + i)\n        count //= i + 1\n    \n    # Count combinations of 100 yen coins\n    for i in range(X // 100):\n        count *= (B + i)\n        count //= i + 1\n    \n    # Count combinations of 50 yen coins\n    for i in range(X // 50):\n        count *= (C + i)\n        count //= i + 1\n    \n    return str(count)",
        "test": "assert solution(\"0\\n0\\n0\\n0\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4577,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C >= A and C <= B:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1 3 2\") == \"Yes\"",
        "indeed": true
    },
    {
        "number": 4578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, X = map(int, lines[0].split())\n    moto_consumption = list(map(int, lines[1:]))\n\n    # Calculate the minimum number of each kind of doughnut that can be made\n    min_doughnuts = [X // moto for moto in moto_consumption]\n\n    # Calculate the maximum number of doughnuts that can be made with the remaining Moto\n    max_doughnuts = X % sum(moto_consumption) // min(moto_consumption)\n\n    # Calculate the maximum number of doughnuts that can be made while obeying the condition\n    max_doughnuts_with_condition = sum(min_doughnuts) + max_doughnuts\n\n    return str(max_doughnuts_with_condition)",
        "test": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"",
        "indeed": false
    },
    {
        "number": 4579,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    items = set()\n    for i in range(1, n+1):\n        items.add(lines[i])\n    return str(len(items))",
        "test": "assert solution(\"3\\napple\\norange\\napple\\n\") == \"2\"",
        "indeed": true
    },
    {
        "number": 4580,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    num_users, *ratings = map(int, stdin.split())\n    \n    min_colors = 0\n    max_colors = 0\n    color_count = {\n        \"gray\": 0,\n        \"brown\": 0,\n        \"green\": 0,\n        \"cyan\": 0,\n        \"blue\": 0,\n        \"yellow\": 0,\n        \"orange\": 0,\n        \"red\": 0\n    }\n\n    for rating in ratings:\n        if rating <= 399:\n            color = \"gray\"\n        elif rating <= 799:\n            color = \"brown\"\n        elif rating <= 1199:\n            color = \"green\"\n        elif rating <= 1599:\n            color = \"cyan\"\n        elif rating <= 1999:\n            color = \"blue\"\n        elif rating <= 2399:\n            color = \"yellow\"\n        elif rating <= 2799:\n            color = \"orange\"\n        else:\n            color = \"red\"\n\n        color_count[color] += 1\n\n    min_colors = len([v for v in color_count.values() if v > 0])\n    max_colors = max(color_count.values())\n\n    return f\"{min_colors} {max_colors}\"\n\nstdin = \"4\\n2100 2500 2700 2700\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"1\\n800\") == \"1 1\"",
        "indeed": false
    },
    {
        "number": 4581,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    toppings = S.count(\"o\")\n    price = 700 + toppings * 100\n    return str(price)",
        "test": "assert solution(\"oxo\") == \"900\"",
        "indeed": true
    },
    {
        "number": 4582,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == \"H\":\n        if b == \"H\":\n            return \"H\"\n        else:\n            return \"D\"\n    else:\n        if b == \"H\":\n            return \"D\"\n        else:\n            return \"H\"",
        "test": "assert solution(\"H H\") == \"H\"",
        "indeed": true
    },
    {
        "number": 4583,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin)\n    if A * 1 + B * 1 + C * 1 + D * 1 == 7:\n        return f\"{A}+{B}+{C}+{D}=7\"\n    elif A * 1 + B * 1 + C * (-1) + D * 1 == 7:\n        return f\"{A}+{B}+{-C}+{D}=7\"\n    elif A * 1 + B * (-1) + C * 1 + D * 1 == 7:\n        return f\"{A}+{-B}+{C}+{D}=7\"\n    elif A * (-1) + B * 1 + C * 1 + D * 1 == 7:\n        return f\"{-A}+{B}+{C}+{D}=7\"\n    elif A * (-1) + B * (-1) + C * 1 + D * 1 == 7:\n        return f\"{-A}+{-B}+{C}+{D}=7\"\n    elif A * 1 + B * 1 + C * 1 + D * (-1) == 7:\n        return f\"{A}+{B}+{C}-{D}=7\"\n    elif A * 1 + B * 1 + C * (-1) + D * (-1) == 7:\n        return f\"{A}+{B}+{-C}-{D}=7\"\n    elif A * 1 + B * (-1) + C * 1 + D * (-1) == 7:\n        return f\"{A}+{-B}+{C}-{D}=7\"\n    elif A * (-1) + B * 1 + C * 1 + D * (-1) == 7:\n        return f\"{-A}+{B}+{C}-{D}=7\"\n    elif A * (-1) + B * (-1) + C * 1 + D * (-1) == 7:\n        return f\"{-A}-{B}-{C}-{D}=7\"\n    elif A * 1 + B * 1 + C * 1 + D * (-2) == 7:\n        return f\"{A}+{B}+{C}-2{D}=7\"\n    elif A * 1 + B * 1 + C * (-2) + D * 1 == 7:\n        return f\"{A}+{B}-2{C}+{D}=7\"\n    elif A * 1 + B * (-2) + C * 1 + D * 1 == 7:\n        return f\"{A}-2{B}+{C}+{D}=7\"\n    elif A * (-2) + B * 1 + C * 1 + D * 1 == 7:\n        return f\"-2{A}+{B}+{C}+{D}=7\"\n    elif A * (-2) + B * 1 + C * (-1) + D * 1 == 7:\n        return f\"-2{A}+{B}-{C}+{D}=7\"\n    elif A * 1 + B * 1 + C * (-2) + D * (-1) == 7:\n        return f\"{A}+{B}-2{C}-{D}=7\"\n    elif A * 1 + B * (-2) + C * 1 + D * (-1) == 7:\n        return f\"{A}-2{B}+{C}-{D}=7\"\n    elif A * (-2) + B * 1 + C * 1 + D * (-1) == 7:\n        return f\"-2{A}+{B}+{C}-{D}=7\"\n    elif A * (-2) + B * 1 + C * (-1) + D * 1 == 7:\n        return f\"-2{A}+{B}-{C}+{D}=7\"\n    elif A * (-2) + B * (-1) + C * 1 + D * 1 == 7:\n        return f\"-2{A}-{B}+{C}+{D}=7\"\n    elif A * (-2) + B * (-1) + C * (-1) + D * 1 == 7:\n        return f\"-2{A}-{B}-{C}+{D}=7\"\n    elif A * (-2) + B *",
        "test": "assert solution(\"0000\") == \"0-0+0+0=7\"",
        "indeed": false
    },
    {
        "number": 4584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    A_list = [int(x) for x in lines[1].split()]\n    \n    # Create a dictionary to store the immediate boss of each member\n    boss_dict = {}\n    for i in range(2, N+1):\n        boss_dict[i] = A_list[i-1]\n    \n    # Create a dictionary to store the number of immediate subordinates of each member\n    subordinate_dict = {}\n    for i in range(1, N+1):\n        subordinate_dict[i] = 0\n    \n    # Iterate through the boss_dict to update the subordinate_dict\n    for i in range(1, N+1):\n        subordinate_dict[boss_dict[i]] += 1\n    \n    # Create the output string by iterating through the subordinate_dict\n    output = \"\"\n    for i in range(1, N+1):\n        output += str(subordinate_dict[i]) + \"\\n\"\n    \n    return output",
        "test": "assert solution(\"2\\n1 2\") == \"1\\n1\\n\"",
        "indeed": false
    },
    {
        "number": 4585,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X == 0:\n        return \"0\"\n    if X == 1 or X == 2:\n        return str(X - 1)\n\n    time = 1\n    while True:\n        if X == 0:\n            return str(time)\n        elif X > 0:\n            X -= time\n        else:\n            X += time\n        time += 1",
        "test": "assert solution(\"10\") == \"5\"",
        "indeed": false
    },
    {
        "number": 4586,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if str(N)[0] * 3 in str(N) or str(N)[1] * 3 in str(N) or str(N)[2] * 3 in str(N) or str(N)[3] * 3 in str(N):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('1118') == 'Yes'",
        "indeed": true
    },
    {
        "number": 4587,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    C = list(map(int, lines[3].split()))\n\n    def is_valid(upper: int, middle: int, lower: int) -> bool:\n        return A[upper] <= B[middle] <= C[lower]\n\n    def count_combinations(index: int, used_parts: set) -> int:\n        if index == N:\n            return 1 if len(used_parts) == 3 else 0\n\n        count = 0\n        for i in range(N):\n            if i not in used_parts:\n                for j in range(i + 1, N):\n                    if j not in used_parts:\n                        for k in range(j + 1, N):\n                            if k not in used_parts:\n                                if is_valid(i, j, k):\n                                    count += count_combinations(index + 1, used_parts | {i, j, k})\n\n        return count\n\n    return str(count_combinations(0, set()))",
        "test": "assert solution(\"5\\n1 2 3 4 5\\n2 3 4 5 6\\n3 4 5 6 7\") == \"3\"",
        "indeed": false
    },
    {
        "number": 4588,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x_value = 10 * ('ABCDEF'.index(x) + 1)\n    y_value = 10 * ('ABCDEF'.index(y) + 1)\n    if x_value < y_value:\n        return '<'\n    elif x_value > y_value:\n        return '>'\n    else:\n        return '='",
        "test": "assert solution(\"A B\") == \"<\"",
        "indeed": true
    },
    {
        "number": 4589,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.splitlines()[0].split())\n    grid = [list(line) for line in stdin.splitlines()[1:]]\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == '.':\n                adj_bombs = 0\n                for dx, dy in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]:\n                    x, y = i + dx, j + dy\n                    if 0 <= x < h and 0 <= y < w and grid[x][y] == '#':\n                        adj_bombs += 1\n                grid[i][j] = str(adj_bombs)\n    return '\\n'.join([''.join(line) for line in grid])",
        "test": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\\n1#2#1\\n11211\" ",
        "indeed": true
    },
    {
        "number": 4590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split()[0:3])\n    A = list(map(int, stdin.split()[3:3+N]))\n    B = list(map(int, stdin.split()[3+N:]))\n\n    total_time = 0\n    max_books = 0\n\n    while total_time <= K:\n        if A and (not B or A[0] <= B[0]):\n            total_time += A.pop(0)\n            max_books += 1\n        elif B:\n            total_time += B.pop(0)\n            max_books += 1\n        else:\n            break\n\n    return str(max_books)",
        "test": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"",
        "indeed": false
    },
    {
        "number": 4591,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    AB_pizzas = min(X, Y) * 2\n    A_pizzas = X - AB_pizzas // 2\n    B_pizzas = Y - AB_pizzas // 2\n    total_price = A_pizzas * A + B_pizzas * B + AB_pizzas * C\n    return str(total_price)",
        "test": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"",
        "indeed": false
    },
    {
        "number": 4592,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    N = int(stdin)\n    mod = 10**9 + 7\n\n    def factorial(n: int) -> int:\n        result = 1\n        for i in range(1, n + 1):\n            result = (result * i) % mod\n        return result\n\n    def count_divisors(n: int) -> int:\n        count = 0\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                if n // i == i:\n                    count += 1\n                else:\n                    count += 2\n        return count\n\n    return str(count_divisors(factorial(N)) % mod)",
        "test": "assert solution(\"1\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4593,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    for i in range(x, 0, -1):\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                return str(j ** int(i / j))\n    return \"1\"",
        "test": "assert solution(\"100\") == \"31\"",
        "indeed": false
    },
    {
        "number": 4594,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    diameters = [int(d) for d in lines[1:]]\n\n    # sort diameters in descending order\n    diameters.sort(reverse=True)\n\n    # find the maximum number of layers\n    layers = 0\n    for i in range(len(diameters)):\n        if i == 0 or diameters[i] > diameters[i-1]:\n            layers += 1\n        else:\n            break\n\n    return str(layers)",
        "test": "assert solution(\"1\\n10\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4595,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = 1\n        for j in range(i):\n            if s[j] < s[i] and (i - j + 1) % 2 == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    return max_length",
        "test": "assert solution(\"QWERTYASDFZXCV\") == 5 ",
        "indeed": false
    },
    {
        "number": 4596,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    operations = 0\n\n    while all(x % 2 == 0 for x in A):\n        A = [x // 2 for x in A]\n        operations += 1\n\n    return str(operations)",
        "test": "assert solution(\"3\\n8 12 40\") == \"2\"",
        "indeed": true
    },
    {
        "number": 4597,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    power = 1\n    for i in range(1, N+1):\n        power *= i\n    return str(power % (10**9+7))",
        "test": "assert solution('3') == '6'",
        "indeed": false
    },
    {
        "number": 4598,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    total_candies = (N*(N+1))//2\n    return str(total_candies)",
        "test": "assert solution(\"1\") == \"1\"",
        "indeed": true
    },
    {
        "number": 4599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, cards = stdin.split()\n    N = int(N)\n    cards = list(map(int, cards.split()))\n\n    # initialize variables\n    alice_score = 0\n    bob_score = 0\n\n    # calculate the optimal score\n    for i in range(N):\n        if i % 2 == 0:\n            alice_score += cards[i]\n        else:\n            bob_score += cards[i]\n\n    # return the result\n    return str(alice_score - bob_score)",
        "test": "assert solution(\"3\\n3 1 2\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4600,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string by new line and convert it to a list of strings\n    input_list = stdin.split('\\n')\n    \n    # Get the number of problems and the number of submissions\n    N, M = map(int, input_list[0].split())\n    \n    # Initialize a dictionary to store the submission data\n    submission_data = {}\n    \n    # Loop through the submissions\n    for i in range(1, M+1):\n        # Get the problem number and the verdict for the i-th submission\n        p, S = map(int, input_list[i].split())\n        \n        # If the problem is not in the dictionary, add it with an empty list as the value\n        if p not in submission_data:\n            submission_data[p] = []\n        \n        # Append the verdict to the list of verdicts for the current problem\n        submission_data[p].append(S)\n    \n    # Initialize variables to store the number of correct answers and penalties\n    correct_answers = 0\n    penalties = 0\n    \n    # Loop through the problems\n    for p in range(1, N+1):\n        # If there is at least one AC in the submission data for the current problem\n        if 'AC' in submission_data[p]:\n            # Get the index of the first AC in the list of verdicts\n            first_AC_index = submission_data[p].index('AC')\n            \n            # Increment the number of correct answers\n            correct_answers += 1\n            \n            # Increment the penalties by the number of WAs before the first AC\n            penalties += submission_data[p][:first_AC_index].count('WA')\n    \n    # Return the results as a string\n    return f\"{correct_answers} {penalties}\" ",
        "test": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"",
        "indeed": false
    },
    {
        "number": 4601,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, K = map(int, lines[0].split())\n    healths = list(map(int, lines[1].split()))\n\n    def min_attack_times(healths: List[int], k: int) -> int:\n        total_health = sum(healths)\n        if k == 0:\n            return total_health // 10\n\n        min_attack_times = 0\n        attack_count = 0\n        i = 0\n        while i < N and attack_count < total_health:\n            if attack_count + healths[i] <= k * 10:\n                attack_count += healths[i]\n            else:\n                min_attack_times += (k * 10 - attack_count) // healths[i]\n                attack_count = 0\n            i += 1\n\n        return min_attack_times + total_health // 10\n\n    return str(min_attack_times(healths, K))",
        "test": "assert solution('3 1\\n4 1 5\\n') == '5'",
        "indeed": false
    },
    {
        "number": 4602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    lines = stdin.split('\\n')\n    n, k = map(int, lines[0].split())\n    x = list(map(int, re.findall(r'\\d+', lines[1])))\n    min_distance = 0\n    for i in range(n):\n        min_distance += min(abs(0 - x[i]), abs(k - x[i]))\n    return str(min_distance)",
        "test": "assert solution(\"2\\n10\\n2 3\") == \"4\\n\"",
        "indeed": false
    },
    {
        "number": 4603,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    if A <= B:\n        train_fare = A\n    else:\n        train_fare = B\n\n    if C <= D:\n        bus_fare = C\n    else:\n        bus_fare = D\n\n    return str(train_fare + bus_fare)",
        "test": "assert solution(\"600\\n300\\n220\\n420\") == \"520\" ",
        "indeed": true
    },
    {
        "number": 4604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    A = [int(x) for x in lines[1].split(' ')]\n    \n    # Check if the reports are correct\n    for i in range(1, N):\n        if A[i] != abs(A[i-1] - A[i]):\n            return \"0\"\n    \n    # Calculate the number of possible orders\n    MOD = 10**9 + 7\n    dp = [0] * (N+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N+1):\n        dp[i] = (dp[i-1] + dp[i-2]) % MOD\n    \n    # Calculate the number of possible orders\n    result = 0\n    for i in range(1, N+1):\n        result += (dp[A[i-1]+1] * dp[N-A[i-1]-dp[A[i-1]+1]]) % MOD\n    \n    return str(result % MOD)",
        "test": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"",
        "indeed": false
    },
    {
        "number": 4605,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input values\n    N, A, B = map(int, stdin.split())\n\n    # Initialize sum of integers\n    total = 0\n\n    # Iterate through all integers between 1 and N (inclusive)\n    for i in range(1, N + 1):\n        # Calculate sum of digits of i\n        digit_sum = sum(map(int, str(i)))\n\n        # Check if digit_sum is between A and B (inclusive)\n        if A <= digit_sum <= B:\n            # Add i to total\n            total += i\n\n    # Return the result\n    return str(total)",
        "test": "assert solution(\"20 2 5\") == \"84\"",
        "indeed": true
    },
    {
        "number": 4606,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"ABC\" + str(n)",
        "test": "assert solution(\"100\") == \"ABC100\"",
        "indeed": true
    },
    {
        "number": 4607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    takahashi_count = 0\n\n    for day in range(1, b + 1):\n        if str(day) == str(a):\n            takahashi_count += 1\n\n    return str(takahashi_count)\n\ndef",
        "test": "assert solution('12 31') == '15'",
        "indeed": false
    },
    {
        "number": 4608,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = [int(x) for x in lines[1:]]\n\n    visited = [False] * (n + 1)\n    visited[1] = True\n    queue = [1]\n    steps = 0\n\n    while queue:\n        current = queue.pop(0)\n        steps += 1\n\n        if current == 2:\n            return str(steps)\n\n        next_button = a[current - 1]\n        if not visited[next_button]:\n            visited[next_button] = True\n            queue.append(next_button)\n\n    return \"-1\"\n\ninput_str = '''3\n3\n1\n2'''\nprint(solution(input_str)) ",
        "test": "assert solution(\"4\\n1\\n2\\n4\\n3\") == \"-1\"",
        "indeed": false
    },
    {
        "number": 4609,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    n = int(inputs[0])\n    numbers_written = set()\n    for i in range(1, n+1):\n        number = int(inputs[i])\n        if number in numbers_written:\n            numbers_written.remove(number)\n        else:\n            numbers_written.add(number)\n    return str(len(numbers_written))",
        "test": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"",
        "indeed": true
    },
    {
        "number": 4610,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    A = list(map(int, stdin.split()[2:]))\n\n    if K == 1:\n        return str(N)\n\n    unique_numbers = len(set(A))\n\n    if unique_numbers <= K:\n        return str(0)\n\n    balls_needed = unique_numbers - K\n    min_balls = N\n\n    for number in set(A):\n        count = A.count(number)\n        if count > 1:\n            min_balls = min(min_balls, count - 1)\n\n    return str(min_balls) if min_balls != N else str(balls_needed)",
        "test": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4611,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    from collections import defaultdict\n\n    def is_valid_move(x, y, moves):\n        if (x, y) in moves:\n            return False\n        for move in moves:\n            dx, dy = abs(x - move[0]), abs(y - move[1])\n            if dx + dy == 1:\n                return True\n        return False\n\n    def find_path(moves, time, start_pos, end_pos):\n        if time == len(moves):\n            return True\n        x, y = start_pos\n        for move in moves[time]:\n            dx, dy = move[0] - x, move[1] - y\n            if abs(dx) + abs(dy) == 1 and is_valid_move(move[0], move[1], moves[:time]):\n                if find_path(moves, time + 1, move, end_pos):\n                    return True\n        return False\n\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    moves = defaultdict(list)\n    for i in range(1, N + 1):\n        time, x, y = map(int, re.findall(r'\\d+', lines[i]))\n        moves[time].append((x, y))\n\n    start_pos = (0, 0)\n    end_pos = (0, 0)\n    for move in moves[len(moves) - 1]:\n        if move != start_pos:\n            end_pos = move\n            break\n\n    return 'Yes' if find_path(moves, 1, start_pos, end_pos) else 'No'",
        "test": "assert solution(\"3\\n3 1 2\\n5 2 2\\n7 3 1\") == \"No\"",
        "indeed": false
    },
    {
        "number": 4612,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    x = (a + b) / 2\n    return str(int(x + 0.5))",
        "test": "assert solution(\"1 3\") == \"2\" ",
        "indeed": true
    },
    {
        "number": 4613,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def is_bridge(graph, u, v):\n        graph[u].remove(v)\n        graph[v].remove(u)\n        visited = set()\n        def dfs(node, parent):\n            visited.add(node)\n            for neighbor in graph[node]:\n                if neighbor != parent:\n                    if neighbor not in visited:\n                        dfs(neighbor, node)\n        dfs(0, -1)\n        return 0 in visited\n    \n    N, M = map(int, stdin.split()[0:2])\n    graph = [[] for _ in range(N)]\n    for edge in stdin.split()[2:]:\n        a, b = map(int, edge.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    bridge_count = 0\n    for i in range(M):\n        for j in range(i + 1, M):\n            if is_bridge(graph, a_i, b_i):\n                bridge_count += 1\n    \n    return str(bridge_count)",
        "test": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\"",
        "indeed": false
    },
    {
        "number": 4614,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    if a == b:\n        return str(c)\n    elif a == c:\n        return str(b)\n    else:\n        return str(a)",
        "test": "assert solution(\"5 7 5\") == \"7\"",
        "indeed": true
    },
    {
        "number": 4615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = list(map(int, stdin.split()))\n\n    # Check if any of the given constraints are not satisfied\n    if not (1 <= A < B <= 30 and 1 <= C < D <= 30 and 1 <= E <= 100 and 100 * A <= F <= 3000 and all(isinstance(x, int) for x in [A, B, C, D, E, F])):\n        return \"Invalid input\"\n\n    # Calculate the maximum possible mass of sugar water\n    max_sugar_water_mass = min(F, 100 * B)\n\n    # Initialize the min and max mass of sugar dissolved in the sugar water\n    min_sugar_mass = max_sugar_water_mass\n    max_sugar_mass = 0\n\n    # Iterate through the possible mass of the sugar water\n    for water_mass in range(1, max_sugar_water_mass + 1):\n        # Calculate the mass of sugar dissolved in the water\n        sugar_mass = water_mass * E // (100 * (A + B) - E * water_mass)\n\n        # If the mass of sugar is within the constraints, update the min and max sugar mass\n        if 0 < sugar_mass <= F - water_mass:\n            min_sugar_mass = max(min_sugar_mass, sugar_mass)\n            max_sugar_mass = min(max_sugar_mass, sugar_mass)\n\n    # If the min and max mass of sugar dissolved in the sugar water are the same, return the results\n    if min_sugar_mass == max_sugar_mass:\n        return f\"{max_sugar_water_mass} {min_sugar_mass}\"\n    else:\n        return \"No valid solution\"",
        "test": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"",
        "indeed": false
    },
    {
        "number": 4616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    i_index = s.index('i')\n    n_index = s.index('n')\n    i18n = s[:i_index+1] + str(n_index - i_index - 1) + s[n_index-1:]\n    return i18n\n\ndef",
        "test": "assert solution(\"programming\") == \"prog\"",
        "indeed": false
    },
    {
        "number": 4617,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split(\"\\n\")\n    if rows[0] == rows[1][::-1]:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"pot\\nopr\") == \"NO\"",
        "indeed": true
    },
    {
        "number": 4618,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split('\\n')\n    k = int(k)\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    sorted_substrings = sorted(list(substrings))\n    return sorted_substrings[k-1]",
        "test": "assert solution('abc\\n1') == 'a'",
        "indeed": true
    },
    {
        "number": 4619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def paint_white(x, y):\n        if 0 <= x < W and 0 <= y < H:\n            white_region[x][y] = 1\n\n    W, H, N = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n    white_region = [[1] * H for _ in range(W)]\n\n    for i in range(N):\n        x, y, ai = map(int, stdin.split()[3 + 3 * i:6 + 3 * i])\n        if ai == 1:\n            for j in range(x):\n                paint_white(j, y)\n        elif ai == 2:\n            for j in range(x, W):\n                paint_white(j, y)\n        elif ai == 3:\n            for j in range(y):\n                paint_white(x, j)\n        elif ai == 4:\n            for j in range(y, H):\n                paint_white(x, j)\n\n    return sum(map(sum, white_region))",
        "test": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"",
        "indeed": false
    },
    {
        "number": 4620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, trains = stdin.split('\\n')\n    N = int(N)\n    trains = [list(map(int, train.split())) for train in trains]\n    \n    result = [0] * N\n    \n    for i in range(N):\n        if i == 0:\n            result[i] = trains[i][1]\n        else:\n            result[i] = result[i-1] + trains[i][1] + trains[i][0]\n    \n    return '\\n'.join(map(str, result))\n\nstdin = '''3\n6 5 1\n1 10 1'''\nprint(solution(stdin)) ",
        "test": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\"",
        "indeed": false
    },
    {
        "number": 4621,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    H, W = map(int, input().split())\n    image = []\n    for _ in range(H):\n        image.append(list(input()))\n\n    # Extend the image\n    extended_image = [['.' for _ in range(W)] for _ in range(2 * H)]\n    for i in range(2 * H):\n        for j in range(W):\n            extended_image[i][j] = image[int(i / 2)][j]\n\n    # Print the extended image\n    for row in extended_image:\n        print(''.join(row))",
        "test": "assert solution(\"3 3\\n*.#.\\n#.*.\\n.#.*\") == \"*.#.\\n*.#.\\n#.*.\\n#.*.\\n.#.*\\n.#.*\"",
        "indeed": false
    },
    {
        "number": 4622,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n = int(input_list[0])\n    input_list = input_list[1:]\n    if len(set(input_list)) == n:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"",
        "indeed": true
    },
    {
        "number": 4623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_teams(weights: List[int], total_weight: int) -> int:\n        weights.sort()\n        count = 0\n        i, j = 0, len(weights) - 1\n        while i < j:\n            if weights[i] + weights[j] <= total_weight:\n                count += j - i\n                i += 1\n            else:\n                j -= 1\n        return count\n\n    input_lines = stdin.splitlines()\n    output = []\n\n    for i in range(1, int(input_lines[0]) + 1):\n        n = int(input_lines[i * 2 - 1])\n        weights = list(map(int, input_lines[i * 2].split()))\n        total_weight = sum(weights)\n        max_teams = find_teams(weights, total_weight)\n        output.append(str(max_teams))\n\n    return \"\\n\".join(output)\n\ndef",
        "test": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\\n3\\n4\\n1\\n2\"",
        "indeed": false
    },
    {
        "number": 4624,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n    \n    for _ in range(t):\n        n, x = map(int, stdin.split()[1:])\n        for floor, apartments in enumerate(range(2, 2 * x + 2, x)):\n            if n <= apartments:\n                result.append(floor + 1)\n                break\n                \n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"1\\n1 5\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def perform_combo(s: str, p: List[int]) -> int:\n        tries = 0\n        mistakes = 0\n        i = 0\n        n = len(s)\n        while i < n:\n            if mistakes >= m:\n                return -1\n            if i == p[mistakes]:\n                mistakes += 1\n                i = 0\n            else:\n                i += 1\n        return tries\n\n    def count_presses(s: str) -> List[int]:\n        counts = [0] * 26\n        for letter in s:\n            counts[ord(letter) - ord('a')] += 1\n        return counts\n\n    def calculate_presses(tries: List[int], counts: List[int]) -> List[int]:\n        presses = [0] * 26\n        for i in range(len(tries)):\n            for j in range(26):\n                if tries[i] != -1:\n                    presses[j] += counts[j] * tries[i]\n        return presses\n\n    test_cases = int(stdin.readline())\n    for i in range(test_cases):\n        n, m = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n        p = list(map(int, stdin.readline().split()))\n\n        tries = [perform_combo(s, p) for _ in range(m + 1)]\n        counts = count_presses(s)\n        presses = calculate_presses(tries, counts)\n\n        output = \" \".join(map(str, presses))\n        print(output)\n\nstdin = open(\"input.txt\", \"r\")\nsolution(stdin)\nstdin.close() ",
        "test": "assert solution(input) == output",
        "indeed": false
    },
    {
        "number": 4626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split('\\n')\n    result = []\n    \n    for test_case in test_cases[1:]:\n        a, b, c = map(int, test_case.split())\n        minimum = min(abs(a - b), abs(a - c), abs(b - c))\n        result.append(str(minimum))\n    \n    return '\\n'.join(result)",
        "test": "assert solution(\"8\\n3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\") == \"0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4\\n\"",
        "indeed": false
    },
    {
        "number": 4627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    t = int(lines[0])\n    result = []\n\n    for i in range(1, t * 2, 2):\n        n = int(lines[i])\n        a = list(map(int, lines[i + 1].split()))\n        similar = []\n\n        for num in a:\n            similar.append([num])\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if (a[i] + a[j]) % 2 == 0 or abs(a[i] - a[j]) == 1:\n                    similar[i].append(j)\n                    similar[j].append(i)\n\n        if n % 2 == 0:\n            for i in range(n // 2):\n                for j in range(n // 2):\n                    if i not in similar[j] and j not in similar[i]:\n                        result.append(\"YES\")\n                        break\n                else:\n                    result.append(\"NO\")\n                    break\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nNO\\n\" ",
        "indeed": false
    },
    {
        "number": 4628,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    roads = []\n    for _ in range(m):\n        x, y, w = map(int, stdin.split()[3:])\n        roads.append((x, y, w))\n\n    couriers = []\n    for _ in range(k):\n        a, b = map(int, stdin.split()[3:])\n        couriers.append((a, b))\n\n    def find_path(start: int, end: int, visited: set) -> int:\n        visited.add(start)\n        if start == end:\n            return 0\n        min_cost = float('inf')\n        for x, y, w in roads:\n            if x == start and y not in visited:\n                min_cost = min(min_cost, w + find_path(y, end, visited))\n            elif y == start and x not in visited:\n                min_cost = min(min_cost, w + find_path(x, end, visited))\n        visited.remove(start)\n        return min_cost\n\n    min_cost = float('inf')\n    zero_roads = 0\n    for courier in couriers:\n        cost = find_path(courier[0], courier[1], set())\n        min_cost = min(min_cost, cost)\n\n        for x, y, w in roads:\n            if x == courier[0] and y == courier[1] and w == 0:\n                zero_roads += 1\n                break\n            elif x == courier[1] and y == courier[0] and w == 0:\n                zero_roads += 1\n                break\n\n    return str(min_cost) + ' ' + str(zero_roads)\n\ninput_data = \"\"\"6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\"\"\"\n\nprint(solution(input_data)) ",
        "test": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == \"13\\n\" ",
        "indeed": false
    },
    {
        "number": 4629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    result = []\n    for _ in range(q):\n        n = int(input())\n        while True:\n            if sum(3**i for i in range(len(bin(n)[2:])) if bin(n)[2:].count(str(i)) >= 1) >= n:\n                result.append(n)\n                break\n            n += 1\n    return \"\\n\".join(str(x) for x in result)",
        "test": "assert solution('7\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000') == '1\\n3\\n9\\n13\\n27\\n6561\\n19683'",
        "indeed": false
    },
    {
        "number": 4630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_answer(p):\n        n = len(p)\n        result = [0] * n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if p[i] > p[j]:\n                    result[p[i] - 1] = max(result[p[i] - 1], result[p[j] - 1] + 1)\n        return result\n\n    def process_query(q: int, n: int, p: list) -> list:\n        result = [0] * n\n        p_idx = {k: v for v, k in enumerate(p)}\n        for i in range(n):\n            result[i] = get_answer(p[:p_idx[i] + 1][::-1])[i] + 1\n        return result\n\n    q = int(stdin.readline().strip())\n    result = []\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        p = list(map(int, stdin.readline().strip().split()))\n        result.append(\" \".join(map(str, process_query(n, p))))\n    return \"\\n\".join(result)",
        "test": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1 \\n3 3 3 \\n2 3 3 2 1 3 \\n1 \\n2 2 2 2 \" ",
        "indeed": false
    },
    {
        "number": 4631,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))[n+1:]\n    x.sort()\n    \n    def min_distance(y):\n        distance = 0\n        for i in range(n):\n            distance += min(abs(x[i] - y[0]), abs(x[i] - y[1]))\n        return distance\n    \n    y = [-1000000000] * m\n    min_distance_sum = 1e9\n    for i in range(2000000):\n        for j in range(m):\n            y[j] = x[i % n] + (j - i % n) * 2\n        if min_distance_sum > min_distance(y):\n            min_distance_sum = min_distance(y)\n    return str(min_distance_sum) + \"\\n\" + \" \".join(map(str, y))",
        "test": "assert solution(\"3 5\\n0 3 1\") == \"7\\n5 -2 4 -1 2\" ",
        "indeed": false
    },
    {
        "number": 4632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def next_position(x, y, direction):\n        if direction == 'U':\n            return x, y + 1\n        else:\n            return x + 1, y\n\n    def is_valid(x, y, packages):\n        return 0 <= x < 1000 and 0 <= y < 1000 and (x, y) not in packages\n\n    def find_shortest_path(start, packages, visited, path, paths):\n        x, y = start\n        if not packages:\n            paths.add(path)\n            return\n\n        for direction in ['U', 'R']:\n            next_x, next_y = next_position(x, y, direction)\n            if is_valid(next_x, next_y, packages):\n                new_start = (next_x, next_y)\n                new_packages = packages.copy()\n                new_packages.remove(new_start)\n                new_visited = visited.copy()\n                new_visited.add(new_start)\n                new_path = path + direction\n                find_shortest_path(new_start, new_packages, new_visited, new_path, paths)\n\n    test_cases = stdin.split('\\n')\n    output = []\n\n    for i in range(1, int(test_cases[0]) + 1):\n        n = int(test_cases[i * 2 - 1])\n        packages = {tuple(map(int, test_cases[j].split())) for j in range(i * 2 - 1, i * 2 + n - 1)}\n        start = (0, 0)\n        visited = {start}\n        paths = set()\n        find_shortest_path(start, packages, visited, '', paths)\n\n        if not paths:\n            output.append('NO')\n        else:\n            output.append('YES')\n            shortest_path = min(paths)\n            output.append(shortest_path)\n\n    return '\\n'.join(output)\n",
        "test": "assert solution(\"1\\n1\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\\n2\\n1 0\\n0 1\\n1\\n4 3\") == \"YES\\nRUUURRRRUU\\nNO\\nYES\\nRRRRUUU\"",
        "indeed": false
    },
    {
        "number": 4633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    result = []\n\n    for i in range(1, t + 1):\n        n, s = map(int, stdin.splitlines()[i].split())\n        moves = 0\n        while sum(int(digit) for digit in str(n)) > s:\n            n += 1\n            moves += 1\n        result.append(moves)\n\n    return \"\\n\".join(map(str, result))\n\ninput_data = \"\"\"5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\"\"\"\n\nprint(solution(input_data)) ",
        "test": "assert solution(\"5\\n2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\") == \"8\\n0\\n500\\n2128012501878\\n89999999999999999\"",
        "indeed": false
    },
    {
        "number": 4634,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    result = []\n\n    for i in range(1, t + 1):\n        n = int(lines[i * 2 - 1])\n        a = [int(x) for x in lines[i * 2].split()]\n\n        max_gap = 0\n        left_end = 0\n        right_end = n - 1\n\n        while left_end <= right_end:\n            if a[left_end] == 1:\n                break\n            left_end += 1\n\n        while right_end >= left_end:\n            if a[right_end] == 1:\n                break\n            right_end -= 1\n\n        max_gap = max(max_gap, right_end - left_end)\n\n        for j in range(left_end, right_end):\n            if a[j] == 0:\n                max_gap = max(max_gap, j - left_end)\n            else:\n                left_end = j + 1\n                max_gap = max(max_gap, j - left_end)\n\n        result.append(max_gap + 1)\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution('5\\n0 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1') == '2\\n0\\n2\\n4\\n1'",
        "indeed": false
    },
    {
        "number": 4635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    result = []\n\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        alphabet = [chr(i) for i in range(ord('a'), ord('z') + 1)]\n        s = []\n\n        for i in range(k):\n            s.append(alphabet[i % 26])\n\n        result.append(''.join(s))\n\n    return '\\n'.join(result)",
        "test": "assert solution(\"1\\n4 4\") == \"abcd\"",
        "indeed": false
    },
    {
        "number": 4636,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    results = []\n    \n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        \n        alice_score = 0\n        bob_score = 0\n        move_count = 0\n        current_player = 0\n        \n        while True:\n            if current_player == 0:\n                alice_score += min(sum(a[:move_count]), n - move_count)\n                a = a[move_count:]\n                move_count = 1\n                current_player = 1\n            else:\n                bob_score += min(sum(a[::-1][:move_count]), n - move_count)\n                a = a[::-1][move_count:]\n                move_count = 1\n                current_player = 0\n                \n            if not a:\n                break\n                \n        results.append(f\"{move_count} {alice_score} {bob_score}\")\n    \n    return \"\\n\".join(results)\n\ninput_data = \"\"\"7\n11\n3 1 4 1 5 9 2 6 5 3 5\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1 1 1 1\n7\n1 1 1 1 1 1 1 \"\"\"\n\nprint(solution(input_data)) ",
        "test": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"",
        "indeed": false
    },
    {
        "number": 4637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    result = []\n    \n    for i in range(t):\n        n, k = map(int, stdin.splitlines()[2*i+1].split())\n        a = list(map(int, stdin.splitlines()[2*i+2].split()))\n        b = list(map(int, stdin.splitlines()[2*i+3].split()))\n        \n        a_max = sum(a)\n        b_max = sum(b)\n        \n        if k == 0:\n            result.append(max(a_max, b_max))\n            continue\n        \n        for i in range(k):\n            a_max_i = max(a)\n            b_max_i = max(b)\n            \n            if a_max_i > b_max_i:\n                a[a.index(a_max_i)] = b_max_i\n                b[b.index(b_max_i)] = a_max_i\n            else:\n                b[b.index(b_max_i)] = a_max_i\n                a[a.index(a_max_i)] = b_max_i\n        \n        result.append(max(sum(a), sum(b)))\n    \n    return \"\\n\".join(map(str, result))",
        "test": "assert solution('''",
        "indeed": false
    },
    {
        "number": 4638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split()[0].split())\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n\n    t = [0] * n\n    for i in range(n - 1):\n        t[i + 1] = t[i] + a[i]\n\n    for i in range(n - 1):\n        t[i + 1] = min(t[i + 1], t[i] + b[i] + c)\n\n    return \" \".join(map(str, t))",
        "test": "assert solution(\"10 1\\n3 2 3 1 3 3 1 4 1\\n1 2 3 4 4 1 2 1 3\") == \"0 2 4 7 8 11 13 14 16 17\\n\" ",
        "indeed": false
    },
    {
        "number": 4639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def generate_strings(n: int, k: int) -> str:\n        def count_combinations(n: int, r: int) -> int:\n            return math.factorial(n) // (math.factorial(r) * math.factorial(n - r))\n\n        a_count = n - 2\n        b_count = 2\n        combinations = count_combinations(a_count + b_count, a_count)\n        index = k - 1\n\n        while index >= combinations:\n            a_count -= 1\n            b_count += 1\n            combinations = count_combinations(a_count + b_count, a_count)\n            index -= combinations\n\n        result = ['a'] * a_count + ['b'] * b_count\n        result.sort()\n        return ''.join(result)\n\n    test_cases = stdin.split('\\n')\n    t = int(test_cases[0])\n    result = []\n\n    for i in range(1, t + 1):\n        n, k = map(int, test_cases[i].split())\n        result.append(generate_strings(n, k))\n\n    return '\\n'.join(result)\n\n\ndef",
        "test": "assert solution(\"7\\n5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2\\n20 100\") == \"aaabb\\naabab\\nbaaba\\nbbaaa\\nabb\\nbab\\naaaaaaaaabaaaaaaaa\" ",
        "indeed": false
    },
    {
        "number": 4640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_platforms(points, k):\n        platforms = []\n        for i in range(len(points)):\n            for j in range(i + 1, len(points)):\n                if points[i][0] < points[j][0]:\n                    x1, y1 = points[i]\n                    x2, y2 = points[j]\n                else:\n                    x1, y1 = points[j]\n                    x2, y2 = points[i]\n                if x2 - x1 > k:\n                    continue\n                m = (y2 - y1) / (x2 - x1)\n                b = y1 - m * x1\n                left = (x1 - b) / m\n                right = (x2 - b) / m\n                if left >= points[i][0] and right <= points[i][0] + k:\n                    platforms.append(((left, b), (right, b)))\n        return platforms\n\n    def save_points(points, platforms):\n        saved_points = []\n        for p in points:\n            saved = False\n            for platform in platforms:\n                if p[0] >= platform[0][0] and p[0] <= platform[1][0] and p[1] == platform[0][1]:\n                    saved = True\n                    break\n            if saved:\n                saved_points.append(p)\n        return len(saved_points)\n\n    t = int(stdin.readline())\n    result = []\n    for i in range(t):\n        n, k = map(int, stdin.readline().split())\n        x = list(map(int, stdin.readline().split()))\n        y = list(map(int, stdin.readline().split()))\n        points = list(zip(x, y))\n        platforms = find_platforms(points, k)\n        max_saved = save_points(points, platforms)\n        result.append(max_saved)\n    return '\\n'.join(map(str, result))\n\ninput_data = '''7 1\n1 5 2 3 1 5 4 \n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3'''\n\nprint(solution(input_data)) ",
        "test": "assert solution(\"4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"6\\n1\\n5\\n10\\n\" ",
        "indeed": false
    },
    {
        "number": 4641,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def mex(arr, x):\n        mex_val = 0\n        for i in range(x + 1):\n            if i not in arr:\n                mex_val = i\n                break\n        return mex_val\n\n    q, x = map(int, stdin.split()[0:2])\n    queries = [int(x) for x in stdin.split()[2:]]\n    result = []\n\n    for i in range(q):\n        query = queries[i]\n        if i == 0:\n            result.append(mex([], x))\n        else:\n            a = [y + x for y in queries[:i]]\n            result.append(mex(a, x))\n\n    return \"\\n\".join(map(str, result))\n",
        "test": "assert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"",
        "indeed": false
    },
    {
        "number": 4642,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n, x, y = map(int, stdin.split()[1:])\n        if n == 2:\n            a = [x, y]\n        elif n == 3:\n            a = [x, x+1, y]\n        else:\n            a = [y-2*(n-2), y-2*(n-3), y-2*(n-4)]\n            for j in range(n-5, 0, -1):\n                a.append(a[-1]+2*j)\n        result.append(\" \".join(map(str, a)))\n    return \"\\n\".join(result)",
        "test": "assert solution(\"5\\n2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49 \\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7\" ",
        "indeed": false
    },
    {
        "number": 4643,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, *prices = map(int, stdin.split())\n    sorted_prices = sorted(prices)\n    return \" \".join(map(str, sorted_prices))",
        "test": "assert solution(\"3 3 1 2\") == \"1 2 3\"",
        "indeed": true
    },
    {
        "number": 4644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def odd_sum(a):\n        return sum(a) % 2 != 0\n\n    t = int(stdin.readline())\n    result = []\n\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        if odd_sum(a):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n",
        "test": "assert solution(\"5\\n2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1\") == \"YES\\nNO\\nYES\\nNO\\nNO\"",
        "indeed": false
    },
    {
        "number": 4645,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split(\"\\n\")\n    t = int(cases[0])\n    output = []\n\n    for i in range(1, t+1):\n        n = int(cases[i])\n        if n <= 4:\n            output.append(str(n))\n        else:\n            for j in range(2, 5):\n                if n % j == 0:\n                    base = j\n                    break\n            permutation = []\n            for k in range(1, j):\n                permutation.extend([k, j])\n                j += 1\n            permutation.append(1)\n            if n > len(permutation):\n                output.append(\"-1\")\n            else:\n                output.append(\" \".join(str(permutation[i]) for i in range(n-1)))\n\n    return \"\\n\".join(output)",
        "test": "assert solution('2\\n') == '-1\\n'",
        "indeed": false
    },
    {
        "number": 4646,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def min_moves(a: List[int]) -> int:\n        if not all(i % 2 == a[i] % 2 for i in range(len(a))):\n            return -1\n        return sum(a[i] != i for i in range(len(a))) // 2\n\n    test_cases = int(stdin.readline())\n    result = []\n\n    for _ in range(test_cases):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().strip().split()))\n        result.append(min_moves(a))\n\n    return \"\\n\".join(map(str, result))\n\ninput_str = \"\"\"4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\"\"\"\n\nprint(solution(input_str)) ",
        "test": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\") == \"2\\n1\\n-1\\n0\\n\"",
        "indeed": false
    },
    {
        "number": 4647,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(node, parent, white, black):\n        if node not in visited:\n            visited.add(node)\n            if colors[node] == 0:\n                white += 1\n            else:\n                black += 1\n            for neighbor in graph[node]:\n                if neighbor != parent:\n                    white, black = dfs(neighbor, node, white, black)\n            return white, black\n        else:\n            return white, black\n\n    def max_diff(node, white, black):\n        nonlocal result\n        if node not in visited:\n            visited.add(node)\n            max_white = 0\n            max_black = 0\n            for neighbor in graph[node]:\n                if neighbor != parent:\n                    max_white, max_black = dfs(neighbor, node, max_white, max_black)\n            result[node] = max(max_white - max_black, max_black - max_white)\n            for neighbor in graph[node]:\n                if neighbor != parent:\n                    max_diff(neighbor, max_white, max_black)\n\n    n = int(stdin.readline())\n    colors = list(map(int, stdin.readline().split()))\n    graph = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n\n    result = [0] * n\n    visited = set()\n    for i in range(n):\n        max_diff(i, 0, 0)\n\n    return \" \".join(map(str, result))",
        "test": "assert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\") == \"0 -1 1 -1\\n\" ",
        "indeed": false
    },
    {
        "number": 4648,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split(\"\\n\")[0])\n    test_cases_input = stdin.split(\"\\n\")[1:]\n    \n    for i in range(test_cases):\n        n = int(test_cases_input[i])\n        moves = 0\n        \n        while n != 1:\n            if n % 6 == 0:\n                n //= 6\n                moves += 1\n            else:\n                n *= 2\n                moves += 1\n        \n        print(moves)",
        "test": "assert solution(\"7\\n1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489\") == \"0\\n-1\\n2\\n-1\\n-1\\n12\\n36\"",
        "indeed": false
    },
    {
        "number": 4649,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    output = []\n    for q in range(1, int(queries[0]) + 1):\n        n, k = map(int, queries[q].split())\n        s = queries[q + 1]\n        k_to_change = 0\n        if s.count(\"R\") + s.count(\"G\") + s.count(\"B\") >= k:\n            k_to_change = k - 1\n        elif \"R\" not in s and \"G\" not in s and \"B\" not in s:\n            k_to_change = k - 1\n        else:\n            if \"R\" in s:\n                k_to_change = k - s.count(\"R\")\n            elif \"G\" in s:\n                k_to_change = k - s.count(\"G\")\n            else:\n                k_to_change = k - s.count(\"B\")\n        output.append(k_to_change)\n    return \"\\n\".join(map(str, output))",
        "test": "assert solution(\"1\\n5 2\\nBGGGG\\n5 3\\nRBRGR\\n5 5\\nBBBRR\") == \"1\\n0\\n3\"",
        "indeed": false
    },
    {
        "number": 4650,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        max_divisible = 0\n        for i in range(len(a) - 1):\n            for j in range(i + 1, len(a)):\n                if (a[i] + a[j]) % 3 == 0:\n                    max_divisible += 1\n                    a.append(a[i] + a[j])\n        print(max_divisible)",
        "test": "assert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\\n\"",
        "indeed": false
    },
    {
        "number": 4651,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split(\"\\n\")[0])\n    result = []\n    for i in range(q):\n        n = int(input())\n        permutation = list(map(int, input().split()))\n        min_permutation = min_lexicographic_permutation(permutation)\n        result.append(\" \".join(map(str, min_permutation)))\n    return \"\\n\".join(result)\n\ndef",
        "test": "assert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 5 2 4 3\\n1 2 3 4\\n1\\n1 4 3 2\"",
        "indeed": false
    },
    {
        "number": 4652,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    result = []\n    \n    for i in range(q):\n        n = int(input().split()[0])\n        p = list(map(int, input().split()))\n        \n        can_start = True\n        \n        for j in range(1, n):\n            if p[j] != j + 1:\n                can_start = False\n                break\n        \n        result.append(\"YES\" if can_start else \"NO\")\n    \n    return \"\\n\".join(result)",
        "test": "assert solution(\"5\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\"",
        "indeed": false
    },
    {
        "number": 4653,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    t = int(stdin.readline())\n    for i in range(t):\n        n, k = map(int, stdin.readline().split())\n\n        # Calculate the maximum number of candies Santa can give to kids\n        max_candies = n // k\n        remaining_candies = n % k\n\n        # Check if there are enough candies for the minimum condition\n        if max_candies * k < n // 2:\n            # Calculate the maximum number of candies that can be given to kids who have more than a+1 candies\n            extra_candies = k // 2\n            extra_candies += k % 2\n\n            # Check if there are enough extra candies for the extra kids\n            if extra_candies <= remaining_candies:\n                max_candies += extra_candies\n                remaining_candies -= extra_candies\n            else:\n                max_candies += remaining_candies\n\n        # Calculate the final number of candies\n        max_candies += remaining_candies\n\n        print(max_candies)",
        "test": "assert solution(\"5\\n5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"",
        "indeed": false
    },
    {
        "number": 4654,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def find_sum_with_same_parity(n: int, k: int) -> List[int]:\n        if k == 1:\n            return [n]\n        for i in range(k):\n            a = i + 1\n            b = (n - i) // (k - 1)\n            if a * b == n:\n                return [a] * k\n            if b < a:\n                break\n        return []\n\n    def read_input(input_str: str) -> List[Tuple[int, int]]:\n        input_list = list(map(int, input_str.split()))\n        return [(input_list[i], input_list[i + 1]) for i in range(0, len(input_list), 2)]\n\n    stdin_list = read_input(stdin)\n    output = []\n\n    for n, k in stdin_list:\n        a_list = find_sum_with_same_parity(n, k)\n        if a_list:\n            output.append(f\"YES {' '.join(map(str, a_list))}\")\n        else:\n            output.append(\"NO\")\n\n    return \"\\n\".join(output)",
        "test": "assert solution(\"1\\n100 4\") == \"YES\\n55 5 5 35\\n\"",
        "indeed": false
    },
    {
        "number": 4655,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    output = []\n    \n    for _ in range(q):\n        a, b, c = map(int, stdin.split()[1:])\n        \n        if a > b and a > c:\n            if b > c:\n                b, c = c, b\n            a, b = b, a\n        elif b > a and b > c:\n            if a > c:\n                a, c = c, a\n            b, c = a, b\n            a, b = b, a\n        else:\n            if a > b:\n                a, b = b, a\n            b, c = a, b\n            a, b = b, a\n        \n        a_candies = (a + b - 1) // 2\n        b_candies = a + b - a_candies\n        a_candies = min(a_candies, c)\n        b_candies = min(b_candies, c)\n        \n        output.append(a_candies + b_candies)\n        \n    return '\\n'.join(map(str, output))\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\" ",
        "indeed": false
    },
    {
        "number": 4656,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_beautiful(necklace: str, k: int) -> bool:\n        return necklace == necklace[k:]\n\n    def assemble_necklace(s: str, k: int) -> int:\n        necklaces = []\n        for i in range(len(s)):\n            necklace = s[i:] + s[:i]\n            if is_beautiful(necklace, k):\n                necklaces.append(necklace)\n        return max(len(necklace) for necklace in necklaces) if necklaces else 0\n\n    test_cases = stdin.split(\"\\n\")[1:]\n    results = []\n    for i in range(0, len(test_cases), 2):\n        n, k = map(int, test_cases[i].split())\n        s = test_cases[i + 1]\n        result = assemble_necklace(s, k)\n        results.append(result)\n\n    return \"\\n\".join(map(str, results))\n\n\ndef",
        "test": "assert solution(\"6\\n6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\") == \"6\\n3\\n5\\n4\\n15\\n10\\n\"",
        "indeed": false
    },
    {
        "number": 4657,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    output = \"\"\n\n    for _ in range(q):\n        n, k = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n\n        subsegments = []\n        for i in range(k):\n            if i == 0:\n                subsegments.append(sum(a[:n // k]))\n            else:\n                subsegments.append(sum(a[n // k * i: n // k * (i + 1)]))\n\n        if all(subsegment % 2 == 1 for subsegment in subsegments):\n            output += \"YES\\n\"\n            for i in range(k):\n                if i == k - 1:\n                    output += str(n) + \"\\n\"\n                else:\n                    output += str(n // k * (i + 1)) + \"\\n\"\n        else:\n            output += \"NO\\n\"\n\n    return output\n\n\ndef",
        "test": "assert solution(\"3\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"YES\\n1 3 5\\nNO\\nNO\"",
        "indeed": false
    },
    {
        "number": 4658,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin, 2)\n    result = 0\n    for i in range(32):\n        result |= ((n >> i) & 1) << (31 - i)\n    return format(result, '032b')",
        "test": "assert solution(\"00000010100101000001111010011100\") == \"00111001011110000010100101000000\"",
        "indeed": false
    },
    {
        "number": 4659,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    num_rows = int(stdin)\n    triangle = []\n\n    for i in range(num_rows):\n        row = [1] * (i + 1)\n        triangle.append(row)\n\n        for j in range(1, i):\n            triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j]\n\n    return triangle\n\n\ndef",
        "test": "assert solution(5) == [",
        "indeed": false
    },
    {
        "number": 4660,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.split(\"\\n\")[0])\n    emails = stdin.split(\"\\n\")[1:]\n\n    # define email validation function\n    def is_valid_email(email):\n        parts = email.split(\"@\")\n        username, website = parts[0], parts[-1]\n        if len(username) == 0 or len(website) == 0:\n            return False\n        if not username.replace(\"_\", \"\").replace(\"-\", \"\").isalnum() or not website.replace(\"_\", \"\").replace(\"-\", \"\").isalnum():\n            return False\n        ext = website.split(\".\")[-1]\n        if len(ext) > 3:\n            return False\n        return True\n\n    # filter valid emails\n    valid_emails = list(filter(is_valid_email, emails))\n\n    # sort emails in lexicographical order\n    valid_emails.sort()\n\n    # return output\n    return str(valid_emails)",
        "test": "assert solution(\"5\\njohn@example.com\\njane_doe@example.com\\ninvalid.email\\nvalid.email@domain\\nvalid.email@domain.co.in\") == \"['jane_doe@example.com', 'john@example.com', 'valid.email@domain', 'valid.email@domain.co.in']\" ",
        "indeed": false
    },
    {
        "number": 4661,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    cube_fib = list(map(lambda x: x**3, fib))\n    return str(cube_fib)",
        "test": "assert solution(\"5\") == \"[0, 1, 1, 8, 27]\"",
        "indeed": true
    },
    {
        "number": 4662,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    max_depth = 0\n    depth = 0\n\n    for line in lines[1:]:\n        # remove leading and trailing whitespaces\n        line = line.strip()\n\n        # if the line is a start tag, increase depth\n        if line.startswith(\"<\"):\n            depth += 1\n\n            # if current depth is greater than max depth, update max depth\n            if depth > max_depth:\n                max_depth = depth\n\n        # if the line is an end tag, decrease depth\n        elif line.startswith(\"</\"):\n            depth -= 1\n\n    return str(max_depth)",
        "test": "assert solution(stdin='''",
        "indeed": false
    },
    {
        "number": 4663,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n'):\n        if len(line) < 2 or len(line) > 15:\n            print(\"NO\")\n        elif line[0] not in ['7', '8', '9']:\n            print(\"NO\")\n        elif not line[1:].isdigit():\n            print(\"NO\")\n        else:\n            print(\"YES\")",
        "test": "assert solution(\"8123456789\") == \"YES\"",
        "indeed": false
    },
    {
        "number": 4664,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    m = int(input_list[0])\n    set_m = set(map(int, input_list[1].split()))\n    n = int(input_list[2])\n    set_n = set(map(int, input_list[3].split()))\n    \n    sym_diff = set_m.symmetric_difference(set_n)\n    \n    output = \"\\n\".join(map(str, sorted(sym_diff)))\n    \n    return output",
        "test": "assert solution('5\\n2 4 6 8 10\\n3\\n4 6 8\\n') == '2\\n10'",
        "indeed": true
    },
    {
        "number": 4665,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    total_students = int(lines[0])\n    column_names = lines[1].split(\",\")\n    column_indices = {}\n\n    for name in column_names:\n        if name.strip().lower() == \"marks\":\n            column_indices[\"marks\"] = column_names.index(name)\n        elif name.strip().lower() == \"id\":\n            column_indices[\"id\"] = column_names.index(name)\n        elif name.strip().lower() == \"class\":\n            column_indices[\"class\"] = column_names.index(name)\n        elif name.strip().lower() == \"name\":\n            column_indices[\"name\"] = column_names.index(name)\n\n    marks_sum = 0\n    for i in range(2, total_students + 2):\n        marks_sum += int(lines[i].split(\",\")[column_indices[\"marks\"]].strip())\n\n    average_marks = marks_sum / total_students\n    return \"{:.2f}\".format(average_marks)",
        "test": "assert solution(\"10\\nID MARKS NAME CLASS\\n1 98.5 blue Y\\n2 92.0 red M\\n3 91.0 green M\\n4 95.5 yellow Y\\n5 90.5 orange Y\\n6 93.0 blue Y\\n7 89.5 green M\\n8 94.0 red M\\n9 97.0 yellow Y\\n10 96.5 orange Y\") == \"94.30\"",
        "indeed": false
    },
    {
        "number": 4666,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 != 0:\n        return \"Weird\"\n    elif 2 <= n <= 5:\n        return \"Not Weird\"\n    elif 6 <= n <= 20:\n        return \"Weird\"\n    else:\n        return \"Not Weird\"",
        "test": "assert solution(\"5\") == \"Weird\"",
        "indeed": true
    },
    {
        "number": 4667,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    import xml.etree.ElementTree as ET\n\n    # parse the XML string\n    root = ET.fromstring(stdin)\n\n    # recursively calculate the score of each element\n    def calculate_score(element):\n        score = 0\n        for child in element:\n            score += calculate_score(child)\n        return len(element.attrib) + score\n\n    # return the score of the root element\n    return str(calculate_score(root))",
        "test": "assert solution(\"4\\n<a>\\n\\t<b c='d' e='f'/>\\n\\t<c>\\n\\t\\t<d g='h' i='j'/>\\n\\t</c>\\n</a>\\n<b/>\\n<c>\\n\\t<d/>\\n\\t<e/>\\n</c>\\n<d/>\\n\") == \"9\"",
        "indeed": false
    },
    {
        "number": 4668,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(lambda x: list(map(float, x.split())), stdin.split())\n    AB = np.subtract(B, A)\n    BC = np.subtract(C, B)\n    CD = np.subtract(D, C)\n    X = np.cross(AB, BC)\n    Y = np.cross(BC, CD)\n    cos_phi = np.dot(X, Y) / (np.linalg.norm(X) * np.linalg.norm(Y))\n    phi = np.arccos(cos_phi)\n    return f\"{np.degrees(phi):.2f}\"",
        "test": "assert solution(\"1 0 0 0 0 1 1 0 0\") == \"135.00\"",
        "indeed": false
    },
    {
        "number": 4669,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    words = stdin.split(\"\\n\")[1].split()\n    score = score_words(words)\n    return str(score)\n\ndef",
        "test": "assert solution(\"\"\"2",
        "indeed": false
    },
    {
        "number": 4670,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    roman_numeral_pattern = r\"^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$\"\n    if re.match(roman_numeral_pattern, stdin):\n        return \"True\"\n    else:\n        return \"False\"",
        "test": "assert solution(\"II\") == \"True\"",
        "indeed": true
    },
    {
        "number": 4671,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    mobile_numbers = stdin.split(\"\\n\")[1:]\n    mobile_numbers = [\"+91\" + num.strip() if num.strip().startswith(\"91\") else num.strip() for num in mobile_numbers]\n    mobile_numbers = sorted(mobile_numbers)\n    formatted_mobile_numbers = [f\"+91 {num[3:]} {num[3:]}\" if num.startswith(\"+91\") else f\"+91 {num} {num}\" for num in mobile_numbers]\n    return \"\\n\".join(formatted_mobile_numbers)\n\ndef",
        "test": "assert solution(\"4\\n91123456789\\n091987654321\\n919876543210\\n987654321\") == \"091987654321\\n919876543210\\n987654321\\n91123456789\\n\"",
        "indeed": false
    },
    {
        "number": 4672,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    marks = {}\n    for i in range(1, n+1):\n        name, marks_str = lines[i].split()\n        marks[name] = [int(m) for m in marks_str.split(',')]\n    query_name = lines[n+1]\n\n    query_marks = marks[query_name]\n    avg_marks = sum(query_marks) / len(query_marks)\n\n    return f\"The average of the marks obtained by the particular student correct to 2 decimal places is: {avg_marks:.2f}\"",
        "test": "assert solution(\"3\\nalpha 20 30 40\\nbeta 30 50 70\\ngamma 80 90 95\\nbeta\") == \"50.00\"",
        "indeed": false
    },
    {
        "number": 4673,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    people = stdin.split(\"\\n\")\n    N = int(people[0])\n    people = people[1:]\n    people_list = []\n\n    for person in people:\n        first_name, last_name, age, sex = person.split(\" \")\n        people_list.append(Person(first_name, last_name, int(age), sex))\n\n    sorted_people_list = sorted(people_list, key=lambda x: (x.age, people_list.index(x)))\n\n    result = []\n    for person in sorted_people_list:\n        result.append(person.get_formatted_name())\n\n    return \"\\n\".join(result)\n\n\nclass Person:\n    def __init__(self, first_name: str, last_name: str, age: int, sex: str):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n        self.sex = sex\n\n    def get_formatted_name(self) -> str:\n        salutation = \"Mr.\" if self.sex == \"M\" else \"Ms.\"\n        return f\"{salutation} {self.first_name} {self.last_name}\"",
        "test": "assert solution(\"1\\nHenry Davids 25 M\") == \"Mr. Henry Davids\"",
        "indeed": true
    },
    {
        "number": 4674,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, n = map(int, stdin.split())\n    coords = [(i, j, k) for i in range(x + 1) for j in range(y + 1) for k in range(z + 1) if sum([i, j, k]) != n]\n    return str(coords)\n\nx = 1\ny = 1\nz = 2\nn = 3\nprint(solution(f\"{x}\\n{y}\\n{z}\\n{n}\"))",
        "test": "assert solution(\"1\\n1\\n2\\n3\") == \"[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,2]]\" ",
        "indeed": false
    },
    {
        "number": 4675,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    real, imag = map(float, stdin.split())\n    a, b = complex(real, imag), complex(real, imag)\n    print(f\"{a+b:.2f}\")\n    print(f\"{a-b:.2f}\")\n    print(f\"{a*b:.2f}\")\n    print(f\"{a/b:.2f}\")\n    print(f\"{abs(a):.2f}\")\n    print(f\"{abs(b):.2f}\")\n    \n",
        "test": "assert solution(\"0 1\") == \"0.00+1.00i\\n0.00-1.00i\\n0.00+0.00i\\n0.00+0.00i\\n0.00+0.00i\\n0.00+1.00i\\n\"",
        "indeed": false
    },
    {
        "number": 4676,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    odd, even = stdin.split(\"\\n\")\n    password = \"\"\n    for i in range(len(odd)):\n        password += odd[i]\n        if i < len(even):\n            password += even[i]\n    return password",
        "test": "assert solution(\"abc\") == \"xyzzbc\"",
        "indeed": true
    },
    {
        "number": 4677,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    stack = []\n\n    for char in s:\n        if char == '0':\n            stack.append('0')\n        elif char == '1':\n            stack.append('1')\n        elif char == 'B' and stack:\n            stack.pop()\n\n    return ''.join(stack)",
        "test": "assert solution('01B0') == '00'",
        "indeed": true
    },
    {
        "number": 4678,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n\n    # initialize stools\n    stools = [0] * N\n    total_height = 0\n\n    # iterate through the persons\n    for i in range(N):\n        # if the person is taller than the current stool\n        if A[i] > stools[i]:\n            # set the stool height to the person's height\n            stools[i] = A[i]\n\n        # update the total height\n        total_height += stools[i]\n\n    return str(total_height)\n",
        "test": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"  # Sample Output",
        "indeed": false
    },
    {
        "number": 4679,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S_A, S_B, S_C = stdin.split()\n    deck_A = list(S_A)\n    deck_B = list(S_B)\n    deck_C = list(S_C)\n\n    while deck_A and deck_B and deck_C:\n        discarded = deck_A.pop(0)\n        if discarded == 'a':\n            turn = 'B'\n        elif discarded == 'b':\n            turn = 'C'\n        else:\n            turn = 'A'\n\n        if turn == 'B':\n            discarded = deck_B.pop(0)\n            if discarded == 'a':\n                turn = 'C'\n            elif discarded == 'b':\n                turn = 'A'\n            else:\n                turn = 'B'\n        elif turn == 'C':\n            discarded = deck_C.pop(0)\n            if discarded == 'a':\n                turn = 'A'\n            elif discarded == 'b':\n                turn = 'B'\n            else:\n                turn = 'C'\n\n    if deck_A:\n        return 'A'\n    elif deck_B:\n        return 'B'\n    else:\n        return 'C'",
        "test": "assert solution(\"abc\\nbcc\\naa\\n\") == \"B\"",
        "indeed": false
    },
    {
        "number": 4680,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n\n    if A + B + C != 17 or A == 5 or B == 7 or C == 5:\n        return \"NO\"\n    else:\n        return \"YES\"",
        "test": "assert solution(\"7 7 7\") == \"NO\"",
        "indeed": false
    },
    {
        "number": 4681,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    if N == 0:\n        return str(2)\n    elif N == 1:\n        return str(1)\n    else:\n        lucas_0 = 2\n        lucas_1 = 1\n        \n        for i in range(2, N+1):\n            lucas = lucas_0 + lucas_1\n            lucas_0 = lucas_1\n            lucas_1 = lucas\n            \n        return str(lucas)",
        "test": "assert solution(\"5\") == \"11\"  # Test case 1",
        "indeed": true
    },
    {
        "number": 4682,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    area = (a + b) * h // 2\n    return str(area)",
        "test": "assert solution(\"3\\n4\\n2\") == \"7\"",
        "indeed": true
    },
    {
        "number": 4683,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the sum of A_i * A_j over all pairs (i,j) such that 1<= i < j <= N, modulo (10^9+7).\n    \"\"\"\n    N, *A = map(int, stdin.split())\n\n    result = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            result = (result + A[i] * A[j]) % (10**9 + 7)\n\n    return str(result)",
        "test": "assert solution(\"3\\n1 2 3\") == \"11\"",
        "indeed": true
    },
    {
        "number": 4684,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    number = r * 100 + g * 10 + b\n\n    if number % 4 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"4 3 2\") == \"YES\"",
        "indeed": true
    },
    {
        "number": 4685,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    max_sum = max(2 * A, 2 * B, 2 * C)\n    \n    if K > 1:\n        max_sum += 2 * max(A, B, C)\n        \n    return str(max_sum)",
        "test": "assert solution(\"1 2 3\\n2\") == \"12\"",
        "indeed": false
    },
    {
        "number": 4686,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    w = stdin\n    count = {}\n    for char in w:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n\n    for value in count.values():\n        if value % 2 != 0:\n            return \"No\"\n\n    return \"Yes\"",
        "test": "assert solution(\"abaccaba\") == \"Yes\"",
        "indeed": true
    },
    {
        "number": 4687,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    n, k = map(int, input_lines[0].split())\n    operations = [tuple(map(int, line.split())) for line in input_lines[1:n+1]]\n\n    array = []\n    for a, b in operations:\n        array += [a] * b\n\n    array.sort()\n    return str(array[k-1])",
        "test": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == \"3\"",
        "indeed": true
    },
    {
        "number": 4688,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N == 1 or K == 1:\n        return \"1\"\n    if N == 2:\n        return str(K)\n    dp = [0] * (K+1)\n    dp[1] = 1\n    for i in range(2, N+1):\n        temp = dp[:]\n        for j in range(1, K+1):\n            dp[j] = sum(temp[:j]) + temp[j]\n    return str(dp[-1]) ",
        "test": "assert solution('2 2') == '2'",
        "indeed": false
    },
    {
        "number": 4689,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    K, N = map(int, stdin.split()[:2])\n    A = list(map(int, stdin.split()[2:]))\n\n    if N == 1:\n        return \"0\"\n\n    A.sort()\n    min_dist = float(\"inf\")\n\n    for i in range(N - 1):\n        dist = A[i + 1] - A[i]\n        if dist < min_dist:\n            min_dist = dist\n\n    return str(min_dist)",
        "test": "assert solution(\"10 2\\n2 8\") == \"6\"",
        "indeed": false
    },
    {
        "number": 4690,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    area1 = a * b\n    area2 = c * d\n    if area1 > area2:\n        return str(area1)\n    elif area2 > area1:\n        return str(area2)\n    else:\n        return str(area1)",
        "test": "assert solution(\"3 5 2 7\") == \"15\"",
        "indeed": true
    },
    {
        "number": 4691,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    AC, WA, TLE, RE = 0, 0, 0, 0\n\n    for i in range(1, N + 1):\n        verdict = lines[i]\n        if verdict == \"AC\":\n            AC += 1\n        elif verdict == \"WA\":\n            WA += 1\n        elif verdict == \"TLE\":\n            TLE += 1\n        else:\n            RE += 1\n\n    return f\"AC x {AC}\\nWA x {WA}\\nTLE x {TLE}\\nRE x {RE}\\n\"",
        "test": "assert solution(\"6\\nAC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\\n\"",
        "indeed": false
    },
    {
        "number": 4692,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    M = int(stdin)\n    if M < 1 or M > 23:\n        return \"Invalid input\"\n    \n    new_year_time = datetime.datetime(2022, 1, 1, M, 0, 0)\n    now_time = datetime.datetime.now()\n    time_diff = new_year_time - now_time\n    hours_until_new_year = int(time_diff.total_seconds() // 3600)\n\n    return str(hours_until_new_year)\n\nstdin = input()\nprint(solution(stdin))",
        "test": "assert solution(\"21\") == \"27\" ",
        "indeed": false
    },
    {
        "number": 4693,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    if A + B >= 10:\n        return \"error\"\n    else:\n        return str(A + B)",
        "test": "assert solution(\"6 3\") == \"9\"",
        "indeed": true
    },
    {
        "number": 4694,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input and parse it\n    N, *coordinates = list(map(int, stdin.split()))\n    \n    # Sort the coordinates\n    coordinates.sort()\n    \n    # Calculate the distance to be traveled\n    distance = 0\n    for i in range(1, len(coordinates)):\n        distance += coordinates[i] - coordinates[i-1]\n    \n    return str(distance)",
        "test": "assert solution('4\\n2 3 7 9') == '7'",
        "indeed": true
    },
    {
        "number": 4695,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    group_1 = [1, 2, 3]\n    group_2 = [4, 5, 6]\n    group_3 = [7, 8, 9, 10, 11, 12]\n\n    if x in group_1 and y in group_1:\n        return \"Yes\"\n    elif x in group_2 and y in group_2:\n        return \"Yes\"\n    elif x in group_3 and y in group_3:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1 3\") == \"Yes\"",
        "indeed": true
    },
    {
        "number": 4696,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    product = a * b\n    return \"Even\" if product % 2 == 0 else \"Odd\"",
        "test": "assert solution(\"3 4\") == \"Even\"  # Even",
        "indeed": true
    },
    {
        "number": 4697,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    max_scc_groups = 0\n    \n    # Check if there are enough S-shaped pieces\n    if N == 0:\n        return str(max_scc_groups)\n    \n    # Check if there are enough c-shaped pieces\n    if M < 2:\n        return str(max_scc_groups)\n    \n    # Check if there are enough pieces for a single Scc group\n    if N + M < 3:\n        return str(max_scc_groups)\n    \n    # Calculate the maximum number of Scc groups\n    max_scc_groups = (N + M - 2) // 3\n    \n    return str(max_scc_groups)",
        "test": "assert solution(\"2 5\") == \"6\\n\"",
        "indeed": false
    },
    {
        "number": 4698,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    times = list(map(int, lines[1].split()))\n    M = int(lines[2])\n    drinks = list(map(lambda x: tuple(map(int, x.split())), lines[3:3+M]))\n\n    # calculate results\n    results = []\n    for drink in drinks:\n        new_times = [t if i != drink[0] else t + drink[1] for i, t in enumerate(times, 1)]\n        total_time = sum(new_times)\n        results.append(total_time)\n\n    # return results\n    return '\\n'.join(map(str, results))",
        "test": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"",
        "indeed": false
    },
    {
        "number": 4699,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K, digits_str = stdin.split()\n    N, K = int(N), int(K)\n    disliked_digits = set(digits_str.split())\n    disliked_digits = set(map(int, disliked_digits))\n\n    # Find the smallest amount of money that satisfies the constraints\n    min_amount = None\n    for amount in range(N, 10001):\n        amount_str = str(amount)\n        if all(digit not in disliked_digits for digit in amount_str):\n            min_amount = amount\n            break\n\n    return str(min_amount)",
        "test": "assert solution(\"1000 1\\n9\\n\") == \"100\"",
        "indeed": false
    },
    {
        "number": 4700,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    H = list(map(int, lines[1].split()))\n    A = [0] * M\n    B = [0] * M\n    for i in range(M):\n        A[i], B[i] = map(int, lines[2 + i].split())\n\n    def is_good(obs: int) -> bool:\n        for i in range(M):\n            if (obs == A[i] and H[obs] <= H[B[i]]) or (obs == B[i] and H[obs] <= H[A[i]]):\n                return False\n        return True\n\n    count = 0\n    for i in range(N):\n        if is_good(i):\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4701,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    value = 1\n    for _ in range(N):\n        if value % 2 == 0:\n            value //= 2\n        else:\n            value += K\n    return str(value)",
        "test": "assert solution(\"1\\n2\") == \"10\"",
        "indeed": false
    },
    {
        "number": 4702,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    if x == 0:\n        return \"1\"\n    else:\n        return \"0\"",
        "test": "assert solution(\"0\") == \"1\"",
        "indeed": true
    },
    {
        "number": 4703,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    import re\n\n    # Parse the input string\n    input_str = stdin.strip()\n\n    # Define a regular expression pattern to match all possible formulas\n    pattern = r\"(?:\\d+(?:\\+\\d+)*\\d+|\\d+)\"\n    formulas = re.findall(pattern, input_str)\n\n    # Calculate the sum of evaluated formulas\n    total_sum = sum(eval(formula) for formula in formulas)\n\n    # Return the result\n    return str(total_sum)",
        "test": "assert solution(\"12\") == \"13\"",
        "indeed": false
    },
    {
        "number": 4704,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    cards = list(map(int, stdin.split()))\n    n = cards.pop(0)\n    if n % 2 != 0:\n        cards.append(0)\n        n += 1\n\n    snuke_cards = cards[:n//2]\n    raccoon_cards = cards[n//2:]\n\n    x = sum(snuke_cards)\n    y = sum(raccoon_cards)\n\n    return str(abs(x - y))",
        "test": "assert solution(\"10\\n10 10 10 10 10 10 10 10 10 10\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4705,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    meal_price = 800\n    special_offer_price = 200\n    total_cost = N * meal_price\n    total_special_offer_paid = N // 15 * special_offer_price\n    return str(total_cost - total_special_offer_paid)",
        "test": "assert solution('20') == '15800'",
        "indeed": true
    },
    {
        "number": 4706,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_grid = stdin.split(\"\\n\")\n    diagonal_string = \"\"\n    for i in range(3):\n        diagonal_string += input_grid[i][i]\n    return diagonal_string",
        "test": "assert solution(\"ant\\nobe\\nrec\") == \"abc\"",
        "indeed": true
    },
    {
        "number": 4707,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = map(int, stdin)\n    count = 0\n\n    if s1 == 1:\n        count += 1\n\n    if s2 == 1:\n        count += 1\n\n    if s3 == 1:\n        count += 1\n\n    return str(count)",
        "test": "assert solution(\"101\") == \"2\" ",
        "indeed": true
    },
    {
        "number": 4708,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, K, X, Y = map(int, stdin.split())\n\n    if K >= N:\n        return str(N * X)\n\n    return str(X * K + Y * (N - K))",
        "test": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"  # expected output",
        "indeed": true
    },
    {
        "number": 4709,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, op, b = stdin.split()\n    if op == \"+\":\n        return str(int(a) + int(b))\n    elif op == \"-\":\n        return str(int(a) - int(b))\n    else:\n        raise ValueError(\"Invalid operator\")",
        "test": "assert solution(\"1 + 2\") == \"3\"",
        "indeed": true
    },
    {
        "number": 4710,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 1200:\n        return \"ABC\"\n    else:\n        return \"ARC\"",
        "test": "assert solution('1000') == 'ABC'",
        "indeed": true
    },
    {
        "number": 4711,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    min_price = min(a+b, a+c, b+c)\n    return str(min_price)",
        "test": "assert solution(\"700 600 780\") == \"1300\"",
        "indeed": true
    },
    {
        "number": 4712,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split()[0:2])\n    image = stdin.split('\\n')[1:]\n    output = []\n\n    output.append(''.join(['#' for _ in range(W+2)]))\n    for row in image:\n        output.append('#' + row + '#')\n    output.append(''.join(['#' for _ in range(W+2)]))\n\n    return '\\n'.join(output)",
        "test": "assert solution(\"1 1\\na\") == \"###\\n#a#\\n###\"",
        "indeed": true
    },
    {
        "number": 4713,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    S = stdin.split('\\n')[1]\n    x = 0\n    max_x = 0\n\n    for s in S:\n        if s == 'I':\n            x += 1\n        else:\n            x -= 1\n        max_x = max(max_x, x)\n\n    return str(max_x)",
        "test": "assert solution(\"5\\nIIDID\") == \"2\"",
        "indeed": true
    },
    {
        "number": 4714,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    count = 0\n\n    for i in range(A, B + 1):\n        if str(i) == str(i)[::-1]:\n            count += 1\n\n    return str(count)\n",
        "test": "assert solution(\"11009 11332\") == \"4\"",
        "indeed": true
    },
    {
        "number": 4715,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    colors = set([a, b, c])\n    return f\"{len(colors)}\"",
        "test": "assert solution(\"1 2 3\") == \"2\\nTwo different colors: 1 and 2.\"",
        "indeed": true
    },
    {
        "number": 4716,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    sticks = list(map(int, stdin.split()[2:]))\n    \n    sticks.sort(reverse=True)\n    \n    total_length = 0\n    for i in range(k):\n        total_length += sticks[i]\n    \n    return str(total_length)\n",
        "test": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\"",
        "indeed": true
    },
    {
        "number": 4717,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    dist_a = abs(x - a)\n    dist_b = abs(x - b)\n    return \"A\" if dist_a < dist_b else \"B\"",
        "test": "assert solution(\"5 2 7\") == \"B\"",
        "indeed": true
    },
    {
        "number": 4718,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    year, month, day = stdin.split('/')\n    year = '2018'\n    return f\"{year}/{month}/{day}\"",
        "test": "assert solution(\"2017/01/07\") == \"2018/01/07\"",
        "indeed": true
    },
    {
        "number": 4719,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    strings = lines[1:]\n\n    longest_strings = set()\n\n    for string1 in strings:\n        for string2 in strings:\n            if string1 != string2:\n                for string3 in strings:\n                    if string2 != string3 and string1 != string3:\n                        combined_string = string1 + string2 + string3\n                        longest_strings.add(combined_string)\n\n    if not longest_strings:\n        return \"\"\n\n    return min(longest_strings)",
        "test": "assert solution(\"2\\naaa\\naaa\") == \"\"",
        "indeed": false
    },
    {
        "number": 4720,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    groups = stdin.strip().split(\"\\n\")\n    N = int(groups[0])\n    occupied_seats = set()\n\n    for i in range(1, N + 1):\n        l, r = map(int, groups[i].split())\n        for seat in range(l, r + 1):\n            occupied_seats.add(seat)\n\n    return str(len(occupied_seats))",
        "test": "assert solution(\"1\\n24 30\") == \"7\"",
        "indeed": true
    },
    {
        "number": 4721,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    blocks = (n-1) * (m-1)\n    return str(blocks)",
        "test": "assert solution(\"3 4\") == \"6\"",
        "indeed": true
    },
    {
        "number": 4722,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return \"Possible\"\n    elif A == 0 or B == 0:\n        return \"Possible\"\n    elif A % 2 == 0 and B % 2 == 0:\n        return \"Possible\"\n    else:\n        return \"Impossible\"",
        "test": "assert solution(\"10 10\") == \"Possible\"",
        "indeed": false
    },
    {
        "number": 4723,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split('\\n')[0]\n    T = stdin.split('\\n')[1]\n    S_prime = S.replace('?', '')\n\n    for i in range(len(S)):\n        if S[i:i+len(T)] == T:\n            S_prime = S_prime.replace(S[i], '')\n\n    for i in range(len(S)):\n        if S[i] == '?':\n            for c in 'abcdefghijklmnopqrstuvwxyz':\n                S_temp = S[:i] + c + S[i+1:]\n                if S_temp == S_prime:\n                    return S_prime\n\n    return 'UNRESTORABLE'",
        "test": "assert solution(\"?t???\\ncoder\") == \"UNRESTORABLE\"",
        "indeed": false
    },
    {
        "number": 4724,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    R, G = map(int, stdin.split())\n    performance_required = (G + R) / 2\n    return str(performance_required)",
        "test": "assert solution(\"1\\n1000\\n\") == \"500.5\"",
        "indeed": false
    },
    {
        "number": 4725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    stdin = sorted(set(stdin))\n    return len(stdin) - 1",
        "test": "assert solution('letter') == 2",
        "indeed": false
    },
    {
        "number": 4726,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    m, n, t = map(int, stdin.split())\n    if t == 1:\n        time_complexity = n * (n - 1) / 2\n    elif t == 2:\n        time_complexity = 2 ** n\n    elif t == 3:\n        time_complexity = n ** 4\n    elif t == 4:\n        time_complexity = n ** 3\n    elif t == 5:\n        time_complexity = n ** 2\n    elif t == 6:\n        time_complexity = n * (n ** (log2(n)))\n    elif t == 7:\n        time_complexity = n\n\n    if time_complexity <= m:\n        return \"AC\"\n    else:\n        return \"TLE\"",
        "test": "assert solution(\"100000000 500 3\") == \"TLE\"",
        "indeed": false
    },
    {
        "number": 4727,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def merge_tiles(grid: List[List[int]]) -> List[List[int]]:\n        def merge_horizontal(row: List[int]) -> List[int]:\n            merged_row = []\n            current_tile = None\n            for tile in row:\n                if tile == 0:\n                    merged_row.append(0)\n                elif current_tile is None:\n                    current_tile = tile\n                    merged_row.append(tile)\n                elif tile == current_tile:\n                    merged_row[-1] += current_tile\n                    current_tile = None\n                    merged_row.append(0)\n                else:\n                    merged_row.append(current_tile)\n                    current_tile = tile\n            if current_tile is not None:\n                merged_row[-1] += current_tile\n            return merged_row\n\n        return [merge_horizontal(row) for row in grid]\n\n    grid = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[:-1]]\n    move = int(stdin.split(\"\\n\")[-1])\n\n    if move == 0:\n        return \"\\n\".join([\" \".join(map(str, row)) for row in grid])\n    elif move == 1:\n        for i in range(1, 4):\n            grid[i], grid[i - 1] = grid[i - 1], grid[i]\n    elif move == 2:\n        for i in range(len(grid)):\n            grid[i] = grid[i][::-1]\n    elif move == 3:\n        for i in range(1, len(grid)):\n            grid[i], grid[i - 1] = grid[i - 1], grid[i]\n\n    merged_grid = merge_tiles(grid)\n\n    return \"\\n\".join([\" \".join(map(str, row)) for row in merged_grid])",
        "test": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\\n\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n\"",
        "indeed": false
    },
    {
        "number": 4728,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_molecule, k, output_molecule = stdin.split()\n    k = int(k)\n\n    # Helper function to check if a molecule can be formed by another\n    def can_form_molecule(molecule1: str, molecule2: str) -> bool:\n        molecule1_dict = {}\n        molecule2_dict = {}\n\n        # Count the number of atoms in each molecule\n        for atom in molecule1:\n            if atom.isdigit():\n                molecule1_dict[atom] = molecule1_dict.get(atom, 0) + 1\n            else:\n                molecule1_dict[atom] = 1\n\n        for atom in molecule2:\n            if atom.isdigit():\n                molecule2_dict[atom] = molecule2_dict.get(atom, 0) + 1\n            else:\n                molecule2_dict[atom] = 1\n\n        # Check if each atom in molecule2 is present in molecule1\n        for atom in molecule2_dict:\n            if atom not in molecule1_dict or molecule1_dict[atom] < molecule2_dict[atom]:\n                return False\n\n        return True\n\n    # Count the number of possible output molecules\n    n = 0\n    for i in range(k):\n        if can_form_molecule(input_molecule, output_molecule):\n            n += 1\n\n    return str(n)",
        "test": "assert solution(\"H 2\\nO\\n\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4729,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    password, message = stdin.split()\n    password_set = set(password)\n    password_length = len(password)\n    message_length = len(message)\n\n    for i in range(password_length):\n        if password[i] not in password_set:\n            return \"FAIL\"\n\n    for i in range(password_length):\n        index = message.find(password[i])\n        if index == -1:\n            return \"FAIL\"\n        message = message[index + 1:]\n\n    return \"PASS\"\n",
        "test": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"",
        "indeed": false
    },
    {
        "number": 4730,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for i, c in enumerate(stdin):\n        if c in \"([{\":\n            stack.append((c, i))\n        elif c in \")]}\":\n            if not stack:\n                return c + \" \" + str(i)\n            open_delimiter, j = stack.pop()\n            if c == \")\" and open_delimiter != \"(\":\n                return c + \" \" + str(i)\n            elif c == \"]\" and open_delimiter != \"[\":\n                return c + \" \" + str(i)\n            elif c == \"}\" and open_delimiter != \"{\":\n                return c + \" \" + str(i)\n    if stack:\n        return \"ok so far\"\n    else:\n        return \"syntax error\"\n",
        "test": "assert solution(\"13\\n(([] [[]] ())\") == \"ok so far\"",
        "indeed": false
    },
    {
        "number": 4731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    words = [word.strip() for word in stdin.split('\\n') if word.strip()]\n    if len(words) < 2:\n        return \"Fair Game\"\n\n    def is_valid_word(word, last_letter):\n        return word[0] == last_letter\n\n    last_letter = words[0][-1]\n    for i in range(1, len(words)):\n        if not is_valid_word(words[i], last_letter):\n            return f\"Player {i % 2 + 1} lost\"\n        last_letter = words[i][-1]\n\n    return \"Fair Game\"",
        "test": "assert solution(\"3\\napple\\nextra\\napple\") == \"Player 1 lost\"",
        "indeed": false
    },
    {
        "number": 4732,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, operation, B = stdin.splitlines()\n    A = int(A)\n    B = int(B)\n    \n    if operation == '+':\n        result = A + B\n    elif operation == '*':\n        result = A * B\n    \n    return str(result)",
        "test": "assert solution(\"1000\\n*\\n100\\n\") == \"100000\"",
        "indeed": true
    },
    {
        "number": 4733,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    deck_size, shuffle_type = stdin.split()\n    deck_size = int(deck_size)\n    \n    if shuffle_type == 'out':\n        shuffles = 1\n        while deck_size > 2:\n            deck_size //= 2\n            shuffles += 1\n    else:\n        shuffles = 0\n        while deck_size > 1:\n            deck_size //= 2\n            shuffles += 1\n    \n    return f\"{shuffles}\"",
        "test": "assert solution(\"8 out\") == \"3\"",
        "indeed": false
    },
    {
        "number": 4734,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    Y, P = stdin.split()\n    if Y.endswith(\"e\"):\n        return Y + \"x\" + P\n    elif Y[-1] in \"aiou\":\n        return Y[:-1] + \"ex\" + P\n    else:\n        return Y + \"ex\" + P",
        "test": "assert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"",
        "indeed": false
    },
    {
        "number": 4735,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    if (year - 2018) % 26 == 0:\n        return \"yes\"\n    return \"no\"",
        "test": "assert solution('2018') == 'yes'",
        "indeed": false
    },
    {
        "number": 4736,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[-1].split())\n    d = [int(i) for i in stdin.splitlines()[0].split()]\n    result = 0\n\n    for i in range(1, k):\n        result += d[i - 1] * d[i]\n\n    return str(result)",
        "test": "assert solution(\"4 0 0 0 4 0 0 0 0 4\\n4\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, p = map(int, stdin.split())\n    estimates = list(map(int, stdin.split()))\n    estimates.sort(reverse=True)\n    time_limit = 300\n    penalty = 0\n    num_AC = 0\n\n    for i in range(N):\n        if estimates[i] > time_limit:\n            continue\n        time_limit -= estimates[i]\n        num_AC += 1\n        if i == p:\n            penalty = time_limit\n\n    return f\"{num_AC} {penalty}\"",
        "test": "assert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\\n\"",
        "indeed": false
    },
    {
        "number": 4738,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = 1\n\n    while k * len(s) >= len(s):\n        period = s[:k]\n        if all(s[i:i+k] == period for i in range(k, len(s), k)):\n            return str(k)\n        k += 1\n\n    return \"No k-periodic string found\"",
        "test": "assert solution(\"aaaaaaaa\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split()[0:2])\n    T = list(map(int, stdin.split()[2:M+2]))\n    X = list(map(int, stdin.split()[M+2:]))\n    \n    speeds = set()\n    distances = set()\n    \n    for i in range(len(T)-1):\n        for j in range(i+1, len(T)):\n            speeds.add(X[j] - X[i])\n            distances.add(X[i+1] - X[i])\n    \n    return f\"{len(speeds)}\\n{' '.join(map(str, sorted(list(distances))))}\"\n\ninput_string = input()\nprint(solution(input_string)) ",
        "test": "assert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n\") == \"1\\n1\\n\"",
        "indeed": false
    },
    {
        "number": 4740,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) != 7:\n        return \"Invalid input\"\n    if stdin[:3] == \"555\":\n        return \"1\"\n    else:\n        return \"0\"",
        "test": "assert solution(\"5551212\") == \"1\"",
        "indeed": true
    },
    {
        "number": 4741,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\"/\"))\n    c = 9*a/5 - 32*b/5\n    d = 5*b\n    gcd = math.gcd(c, d)\n    return f\"{c//gcd}/{d//gcd}\"\n\ndef",
        "test": "assert solution(\"33/1\") == \"5/9\"",
        "indeed": false
    },
    {
        "number": 4742,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin.splitlines()[0])\n    melody1 = stdin.splitlines()[1].split()\n    melody2 = stdin.splitlines()[2].split()\n\n    def transposition(melody1, melody2):\n        notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n        for i in range(len(notes)):\n            if notes[i] in melody2 and notes[(i + len(melody1)) % len(notes)] in melody1:\n                return True\n        return False\n\n    def retrograde(melody1, melody2):\n        if list(reversed(melody2)) == melody1:\n            return True\n        return False\n\n    def inversion(melody1, melody2):\n        if melody2[0] == melody1[0]:\n            for i in range(1, len(melody1)):\n                if notes.index(melody1[i]) - notes.index(melody2[i]) != notes.index(melody1[i - 1]) - notes.index(melody2[i - 1]):\n                    return False\n            return True\n        return False\n\n    if transposition(melody1, melody2):\n        return \"Transposition\"\n    elif retrograde(melody1, melody2):\n        return \"Retrograde\"\n    elif inversion(melody1, melody2):\n        return \"Inversion\"\n    else:\n        return \"Nonsense\"",
        "test": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"",
        "indeed": false
    },
    {
        "number": 4743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def replace_first_letter(word: str) -> str:\n        consonants = \"bcdgknpth\"\n        index = consonants.index(word[0])\n        return consonants[(index + 1) % len(consonants)] + word[1:]\n\n    def replace_hard_consonant(word: str) -> str:\n        start_char = word[0]\n        consonants = \"bcdgknpth\"\n        index = consonants.index(start_char)\n        return consonants[index] + word[1:]\n\n    def translate_word(word: str) -> str:\n        word = word.replace(\"-\", \"\")\n        if word == \"each\":\n            return \"dach\"\n        elif \"hip-po\" in word:\n            return word.replace(\"hip-po\", \"gip-go\")\n        elif word[-1] in \"bcdgknpth\":\n            return word + replace_first_letter(word[-1])\n        else:\n            return word\n\n    words = stdin.split()\n    translated_words = [translate_word(word) for word in words]\n    return \" \".join(translated_words)",
        "test": "assert solution(\"Cat-a-pil-lar\") == \"Catacillar\"",
        "indeed": false
    },
    {
        "number": 4744,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    V = int(stdin)\n    \n    # Calculate the dimensions of the box\n    box_length = int(V**(1/3))\n    box_width = box_length\n    box_height = V // (box_length * box_width)\n\n    # Calculate the cost of the box\n    cost = (2 * box_length * box_width) + (2 * box_width * box_height) + (2 * box_height * box_length)\n\n    return str(cost)\n\ndef",
        "test": "assert solution(\"4\") == \"16\"",
        "indeed": false
    },
    {
        "number": 4745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, X = map(int, stdin.split())\n    prices = list(map(int, input().split()))\n    \n    prices.sort(reverse=True)\n    \n    max_items = 0\n    total = 0\n    \n    for price in prices:\n        if total + price > X:\n            break\n        total += price\n        max_items += 1\n    \n    return str(max_items)",
        "test": "assert solution(\"5 10\\n4 8 1 9 7\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4746,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_consistent(total_capacity, train_stops):\n        total_passengers = sum(map(lambda x: x[0] + x[1], train_stops))\n        if total_passengers > total_capacity:\n            return False\n        \n        prev_passengers = 0\n        for stop in train_stops:\n            passengers_left = stop[0]\n            passengers_entered = stop[1]\n            passengers_in_station = stop[2]\n            if passengers_left + passengers_entered + passengers_in_station > total_capacity:\n                return False\n            if prev_passengers - passengers_left + passengers_entered + passengers_in_station < prev_passengers:\n                return False\n            prev_passengers = passengers_left + passengers_entered\n        \n        return True\n    \n    total_capacity, num_stops = map(int, stdin.splitlines()[0].split())\n    train_stops = [list(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    \n    if is_consistent(total_capacity, train_stops):\n        return \"possible\"\n    else:\n        return \"impossible\"\n\ninput_str = \"\"\"1 2\n0 1 1\n1 0 0\"\"\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"1 2\\n1 0 0\\n0 1 0\") == \"impossible\"",
        "indeed": false
    },
    {
        "number": 4747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return \"1.0000000\"\n    if k == 1:\n        return str(n / 2)\n    expected_score = (n * (n + 1)) / (2 * n - 2)\n    return f\"{expected_score:.7f}\"",
        "test": "assert abs(float(solution(\"2 3\")) - 1.875) <= 10**-7",
        "indeed": false
    },
    {
        "number": 4748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, N, M = map(int, stdin.split())\n    \n    # Calculate the number of extra bricks needed for each layer\n    extra_bricks = [0] * H\n    for i in range(1, H):\n        extra_bricks[i] = 2 * i - 1\n    \n    # Calculate the number of extra $2 \\times 2$ bricks and $4 \\times 2$ bricks needed\n    extra_2x2 = N\n    extra_4x2 = M\n    for i in range(1, H):\n        extra_2x2 += extra_bricks[i] - N\n        extra_4x2 += extra_bricks[i] - M\n    \n    # Check if there are enough bricks to build the pyramid\n    if extra_2x2 < 0 or extra_4x2 < 0:\n        return \"Cannot build pyramid\"\n    \n    # Return the minimum number of extra bricks needed\n    return str(min(extra_2x2, extra_4x2)) + \" \" + str(extra_2x2 - min(extra_2x2, extra_4x2))",
        "test": "assert solution(\"4 2 7\") == \"1 4\\n\"",
        "indeed": false
    },
    {
        "number": 4749,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    grid = [list(line.strip()) for line in stdin.split(\"\\n\")[1:]]\n\n    # Check if each row has the same number of black squares as white squares\n    row_black_counts = [grid[i].count(\"B\") for i in range(n)]\n    row_white_counts = [grid[i].count(\"W\") for i in range(n)]\n    if not all(row_black_counts[0] == count for count in row_black_counts) or not all(row_white_counts[0] == count for count in row_white_counts):\n        return \"0\"\n\n    # Check if each column has the same number of black squares as white squares\n    col_black_counts = [sum(grid[i][j] == \"B\" for i in range(n)) for j in range(n)]\n    col_white_counts = [sum(grid[i][j] == \"W\" for i in range(n)) for j in range(n)]\n    if not all(col_black_counts[0] == count for count in col_black_counts) or not all(col_white_counts[0] == count for count in col_white_counts):\n        return \"0\"\n\n    # Check if no row or column has 3 or more consecutive squares of the same color\n    for i in range(n):\n        for j in range(n - 2):\n            if grid[i][j] == grid[i][j + 1] == grid[i][j + 2]:\n                return \"0\"\n        if grid[i][0] == grid[i][1] == grid[i][2]:\n            return \"0\"\n    for j in range(n):\n        for i in range(n - 2):\n            if grid[i][j] == grid[i + 1][j] == grid[i + 2][j]:\n                return \"0\"\n        if grid[0][j] == grid[1][j] == grid[2][j]:\n            return \"0\"\n\n    return \"1\"",
        "test": "assert solution(\"4\\nBWWB\\nBWBB\\nWBBW\\nWBWW\") == \"0\"",
        "indeed": true
    },
    {
        "number": 4750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(queries):\n        l1, r1, l2, r2 = map(int, stdin.readline().strip().split())\n        a = max(l1, l2)\n        b = min(r1, r2)\n        result.append(f\"{a} {b}\")\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\\n\"",
        "indeed": false
    },
    {
        "number": 4751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes a string input containing the linked list head, the head of a linked list, and the position of the tail's next node.\n    It then checks if the linked list has a cycle in it.\n    If there is a cycle in the linked list, it returns 'true'.\n    Otherwise, it returns 'false'.\n    \"\"\"\n    # Convert the input string to a list of integers\n    input_list = [int(x) for x in stdin.split(',')]\n    \n    # Create the linked list\n    head = ListNode(input_list[0])\n    current_node = head\n    \n    for i in range(1, len(input_list)):\n        current_node.next = ListNode(input_list[i])\n        current_node = current_node.next\n    \n    # Get the position of the tail's next node\n    pos = input_list[-1]\n    \n    # Initialize two pointers, slow and fast, to traverse the linked list\n    slow = head\n    fast = head\n    \n    # Move the slow pointer one step and the fast pointer two steps at a time\n    # If there is a cycle in the linked list, the fast pointer will eventually catch up with the slow pointer\n    while fast.next and fast.next.next:\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            return 'true'\n    \n    # If there is no cycle in the linked list, return 'false'\n    return 'false' ",
        "test": "assert solution(\"[1,2] 0\") == \"true\"",
        "indeed": false
    },
    {
        "number": 4752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(x) for x in stdin.split(',')]\n    target = int(input(\"Enter the target value: \"))\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return f\"[{i}, {j}]\"\n    return \"No solution found\" ",
        "test": "assert solution([3, 2, 4], 6) == [1, 2] ",
        "indeed": false
    },
    {
        "number": 4753,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 3:\n        return \"0\"\n    else:\n        return str(n - 3)",
        "test": "assert solution(\"3\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4754,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    socks = stdin.split('\\n')[1].split(' ')\n\n    socks_dict = {}\n    for sock in socks:\n        if sock not in socks_dict:\n            socks_dict[sock] = 1\n        else:\n            socks_dict[sock] += 1\n\n    if len(socks_dict) % 2 == 1:\n        return \"impossible\"\n\n    pairs = len(socks) // 2\n    moves = 0\n    for key in socks_dict:\n        if socks_dict[key] % 2 == 1:\n            return \"impossible\"\n        moves += socks_dict[key] // 2\n\n    return moves\n\nstdin = \"\"\"2\n1 2 2 1\"\"\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"1\\n3 7\") == \"impossible\"",
        "indeed": false
    },
    {
        "number": 4755,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    price, zeros = map(int, stdin.split())\n    nearest_bill = 10 ** zeros\n    if price % nearest_bill < nearest_bill // 2:\n        return str(price - price % nearest_bill)\n    else:\n        return str(price + nearest_bill - price % nearest_bill)",
        "test": "assert solution(\"184 1\") == \"180\"",
        "indeed": true
    },
    {
        "number": 4756,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    num_citizens = int(lines[0])\n    citizen_coords = [(int(x), int(y)) for x, y in map(lambda x: x.split(), lines[1:])]\n\n    min_total_unusefulness = float('inf')\n    best_slope = 0\n\n    for slope in range(-1000, 1001):\n        total_unusefulness = 0\n        for x, y in citizen_coords:\n            unusefulness = (x + slope * y - x) ** 2\n            total_unusefulness += unusefulness\n\n        if total_unusefulness < min_total_unusefulness:\n            min_total_unusefulness = total_unusefulness\n            best_slope = slope\n\n    return '{:.6f}'.format(best_slope)",
        "test": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'",
        "indeed": false
    },
    {
        "number": 4757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    num_villagers, num_evenings = map(int, stdin.splitlines()[0].split())\n    villagers_present = [set() for _ in range(num_evenings)]\n    songs = set()\n    villagers_with_all_songs = set()\n    \n    # Parse input\n    for i, line in enumerate(stdin.splitlines()[1:]):\n        num_villagers_present, *present_villagers = map(int, line.split())\n        for villager in present_villagers:\n            villagers_present[i].add(villager)\n    \n    # Determine songs and villagers with all songs\n    for villager in range(1, num_villagers + 1):\n        for i in range(num_evenings):\n            if villager not in villagers_present[i]:\n                break\n            if i == num_evenings - 1:\n                songs.add(villager)\n                villagers_with_all_songs.add(villager)\n    \n    for i in range(num_evenings):\n        for villager in villagers_present[i]:\n            if villager != 1:\n                songs.add(villager)\n    \n    # Determine villagers with all songs\n    for villager in range(1, num_villagers + 1):\n        if villager in villagers_with_all_songs:\n            continue\n        present_in_all_songs = True\n        for song in songs:\n            if song not in villagers_present[villager - 1]:\n                present_in_all_songs = False\n                break\n        if present_in_all_songs:\n            villagers_with_all_songs.add(villager)\n    \n    return '\\n'.join(map(str, sorted(villagers_with_all_songs)))",
        "test": "assert solution(\"\"\"4",
        "indeed": false
    },
    {
        "number": 4758,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, t, m = map(int, stdin.split())\n    return str(n * t * m)",
        "test": "assert solution(\"3 4 5\") == \"60\"",
        "indeed": true
    },
    {
        "number": 4759,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    at_bats = [int(x) for x in stdin.split()]\n    official_at_bats = [x for x in at_bats if x >= 0]\n    bases_scored = sum(official_at_bats)\n    total_at_bats = len(official_at_bats)\n    slugging_percentage = bases_scored / total_at_bats\n    return format(slugging_percentage, \".3f\")",
        "test": "assert solution(\"3\\n1 -1 4\") == \"2.5\" ",
        "indeed": false
    },
    {
        "number": 4760,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    crossed_out = []\n    uncrossed = list(range(2, N+1))\n    \n    while uncrossed:\n        prime = uncrossed[0]\n        crossed_out.append(prime)\n        uncrossed = [x for x in uncrossed if x % prime != 0]\n        if len(crossed_out) == K:\n            break\n    \n    return str(crossed_out[K-1])",
        "test": "assert solution(\"15 12\") == \"7\" ",
        "indeed": false
    },
    {
        "number": 4761,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    L, H = map(int, stdin.split())\n    \n    def is_valid_combination(c: int) -> bool:\n        digits = set(str(c))\n        if len(digits) != 6:\n            return False\n        for digit in digits:\n            if int(digit) == 0:\n                return False\n            if c % int(digit) != 0:\n                return False\n        return True\n    \n    total_combinations = 0\n    for c in range(L, H + 1):\n        if is_valid_combination(c):\n            total_combinations += 1\n    \n    return str(total_combinations)",
        "test": "assert solution(\"198765 198769\") == \"0\"",
        "indeed": true
    },
    {
        "number": 4762,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 1:\n        return \"0.00000000\"\n    elif n == 2:\n        return \"0.50000000\"\n    else:\n        return str(1 - (1 / n))",
        "test": "assert solution(\"2\") == \"0.50000000\"",
        "indeed": false
    },
    {
        "number": 4763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    target_score = int(stdin)\n    if target_score > 180:\n        return \"impossible\"\n\n    for i in range(1, 21):\n        if target_score == i * 3:\n            return f\"triple {i}\"\n        elif target_score == i * 2:\n            return f\"double {i}\"\n        elif target_score == i:\n            return f\"single {i}\"\n\n    for i in range(1, 21):\n        for j in range(1, 21):\n            if target_score == i * 3 + j * 2:\n                return f\"triple {i}\\ntriple {j}\"\n            elif target_score == i * 2 + j:\n                return f\"double {i}\\nsingle {j}\"\n\n    for i in range(1, 21):\n        for j in range(1, 21):\n            for k in range(1, 21):\n                if target_score == i * 3 + j * 2 + k:\n                    return f\"triple {i}\\ntriple {j}\\nsingle {k}\"\n\n    return \"impossible\"",
        "test": "assert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"",
        "indeed": false
    },
    {
        "number": 4764,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, h, v = map(int, stdin.split())\n    \n    # Calculate the volume of the biggest piece of cake\n    # after the two cuts are made\n    area = (n - h) * (n - v)\n    volume = area * 4\n    \n    return str(volume)",
        "test": "assert solution(\"5 2 2\") == \"36\" ",
        "indeed": false
    },
    {
        "number": 4765,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    ingredients = []\n\n    for i in range(1, N + 1):\n        sourness, bitterness = map(int, stdin.splitlines()[i].split())\n        ingredients.append((sourness, bitterness))\n\n    min_diff = float('inf')\n    for i in range(2**N):\n        total_sourness = 1\n        total_bitterness = 0\n        used_ingredients = []\n\n        for j in range(N):\n            if (i >> j) & 1:\n                used_ingredients.append(j)\n                total_sourness *= ingredients[j][0]\n                total_bitterness += ingredients[j][1]\n\n        if len(used_ingredients) > 0 and abs(total_sourness - total_bitterness) < min_diff:\n            min_diff = abs(total_sourness - total_bitterness)\n\n    return str(min_diff)",
        "test": "assert solution(\"2\\n3 8\\n5 8\") == \"1\" ",
        "indeed": true
    },
    {
        "number": 4766,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    output = []\n    for line in stdin.split('\\n'):\n        if line.startswith('Simon says'):\n            output.append(line[11:])\n    return '\\n'.join(output)",
        "test": "assert solution(\"1\\nSimon says smile.\") == \"smile.\"",
        "indeed": false
    },
    {
        "number": 4767,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    registers = [int(x) for x in stdin.split()]\n    primes = [2, 3, 5, 7, 11, 13, 17, 19]\n\n    for i, prime in enumerate(primes):\n        if registers[i] + 1 >= prime:\n            registers[i] = 0\n            if i == len(primes) - 1:\n                return \"0\"\n            registers[i + 1] += 1\n\n    return str(len(registers) - registers.count(0))",
        "test": "assert solution(\"1 2 4 6 10 12 16 18\") == \"0\" ",
        "indeed": false
    },
    {
        "number": 4768,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, k = map(int, lines[0].split())\n    strings = lines[1:]\n\n    def unlikeliness(edge):\n        return sum([1 for i in range(k) if strings[edge[0]][i] != strings[edge[1]][i]])\n\n    def find_edges(min_unlikeliness):\n        edges = []\n        for u in range(n):\n            for v in range(u + 1, n):\n                if unlikeliness((u, v)) <= min_unlikeliness:\n                    edges.append((u, v))\n        return edges\n\n    min_unlikeliness = 0\n    for i in range(1, 2 ** (k - 1)):\n        min_unlikeliness += 1\n        edges = find_edges(min_unlikeliness)\n        if len(edges) == n - 1:\n            break\n\n    result = [str(min_unlikeliness)]\n    for edge in edges:\n        result.append(' '.join(map(str, edge)))\n    return '\\n'.join(result)",
        "test": "assert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\\n0 1\\n0 2\\n0 3\\n\" ",
        "indeed": false
    },
    {
        "number": 4769,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_multigram(word: str) -> bool:\n        word_dict = {}\n        for letter in word:\n            word_dict[letter] = word_dict.get(letter, 0) + 1\n        \n        count_dict = {}\n        for value in word_dict.values():\n            count_dict[value] = count_dict.get(value, 0) + 1\n        \n        if len(count_dict) == 1:\n            return False\n        \n        return True\n    \n    def find_root(word: str) -> str:\n        for i in range(1, len(word)):\n            if is_multigram(word[:i]):\n                return word[:i]\n        return \"\"\n    \n    if not is_multigram(stdin):\n        return \"-1\"\n    \n    return find_root(stdin)",
        "test": "assert solution(\"bbabab\") == \"bba\"",
        "indeed": false
    },
    {
        "number": 4770,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    left_over = M % N\n    if left_over == 0:\n        return f\"Dr. Chaz will have {M - N} pieces of chicken left over!\"\n    else:\n        return f\"Dr. Chaz needs {N - left_over} more pieces of chicken!\"",
        "test": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"",
        "indeed": false
    },
    {
        "number": 4771,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def read_input(stdin: str) -> Tuple[int, int, List[Tuple[int, int, int]]]:\n        lines = stdin.split(\"\\n\")\n        n, V = map(int, lines[0].split())\n        boxes = [(int(l), int(w), int(h)) for l, w, h in map(lambda x: x.split(), lines[1:])]\n        return n, V, boxes\n\n    def is_large_enough(V: int, boxes: List[Tuple[int, int, int]]) -> int:\n        largest_box_index = max(range(len(boxes)), key=lambda i: boxes[i][0] * boxes[i][1] * boxes[i][2])\n        largest_box_volume = boxes[largest_box_index][0] * boxes[largest_box_index][1] * boxes[largest_box_index][2]\n        return largest_box_volume - V\n\n    n, V, boxes = read_input(stdin)\n    return str(is_large_enough(V, boxes))",
        "test": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"-2\"",
        "indeed": false
    },
    {
        "number": 4772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split()[:2])\n    grid = [list(stdin.split()[i+2]) for i in range(R)]\n    \n    def dfs(x: int, y: int, word: str) -> None:\n        if x < 0 or x >= R or y < 0 or y >= C:\n            return\n        if grid[x][y] != '#':\n            dfs(x, y-1, word+grid[x][y])\n            dfs(x, y+1, word+grid[x][y])\n            dfs(x-1, y, word+grid[x][y])\n            dfs(x+1, y, word+grid[x][y])\n    \n    words = set()\n    for x in range(R):\n        for y in range(C):\n            dfs(x, y, \"\")\n            for word in words:\n                if len(word) >= 2 and word < min(words, key=lambda w: (len(w), w)):\n                    return word\n            words.clear()\n    \n    return None\n\ninput_stdin = \"\"\"\n4 4\nluka\no#a#\nkula\ni#a#\n\"\"\"\noutput = solution(input_stdin)\nprint(output) ",
        "test": "assert solution(\"\"\"",
        "indeed": false
    },
    {
        "number": 4773,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def min_chars(route: str, macros: bool = False) -> int:\n        if not macros:\n            return len(route)\n        macro = \"\"\n        macro_count = 0\n        macro_chars = {\n            \"N\": \"W\",\n            \"S\": \"E\",\n            \"E\": \"N\",\n            \"W\": \"S\"\n        }\n        for char in route:\n            if macro_count < 10:\n                macro += char\n                macro_count += 1\n            else:\n                macro = macro.replace(macro_chars[char], char)\n                macro_count = 1\n        return len(route) + len(macro) + 1\n\n    return str(min_chars(stdin))",
        "test": "assert solution(\"NSEW\") == \"4\" ",
        "indeed": false
    },
    {
        "number": 4774,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    operators = [\"*\", \"+\", \"-\", \"/\"]\n    valid_expressions = []\n\n    for op1 in operators:\n        for op2 in operators:\n            for op3 in operators:\n                expression = f\"{a} {op1} {b} {op2} {c} {op3} {d}\"\n                try:\n                    if eval(expression):\n                        valid_expressions.append(expression)\n                except ZeroDivisionError:\n                    pass\n\n    if valid_expressions:\n        return \"\\n\".join(sorted(valid_expressions))\n    else:\n        return \"problems ahead\"",
        "test": "assert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\"",
        "indeed": false
    },
    {
        "number": 4775,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    common_letter = ''\n    for letter in A:\n        if letter in B:\n            common_letter = letter\n            break\n    A_index = A.index(common_letter)\n    B_index = B.index(common_letter)\n    \n    output = [['.' for i in range(len(A))] for j in range(len(B))]\n    \n    for i in range(len(B)):\n        if i == B_index:\n            for j in range(len(A)):\n                if j == A_index:\n                    output[i][j] = A[j]\n                else:\n                    output[i][j] = '.'\n        else:\n            output[i][A_index] = B[i]\n    \n    return '\\n'.join([''.join(row) for row in output])\n",
        "test": "assert solution(\"MAMA TATA\") == \".\\n.\\n.\\n.\\nMAMA\\n.\\n.\\nTATA\\n.\\n\" ",
        "indeed": false
    },
    {
        "number": 4776,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    events = []\n    for line in stdin.split(\"\\n\")[1:]:\n        s, t = map(int, line.split())\n        events.append((s, t))\n\n    covered_days = set()\n    for start, end in events:\n        for day in range(start, end + 1):\n            covered_days.add(day)\n\n    return str(len(covered_days))",
        "test": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"",
        "indeed": true
    },
    {
        "number": 4777,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    A = 0\n    B = 0\n\n    for i in range(K):\n        if i % 3 == 0:\n            B += 1\n        else:\n            A += 1\n\n    return f\"{A} {B}\"\n\ninput_data = \"4\"\noutput = solution(input_data)\nprint(output) ",
        "test": "assert solution(\"1\") == \"0 1\"",
        "indeed": false
    },
    {
        "number": 4778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    P, D = map(int, lines[0].split())\n    precincts = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    # Calculate the total number of votes for each party in each district\n    total_votes = {i: {'A': 0, 'B': 0} for i in range(1, D+1)}\n    for precinct in precincts:\n        district, a, b = precinct\n        total_votes[district]['A'] += a\n        total_votes[district]['B'] += b\n\n    # Determine the party that wins in each district\n    winner = {}\n    for district in total_votes:\n        votes_a = total_votes[district]['A']\n        votes_b = total_votes[district]['B']\n        if votes_a > votes_b:\n            winner[district] = 'A'\n        else:\n            winner[district] = 'B'\n\n    # Calculate the wasted votes for each party in each district\n    wasted_votes = {i: {'A': 0, 'B': 0} for i in range(1, D+1)}\n    for precinct in precincts:\n        district, a, b = precinct\n        if winner[district] == 'A':\n            wasted_votes[district]['B'] += b\n        else:\n            wasted_votes[district]['A'] += a\n\n    # Calculate the efficiency gap\n    total_votes_cast = sum(total_votes[district]['A'] + total_votes[district]['B'] for district in total_votes)\n    wasted_votes_a = sum(wasted_votes[district]['A'] for district in wasted_votes)\n    wasted_votes_b = sum(wasted_votes[district]['B'] for district in wasted_votes)\n    efficiency_gap = abs((wasted_votes_a - wasted_votes_b) / total_votes_cast)\n\n    # Output the results for each district\n    result = []\n    for district in range(1, D+1):\n        result.append(winner[district])\n        result.append(wasted_votes[district]['A'])\n        result.append(wasted_votes[district]['B'])\n    result.append(efficiency_gap)\n\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\" ",
        "indeed": false
    },
    {
        "number": 4779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readlines()))\n    max_value = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            value = (sum([x**2 for x in a[:i+1]]) * sum(a[i+1:]))\n            max_value = max(max_value, value)\n\n    return str(max_value)",
        "test": "assert solution(\"2\\n1\\n1\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    num_ants1, num_ants2 = map(int, input_lines[0].split())\n    ants1, ants2 = input_lines[1], input_lines[2]\n    time = int(input_lines[3])\n    \n    def jump_ants(row1: str, row2: str, time: int) -> str:\n        row1 = list(row1)\n        row2 = list(row2)\n        for _ in range(time):\n            for i in range(1, num_ants1):\n                if row2[i-1] == row1[i-1] and row2[i] == row1[i]:\n                    row1[i], row2[i-1] = row2[i-1], row1[i]\n        return ''.join(row1 + row2)\n    \n    return jump_ants(ants1, ants2, time)",
        "test": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\" ",
        "indeed": false
    },
    {
        "number": 4781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    k, n = int(lines[0]), int(lines[1])\n    k -= 1  # Convert from 1-indexed to 0-indexed\n\n    times = []\n    answers = []\n    for i in range(2, n + 2):\n        time, answer = int(lines[i].split()[0]), lines[i].split()[1]\n        times.append(time)\n        answers.append(answer)\n\n    box_holder = k\n    for i in range(n):\n        if answers[i] == \"N\" or answers[i] == \"P\":\n            box_holder = (box_holder + 1) % 8\n        else:\n            time_passed = times[i]\n            if time_passed == 210:\n                return str(box_holder + 1)",
        "test": "assert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"4\" ",
        "indeed": false
    },
    {
        "number": 4782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    max_cost = (n*(n-1))//2\n    \n    # Check if the given input is valid\n    if n < 2 or n > 1000000:\n        return \"Invalid input: n must be between 2 and 1000000.\"\n    if m < n-1 or m > n*(n-1)//2:\n        return \"Invalid input: m must be between n-1 and n(n-1)/2.\"\n    \n    # The maximum cost of plowing the roads will be the sum of all possible combinations of road labels\n    # where the total cost of plowing the roads is maximized\n    max_cost = 0\n    for i in range(1, m+1):\n        for j in range(i+1, m+1):\n            max_cost += i+j\n    \n    return str(max_cost)",
        "test": "assert solution(\"6 8\") == \"22\"",
        "indeed": false
    },
    {
        "number": 4783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split()[:2])\n    coins = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n    \n    def bfs(start, end, coins):\n        queue = [(start, 0)]\n        visited = set()\n        while queue:\n            curr, dist = queue.pop(0)\n            if curr == end:\n                return dist\n            visited.add(curr)\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                new_x, new_y = curr[0] + dx, curr[1] + dy\n                if (0 <= new_x < M and 0 <= new_y < N and coins[new_x][new_y] > coins[curr[0]][curr[1]]):\n                    new_dist = dist + coins[new_x][new_y] - coins[curr[0]][curr[1]]\n                    if (new_x, new_y) not in visited and new_dist < new_dist:\n                        queue.append((new_x, new_y, new_dist))\n        return -1\n    \n    north_west = (0, 0)\n    south_east = (M-1, N-1)\n    return str(bfs(north_west, south_east, coins))",
        "test": "assert solution(\"1 4\\n4 3 2 1\") == \"0\" ",
        "indeed": false
    },
    {
        "number": 4784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    X = int(lines[0])\n    N = int(lines[1])\n    P = [int(line) for line in lines[2:]]\n\n    available_megabytes = X\n    for p in P:\n        available_megabytes = max(available_megabytes - p, 0)\n\n    return str(available_megabytes)\n\nstdin = \"\"\"10\n3\n4\n6\n2\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"10\n3\n10\n2\n12\"\"\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\" ",
        "indeed": false
    },
    {
        "number": 4785,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    if 'ss' in stdin:\n        return 'hiss'\n    else:\n        return 'no hiss'",
        "test": "assert solution(\"amiss\") == \"hiss\"",
        "indeed": true
    },
    {
        "number": 4786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    keywords = set()\n\n    for _ in range(n):\n        keyword = stdin.readline().strip().lower()\n        keyword = keyword.replace(\"-\", \" \")\n        keywords.add(keyword)\n\n    count = 0\n    for i in range(len(keywords)):\n        for j in range(i + 1, len(keywords)):\n            if keywords[i] != keywords[j]:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux\") == \"5\" ",
        "indeed": false
    },
    {
        "number": 4787,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    scientific_cards = {'T': 0, 'C': 0, 'G': 0}\n    total_points = 0\n\n    for card in stdin:\n        if card in scientific_cards:\n            scientific_cards[card] += 1\n\n    for card, count in scientific_cards.items():\n        total_points += count * count\n\n    if len(stdin) >= 3 and len(set(stdin)) == 3:\n        total_points += 7\n\n    return str(total_points)",
        "test": "assert solution(\"TCGTTC\") == \"21\"",
        "indeed": false
    },
    {
        "number": 4788,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = [int(x) for x in stdin.split()]\n    n1 %= 360\n    n2 %= 360\n    \n    diff = n2 - n1\n    if diff < -180:\n        diff += 360\n    elif diff > 180:\n        diff -= 360\n    \n    return str(diff)",
        "test": "assert solution(\"315\\n45\") == \"90\"",
        "indeed": true
    },
    {
        "number": 4789,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    k = input_list[0]\n    desk_numbers = input_list[1:]\n    desk_dict = {}\n    \n    for i in range(len(desk_numbers)):\n        desk_dict[desk_numbers[i]] = i + 1\n    \n    min_desk_number = min(desk_numbers)\n    max_desk_number = max(desk_numbers)\n    num_passes = 0\n    \n    while desk_numbers:\n        num_passes += 1\n        for i in range(min_desk_number, max_desk_number + 1):\n            if i in desk_dict:\n                desk_numbers.remove(i)\n                min_desk_number = min(desk_numbers)\n                max_desk_number = max(desk_numbers)\n                \n    return str(num_passes) ",
        "test": "assert solution('5\\n11\\n20\\n33\\n40\\n55') == '1' ",
        "indeed": false
    },
    {
        "number": 4790,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    stone_list = [1 if stone == 'B' else -1 for stone in stdin]\n    stone_sum = sum(stone_list)\n\n    if abs(stone_sum) % 2 == 1:\n        return \"0\"\n\n    for i in range(1, len(stone_list)):\n        stone_sum += (stone_list[i] - stone_list[i - 1])\n        if abs(stone_sum) % 2 == 0:\n            return \"1\"\n\n    return \"0\"",
        "test": "assert solution(\"WWWWBBW\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3, s4 = map(float, stdin.split())\n\n    # Calculate the semi-perimeter\n    sp = (s1 + s2 + s3 + s4) / 2\n\n    # Calculate the area of the quadrilateral\n    area = (s1 * s3 + s2 * s4) * 0.5\n\n    # Calculate the maximum area of any quadrilateral that can be constructed using the given side lengths\n    max_area = 2 * area / sp\n\n    return round(max_area, 6)",
        "test": "assert solution(\"1 2 1 1\") == \"1.299038105676658\"",
        "indeed": false
    },
    {
        "number": 4792,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    prev_char = None\n    for char in stdin:\n        if char != prev_char or prev_char is None:\n            result += char\n            prev_char = char\n    return result",
        "test": "assert solution(\"robert\") == \"robert\"",
        "indeed": true
    },
    {
        "number": 4793,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, v1, v2 = map(int, stdin.split())\n    if s > v1 or v1 < v2:\n        return \"Impossible\"\n    \n    bottles_v1 = s // v1\n    bottles_v2 = s // v2\n    \n    if bottles_v1 * v1 + bottles_v2 * v2 < s:\n        bottles_v1 += 1\n        bottles_v2 += 1\n        \n    return f\"{bottles_v1} {bottles_v2}\"",
        "test": "assert solution(\"1000 900 7\") == \"Impossible\" ",
        "indeed": false
    },
    {
        "number": 4794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split()[0:2])\n    grid = stdin.split('\\n')[1:]\n    grid = [list(row) for row in grid]\n\n    parking_spaces = 0\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                parking_spaces += 1\n\n    parking_spaces_squashed = {0: parking_spaces}\n    for cars_squashed in range(1, 5):\n        parking_spaces_squashed[cars_squashed] = 0\n        for i in range(R - cars_squashed + 1):\n            for j in range(C - cars_squashed + 1):\n                if all(grid[i + k][j + l] != '#' for k in range(cars_squashed) for l in range(cars_squashed)):\n                    parking_spaces_squashed[cars_squashed] += 1\n\n    return '\\n'.join(map(str, parking_spaces_squashed.values()))",
        "test": "assert solution(",
        "indeed": false
    },
    {
        "number": 4795,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    addends = []\n\n    for i in range(1, N + 1):\n        addends.append(int(lines[i]))\n\n    result = 0\n    for i in range(N):\n        result += addends[i]\n\n    return str(result)",
        "test": "assert solution(\"5\\n23\\n17\\n43\\n52\\n22\") == \"102\" ",
        "indeed": false
    },
    {
        "number": 4796,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, I, J, K = map(int, stdin.split())\n    total_juice = A + B + C\n    cocktail_amount = min(A, B, C) * I + min(A, B) * J + min(B, C) * K\n    leftover_A = A - cocktail_amount\n    leftover_B = B - cocktail_amount\n    leftover_C = C - cocktail_amount\n    return f\"{leftover_A / total_juice:.6f} {leftover_B / total_juice:.6f} {leftover_C / total_juice:.6f}\"\n\ndef",
        "test": "assert solution(\"9 9 9\\n3 2 1\") == \"0.000000 3.000000 6.000000\" ",
        "indeed": false
    },
    {
        "number": 4797,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    for char in stdin:\n        if char == '<':\n            if result:\n                result.pop()\n        else:\n            result.append(char)\n    return ''.join(result)",
        "test": "assert solution(\"a<bc<\") == \"b\"",
        "indeed": true
    },
    {
        "number": 4798,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    short_variation = \"\"\n    for char in stdin:\n        if char == '-' or char == ' ':\n            continue\n        short_variation += char\n    return short_variation",
        "test": "assert solution(\"Mirko-Slavko\") == \"MS\"",
        "indeed": false
    },
    {
        "number": 4799,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    num_golds, num_silvers, num_coppers = map(int, stdin.split())\n    total_buying_power = num_golds * 3 + num_silvers * 2 + num_coppers\n    victory_cards = [(\"Province\", 6, 6), (\"Duchy\", 5, 3), (\"Estate\", 2, 1)]\n    treasure_cards = [(\"Gold\", 6, 3), (\"Silver\", 3, 2), (\"Copper\", 0, 1)]\n\n    max_victory_card = max(victory_cards, key=lambda x: total_buying_power // x[2])\n    max_treasure_card = max(treasure_cards, key=lambda x: total_buying_power // x[2])\n\n    if max_victory_card[1] <= total_buying_power:\n        return f\"{max_victory_card[0]} or {max_treasure_card[0]}\"\n    else:\n        return f\"{max_treasure_card[0]}\"",
        "test": "assert solution('0 1 0') == 'Estate or Copper'",
        "indeed": false
    },
    {
        "number": 4800,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d, s = list(map(int, stdin.split()))\n    if k == 0 or k == n:\n        return \"impossible\"\n    \n    unsolved_problems = n - k\n    unsolved_difficulty = (100 * unsolved_problems * (d - s)) / (k * 100)\n    \n    if abs(unsolved_difficulty) > 10**6:\n        return \"impossible\"\n    \n    return round(unsolved_difficulty + s, 6)",
        "test": "assert solution(\"10 3\\n80 90\") == \"75.7142857\"",
        "indeed": false
    },
    {
        "number": 4801,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    A = [int(x) for x in lines[1].split()]\n    \n    # initialize greedily increasing subsequence\n    gis = []\n    \n    # loop through elements of A and add them to gis if they are larger than the last element\n    for a in A:\n        if len(gis) == 0 or a > gis[-1]:\n            gis.append(a)\n    \n    # return result as string\n    return f\"{len(gis)}\\n{' '.join(map(str, gis))}\"",
        "test": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'",
        "indeed": true
    },
    {
        "number": 4802,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    m = m - 45\n    if m < 0:\n        h, m = h - 1, m + 60\n    return f\"{h % 24:02d} {m:02d}\"",
        "test": "assert solution(\"0 30\") == \"23 45\"",
        "indeed": false
    },
    {
        "number": 4803,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    # Parse input\n    N = float(stdin)\n\n    # Calculate a\n    a = 1\n    while True:\n        tetration_a = a\n        for i in range(10):\n            tetration_a = math.pow(tetration_a, a)\n        if abs(tetration_a - N) < 1e-5:\n            break\n        a += 1\n\n    # Output result\n    return f\"{a:.5f}\"",
        "test": "assert solution('1.000000') == '1.000000' ",
        "indeed": false
    },
    {
        "number": 4804,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin)\n    results = []\n    for x in range(1, S//2 + 1):\n        y = S - x\n        if x != y and y != 0:\n            results.append((x, y))\n    return f\"{S}:\\n\" + \"\\n\".join([f\"{x},{y}\" for x, y in sorted(results)])\n\ndef",
        "test": "assert solution(\"50\") == \"50:\\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\\n\"",
        "indeed": false
    },
    {
        "number": 4805,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    unique_words = set(words)\n    if len(words) == len(unique_words):\n        return \"yes\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"",
        "indeed": true
    },
    {
        "number": 4806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    mech_moves = {'R': 'S', 'B': 'K', 'L': 'H', 'C': 'C'}\n    mech_sequence = ''\n    combo_count = 0\n\n    for move in stdin:\n        if move == 'R':\n            combo_count += 1\n        elif move == 'B':\n            combo_count += 1\n        else:\n            if combo_count == 3:\n                mech_sequence += mech_moves['C']\n                combo_count = 0\n            else:\n                mech_sequence += mech_moves[move]\n                combo_count = 0\n\n    return mech_sequence",
        "test": "assert solution(\"RBLLLBRR\") == \"CHCS\"",
        "indeed": false
    },
    {
        "number": 4807,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = [int(x) for x in stdin.strip().split()]\n    result = []\n    for i in range(1, n+1):\n        if i % x == 0 and i % y == 0:\n            result.append(\"FizzBuzz\")\n        elif i % x == 0:\n            result.append(\"Fizz\")\n        elif i % y == 0:\n            result.append(\"Buzz\")\n        else:\n            result.append(str(i))\n    return \"\\n\".join(result)",
        "test": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"",
        "indeed": true
    },
    {
        "number": 4808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, current_year_snow = map(int, stdin.splitlines()[0].split())\n    historical_weather = list(map(int, stdin.splitlines()[1].split()))\n\n    years_before_current = historical_weather[:n]\n\n    max_consecutive_years = 0\n    for i, year in enumerate(years_before_current):\n        if year > current_year_snow:\n            max_consecutive_years += 1\n        else:\n            max_consecutive_years = 0\n\n    if max_consecutive_years == 0:\n        return \"It had never snowed this early!\"\n    else:\n        return f\"It hadn't snowed this early in {max_consecutive_years} years!\"\n\ndef",
        "test": "assert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"",
        "indeed": false
    },
    {
        "number": 4809,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    syllables, players = map(int, stdin.split())\n    \n    if syllables < 3:\n        return \"Error: Invalid number of syllables\"\n    \n    if players < 2:\n        return \"Error: Invalid number of players\"\n    \n    players_count = players\n    players_left = players\n    player = 1\n    \n    while players_left > 1:\n        if players_count == players:\n            player = 1\n        \n        if player == 1:\n            player = players_left\n        \n        if player > players_left:\n            player = 1\n        \n        if players_count == players:\n            player_hands_folded = 2\n        else:\n            player_hands_folded = 1\n        \n        for i in range(syllables - 2):\n            player += 1\n            if player > players_left:\n                player = 1\n            \n            player_hands_folded -= 1\n            if player_hands_folded == 0:\n                players_count -= 1\n                player_hands_folded = 2\n            \n        players_left -= 1\n    \n    return str(player) ",
        "test": "assert solution(\"10 2\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4810,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def encrypt(message: str, matrix_size: int) -> str:\n        matrix = [[] for _ in range(matrix_size)]\n        for i in range(matrix_size):\n            for j in range(len(message) // matrix_size + 1):\n                if i + j * matrix_size >= len(message):\n                    break\n                matrix[i].append(message[i + j * matrix_size])\n        encrypted = \"\"\n        for i in range(len(matrix[0])):\n            for j in range(matrix_size):\n                encrypted += matrix[j][i]\n        return encrypted\n\n    def find_matrix_size(message_length: int) -> int:\n        for i in range(1, message_length + 1):\n            if message_length % i == 0:\n                return i\n        return -1\n\n    matrix_size = find_matrix_size(len(stdin))\n    encrypted_message = encrypt(stdin, matrix_size)\n    original_message = encrypt(encrypted_message, len(stdin) // matrix_size)\n    return original_message",
        "test": "assert solution(\"bok\") == \"bok\"",
        "indeed": false
    },
    {
        "number": 4811,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    bar_size = 1\n    num_breaks = 0\n    \n    while K > bar_size:\n        num_breaks += 1\n        bar_size *= 2\n        \n    return f\"{bar_size} {num_breaks}\"",
        "test": "assert solution(\"7\") == \"8 3\" ",
        "indeed": false
    },
    {
        "number": 4812,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    common_word, num_endings, *endings, num_phrases, *phrases = stdin.split(\"\\n\")\n    endings = [line.split() for line in endings]\n    phrases = [line.split() for line in phrases]\n    num_endings = int(num_endings)\n    num_phrases = int(num_phrases)\n\n    def is_rhyme(word1: str, word2: str) -> bool:\n        for ending in endings:\n            if word1.endswith(tuple(ending)) and word2.endswith(tuple(ending)):\n                return True\n        return False\n\n    def rhyming_slang(phrase: list) -> bool:\n        if len(phrase) == 2:\n            return is_rhyme(common_word, phrase[1])\n        elif len(phrase) == 3:\n            return is_rhyme(common_word, phrase[-1])\n        return False\n\n    result = [\"YES\" if rhyming_slang(phrase) else \"NO\" for phrase in phrases]\n    return \"\\n\".join(result)",
        "test": "assert solution(\"drought\\n2\\naaught ought aut acht\\nought oubt outte out oute\\n5\\ntasty sprout\\ndifficult route\\nworried and fraught\\nforever in doubt\\napples and pears\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\n\"",
        "indeed": false
    },
    {
        "number": 4813,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    word, permutation = stdin.splitlines()\n    guessed_letters = set()\n    for letter in permutation:\n        if letter in word and letter not in guessed_letters:\n            guessed_letters.add(letter)\n            if ''.join(sorted(word)) == ''.join(sorted(guessed_letters)):\n                return \"WIN\"\n    return \"LOSE\"",
        "test": "assert solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"LOSE\" ",
        "indeed": false
    },
    {
        "number": 4814,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Get the number of people\n    n = int(stdin.split(\"\\n\")[0])\n\n    # Get the names of the people\n    names = stdin.split(\"\\n\")[1:]\n\n    # Check if the names are in increasing or decreasing order\n    if all(names[i] < names[i + 1] for i in range(n - 1)):\n        return \"INCREASING\"\n    elif all(names[i] > names[i + 1] for i in range(n - 1)):\n        return \"DECREASING\"\n    else:\n        return \"NEITHER\"",
        "test": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"",
        "indeed": true
    },
    {
        "number": 4815,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, p, m = map(int, stdin.split()[0:3])\n    participants = {}\n    winners = []\n\n    for _ in range(n):\n        name = input()\n        participants[name] = 0\n\n    for _ in range(m):\n        name, points = input().split()\n        participants[name] += int(points)\n\n        if participants[name] >= p:\n            if name not in winners:\n                winners.append(name)\n\n    if len(winners) == 0:\n        return \"No winner!\"\n    else:\n        return \"\\n\".join([f\"{name} wins!\" for name in winners])",
        "test": "assert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\\nJess wins!\\n\"",
        "indeed": false
    },
    {
        "number": 4816,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y, x1, y1, x2, y2 = map(float, stdin.split())\n\n    # Determine the four sides of the rectangle\n    sides = [\n        abs(x - x1),\n        abs(y - y1),\n        abs(x - x2),\n        abs(y - y2),\n        abs(x1 - x2),\n        abs(y1 - y2)\n    ]\n\n    # Find the shortest side of the rectangle\n    shortest_side = min(sides)\n\n    # Calculate the distance from the post to the house\n    distance = sqrt(shortest_side ** 2)\n\n    # Return the distance rounded to three decimal places\n    return f\"{distance:.3f}\"",
        "test": "assert solution(\"6 0 0 2 7 6\") == \"2.0\" ",
        "indeed": false
    },
    {
        "number": 4817,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the smallest number larger than X consisting of the same digits as X.\n\n    Args:\n    stdin: str - the input integer X.\n\n    Returns:\n    str: the output number, or 0 if no such number exists.\n    \"\"\"\n    x = int(stdin)\n    x_digits = sorted(str(x))\n    x_length = len(x_digits)\n\n    # Edge case: if all digits in x are the same, there is no number larger than x.\n    if len(set(str(x))) == 1:\n        return \"0\"\n\n    # Find the index of the largest digit in x.\n    max_index = -1\n    for i in range(x_length - 1, -1, -1):\n        if x_digits[i] != x_digits[x_length - 1]:\n            max_index = i\n            break\n\n    # If the largest digit is at the beginning, there is no number larger than x.\n    if max_index == 0:\n        return \"0\"\n\n    # Swap the largest digit with the smallest digit to the right of it.\n    x_digits[max_index], x_digits[max_index + 1] = x_digits[max_index + 1], x_digits[max_index]\n\n    # Sort the digits to the right of the largest digit in ascending order.\n    x_digits[max_index + 1:] = sorted(x_digits[max_index + 1:])\n\n    return \"\".join(x_digits)",
        "test": "assert solution(\"156\") == \"165\"",
        "indeed": false
    },
    {
        "number": 4818,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    tasks = list(map(int, stdin.readline().split()))\n    intervals = list(map(int, stdin.readline().split()))\n\n    completed_tasks = 0\n    time = 0\n    i = 0\n\n    for j in range(m):\n        while time < intervals[j]:\n            if i < n and time + tasks[i] <= intervals[j]:\n                completed_tasks += 1\n                time += tasks[i]\n                i += 1\n            else:\n                break\n\n    return str(completed_tasks)",
        "test": "assert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\") == \"3\" ",
        "indeed": false
    },
    {
        "number": 4819,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(line.strip()) for line in stdin.split('\\n') if line.strip()]\n    modulo_numbers = set([n % 42 for n in numbers])\n    return str(len(modulo_numbers))",
        "test": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"",
        "indeed": true
    },
    {
        "number": 4820,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, b = map(int, stdin.split())\n    if b == 0:\n        return \"yes\"\n    elif N * 1000 <= b:\n        return \"yes\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"1 0\") == \"yes\"",
        "indeed": false
    },
    {
        "number": 4821,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    suits = {'P': 0, 'K': 0, 'H': 0, 'T': 0}\n    seen = set()\n\n    for card in stdin:\n        suit, value = card[0], int(card[1:])\n        suits[suit] += 1\n        if card in seen:\n            return \"GRESKA\"\n        seen.add(card)\n\n    missing = []\n    for suit, count in suits.items():\n        if count != 13:\n            missing.append(str(13 - count))\n        else:\n            missing.append(str(0))\n\n    return \" \".join(missing)\n\ninput_string = input()\noutput = solution(input_string)\nprint(output) ",
        "test": "assert solution(\"H02H10P11H02\") == \"GRESKA\" ",
        "indeed": false
    },
    {
        "number": 4822,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R, S, K = map(int, stdin.split()[:3])\n    fly_positions = [(i, int(c) - ord('0')) for i, line in enumerate(stdin.split('\\n')[3:]) for c in line if c == '*']\n    max_kills = 0\n    max_shot = \"\"\n\n    for i in range(R - K + 1):\n        for j in range(S - K + 1):\n            kills = 0\n            shot = \".\" * S\n            shot = shot[:j] + '-' * K + shot[j + K:]\n            for fly in fly_positions:\n                if fly[0] >= i and fly[0] < i + K and fly[1] >= j and fly[1] < j + K:\n                    kills += 1\n                    shot = shot[:fly[1]] + '|' + shot[fly[1] + 1:]\n            if kills > max_kills:\n                max_kills = kills\n                max_shot = shot\n\n    return str(max_kills) + \"\\n\" + max_shot",
        "test": "assert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == \"2\\n......\\n.*.*.*\\n+--+..\\n|*.|..\\n|.*|..\\n+--+..\\n*....*\" ",
        "indeed": false
    },
    {
        "number": 4823,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    ranks = [card[:1] for card in stdin.split()]\n    ranks.sort()\n    counts = {}\n    max_count = 0\n    for rank in ranks:\n        counts[rank] = counts.get(rank, 0) + 1\n        max_count = max(max_count, counts[rank])\n    return str(max_count)",
        "test": "assert solution(\"AC AD AH AS KD\") == \"4\"",
        "indeed": true
    },
    {
        "number": 4824,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    C, P = map(int, stdin.split()[:2])\n    heights = list(map(int, stdin.split()[2:]))\n    pieces = {\n        1: [(0, 4)],\n        2: [(0, 2, 4), (2, 4)],\n        3: [(0, 2, 4), (2, 4)],\n        4: [(0, 2, 4), (2, 4)],\n        5: [(0, 2, 4), (2, 4)],\n        6: [(0, 2, 4), (2, 4)],\n        7: [(0, 2, 4), (2, 4)],\n    }\n    \n    def is_valid(position: tuple, heights: list) -> bool:\n        for x, y in position:\n            if x < 0 or x >= C or y >= len(heights):\n                return False\n            if heights[y] - x < 0:\n                return False\n        return True\n    \n    def rotate_piece(piece: tuple) -> tuple:\n        new_piece = []\n        for x, y in piece:\n            new_piece.append((y, C - 1 - x))\n        return tuple(new_piece)\n    \n    def move_piece(piece: tuple, delta: int) -> tuple:\n        return tuple((x + delta, y) for x, y in piece)\n    \n    def count_configurations(piece: tuple, heights: list, used: set) -> int:\n        configurations = 0\n        for rotation in range(4):\n            for i in range(-C, C):\n                new_piece = move_piece(piece, i)\n                for j in range(rotation):\n                    new_piece = rotate_piece(new_piece)\n                if is_valid(new_piece, heights) and frozenset(new_piece) not in used:\n                    used.add(frozenset(new_piece))\n                    configurations += count_configurations(new_piece, heights, used)\n                    used.remove(frozenset(new_piece))\n        return configurations\n    \n    piece = pieces[P]\n    used = set()\n    return str(count_configurations(piece, heights, used))",
        "test": "assert solution(\"5 1\\n0 0 0 0 0\") == \"7\"",
        "indeed": false
    },
    {
        "number": 4825,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    translation_table = {\n        'a': '@',\n        'n': '[]\\\\[]',\n        'b': '8',\n        'o': '0',\n        'c': '(',\n        'p': '|D',\n        'd': '|)',\n        'q': '(,)',\n        'e': '3',\n        'r': '|Z',\n        'f': '#',\n        's': '$',\n        'g': '6',\n        't': '][\\'',\n        'h': '[-]',\n        'u': '|_|',\n        'v': '\\\\/',\n        'j': '|<',\n        'w': '\\/\\/',\n        'k': '|<',\n        'x': '}{',\n        'l': '1',\n        'y': '`/',\n        'm': '[]\\/[]',\n        'z': '2'\n    }\n\n    result = ''\n    for char in stdin:\n        if char in translation_table:\n            result += translation_table[char]\n        else:\n            result += char\n\n    return result",
        "test": "assert solution(\"What's the Frequency, Kenneth?\") == '\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?' ",
        "indeed": false
    },
    {
        "number": 4826,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2 == 1:\n        return \"Alice\"\n    else:\n        return \"Bob\"",
        "test": "assert solution('1') == 'Alice'",
        "indeed": true
    },
    {
        "number": 4827,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    numbers = {\n        \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9,\n        \"eleven\": 11, \"twelve\": 12, \"thirteen\": 13, \"fourteen\": 14, \"fifteen\": 15, \"sixteen\": 16, \"seventeen\": 17, \"eighteen\": 18, \"nineteen\": 19,\n        \"ten\": 10, \"twenty\": 20, \"thirty\": 30, \"forty\": 40, \"fifty\": 50, \"sixty\": 60, \"seventy\": 70, \"eighty\": 80, \"ninety\": 90,\n        \"hundred\": 100, \"onehundred\": 100, \"twohundred\": 200, \"threehundred\": 300, \"fourhundred\": 400, \"fivehundred\": 500, \"sixhundred\": 600, \"sevenhundred\": 700, \"eighthundred\": 800, \"ninehundred\": 900\n    }\n    \n    def num_to_words(num: int) -> str:\n        if num == 0:\n            return \"\"\n        elif num in numbers:\n            return numbers[str(num)]\n        else:\n            num_str = str(num)\n            return f\"{numbers[f'{num_str[0]}hundred']} {num_to_words(int(num_str[1:]))}\"\n    \n    letter_count = sum(len(word) for word in words if word != \"$\")\n    word_count = len(words)\n    if word_count == 1:\n        return f\"{word_count} has {letter_count} letters\"\n    else:\n        return \" \".join(words[:-1]) + f\" {num_to_words(letter_count)}\" + words[-1]\n\ndef",
        "test": "assert solution(\"7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere\") == \"thirty is the number of letters here\"",
        "indeed": false
    },
    {
        "number": 4828,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    nop_count = 0\n    current_address = 0\n\n    for char in stdin:\n        if char.isupper():\n            if current_address % 4 != 0:\n                nop_count += 4 - (current_address % 4)\n                current_address += 4 - (current_address % 4)\n            current_address += 1\n\n    return str(nop_count)",
        "test": "assert solution(\"Abcd\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4829,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    if l == 0 and r == 0:\n        return \"Not a moose\"\n    if l == r:\n        return f\"Even {2 * l}\"\n    else:\n        return f\"Odd {max(l, r) * 2}\"",
        "test": "assert solution(\"2 3\") == \"Odd 6\"",
        "indeed": true
    },
    {
        "number": 4830,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N, *words, S = stdin.split()\n    N = int(N)\n    words = words[:N]\n    S = S.strip()\n\n    # Define the keyboard layout\n    layout = {\n        '1': ['a'], '2': ['b', 'c'], '3': ['d', 'e', 'f'],\n        '4': ['g', 'h', 'i'], '5': ['j', 'k', 'l'], '6': ['m', 'n', 'o'],\n        '7': ['p', 'q', 'r', 's'], '8': ['t', 'u', 'v'], '9': ['w', 'x', 'y', 'z']\n    }\n\n    # Find the words that can be constructed from the key presses\n    count = 0\n    for word in words:\n        key_presses = []\n        for letter in word:\n            for key in layout.get(S[len(key_presses)], []):\n                if key == letter:\n                    key_presses.append(key)\n                    break\n            else:\n                break\n        else:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"3\\ntomo\\nmono\\ndak\\n6666\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4831,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Remove spaces and capitalize the input string\n    stdin = stdin.replace(\" \", \"\").upper()\n    \n    # Initialize the output string with the first character framed by a Peter Pan frame\n    output = \"..#..\\n.#.#.\\n#.\" + stdin[0] + \".#\\n.#.#.\\n..#..\\n\"\n    \n    # Loop through the input string and frame each character with the appropriate frame\n    for i in range(1, len(stdin)):\n        if i % 3 == 0:\n            # Frame the character with a Wendy frame\n            output += \"..*..\\n.*.*.\\n*.\" + stdin[i] + \".*\\n.*.*.\\n..*..\\n\"\n        else:\n            # Frame the character with a Peter Pan frame\n            output += \"..#..\\n.#.#.\\n#.\" + stdin[i] + \".#\\n.#.#.\\n..#..\\n\"\n    \n    return output",
        "test": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\\n\"",
        "indeed": false
    },
    {
        "number": 4832,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    \n    # Calculate area of circle in Euclidian geometry\n    euclidean_area = 3.141593 * R * R\n    \n    # Calculate area of circle in taxicab geometry\n    taxicab_area = R * R * (R + 1)\n    \n    return f\"{euclidean_area:.6f}\\n{taxicab_area:.6f}\"",
        "test": "assert solution(\"1\") == \"3.141593\\n2.000000\"",
        "indeed": false
    },
    {
        "number": 4833,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    expenses = 0\n    for num in stdin.split():\n        if int(num) < 0:\n            expenses += int(num)\n    return str(expenses)",
        "test": "assert solution(\"5\\n129 44 394 253 147\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4834,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    time_list = list(map(int, stdin.split()[1:]))\n\n    time_list.sort(reverse=True)\n    time_list.append(0)\n\n    total_time = 0\n    for i in range(n):\n        if i % 2 == 0:\n            total_time += time_list[i]\n        else:\n            total_time += time_list[i] + 1\n\n    return str(total_time)\n",
        "test": "assert solution(\"3\\n4 1 2\") == \"8\" ",
        "indeed": false
    },
    {
        "number": 4835,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    t, N, M = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(N)]\n\n    # find starting position\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'S':\n                start_pos = (i, j)\n                break\n        if start_pos:\n            break\n\n    # find exit positions\n    exit_positions = []\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'U':\n                exit_positions.append((i, j, 'U'))\n            elif grid[i][j] == 'D':\n                exit_positions.append((i, j, 'D'))\n            elif grid[i][j] == 'L':\n                exit_positions.append((i, j, 'L'))\n            elif grid[i][j] == 'R':\n                exit_positions.append((i, j, 'R'))\n\n    def get_adjacent_positions(position, direction):\n        i, j = position\n        if direction == 'U':\n            return [(i - 1, j)]\n        elif direction == 'D':\n            return [(i + 1, j)]\n        elif direction == 'L':\n            return [(i, j - 1)]\n        elif direction == 'R':\n            return [(i, j + 1)]\n\n    def dfs(position, t):\n        visited.add(position)\n        if position in exit_positions:\n            return 0\n        adjacent_positions = get_adjacent_positions(position, grid[position[0]][position[1]])\n        min_distance = float('inf')\n        for next_position in adjacent_positions:\n            if next_position not in visited and 0 <= next_position[0] < N and 0 <= next_position[1] < M:\n                if grid[next_position[0]][next_position[1]] != '1':\n                    distance = dfs(next_position, t - 1)\n                    if distance is not None:\n                        min_distance = min(min_distance, distance + 1)\n        visited.remove(position)\n        if min_distance != float('inf'):\n            return min_distance\n        return None\n\n    visited = set()\n    distance = dfs(start_pos, t)\n\n    if distance is not None:\n        return str(distance)\n    else:\n        return \"NOT POSSIBLE\"\n",
        "test": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\" ",
        "indeed": false
    },
    {
        "number": 4836,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, C = map(int, stdin.split()[0:2])\n    weights = list(map(int, stdin.split()[2:]))\n    count = 0\n    current_weight = 0\n    for weight in weights:\n        if current_weight + weight <= C:\n            count += 1\n            current_weight += weight\n    return str(count)",
        "test": "assert solution(\"7 5\\n1 5 4 3 2 1 1\") == \"3\"",
        "indeed": false
    },
    {
        "number": 4837,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    rounds = int(lines[0])\n    sven_symbols = lines[1]\n    friends_count = int(lines[2])\n    friends_symbols = lines[3:]\n\n    def compare_symbols(symbol1: str, symbol2: str) -> int:\n        if symbol1 == symbol2:\n            return 1\n        elif (symbol1, symbol2) in [('R', 'S'), ('S', 'P'), ('P', 'R')]:\n            return 2\n        else:\n            return 0\n\n    sven_score = 0\n    largest_possible_score = 0\n\n    for friend_symbols in friends_symbols:\n        for i in range(rounds):\n            sven_score += compare_symbols(sven_symbols[i], friend_symbols[i])\n            largest_possible_score += 2\n\n    return f'{sven_score}\\n{largest_possible_score}'",
        "test": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\") == \"5\\n10\"",
        "indeed": false
    },
    {
        "number": 4838,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    times = []\n    for i in range(1, N+1):\n        times.append(int(lines[i]))\n\n    current_time = 0\n    is_running = False\n    for t in times:\n        if is_running:\n            if t <= current_time:\n                is_running = False\n            else:\n                current_time = t - current_time\n        else:\n            current_time = t\n            is_running = True\n\n    if is_running:\n        return \"still running\"\n    else:\n        return str(current_time)",
        "test": "assert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\" ",
        "indeed": false
    },
    {
        "number": 4839,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.setrecursionlimit(100000)\n\n    n, canisters = stdin.split('\\n')\n    n = int(n)\n    canisters = list(map(int, canisters.split()))\n\n    def fill_balloons(used_canisters, remaining_balloons, current_balloon, current_capacity):\n        if current_balloon == n:\n            return 1.0\n        if current_capacity < 0:\n            return 0.0\n        if remaining_balloons[current_balloon] == 0:\n            return fill_balloons(used_canisters, remaining_balloons, current_balloon + 1, current_capacity)\n\n        max_fraction = 0\n        for i in range(n):\n            if used_canisters[i]:\n                continue\n            used_canisters[i] = True\n            new_capacity = current_capacity + canisters[i]\n            new_remaining_balloons = remaining_balloons.copy()\n            new_remaining_balloons[current_balloon] -= 1\n            fraction = fill_balloons(used_canisters, new_remaining_balloons, current_balloon, new_capacity)\n            max_fraction = max(max_fraction, fraction)\n            used_canisters[i] = False\n\n        return max_fraction\n\n    used_canisters = [False] * n\n    remaining_balloons = [1] * n\n    result = fill_balloons(used_canisters, remaining_balloons, 0, 0)\n\n    return f\"{result:.6f}\" if result != 0 else \"impossible\"",
        "test": "assert solution(\"2\\n2 2\") == \"impossible\"",
        "indeed": false
    },
    {
        "number": 4840,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1, a2, b2 = map(int, stdin.split())\n    gunnar_dice_sides = list(range(a1, b1 + 1))\n    emma_dice_sides = list(range(a2, b2 + 1))\n    \n    gunnar_dice_probability = 1 / len(gunnar_dice_sides)\n    emma_dice_probability = 1 / len(emma_dice_sides)\n    \n    if gunnar_dice_probability > emma_dice_probability:\n        return \"Gunnar\"\n    elif gunnar_dice_probability < emma_dice_probability:\n        return \"Emma\"\n    else:\n        return \"Tie\"",
        "test": "assert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"",
        "indeed": false
    },
    {
        "number": 4841,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    bite_list = input_list[1].split(\" \")\n    \n    if len(bite_list) != n:\n        return \"something is fishy\"\n    \n    count = 0\n    for i in range(n):\n        if bite_list[i] != \"mumble\":\n            count += int(bite_list[i])\n        else:\n            count += 1\n    \n    if count == n:\n        return \"makes sense\"\n    else:\n        return \"something is fishy\"",
        "test": "assert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"",
        "indeed": false
    },
    {
        "number": 4842,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split()))\n    n = inputs[0]\n    sequence = inputs[1:]\n    \n    degree = n\n    last_value = sequence[-1]\n    \n    # Find the degree of the polynomial\n    while degree > 1 and sequence[-degree] == sequence[-degree-1]:\n        degree -= 1\n    \n    # Find the next value of the sequence\n    if degree == 1:\n        next_value = sequence[-1] + (sequence[-1] - sequence[-2])\n    elif degree == 2:\n        next_value = sequence[-1] + (sequence[-1] - sequence[-2])\n    else:\n        next_value = sequence[-1] + (sequence[-1] - sequence[-2])\n    \n    return f\"{degree} {next_value}\" ",
        "test": "assert solution(\"4 9 25 49 81\") == \"2 121\" ",
        "indeed": false
    },
    {
        "number": 4843,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_solution(queens: List[Tuple[int, int]]) -> bool:\n        for i in range(len(queens)):\n            for j in range(i + 1, len(queens)):\n                if is_under_attack(queens[i], queens[j]):\n                    return False\n        return True\n\n    def is_under_attack(queen1: Tuple[int, int], queen2: Tuple[int, int]) -> bool:\n        x1, y1 = queen1\n        x2, y2 = queen2\n        if x1 == x2 or y1 == y2:\n            return True\n        if abs(x1 - x2) == abs(y1 - y2):\n            return True\n        return False\n\n    N = int(stdin.split(\"\\n\")[0])\n    queens = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1:N+1]]\n\n    if len(queens) != N:\n        return \"INCORRECT\"\n\n    if is_valid_solution(queens):\n        return \"CORRECT\"\n    else:\n        return \"INCORRECT\"\n\ninput_data = \"\"\"8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4\"\"\"\n\nprint(solution(input_data)) ",
        "test": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"",
        "indeed": false
    },
    {
        "number": 4844,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    matrix = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n\n    # create a matrix with the bitwise and between a_i and a_j\n    bitwise_and_matrix = [[0] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            bitwise_and_matrix[i][j] = matrix[i][j]\n\n    # create an array with the values on the main diagonal\n    diagonal_array = [matrix[i][i] for i in range(N)]\n\n    # create a new matrix with the values on the main diagonal replaced by the corresponding values from the diagonal_array\n    new_matrix = [[0] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                new_matrix[i][j] = diagonal_array[i]\n            else:\n                new_matrix[i][j] = bitwise_and_matrix[i][j]\n\n    # create the array by iterating through the columns and finding the values in the new_matrix that are the same\n    result_array = []\n    for i in range(N):\n        result_array.append(max(new_matrix[i]))\n\n    return \" \".join(map(str, result_array))",
        "test": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"",
        "indeed": false
    },
    {
        "number": 4845,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a date in 2009, determines the day of week on that date.\n    \"\"\"\n    # Parse the input date\n    day, month = [int(x) for x in stdin.split()]\n\n    # Convert the date to the Julian date format\n    if month < 3:\n        month += 12\n        year = 2008\n    else:\n        year = 2009\n    A = int(year / 100)\n    B = 2 - A + int(A / 4)\n    C = (month + 1) * 26 / 10 + day + year % 100 + year % 4\n    D = C + B - 15020\n\n    # Compute the day of the week\n    weekday = (D % 7 + 5) % 7\n    return [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"][weekday]",
        "test": "assert solution(\"17 1\") == \"Saturday\"",
        "indeed": false
    },
    {
        "number": 4846,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    L, D, X = [int(x) for x in stdin.split()]\n    N, M = None, None\n    for i in range(L, D+1):\n        if sum(int(digit) for digit in str(i)) == X:\n            N = i\n            break\n    for i in range(D, L-1, -1):\n        if sum(int(digit) for digit in str(i)) == X:\n            M = i\n            break\n    return f\"{N}\\n{M}\"",
        "test": "assert solution(\"1\\n100\\n4\") == \"4\\n40\"",
        "indeed": true
    },
    {
        "number": 4847,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    triangle_vertices = [list(map(int, line.split())) for line in stdin.splitlines()[:3]]\n    N = int(stdin.splitlines()[3])\n    apple_trees = [list(map(int, line.split())) for line in stdin.splitlines()[4:]]\n    \n    # Calculate the area of the triangle\n    def triangle_area(triangle):\n        x1, y1, x2, y2, x3, y3 = triangle\n        return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)) / 2\n    \n    area = triangle_area(triangle_vertices)\n    \n    # Calculate the number of trees in the triangle\n    def point_in_triangle(point, triangle):\n        x, y = point\n        x1, y1, x2, y2, x3, y3 = triangle\n        area = triangle_area([x1, y1, x2, y2, x, y]) + triangle_area([x2, y2, x3, y3, x, y]) + triangle_area([x3, y3, x1, y1, x, y])\n        return area == triangle_area(triangle)\n    \n    count = sum(point_in_triangle(tree, triangle_vertices) for tree in apple_trees)\n    \n    return f\"{area:.1f}\\n{count}\" ",
        "test": "assert solution(\"\"\"1 1",
        "indeed": false
    },
    {
        "number": 4848,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(2, n):\n        if m * n % 12 == 1:\n            return str(m)\n    return \"No solution found\" ",
        "test": "assert solution(\"30\") == \"7\" ",
        "indeed": false
    },
    {
        "number": 4849,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    cia_blimps = []\n    for index, line in enumerate(stdin.split('\\n')):\n        if \"FBI\" in line:\n            cia_blimps.append(index + 1)\n    if not cia_blimps:\n        return \"HE GOT AWAY!\"\n    else:\n        return \" \".join(map(str, sorted(cia_blimps)))",
        "test": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"",
        "indeed": true
    },
    {
        "number": 4850,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    def is_valid_triangle(a: int, b: int, c: int) -> bool:\n        return a + b > c and a + c > b and b + c > a\n\n    def area_of_triangle(a: int, b: int, c: int) -> float:\n        s = (a + b + c) / 2\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    def min_rod_length(triangles: list) -> float:\n        max_area = 0\n        for triangle in triangles:\n            a, b, c = triangle\n            if not is_valid_triangle(a, b, c):\n                return \"Invalid triangle\"\n            area = area_of_triangle(a, b, c)\n            max_area = max(max_area, area)\n        return math.sqrt(2 * max_area)\n\n    input_lines = stdin.strip().split('\\n')\n    n = int(input_lines[0])\n    triangles = [tuple(map(int, line.split())) for line in input_lines[1:]]\n\n    return round(min_rod_length(triangles), 4)",
        "test": "assert solution('2\\n3 3 3\\n4 5 4\\n') == '6.843530573929037' ",
        "indeed": false
    },
    {
        "number": 4851,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while True:\n        digits_sum = sum(int(digit) for digit in str(n))\n        if n % digits_sum == 0:\n            return str(n)\n        n += 1",
        "test": "assert solution(\"24\") == \"24\"",
        "indeed": true
    },
    {
        "number": 4852,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    plus_count = stdin.count(\"+\")\n    num_count = len(stdin.split(\"+\"))\n    distinct_count = 2**plus_count\n    \n    return str(distinct_count)",
        "test": "assert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\" ",
        "indeed": false
    },
    {
        "number": 4853,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *coefficients = map(int, stdin.split())\n    a_n, a_n_minus_1, a_n_minus_2 = coefficients\n    c_0 = a_n\n    c_1 = a_n_minus_1\n    c_n = a_n_minus_2\n    return f\"{c_0} {c_1} {c_n}\"",
        "test": "assert solution(\"2 2 -4 5\") == \"5 -2 4\" ",
        "indeed": false
    },
    {
        "number": 4854,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, C = map(int, stdin.split())\n    message = list(map(int, stdin.split()))\n\n    # Define the frequency sorter\n    def frequency_sorter(x, y):\n        x_count = message.count(x)\n        y_count = message.count(y)\n        if x_count > y_count:\n            return -1\n        elif x_count < y_count:\n            return 1\n        else:\n            return x - y\n\n    # Sort the message and convert it to a string\n    sorted_message = sorted(set(message), key=cmp_to_key(frequency_sorter))\n    result = \" \".join(map(str, sorted_message))\n\n    return result",
        "test": "assert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\" ",
        "indeed": false
    },
    {
        "number": 4855,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, I = map(int, stdin.split())\n    citation_needed = I * A\n    bribed_scientists = 0\n    while citation_needed > 0:\n        citation_needed -= 1\n        bribed_scientists += 1\n    return str(bribed_scientists)",
        "test": "assert solution(\"1 100\") == \"100\"",
        "indeed": false
    },
    {
        "number": 4856,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a_reversed = str(a)[::-1]\n    b_reversed = str(b)[::-1]\n    if a_reversed > b_reversed:\n        return a_reversed\n    else:\n        return b_reversed",
        "test": "assert solution(\"734 893\") == \"437\"",
        "indeed": true
    },
    {
        "number": 4857,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    l, w = map(int, stdin.split())\n    weights = [1] * 26\n    for i in range(1, 26):\n        weights[i] = weights[i-1] + i\n    \n    def backtrack(curr_weight, curr_index, curr_word):\n        if curr_weight > w or curr_index == l:\n            return\n        if curr_weight == w:\n            nonlocal found_word\n            found_word = curr_word\n            return\n        for i in range(curr_index, l):\n            for j in range(97, 123):\n                char = chr(j)\n                if curr_word and ord(char) < ord(curr_word[-1]):\n                    continue\n                new_word = curr_word + char\n                new_weight = curr_weight + weights[ord(char) - 97]\n                backtrack(new_weight, i+1, new_word)\n    \n    found_word = None\n    backtrack(0, 0, \"\")\n    \n    if found_word:\n        return found_word\n    else:\n        return \"impossible\"",
        "test": "assert solution(\"7 96\") == \"contest\"",
        "indeed": false
    },
    {
        "number": 4858,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    M, N, C = map(int, lines[0].strip().split())\n    frame1 = [line.strip() for line in lines[1:M+1] if line.strip()]\n    frame2 = [line.strip() for line in lines[-M:] if line.strip()]\n\n    def find_pixels(frame):\n        pixels = []\n        for y, line in enumerate(frame):\n            for x, pixel in enumerate(line):\n                if pixel == C:\n                    pixels.append((x, y))\n        return pixels\n\n    pixels1 = find_pixels(frame1)\n    pixels2 = find_pixels(frame2)\n\n    dx, dy = pixels2[0][0] - pixels1[0][0], pixels2[0][1] - pixels1[0][1]\n\n    result = []\n    for y in range(max(pixels1[0][1], pixels2[0][1]) + 1):\n        line = \"\"\n        for x in range(max(pixels1[0][0], pixels2[0][0]) + 1):\n            line += C if (x, y) in pixels2 else \" \"\n        result.append(line)\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABA\\nBBABABABABAB\\nBABABABABABA\") == \"BBABABABABAC\\nBBBABABABABA\\nBBABABABABAB\\n\\n--\\n\"",
        "indeed": false
    },
    {
        "number": 4859,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    b, d, c, l = map(int, stdin.split())\n    if l < b + d + c:\n        return \"impossible\"\n    \n    answers = set()\n    for i in range(0, l - b - d + 1):\n        for j in range(0, l - b - d - i + 1):\n            if b + i + j == l:\n                answers.add((i, j, l - b - d - i - j))\n    \n    return \"\\n\".join(sorted([\"{} {} {}\".format(i, j, k) for i, j, k in answers], key=lambda x: (int(x.split()[0]), int(x.split()[1]), int(x.split()[2]))))",
        "test": "assert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n' ",
        "indeed": false
    },
    {
        "number": 4860,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    recited_numbers = sorted(map(int, stdin.split('\\n')[1:]))\n    missing_numbers = []\n    for i in range(1, recited_numbers[-1] + 1):\n        if i not in recited_numbers:\n            missing_numbers.append(i)\n    if missing_numbers:\n        return \"\\n\".join(map(str, missing_numbers))\n    else:\n        return \"good job\"",
        "test": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"1\\n3\\n6\\n12\"",
        "indeed": true
    },
    {
        "number": 4861,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s, v = list(map(float, stdin.split()))\n    \n    def c_optimal(c):\n        return n * (log2(n)**c * sqrt(2)) / (p * 10**9)\n    \n    c_min = 0\n    c_max = 20\n    error_tolerance = 1e-6\n    \n    def time_to_complete(c):\n        return s * (1 + 1 / c) / v\n    \n    while c_max - c_min > error_tolerance:\n        c_mid = (c_min + c_max) / 2\n        time = time_to_complete(c_mid)\n        if time < 157079:\n            c_max = c_mid\n        else:\n            c_min = c_mid\n    \n    c_optimal = (c_min + c_max) / 2\n    time = time_to_complete(c_optimal)\n    \n    return f\"{time:.6f} {c_optimal:.6f}\"",
        "test": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"",
        "indeed": false
    },
    {
        "number": 4862,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 1:\n        return \"0\"\n    \n    relationships = 0\n    for i in range(2, N+1):\n        relationships += N-i+1\n    \n    return str(relationships)",
        "test": "assert solution(\"2\") == \"1\\n\"",
        "indeed": false
    },
    {
        "number": 4863,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    correct_answers = stdin.split('\\n')[1:]\n\n    score = 0\n    for i in range(1, n + 1):\n        if correct_answers[i - 1] == correct_answers[i - 2]:\n            score += 1\n\n    return str(score)",
        "test": "assert solution(\"4\\nA\\nA\\nA\\nA\\n\") == \"3\"",
        "indeed": false
    },
    {
        "number": 4864,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R, C, Z_R, Z_C = map(int, stdin.split()[:4])\n    input_matrix = [list(map(str, row.strip())) for row in stdin.split('\\n')[1:]]\n\n    output_matrix = [['' for j in range(C * Z_C)] for i in range(R * Z_R)]\n\n    for i in range(R):\n        for j in range(C):\n            char = input_matrix[i][j]\n            for r in range(Z_R):\n                for c in range(Z_C):\n                    output_matrix[i * Z_R + r][j * Z_C + c] = char\n\n    return '\\n'.join([''.join(row) for row in output_matrix])",
        "test": "assert solution('4 5 2 3\\nabcde\\nfghij\\nklmno\\npqrst\\n') == 'aabbbcceeffgghhhijjkkllmmnopqrrrstt\\n'",
        "indeed": true
    },
    {
        "number": 4865,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.split('\\n')[0])\n    output = \"\"\n\n    for i in range(1, cases+1):\n        adjustment = stdin.split('\\n')[i].split(' ')\n        clock_direction = adjustment[0]\n        minutes_to_change = int(adjustment[1])\n        current_hour = int(adjustment[2])\n        current_minutes = int(adjustment[3])\n\n        if clock_direction == 'F':\n            new_hour = current_hour + (current_minutes + minutes_to_change) // 60\n            new_minutes = (current_minutes + minutes_to_change) % 60\n        else:\n            new_hour = current_hour - (minutes_to_change - current_minutes) // 60\n            new_minutes = 60 - (minutes_to_change - current_minutes) % 60\n\n        if new_hour >= 24:\n            new_hour -= 24\n        elif new_hour < 0:\n            new_hour += 24\n\n        output += str(new_hour) + \" \" + str(new_minutes) + \"\\n\"\n\n    return output",
        "test": "assert solution(\"1\\nF 60 13 20\") == \"14 20\\n\"",
        "indeed": false
    },
    {
        "number": 4866,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    month, day = stdin.split()\n    month_num = {\"JAN\": 1, \"FEB\": 2, \"MAR\": 3, \"APR\": 4, \"MAY\": 5, \"JUN\": 6, \"JUL\": 7, \"AUG\": 8, \"SEP\": 9, \"OCT\": 10, \"NOV\": 11, \"DEC\": 12}[month]\n    if (month_num == 10 and int(day) == 31) or (month_num == 12 and int(day) == 25):\n        return \"yup\"\n    else:\n        return \"nope\"",
        "test": "assert solution(\"OCT 31\") == \"yup\"",
        "indeed": true
    },
    {
        "number": 4867,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.readline().split())\n    U, L, R, D = map(int, stdin.readline().split())\n    puzzle = []\n    for i in range(M):\n        puzzle.append(stdin.readline().strip())\n\n    output = \"\"\n    for i in range(U + M + D):\n        for j in range(L + N + R):\n            if i % 2 == j % 2:\n                output += \"#\"\n            else:\n                output += \".\"\n        output += \"\\n\"\n\n    for i in range(M):\n        for j in range(L):\n            if i % 2 == j % 2:\n                output += \"#\"\n            else:\n                output += \".\"\n        for j in range(N):\n            output += puzzle[i][j]\n        for j in range(L):\n            if i % 2 == j % 2:\n                output += \"#\"\n            else:\n                output += \".\"\n        output += \"\\n\"\n\n    for i in range(U + M + D):\n        for j in range(L + N + R):\n            if i % 2 == j % 2:\n                output += \"#\"\n            else:\n                output += \".\"\n        output += \"\\n\"\n\n    return output",
        "test": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\" ",
        "indeed": false
    },
    {
        "number": 4868,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes the given input and returns the corresponding input for the \"Help Me With The Game\" problem.\n\n    Args:\n        stdin: The input for the problem.\n\n    Returns:\n        The corresponding input for the \"Help Me With The Game\" problem.\n    \"\"\"\n    # Split the input by newline\n    lines = stdin.split(\"\\n\")\n\n    # Initialize the board\n    board = [[\".\"] * 8 for _ in range(8)]\n\n    # Add the pieces to the board\n    for line in lines:\n        # Split the line by comma\n        pieces = line.split(\",\")\n\n        # Iterate through the pieces\n        for piece in pieces:\n            # Split the piece by colon\n            color, piece_type, position = piece.split(\":\")\n\n            # Add the piece to the board\n            board[ord(position[1]) - ord(\"1\")][ord(position[0]) - ord(\"a\")] = (color.upper() + piece_type.upper())[::-1]\n\n    # Convert the board to a string\n    result = \"\"\n    for row in board:\n        result += \"\".join(row) + \"\\n\"\n\n    return result",
        "test": "assert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == '+---+---+---+---+---+---+---++\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---++\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---++\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---++\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---++\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---++\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---++\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---++\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---++\\n' ",
        "indeed": false
    },
    {
        "number": 4869,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, N = list(map(float, stdin.split()))\n    if A > N:\n        return \"Need more materials!\"\n    else:\n        return \"Diablo is happy!\"",
        "test": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"",
        "indeed": true
    },
    {
        "number": 4870,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    f, s, g, u, d = list(map(int, stdin.split()))\n\n    if s == g:\n        return 0\n\n    if s > g:\n        s, g = g, s\n\n    if g > f:\n        return \"use the stairs\"\n\n    if u < d:\n        u, d = d, u\n\n    if (g - s) >= (f - g):\n        return \"use the stairs\"\n\n    up_floors = f - g\n    down_floors = s - 1\n\n    up_pushes = (up_floors // u) * u\n    down_pushes = (down_floors // d) * d\n\n    return up_pushes + down_pushes",
        "test": "assert solution(\"3 1 3 2 1\") == \"use the stairs\"",
        "indeed": false
    },
    {
        "number": 4871,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    kattis_scores = list(map(int, stdin.split(\"\\n\")[1:]))\n\n    def get_group_score(students_scores: List[int]) -> float:\n        total_score = 0\n        for i, score in enumerate(students_scores):\n            total_score += score * ((4 / 5) ** i)\n        return total_score / 5\n\n    current_group_score = get_group_score(kattis_scores)\n    avg_new_group_score = sum([get_group_score(kattis_scores[:i] + kattis_scores[i+1:]) for i in range(n)]) / n\n\n    return f\"{current_group_score:.1f}\\n{avg_new_group_score:.6f}\"\n\ninput_data = \"\"\"3\n500\n120\n75\"\"\"\nprint(solution(input_data)) ",
        "test": "assert solution(\"5\\n1000\\n900\\n800\\n700\\n600\") == \"2000.0\\n324.03333333333333\"",
        "indeed": false
    },
    {
        "number": 4872,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, dirty_pushes = stdin.split(\"\\n\")\n    dirty_pushes = list(map(int, dirty_pushes.split()))\n    dirty_pushes.sort()\n    dirtiness = 0\n    cleanups = 0\n    \n    for dirty_push in dirty_pushes:\n        dirtiness += dirty_push\n        if dirtiness >= 20:\n            cleanups += 1\n            dirtiness = dirty_push\n            \n    return str(cleanups)",
        "test": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"",
        "indeed": true
    },
    {
        "number": 4873,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_safe(x, y, grid):\n        return grid[y][x] != 'T'\n\n    def gold_moves(x, y, grid):\n        gold = 0\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < W and 0 <= ny < H and is_safe(nx, ny, grid):\n                if grid[ny][nx] == 'G':\n                    gold += 1\n        return gold\n\n    W, H = map(int, stdin.split()[:2])\n    grid = [list(line.strip()) for line in stdin.split('\\n')[1:H+1]]\n    Px, Py = next((x, y) for y, row in enumerate(grid) for x, cell in enumerate(row) if cell == 'P')\n    gold = 0\n\n    for x, y in [(Px + dx, Py + dy) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]]:\n        if 0 <= x < W and 0 <= y < H and is_safe(x, y, grid):\n            if grid[y][x] == 'G':\n                gold += 1\n            gold += gold_moves(x, y, grid)\n\n    return str(gold)",
        "test": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4874,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0].split())\n    moves = [list(line.strip()) for line in stdin.split()[1:]]\n    blank_cols = [i for i in range(M) if all(row[i] == '_' for row in moves)]\n\n    dancing_moves = []\n    for i in range(len(blank_cols) - 1):\n        dancing_moves.append(blank_cols[i+1] - blank_cols[i])\n\n    return str(len(dancing_moves))\n",
        "test": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____ \\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$\\n__$__$_$____$__$__$___$_$__$____$__$__$\\n_$____$$____$__$__$___$$____$___$__$__$\\n$_____$$___$___$___$__$$_____$_$___$___$__$\\n_____$_$______$_$_____$_$_________$_$_____$_$____\\n____$___$____$___$____$___$______$___$____\\n___$____$___$_____$___$____$____$_____$\\n__$_____$___$_____$___$_____$___$_____$\\n__$_____$___$_____$___$_____$___$_____$\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$ \") == \"5\" ",
        "indeed": false
    },
    {
        "number": 4875,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    result = []\n    \n    for word in words:\n        if word[0].lower() in 'aeiouy':\n            result.append(word + 'yay')\n        else:\n            vowels = 'aeiouy'\n            consonants = ''\n            for char in word:\n                if char.lower() in vowels:\n                    break\n                consonants += char\n            result.append(word[len(consonants):] + consonants + 'ay')\n    \n    return ' '.join(result)\n\ndef",
        "test": "assert solution(\"pig latin is easy\") == \"igpay atinlay isyay easyway\"",
        "indeed": false
    },
    {
        "number": 4876,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    menus = stdin.split(\"\\n\")[1:]\n    pea_soup = \"pea soup\"\n    pancakes = \"pancakes\"\n    result = \"Anywhere is fine I guess\"\n\n    for i in range(0, n):\n        menu = menus[i * (k + 1) : (i + 1) * (k + 1)]\n        items = menu[1:]\n        if pea_soup in items and pancakes in items:\n            result = menu[0]\n            break\n\n    return result",
        "test": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nblue bird\\npancakes\\npea soup\\npunsch\") == \"Anywhere is fine I guess\"",
        "indeed": false
    },
    {
        "number": 4877,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    if a <= 0 or b < 0 or b >= a or h <= 0:\n        return \"Invalid input\"\n\n    if a >= h:\n        return \"0\"\n\n    count = 0\n    while h > 0:\n        h -= a\n        if h < 0:\n            h = 0\n        count += 1\n        h += b\n\n    return str(count)",
        "test": "assert solution(\"5 0 15\") == \"3\"",
        "indeed": false
    },
    {
        "number": 4878,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R1, S = map(int, stdin.split())\n    R2 = 2 * S - R1\n    return str(R2) ",
        "test": "assert solution(\"11 15\") == \"19\"",
        "indeed": true
    },
    {
        "number": 4879,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    directions = stdin.split()\n    a, b, c = directions\n\n    # condition 1\n    if b == 'West' and c == 'East':\n        return 'Yes'\n    # condition 2\n    if b == 'West' and (c == 'North' or c == 'South'):\n        return 'Yes'\n    return 'No'",
        "test": "assert solution(\"North East East\") == \"No\"",
        "indeed": true
    },
    {
        "number": 4880,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    last_n_letters = stdin.split()[1]\n    ciphertext = stdin.split()[2]\n    \n    plaintext = \"\"\n    keyword = last_n_letters\n    \n    for i in range(m):\n        encrypted_letter = ord(ciphertext[i]) - ord('a')\n        plaintext_letter = (encrypted_letter - ord(keyword[i % n]) + 26) % 26\n        plaintext += chr(ord('a') + plaintext_letter)\n    \n    return plaintext",
        "test": "assert solution(\"10 40\\nsecretkey\\nkysucprqzvzmzxmzcudyqmjuxjr\") == \"johnsdiary\"",
        "indeed": false
    },
    {
        "number": 4881,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "test": "assert solution(\"2\") == \"Even\"",
        "indeed": false
    },
    {
        "number": 4882,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    results = []\n    for i in range(1, N+1):\n        estimate = int(lines[i])\n        if estimate == 0:\n            results.append('1')\n        else:\n            results.append(str(len(str(estimate))))\n    return '\\n'.join(results)",
        "test": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\" ",
        "indeed": true
    },
    {
        "number": 4883,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    translations, word_pairs = stdin.split(\"\\n\")\n    translations = [tuple(translation.split()) for translation in translations.split(\"\\n\")[1:]]\n    word_pairs = [pair.split() for pair in word_pairs.split(\"\\n\")[1:]]\n\n    def check_match(word1: str, word2: str) -> bool:\n        if len(word1) != len(word2):\n            return False\n\n        for char1, char2 in zip(word1, word2):\n            if char1 == char2:\n                continue\n\n            for translation in translations:\n                if translation[0] == char1:\n                    if char2 in translation[1]:\n                        break\n            else:\n                return False\n\n        return True\n\n    result = [check_match(pair[0], pair[1]) for pair in word_pairs]\n    return \"\\n\".join([\"yes\" if match else \"no\" for match in result])",
        "test": "assert solution(\"5 3\\na b\\nc d\\ne f\\ng h\\nfoo bar\\nbaz qux\\nquux quuz\") == \"yes\\nno\\nno\"",
        "indeed": false
    },
    {
        "number": 4884,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, p = map(int, lines[0].split())\n    count = 0\n    for i in range(1, n + 1):\n        if lines[i].find(\"carrots\") != -1:\n            count += 1\n    return str(count * p)",
        "test": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"  # carrots for 1 huffle-puff solved, 1 carrot per problem.",
        "indeed": false
    },
    {
        "number": 4885,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    board = [list(line.strip()) for line in stdin.split(\"\\n\")]\n    white_pieces = []\n    black_pieces = []\n\n    for row in range(8):\n        for col in range(8):\n            piece = board[row][col]\n            if piece.isupper():\n                white_pieces.append(piece + chr(ord('a') + col) + str(row + 1))\n            elif piece.islower():\n                black_pieces.append(piece + chr(ord('a') + col) + str(7 - row))\n\n    white_pieces.sort(key=lambda x: (x[0], x[1:]))\n    black_pieces.sort(key=lambda x: (x[0], x[1:]), reverse=True)\n\n    return \"White: \" + \",\".join(white_pieces) + \"\\n\" + \"Black: \" + \",\".join(black_pieces)",
        "test": "assert solution(input2) == output2",
        "indeed": false
    },
    {
        "number": 4886,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split())\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_between(num: int, lower: int, upper: int) -> bool:\n        return lower <= num <= upper\n\n    if K >= 2 * N:\n        return \"You will become a flying monkey!\"\n\n    return \"Your wish is granted!\"",
        "test": "assert solution(\"8 3\") == \"Your wish is granted!\"",
        "indeed": false
    },
    {
        "number": 4887,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    area = int(stdin)\n    fence_length = 2 * area**0.5\n    return round(fence_length, 6)",
        "test": "assert solution(49) == 32",
        "indeed": false
    },
    {
        "number": 4888,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split()[0:2])\n    tasks = list(map(int, stdin.split()[2:]))\n    total_time = 0\n    count = 0\n    for task in tasks:\n        total_time += task\n        if total_time <= T:\n            count += 1\n        else:\n            break\n    return str(count)",
        "test": "assert solution(\"6 180\\n45 30 55 20 80 20\") == \"4\"",
        "indeed": true
    },
    {
        "number": 4889,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    num_of_rods = int(lines[0])\n    rods = [int(line) for line in lines[1:]]\n    javelin_length = sum(rods) - num_of_rods + 1\n    return str(javelin_length)\n\nstdin = \"4\\n21\\n34\\n18\\n9\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"",
        "indeed": true
    },
    {
        "number": 4890,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split()[:4])\n    num_bottles = list(map(int, stdin.split()[4:]))\n\n    def refill_scheme(num_bottles: List[int], new_bottles: int) -> List[int]:\n        num_bottles.sort(reverse=True)\n        refill = [0] * s\n        for i in range(s):\n            if num_bottles[i] + new_bottles <= d:\n                refill[i] = new_bottles\n                new_bottles = 0\n                break\n            else:\n                refill[i] = d - num_bottles[i]\n                new_bottles -= refill[i]\n        return refill\n\n    def expected_cold_sodas(scheme: List[int]) -> int:\n        cold_sodas = 0\n        for bottles in num_bottles:\n            cold_sodas += min(bottles, d - sum(scheme))\n        return cold_sodas\n\n    def max_cold_sodas(schemes: List[List[int]]) -> List[int]:\n        max_cold_sodas = -1\n        best_scheme = []\n        for scheme in schemes:\n            cold_sodas = expected_cold_sodas(scheme)\n            if cold_sodas > max_cold_sodas:\n                max_cold_sodas = cold_sodas\n                best_scheme = scheme\n        return best_scheme\n\n    # Main solution\n    schemes = [refill_scheme(num_bottles, n)]\n    best_scheme = max_cold_sodas(schemes)\n\n    if expected_cold_sodas(best_scheme) < m:\n        return \"impossible\"\n    else:\n        return \" \".join(map(str, best_scheme))",
        "test": "assert solution(\"3 5 4 5",
        "indeed": false
    },
    {
        "number": 4891,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pieces = [int(x) for x in stdin.split()]\n    missing_pieces = [0] * 6\n    \n    # Calculate the missing pieces\n    for i in range(6):\n        if pieces[i] != 1:\n            missing_pieces[i] = 1 - pieces[i]\n    \n    # Calculate the extra pieces\n    for i in range(6):\n        for j in range(6):\n            if i == j:\n                continue\n            if pieces[i] > 1 and pieces[j] > 1 and pieces[i] - 1 == pieces[j]:\n                missing_pieces[i] -= 1\n                missing_pieces[j] -= 1\n                \n    return ' '.join([str(x) for x in missing_pieces])",
        "test": "assert solution('1 1 1 1 1 1') == '0 0 0 0 0 0'",
        "indeed": false
    },
    {
        "number": 4892,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    passwords = {}\n\n    for i in range(1, n + 1):\n        password, probability = lines[i].split()\n        passwords[password] = float(probability)\n\n    total_probability = sum(passwords.values())\n    expected_attempts = 0\n\n    for password in sorted(passwords, key=lambda x: passwords[x], reverse=True):\n        expected_attempts += passwords[password] / total_probability\n\n    return f\"{expected_attempts:.4f}\"",
        "test": "assert solution('1\\npassword1 0.5') == '1.0000'",
        "indeed": false
    },
    {
        "number": 4893,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    distances = list(map(int, stdin.split()))[-n:]\n    distances.sort()\n    \n    min_distance = distances[0]\n    for i in range(1, n):\n        if i * p < distances[i]:\n            min_distance = distances[i]\n            break\n            \n    return str(min_distance)",
        "test": "assert solution(\"5 3\\n7 10 2 5 3\") == \"5\"",
        "indeed": false
    },
    {
        "number": 4894,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    notes = stdin.split()\n    output = \"\"\n    for note in notes:\n        pitch = note[0]\n        if len(note) == 1:\n            duration = 1\n        else:\n            duration = int(note[1:])\n        output += \"*\" * duration + \"   \"\n    return output.strip()\n\ndef",
        "test": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:                                                               ",
        "indeed": false
    },
    {
        "number": 4895,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    sticks = [int(x) for x in stdin.splitlines()[1].split()]\n\n    sticks.sort()\n\n    for i in range(N - 2):\n        for j in range(i + 1, N - 1):\n            if sticks[i] + sticks[j] > sticks[j + 1]:\n                return \"possible\"\n\n    return \"impossible\"",
        "test": "assert solution(\"3\\n1 1 1\") == \"possible\"",
        "indeed": true
    },
    {
        "number": 4896,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    bricks = [int(x) for x in stdin.split()]\n    num_bricks = len(bricks)\n    if num_bricks <= 1:\n        return \"1\"\n\n    num_towers = 1\n    for i in range(1, num_bricks):\n        if bricks[i] > bricks[i - 1]:\n            num_towers += 1\n\n    return str(num_towers)",
        "test": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\"",
        "indeed": true
    },
    {
        "number": 4897,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Split input into lines\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    \n    # Read runner data\n    runners = []\n    for i in range(1, n+1):\n        name, first_leg, second_leg = lines[i].split()\n        runners.append((name, float(first_leg), float(second_leg)))\n    \n    # Calculate team times\n    best_time = float(\"inf\")\n    best_team = []\n    for runner1 in runners:\n        for runner2 in runners:\n            if runner1[0] == runner2[0]:\n                continue\n            for runner3 in runners:\n                if runner1[0] == runner3[0] or runner2[0] == runner3[0]:\n                    continue\n                for runner4 in runners:\n                    if runner1[0] == runner4[0] or runner2[0] == runner4[0] or runner3[0] == runner4[0]:\n                        continue\n                    \n                    # Calculate team time\n                    leg1_time = min(runner1[1], runner2[1], runner3[1], runner4[1])\n                    leg2_time = max(runner1[2], runner2[2], runner3[2], runner4[2])\n                    leg3_time = max(runner1[2], runner2[2], runner3[2], runner4[2])\n                    leg4_time = max(runner1[2], runner2[2], runner3[2], runner4[2])\n                    team_time = leg1_time + leg2_time + leg3_time + leg4_time\n                    \n                    # Check if this is the best team so far\n                    if team_time < best_time:\n                        best_time = team_time\n                        best_team = [runner1[0], runner2[0], runner3[0], runner4[0]]\n                    \n    # Output team time and names\n    return \"{:.2f}\\n{}\\n{}\\n{}\\n{}\\n\".format(best_time, best_team[0], best_team[1], best_team[2], best_team[3]) ",
        "test": "assert solution(",
        "indeed": false
    },
    {
        "number": 4898,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input string\n    N, preferences = int(stdin.splitlines()[0]), []\n    for i in range(1, N + 1):\n        L, U = map(int, stdin.splitlines()[i].split())\n        preferences.append((L, U))\n    \n    # Sort the preferences by upper bound (in ascending order)\n    preferences.sort(key=lambda x: x[1])\n    \n    # Initialize the number of rooms and the current temperature\n    rooms, current_temp = 1, preferences[0][1]\n    \n    # Iterate through the preferences\n    for i in range(1, N):\n        # If the current temperature is greater than or equal to the lower bound of the next preference,\n        # create a new room with the next preference's upper bound as the temperature\n        if current_temp >= preferences[i][0]:\n            current_temp = preferences[i][1]\n            rooms += 1\n    \n    return str(rooms)",
        "test": "assert solution(\"3\\n1 2\\n2 4\\n5 6\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4899,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    hey = 'hey'\n    ee = 'ee'\n    e_count = stdin.count('e')\n    result = hey.replace('e', ee * e_count)\n    return result",
        "test": "assert solution('hey') == 'heey'",
        "indeed": true
    },
    {
        "number": 4900,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    table = [list(map(int, line.split())) for line in lines[1:]]\n\n    def find_pair(path, village):\n        for i in range(n):\n            if i not in path and table[village][i] > 0:\n                return i\n        return -1\n\n    def dfs(village, path):\n        if len(path) == n - 1:\n            return path\n\n        pair = find_pair(path, village)\n        if pair != -1:\n            path.append(pair)\n            return dfs(pair, path)\n        return None\n\n    for i in range(n):\n        path = dfs(i, [i])\n        if path is not None:\n            for j in range(len(path) - 1):\n                print(path[j], path[j+1])",
        "test": "assert solution('10\\n1 2 3 4 5 6 7 8 9 10\\n2 1 3 4 5 6 7 8 9 10\\n3 4 1 5 6 7 8 9 10\\n4 5 6 1 7 8 9 10\\n5 7 8 9 1 6 10\\n6 8 9 7 5 1 2\\n7 9 10 5 3 8 4\\n8 10 6 4 9 2 7\\n9 10 7 5 8 3 6\\n10 9 8 6 7 4 5') == '1 2\\n1 3\\n1 4\\n1 5\\n2 1\\n2 3\\n2 4\\n2 5\\n3 1\\n3 2\\n3 4\\n3 5\\n4 1\\n4 2\\n4 3\\n4 5\\n5 1\\n5 2\\n5 3\\n5 4\\n6 2\\n6 3\\n6 4\\n6 5\\n6 7\\n7 6\\n7 8\\n7 9\\n8 6\\n8 7\\n8 9\\n8 10\\n9 6\\n9 7\\n9 8\\n9 10\\n10 6\\n10 7\\n10 8\\n10 9' ",
        "indeed": false
    },
    {
        "number": 4901,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def rotate(s: str, n: int) -> str:\n        return s[-n:] + s[:-n]\n    \n    half = len(stdin) // 2\n    first_half = stdin[:half]\n    second_half = stdin[half:]\n    \n    rotation_first_half = sum(ord(char) - ord('A') for char in first_half) % 26\n    rotation_second_half = sum(ord(char) - ord('A') for char in second_half) % 26\n    \n    rotated_first_half = rotate(first_half, rotation_first_half)\n    rotated_second_half = rotate(second_half, rotation_second_half)\n    \n    merged = \"\"\n    for char1, char2 in zip(rotated_first_half, rotated_second_half):\n        rotation_value = ord(char2) - ord('A')\n        merged += rotate(char1, rotation_value)\n    \n    return merged\n\ndef",
        "test": "assert solution(\"YMZOPXRB\") == \"DEFGHI\"",
        "indeed": false
    },
    {
        "number": 4902,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(word: str) -> bool:\n        return word == word[::-1]\n\n    def get_peragrams(word: str) -> set:\n        peragrams = set()\n        for i in range(len(word)):\n            for j in range(i + 1, len(word) + 1):\n                peragram = ''.join(sorted(word[i:j]))\n                if is_palindrome(peragram):\n                    peragrams.add(peragram)\n        return peragrams\n\n    word = stdin\n    peragrams = get_peragrams(word)\n    if not peragrams:\n        return len(word)\n\n    min_length = float('inf')\n    for peragram in peragrams:\n        length = len(word) - len(peragram)\n        if length < min_length:\n            min_length = length\n\n    return min_length",
        "test": "assert solution('abc') == 2",
        "indeed": false
    },
    {
        "number": 4903,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    jon_marius_aah, doctor_aah = stdin.split()\n    if jon_marius_aah.count(\"a\") >= len(doctor_aah) and doctor_aah[-1] == \"h\":\n        return \"go\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"aaah\\nh\") == \"go\"",
        "indeed": true
    },
    {
        "number": 4904,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    alice_score = 0\n    barbara_score = 0\n    alice_turn = True\n    for i in range(0, len(stdin), 2):\n        player = stdin[i]\n        points = int(stdin[i+1])\n        if player == \"A\":\n            alice_score += points\n        else:\n            barbara_score += points\n        if alice_turn and alice_score >= 11:\n            return \"A\"\n        elif not alice_turn and barbara_score >= 11:\n            return \"B\"\n        elif alice_score - barbara_score >= 2:\n            return \"A\"\n        elif barbara_score - alice_score >= 2:\n            return \"B\"\n        alice_turn = not alice_turn\n    return \"A\" if alice_score > barbara_score else \"B\"",
        "test": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"",
        "indeed": true
    },
    {
        "number": 4905,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def find_intersection(route, start, end):\n        for i in range(len(route)):\n            if route[i] == start:\n                return i\n            elif route[i] == end:\n                return i - 1\n        return -1\n\n    def bfs(graph, start, end, blocked):\n        queue = [(start, 0)]\n        visited = set()\n        while queue:\n            current, time = queue.pop(0)\n            if current == end:\n                return time\n            if current in visited or current in blocked:\n                continue\n            visited.add(current)\n            for neighbor in graph[current]:\n                queue.append((neighbor, time + 1))\n        return -1\n\n    N, M = map(int, stdin.readline().split())\n    A, B, K, G = map(int, stdin.readline().split())\n    route = list(map(int, stdin.readline().split()))\n    blocked = set()\n    graph = [[] for _ in range(N + 1)]\n    for _ in range(M):\n        A, B, L = map(int, stdin.readline().split())\n        graph[A].append(B)\n        graph[B].append(A)\n\n    for i in range(len(route)):\n        intersection = route[i]\n        if i == 0:\n            blocked.add(intersection)\n        else:\n            start_time = intersection + K\n            end_time = start_time + L\n            blocked.update(range(start_time, end_time + 1))\n\n    for i in range(len(route)):\n        start = route[i]\n        end = route[i + 1] if i < len(route) - 1 else B\n        time = bfs(graph, start, end, blocked)\n        if time == -1:\n            return \"Impossible\"\n        else:\n            K += time\n\n    return K ",
        "test": "assert solution(\"7 7\\n3 7 10 5\\n3 5 10 5\\n1 5 5 5\\n5 2 10 5\\n2 4 10 5\\n4 6 10 5\\n4 6 10 5\\n6 3 10 5\") == \"30\" ",
        "indeed": false
    },
    {
        "number": 4906,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    command, message = stdin.split()\n    if command == \"E\":\n        result = \"\"\n        count = 1\n        for i in range(1, len(message)):\n            if message[i] == message[i - 1]:\n                count += 1\n            else:\n                result += str(count) + message[i - 1]\n                count = 1\n        result += str(count) + message[-1]\n        return result\n    elif command == \"D\":\n        result = \"\"\n        for i in range(0, len(message), 2):\n            result += message[i] * int(message[i + 1])\n        return result\n    else:\n        return \"Invalid command\" ",
        "test": "assert solution(\"D H3e2l3o1W1o3r4l2d1!2\") == \"HHHeellloWooorrrrlld!!\" ",
        "indeed": false
    },
    {
        "number": 4907,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"Bob\"\n    else:\n        return \"Alice\"\n\ndef",
        "test": "assert solution(\"2\") == \"Alice\\n1\"",
        "indeed": false
    },
    {
        "number": 4908,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    num1, num2, num3 = map(int, stdin.split())\n    results = []\n\n    for op in [\"+\", \"-\", \"*\", \"/\"]:\n        if op == \"+\":\n            results.append(f\"{num1}{op}{num2}={num3}\")\n            results.append(f\"{num2}{op}{num1}={num3}\")\n        elif op == \"-\":\n            results.append(f\"{num1}{op}{num2}={num3}\")\n            results.append(f\"{num3}{op}{num1}={num2}\")\n            results.append(f\"{num2}{op}{num1}={num3}\")\n        elif op == \"*\":\n            results.append(f\"{num1}{op}{num2}={num3}\")\n            results.append(f\"{num3}{op}{num1}={num2}\")\n            results.append(f\"{num2}{op}{num1}={num3}\")\n        elif op == \"/\":\n            results.append(f\"{num1}{op}{num2}={num3}\")\n            results.append(f\"{num3}{op}{num1}={num2}\")\n            results.append(f\"{num2}{op}{num1}={num3}\")\n\n    return results[0]",
        "test": "assert solution(\"5 3 8\") == \"5+3=8\"",
        "indeed": false
    },
    {
        "number": 4909,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, D = stdin.split('\\n')\n    N = int(N)\n    D = list(map(int, D.split()))\n\n    # check if D is valid\n    for i in range(1, N):\n        if D[i] != D[i-1] - 1:\n            return \"NO\"\n\n    return \"YES\"",
        "test": "assert solution(\"3\\n1 1 1\") == \"NO\"",
        "indeed": false
    },
    {
        "number": 4910,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    costumes = lines[1:]\n\n    # count occurrences of each costume\n    counts = {}\n    for costume in costumes:\n        if costume in counts:\n            counts[costume] += 1\n        else:\n            counts[costume] = 1\n\n    # find winners\n    max_count = max(counts.values())\n    winners = [costume for costume, count in counts.items() if count == max_count]\n\n    # sort winners lexicographically\n    winners.sort()\n\n    # output winners\n    return \"\\n\".join(winners)",
        "test": "assert solution(\"5\\ncat\\ndog\\ncat\\ncat\\ndog\") == \"cat\"",
        "indeed": false
    },
    {
        "number": 4911,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    attributes, n_songs, commands = stdin.split('\\n')\n    attributes = attributes.split()\n    commands = commands.split()\n    songs = []\n    for _ in range(int(n_songs)):\n        song = input().split()\n        songs.append(song)\n\n    # Sort songs by attributes\n    sorted_songs = sorted(songs, key=lambda x: tuple(x[attributes.index(c)] for c in commands))\n\n    # Print output\n    output = \"\"\n    for c in commands:\n        sorted_songs = sorted(sorted_songs, key=lambda x: x[attributes.index(c)])\n        output += c + \"\\n\"\n        for song in sorted_songs:\n            output += \" \".join(song) + \"\\n\"\n        output += \"\\n\"\n\n    return output",
        "test": "assert solution(input2) == output2",
        "indeed": false
    },
    {
        "number": 4912,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    h, w, n = map(int, stdin.split()[:3])\n    x = list(map(int, stdin.split()[3:]))\n\n    if max(x) > w:\n        return \"NO\"\n\n    x.sort()\n    total_length = sum(x)\n    brick_count = 0\n    layer_height = 1\n    layer_count = 0\n\n    for i in range(len(x)):\n        if x[i] <= w:\n            brick_count += 1\n        else:\n            return \"NO\"\n\n        if brick_count == w:\n            layer_count += 1\n            brick_count = 0\n            layer_height += 1\n\n        if layer_height == h:\n            break\n\n    if layer_count == h:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"2 10 8\\n5 5 5 5 5 5 5\") == \"NO\"",
        "indeed": false
    },
    {
        "number": 4913,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    vaccinated = [lines[i] for i in range(1, N+1)]\n    control = [vaccinated.pop(i) for i in range(0, len(vaccinated), 2)]\n    \n    vaccine_efficacy = []\n    \n    for i in range(N):\n        if i < len(control):\n            vaccine_efficacy.append(\"Not Effective\" if vaccinated[i][1] >= control[i][1] else \"{:.2f}\".format(1 - vaccinated[i][1] / control[i][1] * 100))\n        else:\n            vaccine_efficacy.append(\"Not Effective\" if vaccinated[i][2] >= control[i-1][2] else \"{:.2f}\".format(1 - vaccinated[i][2] / control[i-1][2] * 100))\n    \n    return \"\\n\".join(vaccine_efficacy)",
        "test": "assert solution(\"2\\nNN\\nNN\") == \"Not Effective\\n100.000000\"",
        "indeed": false
    },
    {
        "number": 4914,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    correct_answers = stdin.split('\\n')[1]\n    \n    adrian_sequence = \"ABCA\" * (n // 3)\n    bruno_sequence = \"ABAB\" * (n // 4)\n    goran_sequence = \"C\" * (n // 2) + \"A\" * (n // 2)\n    \n    sequences = [adrian_sequence, bruno_sequence, goran_sequence]\n    \n    correct_counts = [sum(1 for i, j in zip(correct_answers, sequence) if i == j) for sequence in sequences]\n    \n    max_correct_count = max(correct_counts)\n    \n    winners = sorted([name for index, name in enumerate([\"Adrian\", \"Bruno\", \"Goran\"]) if correct_counts[index] == max_correct_count])\n    \n    return str(max_correct_count) + \"\\n\" + \"\\n\".join(winners)",
        "test": "assert solution('10\\n
        "indeed": false
    },
    {
        "number": 4915,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    log = [line.strip().split() for line in stdin.split(\"\\n\") if line.strip() != \"-1\"]\n    problems_solved = {}\n    time_score = 0\n\n    for entry in log:\n        time, problem, result = int(entry[0]), entry[1], entry[2]\n\n        if problem not in problems_solved:\n            if result == \"right\":\n                problems_solved[problem] = True\n                time_score += time\n            else:\n                problems_solved[problem] = False\n        elif problems_solved[problem] and result == \"right\":\n            time_score += time\n\n    total_time_score = time_score + 20 * sum(not value for value in problems_solved.values())\n    return f\"{len(problems_solved)} {total_time_score}\" ",
        "test": "assert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n-1\") == \"4 502\" ",
        "indeed": false
    },
    {
        "number": 4916,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    matrix = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    visited = [[False] * k for _ in range(n)]\n    shortest_distance = float('inf')\n\n    def dfs(x: int, y: int, distance: int, current_number: int) -> None:\n        if current_number == k:\n            nonlocal shortest_distance\n            shortest_distance = min(shortest_distance, distance)\n            return\n\n        visited[y][x] = True\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == current_number + 1:\n                    distance_to_next = abs(x - i) + abs(y - j)\n                    if not visited[j][i] and distance_to_next <= distance:\n                        dfs(i, j, distance + distance_to_next, current_number + 1)\n        visited[y][x] = False\n\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                dfs(i, j, 0, 1)\n\n    return shortest_distance if shortest_distance != float('inf') else -1\n\nstdin = \"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\") == \"5\" ",
        "indeed": false
    },
    {
        "number": 4917,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    data = [list(map(int, line.split())) for line in stdin.split('\\n')]\n    N = data[0][0]\n    intervals = data[1:]\n    total_time = sum(b - a for a, b in intervals)\n    avg_time = total_time / N\n\n    if avg_time == 0:\n        return \"edward is right\"\n    else:\n        return \"gunilla has a point\"\n\nstdin = \"2\\n1 7\\n5 5\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"2\\n1 7\\n5 5\") == \"gunilla has a point\"",
        "indeed": false
    },
    {
        "number": 4918,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    guests = [i for i in range(1, n+1)]\n    queries = stdin.split('\\n')[n:]\n    merge_groups = set()\n    \n    for query in queries:\n        if query[0] == 't':\n            a, b = map(int, query.split()[1:])\n            if a in merge_groups or b in merge_groups:\n                continue\n            for guest in guests:\n                if guest not in merge_groups and guest != a and guest != b:\n                    if guests[guest-1] == a:\n                        guests[guest-1] = b\n                    elif guests[guest-1] == b:\n                        guests[guest-1] = a\n            merge_groups.add(a)\n            merge_groups.add(b)\n        elif query[0] == 's':\n            a = int(query.split()[1])\n            for i in range(len(guests)):\n                if guests[i] == a:\n                    print(i+1)\n                    break",
        "test": "assert solution(\"5 5\\nt 1 2\\nt 2 3\\nt 3 4\\nt 4 5\\ns 1\\ns 2\\ns 3\\ns 4\\ns 5\") == \"5\\n5\\n5\\n5\\n5\"",
        "indeed": false
    },
    {
        "number": 4919,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    trips = {}\n    n = int(stdin.readline())\n    for i in range(n):\n        country, year = stdin.readline().split()\n        year = int(year)\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    \n    q = int(stdin.readline())\n    for i in range(q):\n        country, k = stdin.readline().split()\n        k = int(k)\n        year = trips[country][k-1]\n        print(year)",
        "test": "assert solution(\"5\\nItaly 2010\\nFrance 2012\\nUSA 2008\\nSpain 2016\\nUK 2014\\n3\\nItaly 1\\nFrance 2\\nSpain 1\") == \"2010\\n2008\\n2016\\n\"",
        "indeed": false
    },
    {
        "number": 4920,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    types = set(stdin)\n    num_types = len(types)\n    \n    good_itineraries = 0\n    for i in range(num_types):\n        for j in range(i+1, num_types):\n            for k in range(j+1, num_types):\n                good_itineraries += (stdin.count(chr(i+97)) * stdin.count(chr(j+97)) * stdin.count(chr(k+97)))\n    \n    return str(good_itineraries)",
        "test": "assert solution(\"abbcccddddeeeee\") == \"10\"",
        "indeed": false
    },
    {
        "number": 4921,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into lines\n    lines = stdin.split('\\n')\n    \n    # Initialize an empty dictionary to keep track of seen words\n    seen_words = {}\n    \n    # Initialize an empty list to store the output words\n    output_words = []\n    \n    # Loop through each line\n    for line in lines:\n        # Split the line into words\n        words = line.split(' ')\n        \n        # Loop through each word\n        for word in words:\n            # Convert the word to lowercase for case-insensitive comparison\n            word = word.lower()\n            \n            # If the word has not been seen before, add it to the seen_words dictionary and append it to the output_words list\n            if word not in seen_words:\n                seen_words[word] = True\n                output_words.append(word)\n            # If the word has been seen before, append a period to the output_words list\n            else:\n                output_words.append('.')\n        \n        # Add a space after each line\n        output_words.append(' ')\n    \n    # Join the output_words list into a single string and return it\n    return ''.join(output_words)",
        "test": "assert solution(\"The quick brown fox jumps over the lazy dog\") == \"The quick brown fox jumps over the lazy dog\"",
        "indeed": false
    },
    {
        "number": 4922,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    lines = stdin.splitlines()\n    m, n = map(int, lines[0].split())\n    clauses = [list(map(int, line.split())) for line in lines[1:]]\n\n    # Check if number of clauses is greater than or equal to 8\n    if m >= 8:\n        return \"satisfactory\"\n    else:\n        return \"unsatisfactory\"",
        "test": "assert solution(stdin=\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"",
        "indeed": true
    },
    {
        "number": 4923,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    group_size, outcomes = stdin.split('\\n')\n    group_size = int(group_size)\n    outcomes = list(map(int, outcomes.split()))\n\n    for i in range(len(outcomes) // group_size + 1):\n        group = outcomes[i * group_size: (i + 1) * group_size]\n        unique_outcomes = set(group)\n        if len(unique_outcomes) == 1:\n            return str(i)\n\n    return \"none\"",
        "test": "assert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"none\"",
        "indeed": false
    },
    {
        "number": 4924,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    current_time, explosion_time = stdin.split('\\n')\n    current_time_list = [int(i) for i in current_time.split(':')]\n    explosion_time_list = [int(i) for i in explosion_time.split(':')]\n\n    time_difference_list = [explosion_time_list[i] - current_time_list[i] for i in range(len(current_time_list))]\n    time_difference_list[0] = time_difference_list[0] % 24\n\n    time_difference = ':'.join([str(i).zfill(2) for i in time_difference_list])\n\n    return time_difference\n\n\ninput_str = \"20:00:00\\n04:00:00\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"00:00:00\\n01:00:00\") == \"01:00:00\"",
        "indeed": false
    },
    {
        "number": 4925,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    l, n = map(int, stdin.split())\n    k = l // n\n    while l % n != 0:\n        k += 1\n        l += k * n\n    return str(k)\n\ninput_str = input()\nprint(solution(input_str)) ",
        "test": "assert solution(\"31 6\") == \"4\"",
        "indeed": false
    },
    {
        "number": 4926,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    e = 0\n    for i in range(n+1):\n        e += 1/math.factorial(i)\n    return \"{:.12f}\".format(e)\n\ndef",
        "test": "assert solution(\"1\") == str(round(2.718281828459045, 12))",
        "indeed": false
    },
    {
        "number": 4927,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    if p == q:\n        return \"paul\"\n    elif p > q:\n        return \"opponent\"\n    else:\n        return \"paul\"",
        "test": "assert solution(\"10 7 5\") == \"opponent\"",
        "indeed": false
    },
    {
        "number": 4928,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    num_cuts = int(stdin.strip())\n    pieces = 1\n    pieces += num_cuts  # add one piece for each cut\n    return str(pieces)  # convert to string and return",
        "test": "assert solution(\"1\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4929,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    password = stdin.split(\"\\n\")[0]\n    attempted_password = stdin.split(\"\\n\")[1]\n\n    def reverse_case(s: str) -> str:\n        result = \"\"\n        for c in s:\n            if c.islower():\n                result += c.upper()\n            elif c.isupper():\n                result += c.lower()\n            else:\n                result += c\n        return result\n\n    def is_accepted(password: str, attempted_password: str) -> bool:\n        if password == attempted_password:\n            return True\n        if password == attempted_password + \"0\" or password == attempted_password + \"1\" or password == attempted_password + \"2\" or password == attempted_password + \"3\" or password == attempted_password + \"4\" or password == attempted_password + \"5\" or password == attempted_password + \"6\" or password == attempted_password + \"7\" or password == attempted_password + \"8\" or password == attempted_password + \"9\":\n            return True\n        if password == reverse_case(attempted_password):\n            return True\n        return False\n\n    if is_accepted(password, attempted_password):\n        return \"Yes\"\n    else:\n        return \"No\"\n\ninput_str = \"123\\n123a\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"123\\n123a\") == \"No\"",
        "indeed": true
    },
    {
        "number": 4930,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    decoded_words = []\n    for word in words:\n        decoded_word = \"\"\n        for index, char in enumerate(word):\n            if char in \"aeiou\":\n                decoded_word += char + \"p\" + char\n            else:\n                decoded_word += char\n        decoded_words.append(decoded_word)\n    return \" \".join(decoded_words)",
        "test": "assert solution(\"kepemipijapa hapemipijapa\") == \"kemija hapemija\"",
        "indeed": false
    },
    {
        "number": 4931,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x >= 0:\n        a = 0\n        b = x\n    else:\n        a = -x\n        b = 0\n    if a % y == 0 and b % y == 0:\n        return \"ALL GOOD\"\n    elif a % y == 0:\n        return \"IMPOSSIBLE\"\n    else:\n        temp = round((b / (a % y)) * y, 6)\n        if abs(temp - x) <= 1e-6:\n            return str(temp)\n        else:\n            return \"IMPOSSIBLE\"",
        "test": "assert solution(\"10 3\") == \"IMPOSSIBLE\"",
        "indeed": false
    },
    {
        "number": 4932,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split()[:4])\n    P, M, G = map(int, stdin.split()[4:])\n\n    def dog_attack(time, aggressive_time):\n        return (time % (aggressive_time + B)) < aggressive_time\n\n    postman_attacked = dog_attack(P, A)\n    milkman_attacked = dog_attack(M, C)\n    garbage_attacked = dog_attack(G, D)\n\n    both_attacked = postman_attacked and milkman_attacked and garbage_attacked\n    one_attacked = (postman_attacked and not milkman_attacked and not garbage_attacked) or (not postman_attacked and milkman_attacked and not garbage_attacked) or (not postman_attacked and not milkman_attacked and garbage_attacked)\n    none_attacked = not postman_attacked and not milkman_attacked and not garbage_attacked\n\n    return \"\\n\".join([\n        \"both\" if both_attacked else \"one\" if one_attacked else \"none\",\n        \"both\" if both_attacked else \"one\" if milkman_attacked else \"none\",\n        \"both\" if both_attacked else \"one\" if garbage_attacked else \"none\"\n    ])\n\nstdin = \"2 2 3 3 1 3 4\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"4 10 10 20\\n1 5 8\") == \"none\\nboth\\nnone\"",
        "indeed": false
    },
    {
        "number": 4933,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    d = b - a\n    fourth_number = 2 * c - a - b\n    return str(fourth_number)\n\ninput_str = input()\noutput = solution(input_str)\nprint(output) ",
        "test": "assert solution(\"3 5 7\") == \"9\"",
        "indeed": false
    },
    {
        "number": 4934,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    h, v = map(int, stdin.split())\n    v *= 3.14159 / 180  # convert degrees to radians\n    return str(int(round(h / math.tan(v))))\n\ndef",
        "test": "assert solution(\"1000 60\") == \"1108\"",
        "indeed": false
    },
    {
        "number": 4935,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, g = map(float, stdin.split()[0].split())\n    segments = [(float(d), float(theta)) for d, theta in [map(float, line.split()) for line in stdin.split()[1:]]]\n\n    def acceleration(theta):\n        return g * math.cos(math.radians(theta))\n\n    def velocity(d, theta, start_height, end_height):\n        return start_height + (d * math.sin(math.radians(theta)))\n\n    def total_distance(segments):\n        total = 0\n        for segment in segments:\n            total += segment[0]\n        return total\n\n    total_height = total_distance(segments)\n    speeds = []\n\n    for i in range(len(segments)):\n        start_height = 0 if i == 0 else segments[i-1][0]\n        end_height = total_height - segments[i][0]\n        speed = velocity(segments[i][0], segments[i][1], start_height, end_height)\n        speeds.append(speed)\n\n    return '\\n'.join([f'{s:.1f}' for s in speeds])",
        "test": "assert solution(\"3 5\\n100 45\\n100 90\\n200 30\") == \"11.8873\\n5.0\\n12.1622\"",
        "indeed": false
    },
    {
        "number": 4936,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input().strip())\n    temperatures = list(map(int, input().strip().split()))\n\n    min_temp = float('inf')\n    min_day = 0\n\n    for day in range(1, n - 1):\n        temp_range = max(temperatures[day - 1: day + 2]) - min(temperatures[day - 1: day + 2])\n        if temp_range < min_temp:\n            min_temp = temp_range\n            min_day = day\n\n    return f\"{min_day} {min_temp}\"\n\ndef",
        "test": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"",
        "indeed": false
    },
    {
        "number": 4937,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split()[:2])\n    e = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    \n    for ships in e:\n        if ships < a:\n            count += 1\n            a -= ships\n        elif ships == a:\n            count += 1\n            a = 0\n        else:\n            count += 1\n            a = 0\n            break\n    \n    return str(count)",
        "test": "assert solution(\"5 10\\n3 4 5 6 7\") == \"4\"",
        "indeed": false
    },
    {
        "number": 4938,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    max_difference, queue = stdin.split(\"\\n\")\n    max_difference = int(max_difference)\n    \n    women, men = 0, 0\n    for gender in queue:\n        if gender == 'W':\n            women += 1\n        else:\n            men += 1\n        \n        if abs(women - men) > max_difference:\n            return str(women + men)\n    \n    return str(women + men)",
        "test": "assert solution(\"1\\nMWWMWMMWM\") == \"9\"",
        "indeed": false
    },
    {
        "number": 4939,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    commands = input().split()\n\n    children = list(range(n))\n    egg = 0\n\n    for command in commands:\n        if command.startswith(\"undo\"):\n            m = int(command[5:])\n            egg = children[children.index(egg) - m]\n        else:\n            p = int(command)\n            if p >= 0:\n                egg = (egg + p) % n\n            else:\n                egg = (egg + n + p) % n\n\n    return str(egg)",
        "test": "assert solution(\"10 7\\n-2 8 0 -3 5 4 3 2 1\") == \"7\"",
        "indeed": false
    },
    {
        "number": 4940,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    swathers = [list(map(int, lines[i+1].split())) for i in range(n)]\n    \n    # Calculate the completion time for each swather\n    completion_times = [0] * n\n    for stage in range(m):\n        min_time = float('inf')\n        for i in range(n):\n            if completion_times[i] <= stage:\n                min_time = min(min_time, swathers[i][stage])\n        for i in range(n):\n            if completion_times[i] <= stage:\n                completion_times[i] += min_time\n    \n    # Return the result as a single line of space-separated integers\n    return \" \".join(map(str, completion_times))",
        "test": "assert solution(\"3 4\\n1 2 3 4\\n4 3 2 1\\n1 2 3 4\\n1 2 3 4\") == \"10 14 18\"",
        "indeed": false
    },
    {
        "number": 4941,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, s, m, *dict = stdin.split('\\n')\n    n = int(n)\n    m = int(m)\n    s = s.split()\n    words = {}\n    correct = 0\n    incorrect = 0\n    \n    for i in range(m):\n        d, e, c = dict[i].split()\n        if d not in words:\n            words[d] = []\n        words[d].append((e, c))\n    \n    def is_correct(translation):\n        for word in s:\n            if word not in words:\n                return False\n            translations = [t for t in words[word] if t[1] == 'correct']\n            if not translations:\n                return False\n            if translations[0][0] not in translation:\n                return False\n        return True\n    \n    def translate(s):\n        result = []\n        for word in s:\n            translations = [t[0] for t in words[word] if t[1] == 'correct']\n            result.append(translations[0])\n        return result\n    \n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        translation = translate([s[j] if bits[j] == '0' else words[s[j]][0][0] for j in range(n)])\n        if is_correct(translation):\n            correct += 1\n        else:\n            incorrect += 1\n    \n    return f\"{correct} correct\\n{incorrect} incorrect\" ",
        "test": "assert solution(input_data) == output_data ",
        "indeed": false
    },
    {
        "number": 4942,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    num_trees = int(lines[0])\n    tree_growth_days = list(map(int, lines[1].split()))\n    \n    max_growth_day = max(tree_growth_days)\n    min_planting_day = max_growth_day\n    \n    for tree_growth_day in tree_growth_days:\n        min_planting_day = min(min_planting_day, max_growth_day - tree_growth_day)\n        \n    return str(min_planting_day + 1)",
        "test": "assert solution(\"5\\n1 2 3 4 5\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4943,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    corners = []\n    for i in range(1, n+1):\n        x, y = map(float, lines[i].split())\n        corners.append((x, y))\n    area = int(lines[-1])\n    \n    # Calculate the center of the polygon\n    cx = sum(x for x, _ in corners) / n\n    cy = sum(y for _, y in corners) / n\n    \n    # Calculate the radius of the new polygon\n    radius = (area / (2 * n * math.sin(math.pi / n))) ** 0.5\n    \n    # Resize the polygon\n    new_corners = [(cx + radius * math.cos(2 * i * math.pi / n), cy + radius * math.sin(2 * i * math.pi / n)) for i in range(n)]\n    \n    # Ensure the polygon touches the axes\n    min_x = min(x for x, y in new_corners)\n    min_y = min(y for x, y in new_corners)\n    new_corners = [(x - min_x, y - min_y) for x, y in new_corners]\n    \n    # Output the new corners\n    output = '\\n'.join(f'{x:.4f} {y:.4f}' for x, y in new_corners)\n    return output",
        "test": "assert solution('3\\n0 0\\n1 1\\n0 2\\n1\\n') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0\\n'",
        "indeed": false
    },
    {
        "number": 4944,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    # Number of days needed to print n statues with one printer\n    days_needed = n\n\n    # Number of days needed to print n statues with two printers\n    days_needed = min(days_needed, 1 + n // 2 + (n % 2 > 0))\n\n    # Number of days needed to print n statues with three printers\n    days_needed = min(days_needed, 1 + n // 3 + (n % 3 > 0))\n\n    # Number of days needed to print n statues with k printers\n    for k in range(4, n + 1):\n        days_needed = min(days_needed, 1 + n // k + (n % k > 0))\n\n    return str(days_needed)",
        "test": "assert solution(\"1\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4945,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a, b, m, sigma = map(int, stdin.split())\n\n    max_x = m - sigma // 2\n    max_y = (sigma - m) // 2\n\n    R = a * max_x + b * max_y\n    return str(R)\n",
        "test": "assert solution(\"2 1\\n10 10\") == \"20\" ",
        "indeed": false
    },
    {
        "number": 4946,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    languages = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    max_awkwardness = n\n    for i in range(n):\n        for j in range(i+2, n):\n            if languages[i] == languages[j]:\n                max_awkwardness = min(max_awkwardness, abs(i - j))\n    \n    return str(max_awkwardness)",
        "test": "assert solution(\"5\\n0 1 2 3 4\") == \"5\"",
        "indeed": true
    },
    {
        "number": 4947,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X = float(stdin)\n    paces_per_mile = 1000 * 5280 / 4854\n    roman_paces = round(paces_per_mile * X)\n    return str(roman_paces)",
        "test": "assert solution(\"1.0\") == \"1088\"",
        "indeed": true
    },
    {
        "number": 4948,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split()[0:2])\n    holes = []\n    for i in range(n):\n        r, x, y, z = map(float, stdin.split()[4*i+2:4*i+6])\n        holes.append((r, x, y, z))\n    \n    # Sort holes by their radius in descending order\n    holes.sort(key=lambda x: x[0], reverse=True)\n    \n    def get_slice_thickness(cheese_thickness: float, holes: list) -> float:\n        slice_thickness = cheese_thickness / s\n        for hole in holes:\n            if hole[0] * 2 <= slice_thickness:\n                slice_thickness -= hole[0] * 2\n            else:\n                return slice_thickness\n        return slice_thickness\n    \n    slice_thickness = get_slice_thickness(100, holes)\n    slice_thicknesses = [slice_thickness]\n    for i in range(1, s):\n        slice_thickness = get_slice_thickness(100, holes[:i])\n        slice_thicknesses.append(slice_thickness)\n    \n    return '\\n'.join(f'{t:.6f}' for t in slice_thicknesses)\n",
        "test": "assert solution(\"2 5\") == \"25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\"",
        "indeed": false
    },
    {
        "number": 4949,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    num_matches, box_width, box_height = map(int, lines[0].split())\n    matches = list(map(int, lines[1:]))\n    result = []\n\n    for match in matches:\n        if match <= box_width and match <= box_height:\n            result.append(\"DA\")\n        else:\n            result.append(\"NE\")\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"10 5 5\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"DA\\nDA\\nDA\\nDA\\nDA\\nNE\\nNE\\nNE\\nNE\\nNE\"",
        "indeed": false
    },
    {
        "number": 4950,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.splitlines()[0])\n    photos = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n\n    # calculate speeds\n    speeds = [0] * n\n    for i in range(1, n):\n        time_diff = photos[i][0] - photos[i-1][0]\n        distance_diff = photos[i][1] - photos[i-1][1]\n        speeds[i] = distance_diff / time_diff\n\n    # find maximum speed\n    max_speed = int(max(speeds))\n\n    return str(max_speed)",
        "test": "assert solution(\"2\\n0 0\\n7 42\") == \"6\"",
        "indeed": true
    },
    {
        "number": 4951,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    proof = stdin.split('\\n')[1:]\n    conclusions = set()\n    for line in proof:\n        line = line.strip().split()\n        if line[0] == '->':\n            assumptions = line[1:-1]\n            conclusion = line[-1]\n            if not assumptions and conclusion not in conclusions:\n                conclusions.add(conclusion)\n                continue\n            if all(assumption in conclusions for assumption in assumptions):\n                conclusions.add(conclusion)\n            else:\n                return str(proof.index(line) + 1)\n    return 'correct'",
        "test": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"",
        "indeed": false
    },
    {
        "number": 4952,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.split('\\n')[:-1]\n\n    # Initialize votes dictionary\n    votes = {}\n\n    # Count votes\n    for line in lines:\n        if line not in votes:\n            votes[line] = 0\n        votes[line] += 1\n\n    # Determine winner\n    winner = None\n    for candidate, count in votes.items():\n        if count > len(lines) // 2:\n            winner = candidate\n            break\n\n    # Output result\n    if winner is not None:\n        return winner\n    else:\n        return \"Runoff!\" ",
        "test": "assert solution(\"Alice\\nBob\\nCharlie\\nDavid\\nEve\\n***\") == \"Runoff!\" ",
        "indeed": false
    },
    {
        "number": 4953,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Split input by lines\n    lines = stdin.splitlines()\n    \n    # Get number of characters\n    num_chars = int(lines[0])\n    \n    # Create character dictionary\n    chars = {}\n    for line in lines[1:]:\n        name, main_lang, *other_langs = line.split()\n        chars[name] = {\"main\": main_lang, \"other\": other_langs}\n    \n    # Function to check if two characters can converse\n    def can_converse(char1, char2):\n        if chars[char1][\"main\"] in chars[char2][\"other\"] and chars[char2][\"main\"] in chars[char1][\"other\"]:\n            return True\n        return False\n    \n    # Function to find smallest set of characters to leave\n    def find_smallest_set_to_leave(chars_to_leave):\n        for char in chars:\n            if char not in chars_to_leave:\n                new_set = chars_to_leave.copy()\n                new_set.add(char)\n                if all(can_converse(char1, char2) for char1 in new_set for char2 in new_set if char1 != char2):\n                    return find_smallest_set_to_leave(new_set)\n        return chars_to_leave\n    \n    # Find smallest set of characters to leave\n    smallest_set = find_smallest_set_to_leave(set())\n    \n    # Return output\n    return str(len(smallest_set))",
        "test": "assert solution(\"3\\nFran Gaelic Irish\\nIan Gaelic Irish\\nPolly Gaelic Welsh\\nSpencer Welsh Gaelic\\n\") == \"1\" ",
        "indeed": false
    },
    {
        "number": 4954,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, B, H, W = map(int, stdin.split()[:4])\n    hotels = []\n    for i in range(H):\n        price, availability = map(int, stdin.split()[4*i+4:4*i+6])\n        hotels.append((price, availability))\n\n    # calculate minimum cost\n    min_cost = float('inf')\n    for price, availability in hotels:\n        if B // price * N > availability:\n            continue  # not enough available beds\n        if B - price * N > 0:\n            min_cost = min(min_cost, B - price * N)\n        else:\n            min_cost = min(min_cost, price * N)\n            break\n\n    # output result\n    if min_cost == float('inf'):\n        return \"stay home\"\n    else:\n        return str(min_cost)",
        "test": "assert solution(\"3 1000000 1 2\\n2\\n5000\\n1 1\") == \"stay home\"",
        "indeed": false
    },
    {
        "number": 4955,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    notes = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\n    scales = [[\"A\", \"C\", \"D\", \"F\", \"G\"],\n              [\"A#\", \"C#\", \"D#\", \"F#\", \"G#\"],\n              [\"B\", \"D\", \"E\", \"F#\", \"A\"],\n              [\"B#\", \"D#\", \"E#\", \"Gb\", \"A#\"],\n              [\"C\", \"Eb\", \"F\", \"G\", \"Bb\"],\n              [\"C#\", \"E\", \"F#\", \"G#\", \"B\"],\n              [\"D\", \"F\", \"Gb\", \"A\", \"C\"],\n              [\"D#\", \"G\", \"Ab\", \"B\", \"Db\"],\n              [\"E\", \"G#\", \"A\", \"Bb\", \"Eb\"],\n              [\"F\", \"A\", \"B\", \"C\", \"Eb\"],\n              [\"F#\", \"A#\", \"C\", \"Db\", \"F\"]]\n    \n    n = int(stdin.split('\\n')[0])\n    song_notes = stdin.split('\\n')[1].split(' ')\n    \n    valid_scales = []\n    for scale in scales:\n        valid = True\n        for note in scale:\n            if note not in song_notes:\n                valid = False\n                break\n        if valid:\n            valid_scales.append(' '.join(scale))\n    \n    if not valid_scales:\n        return \"none\"\n    else:\n        return ' '.join(valid_scales)",
        "test": "assert solution(\"14\\nC D E F G A B C\") == \"A# B C D# F#\"",
        "indeed": false
    },
    {
        "number": 4956,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into a list of words\n    words = stdin.split()\n\n    # Count the occurrences of the letter combination ae\n    ae_count = 0\n    for word in words:\n        ae_count += word.count(\"ae\")\n\n    # Calculate the percentage of words containing the letter combination ae\n    ae_percentage = ae_count / len(words)\n\n    # Determine whether the input sentence is in \u00f6stg\u00f6tska or rikssvenska\n    if ae_percentage >= 0.4:\n        return \"dae ae ju traeligt va\"\n    else:\n        return \"haer talar vi rikssvenska\"",
        "test": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"",
        "indeed": true
    },
    {
        "number": 4957,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def valid_position(i, j, land_positions, coffee_positions):\n        for pos in land_positions:\n            if (i-1, j) in pos or (i+1, j) in pos or (i, j-1) in pos or (i, j+1) in pos:\n                return False\n        for pos in coffee_positions:\n            if (i-1, j) in pos or (i+1, j) in pos or (i, j-1) in pos or (i, j+1) in pos:\n                return False\n        return True\n\n    n, m = map(int, stdin.split()[0:2])\n    grid = stdin.split()[2:]\n    land_positions = []\n    coffee_positions = []\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                land_positions.append((i, j))\n            elif grid[i][j] == '#':\n                continue\n            else:\n                raise ValueError(\"Invalid character in input.\")\n\n    for pos in land_positions:\n        if valid_position(pos[0], pos[1], land_positions, coffee_positions):\n            coffee_positions.append(pos)\n            grid[pos[0]] = grid[pos[0]][:pos[1]] + 'E' + grid[pos[0]][pos[1]+1:]\n\n    return '\\n'.join(grid)",
        "test": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'",
        "indeed": false
    },
    {
        "number": 4958,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_values = list(map(int, stdin.split()))\n    tower_1_height, tower_2_height = input_values[-2:]\n    box_heights = input_values[:-2]\n    \n    box_heights.sort(reverse=True)\n    \n    tower_1 = box_heights[:3]\n    tower_2 = box_heights[3:]\n    \n    return \" \".join(map(str, tower_1)) + \" \" + \" \".join(map(str, tower_2))",
        "test": "assert solution(\"15 25 5 10 3 7 20 18\") == \"15 10 7 25 18 5\"",
        "indeed": false
    },
    {
        "number": 4959,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    e, f, c = map(int, stdin.split())\n    return str(e // c)",
        "test": "assert solution(\"0 5 10\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4960,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    binary = stdin.lstrip('0')\n    binary_len = len(binary)\n    if binary_len == 0:\n        return \"0\"\n\n    binary = '0' * (3 - (binary_len % 3)) + binary\n    octal = ''\n    for i in range(0, len(binary), 3):\n        octal_digit = 0\n        for j in range(i, i + 3):\n            octal_digit += int(binary[j]) * (2 ** (2 - j % 3))\n        octal += str(octal_digit)\n\n    return octal",
        "test": "assert solution(\"1010\") == \"12\"",
        "indeed": true
    },
    {
        "number": 4961,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R, S = map(int, stdin.split()[0].split())\n    seating_order = stdin.split('\\n')[1:]\n    count = 0\n    \n    for i in range(R):\n        for j in range(S):\n            if seating_order[i][j] == 'o':\n                for neighbor in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]:\n                    neighbor_row = i + neighbor[0]\n                    neighbor_col = j + neighbor[1]\n                    if 0 <= neighbor_row < R and 0 <= neighbor_col < S and seating_order[neighbor_row][neighbor_col] == 'o':\n                        count += 1\n                        \n    return str(count)",
        "test": "assert solution(\"3 4\\n..o.\\n.o..\\n..oo\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4962,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split()[:2])\n    drawers = {i: [] for i in range(1, L + 1)}\n\n    for i in range(N):\n        A, B = map(int, stdin.split()[2:])\n        drawers[A].append(i)\n        drawers[B].append(i)\n\n    items_stored = []\n    items_thrown_away = []\n\n    for item in range(N):\n        if item in items_stored or item in items_thrown_away:\n            continue\n\n        if not drawers[A]:\n            items_stored.append(item)\n            drawers[A].append(item)\n        elif not drawers[B]:\n            items_stored.append(item)\n            drawers[B].append(item)\n        else:\n            for drawer in [A, B]:\n                if item in drawers[drawer]:\n                    continue\n                if not drawers[drawer]:\n                    items_stored.append(item)\n                    drawers[drawer].append(item)\n                    break\n            else:\n                items_thrown_away.append(item)\n\n    output = []\n    for item in range(N):\n        if item in items_stored:\n            output.append(\"LADICA\")\n        elif item in items_thrown_away:\n            output.append(\"SMECE\")\n\n    return \"\\n\".join(output)",
        "test": "assert solution(\"10 4\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n1 3\") == \"SMECE\\nLADICA\\nLADICA\\nLADICA\\nLADICA\\nLADICA\\nLADICA\\nLADICA\\nLADICA\\nLADICA\" ",
        "indeed": false
    },
    {
        "number": 4963,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    dist = list(map(int, stdin.readline().strip().split()))\n    \n    order = [1] * n\n    for i in range(1, n):\n        j = i - 1\n        while j >= 0 and dist[i] == dist[j]:\n            j -= 1\n        order[i] = order[j] + dist[i] - dist[j] + 1\n    \n    return \" \".join(map(str, order))",
        "test": "assert solution(\"4\\n1 2 1\") == \"2 1 4 3\"",
        "indeed": false
    },
    {
        "number": 4964,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, H, L = map(int, stdin.splitlines()[0].split())\n    horror_list = set(map(int, stdin.splitlines()[1].split()))\n    similarities = [tuple(map(int, line.split())) for line in stdin.splitlines()[2:]]\n    \n    # Compute horror index for each movie\n    horror_index = [0] * N\n    for i in range(N):\n        for a, b in similarities:\n            if a == i:\n                horror_index[b] = max(horror_index[b], horror_index[a] + 1)\n            elif b == i:\n                horror_index[a] = max(horror_index[a], horror_index[b] + 1)\n    \n    # Override horror index for movies on horror list\n    for i in range(N):\n        if i in horror_list:\n            horror_index[i] = 0\n    \n    # Find movie with highest horror index\n    max_horror_index = max(horror_index)\n    if max_horror_index == 0:\n        # All movies are on horror list\n        return \"0\"\n    else:\n        result = [i for i in range(N) if horror_index[i] == max_horror_index]\n        return str(min(result))",
        "test": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"",
        "indeed": false
    },
    {
        "number": 4965,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split('\\n')\n    t = list(map(int, t.split()))\n    \n    t.sort(reverse=True)\n    t_new = []\n    \n    for i in range(n):\n        if i % 2 == 0:\n            t_new.append(t[i])\n        else:\n            t_new.insert(0, t[i])\n    \n    return ' '.join(map(str, t_new))\n\ndef",
        "test": "assert solution(\"4\\n1 2 3 4\") == \"4 3 2 1\" ",
        "indeed": false
    },
    {
        "number": 4966,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = map(int, stdin.splitlines()[0].split())\n    t = list(map(int, stdin.splitlines()[1].split()))\n    \n    total_speed = 100 + p + 2*p + 3*p + ... + (n-1)*p\n    original_speed = 100 + (100 - total_speed)\n    \n    total_time = 0\n    for i in range(n):\n        total_time += t[i] * (original_speed + p*i)\n    \n    return str(total_time)",
        "test": "assert solution(\"4 50 120\\n40 60 90 110\") == \"200.000\"",
        "indeed": false
    },
    {
        "number": 4967,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    grid = stdin.split('\\n')[1:]\n    safe_houses = []\n    spies = []\n\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 'H':\n                safe_houses.append((i, j))\n            elif grid[i][j] == 'S':\n                spies.append((i, j))\n\n    max_distance = 0\n    for spy in spies:\n        min_distance = float('inf')\n        for safe_house in safe_houses:\n            distance = abs(spy[0] - safe_house[0]) + abs(spy[1] - safe_house[1])\n            min_distance = min(min_distance, distance)\n        max_distance = max(max_distance, min_distance)\n\n    return str(max_distance)",
        "test": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\") == \"5\"",
        "indeed": true
    },
    {
        "number": 4968,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def read_input(stdin: str) -> tuple:\n        N, S, R = map(int, stdin.split()[:3])\n        damaged_kayaks = set(map(int, stdin.split()[3:3+S]))\n        reserve_kayaks = set(map(int, stdin.split()[3+S:]))\n        return N, S, R, damaged_kayaks, reserve_kayaks\n\n    def find_min_teams_cant_start(N: int, S: int, R: int, damaged_kayaks: set, reserve_kayaks: set) -> int:\n        teams_cant_start = 0\n        team_number = 1\n\n        while team_number <= N:\n            if team_number not in damaged_kayaks and team_number not in reserve_kayaks:\n                if team_number - 1 in reserve_kayaks or team_number + 1 in reserve_kayaks:\n                    team_number += 1\n                else:\n                    teams_cant_start += 1\n            team_number += 1\n\n        return teams_cant_start\n\n    N, S, R, damaged_kayaks, reserve_kayaks = read_input(stdin)\n    return str(find_min_teams_cant_start(N, S, R, damaged_kayaks, reserve_kayaks))",
        "test": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4969,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    area_crust = 3.14 * R ** 2\n    area_pizza = 3.14 * (R ** 2 - (R - C) ** 2)\n    percent_cheese = area_pizza / area_crust * 100\n    return \"{:.6f}\".format(percent_cheese)",
        "test": "assert abs(float(solution(\"10 2\")) - 0.285714285) < 1e-6",
        "indeed": false
    },
    {
        "number": 4970,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(\"\\n\")\n    n = int(stdin_list[0])\n    courses = {}\n\n    for i in range(1, n + 1):\n        course_list = stdin_list[i].split()\n        course_list.sort()\n        course_string = \" \".join(course_list)\n        if course_string in courses:\n            courses[course_string] += 1\n        else:\n            courses[course_string] = 1\n\n    max_count = 0\n    for count in courses.values():\n        max_count = max(max_count, count)\n\n    return str(max_count)",
        "test": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4971,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    \n    def is_bus_number(num):\n        for i in range(1, num + 1):\n            for j in range(1, num + 1):\n                if i**3 + j**3 == num:\n                    return True\n        return False\n\n    bus_numbers = []\n    for i in range(1, m + 1):\n        if is_bus_number(i):\n            bus_numbers.append(i)\n\n    if not bus_numbers:\n        return \"none\"\n    else:\n        return str(bus_numbers[-1])",
        "test": "assert solution(\"400000\") == \"157633\" ",
        "indeed": false
    },
    {
        "number": 4972,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    \n    # Initialize the highest possible value of k\n    k = int(X**0.5)\n    \n    # Initialize the points obtained by the second player\n    points = 0\n    \n    # Iterate through all possible values of k\n    for i in range(1, k+1):\n        # Calculate the product of the i first numbers\n        product = 1\n        for j in range(1, i+1):\n            product *= j\n        \n        # Check if the product is equal to X\n        if product == X:\n            points = i\n            break\n    \n    return str(points) ",
        "test": "assert solution(\"10000\") == \"11\"",
        "indeed": false
    },
    {
        "number": 4973,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to a 2D list\n    board = [list(row) for row in stdin.split()]\n    # Find the position of the knight and the starting position\n    knight_pos = find_knight(board)\n    start_pos = (1, 1)\n\n    # Calculate the minimum steps using BFS\n    visited = set()\n    queue = [(knight_pos, 0)]\n    while queue:\n        current_pos, steps = queue.pop(0)\n        if current_pos in visited:\n            continue\n        visited.add(current_pos)\n        if current_pos == start_pos:\n            return str(steps)\n        for neighbor in get_neighbors(current_pos):\n            if board[neighbor[0] - 1][neighbor[1] - 1] != '#':\n                queue.append((neighbor, steps + 1))\n\n    # If the target position is not reachable\n    return '-1'\n\ndef",
        "test": "assert solution(\"4\\n....\\n#...\\n.#..\\n.K..\") == \"-1\"",
        "indeed": false
    },
    {
        "number": 4974,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.split())\n    booked_rooms = set(map(int, stdin.split()))\n    available_rooms = set(range(1, r+1)) - booked_rooms\n\n    if available_rooms:\n        return str(available_rooms.pop())\n    else:\n        return \"too late\"",
        "test": "assert solution(\"100 10\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\") == \"too late\"",
        "indeed": false
    },
    {
        "number": 4975,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    key_phrase, plaintext = stdin.split('\\n')\n    table = create_table(key_phrase)\n    ciphertext = ''\n    plaintext = plaintext.replace(' ', '').upper()\n    \n    for i in range(0, len(plaintext), 2):\n        first_letter, second_letter = plaintext[i], plaintext[i+1]\n        if first_letter == second_letter:\n            ciphertext += first_letter + 'X'\n        elif first_letter in table[0] and second_letter in table[0]:\n            col1, col2 = table[0].index(first_letter), table[0].index(second_letter)\n            if col1 == col2:\n                ciphertext += table[0][(col1 + 1) % 5] + table[1][(row1 + 1) % 5]\n                ciphertext += table[0][(col2 + 1) % 5] + table[1][(row2 + 1) % 5]\n            else:\n                row1, row2 = table[1].index(first_letter), table[1].index(second_letter)\n                ciphertext += table[0][(col1 - 1) % 5] + table[1][(row1 + 1) % 5]\n                ciphertext += table[0][(col2 - 1) % 5] + table[1][(row2 + 1) % 5]\n        elif first_letter in table[0] and second_letter in table[1]:\n            col1, col2 = table[0].index(first_letter), table[1].index(second_letter)\n            ciphertext += table[0][(col1 - 1) % 5] + table[1][(col2 - 1) % 5]\n        else:\n            col1, col2 = table[1].index(first_letter), table[0].index(second_letter)\n            ciphertext += table[1][(col1 - 1) % 5] + table[0][(col2 - 1) % 5]\n    \n    return ciphertext\n\ndef",
        "test": "assert solution(\"secret code\", \"longer test message\") == \"ZLKXRZTRXUFVKTLTKXNZOV\"",
        "indeed": false
    },
    {
        "number": 4976,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def distance(a, b):\n        return ((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2) ** 0.5\n\n    def time_to_hole(dog, gopher, hole):\n        return distance(hole, dog) / (distance(hole, gopher) + distance(hole, dog))\n\n    def gopher_can_escape(dog, gopher, holes):\n        dog_to_holes = [(distance(hole, dog), hole) for hole in holes]\n        gopher_to_holes = [(distance(hole, gopher), hole) for hole in holes]\n        dog_to_holes.sort()\n        gopher_to_holes.sort()\n\n        if dog_to_holes[0][0] == gopher_to_holes[0][0]:\n            return \"The gopher can escape through the hole at ({:.3f}, {:.3f}).\".format(dog_to_holes[0][1][0], dog_to_holes[0][1][1])\n        else:\n            return \"The gopher cannot escape.\"\n\n    stdin = stdin.split(\"\\n\")\n    dog = tuple(map(float, stdin[0].split()))\n    gopher = tuple(map(float, stdin[1].split()))\n    holes = [tuple(map(float, line.split())) for line in stdin[2:]]\n\n    return gopher_can_escape(dog, gopher, holes)",
        "test": "assert solution(\"\"\"1.000 1.000 2.000 2.000",
        "indeed": false
    },
    {
        "number": 4977,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_coord(x: int, y: int) -> bool:\n        return -1000 <= x <= 1000 and -1000 <= y <= 1000\n\n    def distance(x1: int, y1: int, x2: int, y2: int) -> int:\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    def min_moves_to_dest(x1: int, y1: int, x2: int, y2: int, t: int) -> int:\n        if t == 0:\n            return 0 if distance(x1, y1, x2, y2) == 0 else -1\n\n        if not is_valid_coord(x1, y1) or not is_valid_coord(x2, y2):\n            return -1\n\n        dx, dy = abs(x1 - x2), abs(y1 - y2)\n        if dx == 0 and dy == 0:\n            return 0\n\n        if dx >= dy:\n            if x1 < x2:\n                return min_moves_to_dest(x1 + 1, y1, x2, y2, t - 1)\n            else:\n                return min_moves_to_dest(x1 - 1, y1, x2, y2, t - 1)\n        else:\n            if y1 < y2:\n                return min_moves_to_dest(x1, y1 + 1, x2, y2, t - 1)\n            else:\n                return min_moves_to_dest(x1, y1 - 1, x2, y2, t - 1)\n\n    stdin_list = list(map(int, stdin.split()))\n    start_x, start_y, dest_x, dest_y, t = stdin_list\n    return \"Y\" if min_moves_to_dest(start_x, start_y, dest_x, dest_y, t) != -1 else \"N\"",
        "test": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"",
        "indeed": false
    },
    {
        "number": 4978,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    n, m = map(int, input_lines[0].split())\n    grid = [list(input_lines[i]) for i in range(1, n+1)]\n    directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]\n    \n    def is_valid(x: int, y: int) -> bool:\n        return 0 <= x < n and 0 <= y < m\n\n    def flood_fill(x: int, y: int) -> None:\n        grid[x][y] = \"V\"\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny) and grid[nx][ny] == \".\":\n                flood_fill(nx, ny)\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"V\":\n                flood_fill(i, j)\n\n    return \"\\n\".join(\"\".join(row) for row in grid)",
        "test": "assert solution(\"4 5\\nVV..#.\\n.#.V..\\nV...#.\\n.#.V.V\") == \"4 5\\nVV..#.\\nV.V.V.\\nVVV.V.\\nV.V.V.\" ",
        "indeed": false
    },
    {
        "number": 4979,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    binary = bin(n)[2:]\n    reversed_binary = binary[::-1]\n    reversed_number = int(reversed_binary, 2)\n    return str(reversed_number)",
        "test": "assert solution(\"13\") == \"11\"",
        "indeed": true
    },
    {
        "number": 4980,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    stdin_list = stdin.split('\\n')\n    N = int(stdin_list[0])\n    button_colors = stdin_list[1:]\n\n    pink_buttons = []\n    for button_color in button_colors:\n        if re.search('pink|rose', button_color, re.IGNORECASE):\n            pink_buttons.append(button_color)\n\n    if len(pink_buttons) == 0:\n        return \"I must watch Star Wars with my daughter\"\n    else:\n        return str(len(pink_buttons))",
        "test": "assert solution(\"12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"",
        "indeed": true
    },
    {
        "number": 4981,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    order = input().strip()\n    sorted_values = [A, B, C]\n    sorted_values.sort()\n    new_order = []\n    for char in order:\n        if char == 'A':\n            new_order.append(sorted_values[0])\n        elif char == 'B':\n            new_order.append(sorted_values[1])\n        else:\n            new_order.append(sorted_values[2])\n    return \" \".join(str(x) for x in new_order) ",
        "test": "assert solution(\"5 1 3\\nABC\") == \"1 3 5\"",
        "indeed": false
    },
    {
        "number": 4982,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    events = stdin.strip().split('\\n')\n    total_shares = 0\n    total_cost = 0\n    total_profit = 0\n    merge_factor = 1\n    \n    for event in events:\n        parts = event.split()\n        if parts[0] == \"buy\":\n            shares, cost = map(int, parts[1:])\n            total_shares += shares\n            total_cost += shares * cost\n        elif parts[0] == \"sell\":\n            shares, cost = map(int, parts[1:])\n            total_profit += (cost - total_cost / total_shares) * shares\n        elif parts[0] == \"split\":\n            merge_factor *= int(parts[1])\n        elif parts[0] == \"merge\":\n            merge_factor //= int(parts[1])\n        elif parts[0] == \"die\":\n            profit = total_profit + (int(parts[1]) - total_cost / total_shares) * total_shares\n            tax = profit * 0.3\n            total_profit = profit - tax\n            total_profit = round(total_profit, 6)\n            break\n    \n    return f\"{total_profit:.6f}\"",
        "test": "assert solution(\"buy 10 5\\nsell 1 10\\nsplit 2\\nsell 9 4\\nmerge 4\\ndie 5\") == \"73.80000000\\n\"",
        "indeed": false
    },
    {
        "number": 4983,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    \n    while x > 9:\n        product = 1\n        for digit in str(x):\n            if digit != '0':\n                product *= int(digit)\n        x = product\n    \n    return str(x)",
        "test": "assert solution(\"2\") == \"2\"",
        "indeed": true
    },
    {
        "number": 4984,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.splitlines()[0].split())\n    grid = stdin.splitlines()[1:]\n    \n    def is_island(x: int, y: int) -> bool:\n        if x < 0 or x >= r or y < 0 or y >= c:\n            return False\n        return grid[x][y] == 'L'\n    \n    def count_islands(x: int, y: int) -> int:\n        if not is_island(x, y):\n            return 0\n        grid[x][y] = 'W'\n        result = 1\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            result += count_islands(x + dx, y + dy)\n        return result\n    \n    islands = 0\n    for x in range(r):\n        for y in range(c):\n            if grid[x][y] == 'L':\n                islands += count_islands(x, y)\n    return islands",
        "test": "assert solution(\"\"\"",
        "indeed": false
    },
    {
        "number": 4985,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def get_card_value(number, suit, dominant_suit):\n        if suit == dominant_suit:\n            if number == 'A':\n                return 11\n            elif number == 'K':\n                return 4\n            elif number == 'Q':\n                return 3\n            elif number == 'J':\n                return 20\n            elif number == 'T':\n                return 10\n        else:\n            if number == '9':\n                return 14\n            elif number == '8':\n                return 0\n            elif number == '7':\n                return 0\n        return 0\n\n    hands = int(stdin.split()[0])\n    dominant_suit = stdin.split()[1]\n    points = 0\n\n    for i in range(hands):\n        for j in range(4):\n            card = stdin.split()[4 * i + j]\n            number = card[0]\n            suit = card[1]\n            points += get_card_value(number, suit, dominant_suit)\n\n    return str(points)",
        "test": "assert solution(\"1 C\\nKH\\nKD\\nQD\\nJD\") == \"30\"",
        "indeed": false
    },
    {
        "number": 4986,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    result = ''\n    for i in range(len(s)):\n        if s[i] != t[i] and t[i] == s[i] * 2:\n            result += s[i]\n    return result",
        "test": "assert solution(\"hello world\") == \"llo\"",
        "indeed": false
    },
    {
        "number": 4987,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    socks_count, machine_capacity, max_color_diff = map(int, stdin.split()[:3])\n    socks_colors = list(map(int, stdin.split()[3:]))\n    \n    machines_count = 0\n    current_machine_capacity = 0\n    \n    for sock_color in socks_colors:\n        if current_machine_capacity == machine_capacity:\n            machines_count += 1\n            current_machine_capacity = 0\n        \n        if socks_colors.count(sock_color) > 1:\n            continue\n        \n        current_machine_capacity += 1\n        socks_colors = [c for c in socks_colors if abs(c - sock_color) <= max_color_diff]\n    \n    machines_count += current_machine_capacity // machine_capacity\n    \n    return str(machines_count)",
        "test": "assert solution(\"7 5 2\\n0 1 2 3 4 5 6\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4988,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def factorial(n: int) -> int:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n\n    stdin = [int(x) for x in stdin.split(\"\\n\")][1:]\n    result = \"\"\n    for n in stdin:\n        last_digit = factorial(n) % 10\n        result += str(last_digit) + \"\\n\"\n    return result\n",
        "test": "assert solution(\"1\\n100\") == \"0\"",
        "indeed": false
    },
    {
        "number": 4989,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    pieces = list(map(int, lines[1].split()))\n\n    alice_pieces = []\n    bob_pieces = []\n\n    alice_turn = True\n    for i in range(n):\n        if alice_turn:\n            alice_pieces.append(pieces[i])\n        else:\n            bob_pieces.append(pieces[i])\n        alice_turn = not alice_turn\n\n    return f\"{sum(alice_pieces)} {sum(bob_pieces)}\" ",
        "test": "assert solution(\"4\\n3 1 2 1\") == \"5 2\"",
        "indeed": false
    },
    {
        "number": 4990,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    b, k, g = map(int, stdin.split())\n    \n    # Calculate the maximum number of days it will take for the troll to be found\n    days = b // g\n    \n    # Calculate the maximum number of knights that can be sent per day\n    max_knights = k // g\n    \n    # Calculate the number of days it will take to find the troll\n    troll_days = min(days, max_knights)\n    \n    return str(troll_days)",
        "test": "assert solution(\"5 2 1\") == \"2\"",
        "indeed": false
    },
    {
        "number": 4991,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    def h(n: int) -> int:\n        if n == 1:\n            return 1\n        elif n % 2 == 0:\n            return n + h(n // 2)\n        else:\n            return n + h(3 * n + 1)\n\n    def sum_h(n: int) -> int:\n        sequence = []\n        while n != 1:\n            sequence.append(n)\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n        sequence.append(1)\n        return sum(sequence)\n\n    return str(sum_h(n))",
        "test": "assert solution(\"5\") == \"36\"",
        "indeed": true
    },
    {
        "number": 4992,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, students = stdin.split()\n    n = int(n)\n    students = list(map(int, students.split()))\n\n    pile = []\n    for i in range(n):\n        if len(pile) < students[i]:\n            return \"impossible\"\n        pile.append(i+1)\n\n    visited = [False] * n\n    order = []\n    for _ in range(n):\n        room = pile.pop()\n        order.append(room)\n        visited[room-1] = True\n        pile += [room]\n\n    for i in range(n):\n        if not visited[i]:\n            order.append(i+1)\n\n    return \" \".join(map(str, order))",
        "test": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\" ",
        "indeed": false
    },
    {
        "number": 4993,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    parts, days, *parts_list = stdin.split()\n    parts = int(parts)\n    days = int(days)\n    parts_dict = {}\n    for i in range(days):\n        part = parts_list[i]\n        if part not in parts_dict:\n            parts_dict[part] = i\n        else:\n            return str(parts_dict[part])\n    return \"paradox avoided\" ",
        "test": "assert solution(\"1 1\\n_\") == \"paradox avoided\"",
        "indeed": false
    },
    {
        "number": 4994,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    points = stdin.split('\\n')\n    x1, y1 = points[0].split()\n    x2, y2 = points[1].split()\n    x3, y3 = points[2].split()\n\n    # Calculate slope of first two points\n    slope_12 = (int(y2) - int(y1)) / (int(x2) - int(x1))\n\n    # Calculate slope of second two points\n    slope_23 = (int(y3) - int(y2)) / (int(x3) - int(x2))\n\n    # Calculate x-coordinate of intersection point\n    x = (int(y1) * slope_23 - int(y2) * slope_12) / (slope_12 - slope_23)\n\n    # Calculate y-coordinate of intersection point\n    y = slope_12 * x + int(y1) - slope_12 * int(x1)\n\n    # Round to nearest integer\n    x = round(x)\n    y = round(y)\n\n    return f\"{x} {y}\" ",
        "test": "assert solution(\"1 1\\n1 2\\n2 1\") == \"2 2\"",
        "indeed": false
    },
    {
        "number": 4995,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    import math\n\n    def mean(numbers):\n        return sum(numbers) / len(numbers)\n\n    def standard_deviation(numbers):\n        mean_value = mean(numbers)\n        variance = sum([(x - mean_value) ** 2 for x in numbers]) / len(numbers)\n        return math.sqrt(variance)\n\n    def is_measurement_error(numbers):\n        return mean(numbers) <= 60\n\n    lines = stdin.split(\"\\n\")\n    observations = []\n    for line in lines[1:]:\n        match = re.match(r\"(\\d+) (\\d+)\", line)\n        if not match:\n            continue\n        minutes, seconds = map(int, match.groups())\n        observations.append(seconds / 60)\n\n    if is_measurement_error(observations):\n        return \"measurement error\"\n    else:\n        return f\"{mean(observations):.7f}\"\n",
        "test": "assert solution(\"1\\n1 61\") == \"1.016666667\" ",
        "indeed": false
    },
    {
        "number": 4996,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    message, key = stdin.splitlines()\n    decrypted_message = \"\"\n\n    for i in range(len(message)):\n        if i % 2 == 0:\n            decrypted_message += chr((ord(message[i]) - ord('A') - (ord(key[i % len(key)]) - ord('A'))) % 26 + ord('A'))\n        else:\n            decrypted_message += chr((ord(message[i]) - ord('A') + (ord(key[i % len(key)]) - ord('A'))) % 26 + ord('A'))\n\n    return decrypted_message",
        "test": "assert solution(\"CPMCRYY\\nALBERTA\") == \"CALGARY\"",
        "indeed": true
    },
    {
        "number": 4997,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # create the three cups and the ball\n    cups = [1, 2, 3]\n    ball = 1\n    \n    # iterate over each move in the input string\n    for move in stdin:\n        # check if the move is valid\n        if move not in ['A', 'B', 'C']:\n            raise ValueError(\"Invalid move.\")\n        \n        # perform the move\n        if move == 'A':\n            cups[0], cups[1] = cups[1], cups[0]\n        elif move == 'B':\n            cups[1], cups[2] = cups[2], cups[1]\n        else:\n            cups[0], cups[2] = cups[2], cups[0]\n    \n    # find the index of the ball\n    for i, cup in enumerate(cups, start=1):\n        if cup == ball:\n            return str(i)\n    \n    # should never reach here\n    raise ValueError(\"Invalid move sequence.\") ",
        "test": "assert solution(\"ABC\") == \"1\"",
        "indeed": true
    },
    {
        "number": 4998,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    numbers.sort(reverse=True)\n    return str(numbers[0] * numbers[1])",
        "test": "assert solution(\"3 2 1 4\") == \"12\"",
        "indeed": false
    },
    {
        "number": 4999,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    count = 0\n    \n    while a != b:\n        if a % 2 == 0:\n            a //= 2\n        else:\n            a += 1\n        count += 1\n        \n    return str(count)",
        "test": "assert solution(\"1 2\") == \"1\"",
        "indeed": false
    }
]