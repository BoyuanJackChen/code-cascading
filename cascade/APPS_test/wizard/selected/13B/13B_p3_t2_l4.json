[
    {
        "number": 4000,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_edges(tree):\n        def find_paths(tree, start, end, visited, path, paths):\n            if start == end:\n                paths.append(path)\n                return\n            for next_node in tree[start]:\n                if next_node not in visited:\n                    visited.add(next_node)\n                    find_paths(tree, next_node, end, visited, path + [next_node], paths)\n                    visited.remove(next_node)\n\n        n = len(tree)\n        paths_a_to_b = []\n        paths_b_to_c = []\n        paths_a_to_c = []\n\n        find_paths(tree, 0, 1, {0}, [0], paths_a_to_b)\n        find_paths(tree, 1, 2, {1}, [1], paths_a_to_b)\n        find_paths(tree, 2, 3, {2}, [2], paths_a_to_b)\n        find_paths(tree, 3, 4, {3}, [3], paths_a_to_b)\n        find_paths(tree, 4, 5, {4}, [4], paths_a_to_b)\n\n        find_paths(tree, 1, 2, {1}, [1], paths_b_to_c)\n        find_paths(tree, 2, 3, {2}, [2], paths_b_to_c)\n        find_paths(tree, 3, 4, {3}, [3], paths_b_to_c)\n        find_paths(tree, 4, 5, {4}, [4], paths_b_to_c)\n        find_paths(tree, 4, 6, {4}, [4], paths_b_to_c)\n\n        find_paths(tree, 0, 1, {0}, [0], paths_a_to_c)\n        find_paths(tree, 0, 2, {0}, [0], paths_a_to_c)\n        find_paths(tree, 0, 3, {0}, [0], paths_a_to_c)\n        find_paths(tree, 0, 4, {0}, [0], paths_a_to_c)\n        find_paths(tree, 0, 5, {0}, [0], paths_a_to_c)\n\n        max_edges = 0\n        for path in paths_a_to_b:\n            max_edges = max(max_edges, len(path) - 1)\n        for path in paths_b_to_c:\n            max_edges = max(max_edges, len(path) - 1)\n        for path in paths_a_to_c:\n            max_edges = max(max_edges, len(path) - 1)\n\n        return max_edges\n\n    n = int(stdin.readline())\n    tree = [set() for _ in range(n)]\n\n    for _ in range(n - 1):\n        x, y = map(int, stdin.readline().split())\n        tree[x - 1].add(y - 1)\n        tree[y - 1].add(x - 1)\n\n    max_edges = find_max_edges(tree)\n    a, b, c = 0, 1, 2\n    print(max_edges)\n    print(a + 1, b + 1, c + 1)",
        "test": "assert solution(\"\"\"8"
    },
    {
        "number": 4001,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    divisors = list(map(int, stdin.splitlines()[1].split()))\n\n    def restore_numbers(divisors):\n        divisors = sorted(divisors)\n        x_divisors = []\n        y_divisors = []\n        for i in range(len(divisors)):\n            if i % 2 == 0:\n                x_divisors.append(divisors[i])\n            else:\n                y_divisors.append(divisors[i])\n        x = 1\n        y = 1\n        for divisor in x_divisors:\n            x *= divisor\n        for divisor in y_divisors:\n            y *= divisor\n        return x, y\n\n    x, y = restore_numbers(divisors)\n    return f\"{x} {y}\"",
        "test": "assert solution(\"3\\n1 2 3 3 2 1\") == \"12 2\\n\""
    },
    {
        "number": 4002,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    a = [list(map(int, stdin.split()[3:3+m])) for _ in range(n)]\n    max_sum = 0\n\n    for i in range(n):\n        row_sum = 0\n        row = sorted(a[i], reverse=True)\n        for j in range(len(row) // 2):\n            row_sum += row[j]\n        row_sum += row[len(row) // 2] if len(row) % 2 == 1 else 0\n        max_sum = max(max_sum, row_sum)\n\n    return str(max_sum % k)\n",
        "test": "assert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\" "
    },
    {
        "number": 4003,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n = int(n)\n    a = list(map(int, a.split()))\n\n    max_length = 0\n    for i in range(n):\n        if a[i] > a[i - 1]:\n            length = 1\n            for j in range(i + 1, n):\n                if a[j] > a[j - 1]:\n                    length += 1\n                else:\n                    break\n            max_length = max(max_length, length)\n\n    s = \"\"\n    if max_length == 0:\n        return \"1\\nR\"\n\n    for i in range(max_length):\n        if a[i] > a[i - 1]:\n            s += \"L\"\n        else:\n            s += \"R\"\n\n    return f\"{max_length}\\n{s}\"\n\ndef",
        "test": "assert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\""
    },
    {
        "number": 4004,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    a_min = min(a)\n    a_max = max(a)\n    D = a_min\n    \n    if a_max - a_min <= D:\n        return str(D)\n    else:\n        return \"-1\"",
        "test": "assert solution(\"5\\n2 2 5 2 5\") == \"3\""
    },
    {
        "number": 4005,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_visible(white: Tuple[int, int, int, int], black1: Tuple[int, int, int, int], black2: Tuple[int, int, int, int]) -> bool:\n        x1, y1, x2, y2 = white\n        x3, y3, x4, y4 = black1\n        x5, y5, x6, y6 = black2\n        \n        # Check if any part of the white sheet is visible\n        if x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4:\n            return True\n        if x1 < x5 and x2 > x6 and y1 < y5 and y2 > y6:\n            return True\n        \n        # Check if any corner of the white sheet is inside the black sheets\n        if (x1 <= x3 <= x2 or x1 <= x4 <= x2) and (y1 <= y3 <= y2 or y1 <= y4 <= y2):\n            return True\n        if (x1 <= x5 <= x2 or x1 <= x6 <= x2) and (y1 <= y5 <= y2 or y1 <= y6 <= y2):\n            return True\n        \n        # Check if any point of the white sheet is inside the black sheets\n        if (x1 <= x3 <= x2 and y1 <= y3 <= y2) or (x1 <= x4 <= x2 and y1 <= y4 <= y2):\n            return True\n        if (x1 <= x5 <= x2 and y1 <= y5 <= y2) or (x1 <= x6 <= x2 and y1 <= y6 <= y2):\n            return True\n        \n        return False\n\n    input_values = [int(x) for x in stdin.split()]\n    white = (input_values[0], input_values[1], input_values[2], input_values[3])\n    black1 = (input_values[4], input_values[5], input_values[6], input_values[7])\n    black2 = (input_values[8], input_values[9], input_values[10], input_values[11])\n    \n    return \"YES\" if is_visible(white, black1, black2) else \"NO\"\n",
        "test": "assert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == \"YES\""
    },
    {
        "number": 4006,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def f(x):\n        while x % 10 == 0:\n            x //= 10\n        return x + 1\n    \n    def count_reachable(n):\n        visited = set()\n        q = [(n, 0)]\n        while q:\n            x, depth = q.pop(0)\n            if x in visited:\n                continue\n            visited.add(x)\n            q.append((f(x), depth+1))\n        return len(visited)\n    \n    return str(count_reachable(n))",
        "test": "assert solution(\"10\") == \"19\" "
    },
    {
        "number": 4007,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    f_i = list(map(int, stdin.splitlines()[1].split()))\n\n    # Create a graph where each node represents a friend and there is an edge between two nodes if the i-th friend wants to give the gift to the j-th friend\n    graph = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        if f_i[i] != 0:\n            graph[i][f_i[i] - 1] = 1\n\n    # Find a path that visits each node exactly once\n    visited = [False] * n\n    path = [-1] * n\n\n    def dfs(node: int) -> bool:\n        if visited[node]:\n            return False\n        visited[node] = True\n\n        for i in range(n):\n            if graph[node][i] == 1:\n                if dfs(i):\n                    path[i] = node\n                    return True\n\n        return False\n\n    start_node = 0\n    while not dfs(start_node):\n        start_node += 1\n\n    # Reverse the path to get the answer\n    for i in range(n - 1, -1, -1):\n        if path[i] != -1:\n            f_i[i] = n + path[i]\n\n    return \" \".join(map(str, f_i)) ",
        "test": "assert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\\n\""
    },
    {
        "number": 4008,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    if k < len(a):\n        return \"NO\"\n    \n    colors = [0] * k\n    for i in range(len(a)):\n        for j in range(k):\n            if colors[j] == a[i]:\n                break\n            if j == k-1:\n                colors[j+1] = a[i]\n                break\n                \n    if sum(colors) == 0:\n        return \"NO\"\n    else:\n        return \"YES\" + \"\\n\" + \" \".join(str(x) for x in colors) ",
        "test": "assert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\""
    },
    {
        "number": 4009,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    digits = list(stdin.split()[1])\n    current_remainder = int(\"\".join(digits), 2) % (10**x)\n    target_remainder = 10**y\n    min_operations = 0\n    \n    while current_remainder != target_remainder:\n        if current_remainder > target_remainder:\n            current_remainder -= (10**x)\n        else:\n            current_remainder += (10**x) - target_remainder\n        min_operations += 1\n    \n    return str(min_operations)",
        "test": "assert solution(\"11 5 1\\n11010100101\") == \"3\" "
    },
    {
        "number": 4010,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read the number of test cases\n    test_cases = int(stdin.readline())\n\n    # Read and process each test case\n    for i in range(test_cases):\n        # Read the length of the array\n        n = int(stdin.readline())\n        # Read the array\n        a = list(map(int, stdin.readline().split()))\n\n        # Check if there is a palindrome subsequence of length at least 3\n        has_palindrome = False\n        for j in range(n - 2):\n            for k in range(j + 2, n):\n                if a[j] == a[k]:\n                    has_palindrome = True\n                    break\n            if has_palindrome:\n                break\n\n        # Print the result\n        print(\"YES\" if has_palindrome else \"NO\")",
        "test": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\\nYES\\nNO\\nYES\\nNO\\n\""
    },
    {
        "number": 4011,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a, f = stdin.split('\\n')\n    n = int(n)\n    a = list(map(int, a))\n    f = list(map(int, f.split()))\n\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if j - i + 1 == len(a) // 2:\n                temp = a.copy()\n                for k in range(i, j + 1):\n                    temp[k] = f[temp[k]]\n                return ''.join(map(str, temp))\n\ndef",
        "test": "assert solution('5\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'"
    },
    {
        "number": 4012,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible(a, b, c):\n        return b % a == 0 and c % b == 0\n\n    def find_triple(a, b, c):\n        res = 0\n        if not (1 <= a <= b <= c <= 10**4):\n            return res, 0, 0, 0\n\n        if b == c and is_divisible(a, b, c):\n            return res, a, b, c\n\n        while not is_divisible(a, b, c):\n            res += 1\n            if b < a:\n                b += 1\n            elif c < b:\n                c += 1\n            else:\n                a += 1\n\n        return res, a, b, c\n\n    t = int(stdin.readline())\n    for i in range(t):\n        a, b, c = map(int, stdin.readline().split())\n        res, A, B, C = find_triple(a, b, c)\n        print(res)\n        print(A, B, C)",
        "test": "assert solution(\"8\\n1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"4\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\""
    },
    {
        "number": 4013,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    min_instability = float(\"inf\")\n    for i in range(n):\n        new_a = a[:i] + a[i+1:]\n        instability = max(new_a) - min(new_a)\n        min_instability = min(min_instability, instability)\n    \n    return str(min_instability)",
        "test": "assert solution(\"4\\n1 3 3 7\") == \"2\""
    },
    {
        "number": 4014,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    exams = []\n    for line in stdin.split('\\n')[1:]:\n        s, d, c = map(int, line.split())\n        exams.append((s, d, c))\n\n    if len(exams) != m:\n        return \"-1\"\n\n    # Sort exams by the day they start\n    exams.sort(key=lambda x: x[0])\n\n    # Initialize schedule with all rest days\n    schedule = [0] * n\n\n    # Calculate the number of days needed to prepare for each exam\n    for s, d, c in exams:\n        for day in range(s, d - 1):\n            schedule[day] = -1\n        schedule[d - 1] = c\n\n    # Check if all exams can be passed\n    for exam_day in [exam[1] - 1 for exam in exams]:\n        if schedule[exam_day] == -1:\n            return \"-1\"\n\n    # Calculate the schedule\n    for day in range(n):\n        if schedule[day] == 0:\n            continue\n        for i, exam in enumerate(exams, start=1):\n            if exam[0] <= day < exam[1] - 1 and schedule[day] == -1:\n                schedule[day] = i\n                break\n\n    return ' '.join(str(day) for day in schedule)\n",
        "test": "assert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\""
    },
    {
        "number": 4015,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    if n > m:\n        return \"-1\"\n\n    count = 0\n    while n != m:\n        if n < m:\n            if m % 3 == 0:\n                n *= 3\n                count += 1\n            else:\n                n *= 2\n                count += 1\n        else:\n            if n % 2 == 0:\n                n //= 2\n                count += 1\n            else:\n                return \"-1\"\n\n    return str(count)\n",
        "test": "assert solution(\"42 42\") == \"0\""
    },
    {
        "number": 4016,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = input().strip()\n    \n    s = t * (k // n)\n    if k % n != 0:\n        s += t[:k % n]\n    \n    return s",
        "test": "assert solution(\"3 2\\ncat\") == \"catcat\" "
    },
    {
        "number": 4017,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    nice_indices = []\n    for i in range(n):\n        new_a = a[:i] + a[i+1:]\n        if sum(new_a) == sum(set(new_a)):\n            nice_indices.append(i+1)\n\n    result = str(len(nice_indices)) + '\\n'\n    result += ' '.join(map(str, nice_indices))\n    return result\n\n\nwith open('input.txt', 'r') as stdin, open('output.txt', 'w') as stdout:\n    stdout.write(solution(stdin))\n",
        "test": "assert solution(\"4\\n8 3 5 2\\n\") == \"2\\n1 4\""
    },
    {
        "number": 4018,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = input().strip()\n    if len(set(s)) < k:\n        return -1\n    else:\n        return n",
        "test": "assert solution(\"5 6\\naaaaa\") == \"15\""
    },
    {
        "number": 4019,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split()[:3])\n    adj_list = [[] for _ in range(n)]\n    edges = set()\n\n    for _ in range(m):\n        v, u = map(int, stdin.split()[3:])\n        adj_list[v - 1].append(u - 1)\n        adj_list[u - 1].append(v - 1)\n        edges.add(tuple(sorted([v, u])))\n\n    def dfs(start: int, visited: set, parent: int) -> bool:\n        visited.add(start)\n        if start == 0 and len(visited) > 1 and adj_list[0][0] in visited:\n            return False\n\n        for neighbor in adj_list[start]:\n            if neighbor not in visited:\n                if not dfs(neighbor, visited.copy(), start):\n                    return False\n        return True\n\n    spanning_tree = []\n    for edge in edges:\n        if D == 1:\n            break\n        visited = set()\n        if dfs(edge[0], visited, -1):\n            spanning_tree.append(edge)\n            D -= 1\n\n    if D == 1:\n        if len(spanning_tree) == n - 1:\n            return \"YES\\n\" + '\\n'.join([f\"{v + 1} {u + 1}\" for (v, u) in spanning_tree])\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\n\ndef",
        "test": "assert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n\""
    },
    {
        "number": 4020,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1 = [int(x) for x in stdin.split()[0].split(':')]\n    h_2, m_2 = [int(x) for x in stdin.split()[1].split(':')]\n\n    total_minutes = (h_2 - h_1) * 60 + (m_2 - m_1)\n    midpoint = total_minutes // 2\n\n    h_3 = h_1 + midpoint // 60\n    m_3 = (midpoint % 60)\n\n    return f\"{h_3:02d}:{m_3:02d}\"",
        "test": "assert solution(\"10:00\\n11:00\") == \"10:30\""
    },
    {
        "number": 4021,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(int(a**0.5))",
        "test": "assert solution(\"2\") == \"1\""
    },
    {
        "number": 4022,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    segments = []\n    for i in range(1, n + 1):\n        l, r = map(int, lines[i].split())\n        segments.append((l, r))\n\n    max_length = 0\n    for i in range(n):\n        remaining_segments = segments[:i] + segments[i+1:]\n        current_length = max_length_of_intersection(remaining_segments)\n        max_length = max(max_length, current_length)\n\n    return str(max_length)\n\ndef",
        "test": "assert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\""
    },
    {
        "number": 4023,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    if len(a) != n:\n        return \"NO\"\n\n    for i in range(len(a) - 1):\n        if a[i] == a[i + 1]:\n            a[i] += 1\n            a[i + 1] += 1\n\n    if a.count(a[0]) == len(a) and all(1 <= a[i] <= n for i in range(len(a))):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"3\\n4 5 3\") == \"NO\""
    },
    {
        "number": 4024,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[2]\n    subseq = []\n    total_cost = 0\n\n    for i in range(1, len(s) + 1):\n        for j in range(len(s) - i + 1):\n            sub = s[j:j + i]\n            if sub not in subseq:\n                subseq.append(sub)\n                total_cost += n - i\n\n    if len(subseq) < k:\n        return \"-1\"\n    else:\n        return str(total_cost)\n\n\ndef",
        "test": "assert solution('5 6\\naaaaa') == '15'"
    },
    {
        "number": 4025,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    max_days = max(a, b, c)\n    \n    if a >= b and a >= c:\n        return max_days\n    elif b >= a and b >= c:\n        return max_days * 2\n    else:\n        return max_days * 3\n    \n    \n",
        "test": "assert solution(\"1 100 1\") == \"3\""
    },
    {
        "number": 4026,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.strip().split('\\n')\n    t = int(cases.pop(0))\n    for i in range(t):\n        n, m = map(int, cases.pop(0).split())\n        tiles = []\n        for j in range(2 * n):\n            tile = tuple(map(int, cases.pop(0).split()))\n            tiles.append(tile)\n        # Your solution goes here\n        # You can use a 2D list to represent the square and check for conditions\n        # If the conditions are met, return \"YES\" else \"NO\"\n        return \"YES\" if can_construct(n, m, tiles) else \"NO\"\n\ndef",
        "test": "assert solution(\"6\\n3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n\") == \"YES\\nNO\\nYES\\nNO\\nYES\\n\" "
    },
    {
        "number": 4027,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 2 or n == 3:\n        return \"0\"\n    elif n % 2 == 0:\n        return str(n // 2)\n    else:\n        return str(n // 2 + 1)",
        "test": "assert solution(\"3\") == \"0\""
    },
    {
        "number": 4028,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    s = list(s)\n    \n    def count_brackets(brackets, length):\n        if length == 0:\n            return 1\n        if brackets[0] == '(':\n            return count_brackets(brackets[1:], length - 1)\n        else:\n            return count_brackets(brackets[1:], length + 1)\n    \n    def generate_brackets(length):\n        if length == 0:\n            return [[]]\n        if length == 1:\n            return [['('], [')']]\n        result = []\n        for left in generate_brackets(length - 1):\n            for right in generate_brackets(1):\n                result.append(['('] + left + ['+', '1', '+'] + right + [')'])\n        return result\n    \n    def count_substring(brackets, substring):\n        count = 0\n        for i in range(len(brackets)):\n            if brackets[i:i + len(substring)] == substring:\n                count += 1\n        return count\n    \n    def count_regular_brackets(length, substring):\n        all_brackets = generate_brackets(length)\n        return sum([count_substring(bracket, substring) for bracket in all_brackets])\n    \n    regular_brackets_count = count_regular_brackets(2 * n, s)\n    result = regular_brackets_count % (10**9 + 7)\n    \n    return str(result)\n\ninput_file = open('input.txt', 'r')\noutput_file = open('output.txt', 'w')\n\ninput_data = input_file.read()\noutput_file.write(solution(input_data))\n\ninput_file.close()\noutput_file.close() ",
        "test": "assert solution(\"3\\n(()\") == \"4\""
    },
    {
        "number": 4029,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return \"0\"\n    else:\n        min_moves = float(\"inf\")\n        for i in range(len(str(n)) - 1):\n            if n % 10 == 0:\n                return -1\n            n -= n % 10\n            n //= 10\n            if n % 25 == 0:\n                return 0\n            n *= 10\n            min_moves = min(min_moves, n)\n        return min_moves",
        "test": "assert solution(\"705\") == \"1\""
    },
    {
        "number": 4030,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    \n    # Find the minimum number of colors needed to sort the string\n    sorted_string = sorted(s)\n    res = 1\n    while s != sorted_string:\n        res += 1\n        temp = sorted_string\n        for i in range(1, n):\n            if s[i] != sorted_string[i-1] and s[i] != sorted_string[i]:\n                sorted_string[i-1], sorted_string[i] = sorted_string[i], sorted_string[i-1]\n        if s == sorted_string:\n            break\n    \n    # Color the string with the minimum number of colors\n    coloring = []\n    for i in range(n):\n        if s[i] == sorted_string[i]:\n            coloring.append(1)\n        else:\n            coloring.append(res)\n    \n    return str(res) + \"\\n\" + \" \".join(map(str, coloring))",
        "test": "assert solution(\"8\\naaabbcbb\\n\") == \"2\\n1 2 1 2 1 2 1 1\\n\""
    },
    {
        "number": 4031,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.split('\\n')[0])\n    strings = stdin.split('\\n')[1:]\n\n    # check if any string is a substring of another string\n    for i in range(n):\n        for j in range(n):\n            if i != j and strings[i] not in strings[j]:\n                return \"NO\"\n\n    # sort strings based on the condition\n    sorted_strings = sorted(strings, key=lambda x: sum(1 for _ in re.finditer(x, ''.join(strings))))\n\n    return \"YES\\n\" + '\\n'.join(sorted_strings)",
        "test": "assert solution(\"5\\naba\\nabacaba\\nba\\naba\\nabab\\n\") == \"NO\""
    },
    {
        "number": 4032,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    problems = list(map(int, stdin.split()[2:]))\n    \n    left, right = 0, n - 1\n    count = 0\n    \n    while left <= right:\n        if problems[left] <= k and problems[right] <= k:\n            count += 2\n            left += 1\n            right -= 1\n        elif problems[left] <= k and problems[right] > k:\n            count += 1\n            left += 1\n        elif problems[left] > k and problems[right] <= k:\n            count += 1\n            right -= 1\n        else:\n            break\n            \n    return str(count)",
        "test": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\""
    },
    {
        "number": 4033,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    min_perimeter = float('inf')\n\n    for x in range(a + b + 1):\n        y = a + b - x\n        if x * y == a * b:\n            perimeter = 2 * (x + y)\n            min_perimeter = min(min_perimeter, perimeter)\n\n    return str(min_perimeter)",
        "test": "assert solution(\"3 9\") == \"14\""
    },
    {
        "number": 4034,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    if len(set(s)) == n:\n        return \"YES\\n\" + \"0\" * n\n\n    s = list(s)\n    for i in range(n):\n        if i < n - 1 and s[i] > s[i + 1]:\n            return \"YES\\n\" + \"0\" * n\n        if i > 0 and s[i] < s[i - 1]:\n            return \"YES\\n\" + \"0\" * n\n\n    return \"NO\"",
        "test": "assert solution(\"8\\naaabbcbb\\n\") == \"YES\\n01011011\\n\""
    },
    {
        "number": 4035,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if A > B:\n        return \"-1\"\n    \n    result = []\n    for i in range(A, B+1):\n        if (i * 0.08).is_integer() and (i * 0.1).is_integer():\n            result.append(i)\n    \n    if result:\n        return str(min(result))\n    else:\n        return \"-1\"",
        "test": "assert solution(\"3 4\") == \"-1\""
    },
    {
        "number": 4036,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 0 or k == 0:\n        return \"NO\"\n\n    if n == 1:\n        return \"YES\\n1\"\n\n    for x in range(1, n + 1):\n        a = [x]\n        for i in range(1, k - 1):\n            a.append(min(2 * a[-1], n - sum(a)))\n            if a[-1] == 0:\n                break\n        if sum(a) == n and all(x > 0 for x in a) and all(x < y for x, y in zip(a, a[1:])):\n            return \"YES\\n\" + \" \".join(map(str, a))\n\n    return \"NO\"",
        "test": "assert solution(\"8 3\\n\") == \"NO\\n\""
    },
    {
        "number": 4037,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        projects.append((a, b))\n    \n    def dfs(rating: int, index: int, visited: set) -> int:\n        if index == n:\n            return 0\n        if rating < 0:\n            return 0\n        if index in visited:\n            return 0\n        \n        visited.add(index)\n        return 1 + dfs(rating + projects[index][1], index + 1, visited)\n    \n    max_size = 0\n    for i in range(n):\n        max_size = max(max_size, dfs(r, i, set()))\n    \n    return str(max_size)",
        "test": "assert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\""
    },
    {
        "number": 4038,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindromic(matrix):\n        rows = len(matrix)\n        cols = len(matrix[0])\n\n        for i in range(rows // 2):\n            if matrix[i] != matrix[rows - i - 1]:\n                return False\n\n        for j in range(cols):\n            if matrix[0][j] != matrix[rows - 1][j]:\n                return False\n\n        return True\n\n    def put_numbers_into_matrix(n, numbers):\n        matrix = [[0] * n for _ in range(n)]\n        numbers = list(numbers)\n\n        def find_empty_cell(matrix, row):\n            for j in range(n):\n                if matrix[row][j] == 0:\n                    return j\n            return -1\n\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    empty_cell_row = i\n                    empty_cell_col = j\n                    break\n\n            for number in numbers:\n                if matrix[empty_cell_row][empty_cell_col] == 0:\n                    matrix[empty_cell_row][empty_cell_col] = number\n                    numbers.remove(number)\n                    break\n\n            if len(numbers) == 0:\n                return matrix\n\n            empty_cell_col = find_empty_cell(matrix, empty_cell_row)\n            if empty_cell_col == -1:\n                empty_cell_row += 1\n                empty_cell_col = 0\n\n        return matrix\n\n    n = int(stdin.readline().strip())\n    numbers = stdin.readline().strip().split()\n    matrix = put_numbers_into_matrix(n, numbers)\n\n    if is_palindromic(matrix):\n        for row in matrix:\n            print(\" \".join(map(str, row)))\n        return\n\n    print(\"NO\")",
        "test": "assert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\""
    },
    {
        "number": 4039,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[:2])\n    projects = [list(map(int, line.split())) for line in stdin.split('\\n')[1:n+1]]\n    \n    def has_enough_rating(rating, required_rating) -> bool:\n        return rating >= required_rating\n    \n    def update_rating(rating, rating_change) -> int:\n        return rating + rating_change\n    \n    def is_valid_order(rating, order) -> bool:\n        for a, b in order:\n            if not has_enough_rating(rating, a):\n                return False\n            rating = update_rating(rating, b)\n            if rating < 0:\n                return False\n        return True\n    \n    valid_orders = []\n    for order in itertools.permutations(projects):\n        if is_valid_order(r, order):\n            valid_orders.append(order)\n    \n    return \"YES\" if valid_orders else \"NO\"\n",
        "test": "assert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\") == \"YES\""
    },
    {
        "number": 4040,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[:3])\n    c = list(map(int, stdin.split()[3:]))\n    platforms = []\n    \n    if sum(c) > n:\n        return \"NO\"\n    \n    for i in range(m):\n        if c[i] > n:\n            return \"NO\"\n        platforms.append([n - c[i], n + 1])\n    \n    def can_jump(start: int, end: int, platforms: List[List[int]]) -> bool:\n        if start == end:\n            return True\n        \n        for platform in platforms:\n            if start >= platform[0] and end <= platform[1]:\n                return True\n        \n        return False\n    \n    def move_platform(platform: List[int], step: int) -> List[int]:\n        return [platform[0] + step, platform[1] + step]\n    \n    def find_jump_sequence(start: int, end: int, platforms: List[List[int]]) -> List[int]:\n        if start == end:\n            return [start]\n        \n        for platform in platforms:\n            if start >= platform[0] and end <= platform[1]:\n                new_platforms = platforms.copy()\n                new_platforms.remove(platform)\n                new_platforms.append(move_platform(platform, 1))\n                result = find_jump_sequence(start + 1, end, new_platforms)\n                if result:\n                    return [start] + result\n                \n                new_platforms.append(move_platform(platform, -1))\n                result = find_jump_sequence(start + 1, end, new_platforms)\n                if result:\n                    return [start] + result\n                \n        return []\n    \n    for i in range(n + 1):\n        if can_jump(0, i, platforms):\n            if can_jump(i, n + 1, platforms):\n                sequence = find_jump_sequence(0, n + 1, platforms)\n                if sequence:\n                    result = []\n                    for i in range(n + 1):\n                        if i in sequence:\n                            result.append(sequence.index(i) + 1)\n                        else:\n                            result.append(0)\n                    return \"YES\\n\" + \" \".join(map(str, result))\n    \n    return \"NO\"\n\ninput_data = input()\nstdin = \"\"\nwith open(\"input.txt\", \"r\") as file:\n    stdin = file.read()\noutput = solution(stdin)\nprint(output)<|im_sep|> ",
        "test": "assert solution(\"\"\"7 3 2"
    },
    {
        "number": 4041,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    max_len = 0\n\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            max_len = max(max_len, len(t))\n\n    return max_len",
        "test": "assert solution(\"baaba\\nab\") == 2"
    },
    {
        "number": 4042,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    int_part = int(x)\n    dec_part = x - int_part\n    \n    if dec_part >= 0.2:\n        dec_part -= 0.2\n        int_part += 1\n    \n    result = int(dec_part * 10) + 1\n    \n    if result > 10:\n        result = 10\n    \n    return str(int_part) + ' ' + str(result)",
        "test": "assert solution(\"2.572479\") == \"10 3\""
    },
    {
        "number": 4043,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    \n    if n == 1 or d == 0 or k == 0:\n        return \"YES\\n\"\n    \n    if n == 2 and d == 1 and k == 1:\n        return \"YES\\n1 2\\n\"\n    \n    if k < d:\n        return \"NO\"\n    \n    graph = [[0] * n for _ in range(n)]\n    \n    def find_root(vertex: int) -> int:\n        if graph[vertex][0] == vertex:\n            return vertex\n        graph[vertex][0] = find_root(graph[vertex][0])\n        return graph[vertex][0]\n    \n    def union(vertex1: int, vertex2: int) -> None:\n        root1 = find_root(vertex1)\n        root2 = find_root(vertex2)\n        if root1 != root2:\n            graph[root1][0] = root2\n    \n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                graph[i][j] = 1\n    \n    for _ in range(n - 1):\n        vertex1, vertex2 = map(int, input().split())\n        union(vertex1 - 1, vertex2 - 1)\n    \n    if any(graph[i][0] != i for i in range(n)):\n        return \"NO\"\n    \n    result = \"YES\\n\"\n    for i in range(1, n):\n        for j in range(i):\n            if graph[i][j] == 1:\n                result += f\"{i + 1} {j + 1}\\n\"\n    \n    return result",
        "test": "assert solution(\"6 2 3\") == \"NO\""
    },
    {
        "number": 4044,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if a + b < x * 2:\n        return \"impossible\"\n\n    s = \"0\" * a + \"1\" * b\n    for i in range(x):\n        if i % 2 == 0:\n            s = s[:a + i] + \"1\" + s[a + i + 1:]\n        else:\n            s = s[:a + i] + \"0\" + s[a + i + 1:]\n\n    return s",
        "test": "assert solution(\"2 2 1\") in [\"1100\", \"0011\"]"
    },
    {
        "number": 4045,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    def is_valid(s: str, t: str, res: str) -> bool:\n        return s not in res and t not in res\n\n    for i in range(1, 4):\n        for j in range(1, 4):\n            for k in range(1, 4):\n                for l in range(1, 4):\n                    for m in range(1, 4):\n                        for n1 in range(1, 4):\n                            for n2 in range(1, 4):\n                                res = \"a\" * i + \"b\" * j + \"c\" * k\n                                res += \"a\" * l + \"b\" * m + \"c\" * n1 + \"a\" * n2\n                                if len(set(res)) == 3 and is_valid(s, t, res):\n                                    return \"YES\\n\" + res\n    return \"NO\"",
        "test": "assert solution(\"3\\naa\\nbc\") == \"YES\\ncacbacbab\""
    },
    {
        "number": 4046,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find_permutation(n: int, q: List[int]) -> str:\n        if len(q) != n - 1:\n            return \"-1\"\n\n        permutation = [1] * n\n        for i in range(n - 1):\n            permutation[i + 1] = permutation[i] + q[i]\n\n        if sorted(permutation) != list(range(1, n + 1)):\n            return \"-1\"\n\n        return \" \".join(map(str, permutation))\n\n    n, q_str = stdin.strip().split('\\n')\n    n = int(n)\n    q = list(map(int, q_str.split()))\n\n    return find_permutation(n, q)\n",
        "test": "assert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\""
    },
    {
        "number": 4047,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, coords = stdin.split(\"\\n\")\n    n = int(n)\n    coords = list(map(int, coords.split()))\n    coins = 0\n    \n    target = coords[0]\n    for i in range(1, n):\n        diff = abs(coords[i] - target)\n        if diff % 2 == 0:\n            coins += diff // 2\n        else:\n            coins += (diff - 1) // 2 + 1\n    \n    return str(coins) ",
        "test": "assert solution(\"5\\n2 2 2 3 3\") == \"2\""
    },
    {
        "number": 4048,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    min_moves = 0\n    i = j = 1\n    while True:\n        if i * j >= N:\n            min_moves += abs(i * j - N)\n            break\n        else:\n            min_moves += i + j - 1\n            i += 1\n            j += 1\n    return str(min_moves)",
        "test": "assert solution(\"2\") == \"1\""
    },
    {
        "number": 4049,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    min_rounds_alice_wins = 0\n    max_rounds_alice_wins = 0\n    for i in range(3):\n        for j in range(3):\n            if i != j:\n                min_rounds_alice_wins += min(a[i], b[j])\n                max_rounds_alice_wins += max(a[i], b[j])\n\n    return f\"{min_rounds_alice_wins} {max_rounds_alice_wins}\"\n\nstdin = open(\"input.txt\")\nstdout = open(\"output.txt\", \"w\")\nstdout.write(solution(stdin))\nstdout.close() ",
        "test": "assert solution(\"2\\n5 5 5\\n5 5 5\\n\") == \"0 10\""
    },
    {
        "number": 4050,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    a = sorted(set(a))\n    k = len(a)\n    blocks = [(l, l + k - 1) for l in range(1, n - k + 2)]\n\n    # Check if blocks do not intersect\n    for i in range(len(blocks)):\n        for j in range(i + 1, len(blocks)):\n            if blocks[i][1] >= blocks[j][0]:\n                k = min(k, blocks[i][1] - blocks[j][0] + 1)\n                if k == 1:\n                    return \"1\\n\" + \"1 1\"\n    if k == 1:\n        return \"1\\n\" + \"1 1\"\n\n    result = [f\"{blocks[i][0]} {blocks[i][1]}\" for i in range(k)]\n    return str(k) + \"\\n\" + \"\\n\".join(result)",
        "test": "assert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\""
    },
    {
        "number": 4051,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def can_sort(arr):\n        stacks = []\n        for a in arr:\n            stacks.append([a])\n\n        while len(stacks) > 1:\n            min_height = min(len(stacks[0]), len(stacks[1]))\n            min_index = 0 if len(stacks[0]) == min_height else 1\n            if min_height >= 1:\n                for i in range(min_height):\n                    stacks[0].append(stacks[1].pop(0))\n            stacks.pop(min_index)\n\n        return len(stacks) == 0\n\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n\n    return \"YES\" if can_sort(arr) else \"NO\"",
        "test": "assert solution(\"3\\n3 1 2\") == \"NO\" "
    },
    {
        "number": 4052,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def swap(s: str, i: int, j: int) -> str:\n        chars = list(s)\n        chars[i], chars[j] = chars[j], chars[i]\n        return ''.join(chars)\n\n    n, s, t = stdin.split()\n    n = int(n)\n    moves = []\n\n    for i in range(n - 1):\n        if s[i] != t[i]:\n            if i == 0 and s[1] == t[0]:\n                s = swap(s, 0, 1)\n                moves.append(1)\n            elif i == n - 2 and s[n - 2] == t[n - 1]:\n                s = swap(s, n - 2, n - 1)\n                moves.append(n - 1)\n            else:\n                s = swap(s, i, i + 1)\n                moves.append(i + 1)\n\n    if s == t:\n        return str(len(moves)) + '\\n' + ' '.join(map(str, moves))\n    else:\n        return '-1'",
        "test": "assert solution(\"4\\nabcd\\naccd\\n\") == \"-1\""
    },
    {
        "number": 4053,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    prefixes_and_suffixes = stdin.splitlines()[1:]\n\n    # Count the occurrences of each prefix and suffix\n    prefixes_count = {}\n    suffixes_count = {}\n    for prefix_or_suffix in prefixes_and_suffixes:\n        if prefix_or_suffix in prefixes_count:\n            prefixes_count[prefix_or_suffix] += 1\n        else:\n            prefixes_count[prefix_or_suffix] = 1\n        if prefix_or_suffix[::-1] in suffixes_count:\n            suffixes_count[prefix_or_suffix[::-1]] += 1\n        else:\n            suffixes_count[prefix_or_suffix[::-1]] = 1\n\n    # Check if there is a string that is consistent with the given prefixes and suffixes\n    for string in prefixes_and_suffixes:\n        if prefixes_count[string] == suffixes_count[string]:\n            return \"P\" * prefixes_count[string] + \"S\" * suffixes_count[string]\n\n    # If there is no consistent string, return any answer\n    return \"P\" * (n - 1) + \"S\" * (n - 1) ",
        "test": "assert solution(\"3\\na\\naa\\na\\naba\") == \"PPSS\""
    },
    {
        "number": 4054,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    count_odd = sum([1 for i in a if i % 2 != 0])\n    if count_odd % 2 == 0:\n        return \"1\"\n    else:\n        return \"0\"",
        "test": "assert solution(\"3 7 11\") == \"0\""
    },
    {
        "number": 4055,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    light_states = list(map(int, stdin.split('\\n')[1].split()))\n\n    def is_disturbed(i):\n        return (1 < i < n) and (light_states[i - 1] == light_states[i + 1] == 1) and (light_states[i] == 0)\n\n    def count_disturbed(i):\n        count = 0\n        for j in range(n):\n            if is_disturbed(j):\n                count += 1\n        return count\n\n    min_k = n\n    for i in range(1, n - 1):\n        if light_states[i] == 1:\n            light_states[i] = 0\n            new_min_k = count_disturbed(i)\n            light_states[i] = 1\n            if new_min_k < min_k:\n                min_k = new_min_k\n\n    return str(min_k)",
        "test": "assert solution(\"5\\n1 1 0 0 0\") == \"0\""
    },
    {
        "number": 4056,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    \n    divisors = set()\n    for i in range(1, a[-1] + 1):\n        is_divisor = True\n        for j in range(len(a)):\n            if a[j] % i != 0:\n                is_divisor = False\n                break\n        if is_divisor:\n            divisors.add(i)\n    \n    return str(len(divisors))\n",
        "test": "assert solution(\"5\\n1 2 3 4 5\") == \"1\""
    },
    {
        "number": 4057,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    coins = list(map(int, stdin.split()[1:]))\n    coins.sort()\n    \n    pockets = 0\n    current_pocket = []\n    for coin in coins:\n        if not current_pocket or coin != current_pocket[-1]:\n            current_pocket.append(coin)\n        else:\n            current_pocket = [coin]\n            pockets += 1\n    \n    return str(pockets + 1)",
        "test": "assert solution(\"1\\n100\") == \"1\" "
    },
    {
        "number": 4058,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0].split())\n    heaters = list(map(int, stdin.split()[1].split()))\n\n    num_heaters = 0\n    num_heaters_needed = 0\n    max_end = 0\n    for i in range(n):\n        if heaters[i] == 1:\n            num_heaters += 1\n            max_end = max(max_end, i + r - 1)\n\n        if max_end >= i:\n            num_heaters_needed += 1\n\n    if num_heaters_needed >= num_heaters:\n        return str(num_heaters_needed)\n    else:\n        return \"-1\"",
        "test": "assert solution(\"5 3\\n1 0 0 0 1\") == \"2\""
    },
    {
        "number": 4059,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    # Count the number of tuples that satisfy A \\times B + C = N\n    count = 0\n    for A in range(1, N + 1):\n        for B in range(1, N + 1):\n            C = N - A * B\n            if C > 0:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"3\") == \"3\""
    },
    {
        "number": 4060,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    \n    def is_regular(s: str) -> bool:\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack[-1] == ')':\n                    return False\n                stack.pop()\n            else:\n                continue\n        return not stack\n    \n    result = 0\n    for i in range(n):\n        if s[i] == '(':\n            s[i] = ')'\n            if is_regular(s):\n                result += 1\n            s[i] = '('\n        elif s[i] == ')':\n            s[i] = '('\n            if is_regular(s):\n                result += 1\n            s[i] = ')'\n        else:\n            continue\n    \n    return str(result)",
        "test": "assert solution(\"6\\n()()()\\n\") == \"0\\n\""
    },
    {
        "number": 4061,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    \n    n = len(s)\n    m = len(t)\n    dp = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if s[i] == t[j]:\n                dp[i] = max(dp[i], j + 1)\n    \n    max_len = 0\n    for i in range(n):\n        if dp[i] == m:\n            max_len = i + 1\n            break\n    \n    return max_len\n\ndef",
        "test": "assert solution(\"baaba\") == 2"
    },
    {
        "number": 4062,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    x_max = max(a, b)\n    y_max = max(c, d)\n    return str(x_max * y_max)",
        "test": "assert solution(\"1 2 1 1\") == \"2\""
    },
    {
        "number": 4063,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, *difficulties = stdin.split()\n    N = int(N)\n    difficulties = [int(d) for d in difficulties]\n\n    # Count the number of problems for ARCs and ABCs\n    arcs = sum(1 for d in difficulties if d >= 5)\n    abcs = N - arcs\n\n    # Find the number of choices of K that make the number of problems for ARCs and the number of problems for ABCs the same\n    count = 0\n    for k in range(1, max(arcs, abcs) + 1):\n        if arcs == abcs or arcs == abcs + 1 or abcs == arcs + 1:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"10\\n8 2 3 4 5 6 7 8 9 10\") == \"0\""
    },
    {
        "number": 4064,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n    good_sleep_times = 0\n    current_time = 0\n    \n    for i in range(n):\n        if l <= current_time + a[i] - 1 <= r:\n            good_sleep_times += 1\n        current_time += a[i] - 1\n    \n    return str(good_sleep_times)",
        "test": "assert solution('10 24 10 20\\n15 16 10 18 12 17 19') == '4' "
    },
    {
        "number": 4065,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    difficulties = list(map(int, stdin.split()[1:]))\n\n    count = 1\n    max_count = 1\n\n    for i in range(1, n):\n        if difficulties[i] <= difficulties[i - 1] * 2:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 1\n\n    return str(max_count)\n\n\ninput_data = \"10 1 2 5 6 7 10 21 23 24 49\"\nprint(solution(input_data)) ",
        "test": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\""
    },
    {
        "number": 4066,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    lcm_min = float('inf')\n    result = None\n\n    for i in range(n):\n        for j in range(i+1, n):\n            lcm = find_lcm(a[i], a[j])\n            if lcm < lcm_min:\n                lcm_min = lcm\n                result = (i+1, j+1)\n\n    return f\"{result[0]} {result[1]}\"\n\ndef",
        "test": "assert solution(\"5\\n5 2 11 3 7\") == \"2 4\""
    },
    {
        "number": 4067,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    # Count the number of characters '0', '1' and '2' in the given string\n    count_0 = s.count('0')\n    count_1 = s.count('1')\n    count_2 = s.count('2')\n\n    # Calculate the number of replacements needed\n    replacements = min(count_0, count_1, count_2)\n\n    # Initialize the balanced ternary string\n    balanced_string = ''\n\n    # Replace the characters in the given string with characters '0', '1' and '2' to obtain the balanced ternary string\n    i = 0\n    while i < n:\n        if s[i] == '0':\n            balanced_string += '1'\n            replacements -= 1\n            i += 3\n        elif s[i] == '1':\n            balanced_string += '2'\n            replacements -= 1\n            i += 3\n        elif s[i] == '2':\n            balanced_string += '0'\n            replacements -= 1\n            i += 3\n\n    # Add the remaining '0' and '1' characters to obtain the lexicographically smallest balanced ternary string\n    while replacements > 0:\n        if count_0 > count_1:\n            balanced_string += '0'\n            count_0 -= 1\n        else:\n            balanced_string += '1'\n            count_1 -= 1\n        replacements -= 1\n\n    return balanced_string",
        "test": "assert solution(\"6\\n000000\") == \"001122\""
    },
    {
        "number": 4068,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M, broken_steps = map(int, stdin.split())\n    broken_steps = set(map(int, broken_steps.split()))\n    \n    dp = [0] * (N + 1)\n    dp[0] = 1\n    \n    for i in range(1, N + 1):\n        if i in broken_steps:\n            continue\n        dp[i] += dp[i - 1]\n        if i > 1 and i - 2 not in broken_steps:\n            dp[i] += dp[i - 2]\n        dp[i] %= 1000000007\n    \n    return str(dp[N])",
        "test": "assert solution(\"10 2\\n3\\n6\") == \"7\""
    },
    {
        "number": 4069,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n\n    if k == 1:\n        return str(abs(x))\n\n    # Determine the minimum and maximum possible coordinates\n    min_coord = x + k * d if d > 0 else x - k * d\n    max_coord = x - k * d if d > 0 else x + k * d\n\n    return str(min(map(abs, (min_coord, max_coord))))\n",
        "test": "assert solution('0 1 5') == '0'"
    },
    {
        "number": 4070,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            count += 1\n        n //= 2\n    return count",
        "test": "assert solution(\"14\") == \"0\""
    },
    {
        "number": 4071,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a * (a + 1) // 2)",
        "test": "assert solution(1) == 1"
    },
    {
        "number": 4072,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 10 == 0 or a % 10 == 1 or a % 10 == 2 or a % 10 == 3 or a % 10 == 4 or a % 10 == 5 or a % 10 == 6 or a % 10 == 8 or a % 10 == 9:\n        return \"1\"\n    else:\n        return \"0\"",
        "test": "assert solution('13') == '1'"
    },
    {
        "number": 4073,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split(\"\\n\")\n    n = int(input_values[0])\n    values = [int(x) for x in input_values[1].split(\" \")]\n    \n    max_value = max(values)\n    return max_value\n\ndef",
        "test": "assert solution(\"4\\n2 5 3 1\") == \"4\""
    },
    {
        "number": 4074,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split('\\n')\n    t = int(test_cases.pop(0))\n    results = []\n\n    for i in range(t):\n        n, k = list(map(int, test_cases[i].split()))\n        results.append(n // k + (n % k != 0))\n\n    return '\\n'.join(map(str, results))",
        "test": "assert solution(\"5\\n8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\") == \"2\\n8\\n1\\n999999733\\n1\" "
    },
    {
        "number": 4075,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    bulbs = []\n    \n    for i in range(1, m + 1):\n        bulb = [int(x) for x in lines[i].split()[1:]]\n        bulbs.append((i, bulb))\n    \n    ps = [int(x) for x in lines[-1].split()]\n    \n    def count_on_states(switches):\n        count = 0\n        for switch in switches:\n            if switches[switch - 1]:\n                count += 1\n        return count\n    \n    def lighted_bulbs(bulb_index, bulb_switches):\n        lighted = 0\n        for switch in bulb_switches:\n            if switches[switch - 1]:\n                lighted += 1\n        return lighted % 2 == ps[bulb_index - 1]\n    \n    switches = [False] * n\n    result = 0\n    \n    for i in range(2**n):\n        binary = format(i, f'0{n}b')\n        for j in range(n):\n            switches[j] = binary[j] == '1'\n        \n        bulbs_lighted = 0\n        for bulb_index, bulb_switches in bulbs:\n            if lighted_bulbs(bulb_index, bulb_switches):\n                bulbs_lighted += 1\n        \n        if bulbs_lighted == m:\n            result += 1\n    \n    return str(result)",
        "test": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\""
    },
    {
        "number": 4076,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.strip().split())\n    \n    # Calculate the total rotation angle for both hands\n    total_rotation_hour = 12 * 30 + H * 6  # 12 hours * 30 degrees + H hours * 6 degrees\n    total_rotation_minute = 60 * 30 + M * 6  # 60 minutes * 30 degrees + M minutes * 6 degrees\n    \n    # Calculate the distance between the hands\n    distance = abs(A - B) * math.sin(math.radians(total_rotation_minute - total_rotation_hour))\n    \n    return f\"{distance:.9f}\"",
        "test": "assert solution(\"10 20 3 15\") == \"4.12310562561766167484\""
    },
    {
        "number": 4077,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def binary_search(arr, x):\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == x:\n                return mid\n            elif arr[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n\n    def median(arr, l, r):\n        if r - l + 1 % 2 == 0:\n            return (arr[l] + arr[l + (r - l + 1) // 2 - 1]) / 2\n        else:\n            return arr[l + (r - l + 1) // 2]\n\n    count = 0\n    for l in range(n):\n        for r in range(l + 1, n + 1):\n            if median(a, l, r - 1) <= m <= median(a, l, r):\n                count += 1\n\n    return str(count)",
        "test": "assert solution('3 1\\n1 1 1') == '6\\n'"
    },
    {
        "number": 4078,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, next(stdin).split())\n    a = list(map(int, next(stdin).split()))\n    segments = [tuple(map(int, next(stdin).split())) for _ in range(m)]\n\n    def decrement_segments(chosen_segments: List[int]) -> List[int]:\n        result = [0] * n\n        for segment in chosen_segments:\n            for i in range(l_j - 1, r_j):\n                result[i] -= 1\n        return result\n\n    max_result = 0\n    chosen_segments = []\n\n    for segment in segments:\n        l_j, r_j = segment\n        temp_result = max(a) - min(decrement_segments([segment]) + a)\n        if temp_result > max_result:\n            max_result = temp_result\n            chosen_segments = [segment]\n        elif temp_result == max_result:\n            chosen_segments.append(segment)\n\n    return f\"{max_result}\\n{len(chosen_segments)}\\n{' '.join(map(str, chosen_segments))}\"\n",
        "test": "assert solution(input_data) == output_data"
    },
    {
        "number": 4079,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    strings = stdin.splitlines()[1:]\n    \n    for string in strings:\n        if is_diverse(string):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\ndef",
        "test": "assert solution(\"xyz\") == \"Yes\""
    },
    {
        "number": 4080,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, next(stdin).split())\n    a = list(map(int, next(stdin).split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, next(stdin).split())\n        segments.append((l - 1, r - 1))\n    \n    max_diff = 0\n    selected_segments = set()\n    \n    for i in range(m):\n        for j in range(i + 1, m):\n            l_i, r_i = segments[i]\n            l_j, r_j = segments[j]\n            \n            if l_i <= l_j <= r_j <= r_i:\n                continue\n            \n            if l_j <= l_i <= r_i <= r_j:\n                continue\n            \n            new_a = [x - 1 if l_i <= k <= r_i or l_j <= k <= r_j else x for k, x in enumerate(a)]\n            diff = max(new_a) - min(new_a)\n            \n            if diff > max_diff:\n                max_diff = diff\n                selected_segments = {i + 1, j + 1}\n            elif diff == max_diff:\n                selected_segments.add(i + 1)\n                selected_segments.add(j + 1)\n    \n    return f\"{max_diff}\\n{len(selected_segments)}\\n{' '.join(map(str, selected_segments))}\"\n\ndef",
        "test": "assert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\\n\""
    },
    {
        "number": 4081,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def find_max_length(a, i, j, left_moves, right_moves, increasing_sequence):\n        if i >= j:\n            return left_moves, right_moves, increasing_sequence\n\n        if a[i] < a[j]:\n            return find_max_length(a, i + 1, j, left_moves + 1, right_moves, increasing_sequence + (a[i],))\n        else:\n            return find_max_length(a, i, j - 1, left_moves, right_moves + 1, increasing_sequence + (a[j],))\n\n    max_length, max_sequence = 0, []\n    for i in range(n):\n        for j in range(n):\n            left_moves, right_moves, increasing_sequence = find_max_length(a, i, j, 0, 0, ())\n            if len(increasing_sequence) > max_length:\n                max_length = len(increasing_sequence)\n                max_sequence = increasing_sequence\n\n    result = \"\".join([\"L\" if a[i] == max_sequence[j] else \"R\" for j, i in enumerate(range(len(a)))])\n    return str(max_length) + \"\\n\" + result",
        "test": "assert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\""
    },
    {
        "number": 4082,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find_largest_subarray(arr: List[int]) -> int:\n        if len(arr) == 1:\n            return 1\n        longest = 1\n        current = 1\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i - 1]:\n                current += 1\n            else:\n                longest = max(longest, current)\n                current = 1\n        return max(longest, current)\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    max_length = find_largest_subarray(a)\n\n    for i in range(n):\n        new_a = a[:i] + a[i+1:]\n        new_length = find_largest_subarray(new_a)\n        max_length = max(max_length, new_length)\n\n    return str(max_length)",
        "test": "assert solution(\"2\\n1 2\") == \"2\""
    },
    {
        "number": 4083,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def count_pairs(a: List[int]) -> int:\n        a.sort()\n        count = 0\n        i = 0\n        while i < len(a):\n            j = i + 1\n            while j < len(a) and a[j] == a[i]:\n                j += 1\n            count += j - i - 1\n            i = j\n        return count\n\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    min_operations = 0\n    while count_pairs(a) < k:\n        min_operations += 1\n        a = [x // 2 for x in a]\n\n    return str(min_operations)",
        "test": "assert solution(\"5 3\\n1 2 3 4 5\") == \"2\""
    },
    {
        "number": 4084,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    blue_balls = (N // (A + B)) * A\n    if N % (A + B) >= A:\n        blue_balls += A\n    else:\n        blue_balls += N % (A + B)\n    return str(blue_balls)",
        "test": "assert solution(\"8 3 4\") == \"4\""
    },
    {
        "number": 4085,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    output = []\n    for i in range(t):\n        n = int(stdin.splitlines()[i * 2 + 1])\n        divisors = stdin.splitlines()[i * 2 + 2].split()\n        divisors = [int(d) for d in divisors]\n        divisors.sort()\n\n        if divisors[-1] * divisors[-2] == divisors[0] * divisors[1]:\n            output.append(-1)\n        else:\n            output.append(divisors[0] * divisors[1])\n\n    return \"\\n\".join(map(str, output))",
        "test": "assert solution(\"2\\n8\\n8 2 12 6 4 24 16 3\\n1\\n2\") == \"48\\n-1\""
    },
    {
        "number": 4086,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    arr = list(map(int, stdin.splitlines()[1].split()))\n    unique_arr = list(set(arr))\n    result = []\n    \n    for i in unique_arr:\n        index = arr.index(i)\n        result.append(i)\n        \n    return str(len(result)) + \"\\n\" + \" \".join(map(str, result))\n\ndef",
        "test": "assert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\""
    },
    {
        "number": 4087,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def sum_of_digits(n: int) -> int:\n        return sum(int(digit) for digit in str(n))\n\n    def is_interesting(n: int) -> bool:\n        return sum_of_digits(n) % 4 == 0\n\n    def next_larger_interesting(n: int) -> int:\n        while True:\n            n += 1\n            if is_interesting(n):\n                return n\n\n    a = int(stdin)\n    return str(next_larger_interesting(a))",
        "test": "assert solution(\"432\") == \"435\""
    },
    {
        "number": 4088,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.strip().split('\\n')\n    q = int(cases[0])\n    results = []\n\n    for i in range(1, q+1):\n        s = cases[3*i-2]\n        m = int(cases[3*i-1])\n        b = list(map(int, cases[3*i]))\n\n        def calculate_b(s: str, m: int, b: list) -> list:\n            result = [0] * len(s)\n            for i in range(len(s)):\n                for j in range(len(s)):\n                    if i != j:\n                        if s[j] > s[i]:\n                            result[i] += abs(j-i)\n            return result\n\n        possible_t = set()\n        for p in itertools.permutations(s):\n            if calculate_b(''.join(p), m, b) == b:\n                possible_t.add(''.join(p))\n\n        if len(possible_t) > 0:\n            results.append(next(iter(possible_t)))\n        else:\n            results.append(\"No solution\")\n\n    return '\\n'.join(results)",
        "test": "assert solution(\"2\\nabac\\n3\\n2 1 0\\nabc\\n1\\n0\\naba\\n2\\n1 1\\nbac\\n2\\n0 1\\nabac\\n2\\n1 1\") == \"aac\\nb\\naba\\nacb\\nacb\""
    },
    {
        "number": 4089,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 26:\n        return chr(ord('a') + N - 1)\n    elif N <= 702:\n        n, m = divmod(N - 26, 26)\n        return chr(ord('a') + n - 1) + chr(ord('a') + m - 1)\n    elif N <= 18278:\n        n, m = divmod(N - 702, 26)\n        return chr(ord('a') + n // 26 - 1) + chr(ord('a') + (n % 26) - 1) + chr(ord('a') + m - 1)\n    elif N <= 475254:\n        n, m = divmod(N - 18278, 26)\n        return chr(ord('a') + n // 676 - 1) + chr(ord('a') + (n % 26) - 1) + chr(ord('a') + (n // 26) - 1) + chr(ord('a') + m - 1)\n    else:\n        n, m = divmod(N - 475254, 26)\n        return chr(ord('a') + n // 17576 - 1) + chr(ord('a') + (n % 26) - 1) + chr(ord('a') + ((n // 26) % 26) - 1) + chr(ord('a') + (n // 784) - 1) + chr(ord('a') + m - 1)",
        "test": "assert solution(\"1\") == \"a\""
    },
    {
        "number": 4090,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.strip().split(\" \")\n    n = len(words)\n    word_dict = {word: i for i, word in enumerate(words)}\n\n    def get_substring(i: int, j: int) -> str:\n        return \"\".join(words[i:j+1]).upper()\n\n    def is_abbreviation_possible(i: int, j: int, k: int, l: int) -> bool:\n        if j - i != l - k:\n            return False\n        for t in range(j - i + 1):\n            if words[i + t] != words[k + t]:\n                return False\n        return True\n\n    min_length = len(stdin)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(n):\n                for l in range(k + 1, n):\n                    if is_abbreviation_possible(i, j, k, l):\n                        new_text = stdin[:word_dict[words[i]]] + get_substring(i, j) + stdin[word_dict[words[j + 1]]:]\n                        new_text = new_text[:word_dict[words[k]]] + get_substring(k, l) + new_text[word_dict[words[l + 1]]:]\n                        min_length = min(min_length, len(new_text))\n\n    return min_length",
        "test": "assert solution(\"10\\na ab a a b ab a a b c\") == \"13\""
    },
    {
        "number": 4091,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # Calculate the total profit for each day\n    total_profit = [0] * k\n    for i in range(n):\n        for j in range(k):\n            if i >= j * (n // k) and i < (j + 1) * (n // k):\n                total_profit[j] += a[i]\n\n    # Calculate the maximum total profit\n    max_profit = max(total_profit)\n\n    # Calculate the number of problems to solve for each day\n    t = [0] * k\n    for i in range(n):\n        for j in range(k):\n            if i >= j * (n // k) and i < (j + 1) * (n // k):\n                t[j] += 1\n\n    # Calculate the remaining problems to solve\n    remaining = n - sum(t)\n\n    # Distribute the remaining problems among days with the maximum profit\n    for j in range(k):\n        if total_profit[j] == max_profit:\n            t[j] += remaining // k\n            remaining -= remaining // k\n\n    # If there are remaining problems, distribute them among days with the maximum profit\n    if remaining > 0:\n        for j in range(k):\n            if total_profit[j] == max_profit:\n                t[j] += remaining\n                remaining -= remaining\n\n    return str(max_profit) + \"\\n\" + \" \".join(map(str, t))",
        "test": "assert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\""
    },
    {
        "number": 4092,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    min_insertions = float('inf')\n    for i in range(n - 1):\n        if a[i] > 0 and a[i + 1] < 0:\n            min_insertions = min(min_insertions, abs(a[i]) + abs(a[i + 1]))\n        elif a[i] < 0 and a[i + 1] > 0:\n            min_insertions = min(min_insertions, abs(a[i]) + abs(a[i + 1]))\n        elif a[i] > 0 and a[i + 1] > 0:\n            min_insertions = min(min_insertions, abs(a[i]) + abs(a[i + 1]))\n        elif a[i] < 0 and a[i + 1] < 0:\n            min_insertions = min(min_insertions, abs(a[i]) + abs(a[i + 1]))\n\n    return str(min_insertions)",
        "test": "assert solution(\"5\\n4 -2 3 -9 2\\n\") == \"0\""
    },
    {
        "number": 4093,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    results = []\n\n    for _ in range(t):\n        n, m = map(int, stdin.readline().split())\n        a = [0] * n\n        a[0] = m\n        for i in range(1, n):\n            a[i] = m - i * (m // n)\n        results.append(sum(abs(a[i] - a[i + 1]) for i in range(n - 1)))\n\n    return \"\\n\".join(map(str, results))",
        "test": "assert solution(\"5\\n1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\\n\""
    },
    {
        "number": 4094,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    count = 0\n    i = 1\n    while True:\n        if i % k == 0:\n            return str(count + 1)\n        count += 1\n        i *= 10",
        "test": "assert solution(\"7\") == \"-1\""
    },
    {
        "number": 4095,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, input().split()))\n    count = 0\n    \n    p.sort()\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if m == p[i+(j-i-1)//2]:\n                count += 1\n                \n    return str(count)",
        "test": "assert solution(\"5 5\\n1 2 3 4 5\") == \"1\\n\""
    },
    {
        "number": 4096,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    cups = list(map(int, stdin.split()[2:]))\n    \n    # Check if it's impossible to finish the coursework\n    if max(cups) < m:\n        return \"-1\"\n    \n    # Initialize variables\n    days_needed = 0\n    pages_written = 0\n    total_pages = 0\n    \n    # Iterate through the cups of coffee\n    for cup in cups:\n        # Calculate the number of pages that can be written with this cup\n        pages_to_write = min(m - pages_written, cup)\n        \n        # Update the total number of pages written\n        pages_written += pages_to_write\n        \n        # If we've written the whole coursework, break out of the loop\n        if pages_written == m:\n            break\n        \n        # If we've written more than half of the coursework, add a day\n        if pages_written >= m / 2:\n            days_needed += 1\n    \n    # If we've not written the whole coursework, add a day and try again\n    if pages_written < m:\n        days_needed += 1\n    \n    return str(days_needed)",
        "test": "assert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\""
    },
    {
        "number": 4097,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n\n    if n == 1 or n == 2:\n        return str(0)\n\n    b_diff = [b[i] - b[i - 1] for i in range(1, n)]\n    unique_diff = list(set(b_diff))\n\n    if len(unique_diff) != 1:\n        return str(-1)\n\n    min_changes = 0\n    for i in range(1, n):\n        if b[i] - b[i - 1] != unique_diff[0]:\n            min_changes += 1\n\n    return str(min_changes)",
        "test": "assert solution(\"3\\n14 5 1\") == \"-1\""
    },
    {
        "number": 4098,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    a.sort()\n    count = 1\n    max_count = 0\n\n    for i in range(len(a) - 1):\n        if a[i + 1] - a[i] <= 5:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n\n    max_count = max(max_count, count)\n\n    if max_count > k:\n        return \"No solution\"\n    else:\n        return str(max_count)",
        "test": "assert solution(\"6 1\\n36 4 1 25 9 16\\n\") == \"2\""
    },
    {
        "number": 4099,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N, K, M = int(input_list[0]), int(input_list[1]), int(input_list[2])\n    A = [int(x) for x in input_list[3:]]\n    total_points = sum(A) + K - A[-1]\n    avg = total_points / N\n    if avg >= M:\n        return -1\n    else:\n        return int(M - avg)",
        "test": "assert solution(\"4 10 8\\n8 4 2 6\") == \"-1\""
    },
    {
        "number": 4100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q, *answers = map(int, stdin.split())\n    players_scores = [k] * n\n    \n    for answer in answers:\n        for i in range(n):\n            if i != answer - 1:\n                players_scores[i] -= 1\n    \n    return \"\\n\".join(\"Yes\" if score > 0 else \"No\" for score in players_scores)",
        "test": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\""
    },
    {
        "number": 4101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = [list(map(int, line.split())) for line in stdin.split()[2:]]\n    \n    # Check if the matrix is sorted\n    sorted_matrix = all(a[i][j] <= a[i][j+1] for i in range(n) for j in range(m-1))\n    \n    if not sorted_matrix:\n        # Matrix is not sorted, find the operations to sort it\n        r = []\n        c = []\n        inverted_rows = set()\n        inverted_cols = set()\n        \n        for i in range(n):\n            if a[i] not in inverted_rows:\n                inverted_rows.add(a[i])\n                r.append('1')\n            else:\n                inverted_rows.remove(a[i])\n                r.append('0')\n        \n        for j in range(m):\n            col = [a[i][j] for i in range(n)]\n            if col not in inverted_cols:\n                inverted_cols.add(col)\n                c.append('1')\n            else:\n                inverted_cols.remove(col)\n                c.append('0')\n        \n        return 'YES\\n' + ''.join(r) + '\\n' + ''.join(c)\n    \n    else:\n        # Matrix is already sorted\n        return 'NO'",
        "test": "assert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\""
    },
    {
        "number": 4102,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n == 1:\n        return \"No\"\n\n    for i in range(n // 2):\n        if stdin[i] != stdin[n - i - 1]:\n            return \"No\"\n\n    return \"Yes\"",
        "test": "assert solution(\"373\") == \"Yes\""
    },
    {
        "number": 4103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def simulate(n, b, a, segments) -> int:\n        current_battery = b\n        current_accumulator = a\n        segments_passed = 0\n        \n        for i, exposed in enumerate(segments):\n            if current_battery == 0:\n                if current_accumulator == 0:\n                    break\n                current_accumulator -= 1\n            current_battery -= 1\n            segments_passed += 1\n            \n            if exposed:\n                if current_accumulator == a:\n                    continue\n                current_accumulator += 1\n        \n        return segments_passed\n\n    n, b, a = map(int, stdin.split())\n    segments = list(map(int, input().split()))\n    \n    return str(simulate(n, b, a, segments))",
        "test": "assert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\" "
    },
    {
        "number": 4104,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    result = eval(stdin)\n    if result < 0:\n        result = result * -1\n    return str(result)",
        "test": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\""
    },
    {
        "number": 4105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    # Check if n is even\n    if n % 2 != 0:\n        return \"NO\"\n    \n    # Create a list of all possible color combinations\n    color_combinations = [[i, j] for i in range(1, k+1) for j in range(1, k+1) if i != j]\n    \n    # Create a list of all possible pairs\n    all_pairs = list(zip(range(1, n+1), range(2, n+1)))\n    \n    # Check if there are enough unique pairs\n    if len(color_combinations) * len(all_pairs) < n:\n        return \"NO\"\n    \n    # Create a list of all possible combinations of pairs and colors\n    all_combinations = [color_combinations[i//len(all_pairs)] + list(all_pairs[i%len(all_pairs)]) for i in range(len(color_combinations) * len(all_pairs))]\n    \n    # Filter out invalid combinations\n    valid_combinations = [combination for combination in all_combinations if len(set(combination[2:])) == 2]\n    \n    # Check if there are enough valid combinations\n    if len(valid_combinations) < n:\n        return \"NO\"\n    \n    # Choose n valid combinations at random\n    chosen_combinations = random.sample(valid_combinations, n)\n    \n    # Convert the chosen combinations to the desired output format\n    output = \"\\n\".join([f\"{combination[2]-1} {combination[3]-1}\" for combination in chosen_combinations])\n    \n    return \"YES\\n\" + output ",
        "test": "assert solution('10 4') == \"YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\""
    },
    {
        "number": 4106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[:3])\n    beauties = list(map(int, stdin.split()[3:]))\n    \n    # Check if there is no way to satisfy all conditions in the problem statement\n    if x > n:\n        return \"-1\"\n    \n    # Sort the beauties in descending order\n    beauties.sort(reverse=True)\n    \n    # Initialize variables\n    max_sum = 0\n    current_sum = 0\n    i = 0\n    j = 0\n    \n    while i < n:\n        if j < n and beauties[i] >= beauties[j]:\n            current_sum += beauties[i]\n            i += 1\n        else:\n            j += 1\n            if j >= k:\n                max_sum = max(max_sum, current_sum)\n                current_sum = 0\n                j = 0\n                \n    return str(max_sum) ",
        "test": "assert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\\n\""
    },
    {
        "number": 4107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = stdin.split()\n    n, k = int(n), int(k)\n    s = list(s)\n\n    def cost(i: int) -> int:\n        return i\n\n    def router_cost(i: int) -> int:\n        return i\n\n    def connect_rooms(start: int, end: int) -> int:\n        if start > end:\n            return 0\n        return sum(cost(i) for i in range(start, end + 1))\n\n    total_cost = 0\n    for i, is_router in enumerate(s):\n        if is_router == '1':\n            left_room = max(1, i - k)\n            right_room = min(n, i + k)\n            total_cost += connect_rooms(left_room, i - 1) + router_cost(i) + connect_rooms(i + 1, right_room)\n        else:\n            total_cost += connect_rooms(i, i)\n\n    return str(total_cost)",
        "test": "assert solution(\"6 1\\n000000\") == \"21\""
    },
    {
        "number": 4108,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            S = S[:i] + T[i] + S[i + 1:]\n            T = T[:i] + S[i] + T[i + 1:]\n    return \"Yes\" if S == T else \"No\"\n\nstdin = \"azzel\\napple\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"azzel\\napples\") == \"No\""
    },
    {
        "number": 4109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def can_achieve_target(target: int, max_price: int, books: List[List[int]]) -> bool:\n        dp = [False] * (target + 1)\n        dp[0] = True\n        for price, increase in books:\n            if price > max_price:\n                continue\n            for i in range(target, -1, -1):\n                if i - increase >= 0 and dp[i - increase]:\n                    dp[i] = True\n        return dp[target]\n\n    def min_money(target: int, max_price: int, books: List[List[int]]) -> int:\n        dp = [math.inf] * (target + 1)\n        dp[0] = 0\n        for price, increase in books:\n            if price > max_price:\n                continue\n            for i in range(target, -1, -1):\n                if i - increase >= 0:\n                    dp[i] = min(dp[i], dp[i - increase] + price)\n        return dp[target] if dp[target] != math.inf else -1\n\n    M, N, C, A = map(int, stdin.split())\n    books = []\n    for _ in range(N):\n        Ai, Ci, Xi = map(int, input().split())\n        books.append([Xi, Ai])\n\n    max_price = max(Ci for Ci, _ in books)\n    target = M * A\n\n    if can_achieve_target(target, max_price, books):\n        return str(min_money(target, max_price, books))\n    else:\n        return \"Takahashi can't achieve the objective.\" ",
        "test": "assert solution(\"1 1\\n10\") == \"NO\""
    },
    {
        "number": 4110,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    D = int(input_values[0])\n    G = int(input_values[1])\n\n    p_c = []\n    for i in range(D):\n        p, c = map(int, input_values[2 + i*2:4 + i*2])\n        p_c.append((p, c))\n\n    p_c.sort(key=lambda x: x[0], reverse=True)\n\n    perfect_bonus = 0\n    total_problems = 0\n\n    for problem in p_c:\n        p, c = problem\n        perfect_bonus += c\n        total_problems += p\n\n        if perfect_bonus + total_problems >= G:\n            return str(total_problems)\n\n    return \"Impossible\"",
        "test": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\""
    },
    {
        "number": 4111,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    good_candies = []\n    total_weight_odd = 0\n    total_weight_even = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            total_weight_even += a[i]\n        else:\n            total_weight_odd += a[i]\n    if total_weight_even == total_weight_odd:\n        good_candies.append(n)\n    for i in range(1, n):\n        if i % 2 == 0:\n            total_weight_even -= a[i]\n        else:\n            total_weight_odd -= a[i]\n        if i % 2 == 0:\n            total_weight_even += a[i-1]\n        else:\n            total_weight_odd += a[i-1]\n        if total_weight_even == total_weight_odd:\n            good_candies.append(i)\n    return str(len(good_candies))",
        "test": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\""
    },
    {
        "number": 4112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    max_sum = -1\n    for i in range(n - x + 1):\n        current_sum = sum(a[i:i+x])\n        if x == n:\n            return str(current_sum)\n        if all(a[j:j+k].count(a[i]) >= 1 for j in range(i, i + n - x - k + 1)):\n            max_sum = max(max_sum, current_sum)\n\n    return str(max_sum)\n\ninput_stdin = \"\"\"\n5 2 3\n5 1 3 10 1\n\n6 1 5\n10 30 30 70 10 10\n\n4 3 1\n1 100 1 1\n\"\"\"\n\nprint(solution(input_stdin)) ",
        "test": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\""
    },
    {
        "number": 4113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    # Check if we can buy one cake and one doughnut for N dollars\n    if N == 11:\n        return \"Yes\"\n    \n    # Check if we can buy two cakes for N dollars\n    if N == 8:\n        return \"Yes\"\n    \n    # Check if we can buy two doughnuts for N dollars\n    if N == 14:\n        return \"Yes\"\n    \n    # Check if we can buy one cake, one doughnut, and one cake for N dollars\n    if N == 12:\n        return \"Yes\"\n    \n    # Check if we can buy one cake, one doughnut, and one doughnut for N dollars\n    if N == 15:\n        return \"Yes\"\n    \n    # Check if we can buy one cake, two doughnuts, and one cake for N dollars\n    if N == 16:\n        return \"Yes\"\n    \n    # Check if we can buy one cake, two doughnuts, and one doughnut for N dollars\n    if N == 18:\n        return \"Yes\"\n    \n    return \"No\"",
        "test": "assert solution(\"10\") == \"No\""
    },
    {
        "number": 4114,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    points = []\n    for i in range(1, n+1):\n        x, y, h = map(int, lines[i].split())\n        points.append((x, y, h))\n\n    c_x = 0\n    c_y = 0\n    height = 0\n\n    for x, y, h in points:\n        c_x += x\n        c_y += y\n        height = max(height, h)\n\n    c_x //= n\n    c_y //= n\n    height += 1\n\n    return f\"{c_x} {c_y} {height}\"",
        "test": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\""
    },
    {
        "number": 4115,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    n = len(s)\n    odd = 0\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            odd += 1\n    if n % 2 == 0:\n        return odd\n    else:\n        if s[n // 2] != s[n - 1 - (n // 2)]:\n            return odd + 1\n        else:\n            return odd",
        "test": "assert solution('redcoder') == 1  # Hug 'd' to 'o' and get redooder"
    },
    {
        "number": 4116,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == N:\n                return \"Yes\"\n    return \"No\"",
        "test": "assert solution('10') == 'Yes'"
    },
    {
        "number": 4117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, sticks = stdin.split(\"\\n\")\n    N = int(N)\n    sticks = list(map(int, sticks.split()))\n\n    count = 0\n    for i in range(N-2):\n        for j in range(i+1, N-1):\n            for k in range(j+1, N):\n                if sticks[i] + sticks[j] > sticks[k] and sticks[j] + sticks[k] > sticks[i] and sticks[i] + sticks[k] > sticks[j]:\n                    count += 1\n\n    return str(count)\n\ndef",
        "test": "assert solution('5\\n3 3 3 4 5') == '0'"
    },
    {
        "number": 4118,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    if a == 1:\n        if b == 1:\n            return \"1\"\n        elif b == 2:\n            return \"2\"\n        elif b == 3:\n            return \"3\"\n        elif b == 4:\n            return \"4\"\n        elif b == 5:\n            return \"5\"\n        elif b == 6:\n            return \"6\"\n        elif b == 7:\n            return \"7\"\n        elif b == 8:\n            return \"8\"\n        elif b == 9:\n            return \"9\"\n        else:\n            return \"-1\"\n    elif a == 2:\n        if b == 1:\n            return \"2\"\n        elif b == 2:\n            return \"4\"\n        elif b == 3:\n            return \"6\"\n        elif b == 4:\n            return \"8\"\n        else:\n            return \"-1\"\n    elif a == 3:\n        if b == 1:\n            return \"3\"\n        elif b == 2:\n            return \"6\"\n        elif b == 3:\n            return \"9\"\n        else:\n            return \"-1\"\n    elif a == 4:\n        if b == 1:\n            return \"4\"\n        elif b == 2:\n            return \"8\"\n        else:\n            return \"-1\"\n    elif a == 5:\n        if b == 1:\n            return \"5\"\n        else:\n            return \"-1\"\n    elif a == 6:\n        if b == 1:\n            return \"6\"\n        else:\n            return \"-1\"\n    elif a == 7:\n        if b == 1:\n            return \"7\"\n        else:\n            return \"-1\"\n    elif a == 8:\n        if b == 1:\n            return \"8\"\n        else:\n            return \"-1\"\n    elif a == 9:\n        if b == 1:\n            return \"9\"\n        else:\n            return \"-1\"\n    else:\n        return \"-1\"",
        "test": "assert solution('3 3') == '9'"
    },
    {
        "number": 4119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def find_minimum_moves(pieces, coords):\n        visited = set(pieces)\n        current_piece = None\n        moves = 0\n\n        while len(visited) < len(coords):\n            if current_piece is None:\n                current_piece = pieces[0]\n            new_piece = current_piece + 1\n            if new_piece in visited or new_piece in pieces:\n                new_piece = current_piece - 1\n            if new_piece in visited or new_piece in pieces:\n                return -1\n            visited.add(new_piece)\n            current_piece = new_piece\n            moves += 1\n\n        return moves\n\n    N, M = stdin.split()\n    N, M = int(N), int(M)\n    pieces = list(map(int, stdin.split()[N+1:]))\n    coords = list(map(int, stdin.split()[1:N+1]))\n\n    result = find_minimum_moves(pieces, coords)\n    return str(result)",
        "test": "assert solution(\"3 3\\n10 5 3\") == \"2\\n\""
    },
    {
        "number": 4120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    roads = [tuple(map(int, line.split())) for line in stdin.split('\\n')[2:m+2]]\n    options = []\n\n    def backtrack(index, count, selected):\n        if count == n - 1:\n            options.append(''.join(selected))\n            return\n\n        for i in range(index, m):\n            if roads[i][0] == 1 or roads[i][1] == 1:\n                continue\n            selected[i] = '1'\n            backtrack(i, count + 1, selected)\n            selected[i] = '0'\n\n    backtrack(0, 1, ['0'] * m)\n    return str(len(options)) + '\\n' + '\\n'.join(options)\n",
        "test": "assert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\\n101001\""
    },
    {
        "number": 4121,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    # Check if all parts of the wall have the same height\n    if len(set(a)) == 1:\n        return \"YES\"\n\n    # Check if the wall has no empty spaces inside it\n    for i in range(n - 1):\n        if a[i] + 1 == a[i + 1]:\n            return \"YES\"\n\n    return \"NO\"",
        "test": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\""
    },
    {
        "number": 4122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))[n+1:]\n    \n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return str(i+1)\n    return \"-1\"",
        "test": "assert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\""
    },
    {
        "number": 4123,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    max_count = 0\n    max_two_gram = \"\"\n    \n    for i in range(n-1):\n        two_gram = s[i:i+2]\n        count = 0\n        for j in range(n-1):\n            if s[j:j+2] == two_gram:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_two_gram = two_gram\n    \n    return max_two_gram\n",
        "test": "assert solution(\"7\\nABACABA\") == \"AB\""
    },
    {
        "number": 4124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    if not s and not t:\n        return \"0\"\n    if s == t:\n        return str(len(s) + len(t))\n    if not s:\n        return str(len(t))\n    if not t:\n        return str(len(s))\n    return str(abs(len(s) - len(t)))",
        "test": "assert solution(\"codeforces\\nyes\") == 9"
    },
    {
        "number": 4125,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split()[0:2])\n    coordinates = list(map(int, stdin.split()[2:]))\n\n    coordinates.sort()\n    max_d = 1\n    for i in range(1, len(coordinates)):\n        max_d = max(max_d, abs(coordinates[i] - coordinates[i - 1]))\n\n    return str(max_d)",
        "test": "assert solution(\"10 10\\n2 4 6 8 10 12 14 16 18 20\") == \"2\""
    },
    {
        "number": 4126,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    middle = n // 2\n    if n % 2 == 0 or n < 3 or n > 99:\n        return \"No\"\n    if s[:middle] != s[middle+1:][::-1]:\n        return \"No\"\n    if s[middle+1:] != s[:n-middle-1][::-1]:\n        return \"No\"\n    return \"Yes\"",
        "test": "assert solution(\"akasaka\") == \"Yes\""
    },
    {
        "number": 4127,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    result = a * b\n    result = int(result)  # truncate fractional part\n    return str(result)",
        "test": "assert solution(\"198 1.10\") == \"217\""
    },
    {
        "number": 4128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def count_ways(n: int) -> int:\n        if n == 0 or n == 1:\n            return 1\n        ways = 0\n        for i in range(n // 2 + 1, 0, -1):\n            ways += count_ways(i - 1) * count_ways(n - i)\n        return ways\n\n    def main() -> None:\n        t = int(stdin.readline())\n        for _ in range(t):\n            n = int(stdin.readline())\n            print(count_ways(n))\n\n    main()\n",
        "test": "assert solution(\"6\\n7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\""
    },
    {
        "number": 4129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split()[:3])\n    roads = set()\n    graph = [set() for _ in range(n+1)]\n\n    for _ in range(m):\n        u, v = map(int, stdin.split()[3:])\n        graph[u].add(v)\n        graph[v].add(u)\n        roads.add((min(u, v), max(u, v)))\n\n    visited = [False] * (n+1)\n    queue = [s]\n    visited[s] = True\n\n    while queue:\n        for city in graph[queue.pop(0)]:\n            if not visited[city]:\n                visited[city] = True\n                queue.append(city)\n\n    if all(visited):\n        return \"0\"\n\n    new_roads = 0\n    new_graph = [set() for _ in range(n+1)]\n\n    for u, v in roads:\n        new_graph[u].add(v)\n        new_graph[v].add(u)\n\n    for u in range(1, n+1):\n        for v in range(u+1, n+1):\n            if not new_graph[u] & new_graph[v]:\n                new_roads += 1\n\n    return str(new_roads)\n",
        "test": "assert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\" "
    },
    {
        "number": 4130,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a_str = stdin.split('\\n')\n    n = int(n)\n    a = [int(x) for x in a_str.split()]\n    \n    boxers = set()\n    max_boxers = 0\n    \n    for weight in a:\n        boxers.add(weight)\n        max_boxers = max(max_boxers, len(boxers))\n        \n    return str(max_boxers)",
        "test": "assert solution(\"4\\n3 2 4 1\") == \"4\""
    },
    {
        "number": 4131,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    prefectures = {}\n    for i in range(1, m+1):\n        line = lines[i].split()\n        prefecture, year = map(int, line)\n        if prefecture not in prefectures:\n            prefectures[prefecture] = []\n        prefectures[prefecture].append(year)\n    \n    result = []\n    for i in range(1, n+1):\n        if i not in prefectures:\n            continue\n        prefecture_cities = sorted(prefectures[i])\n        for j, year in enumerate(prefecture_cities, 1):\n            id_number = f\"{i:06d}{j:06d}\"\n            result.append(id_number)\n    \n    return \"\\n\".join(result)",
        "test": "assert solution('1 1\\n1 32') == '000001000001'"
    },
    {
        "number": 4132,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    healths = [int(x) for x in lines[1].split()]\n\n    # If only one monster is left, return its health\n    if N == 1:\n        return str(healths[0])\n\n    # Calculate the total health of the monsters\n    total_health = sum(healths)\n\n    # Calculate the minimum possible final health of the last monster\n    min_final_health = max(healths)\n    for health in healths:\n        if health < min_final_health:\n            min_final_health = health\n\n    return str(min_final_health)",
        "test": "assert solution(\"1\\n1\") == \"1\""
    },
    {
        "number": 4133,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    jaws = {}\n    stomach = []\n    diet = []\n\n    for i, char in enumerate(stdin):\n        if char in ('+', '-', '*', '/'):\n            jaws[i] = char\n        elif char in ('_', '?', ':', '>'):\n            diet.append(char)\n        elif char in ('<', ','):\n            diet.append(char)\n            stomach.append(int(stdin[i-1]) if i > 0 and stdin[i-1] in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9') else 0)\n\n    if not diet or len(diet) % 2 != 0:\n        return \"false\"\n\n    for i in range(len(diet) - 2, -1, -2):\n        if diet[i] == '>' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == '>':\n            stomach[-1] += int(stdin[jaws[list(jaws.keys())[len(stomach)]]])\n        elif diet[i] == ',' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == ',':\n            stomach.append(int(stdin[jaws[list(jaws.keys())[len(stomach)]]]) if len(jaws) > len(stomach) else 0)\n        elif diet[i] == '<' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == '<':\n            stomach.pop()\n        elif diet[i] == '+' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == '+':\n            stomach[-1] += stomach[-2]\n        elif diet[i] == '-' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == '-':\n            stomach[-1] -= stomach[-2]\n        elif diet[i] == '*' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == '*':\n            stomach[-1] *= stomach[-2]\n        elif diet[i] == '/' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == '/':\n            stomach[-1] //= stomach[-2]\n        else:\n            return \"false\"\n\n    if len(stomach) != len(jaws):\n        return \"false\"\n\n    return ''.join(str(x) for x in stomach)",
        "test": "assert solution(\"?(__-_+_/_____):-__>__,_____<__.\") == \"false\""
    },
    {
        "number": 4134,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(path, k):\n        xor = 0\n        for num in path:\n            xor ^= num\n        return xor == k\n\n    def backtrack(i, j, k):\n        if i == n and j == m:\n            if is_valid(path, k):\n                return 1\n            else:\n                return 0\n\n        if i < n:\n            path.append(a[i][j])\n            count = backtrack(i + 1, j, k)\n            path.pop()\n            if count > 0:\n                return count\n\n        if j < m:\n            path.append(a[i][j])\n            count = backtrack(i, j + 1, k)\n            path.pop()\n            if count > 0:\n                return count\n\n        return 0\n\n    n, m, k = map(int, stdin.split()[:3])\n    a = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:n+1]]\n    path = []\n    return str(backtrack(0, 0, k))",
        "test": "assert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"5\\n\""
    },
    {
        "number": 4135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split()\n    n = int(n)\n    \n    for d in range(n, 0, -1):\n        if n % d == 0:\n            substring = t[:d]\n            reversed_substring = substring[::-1]\n            t = reversed_substring + t[d:]\n            break\n    \n    return t",
        "test": "assert solution(\"16\\nplmaetwoxesisiht\\n\") == \"thisisexampletwo\""
    },
    {
        "number": 4136,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)",
        "test": "assert solution(\"5 14\") == \"19\""
    },
    {
        "number": 4137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    operators = {'+': lambda a, b: a + b, '-': lambda a, b: a - b}\n\n    for c in stdin:\n        if c.isdigit():\n            stack.append(int(c))\n        elif c in operators:\n            if len(stack) < 2:\n                raise ValueError(\"Invalid expression\")\n            b = stack.pop()\n            a = stack.pop()\n            result = operators[c](a, b)\n            stack.append(result)\n\n    if len(stack) != 1:\n        raise ValueError(\"Invalid expression\")\n\n    output = \"\"\n    for i in range(30000):\n        output += \">\"\n\n    output += \"<\"\n\n    for i in range(256):\n        output += \"+\" if i < stack[0] else \"-\"\n        output += \">\"\n\n    output += \"[\"\n\n    for i in range(256):\n        output += \"<\" if i < stack[0] else \"\"\n        output += \"+\" if i < stack[0] else \"-\"\n        output += \">\"\n\n    output += \"]\"\n\n    output += \".\"\n\n    return output\n\n\ndef",
        "test": "assert solution(\"9-7\") == \"+++++++++>+++++++><[<->-]<+++++++++++++++++++++++++++++++++++++++++++++++++\" "
    },
    {
        "number": 4138,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split(\"\\n\")[0])\n    sequence = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    result = []\n    \n    for _ in range(queries):\n        k = int(stdin.split(\"\\n\")[1])\n        index = 0\n        \n        for i in range(1, k + 1):\n            index += i\n        \n        result.append(str(sequence[index % 10]))\n        \n    return \"\\n\".join(result)\n\ndef",
        "test": "assert solution(\"4\\n2132\\n506\\n999999999999999999\\n1000000000000000000\\n\") == \"8\\n2\\n4\\n1\\n\" "
    },
    {
        "number": 4139,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n\n    for num in range(1, N + 1):\n        if (\n            \"7\" in str(num)\n            and \"5\" in str(num)\n            and \"3\" in str(num)\n        ):\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"575\") == \"4\""
    },
    {
        "number": 4140,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i] == s[i+1]:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"111\") == \"2\""
    },
    {
        "number": 4141,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = [int(x) for x in stdin.split()[1:]]\n    even_numbers = [x for x in input_list if x % 2 == 0]\n    should_allow_entry = all(x % 3 == 0 or x % 5 == 0 for x in even_numbers)\n    return \"APPROVED\" if should_allow_entry else \"DENIED\"",
        "test": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\""
    },
    {
        "number": 4142,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    for i in range(len(S)):\n        if i % 2 == 0 and S[i] not in [\"L\", \"U\", \"D\"]:\n            return \"No\"\n        elif i % 2 == 1 and S[i] not in [\"R\", \"U\", \"D\"]:\n            return \"No\"\n    return \"Yes\"",
        "test": "assert solution(\"RUDLUDRRR\") == \"No\""
    },
    {
        "number": 4143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    \n    # Initialize the number of people at each city\n    city1 = N\n    city2 = 0\n    city3 = 0\n    city4 = 0\n    city5 = 0\n    city6 = 0\n    \n    # Initialize the number of vehicles at each city\n    train = A\n    bus = B\n    taxi = C\n    airplane = D\n    ship = E\n    \n    time = 0\n    \n    # While there are still people at City 1, continue to distribute the vehicles\n    while city1 > 0:\n        time += 1\n        \n        # Distribute the train vehicles\n        if train > 0 and city1 > 0:\n            # Calculate the number of people who can travel by train\n            train_capacity = min(train, city1)\n            \n            # Update the number of people at each city\n            city1 -= train_capacity\n            city2 += train_capacity\n            \n            # Update the number of train vehicles\n            train -= 1\n        \n        # Distribute the bus vehicles\n        if bus > 0 and city2 > 0:\n            # Calculate the number of people who can travel by bus\n            bus_capacity = min(bus, city2)\n            \n            # Update the number of people at each city\n            city2 -= bus_capacity\n            city3 += bus_capacity\n            \n            # Update the number of bus vehicles\n            bus -= 1\n        \n        # Distribute the taxi vehicles\n        if taxi > 0 and city3 > 0:\n            # Calculate the number of people who can travel by taxi\n            taxi_capacity = min(taxi, city3)\n            \n            # Update the number of people at each city\n            city3 -= taxi_capacity\n            city4 += taxi_capacity\n            \n            # Update the number of taxi vehicles\n            taxi -= 1\n        \n        # Distribute the airplane vehicles\n        if airplane > 0 and city4 > 0:\n            # Calculate the number of people who can travel by airplane\n            airplane_capacity = min(airplane, city4)\n            \n            # Update the number of people at each city\n            city4 -= airplane_capacity\n            city5 += airplane_capacity\n            \n            # Update the number of airplane vehicles\n            airplane -= 1\n        \n        # Distribute the ship vehicles\n        if ship > 0 and city5 > 0:\n            # Calculate the number of people who can travel by ship\n            ship_capacity = min(ship, city5)\n            \n            # Update the number of people at each city\n            city5 -= ship_capacity\n            city6 += ship_capacity\n            \n            # Update the number of ship vehicles\n            ship -= 1\n    \n    return str(time)",
        "test": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7' "
    },
    {
        "number": 4144,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    for i in range(10**N):\n        binary = format(i, f'0{N}b')\n        if '0' in binary and '9' in binary:\n            count += 1\n    return str(count % (10**9 + 7))\n\ninput_str = input()\nprint(solution(input_str))",
        "test": "assert solution(\"2\") == \"2\""
    },
    {
        "number": 4145,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def find_next_prime(num: int) -> int:\n        while True:\n            num += 1\n            if is_prime(num):\n                return num\n\n    next_prime = find_next_prime(X)\n    return str(next_prime)",
        "test": "assert solution(stdin=\"20\") == \"23\""
    },
    {
        "number": 4146,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *sequence = map(int, stdin.split())\n\n    # Check if sequence is already /\\/\\/\\/\n    if all(sequence[i] == sequence[i + 2] for i in range(0, n - 2, 2)):\n        return str(0)\n\n    # Count the occurrences of each number in the sequence\n    count = {}\n    for num in sequence:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # If there are more than 2 different numbers, it's not possible to make it /\\/\\/\\/\n    if len(count) > 2:\n        return str(-1)\n\n    # Find the index of the elements that need to be replaced\n    to_replace = []\n    for i in range(0, n - 2, 2):\n        if sequence[i] != sequence[i + 2]:\n            to_replace.append(i)\n\n    # Return the number of elements that need to be replaced\n    return str(len(to_replace))",
        "test": "assert solution(\"6\\n1 2 1 2 1 2\") == \"0\""
    },
    {
        "number": 4147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, A, B, C = map(int, lines[0].split())\n    l_arr = list(map(int, lines[1:]))\n\n    def magics(mp: int, l: int, m: int) -> int:\n        if m == 1:\n            return max(0, l - 1)\n        elif m == 2:\n            return l + 1\n        else:\n            return l + max(0, l - 1)\n\n    # Sort the bamboos in descending order\n    l_arr.sort(reverse=True)\n\n    # Use the magics to obtain the three bamboos of lengths A, B, C\n    mp_used = 0\n    for l in l_arr:\n        if l >= C:\n            continue\n        mp_used += magics(mp_used, l, 1)\n        if mp_used >= 10:\n            mp_used += magics(mp_used, l, 2)\n            mp_used += magics(mp_used, A - l, 2)\n            break\n\n    return str(mp_used)",
        "test": "assert solution(\"4 200 150 100\\n210\\n100\\n50\\n50\") == \"40\""
    },
    {
        "number": 4148,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    shifted_string = \"\"\n\n    for char in S:\n        if char.isalpha():\n            shifted_char = chr(((ord(char) - 65 + N) % 26) + 65)\n        else:\n            shifted_char = char\n        shifted_string += shifted_char\n\n    return shifted_string\n",
        "test": "assert solution(\"2\\nABCXYZ\") == \"CDEZAB\" "
    },
    {
        "number": 4149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    b = [int(x) for x in lines[1].split()]\n\n    a = []\n    for i in range(n):\n        if is_prime(b[2*i]):\n            p = b[2*i]\n            for j in range(i+1, n):\n                if b[2*j] == p:\n                    a.append(b[2*i])\n                    break\n        else:\n            for j in range(i+1, n):\n                if b[2*j] % b[2*i] == 0 and b[2*j] != b[2*i]:\n                    a.append(b[2*i])\n                    break\n\n    a = sorted(a)\n    return \" \".join(map(str, a))\n\ndef",
        "test": "assert solution(\"1\\n2750131 199999\\n\") == \"199999\""
    },
    {
        "number": 4150,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    skills = list(map(int, stdin.split()[2:]))\n    skills.sort()\n    students = [False] * n\n    teams = [''] * n\n\n    def choose_students(students: list, skills: list, k: int) -> list:\n        result = []\n        left, right = 0, len(skills) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if skills[mid] <= k:\n                result.append(mid)\n                left = mid + 1\n            else:\n                right = mid - 1\n        return result\n\n    for i in range(n):\n        if not students[i]:\n            first_choices = choose_students(students, skills, skills[i])\n            second_choices = choose_students(students, skills, n - skills[i])\n            for j in first_choices:\n                teams[j] = '1'\n                students[j] = True\n            for j in second_choices:\n                teams[j] = '2'\n                students[j] = True\n\n    return ''.join(teams)",
        "test": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\""
    },
    {
        "number": 4151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    if n == 2:\n        return \"2\"\n\n    count = 0\n    for i in range(n):\n        count += count_monotonic_renumerations(a, i, i + 1)\n\n    return str(count % 998244353)\n\n\ndef",
        "test": "assert solution('2\\n100 1\\n') == '2\\n'"
    },
    {
        "number": 4152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    def is_good(seq: list) -> bool:\n        for i in range(len(seq)):\n            for j in range(len(seq)):\n                if i != j and 2**x == seq[i] + seq[j]:\n                    return True\n        return False\n    \n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i != j and 2**x == a[i] + a[j]:\n                a[i] = 0\n                a[j] = 0\n    \n    return str(len(a) - len(list(filter(lambda x: x != 0, a)))))",
        "test": "assert solution(\"5\\n1 2 3 4 5\") == \"2\""
    },
    {
        "number": 4153,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    red_count = stdin.count('0')\n    blue_count = stdin.count('1')\n\n    if red_count <= blue_count:\n        return str(red_count)\n    else:\n        return str(blue_count)",
        "test": "assert solution(\"0101\") == \"2\""
    },
    {
        "number": 4154,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    gates = []\n    for _ in range(M):\n        gates.append(tuple(map(int, input().split())))\n    \n    count = 0\n    for i in range(1, N+1):\n        if all(i >= L_i-1 and i <= R_i-1 for L_i, R_i in gates):\n            count += 1\n    \n    return str(count)",
        "test": "assert solution(\"5 1\\n3 3\") == \"2\""
    },
    {
        "number": 4155,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, h_str = stdin.strip().split('\\n')\n    n = int(n)\n    h = list(map(int, h_str.strip().split()))\n    min_ops = 0\n    prev_h = 0\n    for i in range(n):\n        if h[i] > prev_h:\n            min_ops += h[i] - prev_h\n            prev_h = h[i]\n    return str(min_ops)",
        "test": "assert solution(\"4\\n1 2 2 1\") == \"2\""
    },
    {
        "number": 4156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def possible_ways(n: int, w: int, a: List[int]) -> int:\n        if n == 0:\n            return 1 if w >= 0 else 0\n\n        ways = 0\n        for x in range(min(w, -a[n - 1]) + 1):\n            ways += possible_ways(n - 1, w - x, a)\n\n        return ways\n\n    return str(possible_ways(n, w, a))",
        "test": "assert solution(\"2 4\\n-1 1\") == \"4\\n\""
    },
    {
        "number": 4157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    seq = list(map(int, stdin.split('\\n')[1].split()))\n    \n    def is_valid(x: int, seq: List[int]) -> bool:\n        if len(seq) == 1:\n            return True\n        if seq[0] == x * 3:\n            return is_valid(x * 3, seq[1:])\n        if seq[0] == x * 2:\n            return is_valid(x * 2, seq[1:])\n        return False\n    \n    for i in range(n):\n        if is_valid(seq[i], seq[i+1:]):\n            return \" \".join(map(str, seq[:i+1][::-1]))\n    return \"No solution exists.\" ",
        "test": "assert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\""
    },
    {
        "number": 4158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, points = stdin.splitlines()\n    n = int(n)\n    points = [int(x) for x in points.split()]\n    \n    points.sort()\n    max_size = 0\n    subset = []\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            distance = points[j] - points[i]\n            power_of_two = 0\n            while distance > 0:\n                if distance % 2 == 1:\n                    break\n                power_of_two += 1\n                distance //= 2\n            if distance == 0:\n                if j - i > max_size:\n                    max_size = j - i\n                    subset = points[i:j+1]\n                    \n    return str(max_size) + \"\\n\" + \" \".join(map(str, subset))\n\ndef",
        "test": "assert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\""
    },
    {
        "number": 4159,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    takahashi_cookies = A\n    aoki_cookies = B\n\n    for _ in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n\n    return f\"{takahashi_cookies} {aoki_cookies}\"",
        "test": "assert solution(\"2 3 3\") == \"0 2\""
    },
    {
        "number": 4160,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    balance = 100\n    years = 0\n    \n    while balance < X:\n        balance += balance * 0.01\n        years += 1\n        \n    return str(years)",
        "test": "assert solution('103') == '3'"
    },
    {
        "number": 4161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    result = 0\n    \n    for a in range(1, k+1):\n        for b in range(1, k+1):\n            for c in range(1, k+1):\n                result += gcd(a, b, c)\n                \n    return str(result)\n\ndef",
        "test": "assert solution('200\\n') == '718200'"
    },
    {
        "number": 4162,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    f = lambda m: sum(m % ai for ai in a)\n\n    max_f = -1\n    for i in range(1, 10**6):\n        if f(i) > max_f:\n            max_f = f(i)\n\n    return str(max_f)",
        "test": "assert solution('3\\n3 4 6') == '10'  # should pass"
    },
    {
        "number": 4163,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    dice_rolls = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    doublet_count = 0\n    for i in range(n - 2):\n        if (dice_rolls[i][0] == dice_rolls[i][1] and\n            dice_rolls[i + 1][0] == dice_rolls[i + 1][1] and\n            dice_rolls[i + 2][0] == dice_rolls[i + 2][1]):\n            doublet_count += 1\n            if doublet_count >= 3:\n                return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n2 1\") == \"No\""
    },
    {
        "number": 4164,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    pi = 3.141592653589793\n    area_r = pi * r ** 2\n    area_1 = pi * 1 ** 2\n    result = area_r / area_1\n    return str(int(result))",
        "test": "assert solution(\"1\") == \"1\""
    },
    {
        "number": 4165,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    sides = [int(x) for x in lines[1].split()]\n\n    max_side = max(sides)\n    sum_other_sides = sum(sides) - max_side\n\n    if max_side < sum_other_sides:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"4\\n3 8 5 1\") == \"Yes\""
    },
    {
        "number": 4166,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    inputs = stdin.splitlines()\n    N, M = map(int, inputs[0].split())\n    constraints = [tuple(map(int, line.split())) for line in inputs[1:]]\n\n    # Generate all possible integers with N digits\n    min_integer = 10**(N-1)\n    max_integer = 10**N - 1\n    possible_integers = range(min_integer, max_integer + 1)\n\n    # Check if any integer satisfies the constraints\n    for integer in possible_integers:\n        # Convert integer to string\n        integer_str = str(integer)\n\n        # Check if all constraints are satisfied\n        satisfied = True\n        for s_i, c_i in constraints:\n            if integer_str[N - s_i] != str(c_i):\n                satisfied = False\n                break\n\n        # If all constraints are satisfied, return the smallest such integer\n        if satisfied:\n            return str(integer)\n\n    # No integer satisfies the constraints, return -1\n    return \"-1\"",
        "test": "assert solution(\"2 2\\n2 5\\n2 6\") == \"-1\""
    },
    {
        "number": 4167,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            for c in range(1, N + 1):\n                if (a + b) % K == 0 and (b + c) % K == 0 and (c + a) % K == 0:\n                    count += 1\n    return str(count)",
        "test": "assert solution(\"3 2\") == \"9\""
    },
    {
        "number": 4168,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    elif N < 0:\n        N = abs(N)\n        res = \"1\"\n    else:\n        res = \"\"\n\n    while N > 0:\n        if N % 2 == 1:\n            res = \"1\" + res\n            N -= 1\n        else:\n            res = \"0\" + res\n        N //= 2\n\n    return res\n",
        "test": "assert solution('0') == '0'"
    },
    {
        "number": 4169,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    prices = [list(map(int, input().split())) for _ in range(N)]\n    prices.sort(key=lambda x: x[1] / x[0])  # Sort by price per can\n    cans_bought = 0\n    total_cost = 0\n    for price in prices:\n        cans_to_buy = min(M - cans_bought, price[1])\n        total_cost += cans_to_buy * price[0]\n        cans_bought += cans_to_buy\n        if cans_bought == M:\n            break\n    return str(total_cost)",
        "test": "assert solution(\"2 5\\n4 9\\n2 4\\n\") == \"12\""
    },
    {
        "number": 4170,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *heights = map(int, stdin.split())\n    max_moves = 0\n    current_square = 0\n    \n    for i in range(1, n):\n        if heights[i] <= heights[current_square]:\n            max_moves += 1\n            current_square = i\n            \n    return str(max_moves)",
        "test": "assert solution(\"5\\n10 4 8 7 3\") == \"2\" "
    },
    {
        "number": 4171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    min_operations = float('inf')\n    for target_value in range(1, max(a) + 1):\n        operations = 0\n        for value in a:\n            operations += value // target_value\n\n        if operations >= k:\n            min_operations = min(min_operations, operations)\n\n    return str(min_operations)\n\ninput_data = \"5 3\\n1 2 2 4 5\"\nprint(solution(input_data))  # Output: 1\n\ninput_data = \"5 3\\n1 2 3 4 5\"\nprint(solution(input_data))  # Output: 2\n\ninput_data = \"5 3\\n1 2 3 3 3\"\nprint(solution(input_data))  # Output: 0 ",
        "test": "assert solution(\"5 3\\n1 2 3 4 5\\n\") == \"2\""
    },
    {
        "number": 4172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    a.sort()\n    min_moves = 0\n\n    for i in range(n):\n        if a[i] == a[i + 1]:\n            min_moves += 1\n        else:\n            break\n\n    if min_moves >= k:\n        return str(min_moves)\n\n    max_moves = n - min_moves\n    target_moves = k - min_moves\n    if target_moves > max_moves:\n        return \"Impossible\"\n    return str(min_moves + target_moves)",
        "test": "assert solution(\"7 5\\n3 3 2 1 1 1 3\\n\") == \"4\" "
    },
    {
        "number": 4173,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = []\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n\n    for i in range(1, q+1):\n        n, a, b = map(int, lines[i].split())\n        queries.append((n, a, b))\n\n    def min_cost(n: int, a: int, b: int) -> int:\n        if n <= 2:\n            return n * min(a, b)\n\n        bottles_1 = n // 2\n        bottles_2 = n - bottles_1\n        return bottles_1 * a + bottles_2 * b\n\n    result = [min_cost(n, a, b) for n, a, b in queries]\n    return '\\n'.join(map(str, result))\n\nstdin = \"\"\"4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\"\"\"\nprint(solution(stdin)) ",
        "test": "assert solution('''4"
    },
    {
        "number": 4174,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split()[0:2])\n    l = list(map(int, stdin.split()[2:]))\n    \n    bounces = [0] * (n + 1)\n    bounces[0] = 0\n    \n    for i in range(1, n + 1):\n        bounces[i] = bounces[i - 1] + l[i - 1]\n    \n    count = 0\n    for b in bounces:\n        if b <= x:\n            count += 1\n    \n    return str(count)",
        "test": "assert solution(\"3 6\\n3 4 5\") == \"2\""
    },
    {
        "number": 4175,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(\"\\n\")\n    if len(words) < 2:\n        return \"No\"\n    \n    n = int(words[0])\n    if n < 2 or n > 100:\n        return \"No\"\n    \n    last_char = \"\"\n    word_set = set()\n    \n    for i in range(1, n+1):\n        word = words[i]\n        if not word.isalpha() or not word.islower() or not (1 <= len(word) <= 10):\n            return \"No\"\n        \n        if word in word_set:\n            return \"No\"\n        \n        if i == 1:\n            last_char = word[-1]\n        else:\n            if word[0] != last_char:\n                return \"No\"\n            \n            last_char = word[-1]\n        \n        word_set.add(word)\n    \n    return \"Yes\"",
        "test": "assert solution(\"3\\nhoge\\nhoge\\ngo\") == \"No\""
    },
    {
        "number": 4176,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        raise ValueError(\"A and B cannot be the same value\")\n    pieces = max(a, b) * 2\n    return str(pieces)",
        "test": "assert solution(\"2 3\") == \"6\""
    },
    {
        "number": 4177,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(\"x\" for _ in stdin)",
        "test": "assert solution(\"sardine\") == \"xxxxxxx\"  # should pass"
    },
    {
        "number": 4178,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = map(int, stdin.split())\n    for i in range(1, N):\n        if H[i] < H[i-1]:\n            H[i-1] -= 1\n    if all(H[i] <= H[i-1] for i in range(1, N)):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"5\\n1 3 1 2 3\") == \"No\""
    },
    {
        "number": 4179,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, M, C = map(int, lines[0].split())\n    B = list(map(int, lines[1].split()))\n    A = [list(map(int, line.split())) for line in lines[2:]]\n\n    correct_codes = 0\n    for a in A:\n        if sum(b * a_i for b, a_i in zip(B, a)) + C > 0:\n            correct_codes += 1\n\n    return str(correct_codes)",
        "test": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\""
    },
    {
        "number": 4180,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    bills = [1000, 500, 100, 50, 10, 5, 1]\n    change = 0\n\n    for bill in bills:\n        while N >= bill:\n            change += bill\n            N -= bill\n\n    return str(change)",
        "test": "assert solution(\"5000\") == \"5000\""
    },
    {
        "number": 4181,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    \n    total_monsters = sum(A)\n    heroes_used = [False] * N\n    max_monsters = 0\n    \n    for i in range(N):\n        if not heroes_used[i]:\n            monsters_defeated = min(total_monsters, B[i])\n            max_monsters += monsters_defeated\n            total_monsters -= monsters_defeated\n            heroes_used[i] = True\n            if i + 1 < N and not heroes_used[i + 1]:\n                monsters_defeated = min(total_monsters, B[i + 1])\n                max_monsters += monsters_defeated\n                total_monsters -= monsters_defeated\n                heroes_used[i + 1] = True\n    \n    return str(max_monsters)",
        "test": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\""
    },
    {
        "number": 4182,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.split(\"\\n\")\n    N, M, X, Y = [int(x) for x in lines[0].split()]\n    x = [int(x) for x in lines[1].split()]\n    y = [int(x) for x in lines[2].split()]\n\n    # Check if war will break out\n    Z = X\n    while Z <= Y:\n        if Z not in x and Z not in y:\n            break\n        Z += 1\n\n    if Z > Y:\n        return \"War\"\n    else:\n        return \"No War\"",
        "test": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\""
    },
    {
        "number": 4183,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    num_clocks = int(input_lines[0])\n    clock_times = [int(time) for time in input_lines[1:]]\n\n    lcm = min(clock_times)\n    for time in clock_times:\n        lcm = lcm * time // math.gcd(lcm, time)\n\n    return str(lcm)",
        "test": "assert solution(\"2\\n2\\n3\") == \"6\""
    },
    {
        "number": 4184,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split(\"\\n\")[0])\n    weights = list(map(int, stdin.strip().split(\"\\n\")[1].split()))\n\n    min_difference = float('inf')\n    for t in range(1, N):\n        s1 = sum(weights[:t])\n        s2 = sum(weights[t:])\n        difference = abs(s1 - s2)\n        if difference < min_difference:\n            min_difference = difference\n\n    return str(min_difference)",
        "test": "assert solution(\"3\\n1 2 3\") == \"0\""
    },
    {
        "number": 4185,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    matrix = [list(map(int, lines[i].split())) for i in range(1, n+1)]\n    min_moves = 0\n    \n    for i in range(1, m+1):\n        column = [matrix[j][i-1] for j in range(n)]\n        sorted_column = sorted(column)\n        moves = sum(abs(column.index(x) - sorted_column.index(x)) for x in column)\n        min_moves += moves\n    \n        # Cyclic shift the column\n        column[0], column[-1] = column[-1], column[0]\n        for i in range(1, n):\n            matrix[i-1][m-1], matrix[i][m-1] = matrix[i][m-1], matrix[i-1][m-1]\n    \n    return str(min_moves)",
        "test": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\""
    },
    {
        "number": 4186,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    skills = list(map(int, stdin.split()[1:]))\n\n    def can_form_team(skill1, skill2):\n        return skill1 == skill2\n\n    def find_team(teams, skill):\n        for team in teams:\n            if can_form_team(team[0], skill):\n                team[0] = skill\n                return True\n        return False\n\n    def min_problems_to_form_teams(n, skills):\n        teams = [[skills[i], i] for i in range(n)]\n        teams.sort(key=lambda x: x[0])\n\n        total_problems = 0\n        for i in range(n // 2):\n            while not find_team(teams, skills[i + n // 2]):\n                total_problems += 1\n\n        return total_problems\n\n    return str(min_problems_to_form_teams(n, skills))",
        "test": "assert solution(\"2\\n1 100\") == \"99\""
    },
    {
        "number": 4187,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    schedule = stdin.split('\\n')[1].split(' ')\n    current_rest = 0\n    max_rest = 0\n\n    for hour in schedule:\n        if hour == '1':\n            current_rest += 1\n        else:\n            max_rest = max(max_rest, current_rest)\n            current_rest = 0\n\n    return str(max_rest)",
        "test": "assert solution('6\\n0 1 0 1 1 0') == '2'"
    },
    {
        "number": 4188,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    facts = {\n        1: 8848,\n        2: 958,\n        3: 12766,\n        4: 6695,\n        5: 1100,\n        6: 807,\n        7: 0,\n        8: 146,\n        9: 31962,\n        10: 134,\n        11: 10000,\n        12: 663268,\n        13: 154103,\n        14: 1642,\n        15: 106,\n        16: 177\n    }\n    return str(facts[int(stdin)])\n",
        "test": "assert solution(7) == 0"
    },
    {
        "number": 4189,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    num_cheeses = int(stdin.split('\\n')[0])\n    cheese_types = {}\n    for line in stdin.split('\\n')[1:]:\n        if not line:\n            continue\n        cheese_name, cheese_type = line.split()\n        cheese_types[cheese_name] = cheese_type\n\n    soft_cheese_count = 0\n    hard_cheese_count = 0\n    for cheese_type in set(cheese_types.values()):\n        if cheese_type == 'soft':\n            soft_cheese_count += 1\n        else:\n            hard_cheese_count += 1\n\n    return min(soft_cheese_count, hard_cheese_count)",
        "test": "assert solution(\"1\\nedam soft\") == \"1\""
    },
    {
        "number": 4190,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    \n    def get_c(a: list, b: list) -> list:\n        return [(a[i] + b[i]) % n for i in range(n)]\n    \n    def is_lexicographically_minimum(c: list) -> bool:\n        for i in range(1, n):\n            if c[i] < c[i-1]:\n                return False\n        return True\n    \n    def reorder_b(b: list) -> list:\n        b_sorted = sorted(b)\n        index_map = {}\n        for i in range(n):\n            index_map[b_sorted[i]] = i\n        return [index_map[b[i]] for i in range(n)]\n    \n    b_reordered = reorder_b(b)\n    c_min = get_c(a, b_reordered)\n    while not is_lexicographically_minimum(c_min):\n        b_reordered = reorder_b(b_reordered)\n        c_min = get_c(a, b_reordered)\n    \n    return \" \".join(map(str, c_min))",
        "test": "assert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\\n\" "
    },
    {
        "number": 4191,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split(\"\\n\")\n    binary = \"\"\n    for row in rows:\n        binary += row\n    decimal = int(binary, 2)\n    return str(decimal % 2)\n\ninput_str = \"\"\"0\n1\n1\n0\"\"\"\n\noutput_str = solution(input_str)\nprint(output_str) ",
        "test": "assert solution(\"0\\n1\\n1\\n0\") == \"0\""
    },
    {
        "number": 4192,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    time_to_travel = D / S\n\n    if time_to_travel <= T:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1000 15 80\") == \"Yes\""
    },
    {
        "number": 4193,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def check_bingo(matrix, row, col, n, bingo_numbers):\n        # Check row\n        row_bingo = True\n        for j in range(col, col + n):\n            if matrix[row][j] not in bingo_numbers:\n                row_bingo = False\n                break\n        if row_bingo:\n            return True\n\n        # Check column\n        col_bingo = True\n        for i in range(row, row + n):\n            if matrix[i][col] not in bingo_numbers:\n                col_bingo = False\n                break\n        if col_bingo:\n            return True\n\n        # Check diagonal\n        diag_bingo = True\n        for i in range(row, row + n):\n            j = col + (i - row)\n            if matrix[i][j] not in bingo_numbers:\n                diag_bingo = False\n                break\n        if diag_bingo:\n            return True\n\n        # Check anti-diagonal\n        anti_diag_bingo = True\n        for i in range(row, row + n):\n            j = col - (i - row)\n            if matrix[i][j] not in bingo_numbers:\n                anti_diag_bingo = False\n                break\n        if anti_diag_bingo:\n            return True\n\n        return False\n\n    lines = stdin.splitlines()\n    matrix = [[int(x) for x in line.split()] for line in lines[:3]]\n    bingo_numbers = [int(x) for x in lines[4:]]\n\n    for row in range(3):\n        for col in range(3):\n            if check_bingo(matrix, row, col, 3, bingo_numbers):\n                return \"Yes\"\n\n    return \"No\"",
        "test": "assert solution(\"1 2 3\\n4 5 6\\n7 8 9\\n3\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\") == \"Yes\""
    },
    {
        "number": 4194,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    assignments = list(map(int, stdin.split()[2:]))\n    \n    assignments.sort()\n    \n    total_days = sum(assignments)\n    \n    if total_days > N:\n        return -1\n    \n    days_left = N - total_days\n    max_hangout = 0\n    \n    for i in range(1, len(assignments)):\n        prev_assignment = assignments[i-1]\n        current_assignment = assignments[i]\n        days_between = current_assignment - prev_assignment\n        \n        if days_between > days_left:\n            max_hangout = days_left\n            break\n        else:\n            days_left -= days_between\n            max_hangout += days_between\n    \n    return str(max_hangout)",
        "test": "assert solution(\"4 3\\n2 3 4\") == \"5\""
    },
    {
        "number": 4195,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str(N)\n    else:\n        count = 0\n        for i in range(1, 10000):\n            for j in range(D+1):\n                if i % (100 * (j+1)) == 0:\n                    count += 1\n                    if count == N:\n                        return str(i)",
        "test": "assert solution(\"0 5\") == \"5\""
    },
    {
        "number": 4196,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *blackboard = stdin.split()\n    n = int(n)\n    blackboard = [int(x) for x in blackboard]\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def replace_max_gcd(blackboard):\n        max_gcd = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                new_gcd = gcd(blackboard[i], blackboard[j])\n                if new_gcd > max_gcd:\n                    max_gcd = new_gcd\n        return max_gcd\n\n    max_gcd = replace_max_gcd(blackboard)\n\n    return str(max_gcd)",
        "test": "assert solution(\"3\\n7 6 8\") == \"2\""
    },
    {
        "number": 4197,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    a_list = [int(x) for x in lines[1].split()]\n    \n    a_dict = {}\n    for i in range(n):\n        a_dict[a_list[i]] = i + 1\n    \n    result = []\n    for i in range(n):\n        result.append(a_dict[i+1])\n    \n    return \" \".join(map(str, result))",
        "test": "assert solution(\"3\\n2 3 1\") == \"3 1 2\""
    },
    {
        "number": 4198,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_integer = 0\n\n    for i in range(1, 10**9 + 1):\n        price = A * i + B * len(str(i))\n        if price <= X:\n            max_integer = max(max_integer, i)\n        else:\n            break\n\n    return str(max_integer)",
        "test": "assert solution(\"10 7 100\") == \"9\""
    },
    {
        "number": 4199,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    heights = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for height in heights:\n        if height >= k:\n            count += 1\n\n    return str(count)",
        "test": "assert solution('4 150\\n150 140 100 200') == '2'"
    },
    {
        "number": 4200,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    votes = list(map(int, stdin.split()[2:]))\n    total_votes = sum(votes)\n    min_vote_threshold = total_votes // (4 * m)\n\n    popular_items = [i for i, vote in enumerate(votes) if vote >= min_vote_threshold]\n\n    if len(popular_items) >= m:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\""
    },
    {
        "number": 4201,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    H, W, K = map(int, stdin.split()[:3])\n    grid = stdin.split(\"\\n\")[1:]\n\n    # Create a helper function to count the black squares in a grid\n    def count_black_squares(grid: List[str]) -> int:\n        count = 0\n        for row in grid:\n            count += row.count(\"#\")\n        return count\n\n    # Initialize variables\n    choices = 0\n    rows = [False] * H\n    cols = [False] * W\n\n    # Iterate through all possible choices\n    for i in range(H+1):\n        for j in range(W+1):\n            # Choose i rows and j columns\n            for k in range(i):\n                rows[k] = True\n            for k in range(j):\n                cols[k] = True\n\n            # Count the black squares in the remaining grid\n            remaining_grid = [\n                [cell for cell, col in zip(row, cols) if not col]\n                for row, row_in_grid in zip(grid, rows)\n                if not row_in_grid\n            ]\n            black_squares = count_black_squares(remaining_grid)\n\n            # Check if the number of black squares is equal to K\n            if black_squares == K:\n                choices += 1\n\n            # Unchoose the rows and columns\n            for k in range(i):\n                rows[k] = False\n            for k in range(j):\n                cols[k] = False\n\n    return str(choices)",
        "test": "assert solution(\"4 4 6\\n####\\n.#..\\n.#..\\n#..#\") == \"1\""
    },
    {
        "number": 4202,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    min_product = float('inf')\n    for i in range(L, R):\n        for j in range(i+1, R+1):\n            product = (i * j) % 2019\n            if product < min_product:\n                min_product = product\n    return str(min_product)",
        "test": "assert solution(\"2020 2040\") == \"2\""
    },
    {
        "number": 4203,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if not (S[0] == 'A' and S.count('C') == 1 and all(c.islower() for c in S[3:-1])):\n        return 'WA'\n    return 'AC'",
        "test": "assert solution(\"AtCoder\") == \"AC\""
    },
    {
        "number": 4204,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    K = int(K)\n\n    def replace_chars(s: str) -> str:\n        return s.replace('2', '22').replace('3', '333').replace('4', '4444').replace('5', '55555').replace('6', '666666').replace('7', '7777777').replace('8', '8888888').replace('9', '99999999')\n\n    S = replace_chars(S)\n\n    for _ in range(5 * 10**15):\n        S = replace_chars(S)\n\n    return S[K-1]",
        "test": "assert solution(\"1214\\n4\") == \"2\" "
    },
    {
        "number": 4205,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.strip().split())\n    if n != len(p):\n        return \"NO\"\n\n    if sorted(p) == list(range(1, n + 1)):\n        return \"YES\"\n\n    for i in range(n - 1):\n        if p[i] != i + 1:\n            break\n    else:\n        return \"YES\"\n\n    for j in range(n - 1, i, -1):\n        if p[j] != j + 1:\n            break\n    else:\n        return \"NO\"\n\n    if p[i] > p[j] and sorted(p[:i] + p[j:j + 1] + p[i + 1:j] + p[i:i + 1] + p[j + 1:]) == list(range(1, n + 1)):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5\\n2 3 4 1 5\") == \"NO\""
    },
    {
        "number": 4206,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    max_count = 0\n    while s > 0:\n        count = 0\n        while s % 3 == 0:\n            s //= 3\n            count += 1\n        if count > max_count:\n            max_count = count\n        s //= 3\n    return str(max_count)",
        "test": "assert solution(\"6\") == \"1\""
    },
    {
        "number": 4207,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n\n    def count_zeroes(d):\n        return sum(1 for i in range(n) if d * a[i] + b[i] == 0)\n\n    max_zeroes = 0\n    for d in range(-10**9, 10**9):\n        max_zeroes = max(max_zeroes, count_zeroes(d))\n\n    return str(max_zeroes)\n\ndef",
        "test": "assert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\""
    },
    {
        "number": 4208,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def compatible(left: str, right: str) -> bool:\n        if left == '?' or right == '?':\n            return True\n        return left == right\n\n    n = int(stdin.splitlines()[0])\n    left_colors = stdin.splitlines()[1]\n    right_colors = stdin.splitlines()[2]\n\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if compatible(left_colors[i], right_colors[j]):\n                pairs.append((i + 1, j + 1))\n\n    return len(pairs), '\\n'.join(f'{a} {b}' for a, b in pairs)",
        "test": "assert solution(\"7\\nabaca?b\\nzabbbcc\\n\") == \"5\\n6 5\\n2 3\\n4 6\\n7 4\\n1 2\\n\""
    },
    {
        "number": 4209,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.strip().split(\"\\n\")\n    n = int(n)\n    a = [int(x) for x in sequence.strip().split(\" \")]\n    \n    # Check if all elements in the array have the same sum\n    if len(set([sum(a[:i]) for i in range(1, n+1)])) != 1:\n        return \"Cannot find a valid set of blocks.\"\n    \n    # Find the maximum number of blocks\n    max_blocks = n\n    for i in range(2, n):\n        if n % i == 0:\n            max_blocks = i\n    \n    # Find the block sizes for the maximum number of blocks\n    block_sizes = []\n    for i in range(1, max_blocks+1):\n        if n % i == 0:\n            block_sizes.append(n // i)\n    \n    # Find the blocks\n    blocks = []\n    for block_size in block_sizes:\n        for i in range(n - block_size + 1):\n            blocks.append((i+1, i+block_size))\n    \n    # Sort the blocks\n    blocks.sort(key=lambda x: (x[0], x[1]))\n    \n    # Print the result\n    result = str(len(blocks)) + \"\\n\"\n    for block in blocks:\n        result += f\"{block[0]} {block[1]}\\n\"\n    return result",
        "test": "assert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4\\n1 1'"
    },
    {
        "number": 4210,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            concatenated = int(str(a[i]) + str(a[j]))\n            if concatenated % k == 0:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"4 2\\n2 78 4 10\") == \"12\""
    },
    {
        "number": 4211,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.splitlines()[0])\n    B = list(map(int, stdin.splitlines()[1].split()))\n\n    # Initialize A with all 0's\n    A = [0] * N\n\n    # Fill in the first element of A\n    A[0] = B[0]\n\n    # Fill in the rest of A based on the given condition\n    for i in range(1, N):\n        A[i] = max(B[i-1], A[i-1])\n\n    # Calculate the sum of the elements in A\n    total_sum = sum(A)\n\n    # Return the result\n    return str(total_sum)",
        "test": "assert solution(\"3\\n2 5\\n\") == \"9\""
    },
    {
        "number": 4212,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q, quadruples = int(stdin[0]), int(stdin[1]), int(stdin[2]), stdin[3:].split('\\n')\n    seq = [1] * N\n    scores = []\n    \n    for q in quadruples:\n        a, b, c, d = map(int, q.split())\n        scores.append((d, b - a - c))\n    \n    scores.sort(reverse=True)\n    \n    for s in scores:\n        if s[1] < N:\n            seq[s[1]] += s[0]\n        else:\n            break\n    \n    return str(max(seq))\n\n\ndef",
        "test": "assert solution(\"2 3 2\\n1 2 1 100\\n1 2 2 10\\n\") == \"110\""
    },
    {
        "number": 4213,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    max_diff = 0\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                diff = abs(a[i] - a[j])\n                if diff > max_diff:\n                    max_diff = diff\n\n    return str(max_diff)",
        "test": "assert solution(\"4\\n1 4 6 3\") == \"5\" "
    },
    {
        "number": 4214,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    # Parse input\n    n = int(stdin.splitlines()[0])\n    towns = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n\n    # Compute all possible paths\n    def all_paths(towns):\n        n = len(towns)\n        paths = []\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    paths.append((i, j))\n        return paths\n\n    # Calculate path length\n    def path_length(path, towns):\n        length = 0\n        for i in range(len(path) - 1):\n            length += math.sqrt((towns[path[i]][0] - towns[path[i + 1]][0]) ** 2 + (towns[path[i]][1] - towns[path[i + 1]][1]) ** 2)\n        return length\n\n    # Compute average path length\n    paths = all_paths(towns)\n    total_length = 0\n    for path in paths:\n        total_length += path_length(path, towns)\n    avg_length = total_length / len(paths)\n\n    return str(avg_length)",
        "test": "assert solution(\"3\\n0 0\\n1 0\\n0 1\\n\") == \"2.2761423749\""
    },
    {
        "number": 4215,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    uncovered_length = A - 2 * B\n    if uncovered_length < 0:\n        uncovered_length = 0\n    return str(uncovered_length)",
        "test": "assert solution(\"12 4\") == \"4\""
    },
    {
        "number": 4216,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    min_f = float('inf')\n    min_pair = None\n\n    for a in range(1, N + 1):\n        for b in range(a, N + 1):\n            if a * b == N:\n                f = max(len(str(a)), len(str(b)))\n                if f < min_f:\n                    min_f = f\n                    min_pair = (a, b)\n\n    return str(min_f)",
        "test": "assert solution('10000') == '3'"
    },
    {
        "number": 4217,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # split the input by lines\n    lines = stdin.split(\"\\n\")\n\n    # read the first line containing the number of people and foods\n    N, M = map(int, lines[0].split())\n\n    # read the answers for each person\n    answers = [list(map(int, lines[i].split())) for i in range(1, N+1)]\n\n    # initialize a list to count the number of people who like each food\n    likes = [0] * M\n\n    # iterate over the answers for each person\n    for answer in answers:\n        # iterate over the foods liked by the person\n        for food in answer[1:]:\n            # increment the number of people who like the food\n            likes[food-1] += 1\n\n    # find the number of foods liked by all the N people\n    result = sum(1 for count in likes if count == N)\n\n    return str(result)",
        "test": "assert solution('3 4\\n2 1 3\\n3 1 2 3\\n2 3 2') == '1'"
    },
    {
        "number": 4218,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    odd_count = sum(1 for i in range(1, n+1) if i % 2 != 0)\n    total_count = n\n    probability = odd_count / total_count\n    return '{:.10f}'.format(probability)",
        "test": "assert solution(\"4\") == \"0.5000000000\""
    },
    {
        "number": 4219,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    people = [[] for _ in range(N+1)]\n\n    for i in range(1, N+1):\n        A = int(lines[i])\n        for j in range(A):\n            x, y = map(int, lines[i+j+1].split())\n            people[i].append((x, y))\n            people[x].append((i, y))\n\n    count = 0\n    visited = [False] * (N+1)\n\n    def dfs(person: int) -> None:\n        nonlocal count\n        visited[person] = True\n        for x, y in people[person]:\n            if not visited[x]:\n                if y == 1:\n                    count += 1\n                dfs(x)\n\n    for i in range(1, N+1):\n        if not visited[i]:\n            dfs(i)\n\n    return str(count)\n\ndef",
        "test": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"  # Sample Output"
    },
    {
        "number": 4220,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split()\n    K = int(K)\n\n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + \"...\"",
        "test": "assert solution(\"7\\nnikoandsolstice\") == \"nikoand...\""
    },
    {
        "number": 4221,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip()\n    if word[-1] == 's':\n        return word + 'es'\n    else:\n        return word + 's'",
        "test": "assert solution('apple') == 'apples'"
    },
    {
        "number": 4222,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split('\\n')[0].split())\n    snukes = [[] for _ in range(N+1)]\n    \n    for i in range(1, K+1):\n        d = int(stdin.split('\\n')[i])\n        snacks = list(map(int, stdin.split('\\n')[i+1].split()))\n        for j in range(d):\n            snukes[snacks[j]].append(i)\n    \n    count = 0\n    for i in range(1, N+1):\n        if len(set(snukes[i])) == 1:\n            count += 1\n    \n    return str(count)",
        "test": "assert solution(\"4 3\\n2\\n1 3\\n3\\n1\\n3 4\") == \"2\""
    },
    {
        "number": 4223,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    stack = []\n\n    for i in range(N):\n        if stack and stack[-1] == S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\n    return len(stack)\n\ndef",
        "test": "assert solution('3\\naabb') == '3'"
    },
    {
        "number": 4224,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, seq = map(int, stdin.split())\n    seq = list(map(int, seq))\n\n    operations = 0\n    i = 0\n    while i < n:\n        if seq[i] % 2 == 1:\n            seq[i] *= 3\n            operations += 1\n            i += 1\n        else:\n            seq[i] //= 2\n            operations += 1\n            i += 1\n\n        if i >= n:\n            break\n\n        if seq[i] % 3 == 0:\n            seq[i] *= 2\n            operations += 1\n            i += 1\n        else:\n            seq[i] *= 3\n            operations += 1\n            i += 1\n\n    return str(operations)\n",
        "test": "assert solution(\"5\\n1 2 3 4 5\\n\") == \"4\""
    },
    {
        "number": 4225,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    if K == 0:\n        return \"0\"\n    elif K > A + B + C:\n        return \"Impossible\"\n    elif K == A + B + C:\n        return str(A - B + C)\n    elif A >= B + C:\n        return str(K)\n    elif B >= A + C:\n        return str(K - (A - B))\n    else:\n        return str(K - (A - C))",
        "test": "assert solution(\"1 1 1 1\") == \"1\""
    },
    {
        "number": 4226,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if Y % 4 == 0:\n        if X >= Y // 4:\n            return \"Yes\"\n    if Y % 2 == 0:\n        if X >= Y // 2:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert solution('2 12') == 'No'"
    },
    {
        "number": 4227,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    graph = [[] for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, input().split())\n        graph[a-1].append(b-1)\n        graph[b-1].append(a-1)\n    \n    def dfs(vertex, visited, path, count):\n        visited[vertex] = True\n        path.append(vertex)\n        if len(path) == N:\n            count[0] += 1\n        else:\n            for neighbor in graph[vertex]:\n                if not visited[neighbor]:\n                    dfs(neighbor, visited, path, count)\n        path.pop()\n        visited[vertex] = False\n        \n    count = [0]\n    visited = [False] * N\n    dfs(0, visited, [], count)\n    return str(count[0])",
        "test": "assert solution(\"4 4\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"6\""
    },
    {
        "number": 4228,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = [L + i - 1 for i in range(1, N + 1)]\n    \n    if N <= 2:\n        return sum(apples)\n    \n    min_diff = float('inf')\n    result = 0\n    \n    for i in range(N):\n        sum_flavors = sum(apples[:i] + apples[i+1:])\n        diff = abs(sum_flavors - (sum(apples) - apples[i]))\n        \n        if diff < min_diff:\n            min_diff = diff\n            result = sum_flavors\n    \n    return result",
        "test": "assert solution(\"10 3\") == \"-1\""
    },
    {
        "number": 4229,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    # Calculate the sum of all numbers among the first N terms of the FizzBuzz sequence\n    sum = 0\n    for i in range(1, N+1):\n        if i % 3 == 0 and i % 5 == 0:\n            continue\n        elif i % 3 == 0:\n            continue\n        elif i % 5 == 0:\n            continue\n        else:\n            sum += i\n\n    return str(sum)",
        "test": "assert solution(\"15\") == \"60\""
    },
    {
        "number": 4230,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    X, N = map(int, stdin.split()[0:2])\n    sequence = list(map(int, stdin.split()[2:]))\n\n    # Find the numbers not in the sequence\n    numbers = set(range(1, 101)) - set(sequence)\n\n    # Find the number closest to X\n    closest_number = min(numbers, key=lambda x: abs(x - X))\n\n    return str(closest_number)",
        "test": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\""
    },
    {
        "number": 4231,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, W = [int(x) for x in stdin.split()]\n    h, w = [int(x) for x in stdin.split()]\n    return str((H - h) * W - w)",
        "test": "assert solution(\"5 4\\n2 3\") == \"6\""
    },
    {
        "number": 4232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    sequence = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for num in sequence:\n        if num <= 10**9:\n            count += 1\n\n    if count < k:\n        return \"-1\"\n\n    sequence.sort()\n    for i in range(1, n):\n        if sequence[i] != sequence[i-1]:\n            if sequence[i] - sequence[i-1] == 1:\n                continue\n            else:\n                return str(sequence[i] - 1)\n    return str(sequence[-1])\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "assert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\" "
    },
    {
        "number": 4233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_star(grid, x, y):\n        return grid[x][y] == '*'\n\n    def is_valid_star(grid, x, y, s):\n        for dx in range(-s, s + 1):\n            for dy in range(-s, s + 1):\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < m and (dx != 0 or dy != 0):\n                    if not is_star(grid, nx, ny):\n                        return False\n        return True\n\n    def add_star(grid, x, y, s):\n        for dx in range(-s, s + 1):\n            for dy in range(-s, s + 1):\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < m:\n                    grid[nx][ny] = '*'\n\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    grid = [list(line) for line in lines[1:]]\n\n    stars = []\n    for x in range(n):\n        for y in range(m):\n            for s in range(1, min(n - x, m - y) + 1):\n                if is_valid_star(grid, x, y, s):\n                    stars.append((x, y, s))\n                    add_star(grid, x, y, s)\n\n    if len(stars) == n * m:\n        print(len(stars))\n        for x, y, s in stars:\n            print(x, y, s)\n    else:\n        print(-1)\n\ninput_str = \"\"\"6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\"\"\"\nsolution(input_str) ",
        "test": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n\""
    },
    {
        "number": 4234,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    k = 0\n    result = ''\n    for i in range(n):\n        if i % 2 == 0 and i < n - 1:\n            if s[i] == s[i + 1]:\n                k += 1\n        else:\n            result += s[i]\n\n    return k, result if result else ''\n\n\ninput_str = input()\nk, result = solution(input_str)\nprint(k)\n",
        "test": "assert solution(\"string\") == (\"0\\nstring\")"
    },
    {
        "number": 4235,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    edges = [(int(x) - 1, int(y) - 1) for x, y in map(str.split, stdin.split('\\n')[2:])]\n    \n    def dfs(u, visited):\n        visited[u] = True\n        for v, w in edges:\n            if v == u and not visited[w]:\n                if dfs(w, visited):\n                    return True\n            elif w == u and not visited[v]:\n                if dfs(v, visited):\n                    return True\n        return False\n    \n    for u in range(n):\n        visited = [False] * n\n        if dfs(u, visited):\n            return \"NO\"\n    \n    result = \"1\" * m\n    return \"YES\\n\" + result\n\ninput_data = \"\"\"6 5\n1 5\n2 1\n1 4\n3 1\n6 1\"\"\"\n\nprint(solution(input_data)) ",
        "test": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") != \"NO\""
    },
    {
        "number": 4236,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split()[2:])\n        segments.append((l, r))\n\n    points = set()\n    for i in range(1, m+1):\n        points.add(i)\n\n    for segment in segments:\n        if segment[0] == segment[1]:\n            points.discard(segment[0])\n        else:\n            for i in range(segment[0], segment[1]+1):\n                points.discard(i)\n\n    points = list(points)\n    points.sort()\n\n    if len(points) == 0:\n        return \"0\"\n    else:\n        return str(len(points)) + \"\\n\" + \" \".join(map(str, points))",
        "test": "assert solution(\"1 7\\n1 7\") == \"0\\n\""
    },
    {
        "number": 4237,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n\n    for i in range(A, B + 1):\n        if i % C != 0 and i % D != 0:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"4 9 2 3\") == \"2\""
    },
    {
        "number": 4238,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(n))\n    if digits_sum % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"123456789\") == \"Yes\""
    },
    {
        "number": 4239,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    # Calculate the number of operations required to withdraw exactly N yen\n    operations = 0\n    while N > 0:\n        # Check if the current amount is divisible by 1, 6, 9, 36, 81, etc.\n        for factor in [1, 6, 9, 36, 81]:\n            if N % factor == 0:\n                operations += 1\n                N -= factor\n                break\n        else:\n            # If we can't find a valid factor, then we need to withdraw at least one more operation\n            operations += 1\n            N -= 1\n            \n    return str(operations)",
        "test": "assert solution(\"1\") == \"1\""
    },
    {
        "number": 4240,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if len(S) != len(T):\n        return \"No\"\n\n    for i in range(len(S)):\n        if S == T:\n            return \"Yes\"\n        S = S[-1] + S[:-1]\n\n    return \"No\"",
        "test": "assert solution(\"abcde\\naaaab\") == \"No\""
    },
    {
        "number": 4241,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    min_changes = len(s)\n    for i in range(len(s) - len(t) + 1):\n        current_changes = 0\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                current_changes += 1\n        min_changes = min(min_changes, current_changes)\n    return str(min_changes)",
        "test": "assert solution(\"cabacc\\nabc\") == \"1\""
    },
    {
        "number": 4242,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    \n    # Find all divisors of A and B\n    divisors_A = []\n    divisors_B = []\n    for i in range(1, A+1):\n        if A % i == 0:\n            divisors_A.append(i)\n    for i in range(1, B+1):\n        if B % i == 0:\n            divisors_B.append(i)\n    \n    # Find the intersection of the two lists\n    divisors = list(set(divisors_A) & set(divisors_B))\n    \n    # Sort the list in descending order\n    divisors.sort(reverse=True)\n    \n    # Return the K-th largest number\n    return str(divisors[K-1])",
        "test": "assert solution('8 12 2') == '2'"
    },
    {
        "number": 4243,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    X = int(stdin)\n    \n    # Calculate happiness points for each coin type\n    coins = [(500, 1000), (100, 500), (50, 500), (10, 500), (5, 5), (1, 1)]\n    happiness = 0\n    \n    for coin, points in coins:\n        count = X // coin\n        happiness += count * points\n        X %= coin\n        \n    return str(happiness)",
        "test": "assert solution(\"0\") == \"0\" "
    },
    {
        "number": 4244,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    coordinates = [int(x) for x in lines[1].split()]\n\n    def stamina_cost(coordinate):\n        return sum((x - coordinate) ** 2 for x in coordinates)\n\n    min_cost = float('inf')\n    for i in range(min(coordinates), max(coordinates) + 1):\n        cost = stamina_cost(i)\n        min_cost = min(min_cost, cost)\n\n    return str(min_cost)",
        "test": "assert solution(\"2\\n1 4\") == \"5\""
    },
    {
        "number": 4245,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    count = 0\n    while B > 0:\n        count += 1\n        B -= A\n    return str(count)",
        "test": "assert solution(\"4 10\") == \"3\""
    },
    {
        "number": 4246,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"CSS\\nCSR\") == \"2\""
    },
    {
        "number": 4247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, p = stdin.split()\n    n = int(n)\n    p = list(map(int, p.split()))\n    \n    count = 0\n    for i in range(1, n-1):\n        if p[i] == sorted(p[i-1:i+2])[1]:\n            count += 1\n            \n    return str(count)",
        "test": "assert solution(\"5\\n1 3 5 4 2\") == \"2\""
    },
    {
        "number": 4248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    from math import atan2, sqrt, pi\n\n    def distance(a: tuple, b: tuple) -> float:\n        return sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)\n\n    def angle(a: tuple, b: tuple, c: tuple) -> float:\n        return atan2(c[1] - b[1], c[0] - b[0]) - atan2(a[1] - b[1], a[0] - b[0])\n\n    points = [tuple(map(float, line.split())) for line in stdin.split('\\n')[1:]]\n    theta = 0\n\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            theta += abs(angle(points[i], (0, 0), points[j]))\n\n    theta /= len(points) * (len(points) - 1)\n    return f\"{theta / pi * 180:.3f}\"\n\ninputs = [\n    \"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\",\n    \"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\",\n    \"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\",\n    \"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\",\n    \"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\",\n    \"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\",\n]\n\nfor input_str in inputs:\n    print(solution(input_str)) ",
        "test": "assert solution(\"\"\"8"
    },
    {
        "number": 4249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    max_pages = sum(a)\n    if max_pages < m:\n        return -1\n\n    dp = [0] * (m + 1)\n    dp[0] = 0\n\n    for i in range(n):\n        for j in range(m, a[i] - 1, -1):\n            dp[j] = max(dp[j], dp[j - a[i]] + a[i])\n\n    return dp[m]\n\n\ndef",
        "test": "assert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\""
    },
    {
        "number": 4250,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = list(map(int, stdin.split()[2:]))\n    max_copies = 0\n    result = []\n    \n    for i in range(len(s) - k + 1):\n        copy_count = 0\n        t = s[i:i+k]\n        \n        for j in range(len(s) - k + 1):\n            if s[j:j+k] == t:\n                copy_count += 1\n                s[j:j+k] = []\n                \n        if copy_count > max_copies:\n            max_copies = copy_count\n            result = t\n            \n    return \" \".join(map(str, result))",
        "test": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\""
    },
    {
        "number": 4251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.splitlines()[0].split()))\n    matrix = [list(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    \n    def is_acceptable(matrix: List[List[int]], k: int) -> bool:\n        traversal = []\n        for j in range(m):\n            for i in range(n):\n                traversal.append(matrix[i][j])\n        for i in range(len(traversal) - 1):\n            if abs(traversal[i] - traversal[i + 1]) < k:\n                return False\n        return True\n    \n    max_k = 0\n    for permutation in itertools.permutations(range(n)):\n        permuted_matrix = [matrix[i] for i in permutation]\n        for k in range(1, 10**9):\n            if is_acceptable(permuted_matrix, k):\n                max_k = max(max_k, k)\n            else:\n                break\n    return str(max_k)",
        "test": "assert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\""
    },
    {
        "number": 4252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, file_name = stdin.split()\n    n = int(n)\n    minimum_deletions = n\n\n    for i in range(n - 2):\n        if file_name[i:i + 3] == \"xxx\":\n            minimum_deletions = min(minimum_deletions, n - i - 2)\n\n    return str(minimum_deletions)\n",
        "test": "assert solution(\"xxoxx\") == 0"
    },
    {
        "number": 4253,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r**2\n    return str(area)",
        "test": "assert solution(\"4\") == \"48\""
    },
    {
        "number": 4254,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    sheep, wolves = map(int, stdin.split())\n    if wolves >= sheep:\n        return \"unsafe\"\n    else:\n        return \"safe\"",
        "test": "assert solution(\"4 5\") == \"unsafe\""
    },
    {
        "number": 4255,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return str(int(area))",
        "test": "assert solution(\"3 4 5\") == \"6\""
    },
    {
        "number": 4256,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A > B:\n        return \"0\"\n    return str(min(B // A, C)) ",
        "test": "assert solution(\"2 11 4\") == \"4\" "
    },
    {
        "number": 4257,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    result = a * b\n    return str(result)",
        "test": "assert solution(\"2 5\") == \"10\""
    },
    {
        "number": 4258,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    total_biscuits = 0\n    for i in range(1, T + 1):\n        if i % A == 0:\n            total_biscuits += B\n    return str(total_biscuits)",
        "test": "assert solution(\"3 5 7\") == \"10\""
    },
    {
        "number": 4259,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split()))\n    k, a, b = inputs\n    \n    # Check if a multiple of k is within the range [a, b]\n    for i in range(a, b+1):\n        if i % k == 0:\n            return \"OK\"\n    \n    return \"NG\"",
        "test": "assert solution('7\\n500 600\\n') == 'OK'"
    },
    {
        "number": 4260,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    t = T / X\n    return str(round(t, 3))",
        "test": "assert solution(\"3 2\") == \"1.5\"  # Test case 2"
    },
    {
        "number": 4261,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    transferable_water = min(A - B, C)\n    new_B = B + transferable_water\n    new_C = C - transferable_water\n    return str(new_C)",
        "test": "assert solution(\"6 4 3\") == \"1\""
    },
    {
        "number": 4262,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    P = list(map(int, lines[1].split()))\n    Q = list(map(int, lines[2].split()))\n\n    # Find the lexicographically smallest permutations P and Q\n    def find_lexicographically_smallest(P: list[int], Q: list[int], N: int) -> tuple[list[int], list[int], int]:\n        min_P = list(P)\n        min_Q = list(Q)\n        min_P_index = 0\n        min_Q_index = 0\n\n        for i in range(N):\n            for j in range(i, N):\n                if P[i:j+1] < P[min_P_index:min_P_index+j+1]:\n                    min_P_index = i\n                    min_P = P[i:j+1]\n                if Q[i:j+1] < Q[min_Q_index:min_Q_index+j+1]:\n                    min_Q_index = i\n                    min_Q = Q[i:j+1]\n\n        return min_P, min_Q, min_P_index\n\n    min_P, min_Q, min_P_index = find_lexicographically_smallest(P, Q, N)\n\n    # Find the index of the lexicographically smallest permutation in the list of permutations of size N\n    def find_index(min_P: list[int], N: int) -> int:\n        index = 0\n        for i in range(N):\n            for j in range(i, N):\n                if min_P == list(range(1, N+1))[i:j+1]:\n                    index = i\n                    break\n            if index != 0:\n                break\n\n        return index\n\n    a = find_index(min_P, N)\n    b = find_index(min_Q, N)\n\n    return str(abs(a - b))",
        "test": "assert solution(\"5\\n4 3 2 1 5\\n5 4 3 2 1\") == \"0\""
    },
    {
        "number": 4263,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    max_length = 0\n\n    for i in range(len(S)):\n        for j in range(i + 1, len(S) + 1):\n            substring = S[i:j]\n            if all(c in 'ACGT' for c in substring):\n                max_length = max(max_length, len(substring))\n\n    return max_length",
        "test": "assert solution(\"ATCODER\") == 3"
    },
    {
        "number": 4264,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N + 1):\n        if len(str(i)) % 2 != 0:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"11\") == \"9\" "
    },
    {
        "number": 4265,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s_list = list(s)\n    t_list = list(t)\n    count = 0\n\n    for i in range(len(s)):\n        if s_list[i] != t_list[i]:\n            s_list[i] = t_list[i]\n            count += 1\n\n    return count",
        "test": "assert solution(\"cupofcoffee\\ncupofhottea\") == 4 "
    },
    {
        "number": 4266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    if X - K < -1000000 or X + K > 1000000:\n        return \"\"\n    start = max(X - K, -1000000)\n    end = min(X + K, 1000000)\n    return \" \".join(map(str, range(start, end + 1)))",
        "test": "assert solution(\"5 2\") == \"0 1 2 3 4 5 6 7 8 9\""
    },
    {
        "number": 4267,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    temperature = int(stdin)\n    if temperature >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"25\") == \"No\""
    },
    {
        "number": 4268,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, D = map(int, lines[0].split())\n    points = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    def distance(p1: tuple, p2: tuple) -> float:\n        return ((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2) ** 0.5\n\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if int(distance(points[i], points[j])) == distance(points[i], points[j]):\n                count += 1\n\n    return str(count)\n",
        "test": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\""
    },
    {
        "number": 4269,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return \"Bad\"\n    else:\n        return \"Good\"",
        "test": "assert solution(\"3776\") == \"Bad\""
    },
    {
        "number": 4270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *ingredients = map(int, stdin.split())\n    \n    def mix(x, y):\n        return (x + y) / 2\n    \n    while len(ingredients) > 1:\n        new_ingredients = [mix(ingredients[i], ingredients[i+1]) for i in range(0, len(ingredients)-1, 2)]\n        if len(new_ingredients) % 2 != 0:\n            new_ingredients.append(mix(new_ingredients[-1], ingredients[-1]))\n        ingredients = new_ingredients\n    \n    return f\"{ingredients[0]:.5f}\"\n\ndef",
        "test": "assert solution(\"3\\n10 15 20\") == \"15.0\""
    },
    {
        "number": 4271,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    C = list(map(int, lines[3].split()))\n\n    satisfaction = 0\n    for i in range(n):\n        satisfaction += B[i]\n        if i < n - 1:\n            satisfaction += C[i]\n\n    return str(satisfaction)\n\nstdin = \"3\\n3 1 2\\n2 5 4\\n3 6\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"2\\n1 2\\n2 3\\n1\") == \"6\"  # Sample Input 2"
    },
    {
        "number": 4272,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n\n    count = 0\n    for i in range(N - 2):\n        if S[i:i+3] == \"ABC\":\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"10\\nZABCDBABCQ\") == \"2\" "
    },
    {
        "number": 4273,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    names = lines[1:]\n\n    # Initialize count\n    count = 0\n\n    # Iterate over all possible combinations\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                # Check if all three names start with different letters\n                name1 = names[i]\n                name2 = names[j]\n                name3 = names[k]\n                if name1[0] != name2[0] and name1[0] != name3[0] and name2[0] != name3[0]:\n                    # Check if all three names start with M, A, R, C, or H\n                    if name1[0] in ['M', 'A', 'R', 'C', 'H'] and name2[0] in ['M', 'A', 'R', 'C', 'H'] and name3[0] in ['M', 'A', 'R', 'C', 'H']:\n                        count += 1\n\n    return str(count)",
        "test": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\""
    },
    {
        "number": 4274,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    if N == M:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"3 3\") == \"Yes\""
    },
    {
        "number": 4275,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"sippuu\") == \"Yes\""
    },
    {
        "number": 4276,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, T = map(int, lines[0].split())\n    routes = []\n    for line in lines[1:]:\n        if not line:\n            continue\n        c, t = map(int, line.split())\n        routes.append((c, t))\n\n    min_cost = T\n    for route in routes:\n        c, t = route\n        if t <= T:\n            min_cost = min(min_cost, c)\n\n    if min_cost == T:\n        return \"TLE\"\n    return str(min_cost)",
        "test": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == \"4\""
    },
    {
        "number": 4277,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    train_cost = N * A\n    total_cost = max(train_cost, B)\n    return str(total_cost)",
        "test": "assert solution(\"5 3 10\") == \"15\""
    },
    {
        "number": 4278,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    strings = lines[1:]\n\n    def is_anagram(s1: str, s2: str) -> bool:\n        if len(s1) != len(s2):\n            return False\n        count = {}\n        for c in s1:\n            count[c] = count.get(c, 0) + 1\n        for c in s2:\n            if c not in count:\n                return False\n            count[c] -= 1\n            if count[c] < 0:\n                return False\n        return True\n\n    anagram_pairs = [(i, j) for i, j in itertools.combinations(range(n), 2) if is_anagram(strings[i], strings[j])]\n\n    return str(len(anagram_pairs))",
        "test": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\\n\") == \"1\""
    },
    {
        "number": 4279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    sequence = \"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990\"\n    results = []\n    \n    for _ in range(queries):\n        k = int(stdin.readline().strip())\n        if k <= 56:\n            results.append(sequence[k-1])\n        else:\n            n = k // 9 + 2\n            position = (k - 1) % 9 + 1\n            results.append(str((n * (n + 1)) // 2 + n + 1 - position))\n    \n    return \"\\n\".join(results)",
        "test": "assert solution(\"4\\n2132\\n506\\n999999999\\n1000000000\") == \"8\\n2\\n9\\n8\\n\" "
    },
    {
        "number": 4280,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    roads = [tuple(map(int, line.split())) for line in stdin.split()[2:]]\n    \n    def dfs(start, visited, current_company):\n        visited.add(start)\n        for end in range(1, n+1):\n            if (start, end) in roads or (end, start) in roads:\n                if end not in visited:\n                    yield from dfs(end, visited, current_company)\n                else:\n                    yield current_company\n    \n    max_company = 0\n    for start in range(1, n+1):\n        companies = set(dfs(start, set(), max_company + 1))\n        max_company = max(max_company, max(companies) if companies else 0)\n    \n    company_assignments = []\n    for road in roads:\n        found_company = False\n        for company in range(1, max_company+1):\n            if all(roads.index((road[0], other)) % 2 == 0 or roads.index((other, road[0])) % 2 == 0 for other in range(1, n+1) if other != road[1]):\n                company_assignments.append(company)\n                found_company = True\n                break\n        if not found_company:\n            return \"Not possible\"\n    \n    return str(max_company) + \"\\n\" + \" \".join(map(str, company_assignments))\n\ninput_string = input()\nprint(solution(input_string)) ",
        "test": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n\") == \"1\\n1 1\\n\""
    },
    {
        "number": 4281,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n\n    min_occupied = max_occupied = 0\n    for i in range(1, n + 1):\n        if i - 1 in x or i + 1 in x:\n            min_occupied += 1\n            max_occupied += 1\n        else:\n            min_occupied += 1\n            max_occupied += 2\n\n    return str(min_occupied) + \" \" + str(max_occupied)",
        "test": "assert solution(\"9\\n1 1 8 8 8 4 4 4 4\\n\") == \"3 8\""
    },
    {
        "number": 4282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def get_next_kid(kid, n):\n        return (kid % n) + 1\n\n    def restore_order(info, n):\n        order = [0] * n\n        for i, (a, b) in enumerate(info):\n            order[i] = a\n            order[b] = b\n            info[i] = (b, get_next_kid(b, n))\n        return order\n\n    n = int(stdin.readline())\n    info = []\n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        info.append((a, b))\n\n    return ' '.join(map(str, restore_order(info, n)))",
        "test": "assert solution(\"3\\n2 3\\n3 1\\n1 2\") == \"3 1 2\""
    },
    {
        "number": 4283,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    skills = list(map(int, stdin.split('\\n')[1].split()))\n    skills.sort()\n    \n    max_balanced_team = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            if skills[j] - skills[i] > 5:\n                break\n            for k in range(j+1, n):\n                if skills[k] - skills[j] > 5:\n                    break\n                max_balanced_team = max(max_balanced_team, k - i + 1)\n    \n    return str(max_balanced_team)",
        "test": "assert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\""
    },
    {
        "number": 4284,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    result = []\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        turns = 0\n        while k > 0 and n > 0:\n            if k > a and k > b:\n                k -= a\n                turns += 1\n            elif k > a:\n                k -= b\n                turns += 1\n            else:\n                break\n            n -= 1\n        if n == 0:\n            result.append(turns)\n        else:\n            result.append(-1)\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\""
    },
    {
        "number": 4285,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    def count_subsequences(s: str) -> int:\n        s = s.replace('?', 'a')\n        s = s.replace('?', 'b')\n        s = s.replace('?', 'c')\n        count = 0\n        for i in range(len(s) - 2):\n            if s[i:i+3] == 'abc':\n                count += 1\n        return count\n\n    total_count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == '???':\n            total_count += count_subsequences(s[:i] + 'a' + s[i+1:])\n            total_count += count_subsequences(s[:i] + 'b' + s[i+1:])\n            total_count += count_subsequences(s[:i] + 'c' + s[i+1:])\n        elif s[i] == '?':\n            total_count += count_subsequences(s[:i] + 'a' + s[i+1:])\n            total_count += count_subsequences(s[:i] + 'b' + s[i+1:])\n            total_count += count_subsequences(s[:i] + 'c' + s[i+1:])\n\n    return str(total_count % (10**9 + 7))",
        "test": "assert solution(\"7\\n??????\\n\") == \"2835\""
    },
    {
        "number": 4286,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    numbers = list(map(int, stdin.split()[2:n+2]))\n    offers = []\n    for i in range(m):\n        x, y, w = map(int, stdin.split()[2+n+i*3:2+n+i*3+3])\n        offers.append((x, y, w))\n    \n    def find(parent, x):\n        if parent[x] != x:\n            parent[x] = find(parent, parent[x])\n        return parent[x]\n    \n    def union(parent, rank, x, y):\n        rootX = find(parent, x)\n        rootY = find(parent, y)\n        if rootX == rootY:\n            return False\n        if rank[rootX] < rank[rootY]:\n            parent[rootX] = rootY\n        elif rank[rootX] > rank[rootY]:\n            parent[rootY] = rootX\n        else:\n            parent[rootY] = rootX\n            rank[rootX] += 1\n        return True\n    \n    parent = [i for i in range(n)]\n    rank = [0] * n\n    min_cost = 0\n    \n    for x, y, w in offers:\n        if find(parent, x) != find(parent, y):\n            min_cost += w\n            union(parent, rank, x, y)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if find(parent, i) != find(parent, j):\n                min_cost += numbers[i] + numbers[j]\n                union(parent, rank, i, j)\n    \n    return str(min_cost)",
        "test": "assert solution(\"4 0\\n1 3 3 7\") == \"16\""
    },
    {
        "number": 4287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.readline().split())\n    rain_segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        rain_segments.append((l, r))\n    \n    umbrellas = []\n    for _ in range(m):\n        x, p = map(int, stdin.readline().split())\n        umbrellas.append((x, p))\n    \n    umbrellas.sort(key=lambda x: x[0])\n    rain_segments.sort(key=lambda x: x[0])\n    \n    def find_umbrella(x: int) -> int:\n        left, right = 0, len(umbrellas) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if umbrellas[mid][0] <= x:\n                left = mid + 1\n            else:\n                right = mid\n        return left\n    \n    def calculate_fatigue(umbrella_weights: List[int], x: int) -> int:\n        fatigue = 0\n        umbrella_index = find_umbrella(x)\n        for i in range(umbrella_index, len(umbrella_weights)):\n            fatigue += umbrella_weights[i]\n        return fatigue\n    \n    min_fatigue = float('inf')\n    for i in range(n):\n        l, r = rain_segments[i]\n        for j in range(m):\n            x, p = umbrellas[j]\n            if l <= x and x + 1 <= r:\n                fatigue = calculate_fatigue([pw for _, pw in umbrellas[:j]], x)\n                min_fatigue = min(min_fatigue, fatigue)\n                fatigue = calculate_fatigue([pw for _, pw in umbrellas[j+1:]], x)\n                min_fatigue = min(min_fatigue, fatigue)\n    \n    return str(min_fatigue) if min_fatigue != float('inf') else \"-1\" ",
        "test": "assert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\""
    },
    {
        "number": 4288,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    if (a == b and c != a) or (a == c and b != a) or (b == c and a != b):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('5 5 7') == 'Yes'"
    },
    {
        "number": 4289,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, T, A = map(int, stdin.split()[0:3])\n    H = list(map(int, stdin.split()[3:]))\n\n    min_diff = float('inf')\n    min_index = 0\n\n    for i in range(n):\n        temp = T - H[i] * 0.006\n        diff = abs(temp - A)\n\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n\n    return str(min_index + 1)\n\n\ndef",
        "test": "assert solution(\"3\\n20 10\\n1000 2000 3000\") == \"2\""
    },
    {
        "number": 4290,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n + m < 2:\n        return \"0\"\n    if n % 2 == 0:\n        return str((n + 1) * n // 2)\n    else:\n        return str((n // 2 + 1) * (n // 2))",
        "test": "assert solution(\"3 2\") == \"2\""
    },
    {
        "number": 4291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, Q = map(int, lines[0].split())\n    S = lines[1]\n    queries = [list(map(int, lines[i].split())) for i in range(2, 2 + Q)]\n\n    def count_ac(l: int, r: int) -> int:\n        count = 0\n        for i in range(l, r - 1):\n            if S[i:i + 2] == 'AC':\n                count += 1\n        return count\n\n    result = []\n    for query in queries:\n        l, r = query\n        result.append(str(count_ac(l - 1, r)))\n\n    return '\\n'.join(result)\n",
        "test": "assert solution(\"8 3\\nACACTACG\\n3 7\\n2 3\\n1 8\") == \"2\\n0\\n3\""
    },
    {
        "number": 4292,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    prices = list(map(int, stdin.split()[2:]))\n\n    # Sort the prices in ascending order\n    prices.sort()\n\n    # Find the minimum total price\n    total_price = sum(prices[:K])\n\n    return str(total_price)",
        "test": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\" "
    },
    {
        "number": 4293,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    routes = [\n        P + Q,\n        P + R,\n        Q + R,\n        P + Q + R,\n        Q + P + R,\n        R + P + Q,\n    ]\n    return str(min(routes))",
        "test": "assert solution('1 3 4') == '4'"
    },
    {
        "number": 4294,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    if X < A:\n        return \"0\"\n    else:\n        return \"10\"",
        "test": "assert solution(\"3 5\") == \"0\""
    },
    {
        "number": 4295,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    while abs(N - K) > 1:\n        N = abs(N - K)\n    return str(N)",
        "test": "assert solution('1 2') == '1'"
    },
    {
        "number": 4296,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = map(int, stdin.split())\n    total = a1 + a2 + a3\n    return \"bust\" if total >= 22 else \"win\"",
        "test": "assert solution(\"5 7 9\") == \"win\""
    },
    {
        "number": 4297,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = 1\n    while True:\n        if result % 2 == 0 and result % N == 0:\n            break\n        result += 1\n    return str(result)",
        "test": "assert solution(\"3\") == \"6\""
    },
    {
        "number": 4298,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the minimum number of inspectors needed to inspect all apple trees.\n\n    Args:\n        stdin: input string in the format 'N D'\n\n    Returns:\n        String representing the minimum number of inspectors needed.\n    \"\"\"\n    N, D = map(int, stdin.split())\n\n    # Calculate the minimum and maximum index of trees that can be inspected by each inspector\n    min_index = max(1, D - (N - 1))\n    max_index = min(N, 2 * D - min_index + 1)\n\n    # Calculate the minimum number of inspectors needed\n    min_inspectors = max_index - min_index + 1\n\n    return str(min_inspectors)",
        "test": "assert solution(\"1 1\") == \"1\""
    },
    {
        "number": 4299,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 0:\n        return \"hon\"\n    if N % 10 == 2 or N % 10 == 4 or N % 10 == 5 or N % 10 == 7 or N % 10 == 9:\n        return \"hon\"\n    elif N % 10 == 1 or N % 10 == 6 or N % 10 == 8:\n        return \"pon\"\n    elif N % 10 == 3:\n        return \"bon\"",
        "test": "assert solution(\"16\") == \"pon\""
    },
    {
        "number": 4300,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    d = list(map(int, lines[1].split()))\n\n    total_health = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            total_health += d[i] * d[j]\n\n    return str(total_health)",
        "test": "assert solution(\"3\\n3 1 2\") == \"11\""
    },
    {
        "number": 4301,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    A = [int(x) for x in lines[1:]]\n    result = []\n    \n    for i in range(N):\n        A_i = A[i]\n        max_value = max(A[:i] + A[i+1:])\n        result.append(max_value)\n        \n    return '\\n'.join(map(str, result))",
        "test": "assert solution('3\\n1\\n4\\n3') == '4\\n3\\n4'"
    },
    {
        "number": 4302,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = 0\n    if A <= B:\n        coins += A * (A+1) // 2\n        coins += B * (B-A) // 2\n    else:\n        coins += B * (B+1) // 2\n        coins += A * (A-B) // 2\n    return str(coins)",
        "test": "assert solution(\"10 2\") == \"12\""
    },
    {
        "number": 4303,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    x_coords = list(map(int, stdin.split()[2:]))\n\n    # Sort the candles by their x coordinates\n    candles = sorted(zip(x_coords, range(N)))\n\n    # Initialize variables\n    current_position = 0\n    current_candle_index = 0\n    time = 0\n\n    # Iterate through the candles\n    while current_candle_index < K:\n        # Move to the next candle's position\n        next_candle_position = candles[current_candle_index][0]\n        time += abs(next_candle_position - current_position)\n        current_position = next_candle_position\n\n        # Light the next candle\n        current_candle_index += 1\n\n    return time",
        "test": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\""
    },
    {
        "number": 4304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    x = sum(range(1, b - a + 1))\n    return str(x)",
        "test": "assert solution(\"500000 500001\") == \"1\""
    },
    {
        "number": 4305,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    attacks = 0\n    \n    while H > 0:\n        H -= A\n        attacks += 1\n    \n    return str(attacks)",
        "test": "assert solution(\"10 4\") == \"3\""
    },
    {
        "number": 4306,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # split input into A, B, C, and D\n    A, B, C, D = map(int, stdin.split())\n    \n    # calculate the time when both Alice and Bob were holding down their buttons\n    duration = min(B, D) - max(A, C)\n    \n    # return the duration if it's positive, otherwise return 0\n    return str(max(duration, 0))",
        "test": "assert solution(\"0 75 25 100\") == \"50\""
    },
    {
        "number": 4307,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # convert input string to integer\n    N = int(stdin)\n\n    count = 0\n    for i in range(1, N+1):\n        if i % 2 != 0:\n            divisors = 0\n            for j in range(1, i+1):\n                if i % j == 0:\n                    divisors += 1\n            if divisors == 8:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"100\") == \"0\""
    },
    {
        "number": 4308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if K == 1:\n        return 0\n    if K == 2:\n        return 1\n    diff = N % (K - 1)\n    if diff == 0:\n        return 1\n    return diff",
        "test": "assert solution(\"11 4\") == \"0\""
    },
    {
        "number": 4309,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    abc_n = int(stdin)\n    for i in range(100, abc_n+1):\n        if len(set(str(i))) == 1:\n            return str(i)\n    return \"No solution found\"",
        "test": "assert solution('111') == '111'"
    },
    {
        "number": 4310,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n\n    min_cost = 0\n    for i in range(3):\n        for j in range(3):\n            if i != j:\n                min_cost += abs(A[i] - A[j])\n\n    return str(min_cost)",
        "test": "assert solution(\"4 5 6\") == \"8\""
    },
    {
        "number": 4311,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    i = 1\n    while True:\n        if i == 1:\n            a.append(s)\n        elif a[i-1] % 2 == 0:\n            a.append(a[i-1] // 2)\n        else:\n            a.append(3 * a[i-1] + 1)\n        if a[-1] in a[:-1]:\n            return str(len(a)-1)\n        i += 1",
        "test": "assert solution(\"1\") == \"1\""
    },
    {
        "number": 4312,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    takahashi_health = A\n    aoki_health = C\n\n    while takahashi_health > 0 and aoki_health > 0:\n        takahashi_health -= D\n        aoki_health -= B\n\n    if takahashi_health <= 0:\n        return \"No\"\n    else:\n        return \"Yes\"",
        "test": "assert solution(\"10 9 10 10\") == \"No\""
    },
    {
        "number": 4313,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    num_gems = int(lines[0])\n    values = [int(x) for x in lines[1].split()]\n    costs = [int(x) for x in lines[2].split()]\n\n    max_profit = 0\n    for i in range(num_gems):\n        for j in range(i + 1, num_gems):\n            profit = values[i] + values[j] - costs[i] - costs[j]\n            if profit > max_profit:\n                max_profit = profit\n\n    return str(max_profit)",
        "test": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\""
    },
    {
        "number": 4314,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def remove_rows_or_cols(matrix, rows_or_cols):\n        return [row for row in matrix if any(row)] if rows_or_cols == \"rows\" else [column for column in zip(*matrix) if any(column)]\n\n    def is_white(char):\n        return char == \".\"\n\n    def is_black(char):\n        return char == \"#\"\n\n    def get_matrix(stdin: str) -> List[List[str]]:\n        rows = stdin.split(\"\\n\")\n        return [[char for char in row] for row in rows[:-1]]\n\n    def get_final_state(matrix: List[List[str]]) -> List[List[str]]:\n        while any(row.count(\".\") == len(row) for row in matrix) or any(column.count(\".\") == len(column) for column in zip(*matrix)):\n            rows_or_cols = \"rows\" if any(row.count(\".\") == len(row) for row in matrix) else \"columns\"\n            matrix = remove_rows_or_cols(matrix, rows_or_cols)\n        return matrix\n\n    stdin = stdin.strip()\n    h, w = map(int, stdin.split()[:2])\n    matrix = get_matrix(stdin)\n    final_state = get_final_state(matrix)\n\n    output = \"\"\n    for row in final_state:\n        output += \"\".join(row) + \"\\n\"\n    return output\n\ninput_string = \"4 4\\n##.\\n....\\n##.\\n.#.\\n\"\nprint(solution(input_string)) ",
        "test": "assert solution(\"6 6\\n#.#.\\n.#.#\\n.#.#\\n#.#.\\n.#.#\\n#.#.\\n\") == \"#.#.\\n#.#.\\n#.#.\\n\""
    },
    {
        "number": 4315,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    PI = 3.14159265358979323846\n    circumference = 2 * PI * R\n    return str(circumference)\n\ninput_data = input()\nresult = solution(input_data)\nprint(result) ",
        "test": "assert solution(\"100\") == \"628.318530717958623187602\""
    },
    {
        "number": 4316,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) != 4:\n        return \"No\"\n\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    if len(char_count) != 2:\n        return \"No\"\n\n    if max(char_count.values()) != 2:\n        return \"No\"\n\n    return \"Yes\"",
        "test": "assert solution(\"ASSA\") == \"Yes\""
    },
    {
        "number": 4317,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    options = [A + B, A - B, A * B]\n    return str(max(options))",
        "test": "assert solution(\"-13 3\") == \"-10\""
    },
    {
        "number": 4318,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def can_see_ocean(mountain_heights: List[int]) -> int:\n        for i in range(1, len(mountain_heights)):\n            if mountain_heights[i] <= mountain_heights[i-1]:\n                return False\n        return True\n\n    def process_input(stdin: str) -> Tuple[int, List[int]]:\n        N, *mountain_heights = map(int, stdin.split())\n        return N, mountain_heights\n\n    N, mountain_heights = process_input(stdin)\n    inns_can_see_ocean = sum(can_see_ocean(mountain_heights[:i]) for i in range(1, N+1))\n    return str(inns_can_see_ocean)",
        "test": "assert solution(\"5\\n7 8 9 10 11\") == \"5\" "
    },
    {
        "number": 4319,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.strip().split()))\n    stairways = []\n    current_stairway = []\n    for num in numbers:\n        if num == 1:\n            current_stairway.append(num)\n        else:\n            current_stairway.append(num)\n            stairways.append(current_stairway)\n            current_stairway = []\n    if current_stairway:\n        stairways.append(current_stairway)\n    stairway_lengths = [len(stairway) for stairway in stairways]\n    return str(len(stairways)) + \"\\n\" + \" \".join(map(str, stairway_lengths))",
        "test": "assert solution(\"4\\n1 1 1 1\\n\") == \"4\\n1 1 1 1\\n\""
    },
    {
        "number": 4320,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip().split(\"\\n\")[0])\n    for i in range(t):\n        n = int(stdin.strip().split(\"\\n\")[i+1])\n        x = 1\n        k = 2\n        while True:\n            if x + 2 * x + 4 * x + 8 * x + 16 * x + 32 * x == n:\n                break\n            elif x + 2 * x + 4 * x + 8 * x + 16 * x + 32 * x < n:\n                x += 2**(k-1)\n                k += 1\n            else:\n                k -= 1\n                x -= 2**(k-1)\n        print(x)",
        "test": "assert solution(\"7\\n3\\n6\\n7\\n21\\n28\\n999999999\\n999999984\") == \"1\\n2\\n1\\n7\\n4\\n333333333\\n333333328\\n\" "
    },
    {
        "number": 4321,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while k > 0:\n        if n % 10 != 0:\n            n -= 1\n        else:\n            n //= 10\n        k -= 1\n    return str(n)",
        "test": "assert solution(\"512 4\") == \"50\""
    },
    {
        "number": 4322,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, people = map(int, stdin.split())\n    people = list(map(int, people.split()))\n    people.sort()\n\n    def is_valid(subset: List[int]) -> bool:\n        for i in range(len(subset) - 1):\n            if abs(subset[i] - subset[i + 1]) > 1:\n                return False\n        return True\n\n    def find_max_balanced_circle(left: int, right: int) -> List[int]:\n        if left == right:\n            return [people[left]]\n        mid = (left + right) // 2\n        left_circle = find_max_balanced_circle(left, mid)\n        right_circle = find_max_balanced_circle(mid + 1, right)\n\n        if not is_valid(left_circle + right_circle):\n            return max(left_circle, right_circle, key=len)\n        else:\n            return left_circle + right_circle\n\n    max_balanced_circle = find_max_balanced_circle(0, n - 1)\n    return str(len(max_balanced_circle)) + \"\\n\" + \" \".join(map(str, max_balanced_circle))",
        "test": "assert solution(\"\"\"7"
    },
    {
        "number": 4323,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    songs = []\n    for i in range(n):\n        a, b = map(int, stdin.split()[2*i+2:2*i+4])\n        songs.append((a, b))\n\n    def get_min_compress(songs, m):\n        songs.sort(key=lambda x: x[1])\n        total_size = sum([s[0] for s in songs])\n        compress_size = sum([s[1] for s in songs])\n        if compress_size > m:\n            return -1\n\n        count = 0\n        for i in range(len(songs)):\n            if compress_size + songs[i][1] <= m:\n                compress_size += songs[i][1]\n                count += 1\n            else:\n                break\n\n        return count\n\n    return str(get_min_compress(songs, m))",
        "test": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\" "
    },
    {
        "number": 4324,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, a, b = map(int, stdin.readline().split())\n        letters = [chr(i) for i in range(ord('a'), ord('a') + 26)]\n        for letter in letters:\n            s = letter * n\n            count = 0\n            for i in range(len(s) - a + 1):\n                if len(set(s[i:i+a])) == b:\n                    count += 1\n            if count == n - a + 1:\n                print(s)\n                break",
        "test": "assert solution(\"4\\n7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"tleelte\\nqwerty\\nvvvvvv\\nabcde\\n\" "
    },
    {
        "number": 4325,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.split())\n    return str(min(n // x * t, (n // x + 1) * t))",
        "test": "assert solution(\"30 15 5\") == \"10\""
    },
    {
        "number": 4326,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_groups = 0\n    \n    # Count the number of groups with 3 or more students\n    for i in range(3, n+1):\n        max_groups += n // i\n    \n    return str(max_groups)",
        "test": "assert solution(\"4\") == \"2\""
    },
    {
        "number": 4327,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n\n    pies = min(P, A) // 2\n\n    return str(pies)",
        "test": "assert solution(\"4 1\") == \"0\""
    },
    {
        "number": 4328,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b % a == 0:\n        return str(a + b)\n    else:\n        return str(b - a)",
        "test": "assert solution(\"4 12\") == \"16\""
    },
    {
        "number": 4329,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if len(t) != len(s) + 1:\n        return \"No\"\n    if t[:len(s)] == s:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"chokudai\\nchokudaiz\") == \"Yes\""
    },
    {
        "number": 4330,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    k = (A + B) // 2\n    if abs(A - k) == abs(B - k):\n        return str(k)\n    else:\n        return \"IMPOSSIBLE\"",
        "test": "assert solution('1 4') == 'IMPOSSIBLE'"
    },
    {
        "number": 4331,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if \"7\" in str(n):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"117\") == \"Yes\""
    },
    {
        "number": 4332,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = sum(map(int, str(N)))\n\n    if N % S == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"12\") == \"Yes\""
    },
    {
        "number": 4333,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n\n    x_3 = x_1 + y_2 - y_1\n    y_3 = y_1 + y_2 - x_1\n\n    x_4 = x_2 - y_1 + y_2\n    y_4 = y_2 - x_1 + x_2\n\n    return f\"{x_3} {y_3} {x_4} {y_4}\"\n\ndef",
        "test": "assert solution(\"0 0 1 0\") == \"0 1 -1 1\""
    },
    {
        "number": 4334,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    strings = input_lines[0].split(\" \")\n    A, B = map(int, input_lines[1].split(\" \"))\n    U = input_lines[2]\n\n    if U == strings[0]:\n        S_count = A - 1\n        T_count = B\n    else:\n        S_count = A\n        T_count = B - 1\n\n    return f\"{S_count} {T_count}\"",
        "test": "assert solution(\"red blue\\n3 4\\nred\") == \"2 4\""
    },
    {
        "number": 4335,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    if N % 2 == 1:\n        return \"No\"\n    else:\n        half_length = N // 2\n        first_half = S[:half_length]\n        second_half = S[half_length:]\n        if first_half == second_half:\n            return \"Yes\"\n        else:\n            return \"No\"",
        "test": "assert solution(\"3\\nabcb\") == \"No\""
    },
    {
        "number": 4336,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    if x == 0 or y == 0 or x == W or y == H:\n        # if the point is on the border, the area of the part is maximum\n        return f\"{H*W} 1\"\n    area1 = x * H\n    area2 = (W - x) * H\n    area3 = x * (H - y)\n    area4 = (W - x) * (H - y)\n    max_area = max(area1, area2, area3, area4)\n    if max_area == area1 or max_area == area2 or max_area == area3 or max_area == area4:\n        # there is only one optimal cut\n        return f\"{max_area} 0\"\n    else:\n        # there are multiple optimal cuts\n        return f\"{max_area} 1\"",
        "test": "assert solution(\"1000000000 1000000000 9000000000 1000000000\") == \"1.000000 1\""
    },
    {
        "number": 4337,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, colors = stdin.split('\\n')\n    n = int(n)\n    colors = colors.split()\n\n    # check if there is a yellow color\n    has_yellow = 'Y' in colors\n\n    # check if there is a pink color\n    has_pink = 'P' in colors\n\n    # check if there is a white color\n    has_white = 'W' in colors\n\n    # check if there is a green color\n    has_green = 'G' in colors\n\n    # check if there are exactly three colors\n    if has_pink and has_white and has_green:\n        return \"Three\"\n    # check if there are exactly four colors\n    elif has_pink and has_white and has_green and has_yellow:\n        return \"Four\"\n    # if there are less than three colors or more than four colors, return an error message\n    else:\n        return \"Error: Invalid number of colors in the bag\"",
        "test": "assert solution(\"10\\nG W G Y W Y W Y P Y W\") == \"Three\""
    },
    {
        "number": 4338,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[0:3])\n    a_list = list(map(int, stdin.split()[3:]))\n    \n    doors = [a for a in a_list]\n    doors_slavik = [0 for _ in doors]\n    \n    for _ in range(10**100):\n        doors_broken = []\n        doors_repair = []\n        \n        for i in range(n):\n            if doors[i] > 0:\n                doors_broken.append(i)\n            else:\n                doors_repair.append(i)\n                \n        if len(doors_broken) == 0 or len(doors_repair) == 0:\n            break\n        \n        doors_broken_player = min(len(doors_broken), len(doors_repair))\n        doors_broken_slavik = len(doors_broken) - doors_broken_player\n        \n        for i in doors_broken[:doors_broken_player]:\n            doors[i] = max(0, doors[i] - x)\n        \n        for i in doors_repair[:doors_broken_slavik]:\n            doors_slavik[i] = min(doors[i], doors_slavik[i] + y)\n    \n    count = 0\n    for durability in doors_slavik:\n        if durability == 0:\n            count += 1\n    \n    return str(count)",
        "test": "assert solution(\"6 3 2\\n2 3 1 3 4 2\") == \"6\""
    },
    {
        "number": 4339,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    b = list(map(int, stdin.split(\"\\n\")[2].split()))\n    \n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                count += 1\n                \n    return str(count)",
        "test": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == \"7\""
    },
    {
        "number": 4340,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    for i in range(n):\n        if a[i] == 1:\n            a[i] = 2\n        elif a[i] == 2:\n            a[i] = 1\n        elif a[i] == 3:\n            a[i] = 4\n        elif a[i] == 4:\n            a[i] = 3\n        elif a[i] == 5:\n            a[i] = 6\n        elif a[i] == 6:\n            a[i] = 5\n        elif a[i] == 7:\n            a[i] = 8\n        elif a[i] == 8:\n            a[i] = 7\n        elif a[i] == 9:\n            a[i] = 10\n        elif a[i] == 10:\n            a[i] = 9\n    return ' '.join(map(str, a))",
        "test": "assert solution('10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000') == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999' "
    },
    {
        "number": 4341,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(graph, start):\n        visited, stack = set(), [start]\n        while stack:\n            node = stack.pop()\n            if node not in visited:\n                visited.add(node)\n                stack.extend(graph[node] - visited)\n        return visited\n\n    def find_cycle_components(graph, visited, cycles):\n        for node in graph:\n            if node not in visited:\n                cycle = dfs(graph, node)\n                cycles.add(tuple(sorted(cycle)))\n                visited.update(cycle)\n        return cycles\n\n    n, m = map(int, stdin.split())\n    graph = {i: set() for i in range(1, n + 1)}\n\n    for _ in range(m):\n        v, u = map(int, input().split())\n        graph[v].add(u)\n        graph[u].add(v)\n\n    cycles = set()\n    find_cycle_components(graph, set(), cycles)\n    return str(len(cycles)) ",
        "test": "assert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\\n\" "
    },
    {
        "number": 4342,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    colors = list(map(int, stdin.readline().split()))\n    edges = []\n    nice_edges = 0\n\n    for _ in range(n - 1):\n        v, u = map(int, stdin.readline().split())\n        edges.append((v, u))\n\n    # Check if the given tree has at least one red and one blue vertex\n    has_red = False\n    has_blue = False\n    for color in colors:\n        if color == 1:\n            has_red = True\n        elif color == 2:\n            has_blue = True\n\n    if not has_red or not has_blue:\n        return \"0\"\n\n    for edge in edges:\n        v, u = edge\n        color_set = set()\n        color_set.add(colors[v - 1])\n        color_set.add(colors[u - 1])\n\n        if 0 not in color_set:\n            nice_edges += 1\n\n    return str(nice_edges)\n\ninput_file = open(\"input.txt\", \"r\")\noutput_file = open(\"output.txt\", \"w\")\noutput_file.write(solution(input_file))\noutput_file.close() ",
        "test": "assert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\""
    },
    {
        "number": 4343,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = stdin.split()\n    k = int(k)\n    \n    def next_string(s: str) -> str:\n        s = list(s)\n        i = len(s) - 1\n        while i >= 0:\n            if s[i] == 'z':\n                s[i] = 'a'\n                i -= 1\n            else:\n                s[i] = chr(ord(s[i]) + 1)\n                break\n        return ''.join(s)\n    \n    current_string = s\n    while current_string < t:\n        current_string = next_string(current_string)\n    \n    def generate_strings(s: str, t: str) -> list:\n        result = [s]\n        while result[-1] < t:\n            result.append(next_string(result[-1]))\n        return result\n    \n    strings = generate_strings(s, t)\n    median_index = len(strings) // 2\n    return strings[median_index]",
        "test": "assert solution(\"2\\naz\\nbf\\n\") == \"bc\""
    },
    {
        "number": 4344,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    ratings = list(map(int, stdin.split()[2:]))\n\n    if k > n or k < 1:\n        return \"NO\"\n\n    for i in range(n):\n        if ratings.count(ratings[i]) > 1:\n            return \"NO\"\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if ratings[i] == ratings[j]:\n                return \"NO\"\n\n    indices = set()\n    while len(indices) < k:\n        index = ratings.index(max(ratings))\n        indices.add(index + 1)\n        ratings[index] = -1\n\n    return \"YES\" + \" \" + \" \".join(map(str, indices))",
        "test": "assert solution(\"5 4\\n15 13 15 15 12\") == \"NO\""
    },
    {
        "number": 4345,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    increasing = []\n    decreasing = []\n\n    for num in a:\n        if len(increasing) == 0 or num >= increasing[-1]:\n            increasing.append(num)\n        else:\n            break\n    else:\n        for num in a:\n            if len(decreasing) == 0 or num <= decreasing[-1]:\n                decreasing.append(num)\n            else:\n                break\n        else:\n            result = []\n            for num in a:\n                if num in increasing:\n                    result.append(0)\n                else:\n                    result.append(1)\n            return \"YES\\n\" + \" \".join(map(str, result))\n\n    return \"NO\"\n",
        "test": "assert solution(\"5\\n1 2 4 0 2\") == \"NO\""
    },
    {
        "number": 4346,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    def count_lanterns(L: int, v: int, l: int, r: int) -> int:\n        divisible_points = set()\n        for i in range(l, r + 1):\n            if i % v == 0:\n                divisible_points.add(i)\n\n        return len(divisible_points)\n\n    t = int(stdin.readline())\n    queries = []\n    for _ in range(t):\n        L, v, l, r = map(int, stdin.readline().split())\n        queries.append((L, v, l, r))\n\n    result = []\n    for L, v, l, r in queries:\n        v_gcd = gcd(v, L)\n        if l % v_gcd != 0:\n            l = l // v_gcd * v_gcd\n        if r % v_gcd != v_gcd - 1:\n            r = r // v_gcd * v_gcd + v_gcd - 1\n\n        result.append(count_lanterns(L, v, l, r))\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\""
    },
    {
        "number": 4347,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 != 0 or n < 2:\n        return \"Invalid input\"\n    \n    dances = 0\n    if n == 2:\n        return \"1\"\n    elif n == 4:\n        dances = 3\n    elif n == 6:\n        dances = 10\n    elif n == 8:\n        dances = 1260\n    elif n == 10:\n        dances = 7560\n    elif n == 12:\n        dances = 523776\n    elif n == 14:\n        dances = 4325696\n    elif n == 16:\n        dances = 403494526\n    elif n == 18:\n        dances = 401495001600\n    elif n == 20:\n        dances = 12164510040883200\n    \n    return str(dances)",
        "test": "assert solution('2') == '1'"
    },
    {
        "number": 4348,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    for _ in range(k):\n        for letter in 'abcdefghijklmnopqrstuvwxyz':\n            if letter in s:\n                s = s.replace(letter, '', 1)\n                break\n    return s if s else ''",
        "test": "assert solution(\"15 9\\ncccaabababaccbc\") == \"cccccc\""
    },
    {
        "number": 4349,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def read_line() -> str:\n        return stdin.readline().strip()\n\n    n, m = map(int, read_line().split())\n    k = list(map(int, read_line().split()))\n\n    offers = []\n    for _ in range(m):\n        d, t = map(int, read_line().split())\n        offers.append((d, t))\n\n    # sort offers by day\n    offers.sort(key=lambda x: x[0])\n\n    # calculate min_day\n    min_day = 1\n    burles = 0\n    for day, offer in enumerate(offers, start=1):\n        if offer[1] <= k[offer[1]-1]:\n            k[offer[1]-1] -= 1\n            burles += 1\n        else:\n            min_day = offer[0]\n            break\n\n    return str(min_day)",
        "test": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\" "
    },
    {
        "number": 4350,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    grid = [list(stdin.split()[i]) for i in range(1, n+1)]\n    \n    def is_star_possible(size, row, col):\n        if size == 0:\n            return False\n        if row < 0 or row >= n or col < 0 or col >= m:\n            return False\n        for i in range(row-size, row+size+1):\n            for j in range(col-size, col+size+1):\n                if i >= 0 and i < n and j >= 0 and j < m:\n                    if grid[i][j] == '*':\n                        return False\n        return True\n    \n    def find_stars(row, col, stars):\n        if row < 0 or row >= n or col < 0 or col >= m:\n            return\n        if grid[row][col] == '*':\n            size = 1\n            while is_star_possible(size+1, row, col):\n                size += 1\n            if size == 1:\n                return\n            for i in range(row-size, row+size+1):\n                for j in range(col-size, col+size+1):\n                    if i >= 0 and i < n and j >= 0 and j < m:\n                        grid[i][j] = '.'\n            stars.append((row, col, size))\n            find_stars(row-1, col, stars)\n            find_stars(row, col-1, stars)\n            find_stars(row+1, col, stars)\n            find_stars(row, col+1, stars)\n    \n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                find_stars(i, j, stars)\n    if len(stars) > n*m:\n        return \"-1\"\n    else:\n        result = str(len(stars)) + \"\\n\"\n        for s in stars:\n            result += \" \".join(map(str, s)) + \"\\n\"\n        return result.rstrip()",
        "test": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n\""
    },
    {
        "number": 4351,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if str(N) == str(N)[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('575') == 'Yes'"
    },
    {
        "number": 4352,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if A > B:\n        return \"Alice\"\n    elif A < B:\n        return \"Bob\"\n    else:\n        return \"Draw\"",
        "test": "assert solution(\"8 6\") == \"Alice\""
    },
    {
        "number": 4353,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(\",\", \" \")\n    return s",
        "test": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'"
    },
    {
        "number": 4354,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    students = [tuple(map(int, line.split())) for line in lines[1:N+1]]\n    checkpoints = [tuple(map(int, line.split())) for line in lines[N+1:]]\n\n    result = []\n    for student in students:\n        min_distance = float(\"inf\")\n        min_checkpoint = 0\n        for j, checkpoint in enumerate(checkpoints):\n            distance = abs(student[0] - checkpoint[0]) + abs(student[1] - checkpoint[1])\n            if distance < min_distance:\n                min_distance = distance\n                min_checkpoint = j + 1\n        result.append(min_checkpoint)\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\""
    },
    {
        "number": 4355,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = a + a**2 + a**3\n    return str(result)",
        "test": "assert solution(\"2\") == \"14\" "
    },
    {
        "number": 4356,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M, A, B = parse_input(stdin)\n\n    # Check if template B is in image A\n    is_contained = False\n    for i in range(N - M + 1):\n        for j in range(N - M + 1):\n            if check_subimage(A, B, i, j, N, M):\n                is_contained = True\n                break\n        if is_contained:\n            break\n\n    # Return output\n    return \"Yes\" if is_contained else \"No\"\n\ndef",
        "test": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n#.\\n\") == \"No\""
    },
    {
        "number": 4357,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    max_allowance = 0\n\n    for a in range(1, 10):\n        for b in range(1, 10):\n            for c in range(1, 10):\n                for o in ['+', '-', '*']:\n                    formula = f\"{a}{o}{b}{o}{c}\"\n                    if o == '+':\n                        allowance = eval(formula)\n                    else:\n                        allowance = -1\n                    if allowance > max_allowance and all(str(i) in formula for i in [A, B, C]):\n                        max_allowance = allowance\n\n    return str(max_allowance)",
        "test": "assert solution(\"4 6 9\") == \"68\""
    },
    {
        "number": 4358,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    prices = list(map(int, stdin.split()[1:]))\n    max_price = max(prices)\n    prices.remove(max_price)\n    total = max_price / 2 + sum(prices)\n    return str(int(total))",
        "test": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\""
    },
    {
        "number": 4359,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    A += B\n    A += C\n    A += D\n    A += E\n    return A % 10 if A % 10 == 0 else 10 - (A % 10)\n\ninput_str = input()\nprint(solution(input_str)) ",
        "test": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\" "
    },
    {
        "number": 4360,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    inverses = [1 / x for x in A]\n    total_inverse = sum(inverses)\n    return str(1 / total_inverse)",
        "test": "assert solution(\"2\\n10 30\") == \"7.5\""
    },
    {
        "number": 4361,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    heights = list(map(int, stdin.split()[2:]))\n\n    # sort the heights in ascending order\n    heights.sort()\n\n    # calculate the minimum possible difference\n    min_diff = heights[K-1] - heights[0]\n\n    return str(min_diff)",
        "test": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\""
    },
    {
        "number": 4362,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isupper():\n        return \"A\"\n    else:\n        return \"a\"",
        "test": "assert solution(\"A\") == \"A\""
    },
    {
        "number": 4363,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    count = 0\n\n    for i in range(K + 1):\n        for j in range(K + 1):\n            k = S - i - j\n            if 0 <= k <= K:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"2 2\") == \"6\" "
    },
    {
        "number": 4364,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin.isdigit() or len(stdin) != 4:\n        return \"NA\"\n\n    year = int(stdin[:2])\n    month = int(stdin[2:])\n\n    if year < 10:\n        year += 2000\n    elif year < 30:\n        year += 1900\n\n    if 1 <= month <= 12:\n        return \"YYMM\"\n    elif 1 <= month <= 12:\n        return \"MMYY\"\n    else:\n        return \"NA\"",
        "test": "assert solution(\"1905\") == \"YYMM\""
    },
    {
        "number": 4365,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    count = 0\n    for i in range(1, k+1):\n        for j in range(i+1, k+1):\n            if (i % 2 == 0) != (j % 2 == 0):\n                count += 1\n    return str(count)",
        "test": "assert solution('3') == '2'  # Test case 1"
    },
    {
        "number": 4366,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    A = int(input_list[0])\n    B = int(input_list[1])\n    \n    # calculate the time in 24-hour format\n    start_time = (A + B) % 24\n    \n    return str(start_time)",
        "test": "assert solution(\"9 12\") == \"21\" "
    },
    {
        "number": 4367,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    \n    if N >= 10:\n        return str(R)\n    else:\n        return str(R + 100 * (10 - N))\n    \n",
        "test": "assert solution(\"2 2919\") == \"3719\""
    },
    {
        "number": 4368,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    while N > 0:\n        N //= K\n        count += 1\n    return str(count)",
        "test": "assert solution(\"11 2\") == \"4\""
    },
    {
        "number": 4369,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    pages = 0\n    while N > 0:\n        if N % 4 == 0:\n            pages += N // 4\n            break\n        elif N % 4 <= 2:\n            pages += 1\n            N -= 2\n        else:\n            pages += 2\n            N -= 4\n    return str(pages)",
        "test": "assert solution(\"5\") == \"3\""
    },
    {
        "number": 4370,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1 or B == 1 or A + B == 16:\n        return \"Yay!\"\n    else:\n        return \":(\"",
        "test": "assert solution(\"16 16\") == \":(\""
    },
    {
        "number": 4371,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    min_diff = float('inf')\n    \n    for i in range(len(s) - 2):\n        num = int(s[i:i+3])\n        diff = abs(num - 753)\n        min_diff = min(min_diff, diff)\n    \n    return str(min_diff)",
        "test": "assert solution('1234567876') == '34'"
    },
    {
        "number": 4372,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, swords = stdin.split()\n    n = int(n)\n    a = list(map(int, swords.split()))\n\n    def is_valid(y, z):\n        total_swords = sum(a)\n        if total_swords % y != 0:\n            return False\n        swords_per_person = total_swords // y\n        if z * y != total_swords:\n            return False\n        for i in range(n):\n            if a[i] > z:\n                return False\n        return True\n\n    min_y = 1\n    min_z = a[0]\n    for z in range(1, a[0] + 1):\n        for y in range(2, n * z + 1):\n            if is_valid(y, z):\n                min_y = min(min_y, y)\n                min_z = max(min_z, z)\n\n    return f\"{min_y} {min_z}\"\n\ndef",
        "test": "assert solution(\"2\\n2 9\\n\") == \"1 7\\n\""
    },
    {
        "number": 4373,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, contests = stdin.split('\\n')\n    n = int(n)\n    contests = list(map(int, contests.split()))\n\n    days = 0\n    for i, contest_problems in enumerate(contests):\n        if contest_problems > days:\n            days = contest_problems\n            if days > n:\n                break\n\n    return str(days)",
        "test": "assert solution(\"3\\n1 1 1\") == \"1\""
    },
    {
        "number": 4374,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    edges = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n\n    # Check if the graph is already a tree\n    if len(edges) == n - 1:\n        diameter = 1\n        print(diameter)\n        return \"\"\n\n    # Find the connected component with the most vertices\n    max_cc_size = 0\n    for i in range(1, n + 1):\n        visited = set()\n        dfs(i, visited)\n        if len(visited) > max_cc_size:\n            max_cc_size = len(visited)\n\n    # Calculate the diameter\n    diameter = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if not is_edge(i, j, edges):\n                diameter += 1\n\n    # Add edges to the tree\n    result = []\n    added_edges = 0\n    while added_edges < n - max_cc_size:\n        max_diameter = diameter\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                if not is_edge(i, j, edges):\n                    new_edges = edges + [(i, j)]\n                    new_diameter = calculate_diameter(new_edges)\n                    if new_diameter < max_diameter:\n                        max_diameter = new_diameter\n                        result = new_edges\n        added_edges += 1\n\n    # Print the result\n    print(max_diameter)\n    for edge in result:\n        print(*edge)\n\ndef",
        "test": "assert solution(\"2 0\") == \"1\\n1 2\""
    },
    {
        "number": 4375,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    weights = list(map(int, stdin.split()[2:]))\n    graph = [[] for _ in range(n)]\n    for _ in range(n-1):\n        u, v = map(int, stdin.split()[:2])\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    \n    def dfs(node: int, visited: set, depth: int) -> int:\n        if depth == k:\n            return 0\n        max_weight = 0\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                max_weight = max(max_weight, dfs(neighbor, visited, depth + 1))\n                visited.remove(neighbor)\n        return weights[node] + max_weight\n    \n    max_weight = 0\n    for node in range(n):\n        max_weight = max(max_weight, dfs(node, {node}, 0))\n    \n    return str(max_weight)",
        "test": "assert solution(\"7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\") == \"4\" "
    },
    {
        "number": 4376,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()[0:2]))\n    rooms = list(map(int, stdin.split()[2:]))\n    dormitories = []\n    start = 1\n    for a in rooms:\n        dormitories.append(list(range(start, start + a)))\n        start += a\n\n    for b in range(m):\n        room_num = rooms.index(b) + 1\n        if room_num <= n:\n            print(f\"{room_num} {dormitories[room_num - 1].index(b) + 1}\")\n        else:\n            for i in range(n):\n                if b in dormitories[i]:\n                    print(f\"{i + 1} {dormitories[i].index(b) + 1}\")\n                    break\n    return \"\"\n\ninput_str = input()\nsolution(input_str) ",
        "test": "assert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\\n\" "
    },
    {
        "number": 4377,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4 = map(int, stdin.split())\n    guesses = []\n    for a in range(1, x1+1):\n        for b in range(1, x2+1):\n            for c in range(1, x3+1):\n                if a+b == x4 and a+c == x3 and b+c == x2:\n                    guesses.append([a, b, c])\n    return str(guesses[0])\n\ninput_stdin = \"3 6 5 4\"\nprint(solution(input_stdin)) ",
        "test": "assert solution(\"40 40 40 60\") == \"20 20 20\""
    },
    {
        "number": 4378,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, garland = stdin.split(\"\\n\")\n    n = int(n)\n\n    recolor_count = 0\n    diverse_garland = \"\"\n\n    for i in range(n - 1):\n        if garland[i] == garland[i + 1]:\n            diverse_garland += garland[i]\n            recolor_count += 1\n        else:\n            diverse_garland += garland[i]\n\n    diverse_garland += garland[-1]\n\n    output = f\"{recolor_count}\\n{diverse_garland}\"\n\n    return output\n",
        "test": "assert solution(\"8\\nBBBGBRRR\") == \"2\\nBRBGBRGR\""
    },
    {
        "number": 4379,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    arr = list(map(int, stdin.splitlines()[1].split()))\n\n    def is_increasing(seq):\n        return all(seq[i] + 1 == seq[i + 1] for i in range(len(seq) - 1))\n\n    def find_subsequences(arr):\n        subsequences = []\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr) + 1):\n                subsequences.append(arr[i:j])\n        return subsequences\n\n    max_length = 1\n    max_subseq = []\n    for subseq in find_subsequences(arr):\n        if is_increasing(subseq) and len(subseq) > max_length:\n            max_length = len(subseq)\n            max_subseq = subseq\n\n    return str(max_length) + \"\\n\" + \" \".join(str(arr.index(x) + 1) for x in max_subseq)",
        "test": "assert solution(\"6\\n1 3 5 2 4 6\\n\") == \"2\\n1 4\\n\""
    },
    {
        "number": 4380,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if (A * B) % 2 == 1:\n        return \"Yes\"\n\n    return \"No\"",
        "test": "assert solution(\"3 1\") == \"Yes\""
    },
    {
        "number": 4381,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if Y % 2 == 0:\n        half_fare = Y // 2\n        total_cost = X + half_fare\n        return str(total_cost)\n    else:\n        return \"Invalid input. Y must be an even number.\"",
        "test": "assert solution(\"81 58\") == \"110\""
    },
    {
        "number": 4382,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(n ** 3)",
        "test": "assert solution('2') == '8', \"Test case 1 failed\""
    },
    {
        "number": 4383,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 5 or x == 7 or x == 3:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5\") == \"YES\""
    },
    {
        "number": 4384,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N < 1000:\n        return \"ABC\"\n    elif N < 2000:\n        return \"ABD\"\n    else:\n        return \"ABE\"",
        "test": "assert solution(\"1\") == \"ABC\""
    },
    {
        "number": 4385,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    \n    distances = [\n        b - a,\n        c - b,\n        d - c,\n        e - d,\n        e - b,\n        e - a,\n        d - b,\n        d - a,\n        c - b,\n        c - a,\n        b - a\n    ]\n    \n    for distance in distances:\n        if distance > k:\n            return \":( Cannot communicate directly\"\n    \n    return \"Yay!\"",
        "test": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\""
    },
    {
        "number": 4386,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, s = stdin.strip().split('\\n')\n    a = int(a)\n    if a < 3200:\n        return \"red\"\n    else:\n        return s",
        "test": "assert solution(\"3200\\npink\") == \"pink\"  # a >= 3200, print s"
    },
    {
        "number": 4387,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin)\n    \n    if rating < 1200:\n        return \"ABC\"\n    elif rating < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"",
        "test": "assert solution(\"1199\") == \"ABC\""
    },
    {
        "number": 4388,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    new_n = \"\"\n    for digit in str(n):\n        if digit == \"1\":\n            new_n += \"9\"\n        elif digit == \"9\":\n            new_n += \"1\"\n        else:\n            new_n += digit\n    return new_n",
        "test": "assert solution(\"119\") == \"991\""
    },
    {
        "number": 4389,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    outputs = []\n    \n    for i in range(1, t+1):\n        b = lines[i]\n        a = \"\"\n        for j in range(len(b)-1):\n            substring = b[j:j+2]\n            if substring not in a:\n                a += substring\n        outputs.append(a)\n        \n    return \"\\n\".join(outputs)\n\ndef",
        "test": "assert solution(\"ac\") == \"ac\""
    },
    {
        "number": 4390,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    results = []\n\n    for i in range(1, t + 1):\n        a, b = map(int, stdin.split('\\n')[i].split())\n\n        if a % b == 0:\n            results.append(0)\n        else:\n            results.append(b - a % b)\n\n    return \"\\n\".join(map(str, results))",
        "test": "assert solution(\"5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\""
    },
    {
        "number": 4391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    temperatures = list(map(int, stdin.splitlines()[1].split()))\n\n    def average_temperature(start: int, end: int) -> float:\n        return sum(temperatures[start:end+1]) / (end - start + 1)\n\n    max_heat_intensity = 0\n    for i in range(n - k + 1):\n        max_heat_intensity = max(max_heat_intensity, average_temperature(i, i+k-1))\n\n    return str(max_heat_intensity)",
        "test": "assert solution(\"4 3\\n3 4 1 2\") == \"2.666666666666667\""
    },
    {
        "number": 4392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_sorted(a: List[int]) -> bool:\n        return all(a[i] <= a[i + 1] for i in range(len(a) - 1))\n\n    def swap(a: List[int], i: int, j: int) -> None:\n        a[i], a[j] = a[j], a[i]\n\n    def swap_adjacent(a: List[int], p: Set[int]) -> List[int]:\n        for i in p:\n            swap(a, i, i + 1)\n        return a\n\n    def can_sort(a: List[int], p: List[int]) -> bool:\n        m = len(p)\n        n = len(a)\n        p = set(p)\n        sorted_a = sorted(a)\n\n        for i in range(n - m):\n            if a[i] != sorted_a[i]:\n                return False\n\n        return is_sorted(a) and is_sorted(swap_adjacent(a.copy(), p))\n\n    t = int(stdin.readline())\n    result = []\n\n    for _ in range(t):\n        n, m = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        p = list(map(int, stdin.readline().split()))\n\n        if can_sort(a, p):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n\ninput_string = \"\"\"6\n3 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1\n4 2\n2 1 4 3\n1 3\n4 2\n4 3 2 1\n1 3\n5 2\n2 1 2 3 3\n1 4\n\"\"\"\n\nprint(solution(input_string)) ",
        "test": "assert solution(\"6\\n3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\") == \"YES\\nNO\\nYES\\nNO\\nYES\\n\" "
    },
    {
        "number": 4393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    s = \"\"\n    for char in t:\n        if char not in s:\n            s += char * n\n            n -= 1\n    return s\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "assert solution(\"10\\noopppssss\") == \"oops\""
    },
    {
        "number": 4394,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    edges = []\n    for i in range(m):\n        u, v, w = map(int, input().split())\n        edges.append((u, v, w))\n\n    def mst(edges):\n        n_vertices = len(set(sum(edges, ())))\n        adj_matrix = [[float('inf')] * n_vertices for _ in range(n_vertices)]\n\n        for i in range(len(edges)):\n            adj_matrix[edges[i][0] - 1][edges[i][1] - 1] = edges[i][2]\n            adj_matrix[edges[i][1] - 1][edges[i][0] - 1] = edges[i][2]\n\n        visited = [False] * n_vertices\n        visited[0] = True\n        min_cost = 0\n        mst = []\n\n        for i in range(n_vertices - 1):\n            min_cost_edge = (float('inf'), -1, -1)\n            for j in range(n_vertices):\n                if not visited[j]:\n                    min_cost_edge = min(min_cost_edge, (adj_matrix[0][j], 0, j + 1))\n\n            min_cost += min_cost_edge[0]\n            mst.append(min_cost_edge)\n            visited[min_cost_edge[2] - 1] = True\n\n        return mst\n\n    def find_unified_mst(edges, mst):\n        edge_index = {edge: i for i, edge in enumerate(edges)}\n        unified_mst = []\n\n        for edge in mst:\n            unified_mst.append(edge)\n            while True:\n                neighbors = [(u, v, w) for u, v, w in edges if u == edge[1] or v == edge[1]]\n                if not neighbors:\n                    break\n                neighbor = min(neighbors, key=lambda x: x[2])\n                if edge_index[neighbor] < edge_index[edge]:\n                    edge = neighbor\n                unified_mst.append(edge)\n\n        return unified_mst\n\n    initial_mst = mst(edges)\n    unified_mst = find_unified_mst(edges, initial_mst)\n    min_operations = 0\n\n    for edge in edges:\n        if edge not in unified_mst:\n            min_operations += 1\n\n    return str(min_operations)\n\ninput_data = '''8 10\n1 2 1\n2 3 2\n2 4 5\n1 4 2\n6 3 3\n6 1 3\n3 5 2\n3 7 1\n4 8 1\n6 2 4'''\n\nprint(solution(input_data)) ",
        "test": "assert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == \"0\""
    },
    {
        "number": 4395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    garland = stdin.split(\"\\n\")[1]\n\n    def is_nice(garland: str) -> bool:\n        colors = {'R': 0, 'G': 0, 'B': 0}\n        for lamp in garland:\n            colors[lamp] += 1\n        for color in colors.values():\n            if color > 1 and color % 3 != 0:\n                return False\n        return True\n\n    def recolor(garland: str) -> str:\n        new_garland = []\n        for i, lamp in enumerate(garland):\n            if lamp == 'R':\n                new_garland.append('G')\n            elif lamp == 'G':\n                new_garland.append('B')\n            elif lamp == 'B':\n                new_garland.append('R')\n        return ''.join(new_garland)\n\n    def min_recolors(garland: str) -> int:\n        if is_nice(garland):\n            return 0\n        for i in range(n):\n            new_garland = garland[:i] + recolor(garland[i]) + garland[i+1:]\n            if is_nice(new_garland):\n                return 1 + min_recolors(new_garland)\n        return 1 + min_recolors(recolor(garland))\n\n    return str(min_recolors(garland)) + \"\\n\" + recolor(garland)\n\ninput_str = \"7\\nRGBGRBB\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"7\\nRGBGRBB\") == \"3\\nRGBRGBR\" "
    },
    {
        "number": 4396,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    total = 0\n\n    for i in range(1, N + 1):\n        x, u = lines[i].split()\n        if u == 'JPY':\n            total += int(x)\n        else:\n            total += float(x) * 380000.0\n\n    return str(total)",
        "test": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\""
    },
    {
        "number": 4397,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    j = N - (i - 1)\n    return str(j)",
        "test": "assert solution(\"1 1\") == \"1\""
    },
    {
        "number": 4398,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, S, T = stdin.split()\n    N = int(N)\n    new_string = \"\"\n    for i in range(N):\n        new_string += S[i]\n        new_string += T[i]\n    return new_string",
        "test": "assert solution(\"2\\nip cc\") == \"icpc\""
    },
    {
        "number": 4399,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0] == stdin[2]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"ABA\") == \"Yes\""
    },
    {
        "number": 4400,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    rainy_days = 0\n    max_rainy_days = 0\n\n    for day in stdin:\n        if day == \"R\":\n            rainy_days += 1\n            max_rainy_days = max(max_rainy_days, rainy_days)\n        else:\n            rainy_days = 0\n\n    return max_rainy_days ",
        "test": "assert solution(\"SSS\") == \"0\""
    },
    {
        "number": 4401,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    \n    # swap A and B\n    a, b = x, y\n    x, y = b, a\n    \n    # swap A and C\n    a, c = x, z\n    x, z = c, a\n    \n    return f\"{x} {y} {z}\"",
        "test": "assert solution(\"1 2 3\") == \"3 1 2\""
    },
    {
        "number": 4402,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    age, price = map(int, stdin.split())\n    \n    if age < 6:\n        return \"0\"\n    elif age <= 12:\n        return str(price // 2)\n    elif age >= 13:\n        return str(price)\n    else:\n        return \"Invalid Age\"\n    \n",
        "test": "assert solution(\"30 100\") == \"100\""
    },
    {
        "number": 4403,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    initial_value = 0\n    for symbol in stdin:\n        if symbol == \"+\":\n            initial_value += 1\n        else:\n            initial_value -= 1\n    return str(initial_value)",
        "test": "assert solution('+-++') == '2'"
    },
    {
        "number": 4404,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    year, month, day = stdin.split(\"/\")\n    year, month, day = int(year), int(month), int(day)\n    \n    if year == 2019 and month == 4 and day <= 30:\n        return \"Heisei\"\n    else:\n        return \"TBD\"",
        "test": "assert solution(\"2019/04/30\") == \"Heisei\""
    },
    {
        "number": 4405,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    topics = list(map(int, stdin.readline().strip().split()))\n\n    topic_count = {}\n    for topic in topics:\n        if topic in topic_count:\n            topic_count[topic] += 1\n        else:\n            topic_count[topic] = 1\n\n    contests = []\n    prev_count = 0\n    for count in sorted(topic_count.values(), reverse=True):\n        if count > 0:\n            if count == prev_count:\n                count += 1\n            contests.append(count)\n            prev_count = count\n\n    return str(sum(contests))\n\ninput_data = \"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\"\nprint(solution(io.StringIO(input_data))) ",
        "test": "assert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\""
    },
    {
        "number": 4406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    ids = list(map(int, stdin.split()[1].split()))\n\n    conversations = []\n    for i in range(n):\n        if ids[i] not in conversations:\n            conversations.insert(0, ids[i])\n            if len(conversations) > k:\n                conversations.pop()\n\n    return str(len(conversations)) + \"\\n\" + \" \".join(map(str, conversations))\n\ninput_string = input()\nprint(solution(input_string)) ",
        "test": "assert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\\n\""
    },
    {
        "number": 4407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[0:2])\n    coins = list(map(int, stdin.split()[2:2+n]))\n    queries = list(map(int, stdin.split()[2+n:]))\n\n    def find_coins(target: int, coins: list) -> int:\n        coins.sort(reverse=True)\n        count = 0\n        for coin in coins:\n            count += target // coin\n            target %= coin\n        return count\n\n    answers = []\n    for query in queries:\n        answers.append(find_coins(query, coins) if query <= max(coins) else -1)\n\n    return \" \".join(map(str, answers))",
        "test": "assert solution('5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n') == '1\\n-1\\n3\\n2\\n'"
    },
    {
        "number": 4408,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, k = map(int, lines[0].split())\n    cards = list(map(int, lines[1].split()))\n    favorites = list(map(int, lines[2].split()))\n    joy_levels = list(map(int, lines[3].split()))\n\n    card_dict = {}\n    for card in cards:\n        card_dict[card] = card_dict.get(card, 0) + 1\n\n    total_joy = 0\n    for favorite in favorites:\n        if favorite not in card_dict:\n            continue\n        joy = 0\n        count = card_dict[favorite]\n        for i, level in enumerate(joy_levels):\n            if count >= i:\n                joy += level\n        total_joy += joy\n\n    return str(total_joy)",
        "test": "assert solution(\"3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\" "
    },
    {
        "number": 4409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    # Calculate the target value\n    target_value = sum(a) // n\n\n    # Initialize the operation list\n    operations = []\n\n    # Initialize the current array\n    current_array = a.copy()\n\n    # Loop until all elements are equal to the target value\n    while any(current_array[i] != target_value for i in range(n)):\n        # Find the pair of indices with the maximum difference\n        max_diff = 0\n        max_indices = []\n        for i in range(n):\n            for j in range(n):\n                if i != j and abs(current_array[i] - current_array[j]) > max_diff:\n                    max_diff = abs(current_array[i] - current_array[j])\n                    max_indices = [i, j]\n\n        # Perform the operation\n        if current_array[max_indices[0]] > current_array[max_indices[1]]:\n            operations.append(('1', max_indices[0]+1, max_indices[1]+1))\n            current_array[max_indices[0]] = target_value\n        else:\n            operations.append(('2', max_indices[0]+1, max_indices[1]+1))\n            current_array[max_indices[0]] = target_value - abs(current_array[max_indices[0]] - current_array[max_indices[1]])\n\n    # Print the result\n    result = [str(len(operations))]\n    result.extend([' '.join(operation) for operation in operations])\n    return '\\n'.join(result)",
        "test": "assert solution(\"3\\n2 8 10\") == \"2\\n2 2 1\\n2 3 2\""
    },
    {
        "number": 4410,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    result = []\n    \n    for i in range(0, len(test_cases), 2):\n        n, k = map(int, test_cases[i].split())\n        s = test_cases[i+1]\n        \n        free_tables = s.count('0')\n        occupied_tables = s.count('1')\n        \n        if occupied_tables == 0 or occupied_tables == n:\n            result.append(free_tables)\n        else:\n            max_tables = 0\n            for i in range(occupied_tables):\n                index = s.find('1', i+1)\n                distance = index - i - 1\n                max_tables = max(max_tables, free_tables - (distance // k + 1))\n                \n            result.append(max_tables)\n            \n    return \"\\n\".join(map(str, result))\n\ninput_data = \"\"\"6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\"\"\"\n\nprint(solution(input_data)) ",
        "test": "assert solution(\"6 1\\n100010\") == \"1\""
    },
    {
        "number": 4411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    \n    segments.sort(key=lambda x: x[1])\n    left = 0\n    count = 0\n    result = []\n    \n    for i in range(len(segments)):\n        if segments[i][0] > left:\n            count = 1\n            left = segments[i][1]\n            continue\n        \n        if segments[i][1] < left:\n            count = 1\n            left = segments[i][1]\n            continue\n        \n        count += 1\n        if count > k:\n            result.append(i)\n    \n    return str(len(result)) + \"\\n\" + \" \".join(map(str, result))\n\n\nstdin = \"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\"\nprint(solution(stdin))\n\nstdin = \"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\"\nprint(solution(stdin))\n\nstdin = \"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5\""
    },
    {
        "number": 4412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def is_pretty(a, b):\n        return gcd(a, b) == 1\n\n    def is_pretty_set(s):\n        return all(is_pretty(s[i], s[j]) for i in range(len(s)) for j in range(i + 1, len(s)))\n\n    def max_prettiness(a, b, c):\n        return max(a + b, a + c, b + c)\n\n    def max_prettiness_in_set(s):\n        if len(s) == 1:\n            return s[0]\n        if len(s) == 2:\n            return max(s)\n        return max(max_prettiness(s[i], s[j], s[k]) for i in range(len(s)) for j in range(i + 1, len(s)) for k in range(j + 1, len(s)))\n\n    output = []\n    for _ in range(int(stdin.readline())):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        s = set(a)\n        while len(s) < 3:\n            s.add(max(s) + 1)\n        s = sorted(list(s), reverse=True)\n        if is_pretty_set(s):\n            output.append(max_prettiness_in_set(s))\n        else:\n            output.append(\"-1\")\n    return \"\\n\".join(map(str, output))\n",
        "test": "assert solution(\"3\\n4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\") == \"30\\n31\\n10\" "
    },
    {
        "number": 4413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    result = []\n    for i in range(q):\n        n = int(stdin.split()[1])\n        skills = list(map(int, stdin.split()[1:n+1]))\n        min_teams = float('inf')\n        for i in range(1, n+1):\n            for j in range(i+1, n+1):\n                if skills[j-1] - skills[i-1] > 1:\n                    min_teams = min(min_teams, i + j - 2)\n        result.append(min_teams)\n    return '\\n'.join(map(str, result))\n\ndef",
        "test": "assert solution('4\\n4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'"
    },
    {
        "number": 4414,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.splitlines()\n    q = int(test_cases[0])\n    for i in range(1, q+1):\n        a, b, n, S = map(int, test_cases[i].split())\n        if n*a + b >= S:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
        "test": "assert solution(\"4\\n1 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18\") == \"YES\\nNO\\nNO\\nYES\\n\" "
    },
    {
        "number": 4415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, sequence = stdin.split()\n    n = int(n)\n    a = [int(x) for x in sequence.split()]\n\n    # Create empty arrays for increasing and decreasing sequences\n    increasing = []\n    decreasing = []\n\n    # Initialize variables for finding increasing and decreasing sequences\n    increasing_start = 0\n    decreasing_end = n - 1\n    increasing_index = 0\n    decreasing_index = 0\n\n    # Check if the sequence is strictly increasing or decreasing\n    increasing_flag = True\n    decreasing_flag = True\n\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            increasing_flag = False\n        if a[i] < a[i - 1]:\n            decreasing_flag = False\n\n    # If the sequence is strictly increasing or decreasing, find the increasing and decreasing sequences\n    if increasing_flag:\n        increasing = a\n        decreasing = []\n    elif decreasing_flag:\n        increasing = []\n        decreasing = a\n    else:\n        # Find the increasing and decreasing sequences\n        for i in range(n):\n            if increasing_start < i < decreasing_end:\n                if a[i] < a[i + 1]:\n                    increasing.append(a[i])\n                    increasing_index += 1\n                elif a[i] > a[i - 1]:\n                    decreasing.append(a[i])\n                    decreasing_index += 1\n            elif increasing_start == i:\n                if a[i] < a[i + 1]:\n                    increasing.append(a[i])\n                    increasing_index += 1\n            elif decreasing_end == i:\n                if a[i] > a[i - 1]:\n                    decreasing.append(a[i])\n                    decreasing_index += 1\n\n    # Check if the union of increasing and decreasing sequences is a permutation of the given sequence\n    if increasing_index + decreasing_index != n:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + str(increasing_index) + \"\\n\" + \" \".join([str(x) for x in increasing]) + \"\\n\" + str(decreasing_index) + \"\\n\" + \" \".join([str(x) for x in decreasing])",
        "test": "assert solution(\"5\\n4 3 1 5 3\\n\") == \"YES\\n1\\n4\\n5 4 3 1 \\n\""
    },
    {
        "number": 4416,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def check(k, books):\n        alice = [t for t, a, b in books if a == 1]\n        bob = [t for t, a, b in books if b == 1]\n        if len(alice) >= k and len(bob) >= k:\n            return True\n        return False\n\n    n, k = map(int, stdin.split()[0:2])\n    books = []\n    for i in range(1, n+1):\n        line = stdin.split('\\n')[i].split()\n        t, a, b = map(int, line)\n        books.append((t, a, b))\n\n    books.sort(key=lambda x: x[0])\n    total_time = 0\n\n    for i in range(len(books)):\n        if check(k, books[:i+1]):\n            total_time += books[i][0]\n            if check(k, books[:i+1]):\n                return str(total_time)\n\n    return \"-1\"",
        "test": "assert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\") == \"8\\n\""
    },
    {
        "number": 4417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    result = []\n\n    for _ in range(q):\n        n, k = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n\n        min_price = max(a)\n        max_price = sum(a) // n\n\n        if k >= max_price - min_price:\n            result.append(-1)\n            continue\n\n        B = min_price + k\n        result.append(B)\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\""
    },
    {
        "number": 4418,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    def is_good(length: int) -> bool:\n        if length % 6 != 0:\n            return False\n        subsequence = [[] for _ in range(6)]\n        for i in range(length):\n            j = a[i] - 4\n            subsequence[j].append(i)\n        return all(len(s) >= length // 6 for s in subsequence)\n    \n    for i in range(n, 0, -1):\n        if is_good(i):\n            return str(n - i)\n    return str(n)",
        "test": "assert solution(\"5\\n4 8 15 16 23\") == \"5\""
    },
    {
        "number": 4419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split('\\n')\n    t = int(test_cases[0])\n    del test_cases[0]\n\n    result = []\n\n    for i in range(t):\n        a, b = map(int, test_cases[i].split())\n        moves = 0\n        while a != b:\n            if a < b:\n                k = min(10, b - a)\n                a += k\n                moves += k\n            else:\n                k = min(10, a - b)\n                a -= k\n                moves += k\n        result.append(str(moves))\n\n    return '\\n'.join(result)\n",
        "test": "assert solution('6\\n5 5\\n13 42\\n18 4\\n1337 420\\n123456789 1000000000\\n100500 9000\\n') == '0\\n3\\n2\\n92\\n87654322\\n9150\\n'"
    },
    {
        "number": 4420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.splitlines()[0])\n    results = []\n    for i in range(1, cases + 1):\n        x, y, n = map(int, stdin.splitlines()[i].split())\n        k = x * (n // x) + y\n        if k > n:\n            k -= x\n        results.append(str(k))\n    return \"\\n\".join(results)\n\n\ndef",
        "test": "assert solution(\"7\\n7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\\n\" "
    },
    {
        "number": 4421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    d_list = list(map(int, stdin.split()[2:]))\n\n    total_candies = sum(d_list)\n    if total_candies % k != 0:\n        return \"0\"\n\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (d_list[i] + d_list[j]) % k == 0:\n                pairs += 1\n\n    return str(pairs)",
        "test": "assert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\""
    },
    {
        "number": 4422,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list[0])\n    K = int(input_list[1])\n    S = input_list[2]\n\n    if 1 <= N <= 50 and 1 <= K <= N and len(S) == N and S.isalpha():\n        S_list = list(S)\n        S_list[K-1] = S_list[K-1].lower()\n        return \"\".join(S_list)\n    else:\n        return \"Invalid input\"",
        "test": "assert solution(\"3 1\\nABC\") == \"aBC\""
    },
    {
        "number": 4423,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    restaurants = {}\n    for i in range(1, n+1):\n        city, score = lines[i].split()\n        score = int(score)\n        restaurants[city] = restaurants.get(city, []) + [(i, score)]\n\n    sorted_cities = sorted(restaurants.keys())\n    for city in sorted_cities:\n        sorted_restaurants = sorted(restaurants[city], key=lambda x: x[1], reverse=True)\n        for restaurant in sorted_restaurants:\n            print(restaurant[0])",
        "test": "assert solution(\"6\\nkhabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\\n\""
    },
    {
        "number": 4424,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    return \"Yes\" if K * 500 >= X else \"No\"",
        "test": "assert solution(\"2 900\") == \"Yes\""
    },
    {
        "number": 4425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    prob = 0\n\n    for i in range(1, N + 1):\n        if i == 1:\n            prob += 1 / 48\n        elif i == 2:\n            prob += 1 / 24\n        elif i == 3:\n            prob += 1 / 12\n        elif i == 4:\n            prob += 1 / 8\n        elif i == 5:\n            prob += 1 / 6\n        elif i == 6:\n            prob += 1 / 4\n        elif i == 7:\n            prob += 1 / 3\n        elif i == 8:\n            prob += 1 / 2\n        else:\n            prob += 1\n\n    return str(prob)",
        "test": "assert solution('3 10\\n') == '0.14583333333'"
    },
    {
        "number": 4426,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    days = {\"SUN\": 0, \"MON\": 1, \"TUE\": 2, \"WED\": 3, \"THU\": 4, \"FRI\": 5, \"SAT\": 6}\n    today = days[stdin]\n    next_sunday = (7 - today) % 7\n    return str(next_sunday)",
        "test": "assert solution(\"SAT\") == 1"
    },
    {
        "number": 4427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n    x = x_2000\n    \n    for i in range(2001, 2011):\n        x = r * x - D\n        print(x)",
        "test": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\\n\" "
    },
    {
        "number": 4428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    d = list(map(int, stdin.readline().strip().split()))\n\n    def find_split(d: List[int]) -> int:\n        n = len(d)\n        d.sort(reverse=True)\n        for i in range(n):\n            for j in range(i+1, n):\n                if d[i] + d[j] == sum(d):\n                    return True\n        return False\n\n    max_sum1 = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i + j <= n:\n                if find_split(d[:i]) and find_split(d[i:i+j]):\n                    max_sum1 = max(max_sum1, sum(d[:i]) + sum(d[i:i+j]))\n\n    return str(max_sum1)",
        "test": "assert solution(\"5\\n1 3 2 1 4\") == \"4\""
    },
    {
        "number": 4429,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def find_solution(x, y, z):\n        if x == y == z:\n            return \"NO\"\n        if x >= y + z or y >= x + z or z >= x + y:\n            return \"NO\"\n        if x == max(x, y, z):\n            a, b, c = x, y, z\n        elif y == max(x, y, z):\n            a, b, c = y, x, z\n        else:\n            a, b, c = z, x, y\n        return f\"YES\\n{a} {b} {c}\"\n\n    output = []\n    for i in range(int(stdin.split(\"\\n\")[0])):\n        x, y, z = map(int, stdin.split(\"\\n\")[i + 1].split())\n        result = find_solution(x, y, z)\n        output.append(result)\n\n    return \"\\n\".join(output)\n",
        "test": "assert solution(\"1\\n1000 2000 3000\") == \"NO\" "
    },
    {
        "number": 4430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, sizes = stdin.split()\n    n, m, k = int(n), int(m), int(k)\n    sizes = list(map(int, sizes.split()))\n    \n    # find the maximum number of objects that can be packed\n    max_packed = 0\n    for i in range(n + 1):\n        if sum(sizes[:i]) <= k:\n            max_packed = i\n        else:\n            break\n    \n    # calculate the number of objects that can be packed into the boxes\n    objects_packed = 0\n    box_index = 0\n    while objects_packed < max_packed:\n        box_size = k\n        while box_size >= sizes[objects_packed]:\n            box_size -= sizes[objects_packed]\n            objects_packed += 1\n            if objects_packed >= max_packed:\n                break\n        box_index += 1\n    \n    return str(objects_packed)",
        "test": "assert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\""
    },
    {
        "number": 4431,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    s = stdin.readline().strip()\n    available_letters = stdin.readline().strip().split()\n\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if all(char in available_letters for char in substring):\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"10 3\\nsadfaasdda\\nf a d\") == \"21\""
    },
    {
        "number": 4432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline())\n    result = []\n\n    for _ in range(test_cases):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n\n        max_length = n // 2\n        max_sum = float('-inf')\n\n        for length in range(1, max_length + 1):\n            sums = [0] * length\n            for i in range(n):\n                if i % 2 == 0:\n                    sums[i // 2] += a[i]\n                else:\n                    sums[i // 2] -= a[i]\n\n            current_sum = max(sums)\n            if current_sum > max_sum:\n                max_sum = current_sum\n\n        result.append(max_sum)\n\n    return '\\n'.join(map(str, result))\n",
        "test": "assert solution(input) == output"
    },
    {
        "number": 4433,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, edges = int(stdin.split()[0]), int(stdin.split()[1]), []\n    for i in range(m):\n        v, u = int(stdin.split()[2*i+2]), int(stdin.split()[2*i+3])\n        edges.append((v-1, u-1))\n    \n    # Find a spanning tree with maximum degree over all vertices\n    # We can use DFS to find the spanning tree\n    visited = [False] * n\n    degree = [0] * n\n    adj_list = [[] for _ in range(n)]\n    for edge in edges:\n        adj_list[edge[0]].append(edge[1])\n        adj_list[edge[1]].append(edge[0])\n    \n    def dfs(v):\n        visited[v] = True\n        for u in adj_list[v]:\n            if not visited[u]:\n                dfs(u)\n    \n    max_degree = 0\n    for i in range(n):\n        degree[i] = len(adj_list[i])\n        max_degree = max(max_degree, degree[i])\n    \n    for i in range(n):\n        if degree[i] == max_degree and not visited[i]:\n            dfs(i)\n            break\n    \n    # Output the spanning tree\n    result = []\n    for i in range(n):\n        for u in adj_list[i]:\n            if visited[u]:\n                result.append((i+1, u+1))\n                break\n    \n    return \"\\n\".join(map(lambda x: str(x[0]) + \" \" + str(x[1]), result))",
        "test": "assert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\\n\""
    },
    {
        "number": 4434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(\"\\n\")\n    t = int(stdin_list[0])\n    output = []\n    for i in range(1, t + 1):\n        n = int(stdin_list[i])\n        moves = 0\n        if n == 1:\n            moves = 0\n        elif n == 3:\n            moves = 2\n        else:\n            moves = 2 * (n - 1)\n        output.append(moves)\n    return \"\\n\".join(map(str, output))\n\n\ndef",
        "test": "assert solution(\"499993\\n\") == \"40\" "
    },
    {
        "number": 4435,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = -1\n\n    for i in range(n):\n        parity = a[i] % 2\n        for j in range(i - a[i], i + a[i] + 1):\n            if 0 <= j < n and (a[j] % 2 != parity):\n                dp[i] = min(dp[i], dp[j] + 1) if dp[i] != -1 else 1\n\n    return ' '.join(map(str, dp))",
        "test": "assert solution(\"1\\n1\") == \"0\""
    },
    {
        "number": 4436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    t = int(input_data[0])\n    results = []\n\n    for i in range(1, t+1):\n        n = int(input_data[i])\n        a, b, c = 0, 0, 0\n        if n == 2:\n            results.append(\"YES 2 2\")\n        elif n == 3:\n            results.append(\"YES 2 3\")\n        elif n == 4:\n            results.append(\"YES 2 2 2\")\n        else:\n            for i in range(2, int(n ** (1/3))+1):\n                if n % i == 0:\n                    a = i\n                    b = n // i\n                    if a * b != n:\n                        c = int(n/i)\n                        if a * b * c == n:\n                            results.append(\"YES \" + str(a) + \" \" + str(b) + \" \" + str(c))\n                            break\n            else:\n                results.append(\"NO\")\n\n    return \"\\n\".join(results)\n",
        "test": "assert solution(\"5\\n64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823\""
    },
    {
        "number": 4437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    min_ops = 0\n    max_diff = 0\n    current_diff = 0\n\n    for i in range(n):\n        if s[i] == 'a':\n            current_diff += 1\n        else:\n            current_diff -= 1\n\n        if i % 2 == 0:\n            max_diff = max(max_diff, abs(current_diff))\n\n    min_ops = max_diff\n    result = s\n\n    if max_diff > 0:\n        result = \"\"\n        current_diff = 0\n\n        for i in range(n):\n            if s[i] == 'a' and current_diff < max_diff:\n                result += 'b'\n                current_diff += 1\n            elif s[i] == 'b' and current_diff > 0:\n                result += 'a'\n                current_diff -= 1\n            else:\n                result += s[i]\n\n    return str(min_ops) + \"\\n\" + result",
        "test": "assert solution(\"6\\nababab\") == \"0\\nababab\""
    },
    {
        "number": 4438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    key_points = [(int(line.split(' ')[0]), int(line.split(' ')[1])) for line in stdin.split('\\n')[1:n+1]]\n    \n    def distance(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n    \n    def level(point):\n        return max(point)\n    \n    def adjacent_points(point):\n        return [(point[0]+1, point[1]), (point[0]-1, point[1]), (point[0], point[1]+1), (point[0], point[1]-1)]\n    \n    key_points = sorted(key_points, key=lambda x: level(x))\n    \n    min_distance = 0\n    visited_points = set()\n    current_point = key_points[0]\n    visited_points.add(current_point)\n    \n    for i in range(1, len(key_points)):\n        next_level = level(key_points[i])\n        if next_level == level(current_point):\n            continue\n        \n        min_distance += distance(current_point, key_points[i])\n        current_point = key_points[i]\n        visited_points.add(current_point)\n        \n        next_points = [p for p in adjacent_points(current_point) if p not in visited_points]\n        min_distance += min([distance(current_point, p) for p in next_points])\n        current_point = next_points[next_points.index(min(next_points, key=lambda x: distance(current_point, x)))]\n        visited_points.add(current_point)\n    \n    return str(min_distance)\n",
        "test": "assert solution('''8"
    },
    {
        "number": 4439,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes the input from the standard input as a string and returns the correct choice for the given problem.\n\n    Args:\n    stdin (str): Input from the standard input in the format \"A\\nB\".\n\n    Returns:\n    str: The correct choice for the given problem.\n    \"\"\"\n    # Split the input into two lines, A and B\n    lines = stdin.split('\\n')\n    A = int(lines[0])\n    B = int(lines[1])\n\n    # Find the correct choice\n    correct_choice = 6 - A - B\n\n    return str(correct_choice)",
        "test": "assert solution(\"3\\n1\") == \"2\" "
    },
    {
        "number": 4440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    max_volume = 0\n\n    for a in range(1, L // 2 + 1):\n        for b in range(1, L // 2 + 1):\n            c = L - a - b\n            if c > 0 and a + b + c == L:\n                volume = a * b * c\n                max_volume = max(max_volume, volume)\n\n    return \"{:.6f}\".format(max_volume)\n\ndef",
        "test": "assert abs(float(solution('4')) - 1.063492063492064) < 1e-6"
    },
    {
        "number": 4441,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    if len(input_list) == 1:\n        return \"Hello World\"\n    else:\n        return str(int(input_list[1]) + int(input_list[2]))",
        "test": "assert solution(\"2\\n1 2\") == \"3\""
    },
    {
        "number": 4442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a * 10 + b < b * 10 + a:\n        return a * b\n    else:\n        return b * a",
        "test": "assert solution(\"1 2\") == \"2\""
    },
    {
        "number": 4443,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'c':\n        return 'd'\n    elif stdin == 'z':\n        return None\n    else:\n        return chr(ord(stdin) + 1)",
        "test": "assert solution('c') == 'd'"
    },
    {
        "number": 4444,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return T + S",
        "test": "assert solution(\"oder atc\") == \"atcoder\" "
    },
    {
        "number": 4445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_move(a, i, prev_parity):\n        parity = i % 2\n        return (a[i] % 2 != prev_parity) if prev_parity is not None else True\n\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    prev_parity = None\n    min_sum = sum(a)\n\n    for i in range(n):\n        if is_valid_move(a, i, prev_parity):\n            prev_parity = a[i] % 2\n            min_sum -= a[i]\n            a.pop(i)\n            n -= 1\n        else:\n            break\n\n    return str(min_sum)",
        "test": "assert solution(\"6\\n5 1 2 4 6 3\\n\") == \"0\""
    },
    {
        "number": 4446,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split()[:4])\n    h = list(map(int, stdin.split()[4:]))\n    \n    points = 0\n    for i in range(n):\n        if h[i] <= a:\n            points += 1\n            continue\n        \n        if h[i] <= b:\n            points += 1\n            continue\n        \n        if k > 0:\n            if h[i] - a > b:\n                h[i] -= a\n                k -= 1\n            else:\n                h[i] -= b\n        else:\n            h[i] -= max(a, b)\n    \n    return str(points)",
        "test": "assert solution(\"1 1 100 99\\n100\") == \"1\""
    },
    {
        "number": 4447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = [0] * m\n    for num in a:\n        count[num % m] += 1\n\n    max_count = n // m\n    min_moves = max_count * m - sum(count)\n\n    if min_moves > 0:\n        for i in range(min_moves):\n            index = count.index(min(count))\n            count[index] += 1\n\n    new_a = []\n    for i in range(m):\n        new_a += [i] * count[i]\n\n    return str(min_moves) + \"\\n\" + \" \".join(map(str, new_a))",
        "test": "assert solution(\"4 2\\n0 1 2 3\\n\") == \"0\\n0 1 2 3\""
    },
    {
        "number": 4448,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    k = list(map(int, lines[1].split()))\n    special_offers = [tuple(map(int, lines[i+2].split())) for i in range(m)]\n    \n    days = [0] * n\n    for d, t in special_offers:\n        days[t-1] = d\n    \n    total_cost = sum(2 * k[i] if days[i] == 0 else 1 * k[i] for i in range(n))\n    max_days = max(days)\n    \n    if total_cost <= max_days:\n        return str(max_days)\n    else:\n        return str(total_cost)\n\ninput_str = \"\"\"5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\"\"\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\" "
    },
    {
        "number": 4449,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    results = []\n\n    for query in queries[1:]:\n        if not query:\n            continue\n\n        n = int(query.split()[0])\n        sticks = list(map(int, query.split()[1:]))\n\n        if len(sticks) != 4 * n:\n            results.append(\"NO\")\n            continue\n\n        sticks.sort()\n        areas = []\n\n        for i in range(n):\n            area = (sticks[4 * i] * sticks[4 * i + 3])\n            areas.append(area)\n\n        if len(set(areas)) == 1:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    return \"\\n\".join(results)\n\n\ndef",
        "test": "assert solution(\"5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\\nYES\\nNO\\nYES\\nYES\" "
    },
    {
        "number": 4450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    edges = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n    \n    # Initialize a matrix of shortest paths\n    shortest_paths = [[0] * n for _ in range(n)]\n    for i in range(n):\n        shortest_paths[i][i] = 0\n\n    # Floyd-Warshall algorithm to find all shortest paths\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                shortest_paths[i][j] = min(shortest_paths[i][j], shortest_paths[i][k] + shortest_paths[k][j])\n\n    # Find the k-th smallest shortest path\n    shortest_paths_sorted = sorted([shortest_paths[i][j] for i in range(n) for j in range(n) if i < j])\n    k_smallest_path = shortest_paths_sorted[k-1]\n    \n    return str(k_smallest_path)\n",
        "test": "assert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == \"9\\n\" "
    },
    {
        "number": 4451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def diversity(a, k):\n        return max(a[i:i+k]) - min(a[i:i+k])\n\n    def find_division(a):\n        n = len(a)\n        k = 1\n        res = diversity(a, k)\n        while k < n:\n            if diversity(a, k) < res:\n                k += 1\n            else:\n                res = diversity(a, k)\n        return k\n\n    def find_teams(a, k):\n        n = len(a)\n        teams = [[] for _ in range(k)]\n        for i in range(n):\n            teams[i%k].append(i+1)\n        return teams\n\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    k = find_division(a)\n    teams = find_teams(a, k)\n    res = sum([diversity(a, len(team)) for team in teams])\n\n    return f\"{res} {k}\" + \"\\n\" + \" \".join(map(str, sum(teams, []))) ",
        "test": "assert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\""
    },
    {
        "number": 4452,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    t = int(input_data[0])\n    input_data = input_data[1:]\n    results = []\n\n    for n in input_data:\n        n = int(n)\n        k = 1\n        current_sum = 0\n        terms = []\n\n        while current_sum < n:\n            current_term = str(k) * (k - 1) + '1'\n            current_term = int(current_term)\n            terms.append(current_term)\n            current_sum += current_term\n            k += 1\n\n        if current_sum == n:\n            results.append(str(k - 1) + ' ' + ' '.join(map(str, terms)))\n\n    return '\\n'.join(results)",
        "test": "assert solution(\"5\\n5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\" "
    },
    {
        "number": 4453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split('\\n')\n    i = 0\n    output = []\n    while i < len(queries):\n        n = int(queries[i])\n        p = list(map(int, queries[i+1].split()))\n        days = [0] * n\n        for i in range(n):\n            if p[i] == i+1:\n                days[i] = 1\n            else:\n                days[i] = days[p[i]-1]+1\n        output.append(' '.join(map(str, days)))\n        i += 2\n    return '\\n'.join(output)\n\ninput_data = '''6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3'''\n\nprint(solution(input_data)) ",
        "test": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1 \\n3 3 3 \\n2 3 3 2 1 3 \\n1 \\n2 2 2 2 \\n4 4 4 1 4\" "
    },
    {
        "number": 4454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    output = []\n\n    for i in range(1, len(queries), 2):\n        n = int(queries[i])\n        a = list(map(int, queries[i+1].split()))\n\n        if len(a) != n:\n            raise ValueError(\"Number of prices does not match the number of goods.\")\n\n        price = sum(a) // n\n        new_price = max(price, min(a))\n        output.append(str(new_price))\n\n    return \"\\n\".join(output)",
        "test": "assert solution(\"3\\n5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1\") == \"3\\n2\\n1\""
    },
    {
        "number": 4455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    skills = list(map(int, stdin.split()[2:]))\n    pairs = []\n    for i in range(k):\n        x, y = map(int, stdin.split()[(2 + i) * 2 - 2: (2 + i) * 2])\n        pairs.append((x - 1, y - 1))\n\n    def can_be_mentor(skills: list, pairs: list, i: int, j: int) -> bool:\n        if i == j:\n            return False\n        if (i, j) in pairs or (j, i) in pairs:\n            return False\n        return skills[i] > skills[j]\n\n    result = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if can_be_mentor(skills, pairs, i, j):\n                result[i] += 1\n\n    return \" \".join(map(str, result))\n",
        "test": "assert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\" "
    },
    {
        "number": 4456,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    p = list(map(int, stdin.split()[2:2*n+2]))\n    q = list(map(int, stdin.split()[2*n+4:]))\n\n    if not (len(p) == len(q) == len(set(p)) == len(set(q)) == n):\n        return \"NO\"\n\n    s = \"\"\n    for i in range(k):\n        s += chr(ord('a') + i)\n    for i in range(k, n):\n        s += \"z\"\n\n    if sorted(s[p_i - 1] for p_i in p) != sorted(s[q_i - 1] for q_i in q):\n        return \"NO\"\n\n    return \"YES\\n\" + s",
        "test": "assert solution(\"3 2\\n1 2 3\\n1 2 3\") == \"NO\" "
    },
    {
        "number": 4457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    can_durabilities = list(map(int, stdin.readline().strip().split()))\n\n    min_shots = float('inf')\n    best_order = []\n\n    def shoot_cans(can_durabilities):\n        nonlocal min_shots, best_order\n        shots = 0\n        for can_index in range(len(can_durabilities)):\n            shots += (can_durabilities[can_index] * (can_index + 1) + 1)\n        if shots < min_shots:\n            min_shots = shots\n            best_order = list(range(1, n + 1))\n\n    for permutation in itertools.permutations(range(n)):\n        shoot_cans([can_durabilities[i] for i in permutation])\n\n    return f\"{min_shots}\\n{' '.join(map(str, best_order))}\"",
        "test": "assert solution(\"4\\n10 10 10 10\") == \"64\\n2 1 4 3\\n\""
    },
    {
        "number": 4458,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, permutation = stdin.split('\\n')\n    n = int(n)\n    permutation = [int(x) for x in permutation.split()]\n\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            if permutation.index(i) >= permutation.index(j):\n                break\n        else:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"1\\n1\") == \"1\""
    },
    {
        "number": 4459,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    line_list = stdin.split()\n    n = int(line_list[0])\n    seq = line_list[1:]\n\n    # Check if the sequence is already a good sequence\n    if all(seq.count(str(i)) == int(i) for i in seq):\n        return \"0\"\n\n    # Create a dictionary to store the count of each element in the sequence\n    element_count = {}\n    for element in seq:\n        element_count[element] = element_count.get(element, 0) + 1\n\n    # Find the minimum number of elements to remove\n    min_count = n\n    for count in element_count.values():\n        if count > 1:\n            min_count = min(min_count, count - 1)\n\n    return str(min_count)",
        "test": "assert solution(\"6\\n4 2 4 1 4 2 4\") == \"0\""
    },
    {
        "number": 4460,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    for i in range(1, 6):\n        if eval(f\"x_{i}\") == 0:\n            return str(i)\n    return \"\"",
        "test": "assert solution(\"0 2 3 4 5\") == \"1\""
    },
    {
        "number": 4461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    # Since the bar can only be divided into three pieces, the height of each piece must be H // 3.\n    piece_height = H // 3\n    # The width of each piece can be any number between 1 and W.\n    min_width = 1\n    max_width = W\n    min_difference = float('inf')\n\n    while min_width <= max_width:\n        width = (min_width + max_width) // 2\n        # Calculate the areas of the three pieces.\n        areas = [piece_height * width] * 3\n        # If the area of the largest piece is greater than the area of the smallest piece,\n        # we need to make the width of the pieces smaller.\n        if areas[0] > areas[2]:\n            min_width = width + 1\n        # If the area of the largest piece is less than or equal to the area of the smallest piece,\n        # we need to make the width of the pieces larger.\n        else:\n            max_width = width - 1\n            # Update the minimum difference if we find a better solution.\n            min_difference = min(min_difference, areas[1] - areas[0])\n\n    return min_difference ",
        "test": "assert solution(\"4 6\") == \"2\""
    },
    {
        "number": 4462,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_multiple_of_4(a: int, b: int) -> bool:\n        return a * b % 4 == 0\n\n    def permute_array(a: List[int]) -> bool:\n        n = len(a)\n        for i in range(n - 1):\n            if not is_multiple_of_4(a[i], a[i + 1]):\n                a[i], a[i + 1] = a[i + 1], a[i]\n        return is_multiple_of_4(a[0], a[-1])\n\n    n, *a = map(int, stdin.split())\n    return \"Yes\" if permute_array(a) else \"No\"\n",
        "test": "assert solution(\"4\\n2 4 6 8\\n\") == \"Yes\""
    },
    {
        "number": 4463,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    \n    def can_satisfy(s: str, t: str) -> bool:\n        if len(s) > len(t):\n            return False\n        \n        s_chars = list(s)\n        t_chars = list(t)\n        for i in range(len(s)):\n            if s_chars[i] != t_chars[i]:\n                s_chars[i], t_chars[i] = t_chars[i], s_chars[i]\n                break\n        \n        s_chars.sort()\n        t_chars.sort()\n        \n        return s_chars < t_chars\n    \n    if can_satisfy(s, t):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"yx\\naxy\\n\") == \"Yes\""
    },
    {
        "number": 4464,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n\n    if C >= 0 and C < B:\n        multiple = A * (B - C)\n        if multiple % A == 0:\n            return \"YES\"\n\n    return \"NO\"",
        "test": "assert solution(\"7 5 1\") == \"YES\""
    },
    {
        "number": 4465,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    area = A * B - A - B\n    return str(area)",
        "test": "assert solution(\"5 10\") == \"35\""
    },
    {
        "number": 4466,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = list(map(int, stdin.split()))\n    seats_count = (X - Y - 2 * Z) // (Y + Z)\n    return str(seats_count)",
        "test": "assert solution(\"10 2 1\") == \"2\" "
    },
    {
        "number": 4467,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input data\n    data = stdin.split(\"\\n\")\n    N = int(data[0])\n    red_points = [(int(data[i*2+1]), int(data[i*2+2])) for i in range(N)]\n    blue_points = [(int(data[N*2+i*2+1]), int(data[N*2+i*2+2])) for i in range(N)]\n\n    # Count the number of friendly pairs\n    friendly_pairs = 0\n    for i in range(N):\n        for j in range(N):\n            if red_points[i][0] < blue_points[j][0] and red_points[i][1] < blue_points[j][1]:\n                friendly_pairs += 1\n\n    return str(friendly_pairs)",
        "test": "assert solution('''3"
    },
    {
        "number": 4468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split()[:2])\n    times = list(map(int, stdin.split()[2:]))\n    times.sort()\n    total_time = 0\n    start_time = 0\n\n    for time in times:\n        if time < start_time:\n            total_time += t\n        else:\n            start_time = time\n            total_time += t\n\n    return str(total_time)",
        "test": "assert solution(\"4 3\\n2 4 6 8\\n\") == \"17\""
    },
    {
        "number": 4469,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split('\\n')\n    q = int(queries.pop(0))\n    left_books = []\n    right_books = []\n\n    def put_left(id):\n        nonlocal left_books\n        left_books.append(id)\n\n    def put_right(id):\n        nonlocal right_books\n        right_books.append(id)\n\n    def min_pop_left():\n        nonlocal left_books\n        min_pop = float('inf')\n        for id in left_books:\n            min_pop = min(min_pop, id)\n        return min_pop\n\n    def min_pop_right():\n        nonlocal right_books\n        min_pop = float('inf')\n        for id in right_books:\n            min_pop = min(min_pop, id)\n        return min_pop\n\n    for query in queries:\n        command, id = query.split()\n        if command == 'L':\n            put_left(int(id))\n        elif command == 'R':\n            put_right(int(id))\n        else:\n            left_min_pop = min_pop_left()\n            right_min_pop = min_pop_right()\n            if int(id) < left_min_pop:\n                print(left_min_pop - int(id))\n            elif int(id) > right_min_pop:\n                print(int(id) - right_min_pop)\n            else:\n                print(0)",
        "test": "assert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == \"0\\n2\\n1\\n\""
    },
    {
        "number": 4470,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split('\\n', 1)[0])\n    queries_data = stdin.split('\\n', queries)[1:]\n\n    def is_divisible_by(number: int, divisor: int) -> bool:\n        return number % divisor == 0\n\n    def count_operations(number: int) -> int:\n        count = 0\n        while number > 1:\n            if is_divisible_by(number, 2) and number != 2:\n                number //= 2\n            elif is_divisible_by(number, 3) and number != 3:\n                number = 2 * number // 3\n            elif is_divisible_by(number, 5):\n                number //= 5\n            else:\n                return -1\n            count += 1\n        return count\n\n    result = []\n    for query_data in queries_data:\n        n = int(query_data)\n        count = count_operations(n)\n        result.append(str(count) if count != -1 else \"-1\")\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"1\\n1\") == \"0\""
    },
    {
        "number": 4471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.strip().split('\\n')[0])\n    results = []\n    for i in range(test_cases):\n        n = int(stdin.strip().split('\\n')[2 * i + 1])\n        initial_heights = list(map(int, stdin.strip().split('\\n')[2 * i + 2].split()))\n\n        initial_heights = [initial_heights[i] - 1 for i in range(n)]\n        while any(initial_heights):\n            for j in range(n):\n                if initial_heights[j] >= 1:\n                    initial_heights[j] += 2\n                    break\n            else:\n                continue\n            initial_heights = [initial_heights[i] - 1 if initial_heights[i] > 0 else 0 for i in range(n)]\n\n        if all(initial_heights) == 0:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    return \"\\n\".join(results)",
        "test": "assert solution(\"4\\n3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\\nNO\\nYES\\nYES\""
    },
    {
        "number": 4472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = stdin.split('\\n')[1]\n    b = stdin.split('\\n')[2]\n\n    preprocess_moves = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            preprocess_moves += 1\n\n    return str(preprocess_moves)",
        "test": "assert solution(\"5\\nzcabd\\ndbaz\\n\") == \"0\" "
    },
    {
        "number": 4473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    answers = []\n\n    for i in range(t):\n        a, b, k = map(int, stdin.readline().split())\n\n        answer = 0\n        for j in range(k):\n            if j % 2 == 0:\n                answer += a\n            else:\n                answer -= b\n\n        answers.append(answer)\n\n    return \" \".join(map(str, answers))\n",
        "test": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\""
    },
    {
        "number": 4474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_number(n: int) -> bool:\n        while n > 0:\n            remainder = n % 3\n            if remainder == 0:\n                n //= 3\n            elif remainder == 1:\n                n -= 1\n            else:\n                return False\n        return True\n\n    def find_smallest_good_number(n: int) -> int:\n        while True:\n            if is_good_number(n):\n                return n\n            n += 1\n\n    q = int(stdin.readline())\n    result = []\n    for _ in range(q):\n        n = int(stdin.readline())\n        result.append(str(find_smallest_good_number(n)))\n    return \"\\n\".join(result)",
        "test": "assert solution(\"8\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089\""
    },
    {
        "number": 4475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def min_product(a, x, b, y, n):\n        if n == 0 or a == x or b == y:\n            return a * b\n        if a - 1 >= x and b >= y:\n            return min_product(a - 1, x, b, y, n - 1)\n        if a >= x and b - 1 >= y:\n            return min_product(a, x, b - 1, y, n - 1)\n        if a - 1 >= x and b - 1 >= y:\n            return min(min_product(a - 1, x, b, y, n - 1), min_product(a, x, b - 1, y, n - 1))\n\n    lines = stdin.splitlines()\n    output = []\n    for line in lines:\n        a, b, x, y, n = map(int, line.split())\n        output.append(min_product(a, x, b, y, n))\n    return \"\\n\".join(map(str, output))",
        "test": "assert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n177177\\n999999999000000000\\n999999999\\n55\\n10\\n\" "
    },
    {
        "number": 4476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    res = []\n    \n    for _ in range(t):\n        a, b = map(int, stdin.readline().split())\n        count = 0\n        \n        while a != b:\n            if a > b:\n                if a % 2 == 0:\n                    a -= 1\n                else:\n                    a += 1\n            else:\n                if b % 2 == 0:\n                    b -= 1\n                else:\n                    b += 1\n            count += 1\n        \n        res.append(str(count))\n    \n    return \"\\n\".join(res)\n\ninput_str = \"\"\"5\n2 3\n10 10\n2 4\n7 4\n9 3\"\"\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"5\\n2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"1\\n0\\n2\\n2\\n1\\n\""
    },
    {
        "number": 4477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    for x in stdin.split(\"\\n\"):\n        if x == \"\":\n            continue\n        x = int(x)\n        key_presses = 0\n        for digit in range(1, 10):\n            digit_count = sum(1 for d in str(x) if d == str(digit))\n            if digit_count > 0:\n                key_presses += digit_count * (digit + 1)\n        result.append(str(key_presses))\n    return \"\\n\".join(result)\n\ndef",
        "test": "assert solution(\"4\\n22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\""
    },
    {
        "number": 4478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k, sequences = int(stdin.splitlines()[0]), []\n    for i in range(k):\n        n, sequence = int(stdin.splitlines()[i * 2 + 1]), list(map(int, stdin.splitlines()[i * 2 + 2].split()))\n        sequences.append((n, sequence))\n\n    for i in range(k):\n        for j in range(i + 1, k):\n            if sequences[i][0] != sequences[j][0]:\n                for x in range(sequences[i][0]):\n                    for y in range(sequences[j][0]):\n                        if sequences[i][1][x] + sequences[j][1][y] == sequences[i][1][x] + sequences[j][1][y] + sequences[i][1][x + 1] - sequences[j][1][y]:\n                            return f\"YES\\n{i+1} {x+1}\\n{j+1} {y+1}\"\n    return \"NO\"\n\ndef",
        "test": "assert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2\\n3\\n2\\n2\\n1\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\\n4 1\\n\""
    },
    {
        "number": 4479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, K = list(map(int, input().split()))\n    A = [abs(x) for x in A]\n    A.sort()\n    index = 0\n    while K > 0 and index < len(A):\n        A[index] = -A[index]\n        K -= 1\n        index += 1\n    return str(sum(A))",
        "test": "assert solution(\"3 -1 0 2 3\") == \"6\""
    },
    {
        "number": 4480,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    n = len(A)\n    prefix_sum = [0] * (n + 1)\n    \n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + A[i]\n    \n    for i in range(n - 2):\n        for j in range(i + 2, n):\n            if prefix_sum[i + 1] == prefix_sum[j] and prefix_sum[n] - prefix_sum[j + 1] == prefix_sum[i + 1]:\n                return \"true\"\n    \n    return \"false\"",
        "test": "assert solution([0,2,1,-6,6,7,9,-1,2,0,1]) == False"
    },
    {
        "number": 4481,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    votes = lines[1:N+1]\n    count = {}\n\n    for vote in votes:\n        if vote in count:\n            count[vote] += 1\n        else:\n            count[vote] = 1\n\n    max_count = max(count.values())\n    result = [key for key, value in count.items() if value == max_count]\n    result.sort()\n\n    return '\\n'.join(result)",
        "test": "assert solution(\"2\\na\\nb\\n\") == \"a\\nb\""
    },
    {
        "number": 4482,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    n, *a = map(int, stdin.split())\n\n    # Find the minimum cost\n    min_cost = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            cost = (a[i] - a[j]) ** 2\n            if cost < min_cost:\n                min_cost = cost\n\n    # Return the result\n    return str(min_cost)",
        "test": "assert solution(\"3\\n10 -5 0\") == \"25\""
    },
    {
        "number": 4483,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    cake_cost = A\n    donuts_cost = B\n    donuts_bought = X // donuts_cost\n    total_cost = cake_cost + donuts_bought * donuts_cost\n    amount_left = X - total_cost\n    return str(amount_left)",
        "test": "assert solution('2000\\n300\\n200') == '0'"
    },
    {
        "number": 4484,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n\n    mod = 10**9 + 7\n\n    count = 0\n\n    for i in range(N):\n        for j in range(M):\n            for k in range(N):\n                for l in range(M):\n                    if i != k and j != l:\n                        count += 1\n\n    return str(count % mod)\n",
        "test": "assert solution(\"1 1\") == \"0\""
    },
    {
        "number": 4485,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    boats = []\n    for line in stdin.split('\\n')[1:]:\n        a, b = map(int, line.split())\n        boats.append((a, b))\n    \n    def check_service(island_a, island_b, visited_islands, boats) -> bool:\n        visited_islands.add(island_a)\n        for boat in boats:\n            if island_a == boat[0]:\n                if boat[1] not in visited_islands and check_service(boat[1], island_b, visited_islands.copy(), boats):\n                    return True\n        return False\n\n    if check_service(1, N, set(), boats):\n        return \"POSSIBLE\"\n    else:\n        return \"IMPOSSIBLE\"",
        "test": "assert solution(\"5 3\\n1 2\\n2 3\\n3 4\\n4 5\") == \"IMPOSSIBLE\""
    },
    {
        "number": 4486,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    result = \"\"\n    for i in range(1, len(s), 2):\n        result += s[i]\n    return result",
        "test": "assert solution(\"hello\") == \"hleo\""
    },
    {
        "number": 4487,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if A[-1] == B[0] and B[-1] == C[0]:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"rng gorilla apple\") == \"YES\""
    },
    {
        "number": 4488,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"",
        "test": "assert solution(\"36\\n24\\n\") == \"GREATER\""
    },
    {
        "number": 4489,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    blue_cards = lines[1:n+1]\n    m = int(lines[n+1])\n    red_cards = lines[n+2:]\n\n    max_earning = 0\n\n    for blue_card in blue_cards:\n        earnings = blue_cards.count(blue_card) - red_cards.count(blue_card)\n        max_earning = max(max_earning, earnings)\n\n    return str(max_earning)",
        "test": "assert solution('1\\nbanana\\n1\\nbanana\\n1\\nbanana\\n1\\nbanana\\n') == '0'"
    },
    {
        "number": 4490,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin\n    bond_map = {\n        'A': 'T',\n        'C': 'G',\n        'G': 'C',\n        'T': 'A'\n    }\n    return bond_map[b]",
        "test": "assert solution(\"A\") == \"T\""
    },
    {
        "number": 4491,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    grid = [list(map(int, row.split())) for row in stdin.split('\\n')[1:]]\n\n    def dfs(i, j, visited, candies):\n        if (i, j) in visited:\n            return\n        visited.add((i, j))\n        candies.append(grid[i][j])\n        if i == 1 and j == n:\n            return\n        if j + 1 < n and (i, j + 1) not in visited:\n            dfs(i, j + 1, visited, candies)\n        if i + 1 < 2 and (i + 1, j) not in visited:\n            dfs(i + 1, j, visited, candies)\n\n    max_candies = 0\n    for i in range(1, 3):\n        for j in range(n):\n            visited = set()\n            candies = []\n            dfs(i, j, visited, candies)\n            max_candies = max(max_candies, sum(candies))\n\n    return str(max_candies)\n\ninput_str = \"5\\n3 2 2 4 1\\n1 2 2 2 1\"\nprint(solution(input_str)) ",
        "test": "assert solution('5\\n3 2 2 4 1\\n1 2 2 2 1') == '14'"
    },
    {
        "number": 4492,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, x = stdin.split()\n    N, x = int(N), int(x)\n    a = list(map(int, input().split()))\n\n    count = 0\n    for i in range(1, N):\n        if a[i] > x - a[i-1]:\n            count += 1\n            a[i] -= x - a[i-1]\n        elif a[i] < x - a[i-1]:\n            count += 1\n            a[i-1] -= x - a[i]\n\n    return count",
        "test": "assert solution(\"3 2\\n2 2 1\") == \"1\""
    },
    {
        "number": 4493,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [list(map(int, row.split())) for row in stdin.split(\"\\n\")]\n    a = [0, 1, 0]\n    b = [1, 0, 1]\n\n    for i in range(3):\n        for j in range(3):\n            if matrix[i][j] != a[i] + b[j]:\n                return \"No\"\n\n    return \"Yes\"\n\ndef",
        "test": "assert solution(\"1 2 3\\n4 5 6\\n7 8 9\") == \"No\""
    },
    {
        "number": 4494,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"ABC\"",
        "test": "assert solution(\"ABC\") == \"ARC\""
    },
    {
        "number": 4495,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"4 8 2\") == \"3\" "
    },
    {
        "number": 4496,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    day = int(stdin)\n    if day == 25:\n        return \"Christmas\"\n    elif day == 24:\n        return \"Christmas Eve\"\n    elif day == 23:\n        return \"Christmas Eve Eve\"\n    elif day == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"Invalid input\"",
        "test": "assert solution(\"25\") == \"Christmas\""
    },
    {
        "number": 4497,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    max_count = 0\n    max_number = 0\n    for i in range(1, N+1):\n        count = 0\n        while i % 2 == 0:\n            count += 1\n            i //= 2\n        if count > max_count:\n            max_count = count\n            max_number = i\n    return str(max_number)",
        "test": "assert solution(\"3\") == \"2\""
    },
    {
        "number": 4498,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if abs(a - c) <= d:\n        return \"Yes\"\n    if abs(b - a) <= d and abs(b - c) <= d:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"4 7 9 3\") == \"Yes\""
    },
    {
        "number": 4499,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s_1, s_2, s_3 = stdin.split()\n    return ''.join([word[0].upper() for word in [s_1, s_2, s_3]])",
        "test": "assert solution(\"atcoder beginner contest\") == \"ABC\""
    },
    {
        "number": 4500,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    total_yen = A + B\n    if total_yen >= C:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('50 100 120') == 'Yes'"
    },
    {
        "number": 4501,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, A, cards = map(int, stdin.split())\n    cards = list(map(int, cards.split()))\n    \n    total_sum = sum(cards)\n    total_count = len(cards)\n    target_sum = A * total_count\n    min_sum = target_sum - (total_count - 1)\n    max_sum = target_sum + (total_count - 1)\n    valid_sums = [i for i in range(min_sum, max_sum+1) if i % total_count == 0]\n    count = 0\n    \n    for valid_sum in valid_sums:\n        cards_sum = sum(cards)\n        if cards_sum == valid_sum:\n            count += 1\n    \n    return str(count)",
        "test": "assert solution(\"10 15\\n1 2 3 4 5 6 7 8 9 10\") == \"318760\""
    },
    {
        "number": 4502,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.split('\\n')\n    n = int(n)\n    sequence = list(map(int, sequence.split()))\n\n    b = []\n    for i in range(n):\n        b.append(sequence[i])\n        b.reverse()\n\n    return ' '.join(map(str, b))",
        "test": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\""
    },
    {
        "number": 4503,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    health, num_moves = map(int, input_list[0].split())\n    moves = list(map(int, input_list[1].split()))\n\n    used_moves = set()\n\n    for move in moves:\n        if health <= 0:\n            return \"Yes\"\n        if move in used_moves:\n            continue\n        used_moves.add(move)\n        health -= move\n\n    return \"No\"",
        "test": "assert solution(\"10 3\\n5 5 6\") == \"No\""
    },
    {
        "number": 4504,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_even(s: str) -> bool:\n        return s == s[::-1]\n\n    def even_string_length(s: str) -> int:\n        for i in range(len(s) - 1, -1, -1):\n            if is_even(s[:i]):\n                return i\n        return 0\n\n    s = stdin\n    return str(even_string_length(s))",
        "test": "assert solution(\"abaababaab\") == \"6\""
    },
    {
        "number": 4505,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # check if stdin has length 3 and contains only a, b, and c\n    if len(stdin) != 3 or not set(stdin).issubset({'a', 'b', 'c'}):\n        return \"No\"\n    \n    # check if stdin is a permutation of \"abc\"\n    if sorted(stdin) == sorted(\"abc\"):\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n",
        "test": "assert solution(\"abc\") == \"Yes\""
    },
    {
        "number": 4506,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    def f(l, r):\n        return sum(a[l-1] * b[i] for i in range(l-1, r))\n\n    # Sort b and calculate the sum of f(l, r)\n    b.sort()\n    total_sum = sum(f(l, r) for l in range(1, n+1) for r in range(l, n+1))\n\n    # Calculate the modulo of the sum\n    result = total_sum % 998244353\n\n    return str(result)",
        "test": "assert solution(\"1\\n1000000\\n1000000\") == \"757402647\""
    },
    {
        "number": 4507,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    shovel_costs = list(map(int, stdin.split()[3:n+3]))\n    special_offers = []\n    for i in range(m):\n        offer_input = list(map(int, stdin.split(\"\\n\")[i+n+3].split()))\n        special_offers.append((offer_input[0], offer_input[1]))\n    \n    def get_min_cost(remaining_shovels, remaining_special_offers):\n        if not remaining_shovels:\n            return 0\n        if not remaining_special_offers:\n            return sum(sorted(shovel_costs[:remaining_shovels])[:k])\n        min_cost = float('inf')\n        for i in range(remaining_shovels+1):\n            if i == 0:\n                offer_cost = 0\n            else:\n                offer_cost = shovel_costs[i-1] * (i-1)\n            remaining_offer = remaining_special_offers[0][1]\n            remaining_shovels -= i\n            remaining_special_offers.pop(0)\n            min_cost = min(min_cost, offer_cost + get_min_cost(remaining_shovels, remaining_special_offers))\n            remaining_shovels += i\n            remaining_special_offers.insert(0, (remaining_offer+1, remaining_special_offers[0][1]))\n        return min_cost\n    \n    return str(get_min_cost(n, special_offers))",
        "test": "assert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == \"17\""
    },
    {
        "number": 4508,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.split(\"\\n\")[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1:-1]]\n\n    # Initialize graph and distance from vertex 1\n    graph = {i: set() for i in range(1, n + 1)}\n    distance = {i: float('inf') for i in range(1, n + 1)}\n    distance[1] = 0\n\n    # Dijkstra's algorithm to find shortest path from vertex 1 to any other vertex\n    for _ in range(n - 1):\n        u = min(distance, key=distance.get)\n        for v in graph[u]:\n            if distance[v] > distance[u] + 1:\n                distance[v] = distance[u] + 1\n        graph[u] = set()\n\n    # Count the number of edges to add\n    to_add = 0\n    for d in distance.values():\n        if d > 2:\n            to_add += 1\n\n    return str(to_add)",
        "test": "assert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"0\""
    },
    {
        "number": 4509,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    t = int(lines[0])\n    output = \"\"\n\n    for i in range(1, t*2+1, 2):\n        n, k = map(int, lines[i].split())\n        count = 0\n        num = 1\n\n        while count < k:\n            if num % n != 0:\n                count += 1\n            if count == k:\n                output += str(num) + \"\\n\"\n                break\n            num += 1\n\n    return output\n\ndef",
        "test": "assert solution(\"6\\n3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\") == \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\""
    },
    {
        "number": 4510,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    ids = list(map(int, stdin.split()[2:]))\n\n    # Initialize an empty list to store the conversations\n    conversations = []\n\n    # Iterate through the messages\n    for message_id in ids:\n        # If the message_id is already in a conversation, then that conversation is updated\n        for i, conversation in enumerate(conversations):\n            if message_id in conversation:\n                # Update the conversation with the new message_id\n                conversations[i] = conversation + [message_id]\n                break\n        else:\n            # If the message_id is not in any conversation, then a new conversation is created\n            conversations.append([message_id])\n\n        # If the number of conversations is greater than k, then remove the last conversation\n        if len(conversations) > k:\n            conversations.pop()\n\n    # Sort the conversations by the length of the conversation in descending order\n    conversations.sort(key=lambda x: len(x), reverse=True)\n\n    # Return the number of conversations and the corresponding conversation IDs\n    return str(len(conversations)) + \"\\n\" + \" \".join(str(id) for conversation in conversations for id in conversation)",
        "test": "assert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\\n\""
    },
    {
        "number": 4511,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.splitlines()[0])\n    turns = []\n    for i in range(1, n + 1):\n        k = int(stdin.splitlines()[i])\n        cards = []\n        for j in range(k):\n            c, d = map(int, stdin.splitlines()[i + j + 1].split())\n            cards.append((c, d))\n        turns.append(cards)\n    \n    # Calculate the maximum damage per turn\n    max_damage_per_turn = []\n    for cards in turns:\n        max_damage = 0\n        for i in range(len(cards)):\n            for j in range(i, len(cards)):\n                damage = 0\n                cost = 0\n                for k in range(i, j + 1):\n                    cost += cards[k][0]\n                if cost <= 3:\n                    for k in range(i, j + 1):\n                        damage += cards[k][1]\n                    if j - i % 10 == 9:\n                        damage *= 2\n                    max_damage = max(max_damage, damage)\n        max_damage_per_turn.append(max_damage)\n    \n    # Calculate the maximum total damage\n    max_total_damage = sum(max_damage_per_turn)\n    \n    return str(max_total_damage)",
        "test": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\" "
    },
    {
        "number": 4512,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    s, q = stdin.split('\\n')[0], int(stdin.split('\\n')[1])\n    queries = stdin.split('\\n')[2:]\n    distinct_chars = set(s)\n    result = \"\"\n    \n    for query in queries:\n        query_type, *args = query.split()\n        if query_type == '1':\n            pos, c = int(args[0]), args[1]\n            s = s[:pos-1] + c + s[pos:]\n            distinct_chars = set(s)\n        elif query_type == '2':\n            l, r = int(args[0]), int(args[1])\n            result += str(len(distinct_chars.intersection(set(s[l-1:r]))))) + '\\n'\n    \n    return result.strip()",
        "test": "assert solution(\"dfcbbcfeeedbaea\") == \"5\\n2\\n5\\n2\\n6\\n\" "
    },
    {
        "number": 4513,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    board = [list(line) for line in lines]\n    changed_elements = 0\n    for i in range(9):\n        for j in range(9):\n            if changed_elements >= 9:\n                break\n            if board[i][j] == '1':\n                board[i][j] = '2'\n                changed_elements += 1\n                break\n            elif board[i][j] == '2':\n                board[i][j] = '1'\n                changed_elements += 1\n                break\n    return ''.join([''.join(row) for row in board])",
        "test": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\" "
    },
    {
        "number": 4514,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[:2])\n    queries = [list(map(int, line.split())) for line in stdin.split()[2:]]\n\n    def dfs(u: int, depth: int):\n        if depth == k:\n            return u\n        if not direct_subordinates[u]:\n            return -1\n        min_u = direct_subordinates[u][0]\n        for sub in direct_subordinates[u][1:]:\n            if sub < min_u:\n                min_u = sub\n        return dfs(min_u, depth + 1)\n\n    direct_subordinates = [[] for _ in range(n + 1)]\n    for i in range(2, n + 1):\n        direct_subordinates[p[i - 1]].append(i)\n\n    result = []\n    for u, k in queries:\n        result.append(dfs(u, 0))\n\n    return \"\\n\".join(map(str, result))\n",
        "test": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n6\\n8\\n-1\\n9\\n4\""
    },
    {
        "number": 4515,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    result = []\n\n    for i in range(1, test_cases + 1):\n        a, b, c, n = map(int, stdin.split('\\n')[i].split(' '))\n        if a + b + c <= n:\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n",
        "test": "assert solution(\"5\\n5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\\nYES\\nNO\\nNO\\nYES\" "
    },
    {
        "number": 4516,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    x = list(map(int, stdin.split()[2:]))\n    result = []\n    \n    for i in range(1, n+1):\n        p_i = [i] + [j for j in range(1, n+1) if j != i]\n        x_positions = [p_i.index(x_val) for x_val in x]\n        distances = [abs(x_positions[i] - x_positions[i+1]) for i in range(m-1)]\n        result.append(sum(distances))\n    \n    return ' '.join(map(str, result))",
        "test": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\""
    },
    {
        "number": 4517,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    edges = []\n    for i in range(n-1):\n        u, v = map(int, stdin.split()[:2])\n        edges.append((u, v))\n        edges.append((v, u))\n    queries = []\n    for i in range(m):\n        k = int(stdin.split()[0])\n        vertices = list(map(int, stdin.split()[:k]))\n        queries.append(vertices)\n    return \"\".join([solve(n, edges, query) for query in queries])\n\ndef",
        "test": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\""
    },
    {
        "number": 4518,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    result = []\n    for i in range(t):\n        n = int(stdin.split('\\n')[1 + i * 2])\n        gangs = list(map(int, stdin.split('\\n')[2 + i * 2].split()))\n        if n == 2:\n            result.append(\"NO\")\n            continue\n        roads = []\n        for j in range(n):\n            for k in range(j + 1, n):\n                if gangs[j] != gangs[k]:\n                    roads.append((j + 1, k + 1))\n        if len(roads) == n - 1:\n            result.append(\"YES\")\n            for road in roads:\n                result.append(\" \".join(map(str, road)))\n        else:\n            result.append(\"NO\")\n    return \"\\n\".join(result)",
        "test": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\\nYES\\n1 2\\n2 3\\n3 4\\nYES\\n1 2\\n1 3\\n1 4\" "
    },
    {
        "number": 4519,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline())\n\n    for _ in range(test_cases):\n        n, k = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n\n        s = list(s)\n        for i in range(n - 1):\n            for j in range(min(k, n - 1 - i)):\n                if s[i] > s[i + 1]:\n                    s[i], s[i + 1] = s[i + 1], s[i]\n                    k -= 1\n\n        print(\"\".join(s))",
        "test": "assert solution(\"7 9\\n1111100\") == \"0101111\""
    },
    {
        "number": 4520,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n\n    def is_bad(point):\n        count = 0\n        for segment in segments:\n            if segment[0] <= point <= segment[1]:\n                count += 1\n                if count > k:\n                    return True\n        return False\n\n    bad_points = []\n    for i in range(1, 201):\n        if is_bad(i):\n            bad_points.append(i)\n\n    if not bad_points:\n        return \"0\\n\"\n\n    m = 0\n    remove = set()\n    for point in bad_points:\n        for i, segment in enumerate(segments):\n            if segment[0] <= point <= segment[1]:\n                remove.add(i)\n                m += 1\n                break\n\n    result = []\n    for i in range(n):\n        if i not in remove:\n            result.append(i)\n\n    return f\"{m}\\n{' '.join(map(str, result))}\\n\"\n\nstdin = \"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\"\nprint(solution(stdin))\n\nstdin = \"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\"\nprint(solution(stdin))\n\nstdin = \"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\\n\""
    },
    {
        "number": 4521,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    points = list(map(int, stdin.split('\\n')[1].split()))\n    speeds = list(map(int, stdin.split('\\n')[2].split()))\n    \n    def min_distance(i, j):\n        x_i, x_j = points[i - 1], points[j - 1]\n        v_i, v_j = speeds[i - 1], speeds[j - 1]\n        return min(abs(x_i - x_j), abs((x_i - x_j) / (v_i - v_j)))\n    \n    total_distance = sum(min_distance(i, j) for i in range(1, n + 1) for j in range(i + 1, n + 1))\n    return str(total_distance)\n\ndef",
        "test": "assert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == \"19\""
    },
    {
        "number": 4522,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    edges = []\n    for _ in range(n - 1):\n        u, v, w = list(map(int, stdin.split()))\n        edges.append((u, v, w))\n    \n    queries = list(map(int, stdin.split()))\n    \n    tree = [[] for _ in range(n + 1)]\n    for u, v, w in edges:\n        tree[u].append((v, w))\n        tree[v].append((u, w))\n    \n    def dfs(node, parent, max_weight, visited, result):\n        visited.add(node)\n        for neighbor, weight in tree[node]:\n            if neighbor != parent and neighbor not in visited:\n                new_weight = max(max_weight, weight)\n                if new_weight <= queries[result[0]]:\n                    result[1] += 1\n                dfs(neighbor, node, new_weight, visited, result)\n        visited.remove(node)\n    \n    result = []\n    for q in queries:\n        visited = set()\n        current_result = [0, 0]\n        dfs(1, 0, 0, visited, current_result)\n        result.append(current_result[1])\n    \n    return \" \".join(map(str, result))\n\ninputs = [\n    \"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\",\n    \"1 2\\n1 2\\n\",\n    \"3 3\\n1 2 1\\n2 3 2\\n1 3 2\"\n]\n\nfor input_str in inputs:\n    print(solution(input_str)) ",
        "test": "assert solution(\"1 2\\n1 2\\n\") == \"0 0 \""
    },
    {
        "number": 4523,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split('\\n')\n    t = int(test_cases[0])\n\n    for i in range(1, t * 2, 2):\n        n = int(test_cases[i])\n        a = list(map(int, test_cases[i+1].split()))\n\n        unique_elements = set(a)\n        if len(unique_elements) == 1:\n            print(\"YES\")\n        else:\n            if len(unique_elements) == 2:\n                diff = abs(list(unique_elements)[0] - list(unique_elements)[1])\n                if diff == 1:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n            else:\n                print(\"NO\")\n\nstdin = '''5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100'''\nsolution(stdin) ",
        "test": "assert solution(\"5\\n3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\") == \"YES\\nYES\\nNO\\nNO\\nYES\" "
    },
    {
        "number": 4524,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a, b = stdin.split('\\n')[-2:]\n    \n    def bitwise_and(x: str, y: str) -> str:\n        result = ''\n        for i in range(len(x)):\n            result += str(int(x[i]) & int(y[i]))\n        return result\n    \n    def round_down(x: str) -> str:\n        return x[:-1]\n    \n    answer = 0\n    while int(b) > 0:\n        answer += int(bitwise_and(a, b), 2)\n        b = round_down(b)\n    \n    return str(answer % 998244353)",
        "test": "assert solution(\"4 5\\n1001\\n10101\") == \"11\""
    },
    {
        "number": 4525,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_array(n: int) -> str:\n        if n == 2:\n            return \"YES\\n2 1\"\n        if n % 2 != 0 or n < 2:\n            return \"NO\"\n        first_half_sum = 2\n        second_half_sum = 1\n        for i in range(2, n // 2 + 1):\n            if first_half_sum + i == second_half_sum:\n                a = [2] * (i - 1) + [1] + [2] * i\n                a[i - 1] = 1\n                a[n // 2 + i] = first_half_sum + i\n                if all(a[i] != a[j] for i in range(n) for j in range(i + 1, n)):\n                    return \"YES\\n\" + \" \".join(map(str, a))\n            else:\n                first_half_sum += 2\n                second_half_sum += 2\n        return \"NO\"\n\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        print(find_array(n))\n",
        "test": "assert solution(\"5\\n2\\n4\\n6\\n8\\n10\") == \"NO\\nYES\\n2 4 1 5\\nNO\\nYES\\n2 4 6 8 1 3 5 11\\nNO\" "
    },
    {
        "number": 4526,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    results = []\n\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n\n        special_count = 0\n        for j in range(n):\n            for k in range(j + 1, n):\n                if sum(a[j:k+1]) == a[j]:\n                    special_count += 1\n\n        results.append(special_count)\n\n    return '\\n'.join(map(str, results))\n\ninput_data = '''\n5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n'''\noutput_data = solution(input_data)\nprint(output_data) ",
        "test": "assert solution(\"5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\\n8\\n8 7 6 5 4 3 2 1\\n1\\n1\") == \"5\\n1\\n0\\n4\\n0\""
    },
    {
        "number": 4527,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_intersecting(seg1, seg2):\n        return seg1[0] <= seg2[1] and seg1[1] >= seg2[0]\n\n    def is_inside(seg1, seg2):\n        return seg2[0] <= seg1[0] and seg1[1] <= seg2[1]\n\n    def find_subset(segments):\n        n = len(segments)\n        dp = [0] * (1 << n)\n        for subset in range(1, 1 << n):\n            dp[subset] = 1\n            for i in range(n):\n                if (subset & (1 << i)) == 0:\n                    continue\n                for j in range(i + 1, n):\n                    if (subset & (1 << j)) == 0:\n                        continue\n                    if is_intersecting(segments[i], segments[j]):\n                        dp[subset] = max(dp[subset], dp[subset ^ (1 << i)] ^ (1 << j))\n                    elif is_inside(segments[i], segments[j]):\n                        dp[subset] = max(dp[subset], dp[subset ^ (1 << i)] | (1 << j))\n\n        return max(dp)\n\n    def process_test_case(n, segments):\n        return find_subset(segments)\n\n    output = []\n    test_cases = stdin.split(\"\\n\")\n    num_test_cases = int(test_cases[0])\n    for i in range(1, num_test_cases + 1):\n        test_case_input = test_cases[i * (n + 1) - 1].split()\n        n = int(test_case_input[0])\n        segments = [tuple(map(int, line.split())) for line in test_case_input[1:]]\n        output.append(str(process_test_case(n, segments)))\n\n    return \"\\n\".join(output)",
        "test": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == \"3\\n4\\n2\\n7\" "
    },
    {
        "number": 4528,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.splitlines()[0])\n    answers = []\n    \n    for i in range(1, test_cases + 1):\n        h, m = map(int, stdin.splitlines()[i].split())\n        minutes_before_new_year = 60 * (23 - h) + (60 - m)\n        answers.append(minutes_before_new_year)\n    \n    return '\\n'.join(map(str, answers))",
        "test": "assert solution(\"5\\n23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\""
    },
    {
        "number": 4529,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    result = []\n\n    for _ in range(cases):\n        n = int(stdin.readline())\n        s = stdin.readline().strip()\n\n        max_length = n\n        start = 0\n        end = 0\n        char_count = {'L': 0, 'R': 0, 'U': 0, 'D': 0}\n\n        while end < n:\n            char_count[s[end]] += 1\n            while char_count['L'] == char_count['R'] and char_count['U'] == char_count['D']:\n                char_count[s[start]] -= 1\n                start += 1\n            if end - start + 1 < max_length:\n                max_length = end - start + 1\n                result.append(f\"{start + 1} {end + 1}\")\n\n            end += 1\n\n        if max_length == n:\n            result.append(\"-1\")\n\n    return \"\\n\".join(result)\n",
        "test": "assert solution(\"4\\nLRUD\\n4\\nLURD\\n5\\nRRUDU\\n5\\nLLDDR\") == \"1 2\\n1 4\\n3 4\\n-1\""
    },
    {
        "number": 4530,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    test_cases = stdin.split(\"\\n\")\n    for i in range(0, len(test_cases), 2):\n        n = int(test_cases[i])\n        skills = list(map(int, test_cases[i + 1].split()))\n\n        max_size = 0\n        for size in range(1, len(skills) // 2 + 1):\n            for team1 in itertools.combinations(skills, size):\n                team1_skills = set(team1)\n                team1_size = len(team1)\n                if len(team1_skills) == team1_size:\n                    for team2 in itertools.combinations(skills, team1_size):\n                        team2_skills = set(team2)\n                        if team1_skills == team2_skills:\n                            max_size = max(max_size, team1_size)\n\n        result.append(str(max_size))\n\n    return \"\\n\".join(result)\n\ndef",
        "test": "assert solution(\"4\\n7\\n4 2 4 1 4 3\\n5\\n2 1 5 4 3\\n1\\n1\\n1 1 1 3\") == \"3\\n1\\n0\\n2\""
    },
    {
        "number": 4531,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    values = list(map(int, stdin.splitlines()[1].split()))\n    edges = [list(map(int, line.split())) for line in stdin.splitlines()[2:]]\n    \n    def distance(u, v):\n        visited = [False] * n\n        queue = [u]\n        visited[u-1] = True\n        dist = 0\n        \n        while queue:\n            node = queue.pop(0)\n            for neighbor in edges:\n                if neighbor[0] == node:\n                    neighbor = neighbor[1]\n                elif neighbor[1] == node:\n                    neighbor = neighbor[0]\n                else:\n                    continue\n                \n                if not visited[neighbor-1]:\n                    visited[neighbor-1] = True\n                    queue.append(neighbor)\n                    if neighbor == v:\n                        return dist + 1\n            dist += 1\n            \n        return -1\n    \n    max_cost = 0\n    for i in range(1, n+1):\n        cost = sum([distance(j, i) * values[j-1] for j in range(1, n+1)])\n        max_cost = max(max_cost, cost)\n        \n    return str(max_cost) ",
        "test": "assert solution(\"1\\n1337\") == \"0\" "
    },
    {
        "number": 4532,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    t = int(test_cases[0])\n    output = []\n\n    for i in range(1, t * 2, 2):\n        n, k = map(int, test_cases[i].split())\n        a = list(map(int, test_cases[i + 1].split()))\n\n        min_moves = float('inf')\n        for j in range(1, n + 1):\n            moves = 0\n            for ai in a:\n                if ai % k != 0:\n                    moves += (k - ai % k)\n            min_moves = min(min_moves, moves)\n            a[j - 1] += 1\n\n        output.append(str(min_moves))\n\n    return \"\\n\".join(output)",
        "test": "assert solution(\"5\\n4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8\\n1 2 3 4 5 6 7 8\") == \"6\\n18\\n0\\n227\\n8\\n\""
    },
    {
        "number": 4533,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find_content_children(children_greed_factors: list, cookies_sizes: list) -> int:\n        cookies_sizes.sort(reverse=True)\n        children_greed_factors.sort(reverse=True)\n        content_children = 0\n        for child_greed_factor in children_greed_factors:\n            for cookie_size in cookies_sizes:\n                if cookie_size >= child_greed_factor:\n                    content_children += 1\n                    cookies_sizes.remove(cookie_size)\n                    break\n        return content_children\n\n    def main(input_data: str) -> str:\n        input_data = input_data.split(\",\")\n        children_greed_factors = [int(child_greed_factor) for child_greed_factor in input_data[0].strip(\"[]\").split(\",\")]\n        cookies_sizes = [int(cookie_size) for cookie_size in input_data[1].strip(\"[]\").split(\",\")]\n        content_children = find_content_children(children_greed_factors, cookies_sizes)\n        return str(content_children)\n\n    input_data = stdin.strip()\n    result = main(input_data)\n    return result",
        "test": "assert solution(\"[1,2,3],[1,1]\") == \"1\""
    },
    {
        "number": 4534,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 0 or k > 33:\n        return \"Invalid input\"\n\n    row = [1]\n\n    for i in range(1, k + 1):\n        prev_row = row\n        row = [1]\n\n        for j in range(1, i):\n            row.append(prev_row[j - 1] + prev_row[j])\n\n        row.append(1)\n\n    return row",
        "test": "assert solution(0) == [1]"
    },
    {
        "number": 4535,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input binary string to integer\n    n = int(stdin, 2)\n\n    # Count number of '1' bits\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n\n    return str(count)",
        "test": "assert solution('00000000000000000000000000001011') == '3'"
    },
    {
        "number": 4536,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to a list of digits\n    digits = [int(c) for c in stdin]\n\n    # Find the index of the least significant digit (i.e. the rightmost digit)\n    i = len(digits) - 1\n\n    # Increment the digit at the least significant digit by 1\n    digits[i] += 1\n\n    # Check if we need to carry over to the next digit\n    while digits[i] == 10:\n        # If so, set the current digit to 0 and move to the next digit to the left\n        digits[i] = 0\n        i -= 1\n\n        # If we reach the leftmost digit and it's already 9, then we need to add a new least significant digit to the left\n        if i == -1:\n            digits.insert(0, 0)\n            i = 0\n\n    # Convert the resulting list of digits back to a string\n    result = ''.join([str(d) for d in digits])\n\n    return result",
        "test": "assert solution([4, 3, 2, 1]) == [4, 3, 2, 2]"
    },
    {
        "number": 4537,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    max_value = max(A + B, A - B, A * B)\n    return str(max_value)",
        "test": "assert solution(\"3 1\") == \"4\""
    },
    {
        "number": 4538,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, D = map(int, stdin.split(\"\\n\")[0].split())\n    points = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:N+1]]\n\n    # calculate distances\n    distances = [((x**2 + y**2)**0.5) for x, y in points]\n\n    # count points within distance D\n    count = sum(1 for dist in distances if dist <= D)\n\n    return str(count)",
        "test": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\\n\") == \"3\""
    },
    {
        "number": 4539,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(n))\n    return \"Yes\" if n % digits_sum == 0 else \"No\"",
        "test": "assert solution(\"12\") == \"Yes\""
    },
    {
        "number": 4540,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    A = [int(x) for x in lines[1].split()]\n    \n    def cost(a: int, b: int) -> int:\n        return abs(a - b)\n    \n    def travel_cost(A: List[int]) -> int:\n        total_cost = 0\n        for i in range(len(A)):\n            if i == 0:\n                total_cost += cost(0, A[i])\n            else:\n                total_cost += cost(A[i-1], A[i])\n        return total_cost\n    \n    def cancel_i(A: List[int], i: int) -> int:\n        A = A[:i] + A[i+1:]\n        return travel_cost(A)\n    \n    output = [str(cancel_i(A, i)) for i in range(N)]\n    \n    return \"\\n\".join(output)",
        "test": "assert solution(\"3\\n3 5 -1\\n\") == \"12\\n8\\n10\\n\""
    },
    {
        "number": 4541,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if stdin.lower() in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'",
        "test": "assert solution(\"a\") == \"vowel\" "
    },
    {
        "number": 4542,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    board = [char for char in stdin]\n    black_count = 0\n    white_count = 0\n\n    for stone in board:\n        if stone == 'B':\n            black_count += 1\n        elif stone == 'W':\n            white_count += 1\n\n    return min(black_count, white_count)",
        "test": "assert solution(\"BWBWWBW\") == \"2\""
    },
    {
        "number": 4543,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    concatenated_number = int(str(a) + str(b))\n    root = int(concatenated_number ** 0.5)\n    \n    if root ** 2 == concatenated_number:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1 21\") == \"Yes\""
    },
    {
        "number": 4544,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, sequence = stdin.split('\\n')\n    N = int(N)\n    a = list(map(int, sequence.split()))\n\n    max_count = 0\n    for x in range(1, max(a) + 1):\n        count = 0\n        for i in range(N):\n            if a[i] == x:\n                count += 1\n        max_count = max(max_count, count)\n\n    return str(max_count)",
        "test": "assert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"1\""
    },
    {
        "number": 4545,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, A = list(map(int, stdin.split()))\n    return str(N*N - A)",
        "test": "assert solution(\"3\\n4\") == \"5\""
    },
    {
        "number": 4546,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    return \"YES\" if b - a == c - b else \"NO\"",
        "test": "assert solution(\"2 4 6\") == \"YES\""
    },
    {
        "number": 4547,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n // 10 == 9 or n % 10 == 9:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"29\") == \"Yes\""
    },
    {
        "number": 4548,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = map(int, stdin.split()[:3])\n    A = list(map(int, stdin.split()[3:]))\n    toll_cost = 1\n    min_cost = 0\n\n    for i in range(M):\n        if A[i] - 1 == X:\n            min_cost += toll_cost\n            X = A[i]\n        elif A[i] < X:\n            min_cost += toll_cost\n            X -= 1\n        else:\n            min_cost += toll_cost\n            X += 1\n\n    return str(min_cost)",
        "test": "assert solution(\"5 3 3\\n1 2 4\") == \"1\""
    },
    {
        "number": 4549,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    H, W = map(int, lines[0].split())\n    grid = [list(line) for line in lines[1:]]\n    square1001 = Square(H, W, grid)\n    return \"Yes\" if square1001.can_paint() else \"No\"\n\nclass Square:\n    def __init__(self, H, W, grid):\n        self.H = H\n        self.W = W\n        self.grid = grid\n\n    def can_paint(self):\n        def dfs(i, j, color):\n            if not (0 <= i < self.H and 0 <= j < self.W):\n                return True\n            if self.grid[i][j] == color:\n                return True\n            self.grid[i][j] = color\n            return all(dfs(x, y, color) for x, y in self._adjacent_squares(i, j))\n\n        return dfs(0, 0, '#') and dfs(self.H - 1, self.W - 1, '..')\n\n    def _adjacent_squares(self, i, j):\n        return [(x, y) for x in (i - 1, i, i + 1) for y in (j - 1, j, j + 1) if (x, y) != (i, j)]",
        "test": "assert solution(\"3 3\\n.#.\\n###\\n.#.\\n\") == \"Yes\""
    },
    {
        "number": 4550,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    total = a + b + c\n    if total % 2 == 1:\n        return \"No\"\n    else:\n        return \"Yes\"",
        "test": "assert solution(\"10 30 20\") == \"Yes\""
    },
    {
        "number": 4551,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    left_sum = A + B\n    right_sum = C + D\n    if left_sum > right_sum:\n        return \"Left\"\n    elif left_sum == right_sum:\n        return \"Balanced\"\n    else:\n        return \"Right\"",
        "test": "assert solution(\"3 8 7 1\") == \"Left\""
    },
    {
        "number": 4552,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    F = [[] for _ in range(N+1)]\n    P = [[] for _ in range(N+1)]\n    \n    for i in range(1, N+1):\n        F[i] = list(map(int, lines[i].split()))\n        P[i] = list(map(int, lines[N+i].split()))\n    \n    # Calculate the maximum profit\n    max_profit = 0\n    for i in range(1, N+1):\n        periods_open = []\n        for j in range(5):\n            for k in range(2):\n                if F[i][j*2+k] == 1:\n                    periods_open.append(j*2+k+1)\n        if periods_open:\n            profit = 0\n            for period in periods_open:\n                profit += P[i][period-1]\n            max_profit = max(max_profit, profit)\n    \n    return str(max_profit)",
        "test": "assert solution(\"1\\n1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\") == \"8\""
    },
    {
        "number": 4553,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, S = stdin.split()\n    if len(S) != int(A) + int(B) + 1:\n        return \"No\"\n    if S[int(A) - 1] != '-':\n        return \"No\"\n    for i in range(len(S)):\n        if i == int(A) - 1:\n            continue\n        if not S[i].isdigit() or int(S[i]) < 0 or int(S[i]) > 9:\n            return \"No\"\n    return \"Yes\"",
        "test": "assert solution(\"2 3\\n2696650\") == \"No\""
    },
    {
        "number": 4554,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    # determine the distance between the two rectangles\n    distance = b - a - W\n    # return the minimum distance\n    return str(abs(distance))",
        "test": "assert solution(\"3 2 6\") == \"1\"  # Sample Input"
    },
    {
        "number": 4555,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    integers = sorted([i for i in range(A, B+1)])\n    return '\\n'.join([str(x) for x in integers[:K] + integers[-K:]])",
        "test": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\""
    },
    {
        "number": 4556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    name, _, _ = stdin.partition(' ')\n    return ''.join(char for char in name if char.isupper())\n\ndef",
        "test": "assert solution(\"AtCoder Regular Contest\") == \"ARC\""
    },
    {
        "number": 4557,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if X > A + B:\n        return \"NO\"\n    if X > A:\n        return \"YES\"\n    return \"NO\"",
        "test": "assert solution(\"3 5 4\") == \"YES\""
    },
    {
        "number": 4558,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    return str(X - t)",
        "test": "assert solution(\"100 17\") == \"83\" "
    },
    {
        "number": 4559,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *numbers = stdin.split()\n    n = int(n)\n    product = 1\n\n    for num in numbers:\n        product *= int(num)\n\n    if product > 10**18:\n        return \"-1\"\n    else:\n        return str(product)\n",
        "test": "assert solution(\"2\\n1000000000 1000000000\") == \"1000000000000000000\""
    },
    {
        "number": 4560,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n == 0:\n        return \"Yes\"\n    elif n < 0:\n        return \"No\"\n    elif n <= a:\n        return \"Yes\"\n    elif n % 500 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1\\n1\") == \"Yes\""
    },
    {
        "number": 4561,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    \n    if A <= X:\n        return \"safe\"\n    elif A > X+B:\n        return \"dangerous\"\n    else:\n        return \"delicious\"",
        "test": "assert solution(\"4 3 6\") == \"safe\""
    },
    {
        "number": 4562,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    largest_square = 0\n\n    for i in range(1, n + 1):\n        square = i * i\n        if square <= n and square > largest_square:\n            largest_square = square\n\n    return str(largest_square)",
        "test": "assert solution(\"10\") == \"9\""
    },
    {
        "number": 4563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    input_lines = stdin.split(\"\\n\")\n    N = int(input_lines[0])\n    T_i = []\n    A_i = []\n\n    for i in range(1, N + 1):\n        T_i.append(int(input_lines[i].split()[0]))\n        A_i.append(int(input_lines[i].split()[1]))\n\n    min_votes = 1\n    for i in range(N - 1, 0, -1):\n        min_votes = math.gcd(min_votes * T_i[i], min_votes * A_i[i])\n\n    return str(min_votes)\n\nstdin = \"3\\n2 3\\n1 1\\n3 2\\n\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"5\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n\") == \"5\""
    },
    {
        "number": 4564,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) != len(set(stdin)):\n        return \"no\"\n    else:\n        return \"yes\"",
        "test": "assert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"yes\""
    },
    {
        "number": 4565,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split(\"\\n\")\n    N = int(N)\n    \n    min_changes = N\n    for i in range(N):\n        changes = S[:i].count(\"W\") + S[i:].count(\"E\")\n        min_changes = min(min_changes, changes)\n    \n    return str(min_changes)",
        "test": "assert solution(\"5\\nWEEWW\") == \"1\""
    },
    {
        "number": 4566,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    roads = [[] for _ in range(N+1)]\n    for i in range(M):\n        a, b = map(int, stdin.split()[2*i+2:2*i+4])\n        roads[a].append(i+1)\n        roads[b].append(i+1)\n    return '\\n'.join([str(len(road)) for road in roads[1:]])",
        "test": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\""
    },
    {
        "number": 4567,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    num_questions, *question_scores = map(int, stdin.split())\n\n    max_score = sum(question_scores)\n    min_score = max_score - 10\n\n    for score in range(min_score, max_score + 1):\n        if score % 10 != 0 or (score % 10 == 0 and score > 0):\n            return str(score)\n\n    return \"No valid grade found.\"",
        "test": "assert solution(\"4\\n5\\n10\\n15\\n20\") == \"40\""
    },
    {
        "number": 4568,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    S = stdin.split(\"\\n\")[1]\n    max_count = 0\n    for i in range(1, N):\n        count = len(set(S[:i]) & set(S[i:]))\n        if count > max_count:\n            max_count = count\n    return str(max_count)",
        "test": "assert solution(\"6\\naabbca\\n\") == \"2\" "
    },
    {
        "number": 4569,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    weather_dict = {\"Sunny\": \"Cloudy\", \"Cloudy\": \"Rainy\", \"Rainy\": \"Sunny\"}\n    return weather_dict[stdin]",
        "test": "assert solution(\"Sunny\") == \"Cloudy\""
    },
    {
        "number": 4570,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    fee1 = A * N\n    fee2 = B\n    minimum_fee = min(fee1, fee2)\n    return str(minimum_fee)",
        "test": "assert solution(\"7 17 120\") == \"119\""
    },
    {
        "number": 4571,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    \n    total_time = 0\n    probability = 0.5\n    for case in range(M):\n        total_time += 1900 * probability\n        probability /= 2\n    \n    probability = 1\n    for case in range(N - M):\n        total_time += 100 * probability\n        probability /= 2\n    \n    return str(int(total_time))\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "assert solution(\"5 3\") == \"1000000\" "
    },
    {
        "number": 4572,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    letters = set(\"abcdefghijklmnopqrstuvwxyz\")\n    for char in stdin:\n        if char in letters:\n            letters.remove(char)\n    \n    if len(letters) == 0:\n        return \"None\"\n    else:\n        return sorted(letters)[0]",
        "test": "assert solution(\"atcoderregularcontest\") == \"b\""
    },
    {
        "number": 4573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    X = list(map(int, stdin.split()[1:]))\n    sorted_X = sorted(X)\n\n    output = \"\"\n    for i in range(N):\n        B_i = sorted_X[i // 2] if N % 2 == 0 else sorted_X[(i - 1) // 2]\n        output += str(B_i) + \"\\n\"\n\n    return output\n\n\ndef",
        "test": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\\n\""
    },
    {
        "number": 4574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, sticks = stdin.split(\"\\n\")\n    n = int(n)\n    sticks = [int(x) for x in sticks.split(\" \")]\n\n    # Find all possible combinations of 4 sticks\n    max_area = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    area = sticks[i] * sticks[j] * sticks[k] * sticks[l]\n                    if area > max_area:\n                        max_area = area\n\n    # Check if a rectangle can be formed\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    if sticks[i] == sticks[j] and sticks[k] == sticks[l]:\n                        return str(sticks[i] * sticks[k])\n\n    return str(max_area) ",
        "test": "assert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"0\""
    },
    {
        "number": 4575,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    D, X = map(int, lines[1].split())\n    A = [int(line) for line in lines[2:]]\n\n    chocolate_prepared = D * X\n\n    for i in range(N):\n        chocolate_eaten = 0\n        for j in range(D):\n            if (j + 1) % (A[i] + 1) == 0:\n                chocolate_eaten += 1\n        chocolate_prepared -= chocolate_eaten\n\n    return str(chocolate_prepared)\n\ninput_str = \"\"\"3\n7 1\n2\n5\n10\"\"\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"2\\n5 3\\n1\\n4\") == \"14\""
    },
    {
        "number": 4576,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def count_ways(a, b, c, x):\n        total_coins = a + b + c\n        if total_coins == 0 or x == 0:\n            return 1\n        if x % 50 != 0:\n            return 0\n        if x > 20000:\n            return 0\n        if a == 0:\n            return count_ways(b, c, 0, x // 2)\n        if b == 0:\n            return count_ways(a, c, 0, x // 3)\n        if c == 0:\n            return count_ways(a, b, 0, x // 5)\n\n        return count_ways(a - 1, b, c, x - 50) + \\\n               count_ways(a, b - 1, c, x - 100) + \\\n               count_ways(a, b, c - 1, x - 50)\n\n    a, b, c, x = map(int, stdin.split())\n    x //= 50\n    return str(count_ways(a, b, c, x))",
        "test": "assert solution(\"0\\n0\\n0\\n0\") == \"1\""
    },
    {
        "number": 4577,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C >= A and C <= B:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"1 3 2\") == \"Yes\""
    },
    {
        "number": 4578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    moto = [int(x) for x in stdin.split()[2:]]\n    \n    # First, sort the moto list in descending order\n    moto.sort(reverse=True)\n    \n    # Initialize the counter and the total sum of moto consumed\n    counter = 0\n    total_moto = 0\n    \n    # Iterate through the moto list, making as many doughnuts as possible for each kind\n    for m in moto:\n        doughnuts = X // m\n        if doughnuts > 0:\n            counter += 1\n            total_moto += doughnuts * m\n            X -= doughnuts * m\n        else:\n            break\n    \n    # Calculate the number of additional doughnuts that can be made\n    additional_doughnuts = X // moto[-1]\n    if additional_doughnuts > 0:\n        counter += additional_doughnuts\n        total_moto += additional_doughnuts * moto[-1]\n    \n    # Return the total number of doughnuts that can be made\n    return str(counter)",
        "test": "assert solution(\"4 2000\\n100\\n150\\n200\\n250\") == \"9\\n\""
    },
    {
        "number": 4579,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    items = set()\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n\n    for i in range(1, n + 1):\n        items.add(lines[i])\n\n    return str(len(items))",
        "test": "assert solution(\"3\\napple\\norange\\napple\") == \"2\""
    },
    {
        "number": 4580,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N = int(stdin.split()[0])\n    ratings = list(map(int, stdin.split()[1:]))\n\n    # Define the color mapping\n    color_mapping = {\n        (1, 399): \"gray\",\n        (400, 799): \"brown\",\n        (800, 1199): \"green\",\n        (1200, 1599): \"cyan\",\n        (1600, 1999): \"blue\",\n        (2000, 2399): \"yellow\",\n        (2400, 2799): \"orange\",\n        (2800, 4800): \"red\",\n    }\n\n    # Create a set to store the different colors\n    colors = set()\n\n    # Iterate through the ratings and add the corresponding color to the set\n    for rating in ratings:\n        for range_ in color_mapping:\n            if range_[0] <= rating <= range_[1]:\n                colors.add(color_mapping[range_])\n                break\n\n    # Return the minimum and maximum possible number of different colors\n    return f\"{len(colors)} {len(colors)}\"",
        "test": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\""
    },
    {
        "number": 4581,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    price = 700  # price of a bowl of ramen\n\n    # Check if the customer wants to add boiled egg\n    if S[0] == 'o':\n        price += 100\n\n    # Check if the customer wants to add sliced pork\n    if S[1] == 'o':\n        price += 100\n\n    # Check if the customer wants to add green onions\n    if S[2] == 'o':\n        price += 100\n\n    return str(price)",
        "test": "assert solution(\"oxo\") == \"900\""
    },
    {
        "number": 4582,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == b:\n        return \"H\"\n    else:\n        return \"D\"",
        "test": "assert solution('H H') == 'H'"
    },
    {
        "number": 4583,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin)\n    if A + B + C + D == 7:\n        return f\"{A}+{B}+{C}+{D}=7\"\n    elif A - B - C - D == 7:\n        return f\"{A}-{B}-{C}-{D}=7\"\n    elif A + B - C - D == 7:\n        return f\"{A}+{B}-{C}-{D}=7\"\n    elif A + B + C - D == 7:\n        return f\"{A}+{B}+{C}-{D}=7\"\n    elif A - B + C - D == 7:\n        return f\"{A}-{B}+{C}-{D}=7\"\n    elif A - B + C + D == 7:\n        return f\"{A}-{B}+{C}+{D}=7\"\n    elif A + B - C + D == 7:\n        return f\"{A}+{B}-{C}+{D}=7\"\n    elif A + B + C + D == 7:\n        return f\"{A}+{B}+{C}+{D}=7\"\n    elif A - B - C + D == 7:\n        return f\"{A}-{B}-{C}+{D}=7\"\n    elif A - B + C + D == 7:\n        return f\"{A}-{B}+{C}+{D}=7\"\n    elif A + B - C + D == 7:\n        return f\"{A}+{B}-{C}+{D}=7\"\n    elif A - B - C - D == 7:\n        return f\"{A}-{B}-{C}-{D}=7\"\n    elif A + B - C - D == 7:\n        return f\"{A}+{B}-{C}-{D}=7\"\n    elif A + B + C - D == 7:\n        return f\"{A}+{B}+{C}-{D}=7\"\n    elif A - B + C - D == 7:\n        return f\"{A}-{B}+{C}-{D}=7\"\n    elif A - B + C + D == 7:\n        return f\"{A}-{B}+{C}+{D}=7\"\n    else:\n        return \"No solution found.\" ",
        "test": "assert solution(\"1222\") == \"1+2+2+2=7\" "
    },
    {
        "number": 4584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    boss_count = [0] * (N + 1)\n\n    for i in range(2, N + 1):\n        boss_count[A[i]] += 1\n\n    return \"\\n\".join(map(str, boss_count[1:]))",
        "test": "assert solution(\"5\\n1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\\n\""
    },
    {
        "number": 4585,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X == 1:\n        return \"1\"\n    if X % 2 == 0:\n        return str(X // 2)\n    else:\n        return str((X + 1) // 2)",
        "test": "assert solution('6') == '3'"
    },
    {
        "number": 4586,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = str(n)\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"1118\") == \"Yes\""
    },
    {
        "number": 4587,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    upper_parts = list(map(int, lines[1].split()))\n    middle_parts = list(map(int, lines[2].split()))\n    lower_parts = list(map(int, lines[3].split()))\n\n    def is_valid_altar(upper_part: int, middle_part: int, lower_part: int) -> bool:\n        return middle_part > upper_part and lower_part > middle_part\n\n    def count_altars() -> int:\n        count = 0\n        for i in range(n):\n            for j in range(n):\n                for k in range(n):\n                    if is_valid_altar(upper_parts[i], middle_parts[j], lower_parts[k]):\n                        count += 1\n        return count\n\n    return str(count_altars())",
        "test": "assert solution('2\\n1 5\\n2 4\\n3 6') == '3'"
    },
    {
        "number": 4588,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x_hex = \"0x\" + x\n    y_hex = \"0x\" + y\n\n    if x_hex < y_hex:\n        return \"<\"\n    elif x_hex > y_hex:\n        return \">\"\n    else:\n        return \"=\"",
        "test": "assert solution(\"A B\") == \"<\""
    },
    {
        "number": 4589,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    h, w = map(int, lines[0].split())\n    s = lines[1:h+1]\n    \n    def count_bombs(i, j):\n        count = 0\n        for x in range(-1, 2):\n            for y in range(-1, 2):\n                if 0 <= i+x < h and 0 <= j+y < w and s[i+x][j+y] == '#':\n                    count += 1\n        return str(count)\n    \n    result = []\n    for i in range(h):\n        row = \"\"\n        for j in range(w):\n            if s[i][j] == '.':\n                row += count_bombs(i, j)\n            else:\n                row += s[i][j]\n        result.append(row)\n    \n    return \"\\n\".join(result)\n\nstdin = \"3 5\\n.....\\n.#.#.\\n.....\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\\n1#2#1\\n11211\""
    },
    {
        "number": 4590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, A, B = stdin.split()\n    N, M, K = int(N), int(M), int(K)\n    A, B = list(map(int, A)), list(map(int, B))\n    \n    def can_read_books(A: list, B: list, K: int) -> int:\n        total_time = 0\n        for i in range(min(len(A), len(B))):\n            total_time += min(A[i], B[i])\n            if total_time > K:\n                return i\n        return len(A) + len(B)\n    \n    return str(can_read_books(A, B, K))",
        "test": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\""
    },
    {
        "number": 4591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n\n    AB = (A + B) // 2\n\n    A_pizzas = X\n    B_pizzas = Y\n\n    while A_pizzas > 0 and B_pizzas > 0:\n        if AB * 2 < A + B:\n            A_pizzas -= 1\n            B_pizzas -= 2\n        else:\n            A_pizzas -= 2\n            B_pizzas -= 1\n\n    return str(A_pizzas * A + B_pizzas * B)",
        "test": "assert solution(\"1000 2000 1500 10 20\") == \"29200\" "
    },
    {
        "number": 4592,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def count_divisors(n: int) -> int:\n        count = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                count += 1\n        return count\n\n    N = int(stdin)\n    MOD = 10**9 + 7\n    return str(count_divisors(N) * count_divisors(N - 1) % MOD)",
        "test": "assert solution('3') == '4'"
    },
    {
        "number": 4593,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    largest_power = None\n    for b in range(2, int(x**0.5)+1):\n        p = 2\n        while b**p <= x:\n            if largest_power is None or b**p > largest_power:\n                largest_power = b**p\n            p += 1\n    return str(largest_power)",
        "test": "assert solution(\"10\") == \"9\""
    },
    {
        "number": 4594,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    diameters = [int(d) for d in lines[1:]]\n\n    # Sort the diameters in descending order\n    diameters.sort(reverse=True)\n\n    # Initialize the number of layers and the index of the last mochi used\n    layers = 1\n    last_used = 0\n\n    # Iterate through the diameters\n    for i in range(1, N):\n        # Check if the current diameter is smaller than the diameter of the mochi directly below it\n        if diameters[i] < diameters[last_used]:\n            # If it is, increase the number of layers and update the index of the last mochi used\n            layers += 1\n            last_used = i\n\n    return str(layers)",
        "test": "assert solution(\"1\\n10\") == \"1\""
    },
    {
        "number": 4595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == 'A' and s[j] == 'Z':\n                return str(j - i + 1)\n                \ninput_str = input()\nprint(solution(input_str)) ",
        "test": "assert solution(\"QWERTYUIOPASDFZXCVBNM\") == \"11\""
    },
    {
        "number": 4596,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    count = 0\n\n    while all(x % 2 == 0 for x in A):\n        A = [x // 2 for x in A]\n        count += 1\n\n    return str(count)",
        "test": "assert solution('3\\n8 12 40') == '2'"
    },
    {
        "number": 4597,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = 1\n    for i in range(2, N+1):\n        result = (result * i) % (10**9 + 7)\n    return str(result)",
        "test": "assert solution(\"1\") == \"1\""
    },
    {
        "number": 4598,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    return str((N * (N + 1)) // 2)  # Calculate the sum of first N natural numbers using the formula (N * (N + 1)) // 2.",
        "test": "assert solution(\"1\") == \"1\""
    },
    {
        "number": 4599,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    N = int(input_data[0])\n    cards = list(map(int, input_data[1].split()))\n\n    alice_cards = []\n    bob_cards = []\n\n    for i in range(N):\n        if i % 2 == 0:\n            alice_cards.append(cards[i])\n        else:\n            bob_cards.append(cards[i])\n\n    alice_score = sum(alice_cards)\n    bob_score = sum(bob_cards)\n\n    return str(alice_score - bob_score)",
        "test": "assert solution(\"2\\n3 1\") == \"2\""
    },
    {
        "number": 4600,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, M = map(int, lines[0].split())\n    problem_status = [{} for _ in range(N + 1)]\n\n    for i in range(1, M + 1):\n        problem, verdict = lines[i].split()\n        problem = int(problem)\n\n        if verdict == \"AC\":\n            if problem not in problem_status[problem]:\n                problem_status[problem][\"AC\"] = i\n            else:\n                problem_status[problem][\"AC\"] = min(problem_status[problem][\"AC\"], i)\n        else:\n            if problem not in problem_status[problem]:\n                problem_status[problem][\"WA\"] = i\n            else:\n                problem_status[problem][\"WA\"] = min(problem_status[problem][\"WA\"], i)\n\n    correct_answers = 0\n    penalties = 0\n\n    for problem in range(1, N + 1):\n        if \"AC\" in problem_status[problem]:\n            correct_answers += 1\n            penalties += problem_status[problem][\"AC\"] - problem_status[problem][\"WA\"] - 1\n\n    return f\"{correct_answers} {penalties}\"",
        "test": "assert solution(\"1 2\\n1 WA\\n1 AC\") == \"1 0\""
    },
    {
        "number": 4601,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    H = list(map(int, stdin.split()[2:]))\n\n    # Sort the monsters in ascending order of their health\n    H.sort()\n\n    # Initialize the number of attacks needed and the current index\n    attacks_needed = 0\n    current_index = 0\n\n    # Iterate through the monsters, using Special Move when possible\n    for monster_health in H:\n        if K > 0:\n            attacks_needed += monster_health - 1\n            K -= 1\n        else:\n            attacks_needed += monster_health - H[current_index]\n            current_index += 1\n\n    # If there are any remaining monsters, use Attack to finish them off\n    if current_index < N:\n        attacks_needed += N - current_index\n\n    return str(attacks_needed)",
        "test": "assert solution(\"3 1\\n4 1 5\") == \"5\""
    },
    {
        "number": 4602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K, x = map(int, stdin.split())\n    distances = [0] * N\n    for i in range(N):\n        distances[i] = abs(x[i] - i)\n    return min(sum(distances), sum(distances) + 2 * N * K)",
        "test": "assert solution(\"2\\n20\\n2 4\") == \"4\""
    },
    {
        "number": 4603,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    min_fare = min(A, B) + min(C, D)\n    return str(min_fare)",
        "test": "assert solution(\"600\\n300\\n220\\n420\") == \"520\""
    },
    {
        "number": 4604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    A = [int(a) for a in lines[1].split()]\n\n    def dfs(remain: set[int], path: list[int], cache: dict[tuple[frozenset[int], int], int]) -> int:\n        if not remain:\n            return 1\n        key = (frozenset(remain), len(path))\n        if key in cache:\n            return cache[key]\n\n        total = 0\n        for i in remain:\n            total += dfs(remain - {i}, path + [i], cache)\n\n        cache[key] = total\n        return total\n\n    if N == 1:\n        return \"1\"\n\n    remain = set(range(1, N + 1))\n    cache = {}\n    ans = dfs(remain, [], cache)\n    return str(ans % (10**9 + 7))",
        "test": "assert solution(\"6\\n2 5 0 4 2 3\") == \"12\\n\""
    },
    {
        "number": 4605,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n\n    def digit_sum(num: int) -> int:\n        return sum(map(int, str(num)))\n\n    total_sum = 0\n    for i in range(1, N + 1):\n        if A <= digit_sum(i) <= B:\n            total_sum += i\n\n    return str(total_sum)\n",
        "test": "assert solution(\"20 2 5\") == \"84\""
    },
    {
        "number": 4606,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return f\"ABC{N}\"",
        "test": "assert solution(\"100\") == \"ABC100\""
    },
    {
        "number": 4607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    count = 0\n    for day in range(1, b + 1):\n        if a == day:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"1 1\") == \"0\""
    },
    {
        "number": 4608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    a = [int(x) for x in lines[1:]]\n    button_2_pressed = False\n    count = 0\n\n    for i in range(1, N+1):\n        if not button_2_pressed:\n            if i == a[i-1]:\n                count += 1\n                if i == 2:\n                    button_2_pressed = True\n            else:\n                count += 1\n                if i == 2:\n                    return -1\n\n    return str(count)",
        "test": "assert solution(\"3\\n2\\n3\\n1\") == \"-1\""
    },
    {
        "number": 4609,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    nums = [int(x) for x in lines[1:]]\n\n    written_nums = set()\n    for num in nums:\n        if num in written_nums:\n            written_nums.remove(num)\n        else:\n            written_nums.add(num)\n\n    return str(len(written_nums))",
        "test": "assert solution(\"3\\n6\\n2\\n6\") == \"1\""
    },
    {
        "number": 4610,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K, *A = map(int, stdin.split())\n    balls = {a: 1 for a in A}\n\n    for a in A:\n        if len(balls) > K:\n            del balls[a]\n\n    return str(len(balls))",
        "test": "assert solution('6 2\\n1 1 2 2 3 3') == '2'"
    },
    {
        "number": 4611,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    points = []\n    for i in range(1, n + 1):\n        line = lines[i].split()\n        points.append((int(line[1]), int(line[2])))\n\n    points.sort(key=lambda x: x[1])\n    points.sort(key=lambda x: x[0])\n\n    for i in range(1, n):\n        if points[i][1] <= points[i - 1][1]:\n            return \"No\"\n\n    return \"Yes\"\n\nstdin = \"2\\n3 1 2\\n6 1 1\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"3\\n3 1 2\\n4 2 1\\n6 1 1\") == \"No\""
    },
    {
        "number": 4612,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = (a + b) / 2\n    return str(int(round(x)))",
        "test": "assert solution(\"4 5\") == \"4\\n\""
    },
    {
        "number": 4613,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    edges = list(map(lambda x: tuple(map(int, x.split())), stdin.split()[2:]))\n    adj_list = [[] for _ in range(N)]\n    for a, b in edges:\n        adj_list[a-1].append(b-1)\n        adj_list[b-1].append(a-1)\n\n    def dfs(u: int, visited: set) -> set:\n        visited.add(u)\n        for v in adj_list[u]:\n            if v not in visited:\n                dfs(v, visited)\n        return visited\n\n    num_bridges = 0\n    for i in range(M):\n        a, b = edges[i]\n        adj_list[a-1].remove(b-1)\n        adj_list[b-1].remove(a-1)\n        if len(dfs(0, set())) != N:\n            num_bridges += 1\n        adj_list[a-1].append(b-1)\n        adj_list[b-1].append(a-1)\n\n    return str(num_bridges)\n",
        "test": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\\n\""
    },
    {
        "number": 4614,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B:\n        return str(C)\n    elif A == C:\n        return str(B)\n    else:\n        return str(A)",
        "test": "assert solution(\"5 7 5\") == \"7\""
    },
    {
        "number": 4615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n\n    def can_perform_operation(a, b, c, d):\n        return 100 * a <= F and 100 * b <= F and 100 * (c + d) <= F and c <= E and d <= E\n\n    def get_result(a, b, c, d):\n        sugar_mass = min(c, E)\n        water_mass = max(a, b - (d - sugar_mass))\n        return water_mass + sugar_mass, sugar_mass\n\n    def binary_search(low, high):\n        while low < high:\n            mid = (low + high) // 2\n            if can_perform_operation(mid, B, C, D):\n                low = mid + 1\n            else:\n                high = mid\n        return low\n\n    a = binary_search(1, B)\n    if can_perform_operation(a, B, C, D):\n        water_mass, sugar_mass = get_result(a, B, C, D)\n    else:\n        water_mass, sugar_mass = 0, 0\n\n    return f\"{water_mass} {sugar_mass}\"",
        "test": "assert solution(\"2 3 5 7 10 50\") == \"50 25\\n\""
    },
    {
        "number": 4616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    length = len(s)\n    i = s.find('i')\n    n = s.rfind('n')\n    count = n - i + 1\n\n    if count == length:\n        return 'i1n'\n    elif count == length - 1:\n        return 'i18n'\n    else:\n        return 'i1' + str(count - 2) + 'n'",
        "test": "assert solution(\"programming\") == \"prog\""
    },
    {
        "number": 4617,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split(\"\\n\")\n    if len(rows) != 2 or len(rows[0]) != 3 or len(rows[1]) != 3:\n        return \"Invalid Input\"\n    \n    for row in rows:\n        if not row.islower() or not row.isalpha():\n            return \"Invalid Input\"\n\n    if rows[0][::-1] == rows[1] and rows[1][::-1] == rows[0]:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"abc\\ndef\") == \"NO\""
    },
    {
        "number": 4618,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, K = stdin.split(\"\\n\")\n    substrings = sorted(set(s[i:j+1] for i in range(len(s)) for j in range(i, len(s)) if s[i:j+1] != \"\"))\n    return substrings[int(K)-1]",
        "test": "assert solution(\"aba\\n4\") == \"b\""
    },
    {
        "number": 4619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def paint_region(x, y, a_i, painted_rectangle):\n        if a_i == 1:\n            for i in range(x):\n                for j in range(y, H):\n                    painted_rectangle[i][j] = 0\n        elif a_i == 2:\n            for i in range(x, W):\n                for j in range(y, H):\n                    painted_rectangle[i][j] = 0\n        elif a_i == 3:\n            for i in range(x):\n                for j in range(y):\n                    painted_rectangle[i][j] = 0\n        elif a_i == 4:\n            for i in range(x, W):\n                for j in range(y):\n                    painted_rectangle[i][j] = 0\n\n    def calculate_white_area(painted_rectangle):\n        return sum(row.count(1) for row in painted_rectangle)\n\n    W, H, N = map(int, stdin.split()[:3])\n    painted_rectangle = [[1] * H for _ in range(W)]\n    points = stdin.split()[3:]\n    points = [list(map(int, points[i:i+2])) + [int(points[i+2])] for i in range(0, len(points), 3)]\n\n    for x_i, y_i, a_i in points:\n        paint_region(x_i, y_i, a_i, painted_rectangle)\n\n    white_area = calculate_white_area(painted_rectangle)\n    return str(white_area)",
        "test": "assert solution(\"100 100 100\\n25 50 1\\n75 50 2\\n50 25 3\\n50 75 4\") == \"0\""
    },
    {
        "number": 4620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    def earliest_time(S: int, F: int) -> int:\n        gcd_result = gcd(S, F)\n        lcm_result = lcm(S, F)\n        return lcm_result - S + (F - S % F)\n\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    result = []\n\n    for i in range(1, N + 1):\n        C, S, F = map(int, lines[i].split())\n        train_time = C_i + S_i + F_i\n        if i == 1:\n            result.append(train_time)\n        else:\n            prev_train_time = result[i - 2]\n            lcm_result = lcm(S, F)\n            if train_time % lcm_result == 0:\n                result.append(train_time)\n            else:\n                result.append(prev_train_time + lcm_result - prev_train_time % lcm_result)\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\""
    },
    {
        "number": 4621,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    H, W, *pixels = stdin.split()\n    H, W = int(H), int(W)\n    image = [pixels[i:i+W] for i in range(0, len(pixels), W)]\n\n    extended_image = []\n    for i in range(2*H):\n        row = []\n        for j in range(W):\n            pixel = image[i//2][j] if i % 2 == 0 else '.'\n            row.append(pixel)\n        extended_image.append(''.join(row))\n\n    return '\\n'.join(extended_image)\n\ndef",
        "test": "assert solution(\"1 3\\n*.*.\") == \"*.*.\\n*.*.\\n*.*.\""
    },
    {
        "number": 4622,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *sequence = stdin.split()\n    n = int(n)\n\n    if len(set(sequence)) == n:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\""
    },
    {
        "number": 4623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split(\"\\n\")\n    result = []\n\n    for i in range(1, len(cases), 2):\n        n = int(cases[i])\n        weights = list(map(int, cases[i+1].split()))\n\n        # Calculate the frequency of each weight\n        freq = {}\n        for weight in weights:\n            if weight not in freq:\n                freq[weight] = 0\n            freq[weight] += 1\n\n        # Sort the weights in descending order\n        sorted_weights = sorted(freq.keys(), reverse=True)\n\n        # Calculate the maximum number of teams\n        max_teams = 0\n        for i in range(len(sorted_weights)):\n            for j in range(i, len(sorted_weights)):\n                if sorted_weights[i] + sorted_weights[j] <= sum(weights):\n                    max_teams += min(freq[sorted_weights[i]], freq[sorted_weights[j]])\n                else:\n                    break\n\n        result.append(str(max_teams))\n\n    return \"\\n\".join(result)\n",
        "test": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\\n3\\n4\\n1\\n2\""
    },
    {
        "number": 4624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    for test_case in stdin.split(\"\\n\"):\n        if not test_case:\n            continue\n        n, x = map(int, test_case.split())\n        floor = 1\n        total_apartments = 2\n        while total_apartments < n:\n            floor += 1\n            total_apartments += x\n        result.append(str(floor))\n    return \"\\n\".join(result)",
        "test": "assert solution(\"4\\n7 3\\n1 5\\n22 5\\n987 13\") == \"3\\n1\\n5\\n77\\n\""
    },
    {
        "number": 4625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    t = int(stdin.readline())\n    result = []\n    \n    for _ in range(t):\n        n, m = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n        p = list(map(int, stdin.readline().split()))\n        \n        # initialize counts\n        counts = [0] * 26\n        \n        # simulate tries\n        for i in range(m + 1):\n            for j in range(len(s) - 1, -1, -1):\n                # check if button j should be pressed\n                if i == m or p[i] != j + 1:\n                    counts[ord(s[j]) - ord('a')] += 1\n        \n        # add counts to result\n        result.extend(counts)\n    \n    # return result\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"\"\"3"
    },
    {
        "number": 4626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    output = \"\"\n    for i, line in enumerate(stdin.splitlines()):\n        a, b, c = map(int, line.split())\n        a, b, c = min(a, b), min(a, c), min(b, c)\n        min_distance = 0\n        if a == b == c:\n            min_distance = 0\n        elif a == b or b == c:\n            min_distance = 1\n        elif a == c:\n            min_distance = 2\n        output += str(min_distance) + \"\\n\"\n    return output[:-1]\n\ndef",
        "test": "assert solution(\"8\\n3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\") == \"0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4\\n\" "
    },
    {
        "number": 4627,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split('\\n')\n    result = []\n\n    for i in range(1, len(cases), 2):\n        a = list(map(int, cases[i].split()))\n        if len(a) % 2 != 0:\n            result.append(\"NO\")\n            continue\n\n        is_similar = lambda x, y: x % 2 == y % 2 or abs(x - y) == 1\n        is_partitioned = lambda x, y: is_similar(a[x], a[y])\n\n        n = len(a)\n        dp = [[False] * n for _ in range(n)]\n\n        for size in range(n, -1, -1):\n            for i in range(n):\n                for j in range(n):\n                    if size == 0:\n                        dp[i][j] = True\n                    elif size == 1:\n                        dp[i][j] = is_partitioned(i, j)\n                    else:\n                        for k in range(j + 1, n):\n                            dp[i][j] |= dp[i][k] and dp[k][j + size - 1]\n\n        result.append(\"YES\" if dp[0][n - 1] else \"NO\")\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"1\\n3\\n1 2 3\") == \"NO\""
    },
    {
        "number": 4628,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    adj_matrix = [[float('inf')] * (n+1) for _ in range(n+1)]\n    for i in range(n+1):\n        adj_matrix[i][i] = 0\n\n    for line in stdin.split('\\n')[1:-k]:\n        x, y, w = map(int, line.split())\n        adj_matrix[x][y] = adj_matrix[y][x] = w\n\n    couriers = []\n    for line in stdin.split('\\n')[-k:]:\n        a, b = map(int, line.split())\n        couriers.append((a, b))\n\n    def floyd_warshall(adj_matrix: List[List[int]]) -> List[List[int]]:\n        n = len(adj_matrix)\n        for k in range(1, n):\n            for i in range(1, n):\n                for j in range(1, n):\n                    adj_matrix[i][j] = min(adj_matrix[i][j], adj_matrix[i][k] + adj_matrix[k][j])\n        return adj_matrix\n\n    min_cost = float('inf')\n    for i in range(1, n+1):\n        adj_matrix_with_zero = adj_matrix.copy()\n        adj_matrix_with_zero[i][i] = 0\n        floyd_warshall_result = floyd_warshall(adj_matrix_with_zero)\n        courier_cost = sum([floyd_warshall_result[a][b] for a, b in couriers])\n        if courier_cost < min_cost:\n            min_cost = courier_cost\n\n    return str(min_cost)",
        "test": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == \"13\" "
    },
    {
        "number": 4629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_number(num: int) -> bool:\n        powers_of_three = [1]\n        power = 1\n        while power * 3 <= num:\n            power *= 3\n            powers_of_three.append(power)\n        for power in powers_of_three:\n            if num % power == 0:\n                num //= power\n        return num == 1\n\n    q = int(stdin.readline())\n    results = []\n    for _ in range(q):\n        n = int(stdin.readline())\n        m = n\n        while not is_good_number(m):\n            m += 1\n        results.append(str(m))\n    return \"\\n\".join(results)",
        "test": "assert solution(\"1\\n2\\n6\\n13\\n14\\n3620\\n10000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n\" "
    },
    {
        "number": 4630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    output = []\n\n    for i in range(q):\n        n = int(stdin.split('\\n')[2*i+1])\n        p = list(map(int, stdin.split('\\n')[2*i+2].split()))\n        a = [0] * n\n\n        for j in range(1, n+1):\n            a[j-1] = p.index(j) + 1\n\n        output.append(' '.join(map(str, a)))\n\n    return '\\n'.join(output)\n\ninput_data = '''6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3'''\n\nprint(solution(input_data)) ",
        "test": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1 \\n3 3 3 \\n2 3 3 2 1 3 \\n1 \\n2 2 2 2 \" "
    },
    {
        "number": 4631,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    \n    def distance(pos1, pos2):\n        return abs(pos1 - pos2)\n    \n    def closest_tree(pos):\n        return min(x, key=lambda x: distance(x, pos))\n    \n    y = [closest_tree(i) for i in range(-2 * 10**9, 2 * 10**9 + 1)]\n    res = sum(sorted(x)[-m:])\n    \n    return f\"{res}\\n{' '.join(map(str, y))}\"",
        "test": "assert solution(\"3 5\\n0 3 1\") == \"7\\n5 -2 4 -1 2\\n\" "
    },
    {
        "number": 4632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_path(start: tuple, end: tuple) -> str:\n        x, y = start\n        dx, dy = end\n        if x == dx and y == dy:\n            return \"\"\n        if abs(dx - x) > abs(dy - y):\n            if x < dx:\n                return \"R\" + find_path((x + 1, y), end)\n            else:\n                return \"L\" + find_path((x - 1, y), end)\n        else:\n            if y < dy:\n                return \"U\" + find_path((x, y + 1), end)\n            else:\n                return \"D\" + find_path((x, y - 1), end)\n\n    def compare(a: str, b: str) -> bool:\n        for i in range(min(len(a), len(b))):\n            if a[i] != b[i]:\n                return a[i] < b[i]\n        return len(a) < len(b)\n\n    test_cases = int(stdin.readline())\n    for test in range(test_cases):\n        n = int(stdin.readline())\n        packages = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n        packages.sort()\n        if not all((0, 0) != p and p != (0, 1) and p != (1, 0) for p in packages):\n            print(\"NO\")\n        else:\n            path = \"\"\n            for i in range(n):\n                path += find_path((0, 0), packages[i])\n            print(\"YES\")\n            print(path)",
        "test": "assert solution(\"3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\\n2\\n1 0\\n0 1\\n1\") == \"YES\\nRUUURRRRUU\\nNO\\nYES\\nRRRRUUU\" "
    },
    {
        "number": 4633,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split('\\n')\n    t = int(stdin_list[0])\n    outputs = []\n\n    for i in range(1, t * 2 + 1, 2):\n        n, s = map(int, stdin_list[i].split(' '))\n        digits_sum = sum(int(digit) for digit in str(n))\n        moves = 0\n\n        while digits_sum > s:\n            n += 1\n            digits_sum = sum(int(digit) for digit in str(n))\n            moves += 1\n\n        outputs.append(moves)\n\n    return '\\n'.join(map(str, outputs))",
        "test": "assert solution(\"1\\n2 1\") == \"8\""
    },
    {
        "number": 4634,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_contiguous(arr: List[int]) -> bool:\n        for i in range(1, len(arr)):\n            if arr[i] == 0 and arr[i - 1] == 1:\n                return False\n        return True\n\n    def shift_right(arr: List[int], l: int, r: int) -> None:\n        while r + 1 < n and arr[r + 1] == 0:\n            r += 1\n        if r + 1 < n:\n            for i in range(l, r + 1):\n                arr[i] = 0\n            for i in range(l, r + 1):\n                arr[i + 1] = 1\n\n    def shift_left(arr: List[int], l: int, r: int) -> None:\n        while l - 1 >= 1 and arr[l - 1] == 0:\n            l -= 1\n        if l - 1 >= 1:\n            for i in range(l, r + 1):\n                arr[i] = 0\n            for i in range(l, r + 1):\n                arr[i - 1] = 1\n\n    def min_moves(arr: List[int]) -> int:\n        n = len(arr)\n        shift_right(arr, 0, 0)\n        moves = 0\n        while not is_contiguous(arr):\n            for i in range(1, n - 1):\n                if arr[i] == 1:\n                    if arr[i - 1] == 0 and arr[i + 1] == 0:\n                        shift_right(arr, i, i + 1)\n                        moves += 1\n                        break\n                    elif arr[i - 1] == 0 and arr[i + 1] == 1:\n                        shift_right(arr, i, i + 1)\n                        moves += 1\n                        break\n                    elif arr[i - 1] == 1 and arr[i + 1] == 0:\n                        shift_left(arr, i - 1, i)\n                        moves += 1\n                        break\n        return moves\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        print(min_moves(a))",
        "test": "assert solution(\"5\\n0 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\\n0\\n2\\n4\\n1\\n\""
    },
    {
        "number": 4635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    result = []\n\n    for i in range(1, t + 1):\n        n, k = map(int, stdin.split('\\n')[i].split())\n        s = \"\"\n\n        for j in range(n):\n            s += chr(97 + j % k)\n\n        result.append(s)\n\n    return '\\n'.join(result)\n\ninput_data = \"\"\"\n3\n7 3\n4 4\n6 2\n\"\"\"\n\nprint(solution(input_data)) ",
        "test": "assert solution('4 4') == 'abcd'"
    },
    {
        "number": 4636,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(input())\n    result = []\n    \n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        alice_score = 0\n        bob_score = 0\n        moves = 0\n        \n        while len(a) > 0:\n            if moves % 2 == 0:\n                alice_score += min(a)\n                a.remove(min(a))\n            else:\n                bob_score += max(a)\n                a.remove(max(a))\n            moves += 1\n        \n        result.append(f\"{moves} {alice_score} {bob_score}\")\n    \n    return \"\\n\".join(result)",
        "test": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\" "
    },
    {
        "number": 4637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    result = []\n\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        b = list(map(int, stdin.readline().split()))\n\n        max_sum = sum(a)\n\n        for _ in range(min(k, n)):\n            max_sum += max(a) + max(b)\n            a.remove(max(a))\n            b.remove(max(b))\n\n        result.append(max_sum)\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4\\n1 2 2 1\\n4 4 5 4\") == \"6\\n27\\n39\\n11\\n17\" "
    },
    {
        "number": 4638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def min_time(a, b, i, j):\n        if i == j:\n            return 0\n        if i > j:\n            i, j = j, i\n        return a[i] + b[i] + min(min_time(a, b, i + 1, j) + a[i], min_time(a, b, i, j - 1) + b[j - 1])\n\n    n, c = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:n]))\n    b = list(map(int, stdin.split()[n:]))\n\n    result = []\n    for i in range(1, n + 1):\n        result.append(min_time(a, b, 0, i - 1) + c * (i - 1))\n\n    return \" \".join(map(str, result))",
        "test": "assert solution(\"10 1\\n3 2 3 1 3 3 1 4 1\\n1 2 3 4 4 1 2 1 3\") == \"0 2 4 7 8 11 13 14 16 17\""
    },
    {
        "number": 4639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def count_combinations(n: int) -> int:\n        return n * (n - 1) // 2\n\n    def generate_string(index: int, n: int) -> str:\n        a_count = n - 2\n        b_count = 2\n        result = []\n\n        for _ in range(n):\n            if a_count > b_count:\n                result.append('a')\n                a_count -= 1\n            else:\n                result.append('b')\n                b_count -= 1\n\n        return ''.join(result)\n\n    def compare_strings(s1: str, s2: str) -> int:\n        for i in range(len(s1)):\n            if s1[i] < s2[i]:\n                return -1\n            elif s1[i] > s2[i]:\n                return 1\n        return 0\n\n    test_cases = int(stdin.readline())\n    for _ in range(test_cases):\n        n, k = map(int, stdin.readline().split())\n        if k > count_combinations(n):\n            print(\"Invalid k\")\n            continue\n\n        index = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if compare_strings(generate_string(index, i), generate_string(index, j)) == -1:\n                    index += 1\n                    if index == k:\n                        print(generate_string(index, n))\n                        break\n            else:\n                continue\n            break\n<|im_sep|> ",
        "test": "assert solution(\"7\\n5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2\\n20 100\") == \"aaabb\\naabab\\nbaaba\\nbbaaa\\nabb\\nbab\\nbbaabaaaaabaaaaaaaa\" "
    },
    {
        "number": 4640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n\n    max_points = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            x1, y1 = x[i], y[i]\n            x2, y2 = x[j], y[j]\n            if y1 == y2:\n                continue\n            if x1 > x2:\n                x1, x2 = x2, x1\n                y1, y2 = y2, y1\n            distance = abs(x1 - x2)\n            platforms = []\n            for m in range(x1, x1 + distance):\n                platforms.append((m, y1))\n            max_points = max(max_points, len(platforms))\n\n    return str(max_points)\n\n\nt = int(input())\nfor _ in range(t):\n    print(solution(stdin=None)) ",
        "test": "assert solution(\"\"\"4"
    },
    {
        "number": 4641,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    q, x = map(int, stdin.splitlines()[0].split())\n    queries = list(map(int, stdin.splitlines()[1:]))\n    a = []\n    mex = 0\n    result = []\n\n    for y in queries:\n        a.append(y)\n        a.sort()\n        mex = 0\n        while mex < len(a) and a[mex] == mex:\n            mex += 1\n        if mex == len(a):\n            mex = len(a)\n        result.append(mex)\n\n    return \"\\n\".join(map(str, result))\n",
        "test": "assert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\""
    },
    {
        "number": 4642,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    result = []\n    for case in range(1, t + 1):\n        n, x, y = map(int, stdin.split(\"\\n\")[case].split())\n        if x >= y:\n            x, y = y, x\n        a = []\n        # Generate the first element of the array\n        a.append(x - (y - x) // n)\n        # Generate the remaining elements\n        for i in range(n - 1):\n            a.append(a[-1] + (y - x) // n)\n        result.append(\" \".join(map(str, a)))\n    return \"\\n\".join(result)",
        "test": "assert solution(\"5 20 50\\n\") == \"20 40 30 50 10\""
    },
    {
        "number": 4643,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    n = input_list[0]\n    array = input_list[1:]\n    sorted_array = sorted(array)\n    return ' '.join(map(str, sorted_array))",
        "test": "assert solution(\"3 3 1 2\") == \"1 2 3\""
    },
    {
        "number": 4644,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    outputs = []\n\n    for i in range(1, t * 2 + 1, 2):\n        n = int(stdin.splitlines()[i])\n        a = list(map(int, stdin.splitlines()[i + 1].split()))\n\n        # If the sum of elements is odd, return \"YES\"\n        if sum(a) % 2 != 0:\n            outputs.append(\"YES\")\n        else:\n            # If the sum of elements is even, iterate through the array and find the indices of two elements that can be swapped to obtain an odd sum\n            for j in range(n):\n                for k in range(j + 1, n):\n                    if (sum(a) - a[j] + a[k]) % 2 != 0 or (sum(a) - a[k] + a[j]) % 2 != 0:\n                        outputs.append(\"YES\")\n                        break\n                else:\n                    continue\n                break\n            else:\n                outputs.append(\"NO\")\n\n    return \"\\n\".join(outputs)\n\nstdin = \"5\\n2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"5\\n2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1\") == \"YES\\nNO\\nYES\\nNO\\nNO\" "
    },
    {
        "number": 4645,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    result = []\n    \n    def check_permutation(permutation):\n        for i in range(len(permutation) - 1):\n            if abs(permutation[i] - permutation[i+1]) < 2 or abs(permutation[i] - permutation[i+1]) > 4:\n                return False\n        return True\n    \n    def generate_permutation(n):\n        if n == 2:\n            return [[1, 2]]\n        if n == 3:\n            return [[1, 2, 3]]\n        result = []\n        for i in range(1, n+1):\n            for perm in generate_permutation(n-1):\n                if abs(i - perm[n-2]) in [0, 1, 2]:\n                    result.append([i] + perm)\n        return result\n    \n    for n in stdin.splitlines()[1:]:\n        n = int(n)\n        permutations = generate_permutation(n)\n        for perm in permutations:\n            if check_permutation(perm):\n                result.append(\" \".join(str(x) for x in perm))\n                break\n        else:\n            result.append(\"-1\")\n    \n    return \"\\n\".join(result)",
        "test": "assert solution(\"6\\n10\\n2\\n4\\n6\\n7\\n13\") == \"9 6 10 8 4 7 3 1 5 2\\n-1\\n3 1 4 2\\n5 3 6 2 4 1\\n5 1 3 6 2 4 7\\n13 9 7 11 8 4 1 3 5 2 6 10 12\""
    },
    {
        "number": 4646,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    results = []\n\n    for test_case in test_cases:\n        n = int(test_case)\n        a = input().split()\n        a = [int(x) for x in a]\n\n        # Initialize the parity of the array elements\n        parity = [0] * n\n        for i in range(n):\n            parity[i] = a[i] % 2\n\n        # Check if the array is already good\n        is_good = True\n        for i in range(n):\n            if parity[i] != i % 2:\n                is_good = False\n                break\n\n        if is_good:\n            results.append(\"0\")\n            continue\n\n        # Initialize the number of swaps needed\n        swaps_needed = 0\n\n        # Iterate through the array elements\n        for i in range(n):\n            # If the element is odd and the parity is even, or the element is even and the parity is odd\n            if (a[i] % 2 == 0 and i % 2 == 1) or (a[i] % 2 == 1 and i % 2 == 0):\n                # Increment the number of swaps needed\n                swaps_needed += 1\n\n        # If there is an odd number of swaps needed, return -1\n        if swaps_needed % 2 != 0:\n            results.append(\"-1\")\n        else:\n            results.append(str(swaps_needed // 2))\n\n    return \"\\n\".join(results)",
        "test": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\") == \"2\\n1\\n-1\\n0\""
    },
    {
        "number": 4647,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(node: int, color: int) -> int:\n        if node < 0:\n            return 0\n        if not visited[node]:\n            visited[node] = True\n            count[node] = color\n            for neighbor in graph[node]:\n                count[node] += dfs(neighbor, 1 - color)\n            return count[node]\n        return 0\n\n    stdin = [int(x) for x in stdin.split()]\n    n = stdin[0]\n    colors = stdin[1:n + 1]\n    graph = [[] for _ in range(n)]\n\n    for i in range(n - 1):\n        u, v = stdin[n + 1 + 2 * i], stdin[n + 1 + 2 * i + 1]\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n\n    visited = [False] * n\n    count = [0] * n\n    dfs(0, colors[0])\n\n    result = []\n    for i in range(n):\n        white_count = count[i] + sum(count[:i])\n        black_count = n - white_count\n        result.append(max(white_count - black_count, black_count - white_count))\n\n    return \" \".join(map(str, result))\n",
        "test": "assert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\") == \"0 -1 1 -1\" "
    },
    {
        "number": 4648,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.strip().split()[0])\n    outputs = []\n    \n    for i in range(cases):\n        n = int(stdin.strip().split()[1])\n        count = 0\n        while n != 1:\n            if n % 6 == 0:\n                n //= 6\n                count += 1\n            else:\n                n *= 2\n                count += 1\n        outputs.append(count)\n    \n    return \"\\n\".join(map(str, outputs))",
        "test": "assert solution(\"2\\n\") == \"-1\\n\""
    },
    {
        "number": 4649,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_subsequence(s: str, t: str) -> bool:\n        i = 0\n        for c in t:\n            if c == s[i]:\n                i += 1\n                if i == len(s):\n                    return True\n        return False\n\n    q = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(q):\n        n, k = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n\n        if k == n:\n            result.append(0)\n            continue\n\n        t = \"RGB\" * (n // 3) + \"RGB\"[:n % 3]\n        count = 0\n\n        for i in range(n):\n            if s[i] != t[i]:\n                count += 1\n\n        if count == 0:\n            result.append(0)\n        else:\n            result.append(count)\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"1\\n5 2\\nBGGGG\\n5 3\\nRBRGR\\n5 5\\nBBBRR\") == \"1\\n0\\n3\\n\""
    },
    {
        "number": 4650,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    queries = stdin.split(\"\\n\")\n    for i in range(1, len(queries), 2):\n        n = int(queries[i])\n        a = list(map(int, queries[i+1].split()))\n        a.sort(reverse=True)\n        count = 0\n        for i in range(n):\n            if a[i] % 3 == 0:\n                count += 1\n        result.append(str(count))\n    return \"\\n\".join(result)\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    stdin = f\"{n}\\n{' '.join(map(str, a))}\"\n    print(solution(stdin)) ",
        "test": "assert solution(\"1\\n5\\n1 2 3 4 5\\n\") == \"0\\n\""
    },
    {
        "number": 4651,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.strip().split('\\n')\n    output = []\n\n    for case in test_cases[1:]:\n        n = int(case.split()[0])\n        permutation = list(map(int, case.split()[1:]))\n        min_permutation = sorted(permutation)\n\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if permutation[i] > permutation[j]:\n                    temp = min_permutation[i]\n                    min_permutation[i] = min_permutation[j]\n                    min_permutation[j] = temp\n\n        output.append(\" \".join(map(str, min_permutation)))\n\n    return \"\\n\".join(output)\n\n\ninput_str = \"\"\"4\n5\n5 4 1 3 2\n4\n1 2 4 3\n1\n1\n4\n4 3 2 1\"\"\"\n\nprint(solution(input_str)) ",
        "test": "assert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 5 2 4 3\\n1 2 3 4\\n1\\n1 4 3 2\\n\" "
    },
    {
        "number": 4652,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    q = int(stdin.split(\"\\n\")[0])\n    for i in range(q):\n        n = int(stdin.split(\"\\n\")[2*(i+1)])\n        p = list(map(int, stdin.split(\"\\n\")[2*(i+1)+1].split(\" \")))\n        clockwise = [p.index(i) + 1 for i in range(1, n+1)]\n        counterclockwise = [p.index(i) + 1 for i in range(n-1, 0, -1)]\n        if clockwise == p or counterclockwise == p:\n            result += \"YES\\n\"\n        else:\n            result += \"NO\\n\"\n    return result\n",
        "test": "assert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\""
    },
    {
        "number": 4653,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    output = []\n    for i in range(1, t+1):\n        n, k = map(int, stdin.split('\\n')[i].split())\n        max_candies = n // k\n        if n % k != 0:\n            max_candies += 1\n        if max_candies <= 1:\n            output.append('0')\n        else:\n            output.append(str(max_candies))\n    return '\\n'.join(output)\n\nt = int(input())\ninput_str = ''.join([input() + '\\n' for _ in range(t)])\nprint(solution(input_str)) ",
        "test": "assert solution(\"5\\n5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\""
    },
    {
        "number": 4654,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split('\\n')\n    results = []\n    \n    for test_case in test_cases[1:]:\n        if not test_case:\n            break\n        n, k = map(int, test_case.split())\n        if n == 1:\n            result = 'YES'\n            values = '1'\n        elif k == 1:\n            result = 'YES'\n            values = str(n)\n        elif n % k != 0:\n            result = 'NO'\n            values = ''\n        else:\n            values = [n // k] * k\n            parity = n % 2\n            for i in range(k):\n                values[i] += i + 1\n            for i in range(k):\n                if values[i] % 2 != parity:\n                    result = 'NO'\n                    values = ''\n                    break\n            else:\n                result = 'YES'\n                values = ' '.join(map(str, values))\n        results.append(result)\n        results.append(values)\n    \n    return '\\n'.join(results)\n",
        "test": "assert solution(\"10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == \"YES\\n4 2 4\\nYES\\n55 5 5 35\\nNO\\nNO\\nYES\\n1 1 1 1 1 1 1 1\\nNO\\nYES\\n3 1 1\\nYES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120\" "
    },
    {
        "number": 4655,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    result = []\n\n    for _ in range(q):\n        a, b, c = map(int, stdin.split())\n\n        # Alice takes the pile with the most candies\n        if a >= b and a >= c:\n            alice_candies = a\n            bob_candies = b if b <= c else c\n        elif b >= a and b >= c:\n            alice_candies = b\n            bob_candies = a if a <= c else c\n        else:\n            alice_candies = c\n            bob_candies = a if a <= b else b\n\n        # If Alice has more candies, she discards some\n        if alice_candies > bob_candies:\n            alice_candies = bob_candies\n\n        result.append(alice_candies)\n\n    return \"\\n\".join(map(str, result))\n\n\nq = int(input())\nstdin = \"\"\n\nfor _ in range(q):\n    a, b, c = map(int, input().split())\n    stdin += f\"{a} {b} {c}\\n\"\n\nprint(solution(stdin)) ",
        "test": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\\n\""
    },
    {
        "number": 4656,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def beautiful_necklace(beads: str, k: int) -> int:\n        n = len(beads)\n        beautiful_length = 0\n        for i in range(n):\n            counter = 0\n            for j in range(i, i + k):\n                if beads[j % n] != beads[(i + counter) % n]:\n                    break\n                counter += 1\n            beautiful_length = max(beautiful_length, counter)\n        return beautiful_length\n\n    def max_beautiful_length(n: int, k: int, beads: str) -> int:\n        unique_beads = set(beads)\n        max_length = 0\n        for combination in itertools.combinations(unique_beads, n):\n            beads_subset = \"\".join(combination)\n            max_length = max(max_length, beautiful_necklace(beads_subset, k))\n        return max_length\n\n    result = []\n    test_cases = int(stdin.readline())\n    for _ in range(test_cases):\n        n, k = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n        result.append(max_beautiful_length(n, k, s))\n    return \"\\n\".join(map(str, result))\n",
        "test": "assert solution(\"6\\n6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\") == \"6\\n3\\n5\\n4\\n15\\n10\""
    },
    {
        "number": 4657,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n', 1)[0])\n    results = []\n    \n    for i in range(q):\n        n, k = map(int, stdin.split('\\n', 1)[1].split())\n        a = list(map(int, stdin.split('\\n', 1)[2].split()))\n        \n        if k > n:\n            results.append(\"NO\")\n            continue\n        \n        dp = [[0] * (n + 1) for _ in range(2)]\n        for i in range(n + 1):\n            dp[0][i] = i % 2\n            dp[1][i] = 1 - dp[0][i]\n        \n        for i in range(2, n + 1):\n            for j in range(n - i + 1):\n                dp[i % 2][j] = dp[(i - 1) % 2][j] + dp[(i - 1) % 2][j + 1]\n        \n        for i in range(k + 1):\n            if dp[i % 2][0] == 1:\n                results.append(\"YES\")\n                left = 0\n                for j in range(k):\n                    while dp[j % 2][left] != 1:\n                        left += 1\n                    print(left + 1, end=' ')\n                    left += 1\n                print(n)\n                break\n        else:\n            results.append(\"NO\")\n    \n    return '\\n'.join(results)",
        "test": "assert solution(\"3\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"YES\\n1 3 5\\nNO\\nNO\\n\""
    },
    {
        "number": 4658,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    binary = stdin[::-1]\n    result = \"\"\n    \n    for i in range(len(binary)):\n        if binary[i] == \"0\":\n            result += \"1\"\n        else:\n            result += \"0\"\n    \n    return result",
        "test": "assert solution('11111111111111111111111111111101') == '3221225471'"
    },
    {
        "number": 4659,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    numRows = int(stdin)\n    if numRows == 0:\n        return \"[]\"\n\n    result = []\n    row = [1]\n    result.append(row)\n\n    for i in range(1, numRows):\n        row = [1]\n        prev_row = result[-1]\n        for j in range(1, i):\n            row.append(prev_row[j - 1] + prev_row[j])\n        row.append(1)\n        result.append(row)\n\n    return str(result).replace(\",\", \"\")\n\ndef",
        "test": "assert solution(5) == ["
    },
    {
        "number": 4660,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    valid_emails = []\n    \n    for email in input_list:\n        if is_valid_email(email):\n            valid_emails.append(email)\n    \n    valid_emails.sort()\n    \n    return str(valid_emails)\n\ndef",
        "test": "assert solution(\"2\\nme@example.com\\nme@example.com\") == \"['me@example.com']\""
    },
    {
        "number": 4661,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[-1] + fib[-2])\n    cubes = list(map(lambda x: x**3, fib))\n    return str(cubes)",
        "test": "assert solution(\"3\") == \"[0, 1, 1]\""
    },
    {
        "number": 4662,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    depth = 0\n    max_depth = 0\n\n    for line in lines:\n        line = line.strip()\n\n        if line.startswith(\"<\"):\n            depth += 1\n            max_depth = max(depth, max_depth)\n        elif line.startswith(\"</\"):\n            depth -= 1\n\n    return str(max_depth)\n",
        "test": "assert solution(stdin=\"<root>\\n\\t<child>\\n\\t\\t<grandchild>\\n\\t\\t\\t<great-grandchild/>\\n\\t\\t</grandchild>\\n\\t\\t<grandchild>\\n\\t\\t\\t<great-grandchild/>\\n\\t\\t</grandchild>\\n\\t</child>\\n</root>\") == 3"
    },
    {
        "number": 4663,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    lines = stdin.split(\"\\n\")\n    for line in lines:\n        if line.isdigit() and len(line) == 10 and line[0] in [\"7\", \"8\", \"9\"]:\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n    return \"\\n\".join(result)",
        "test": "assert solution(\"7891234567\") == \"YES\""
    },
    {
        "number": 4664,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    m_count, m_str, n_count, n_str = stdin.strip().split('\\n')\n    m = set(map(int, m_str.split()))\n    n = set(map(int, n_str.split()))\n\n    # Compute symmetric difference\n    symmetric_diff = m.symmetric_difference(n)\n\n    # Sort and return\n    return '\\n'.join(str(x) for x in sorted(symmetric_diff))",
        "test": "assert solution(\"3\\n2 4 6\\n4\\n3 6 9\\n\") == \"2\\n3\\n4\\n9\""
    },
    {
        "number": 4665,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n_students = int(lines[0])\n    columns = lines[1].split()\n    column_indices = {columns[i]: i for i in range(len(columns))}\n\n    marks_sum = 0\n    for i in range(2, n_students + 2):\n        row = lines[i].split()\n        marks_sum += int(row[column_indices['MARKS']])\n\n    average_marks = round(marks_sum / n_students, 2)\n    return str(average_marks)",
        "test": "assert solution(\"3\\nNAME MARKS CLASS\\nJohn 70 A\\nKaren 85 B\\nDavid 90 A\") == \"81.67\""
    },
    {
        "number": 4666,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n % 2 != 0:\n        return \"Weird\"\n    elif 2 <= n <= 5:\n        return \"Not Weird\"\n    elif 6 <= n <= 20:\n        return \"Weird\"\n    else:\n        return \"Not Weird\"\n    \n",
        "test": "assert solution(\"1\") == \"Weird\""
    },
    {
        "number": 4667,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    xml_doc = \"\".join(lines[1:n+1])\n    \n    def score_element(element):\n        attributes = element.attrib\n        return len(attributes)\n    \n    from lxml import etree\n    tree = etree.fromstring(xml_doc)\n    result = sum([score_element(e) for e in tree.iter()])\n    \n    return str(result)",
        "test": "assert solution('''"
    },
    {
        "number": 4668,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input to float values\n    a, b, c, d = [list(map(float, x.split())) for x in stdin.splitlines()]\n\n    # Calculate cross product of AB x BC and BC x CD\n    AB = np.cross(b - a, c - b)\n    BC = np.cross(c - b, d - c)\n\n    # Calculate dot product of AB x BC and BC x CD\n    dot = np.dot(AB, BC)\n\n    # Calculate angle between the planes in degrees\n    angle = np.degrees(np.arccos(dot / (np.linalg.norm(AB) * np.linalg.norm(BC))))\n\n    # Return the angle rounded to two decimal places\n    return f\"{angle:.2f}\"",
        "test": "assert solution(\"0 0 1\") == \"90.00\""
    },
    {
        "number": 4669,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n = int(input_list[0])\n    words = input_list[1:]\n    \n    score = 0\n    for word in words:\n        vowel_count = 0\n        for letter in word:\n            if letter in ['a', 'e', 'i', 'o', 'u', 'y']:\n                vowel_count += 1\n        if vowel_count % 2 == 0:\n            score += 2\n        else:\n            score += 1\n    \n    return str(score)",
        "test": "assert solution(\"2\\napple banana\") == \"3\""
    },
    {
        "number": 4670,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    roman_numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    prev_numeral = None\n    total_value = 0\n\n    for char in stdin:\n        if char in roman_numerals:\n            numeral_value = roman_numerals[char]\n            if prev_numeral is not None and numeral_value > prev_numeral:\n                total_value -= prev_numeral * 2\n            total_value += numeral_value\n            prev_numeral = numeral_value\n        else:\n            return 'False'\n\n    if total_value >= 1 and total_value <= 3999:\n        return 'True'\n    else:\n        return 'False'",
        "test": "assert solution(\"III\") == \"True\", \"Invalid Roman Numeral\""
    },
    {
        "number": 4671,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    numbers = stdin.split('\\n')\n    cleaned_numbers = []\n    for number in numbers:\n        if number.startswith('+91'):\n            cleaned_numbers.append(number[3:])\n        elif number.startswith('91'):\n            cleaned_numbers.append(number[2:])\n        elif number.startswith('0'):\n            cleaned_numbers.append(number[1:])\n        else:\n            cleaned_numbers.append(number)\n    \n    cleaned_numbers.sort()\n    formatted_numbers = []\n    for number in cleaned_numbers:\n        formatted_numbers.append(f\"+91 {number[:5]} {number[5:]}\")\n    \n    return '\\n'.join(formatted_numbers)",
        "test": "assert solution(\"3\\n919876543210\\n91876543210\\n8765432109\") == \"+91 9876543210\\n+91 876543210\\n+91 876543210\\n\""
    },
    {
        "number": 4672,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    marks = {}\n    n = int(stdin.split('\\n')[0])\n    for i in range(1, n+1):\n        name, *marks_list = stdin.split('\\n')[i].split(' ')\n        marks[name] = [int(x) for x in marks_list]\n    query_name = stdin.split('\\n')[n+1]\n    query_marks = marks[query_name]\n    average = sum(query_marks)/len(query_marks)\n    return f\"{average:.2f}\"\n\ninput_str = \"\"\"3\nalpha 20 30 40\nbeta 30 50 70\ngamma 80 90 100\nbeta\"\"\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"2\\nalpha 20 30 40\\nbeta 30 50 70\\nbeta\") == \"beta's average score is 50.00\""
    },
    {
        "number": 4673,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    people = stdin.split(\"\\n\")\n    n = int(people[0])\n    people = people[1:]\n    people_info = []\n\n    def person_info(person):\n        first_name, last_name, age, sex = person.split()\n        return {\n            \"first_name\": first_name,\n            \"last_name\": last_name,\n            \"age\": int(age),\n            \"sex\": sex\n        }\n\n    for person in people:\n        if person:\n            people_info.append(person_info(person))\n\n    people_info.sort(key=lambda x: (x[\"age\"], people_info.index(x)))\n\n    def format_name(person):\n        sex = \"Mr.\" if person[\"sex\"] == \"M\" else \"Ms.\"\n        return f\"{sex} {person['first_name']} {person['last_name']}\"\n\n    return \"\\n\".join(format_name(person) for person in people_info)\n\ninput_str = \"\"\"5\nJohn Doe 25 M\nJane Smith 20 F\nAlice Johnson 25 F\nDavid Lee 30 M\nMike Tyson 25 M\"\"\"\n\nprint(solution(input_str)) ",
        "test": "assert solution(\"3\\nJohn 12 M\\nMary 10 F\\nHenry 12 M\") == \"Mr. Henry Davids\\nMr. John Smith\\nMs. Mary George\\n\""
    },
    {
        "number": 4674,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, n = map(int, stdin.split())\n    coordinates = [(i, j, k) for i in range(x+1) for j in range(y+1) for k in range(z+1) if i+j+k != n]\n    return str(coordinates).replace(\" \", \"\").replace(\"'\", \"\").replace(\"(\", \"[\").replace(\")\", \"]\")\n\nx = 1\ny = 1\nz = 2\nn = 3\nstdin = f\"{x}\\n{y}\\n{z}\\n{n}\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"1\\n1\\n2\\n3\") == \"[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,2]]\" "
    },
    {
        "number": 4675,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    real_1, imag_1 = map(float, stdin.split())\n    real_2, imag_2 = map(float, input().split())\n\n    c = complex(real_1, imag_1)\n    d = complex(real_2, imag_2)\n\n    print(f\"{c + d:.2f}\")\n    print(f\"{c - d:.2f}\")\n    print(f\"{c * d:.2f}\")\n    print(f\"{c / d:.2f}\")\n    print(f\"{abs(c):.2f}\")\n    print(f\"{abs(d):.2f}\")",
        "test": "assert solution(\"3 + 4i\") == \"3.00+4.00i\" "
    },
    {
        "number": 4676,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    odd_str, even_str = stdin.strip().split('\\n')\n    password = ''\n    \n    for i in range(len(odd_str)):\n        password += odd_str[i]\n        if i < len(even_str):\n            password += even_str[i]\n    \n    return password",
        "test": "assert solution(\"xyz\\nabc\\n\") == \"xaybzc\""
    },
    {
        "number": 4677,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    editor_string = \"\"\n    for key in stdin:\n        if key == \"0\":\n            editor_string += \"0\"\n        elif key == \"1\":\n            editor_string += \"1\"\n        elif editor_string:\n            editor_string = editor_string[:-1]\n    return editor_string",
        "test": "assert solution('01B0') == '00'"
    },
    {
        "number": 4678,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = [int(x) for x in stdin.split()[1:]]\n\n    heights = [0] * N\n    total_height = 0\n\n    for i in range(N):\n        for j in range(i):\n            if A[j] > A[i]:\n                heights[i] = max(heights[i], heights[j] + 1)\n        total_height += heights[i]\n\n    return str(total_height)\n",
        "test": "assert solution(\"5\\n2 1 5 4 3\") == \"4\""
    },
    {
        "number": 4679,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S_A, S_B, S_C = stdin.split('\\n')\n\n    A_deck = [letter for letter in S_A]\n    B_deck = [letter for letter in S_B]\n    C_deck = [letter for letter in S_C]\n\n    def get_next_player(card: str) -> str:\n        if card == 'a':\n            return 'A'\n        elif card == 'b':\n            return 'B'\n        else:\n            return 'C'\n\n    def play_game(deck_A: list, deck_B: list, deck_C: list) -> str:\n        while True:\n            if deck_A:\n                card = deck_A.pop(0)\n                next_player = get_next_player(card)\n                if next_player == 'A':\n                    continue\n                elif next_player == 'B':\n                    return play_game(deck_B, deck_A, deck_C)\n                else:\n                    return play_game(deck_C, deck_B, deck_A)\n            elif deck_B:\n                card = deck_B.pop(0)\n                next_player = get_next_player(card)\n                if next_player == 'B':\n                    continue\n                elif next_player == 'A':\n                    return play_game(deck_A, deck_B, deck_C)\n                else:\n                    return play_game(deck_C, deck_A, deck_B)\n            elif deck_C:\n                card = deck_C.pop(0)\n                next_player = get_next_player(card)\n                if next_player == 'C':\n                    continue\n                elif next_player == 'B':\n                    return play_game(deck_B, deck_C, deck_A)\n                else:\n                    return play_game(deck_A, deck_C, deck_B)\n            else:\n                return 'A'\n\n    winner = play_game(A_deck, B_deck, C_deck)\n    return winner",
        "test": "assert solution(\"aca\\naccc\\nca\") == \"A\""
    },
    {
        "number": 4680,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c != 17:\n        return \"NO\"\n    return \"YES\"",
        "test": "assert solution('2 3 6') == 'NO'"
    },
    {
        "number": 4681,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N == 0:\n        return \"2\"\n    elif N == 1:\n        return \"1\"\n    else:\n        L_i_minus_2 = 2\n        L_i_minus_1 = 1\n\n        for i in range(2, N + 1):\n            L_i = L_i_minus_1 + L_i_minus_2\n            L_i_minus_2 = L_i_minus_1\n            L_i_minus_1 = L_i\n\n        return str(L_i)",
        "test": "assert solution(\"5\") == \"11\""
    },
    {
        "number": 4682,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    area = (a + b) * h // 2\n    return str(area)",
        "test": "assert solution(\"3\\n4\\n2\") == \"7\" "
    },
    {
        "number": 4683,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = stdin.split()\n    n = int(n)\n    a = [int(x) for x in a]\n\n    MOD = 10**9 + 7\n    total = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            total = (total + a[i] * a[j]) % MOD\n\n    return str(total)",
        "test": "assert solution(\"3\\n1 2 3\") == \"11\""
    },
    {
        "number": 4684,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    num = r * 100 + g * 10 + b\n    return \"YES\" if num % 4 == 0 else \"NO\"",
        "test": "assert solution(\"4 3 2\") == \"YES\""
    },
    {
        "number": 4685,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    \n    def find_largest_sum(A, B, C, K) -> int:\n        sums = [A + B + C, A * 2 + B + C, A + B * 2 + C, A + B + C * 2]\n        return max(sums)\n    \n    largest_sum = find_largest_sum(A, B, C, K)\n    \n    return str(largest_sum)",
        "test": "assert solution(\"5 3 11\\n1\") == \"30\""
    },
    {
        "number": 4686,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    freq_dict = {}\n    for letter in stdin:\n        if letter not in freq_dict:\n            freq_dict[letter] = 1\n        else:\n            freq_dict[letter] += 1\n\n    for key, value in freq_dict.items():\n        if value % 2 != 0:\n            return \"No\"\n\n    return \"Yes\"\n",
        "test": "assert solution(\"abaccaba\") == \"Yes\""
    },
    {
        "number": 4687,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # split input by lines\n    lines = stdin.strip().split('\\n')\n    n, k = map(int, lines[0].split())\n    operations = []\n    \n    # parse operations\n    for i in range(1, n+1):\n        a, b = map(int, lines[i].split())\n        operations.extend([a] * b)\n    \n    # sort the array in ascending order\n    operations.sort()\n    \n    # return the k-th smallest element\n    return str(operations[k-1])",
        "test": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == \"3\""
    },
    {
        "number": 4688,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N == 1:\n        return str(K)\n    elif N == 2:\n        return str(K * (K - 1))\n    else:\n        return str(K * (K - 1) ** (N - 2))",
        "test": "assert solution(\"2 2\") == \"2\""
    },
    {
        "number": 4689,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_distance(K, N, A):\n        min_distance = float('inf')\n        for i in range(N):\n            for j in range(i + 1, N):\n                distance = K - abs(A[i] - A[j])\n                min_distance = min(min_distance, distance)\n        return min_distance\n\n    K, N, A = stdin.split()\n    K, N = int(K), int(N)\n    A = list(map(int, A))\n    return str(find_min_distance(K, N, A))",
        "test": "assert solution(\"1000000 10000\\n1 2 3 4 5 6 7 8 9 10\") == \"55\" "
    },
    {
        "number": 4690,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    area1 = A * B\n    area2 = C * D\n\n    if area1 > area2:\n        return str(area1)\n    elif area1 < area2:\n        return str(area2)\n    else:\n        return str(area1)",
        "test": "assert solution(\"3 5 2 7\") == \"15\""
    },
    {
        "number": 4691,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Get number of test cases from input\n    num_test_cases = int(stdin.split('\\n')[0])\n\n    # Initialize counters for each verdict\n    ac_count = 0\n    wa_count = 0\n    tle_count = 0\n    re_count = 0\n\n    # Loop through each verdict in input\n    for verdict in stdin.split('\\n')[1:]:\n        if verdict == \"AC\":\n            ac_count += 1\n        elif verdict == \"WA\":\n            wa_count += 1\n        elif verdict == \"TLE\":\n            tle_count += 1\n        elif verdict == \"RE\":\n            re_count += 1\n\n    # Format output string\n    output = f\"AC x {ac_count}\\nWA x {wa_count}\\nTLE x {tle_count}\\nRE x {re_count}\"\n\n    return output",
        "test": "assert solution(\"6\\nAC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\""
    },
    {
        "number": 4692,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n\n    if m < 0 or m > 23:\n        return \"Invalid input\"\n\n    current_time = datetime.datetime.now()\n    new_year = datetime.datetime(current_time.year + 1, 1, 1)\n    hours_to_new_year = (new_year - current_time).total_seconds() // 3600\n\n    hours_until_m = hours_to_new_year - hours_to_new_year % 24 + m\n\n    if hours_until_m >= 24:\n        return f\"New Year is already here, and we have {hours_until_m - 24} hours until New Year at {m} o'clock on 1st January.\"\n    else:\n        return f\"We have {hours_until_m} hours until New Year at {m} o'clock on 30th, December.\"",
        "test": "assert solution(\"10\") == \"23\""
    },
    {
        "number": 4693,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = A + B\n    if result >= 10:\n        return \"error\"\n    else:\n        return str(result)",
        "test": "assert solution(\"6 3\") == \"9\""
    },
    {
        "number": 4694,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    import heapq\n\n    N, *coordinates = stdin.split()\n    N = int(N)\n\n    coordinates = [int(x) for x in coordinates]\n\n    max_coordinate = max(coordinates)\n    min_coordinate = min(coordinates)\n    distance = max_coordinate - min_coordinate\n\n    if distance < N:\n        return str(distance)\n\n    coordinates = [(x, i) for i, x in enumerate(coordinates)]\n    coordinates.sort(key=lambda x: x[0])\n\n    heap = []\n    for i in range(N):\n        x = coordinates[i]\n        if len(heap) < 2 or abs(heap[0][0] - x[0]) <= abs(heap[1][0] - x[0]):\n            heapq.heappush(heap, x)\n        else:\n            heapq.heappushpop(heap, x)\n\n    while len(heap) > 1:\n        x1, i1 = heapq.heappop(heap)\n        x2, i2 = heapq.heappop(heap)\n\n        if i2 == i1 + 1 and abs(x2 - x1) == 1:\n            return str(abs(coordinates[i1][0] - coordinates[i2][0]))\n\n        return str(max_coordinate - min_coordinate)\n\n    return str(max_coordinate - min_coordinate)",
        "test": "assert solution(\"4\\n2 3 7 9\") == \"7\""
    },
    {
        "number": 4695,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    \n    if (x in [1, 2, 3, 4, 5] and y in [1, 2, 3, 4, 5]) or (x in [6, 7, 8, 9, 10] and y in [6, 7, 8, 9, 10]) or (x in [11, 12] and y in [11, 12]):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"4 8\") == \"No\""
    },
    {
        "number": 4696,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    product = a * b\n    if product % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "test": "assert solution(\"3 4\") == \"Even\""
    },
    {
        "number": 4697,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    Scc_groups = 0\n    while M >= 2:\n        Scc_groups += 1\n        M -= 2\n    while N > 0 and M >= 2:\n        Scc_groups += 1\n        N -= 1\n        M -= 2\n    return str(Scc_groups) ",
        "test": "assert solution('2 8') == '4'"
    },
    {
        "number": 4698,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    problem_times = [int(t) for t in lines[1].split()]\n    M = int(lines[2])\n    drink_effects = [(int(p), int(x)) for p, x in zip(lines[3::2], lines[4::2])]\n\n    total_times = []\n    for i in range(M):\n        drink_time = sum(problem_times)\n        for p, x in drink_effects:\n            if i + 1 == p:\n                drink_time += x\n                break\n        total_times.append(drink_time)\n\n    return \"\\n\".join(map(str, total_times))\n\ndef",
        "test": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\""
    },
    {
        "number": 4699,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    D = list(map(int, stdin.split()))[K+1:]\n    max_amount = 1\n\n    for digit in D:\n        max_amount *= 10\n\n    while max_amount > N:\n        for digit in D:\n            if str(digit) not in str(max_amount):\n                break\n        else:\n            return str(max_amount)\n        max_amount -= 1\n\n    return str(N)",
        "test": "assert solution(\"1000 2\\n3 9\\n\") == \"1000\""
    },
    {
        "number": 4700,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n, m = int(input_list[0]), int(input_list[1])\n    hill = [int(h) for h in input_list[2:2 + n]]\n    roads = [tuple(map(int, input_list[2 + n + i * 2:2 + n + i * 2 + 2])) for i in range(m)]\n\n    good_observatories = set()\n\n    for obs in range(1, n + 1):\n        elevation = hill[obs - 1]\n        good = True\n        for road in roads:\n            if obs in road and elevation <= hill[road.index(obs) - 1]:\n                good = False\n                break\n        if good:\n            good_observatories.add(obs)\n\n    return str(len(good_observatories))",
        "test": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\""
    },
    {
        "number": 4701,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    value = 1\n    for i in range(n):\n        if i % 2 == 0:\n            value *= 2\n        else:\n            value += k\n    return str(value)",
        "test": "assert solution(\"2\\n2\") == \"4\""
    },
    {
        "number": 4702,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return str(x ^ 1)  # XOR operator with 1",
        "test": "assert solution(\"0\") == \"1\""
    },
    {
        "number": 4703,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] * 10 + dp[i - 2]\n\n    ans = 0\n    for i in range(n):\n        ans += dp[i] * int(s[i])\n\n    for i in range(1, n - 1):\n        ans += dp[i] * int(s[i - 1] + s[i])\n\n    for i in range(1, n - 1):\n        ans += dp[i] * int(s[i - 2] + s[i])\n\n    return str(ans)",
        "test": "assert solution(\"13\") == \"42\""
    },
    {
        "number": 4704,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, *cards = map(int, stdin.split())\n    snuke_cards = cards[:n//2]\n    raccoon_cards = cards[n//2:]\n    x = sum(snuke_cards)\n    y = sum(raccoon_cards)\n    return str(abs(x-y))",
        "test": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\""
    },
    {
        "number": 4705,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x = 800 * N\n    y = 200 if N % 15 == 0 else 0\n    return str(x - y)",
        "test": "assert solution(\"20\") == \"15800\""
    },
    {
        "number": 4706,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes the input string from Standard Input, splits it into a list of strings,\n    creates a list of lists, and then prints the concatenated string on the diagonal.\n    \"\"\"\n    input_list = stdin.split()\n    matrix = [list(row) for row in input_list]\n\n    diagonal_string = \"\"\n    for i in range(3):\n        diagonal_string += matrix[i][i]\n\n    return diagonal_string",
        "test": "assert solution(\"ant\\nobe\\nrec\") == \"abc\""
    },
    {
        "number": 4707,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s_1, s_2, s_3 = map(int, stdin)\n    return str(s_1 + s_3)",
        "test": "assert solution(\"101\") == \"2\"  # marbles on square 1 and 3"
    },
    {
        "number": 4708,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K, X, Y = map(int, stdin.split())\n    \n    if K >= N:\n        return str(X * N)\n    else:\n        return str(X * K + (N - K) * Y)",
        "test": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\""
    },
    {
        "number": 4709,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, op, B = stdin.split()\n    if op == \"+\":\n        result = int(A) + int(B)\n    elif op == \"-\":\n        result = int(A) - int(B)\n    else:\n        raise ValueError(\"Invalid operator\")\n    return str(result)",
        "test": "assert solution(\"1 + 2\") == \"3\""
    },
    {
        "number": 4710,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 1200:\n        return \"ABC\"\n    else:\n        return \"ARC\"",
        "test": "assert solution(\"1000\") == \"ABC\""
    },
    {
        "number": 4711,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    total_price = min(a + b, a + c, b + c)\n    return str(total_price)",
        "test": "assert solution(\"700 600 780\") == \"1300\""
    },
    {
        "number": 4712,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split()[0].split())\n    grid = [list(map(str, line.split())) for line in stdin.split('\\n')[1:]]\n    \n    top_border = '#' * (W + 2)\n    side_border = '#' + '#'.join([' '] * W) + '#'\n    output = [top_border]\n    \n    for i in range(H):\n        output.append('#' + ''.join(grid[i]) + '#')\n    output.append(top_border)\n    \n    return '\\n'.join(output)",
        "test": "assert solution('1 5\\nhello\\n') == '#####\\n#hello#\\n#####\\n'"
    },
    {
        "number": 4713,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split('\\n')\n    N = int(N)\n    x = 0\n    max_x = 0\n\n    for char in S:\n        if char == 'I':\n            x += 1\n        else:\n            x -= 1\n        max_x = max(max_x, x)\n\n    return str(max_x)",
        "test": "assert solution(\"4\\nDDDI\") == \"0\""
    },
    {
        "number": 4714,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    count = 0\n    for i in range(A, B + 1):\n        if str(i) == str(i)[::-1]:\n            count += 1\n\n    return str(count)",
        "test": "assert solution('11009 11332') == '4'"
    },
    {
        "number": 4715,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    colors = set([a, b, c])\n    return f\"{len(colors)}\"",
        "test": "assert solution(\"3 1 4\") == \"3\""
    },
    {
        "number": 4716,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    sticks = list(map(int, stdin.split()))[n+1:]\n    sticks.sort(reverse=True)\n    toy_length = sum(sticks[:k])\n    return str(toy_length)\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "assert solution(\"6 2\\n2 4 6 8 10 12\") == \"20\""
    },
    {
        "number": 4717,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = list(map(int, stdin.split()))\n    distance_a = abs(x - a)\n    distance_b = abs(x - b)\n    if distance_a < distance_b:\n        return \"A\"\n    else:\n        return \"B\"",
        "test": "assert solution(\"5 2 7\") == \"B\""
    },
    {
        "number": 4718,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    year, month, day = stdin.split(\"/\")\n    new_year = \"2018\"\n    new_date = f\"{new_year}/{month}/{day}\"\n    return new_date",
        "test": "assert solution(\"2017/01/07\") == \"2018/01/07\" "
    },
    {
        "number": 4719,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    strings = stdin.split('\\n')[1:]\n\n    max_length = 0\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n\n    longest_strings = []\n    for s in strings:\n        if len(s) == max_length:\n            longest_strings.append(s)\n\n    if not longest_strings:\n        return \"\"\n\n    sorted_strings = sorted(longest_strings)\n    return sorted_strings[0]",
        "test": "assert solution(\"5\\naabaa\\nbbaab\\nccac\\nac\\nacc\") == \"acc\""
    },
    {
        "number": 4720,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    seats = [False] * 100001\n    \n    for i in range(n):\n        l, r = map(int, stdin.split()[2*i+1:2*i+3])\n        for j in range(l, r+1):\n            seats[j] = True\n    \n    return str(sum(seats))",
        "test": "assert solution(\"1\\n24 30\") == \"7\""
    },
    {
        "number": 4721,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    num_blocks = (n-1) * (m-1)\n    return str(num_blocks)",
        "test": "assert solution('3 4') == '6'"
    },
    {
        "number": 4722,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return \"Possible\"\n    elif a + b == 0:\n        return \"Impossible\"\n    else:\n        if (a + b) % 3 == 0:\n            return \"Possible\"\n        else:\n            return \"Impossible\"",
        "test": "assert solution(\"100 50\") == \"Possible\""
    },
    {
        "number": 4723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    s, t = stdin.split()\n    t = t.replace('?', '')\n\n    # find all possible strings that satisfy Condition 1\n    possible_strings = []\n    for i in range(len(s) - len(t) + 1):\n        if s[i:i + len(t)] == t:\n            possible_strings.append(s[:i] + t + s[i + len(t):])\n\n    # check if there are any possible strings\n    if not possible_strings:\n        return \"UNRESTORABLE\"\n\n    # sort the possible strings lexicographically\n    possible_strings.sort()\n\n    # return the first string (which is the lexicographically smallest)\n    return possible_strings[0]",
        "test": "assert solution(\"?tc????\\ncoder\") == \"atcoder\"  # Should pass "
    },
    {
        "number": 4724,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    R, G = map(int, stdin.split())\n    return str((R + G) / 2)",
        "test": "assert solution(\"1\\n1000\") == \"500.5\""
    },
    {
        "number": 4725,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(set(stdin))\n    count = len(stdin)\n    if count <= 2:\n        return 0\n    else:\n        return count - 2\n    \n",
        "test": "assert solution(\"string\") == 4"
    },
    {
        "number": 4726,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    m, n, t = map(int, stdin.split())\n    if t == 1:\n        return \"AC\" if n <= 20 else \"TLE\"\n    elif t == 2:\n        return \"AC\" if n <= 15 else \"TLE\"\n    elif t == 3:\n        return \"AC\" if n <= 50 else \"TLE\"\n    elif t == 4:\n        return \"AC\" if n <= 20 else \"TLE\"\n    elif t == 5:\n        return \"AC\" if n <= 10000 else \"TLE\"\n    elif t == 6:\n        return \"AC\" if n <= 20000 else \"TLE\"\n    elif t == 7:\n        return \"AC\" if n <= 1000000 else \"TLE\"",
        "test": "assert solution(\"100000000 500 3\") == \"TLE\""
    },
    {
        "number": 4727,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    board = []\n    for i in range(4):\n        row = list(map(int, stdin.readline().strip().split()))\n        board.append(row)\n\n    move_type = int(stdin.readline().strip())\n\n    def merge_tiles(board: list) -> list:\n        for i in range(4):\n            for j in range(3):\n                if board[i][j] == board[i][j + 1] and board[i][j] != 0:\n                    board[i][j] *= 2\n                    board[i][j + 1] = 0\n                    j += 1\n        return board\n\n    def move_left(board: list) -> list:\n        for i in range(4):\n            for j in range(1, 4):\n                if board[i][j] == 0:\n                    board[i][j], board[i][j - 1] = board[i][j - 1], board[i][j]\n            board = merge_tiles(board)\n        return board\n\n    def move_up(board: list) -> list:\n        for j in range(4):\n            for i in range(1, 4):\n                if board[i][j] == 0:\n                    board[i][j], board[i - 1][j] = board[i - 1][j], board[i][j]\n            board = merge_tiles(board)\n        return board\n\n    def move_right(board: list) -> list:\n        for i in range(4):\n            for j in range(2, -1, -1):\n                if board[i][j] == 0:\n                    board[i][j], board[i][j + 1] = board[i][j + 1], board[i][j]\n            board = merge_tiles(board)\n        return board\n\n    def move_down(board: list) -> list:\n        for j in range(4):\n            for i in range(2, -1, -1):\n                if board[i][j] == 0:\n                    board[i][j], board[i + 1][j] = board[i + 1][j], board[i][j]\n            board = merge_tiles(board)\n        return board\n\n    if move_type == 0:\n        board = move_left(board)\n    elif move_type == 1:\n        board = move_up(board)\n    elif move_type == 2:\n        board = move_right(board)\n    else:\n        board = move_down(board)\n\n    for i in range(4):\n        for j in range(4):\n            if board[i][j] == 0:\n                board[i][j] = 2\n\n    for row in board:\n        print(\" \".join(str(x) for x in row))",
        "test": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\\n\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n\""
    },
    {
        "number": 4728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    input_molecule = stdin[0]\n    k = int(stdin[1])\n    output_molecule = stdin[2]\n    \n    # Calculate the number of output molecules\n    output_count = 0\n    input_molecule_count = 0\n    output_molecule_count = 0\n    \n    for i in range(len(input_molecule)):\n        if input_molecule[i].isalpha():\n            if i == len(input_molecule)-1:\n                input_molecule_count += 1\n            elif input_molecule[i+1].isalpha():\n                input_molecule_count += 1\n            else:\n                input_molecule_count += int(input_molecule[i+1])\n                \n    for i in range(len(output_molecule)):\n        if output_molecule[i].isalpha():\n            if i == len(output_molecule)-1:\n                output_molecule_count += 1\n            elif output_molecule[i+1].isalpha():\n                output_molecule_count += 1\n            else:\n                output_molecule_count += int(output_molecule[i+1])\n                \n    if input_molecule_count >= output_molecule_count * k:\n        output_count = k\n    else:\n        output_count = input_molecule_count // output_molecule_count\n        \n    return str(output_count) ",
        "test": "assert solution(\"C2H6 10\\nC3H8\") == \"6\\n\""
    },
    {
        "number": 4729,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    password, message = stdin.split()\n    password_chars = set(password)\n    password_len = len(password)\n    \n    for i in range(password_len):\n        if password[i] not in password_chars:\n            return \"FAIL\"\n        \n        if password[i] not in message:\n            return \"FAIL\"\n        \n        start_index = message.index(password[i])\n        message = message[start_index+1:]\n        \n        for j in range(i+1, password_len):\n            if password[j] not in message:\n                return \"FAIL\"\n            \n            start_index = message.index(password[j])\n            message = message[start_index+1:]\n            \n    return \"PASS\"",
        "test": "assert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\""
    },
    {
        "number": 4730,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    L = stdin.strip()\n    stack = []\n    for i, c in enumerate(L):\n        if c in ['(', '[', '{']:\n            stack.append((c, i))\n        elif c in [')', ']', '}']:\n            if not stack:\n                return f\"{c} {i}\"\n            if c == ')' and stack[-1][0] == '(':\n                stack.pop()\n            elif c == ']' and stack[-1][0] == '[':\n                stack.pop()\n            elif c == '}' and stack[-1][0] == '{':\n                stack.pop()\n            else:\n                return f\"{c} {i}\"\n    if stack:\n        return \"ok so far\"\n    else:\n        return \"ok so far\"",
        "test": "assert solution(\"13\\n(([] [[]] ())\") == \"ok so far\""
    },
    {
        "number": 4731,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    words = [word.strip() for word in stdin.split('\\n')[1:]]\n    last_letter = words[0][-1]\n\n    for i in range(1, len(words)):\n        if words[i][0] != last_letter:\n            return f\"Player {i % 2 + 1} lost\"\n        last_letter = words[i][-1]\n\n    return \"Fair Game\"",
        "test": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\""
    },
    {
        "number": 4732,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, operation, B = stdin.splitlines()\n    A, B = int(A), int(B)\n    if operation == '+':\n        result = A + B\n    elif operation == '*':\n        result = A * B\n    return str(result)\n\ninput_str = \"\"\"1000\n*\n100\"\"\"\nprint(solution(input_str))\n\ninput_str = \"\"\"10000\n+\n10\"\"\"\nprint(solution(input_str))\n\ninput_str = \"\"\"10\n+\n1000\"\"\"\nprint(solution(input_str)) ",
        "test": "assert solution('1000\\n*\\n100') == '100000'"
    },
    {
        "number": 4733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    case_number, deck_size, shuffle_type = stdin.split()\n    deck_size = int(deck_size)\n\n    if shuffle_type == \"out\":\n        if deck_size % 2 == 0:\n            return f\"Case {case_number}: {deck_size // 2}\"\n        else:\n            return f\"Case {case_number}: {deck_size // 2 + 1}\"\n    else:\n        if deck_size % 2 == 0:\n            return f\"Case {case_number}: {deck_size // 2}\"\n        else:\n            return f\"Case {case_number}: {deck_size // 2}\"\n",
        "test": "assert solution(\"8 in\") == \"6\\n\""
    },
    {
        "number": 4734,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    Y, P = stdin.split()\n\n    if Y[-1] == 'e':\n        return Y + 'x' + P\n    elif Y[-1] in ['a', 'i', 'o', 'u']:\n        return Y[:-1] + 'ex' + P\n    else:\n        return Y + 'ex' + P",
        "test": "assert solution(\"alemaxe maxos\") == \"alemaxexmaxos\""
    },
    {
        "number": 4735,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    if (year - 2018) % 26 == 0:\n        return \"yes\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"2018\") == \"yes\""
    },
    {
        "number": 4736,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    nums, k = stdin.splitlines()\n    nums = [int(n) for n in nums.split()]\n    k = int(k)\n\n    # Calculate the number of ways to deal K cards that form a strictly ascending sequence\n    total_ways = 1\n    for i in range(1, k):\n        num_ways = 0\n        for j in range(10):\n            if nums[j] >= i - j + 1:\n                num_ways += nums[j]\n        total_ways *= num_ways\n\n    return str(total_ways)",
        "test": "assert solution(\"4 0 0 0 4 0 0 0 0 4\\n4\") == \"0\\n\""
    },
    {
        "number": 4737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    num_problems, first_problem_index = map(int, stdin.split()[:2])\n    estimations = list(map(int, stdin.split()[2:]))\n\n    num_accepted = 0\n    penalty_time = 0\n\n    for i in range(first_problem_index):\n        penalty_time += estimations[i]\n        num_accepted += 1\n\n    for i in range(first_problem_index, num_problems):\n        if penalty_time >= 300:\n            break\n        penalty_time += estimations[i]\n        num_accepted += 1\n\n    return f\"{num_accepted} {penalty_time}\"",
        "test": "assert solution(\"7 1\\n30 270 995 996 997 998 999\\n\") == \"2 570\""
    },
    {
        "number": 4738,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    for k in range(1, n + 1):\n        if n % k != 0:\n            continue\n\n        if all(stdin[i] == stdin[i - k] for i in range(k, n, k)):\n            return str(k)\n    return str(n)",
        "test": "assert solution(\"aaaaaaaa\") == \"1\""
    },
    {
        "number": 4739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split()[0:2])\n    times = list(map(int, stdin.split()[2:M+2]))\n    milestones = list(map(int, stdin.split()[M+2:]))\n    \n    speeds = set()\n    distances = set()\n    \n    for i in range(1, len(milestones)):\n        speed = abs(milestones[i] - milestones[i-1]) / (times[i] - times[i-1])\n        speeds.add(speed)\n        for j in range(1, i):\n            distance = abs(milestones[i] - milestones[j])\n            distances.add(distance)\n    \n    return str(len(speeds)) + \"\\n\" + \" \".join(map(str, sorted(list(distances)))))\n\ndef",
        "test": "assert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\""
    },
    {
        "number": 4740,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    prefix_number = stdin[:3]\n    if prefix_number == \"555\":\n        return \"1\"\n    else:\n        return \"0\"",
        "test": "assert solution('5551212') == '1'"
    },
    {
        "number": 4741,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('/'))\n    if a % b == 0:\n        return '0/1'\n\n    a *= 5\n    b *= 9\n    gcd = math.gcd(a, b)\n    a //= gcd\n    b //= gcd\n\n    if b == 1:\n        return f'{a}/1'\n    else:\n        return f'{a}/{b}'",
        "test": "assert solution(\"32/1\") == \"0/1\""
    },
    {
        "number": 4742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    l, first_melody, second_melody = stdin.split('\\n')\n    l = int(l)\n    first_melody = first_melody.split()\n    second_melody = second_melody.split()\n\n    if first_melody == second_melody:\n        return \"Nonsense\"\n\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    for i in range(l):\n        if second_melody[i] == notes[(notes.index(first_melody[i]) + 1) % 12]:\n            return \"Transposition\"\n        elif second_melody[i] == notes[(notes.index(first_melody[i]) - 1) % 12]:\n            return \"Retrograde\"\n        elif second_melody[i] == first_melody[i]:\n            continue\n        else:\n            return \"Nonsense\"\n\n    for i in range(l):\n        if notes[(notes.index(second_melody[i]) - 1) % 12] == first_melody[i]:\n            return \"Inversion\"\n\n    return \"Nonsense\"\n\ndef",
        "test": "assert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\""
    },
    {
        "number": 4743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    hard_consonants = \"bcdgknpst\"\n    stdin = stdin.replace(\"-\", \"\").split()\n    result = []\n\n    for word in stdin:\n        word = word.lower()\n        translated_word = []\n\n        # Replace the first letter with the nearest hard consonant\n        if word[0] in hard_consonants:\n            translated_word.append(word[0])\n        else:\n            for consonant in hard_consonants:\n                if ord(consonant) >= ord(word[0]):\n                    translated_word.append(consonant)\n                    break\n\n        # Translate the remaining letters\n        for letter in word[1:]:\n            if letter in hard_consonants:\n                translated_word.append(translated_word[-1])\n            else:\n                translated_word.append(letter)\n\n        # Add the ending vowel\n        if translated_word[-1] in \"aeiou\":\n            translated_word.append(\"ah\")\n        elif translated_word[-1] in \"h\":\n            translated_word.append(\"uh\")\n        else:\n            translated_word.append(\"oh\")\n\n        # Join the translated word and add it to the result\n        result.append(\"\".join(translated_word))\n\n    return \" \".join(result)\n",
        "test": "assert solution(\"Cat-a-pil-lar\") == \"Catacillar\""
    },
    {
        "number": 4744,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    v = int(stdin)\n    \n    # Calculate the dimensions of the box\n    w = int(v ** 0.5)\n    h = v // w\n    \n    # Calculate the surface area of the box\n    surface_area = 2 * (w * h + w * w + h * h)\n    \n    # Calculate the cost of the box\n    cost = surface_area\n    \n    return str(cost)",
        "test": "assert solution(\"1\") == \"6\""
    },
    {
        "number": 4745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, X = map(int, stdin.split())\n    prices = list(map(int, input().split()))\n    prices.sort(reverse=True)\n\n    max_items = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if prices[i] + prices[j] > X:\n                max_items += 1\n\n    return str(max_items)",
        "test": "assert solution(\"5 10\\n4 8 1 9 7\") == \"2\""
    },
    {
        "number": 4746,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    capacity, num_stations = map(int, stdin.split()[0:2])\n    measurements = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    for i in range(num_stations):\n        num_leave, num_enter, num_wait = measurements[i]\n        if num_leave + num_enter + num_wait > capacity or num_leave < 0 or num_enter < 0 or num_wait < 0:\n            return \"impossible\"\n\n    if measurements[0][1] + measurements[0][2] != 0 or measurements[-1][0] + measurements[-1][2] != 0:\n        return \"impossible\"\n\n    for i in range(num_stations - 1):\n        if measurements[i][0] > capacity - (measurements[i + 1][1] + measurements[i + 1][2]):\n            return \"impossible\"\n\n    return \"possible\"\n",
        "test": "assert solution(\"1 2\\n1 0 0\\n0 1 0\") == \"impossible\""
    },
    {
        "number": 4747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    def expected_score(n: int, k: int) -> float:\n        if k == 0:\n            return 1\n        if k == 1:\n            return (1 + n) / 2\n        return (k * (n / 2) + 1 + expected_score(n, k - 1)) / k\n\n    result = expected_score(n, k)\n    return f\"{result:.3f}\"",
        "test": "assert solution(\"2 3\") == \"1.875\""
    },
    {
        "number": 4748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, N, M = map(int, stdin.split())\n    A = 0\n    B = 0\n\n    if H % 2 == 0:\n        A = 1\n        B = H // 2\n    else:\n        A = H // 2\n        B = (H - 1) // 2\n\n    needed_2x2 = A + B\n    needed_4x2 = H\n\n    extra_2x2 = max(0, needed_2x2 - N)\n    extra_4x2 = max(0, needed_4x2 - M)\n\n    return f\"{extra_2x2} {extra_4x2}\"\n\nH, N, M = 1, 1, 0\nstdin = f\"{H} {N} {M}\"\nprint(solution(stdin)) ",
        "test": "assert solution('4 2 7') == '1 4\\n'"
    },
    {
        "number": 4749,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    grid = [line.strip() for line in stdin.split(\"\\n\")[1:]]\n    \n    # Check if every row has the same number of black squares as it has white squares\n    for row in grid:\n        if row.count(\"B\") != row.count(\"W\"):\n            return \"0\"\n    \n    # Check if every column has the same number of black squares as it has white squares\n    for i in range(n):\n        column = \"\".join([grid[j][i] for j in range(n)])\n        if column.count(\"B\") != column.count(\"W\"):\n            return \"0\"\n    \n    # Check if no row or column has 3 or more consecutive squares of the same color\n    for row in grid:\n        for i in range(n - 2):\n            if row[i:i+3] == \"BBB\" or row[i:i+3] == \"WWW\":\n                return \"0\"\n    \n    for i in range(n):\n        column = \"\".join([grid[j][i] for j in range(n)])\n        for j in range(n - 2):\n            if column[j:j+3] == \"BBB\" or column[j:j+3] == \"WWW\":\n                return \"0\"\n    \n    return \"1\"\n",
        "test": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == \"1\""
    },
    {
        "number": 4750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    output = []\n\n    for _ in range(q):\n        l1, r1, l2, r2 = map(int, stdin.readline().strip().split())\n        a = r1\n        b = l2\n\n        while a >= l1 and b <= r2:\n            a -= 1\n            b += 1\n\n        output.extend([a + 1, b - 1])\n\n    return '\\n'.join(map(str, output))",
        "test": "assert solution(\"5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\" "
    },
    {
        "number": 4751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    input_str = stdin.strip()\n    input_list = re.split(r\"[^\\d\\[\\],\\s]\", input_str)\n    input_list = [int(x) for x in input_list if x]\n\n    def find_cycle_start(head: ListNode) -> bool:\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n\n        if not fast or not fast.next:\n            return False\n\n        slow = head\n        while slow != fast:\n            slow = slow.next\n            fast = fast.next\n\n        return slow\n\n    class ListNode:\n        def __init__(self, val=0, next=None):\n            self.val = val\n            self.next = next\n\n    head = ListNode(-4)\n    current_node = head\n    for i in range(len(input_list) - 1):\n        current_node.next = ListNode(input_list[i + 1])\n        current_node = current_node.next\n\n    if find_cycle_start(head):\n        return \"true\"\n    else:\n        return \"false\"",
        "test": "assert solution(\"[1,2],0\") == \"true\""
    },
    {
        "number": 4752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return f\"[{i}, {j}]\"\n\n    return \"No solution found\" ",
        "test": "assert solution([3, 2, 4], 6) == [1, 2], \"Test case 2 failed\""
    },
    {
        "number": 4753,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n == 3:\n        return \"0\"\n\n    return str(n - 3)",
        "test": "assert solution(\"3\") == \"0\""
    },
    {
        "number": 4754,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    socks = stdin.splitlines()[1].split()\n    pile1 = []\n    pile2 = []\n    socks_dict = {}\n    for sock in socks:\n        if sock in socks_dict:\n            socks_dict[sock] += 1\n        else:\n            socks_dict[sock] = 1\n    for sock in socks_dict:\n        if socks_dict[sock] % 2 != 0:\n            return \"impossible\"\n    for sock in socks:\n        if len(pile1) == 0:\n            pile1.append(sock)\n        elif pile1[-1] == sock:\n            pile1.append(sock)\n        elif pile2[-1] == sock:\n            pile2.append(sock)\n        else:\n            pile1.append(sock)\n    return len(pile1) + len(pile2)\n\nn = 2\ninput_str = \"1 2 2 1\"\nprint(solution(input_str)) # Output: 4\n\nn = 1\ninput_str = \"3 7\"\nprint(solution(input_str)) # Output: impossible ",
        "test": "assert solution(\"1\\n3 7\") == \"impossible\""
    },
    {
        "number": 4755,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    c, k = map(int, stdin.strip().split())\n    bill = 10 ** k\n    return str(bill * round(c / bill))",
        "test": "assert solution(\"123450995 1\") == \"123451000\""
    },
    {
        "number": 4756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    coords = [(int(x), int(y)) for x, y in map(str.split, lines[1:])]\n    \n    def unusefulness(a: float) -> float:\n        return sum((coord[0] + a - coord[1]) ** 2 for coord in coords)\n    \n    a = 0.0\n    delta = 0.001\n    while delta > 1e-3:\n        u1 = unusefulness(a)\n        u2 = unusefulness(a + delta)\n        a += (u1 - u2) / (u1 - 2 * u2 + u1) * delta\n        delta /= 2\n    \n    return f\"{a:.6f}\"\n\ndef",
        "test": "assert solution(\"3\\n0 1\\n1 0\\n1 1\") == \"0.000000\" "
    },
    {
        "number": 4757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    villagers, evenings = map(int, stdin.split('\\n')[0].split())\n    songs = {}\n\n    for i in range(evenings):\n        villager_count, *villagers_present = map(int, stdin.split('\\n')[i + 1].split())\n        for villager in villagers_present:\n            if villager not in songs:\n                songs[villager] = set()\n            songs[villager].add(i)\n\n    return \"\\n\".join(map(str, sorted(villager for villager in songs if len(songs[villager]) == evenings)))",
        "test": "assert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\\n\" "
    },
    {
        "number": 4758,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, t, m = map(int, stdin.split())\n    return str(n * t * m)",
        "test": "assert solution(\"3 4 5\") == \"60\""
    },
    {
        "number": 4759,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    at_bats = list(map(int, stdin.splitlines()[1].split()))\n\n    official_at_bats = [at_bat for at_bat in at_bats if at_bat != -1]\n    total_bases = sum(official_at_bats)\n    total_at_bats = n - official_at_bats.count(-1)\n\n    slugging_percentage = total_bases / total_at_bats\n\n    return f\"{slugging_percentage:.3f}\"",
        "test": "assert solution(\"3\\n1 -1 4\") == \"2.5\""
    },
    {
        "number": 4760,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    \n    primes = []\n    crossed_out = [False] * (N+1)\n    crossed_out[0] = True\n    crossed_out[1] = True\n    \n    for i in range(2, N+1):\n        if not crossed_out[i]:\n            primes.append(i)\n            for j in range(i*i, N+1, i):\n                crossed_out[j] = True\n    \n    return str(primes[K-1])",
        "test": "assert solution(\"15 12\") == \"7\""
    },
    {
        "number": 4761,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_combination(num: int) -> bool:\n        if num < 123456 or num > 987654:\n            return False\n        digits = [int(d) for d in str(num)]\n        if len(set(digits)) != 6:\n            return False\n        for digit in digits:\n            if digit == 0:\n                return False\n            if num % digit != 0:\n                return False\n        return True\n\n    L, H = map(int, stdin.split())\n    total = 0\n    for num in range(L, H + 1):\n        if is_valid_combination(num):\n            total += 1\n    return str(total)",
        "test": "assert solution(\"198765 198769\") == \"0\""
    },
    {
        "number": 4762,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1.00000000\"\n    elif n == 2:\n        return \"0.50000000\"\n    else:\n        return str(1 - (1 / n) * ((n-1) / (n-2)))",
        "test": "assert solution(\"2\") == \"0.50000000\""
    },
    {
        "number": 4763,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    target = int(stdin)\n    if target < 1 or target > 180:\n        return \"impossible\"\n    \n    triple_count = target // 60\n    double_count = (target - triple_count * 60) // 30\n    single_count = (target - triple_count * 60 - double_count * 30)\n\n    if triple_count == 3:\n        return f\"triple {20}\\ntriple {20}\\ntriple {20}\"\n    elif triple_count == 2:\n        if double_count == 2:\n            return f\"triple {20}\\ntriple {20}\\ndouble {15}\"\n        elif double_count == 1:\n            return f\"triple {20}\\ntriple {20}\\nsingle {9}\"\n    elif triple_count == 1:\n        if double_count == 2:\n            return f\"triple {19}\\ntriple {20}\\ndouble {15}\"\n        elif double_count == 1:\n            return f\"triple {19}\\ndouble {15}\\nsingle {9}\"\n        elif double_count == 0:\n            return f\"triple {19}\\nsingle {9}\\nsingle {9}\"\n    elif triple_count == 0:\n        if double_count == 2:\n            return f\"double {18}\\ndouble {15}\\nsingle {9}\"\n        elif double_count == 1:\n            return f\"double {18}\\nsingle {9}\\nsingle {9}\"\n    else:\n        return \"impossible\"",
        "test": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'"
    },
    {
        "number": 4764,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, h, v = map(int, stdin.split())\n    if n < 2 or n > 10000:\n        return \"Invalid input\"\n    if h < 0 or h >= n or v < 0 or v >= n:\n        return \"Invalid input\"\n    \n    volume = n * n * 4\n    max_volume = 0\n    \n    for i in range(h, n - h):\n        for j in range(v, n - v):\n            volume = (n - i) * (n - j) * 4\n            max_volume = max(max_volume, volume)\n    \n    return str(max_volume)",
        "test": "assert solution(\"5 2 2\") == \"36\" "
    },
    {
        "number": 4765,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    ingredients = []\n\n    for i in range(1, N + 1):\n        sourness, bitterness = map(int, stdin.split(\"\\n\")[i].split())\n        ingredients.append((sourness, bitterness))\n\n    min_diff = float(\"inf\")\n    for i in range(1, 2 ** N):\n        mask = bin(i)[2:].zfill(N)\n        sourness = 1\n        bitterness = 0\n\n        for j in range(N):\n            if mask[j] == \"1\":\n                sourness *= ingredients[j][0]\n                bitterness += ingredients[j][1]\n\n        diff = abs(sourness - bitterness)\n        min_diff = min(min_diff, diff)\n\n    return str(min_diff)",
        "test": "assert solution(\"2\\n3 8\\n5 8\") == \"1\""
    },
    {
        "number": 4766,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    output = \"\"\n    lines = stdin.split(\"\\n\")\n    for line in lines:\n        if line.startswith(\"Simon says\"):\n            output += line.replace(\"Simon says\", \"\") + \"\\n\"\n    return output\n\ninput = \"Simon says smile.\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\"\nprint(solution(input)) ",
        "test": "assert solution(\"3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\") == \"raise your right hand.\\nraise your left hand.\""
    },
    {
        "number": 4767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    registers = [int(x) for x in stdin.split()]\n\n    # Initialize the counters\n    counters = [0] * 8\n    for i in range(8):\n        counters[i] = registers[i]\n\n    # Initialize the cycle lengths\n    cycle_lengths = [2, 3, 5, 7, 11, 13, 17, 19]\n\n    # Calculate the total number of operations\n    total_operations = 1\n    for cycle_length in cycle_lengths:\n        total_operations *= cycle_length\n\n    # Calculate the current position in the cycle\n    position = 0\n    for i in range(8):\n        position += counters[i] * cycle_lengths[i]\n\n    # Calculate the number of remaining operations\n    remaining_operations = total_operations - position\n\n    # Calculate the number of operations that can be safely performed\n    safe_operations = remaining_operations % (cycle_lengths[-1] ** 2)\n\n    return str(safe_operations)",
        "test": "assert solution(\"1 2 4 6 10 12 16 18\") == \"0\""
    },
    {
        "number": 4768,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    dna_strings = stdin.split()[2:]\n    \n    def unlikeliness(tree):\n        weights = [0] * n\n        for i in range(n):\n            weights[i] += sum(1 for j in range(k) if dna_strings[i][j] != dna_strings[0][j])\n        \n        for u, v in tree:\n            weights[u] += sum(1 for j in range(k) if dna_strings[u][j] != dna_strings[v][j])\n            weights[v] += sum(1 for j in range(k) if dna_strings[u][j] != dna_strings[v][j])\n        \n        return sum(weights)\n    \n    def find_tree(tree):\n        min_tree = None\n        min_weight = float('inf')\n        \n        for i in range(n):\n            for j in range(i+1, n):\n                if (i, j) not in tree:\n                    new_tree = tree | {(i, j)}\n                    new_weight = unlikeliness(new_tree)\n                    if new_weight < min_weight:\n                        min_weight = new_weight\n                        min_tree = new_tree\n        \n        return min_weight, min_tree\n    \n    initial_tree = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            initial_tree |= {(i, j)}\n    \n    initial_weight, initial_tree = find_tree(initial_tree)\n    \n    output = str(initial_weight) + '\\n'\n    for u, v in initial_tree:\n        output += f\"{u} {v}\\n\"\n    \n    return output",
        "test": "assert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\\n0 1\\n0 2\\n0 3\\n\" "
    },
    {
        "number": 4769,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_anagram(word1: str, word2: str) -> bool:\n        return sorted(word1) == sorted(word2)\n\n    def find_multigram_roots(word: str, root_length: int, multigram_roots: set) -> None:\n        for i in range(1, len(word) - root_length + 1):\n            if is_anagram(word[:i], word[i:i + root_length]):\n                multigram_roots.add(word[:i])\n\n    def find_shortest_multigram_root(word: str) -> str:\n        for i in range(1, len(word) // 2 + 1):\n            if is_anagram(word[:i], word[i:]):\n                return word[:i]\n        return \"\"\n\n    multigram_roots = set()\n    max_root_length = len(stdin) // 2\n\n    for root_length in range(1, max_root_length + 1):\n        find_multigram_roots(stdin, root_length, multigram_roots)\n\n    shortest_multigram_root = find_shortest_multigram_root(stdin)\n\n    if not shortest_multigram_root:\n        return \"-1\"\n\n    for multigram_root in sorted(multigram_roots, key=len):\n        if is_anagram(shortest_multigram_root, multigram_root):\n            return multigram_root",
        "test": "assert solution(\"ab\") == \"-1\" "
    },
    {
        "number": 4770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    if N == M:\n        return f\"Dr. Chaz will have 0 piece[s] of chicken left over!\"\n    elif N > M:\n        return f\"Dr. Chaz will have {N - M} piece[s] of chicken left over!\"\n    else:\n        return f\"Dr. Chaz needs {M - N} more piece[s] of chicken!\"",
        "test": "assert solution(\"2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\" "
    },
    {
        "number": 4771,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, V = map(int, lines[0].split())\n    \n    boxes = []\n    for i in range(1, n+1):\n        l, w, h = map(int, lines[i].split())\n        boxes.append((l, w, h))\n    \n    max_box = max(boxes, key=lambda x: x[0] * x[1] * x[2])\n    max_volume = max_box[0] * max_box[1] * max_box[2]\n    \n    return str(max_volume - V)",
        "test": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"-2\""
    },
    {
        "number": 4772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split()[0:2])\n    grid = [list(row) for row in stdin.split()[2:]]\n\n    def get_neighbors(row, col):\n        for r, c in [(row - 1, col), (row, col - 1), (row + 1, col), (row, col + 1)]:\n            if 0 <= r < R and 0 <= c < C:\n                yield r, c\n\n    def dfs(row, col, visited, words):\n        if (row, col) in visited:\n            return\n        visited.add((row, col))\n        if grid[row][col] == '#':\n            return\n\n        word = ''\n        neighbors = set()\n        for r, c in get_neighbors(row, col):\n            if grid[r][c] != '#':\n                word += grid[r][c]\n                neighbors.add((r, c))\n\n        if len(word) >= 2:\n            words.add(word)\n\n        for r, c in neighbors:\n            dfs(r, c, visited, words)\n\n    visited = set()\n    words = set()\n\n    for r in range(R):\n        for c in range(C):\n            if (r, c) not in visited:\n                dfs(r, c, visited, words)\n\n    return min(words) if words else ''\n",
        "test": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\" "
    },
    {
        "number": 4773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return \"0\"\n    \n    macro_map = {\n        'MN': 'NS',\n        'ME': 'ES',\n        'MW': 'WE',\n        'MS': 'SN',\n        'EN': 'NS',\n        'EE': 'ES',\n        'EW': 'WE',\n        'ES': 'SN',\n        'WN': 'NS',\n        'WE': 'ES',\n        'WS': 'WE',\n        'SN': 'NS',\n    }\n\n    def encode_without_macro(route):\n        count = 0\n        for move in route:\n            count += 1\n        return count\n\n    def encode_with_macro(route):\n        macro_sequence = ''.join([macro_map[route[i:i+2]] for i in range(0, len(route), 2)])\n        macro_string = ''.join([move for move in macro_sequence if move not in macro_map.values()])\n        macro_count = len(macro_string)\n        macro_index = route.index('M')\n        return macro_count + encode_without_macro(route[:macro_index]) + encode_without_macro(route[macro_index+1:])\n\n    encoded_route = encode_without_macro(stdin)\n    encoded_route_with_macro = encode_with_macro(stdin)\n\n    return min(encoded_route, encoded_route_with_macro)",
        "test": "assert solution(\"NSEW\") == \"4\" "
    },
    {
        "number": 4774,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n\n    operators = [\"*\", \"/\", \"+\", \"-\"]\n    valid_expressions = []\n\n    for i in range(len(operators)):\n        for j in range(i, len(operators)):\n            for k in range(j, len(operators)):\n                for l in range(k, len(operators)):\n                    try:\n                        expression = f\"{a} {operators[i]} {b} {operators[j]} {c} {operators[k]} {d} {operators[l]} {operators[i]} {b} {operators[j]} {c} {operators[k]} {d}\"\n                        if eval(expression) == True:\n                            valid_expressions.append(expression)\n                    except ZeroDivisionError:\n                        pass\n\n    valid_expressions.sort()\n\n    if valid_expressions:\n        return \"\\n\".join(valid_expressions)\n    else:\n        return \"problems ahead\"",
        "test": "assert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\" "
    },
    {
        "number": 4775,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    word_a, word_b = stdin.split()\n    common_letter = word_a[0]\n    \n    def create_grid(word_a: str, word_b: str) -> str:\n        grid = \"\"\n        for i in range(len(word_a)):\n            for j in range(len(word_b)):\n                if i == 0 and j == 0:\n                    grid += common_letter\n                elif i == 0:\n                    grid += word_b[j]\n                elif j == 0:\n                    grid += word_a[i]\n                else:\n                    grid += \".\"\n            grid += \"\\n\"\n        return grid\n\n    output = \"\"\n    output += create_grid(word_a, word_b)\n    output += create_grid(word_b, word_a)\n    return output",
        "test": "assert solution(\"MAMA TATA\") == \".T..\\nMAMA\\n.T..\\n.A..\""
    },
    {
        "number": 4776,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    events = []\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    for i in range(1, N+1):\n        s, t = map(int, lines[i].split())\n        events.append((s, t))\n\n    days = set()\n    for s, t in events:\n        for i in range(s, t+1):\n            days.add(i)\n\n    return str(len(days))",
        "test": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\""
    },
    {
        "number": 4777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    A = 0\n    B = 0\n    for i in range(K):\n        if i % 2 == 0:\n            A += 1\n            B += 2\n        else:\n            B += 1\n            A += 2\n    return f\"{A} {B}\"",
        "test": "assert solution(\"4\") == \"2 3\""
    },
    {
        "number": 4778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    P, D = map(int, stdin.split()[0:2])\n    districts = {i: [] for i in range(1, D+1)}\n    votes = {'A': 0, 'B': 0}\n\n    for i in range(P):\n        d, a, b = map(int, stdin.split()[3*i+2:3*i+5])\n        districts[d].append((a, b))\n        votes['A'] += a\n        votes['B'] += b\n\n    wasted_votes = {'A': 0, 'B': 0}\n    efficiency_gap = 0\n\n    for d in range(1, D+1):\n        a_votes = 0\n        b_votes = 0\n\n        for a, b in districts[d]:\n            a_votes += a\n            b_votes += b\n\n        if a_votes > b_votes:\n            winner = 'A'\n            loser = 'B'\n        else:\n            winner = 'B'\n            loser = 'A'\n\n        for a, b in districts[d]:\n            if winner == 'A':\n                wasted_votes['A'] += b\n            else:\n                wasted_votes['B'] += a\n\n        efficiency_gap += abs((a_votes - b_votes) / votes[winner])\n\n    efficiency_gap /= D\n\n    return f\"{winner} {wasted_votes['A']} {wasted_votes['B']}\\n{efficiency_gap:.6f}\"\n\ndef",
        "test": "assert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\\n\""
    },
    {
        "number": 4779,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1:]))\n    max_val = 0\n\n    for k in range(1, n):\n        val = (sum(a[:k]) ** 2) * (sum(a[k:]) - k + 1)\n        max_val = max(max_val, val)\n\n    return str(max_val)",
        "test": "assert solution(\"2\\n1\\n1\") == \"1\""
    },
    {
        "number": 4780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    first_row, second_row, T = stdin.splitlines()\n    N1, N2 = map(int, first_row.split())\n    ants = [[] for _ in range(2)]\n    for i, row in enumerate((first_row, second_row)):\n        for j, ant in enumerate(row):\n            ants[i].append((j, ant))\n\n    ants[0].sort(key=lambda x: x[0])\n    ants[1].sort(key=lambda x: x[0], reverse=True)\n\n    for _ in range(int(T)):\n        for i in range(N1):\n            if i > 0:\n                if ants[0][i][1] > ants[1][i][1]:\n                    ants[0][i], ants[1][i] = ants[1][i], ants[0][i]\n                elif ants[0][i][1] < ants[1][i][1]:\n                    ants[0][i], ants[1][i] = ants[1][i], ants[0][i]\n\n    return \"\".join(ant[1] for row in ants for ant in row)",
        "test": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\""
    },
    {
        "number": 4781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    K, N = map(int, stdin.splitlines()[:2])\n    questions = stdin.splitlines()[2:]\n    box = K\n\n    for i in range(N):\n        time_passed, answer_type = questions[i].split()\n        time_passed = int(time_passed)\n\n        if time_passed == 210:\n            return str(box)\n\n        if answer_type == \"T\":\n            box = (box + 1) % 8\n        elif answer_type == \"N\":\n            pass\n        elif answer_type == \"P\":\n            box = (box - 1) % 8",
        "test": "assert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"4\" "
    },
    {
        "number": 4782,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    \n    # Calculate the maximum cost of plowing the roads\n    max_cost = (n * (n - 1)) // 2\n    \n    # Calculate the minimum cost of plowing the roads\n    min_cost = n - 1\n    \n    # Return the maximum cost\n    return str(max_cost)",
        "test": "assert solution(\"4 3\") == \"6\""
    },
    {
        "number": 4783,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.splitlines()[0].split())\n    vault = [list(map(int, line.split())) for line in stdin.splitlines()[1:M+1]]\n    \n    # Initialize a 2D array to store the minimum ladder length to reach each cell in the vault\n    ladder_length = [[float('inf') for _ in range(N)] for _ in range(M)]\n    ladder_length[0][0] = 0\n    \n    # BFS to find the shortest ladder length to reach each cell in the vault\n    queue = [(0, 0)]\n    while queue:\n        y, x = queue.pop(0)\n        for dy, dx in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            ny, nx = y+dy, x+dx\n            if 0 <= ny < M and 0 <= nx < N:\n                if vault[y][x] < vault[ny][nx]:\n                    ladder_length[ny][nx] = min(ladder_length[ny][nx], ladder_length[y][x]+1)\n                    queue.append((ny, nx))\n    \n    # The special coin is at the bottom right corner, so we need to reach the bottom left corner\n    ladder_length[M-1][N-1] = 0\n    \n    # BFS to find the shortest ladder length to reach each cell in the vault\n    queue = [(M-1, 0)]\n    while queue:\n        y, x = queue.pop(0)\n        for dy, dx in [(-1, 0), (0, 1)]:\n            ny, nx = y+dy, x+dx\n            if 0 <= ny < M and 0 <= nx < N:\n                if vault[y][x] < vault[ny][nx]:\n                    ladder_length[ny][nx] = min(ladder_length[ny][nx], ladder_length[y][x]+1)\n                    queue.append((ny, nx))\n    \n    # The shortest ladder length to reach the special coin from the entrance\n    return str(ladder_length[0][0])",
        "test": "assert solution(\"1 4\\n4 3 2 1\") == \"0\" "
    },
    {
        "number": 4784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split('\\n')[0:2])\n    P = list(map(int, stdin.split('\\n')[2:]))\n\n    available_megabytes = X\n    for i in range(N):\n        if P[i] > available_megabytes:\n            available_megabytes = 0\n        else:\n            available_megabytes -= P[i]\n\n    return str(available_megabytes)",
        "test": "assert solution('10\\n3\\n10\\n2\\n12') == '16' "
    },
    {
        "number": 4785,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    hiss = False\n    for i in range(len(stdin) - 1):\n        if stdin[i:i+2] == \"ss\":\n            hiss = True\n            break\n    return \"hiss\" if hiss else \"no hiss\"",
        "test": "assert solution(\"amiss\") == \"hiss\""
    },
    {
        "number": 4786,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # parse the input\n    n, keywords = int(stdin.splitlines()[0]), stdin.splitlines()[1:]\n\n    # create a set of keywords\n    unique_keywords = set()\n    for keyword in keywords:\n        unique_keywords.add(keyword.lower().replace(\"-\", \" \"))\n\n    # calculate the number of non-similar keywords\n    non_similar_keywords = len(unique_keywords)\n\n    return str(non_similar_keywords)",
        "test": "assert solution(\"5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux\") == \"5\" "
    },
    {
        "number": 4787,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    tablet_count = stdin.count('T')\n    compass_count = stdin.count('C')\n    gear_count = stdin.count('G')\n\n    tablet_points = tablet_count ** 2\n    compass_points = compass_count ** 2\n    gear_points = gear_count ** 2\n    unique_cards_points = 7 * (tablet_count + compass_count + gear_count - max(tablet_count, compass_count, gear_count))\n\n    total_points = tablet_points + compass_points + gear_points + unique_cards_points\n\n    return str(total_points)",
        "test": "assert solution(\"CCC\") == \"9\" "
    },
    {
        "number": 4788,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    current_direction, correct_direction = map(int, stdin.split())\n    if current_direction == correct_direction:\n        return \"0\"\n    delta = abs(correct_direction - current_direction)\n    if delta > 180:\n        delta = 360 - delta\n    return str(delta)\n\ninput_1 = \"315\\n45\"\ninput_2 = \"180\\n270\"\nprint(solution(input_1))  # Output: 90\nprint(solution(input_2))  # Output: 90 ",
        "test": "assert solution(\"315\\n45\\n\") == \"90\""
    },
    {
        "number": 4789,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.splitlines()[0])\n    clerk_numbers = sorted(map(int, stdin.splitlines()[1:]))\n    count = 0\n    clerk_index = 0\n    for num in clerk_numbers:\n        if num > count:\n            count = num\n    return str(count)",
        "test": "assert solution(\"5\\n11\\n20\\n33\\n40\\n55\") == \"1\" "
    },
    {
        "number": 4790,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    black_count = s.count('B')\n    white_count = s.count('W')\n\n    if black_count == white_count:\n        return \"1\"\n\n    s = s[1:] + [s[0]]\n\n    for i in range(len(s) - 1):\n        if s[i] == 'B' and s[i+1] == 'W':\n            return \"1\"\n        if s[i] == 'W' and s[i+1] == 'B':\n            return \"1\"\n\n    return \"0\"",
        "test": "assert solution(\"WWBWBB\") == \"1\""
    },
    {
        "number": 4791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3, s4 = map(int, stdin.split())\n\n    def is_quadrilateral_possible(s1, s2, s3, s4):\n        return 2 * s1 + 2 * s2 + 2 * s3 + 2 * s4 <= 1 + s1 + s2 + s3 + s4\n\n    if not is_quadrilateral_possible(s1, s2, s3, s4):\n        return \"0\"\n\n    def area_of_quadrilateral(s1, s2, s3, s4):\n        s = (s1 + s2 + s3 + s4) / 2\n        return sqrt(s * (s - s1) * (s - s2) * (s - s3) * (s - s4))\n\n    return f\"{area_of_quadrilateral(s1, s2, s3, s4):.6f}\"",
        "test": "assert solution(\"1 2 1 1\") == \"1.299038105676658\""
    },
    {
        "number": 4792,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    output = \"\"\n    prev_char = \"\"\n    for char in stdin:\n        if char == prev_char:\n            continue\n        output += char\n        prev_char = char\n    return output",
        "test": "assert solution(\"robert\") == \"robert\""
    },
    {
        "number": 4793,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, v1, v2 = map(int, stdin.split())\n\n    if s % v1 != 0 or s % v2 != 0:\n        return \"Impossible\"\n\n    num_bottles_v1 = s // v1\n    num_bottles_v2 = (s // v2) * v1 // v2\n\n    if num_bottles_v1 > num_bottles_v2:\n        num_bottles_v1, num_bottles_v2 = num_bottles_v2, num_bottles_v1\n\n    return f\"{num_bottles_v1} {num_bottles_v2}\"",
        "test": "assert solution(\"1000 900 7\") == \"Impossible\""
    },
    {
        "number": 4794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split()[0].split())\n    stdin = stdin.split('\\n')[1:]\n    map_data = [list(line) for line in stdin]\n\n    def is_valid(row, col):\n        return 0 <= row < R and 0 <= col < C and map_data[row][col] == '.'\n\n    def squash_count(row, col):\n        count = 0\n        for i in range(row, row + 2):\n            for j in range(col, col + 2):\n                if is_valid(i, j):\n                    count += 1\n        return count\n\n    counts = [0, 0, 0, 0, 0]\n    for row in range(R):\n        for col in range(C):\n            if map_data[row][col] == 'X':\n                count = squash_count(row, col)\n                counts[min(4, count)] += 1\n\n    return '\\n'.join(map(str, counts))",
        "test": "assert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\\n\" "
    },
    {
        "number": 4795,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    P_list = []\n    \n    for i in range(1, N+1):\n        P = int(stdin.split('\\n')[i])\n        P_list.append(P)\n    \n    X = 0\n    for i in range(N):\n        number = P_list[i] // 10\n        pow = P_list[i] % 10\n        X += number ** pow\n    \n    return str(X)",
        "test": "assert solution(\"2\\n212\\n1253\") == \"1953566\""
    },
    {
        "number": 4796,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    juice_amounts, cocktail_ratios = stdin.split(\"\\n\")\n    juice_amounts = [float(x) for x in juice_amounts.split()]\n    cocktail_ratios = [float(x) for x in cocktail_ratios.split()]\n\n    total_cocktail_volume = sum(juice_amounts) * sum(cocktail_ratios) / sum(cocktail_ratios)\n    leftover_volume = sum(juice_amounts) - total_cocktail_volume\n    leftover_amounts = [juice_amounts[i] - (cocktail_ratios[i] * total_cocktail_volume / sum(cocktail_ratios)) for i in range(3)]\n\n    return \" \".join([f\"{round(x, 6):.6f}\" for x in leftover_amounts])\n\ndef",
        "test": "assert solution(\"9 9 9\\n3 2 1\") == \"0.000000 3.000000 6.000000\""
    },
    {
        "number": 4797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    prev_char = \"\"\n    for char in stdin:\n        if char == \"<\":\n            if prev_char == \"<\":\n                result = result[:-1]\n            else:\n                result += prev_char\n        else:\n            result += char\n        prev_char = char\n    return result",
        "test": "assert solution(\"foss<<rritun\") == \"forritun\""
    },
    {
        "number": 4798,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    short_variation = \"\"\n    for char in stdin:\n        if char == \"-\":\n            continue\n        elif char.isupper():\n            short_variation += char\n    return short_variation",
        "test": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\""
    },
    {
        "number": 4799,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    g, s, c = map(int, stdin.split())\n\n    buying_power = g * 3 + s * 2 + c\n    if buying_power >= 8:\n        best_victory_card = \"Province\"\n    elif buying_power >= 5:\n        best_victory_card = \"Duchy\"\n    else:\n        best_victory_card = \"Estate\"\n\n    if buying_power >= 6:\n        best_treasure_card = \"Gold\"\n    elif buying_power >= 3:\n        best_treasure_card = \"Silver\"\n    else:\n        best_treasure_card = \"Copper\"\n\n    return f\"{best_victory_card} or {best_treasure_card}\"",
        "test": "assert solution(\"2 1 0\") == \"Province or Gold\""
    },
    {
        "number": 4800,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    d, s = map(int, input().split())\n    if s < d:\n        return \"impossible\"\n    remaining = n - k\n    avg_difficulty = (d * k + s * remaining) / n\n    return \"{:.6f}\".format(avg_difficulty)",
        "test": "assert solution(\"10 3\\n80 90\") == \"75.7142857\" "
    },
    {
        "number": 4801,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n    greedy_subsequence = []\n    \n    for a in A:\n        if not greedy_subsequence or a > greedy_subsequence[-1]:\n            greedy_subsequence.append(a)\n            \n    return str(len(greedy_subsequence)) + '\\n' + ' '.join(map(str, greedy_subsequence))",
        "test": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'"
    },
    {
        "number": 4802,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    hours, minutes = map(int, stdin.split())\n    new_hours = hours - 1 if minutes >= 45 else hours\n    new_minutes = minutes - 45\n\n    if new_minutes < 0:\n        new_hours -= 1\n        new_minutes += 60\n\n    return f\"{new_hours} {new_minutes}\"",
        "test": "assert solution(\"10 10\") == \"9 25\""
    },
    {
        "number": 4803,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = float(stdin)\n    epsilon = 1e-5\n    a = 1.0\n    while True:\n        a_next = a ** (1 / (a ** (1 / a)))\n        if abs(a_next - a) < epsilon:\n            break\n        a = a_next\n    return f\"{a:.6f}\"",
        "test": "assert solution(\"1.000000\") == \"1.000000\""
    },
    {
        "number": 4804,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin)\n    \n    def is_visually_appealing(x: int, y: int) -> bool:\n        return (x % 2 == 0 and y % 2 == 0) or (x % 2 == 1 and y % 2 == 1)\n    \n    def find_patterns(x: int, y: int, S: int) -> None:\n        if x == 0 and y == 0:\n            return\n        if x <= y and x <= S - y and is_visually_appealing(x, y):\n            print(f\"{x},{y}\")\n            find_patterns(x - 1, y, S)\n            find_patterns(x, y - 1, S)\n        \n    find_patterns(S // 2, S // 2, S)\n    \n    return \"\" ",
        "test": "assert solution(\"50\") == \"50:\\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\\n\" "
    },
    {
        "number": 4805,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    unique_words = set(words)\n\n    if len(words) == len(unique_words):\n        return \"yes\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\""
    },
    {
        "number": 4806,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Define the mapping between the monster's moves and the mech's counter moves\n    monster_moves = {'R': 'S', 'B': 'K', 'L': 'H'}\n    combo_breaker = 'C'\n\n    # Initialize the mech's move sequence\n    mech_moves = []\n\n    # Iterate over the monster's moves\n    i = 0\n    while i < len(stdin):\n        # Check for a combination of three moves\n        if i + 3 <= len(stdin) and stdin[i:i+3] in ['RBL', 'LBR', 'LRB']:\n            # Add the combo breaker move\n            mech_moves.append(combo_breaker)\n            # Move the index three steps forward\n            i += 3\n        else:\n            # Add the counter move for the current monster move\n            mech_moves.append(monster_moves[stdin[i]])\n            # Move the index one step forward\n            i += 1\n\n    # Convert the mech's move sequence to a single string\n    mech_moves_str = ''.join(mech_moves)\n\n    return mech_moves_str",
        "test": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\""
    },
    {
        "number": 4807,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, N = map(int, stdin.split())\n    for i in range(1, N + 1):\n        if i % X == 0 and i % Y == 0:\n            print(\"FizzBuzz\")\n        elif i % X == 0:\n            print(\"Fizz\")\n        elif i % Y == 0:\n            print(\"Buzz\")\n        else:\n            print(i)",
        "test": "assert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n\""
    },
    {
        "number": 4808,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, dm = map(int, stdin.split()[:2])\n    d = list(map(int, stdin.split()[2:]))\n    \n    k = 0\n    while k < n and d[-k-1] <= dm:\n        k += 1\n    \n    if k == n:\n        return \"It had never snowed this early!\"\n    else:\n        return f\"It hadn't snowed this early in {k} years!\" ",
        "test": "assert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\" "
    },
    {
        "number": 4809,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    num_syllables, num_players = map(int, stdin.split())\n    player = 1\n    hands_left = num_players\n    hands_behind_back = 0\n\n    while hands_left > 1:\n        if hands_behind_back == num_players:\n            return \"No winner\"\n        if player == 1:\n            if num_syllables % 2 == 0:\n                hands_left -= 2\n            else:\n                hands_left -= 1\n                hands_behind_back += 1\n            player = (player % num_players) + 1\n        else:\n            player = (player % num_players) + 1\n            hands_behind_back += 1\n\n    return player",
        "test": "assert solution('10 10') == '7'"
    },
    {
        "number": 4810,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    matrix_size = int(len(stdin) ** 0.5)\n    matrix = [list(stdin[i:i + matrix_size]) for i in range(0, len(stdin), matrix_size)]\n    decrypted = ''.join([''.join(col) for col in zip(*matrix)])\n    return decrypted",
        "test": "assert solution(\"bok\") == \"bok\""
    },
    {
        "number": 4811,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    smallest_bar_size = 1\n    number_of_breaks = 0\n    \n    while smallest_bar_size < K:\n        smallest_bar_size *= 2\n        number_of_breaks += 1\n    \n    return f\"{smallest_bar_size} {number_of_breaks}\"",
        "test": "assert solution('7') == '8 3'"
    },
    {
        "number": 4812,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    common_word, *data = stdin.split(\"\\n\")\n    n_lists, lists, n_phrases, phrases = map(int, data[:4]), data[4:4 + n_lists], int(data[4 + n_lists]), data[4 + n_lists + 1:]\n\n    def merge_lists(*lists):\n        return set(word for lst in lists for word in lst)\n\n    def find_rhyming_words(word, endings):\n        return [ending for ending in endings if word.endswith(ending)]\n\n    def find_common_ending(words):\n        return set(word[-1] for word in words)\n\n    all_endings = merge_lists(*lists)\n    common_endings = find_common_ending(all_endings)\n    rhyming_words = find_rhyming_words(common_word, common_endings)\n\n    def test_phrase(phrase):\n        words = phrase.split()\n        if len(words) < 2 or len(words) > 3:\n            return \"NO\"\n        endings = find_common_ending(words)\n        rhyming_endings = endings.intersection(rhyming_words)\n        if rhyming_endings:\n            return \"YES\"\n        return \"NO\"\n\n    results = [test_phrase(phrase) for phrase in phrases]\n    return \"\\n\".join(results)",
        "test": "assert solution(\"drought\\n2\\naight ought aut acht\\nought oubt outte out oute\\n5\\ntasty sprout\\ndifficult route\\nworried and fraught\\nforever in doubt\\napples and pears\") == \"YES\\nYES\\nYES\\nYES\\nNO\" "
    },
    {
        "number": 4813,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    word, permutation = stdin.split()\n    letters = sorted(set(permutation))\n    for letter in word:\n        if letter in letters:\n            letters.remove(letter)\n        else:\n            return \"LOSE\"\n    return \"WIN\"",
        "test": "assert solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"LOSE\""
    },
    {
        "number": 4814,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def check_order(names: List[str]) -> str:\n        if names == sorted(names):\n            return \"INCREASING\"\n        elif names == sorted(names, reverse=True):\n            return \"DECREASING\"\n        else:\n            return \"NEITHER\"\n\n    N = int(stdin.split('\\n')[0])\n    names = stdin.split('\\n')[1:N+1]\n    return check_order(names)",
        "test": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\""
    },
    {
        "number": 4815,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, p, m = map(int, lines[0].split())\n    participants = {}\n    for i in range(1, n+1):\n        participants[lines[i]] = 0\n    for i in range(n+1, n+m+1):\n        player, score = lines[i].split()\n        participants[player] += int(score)\n    winners = [player for player, score in participants.items() if score >= p]\n    if len(winners) > 0:\n        return '\\n'.join([f\"{winner} wins!\" for winner in winners])\n    else:\n        return \"No winner!\"",
        "test": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nGeorge 3\\nKelly 1\\n\") == \"George wins!\""
    },
    {
        "number": 4816,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y, x1, y1, x2, y2 = map(float, stdin.split())\n    \n    # Check if the goat is outside the rectangle\n    if (x < x1 and x < x2) or (x > x1 and x > x2):\n        return str(abs(x - x1))\n    if (y < y1 and y < y2) or (y > y1 and y > y2):\n        return str(abs(y - y1))\n    \n    # If the goat is inside the rectangle, find the shortest distance to a corner\n    dist1 = math.sqrt((x - x1)**2 + (y - y1)**2)\n    dist2 = math.sqrt((x - x2)**2 + (y - y2)**2)\n    dist3 = math.sqrt((x - x1)**2 + (y - y2)**2)\n    dist4 = math.sqrt((x - x2)**2 + (y - y1)**2)\n    return str(min(dist1, dist2, dist3, dist4)) ",
        "test": "assert solution(\"6 0 0 2 7 6\") == \"2.0\""
    },
    {
        "number": 4817,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find_next_permutation(num: str) -> str:\n        n = len(num)\n        i = n - 2\n        while i >= 0 and num[i] >= num[i + 1]:\n            i -= 1\n        if i == -1:\n            return \"0\"\n        j = n - 1\n        while num[j] <= num[i]:\n            j -= 1\n        num = num[:i] + num[j] + num[i + 1:j] + num[i]\n        return int(num)\n\n    num = stdin.strip()\n    num = str(find_next_permutation(num))\n    return num",
        "test": "assert solution(\"156\") == \"165\""
    },
    {
        "number": 4818,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    task_times = list(map(int, stdin.split()[2:2+n]))\n    quiet_intervals = list(map(int, stdin.split()[2+n:]))\n\n    def get_quiet_intervals_with_start_end(quiet_intervals):\n        intervals = []\n        for i in range(len(quiet_intervals)):\n            if i % 2 == 0:\n                intervals.append((quiet_intervals[i], quiet_intervals[i+1]))\n        return intervals\n\n    def is_task_finishable_in_quiet_interval(task_time, quiet_interval):\n        return task_time <= quiet_interval[1] - quiet_interval[0]\n\n    quiet_intervals_with_start_end = get_quiet_intervals_with_start_end(quiet_intervals)\n    task_count = 0\n    current_time = 0\n\n    for task_time in task_times:\n        finishable = False\n        for quiet_interval in quiet_intervals_with_start_end:\n            if current_time >= quiet_interval[0] and is_task_finishable_in_quiet_interval(task_time, quiet_interval):\n                current_time += task_time\n                finishable = True\n                break\n        task_count += finishable\n\n    return str(task_count)",
        "test": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\") == \"4\""
    },
    {
        "number": 4819,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = [int(num.strip()) for num in stdin.split('\\n') if num.strip().isdigit()]\n    modulo_list = [num % 42 for num in input_list]\n    distinct_count = len(set(modulo_list))\n    return str(distinct_count)",
        "test": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"10\""
    },
    {
        "number": 4820,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, b = map(int, stdin.split())\n    total_bits = N * 1000\n    if b >= total_bits:\n        return \"yes\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"1 0\") == \"yes\""
    },
    {
        "number": 4821,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    cards = {}\n    for card in stdin:\n        if card in cards:\n            return \"GRESKA\"\n        else:\n            cards[card] = True\n\n    missing_cards = {\"P\": 13, \"K\": 13, \"H\": 13, \"T\": 13}\n\n    for card in cards:\n        suit, number = card[0], card[1:]\n        if number == \"0\":\n            missing_cards[suit] -= 1\n        else:\n            missing_cards[suit] -= int(number)\n\n    result = []\n    for suit in \"P\", \"K\", \"H\", \"T\":\n        result.append(str(missing_cards[suit]))\n\n    return \" \".join(result)",
        "test": "assert solution(\"H02H10P11H02\") == \"GRESKA\" "
    },
    {
        "number": 4822,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def shoot_flies(fly_positions: List[Tuple[int, int]], racket_position: Tuple[int, int], racket_size: int) -> int:\n        flies_killed = 0\n        for i in range(racket_position[0], racket_position[0] + racket_size):\n            for j in range(racket_position[1], racket_position[1] + racket_size):\n                if (i, j) in fly_positions:\n                    flies_killed += 1\n        return flies_killed\n\n    def mark_racket(picture: List[List[str]], racket_position: Tuple[int, int], racket_size: int) -> List[List[str]]:\n        marked_picture = [row.copy() for row in picture]\n        for i in range(racket_position[0], racket_position[0] + racket_size):\n            for j in range(racket_position[1], racket_position[1] + racket_size):\n                if (i, j) in fly_positions:\n                    if i == racket_position[0]:\n                        marked_picture[i][j] = '|'\n                    elif i == racket_position[0] + racket_size - 1:\n                        marked_picture[i][j] = '|'\n                    elif j == racket_position[1]:\n                        marked_picture[i][j] = '-'\n                    elif j == racket_position[1] + racket_size - 1:\n                        marked_picture[i][j] = '-'\n                    else:\n                        marked_picture[i][j] = '+'\n        return marked_picture\n\n    R, S, K = map(int, stdin.splitlines()[0].split())\n    fly_positions = []\n    for i, row in enumerate(stdin.splitlines()[1:]):\n        for j, char in enumerate(row):\n            if char == '*':\n                fly_positions.append((i, j))\n\n    max_flies_killed = 0\n    best_racket_position = (0, 0)\n    for i in range(R - K + 1):\n        for j in range(S - K + 1):\n            flies_killed = shoot_flies(fly_positions, (i, j), K)\n            if flies_killed > max_flies_killed:\n                max_flies_killed = flies_killed\n                best_racket_position = (i, j)\n\n    marked_picture = mark_racket(stdin.splitlines()[1:], best_racket_position, K)\n    marked_picture = [''.join(row) for row in marked_picture]\n    marked_picture.insert(0, str(max_flies_killed))\n\n    return '\\n'.join(marked_picture)",
        "test": "assert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == \"2\\n......\\n.*.*.*\\n+--+..\\n|*.|..\\n|.*|..\\n+--+..\\n*....*\""
    },
    {
        "number": 4823,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    cards = stdin.split()\n    ranks = [card[0] for card in cards]\n    unique_ranks = set(ranks)\n    max_rank = max([ranks.count(rank) for rank in unique_ranks])\n    return str(max_rank)",
        "test": "assert solution('AC AD AH AS KD') == '4'"
    },
    {
        "number": 4824,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    C, P = map(int, stdin.split()[0:2])\n    heights = list(map(int, stdin.split()[2:]))\n\n    def rotate(piece):\n        return [list(i) for i in zip(*piece[::-1])]\n\n    def check_col(col, heights):\n        return heights[col] + len(piece[0]) <= 10\n\n    def check_row(row, col, heights):\n        return row < heights[col]\n\n    def add_piece(col, heights):\n        for i in range(len(piece)):\n            for j in range(len(piece[0])):\n                if piece[i][j] == 1:\n                    heights[col + j] = max(heights[col + j], row + i + 1)\n        return heights\n\n    if P == 1:\n        piece = [[1, 1, 1]]\n    elif P == 2:\n        piece = [[1, 0], [1, 0]]\n    elif P == 3:\n        piece = [[1, 1, 0], [0, 1, 1]]\n    elif P == 4:\n        piece = [[1, 1, 1, 1]]\n    elif P == 5:\n        piece = [[0, 1], [1, 1]]\n    elif P == 6:\n        piece = [[1, 1, 1], [0, 0, 1]]\n    elif P == 7:\n        piece = [[1, 1, 1], [1, 0, 0]]\n\n    result = 0\n    for col in range(C):\n        if check_col(col, heights):\n            for i in range(heights[col]):\n                for j in range(len(piece)):\n                    if check_row(i, col, heights) and check_row(i + j, col + len(piece[0]), heights):\n                        result += 1\n\n    return str(result)\n\ninput1 = \"6 5\\n2 1 1 1 0 1\"\nprint(solution(input1))\n\ninput2 = \"5 1\\n0 0 0 0 0\"\nprint(solution(input2)) ",
        "test": "assert solution(\"5 1\\n0 0 0 0 0\") == \"7\" "
    },
    {
        "number": 4825,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    new_alphabet = {\n        'a': '@',\n        'n': '[]\\\\[]',\n        'b': '8',\n        'o': '0',\n        'c': '(',\n        'p': '|D',\n        'd': '|)',\n        'q': '(|,)',\n        'e': '3',\n        'r': '|Z',\n        'f': '#',\n        's': '$',\n        'g': '6',\n        't': '][\\\\]',\n        'h': '[-]',\n        'u': '|_|',\n        'v': '\\\\/\\\\/',\n        'k': '|<',\n        'w': '\\\\\\\\\\\\\\\\',\n        'm': '[]/\\\\[]',\n        'z': '2',\n        'y': '`/'\n    }\n\n    result = ''\n    for char in stdin:\n        if char.isalpha():\n            result += new_alphabet[char.lower()] if char.islower() else new_alphabet[char.lower()].upper()\n        else:\n            result += char\n    return result\n\ndef",
        "test": "assert solution(\"What's the Frequency, Kenneth?\") == '\\\\/\\\\/-@]\\\\\\'\\\\[\\\\`\\\\/|\\\\,|\\\\)3 \\\\|Z3(,)|_|3\\\\[\\\\]\\\\[\\\\]/\\\\/|<3\\\\[\\\\]\\\\[]\\\\[\\\\]/\\\\]\\\\[\\\\]\\\\|\\\\?\\\\|\\\\)'"
    },
    {
        "number": 4826,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n % 2 == 1:\n        return \"Alice\"\n    else:\n        return \"Bob\"",
        "test": "assert solution('1') == 'Alice'"
    },
    {
        "number": 4827,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def word_to_number(word: str) -> str:\n        if word == \"$\":\n            return \"one\"\n        if len(word) == 1:\n            return word\n        elif len(word) == 2:\n            if word[0] == \"t\":\n                return \"twenty\"\n            elif word[0] == \"th\":\n                return \"thirty\"\n            elif word[0] == \"f\":\n                return \"forty\"\n            elif word[0] == \"fi\":\n                return \"fifty\"\n            elif word[0] == \"s\":\n                return \"sixty\"\n            elif word[0] == \"se\":\n                return \"seventy\"\n            elif word[0] == \"e\":\n                return \"eighty\"\n            elif word[0] == \"n\":\n                return \"ninety\"\n        elif len(word) == 3:\n            if word[0] == \"one\":\n                return \"onehundred\"\n            elif word[0] == \"two\":\n                return \"twohundred\"\n            elif word[0] == \"three\":\n                return \"threehundred\"\n            elif word[0] == \"four\":\n                return \"fourhundred\"\n            elif word[0] == \"five\":\n                return \"fivehundred\"\n            elif word[0] == \"six\":\n                return \"sixhundred\"\n            elif word[0] == \"seven\":\n                return \"sevenhundred\"\n            elif word[0] == \"eight\":\n                return \"eighthundred\"\n            elif word[0] == \"nine\":\n                return \"ninehundred\"\n        else:\n            return \"invalid\"\n\n    words = stdin.split(\"\\n\")\n    sentence = \"\"\n    number_found = False\n    for word in words:\n        if word == \"$\":\n            number_found = True\n            continue\n        if number_found:\n            sentence += word_to_number(word)\n            number_found = False\n        else:\n            sentence += word + \" \"\n    return sentence.strip()\n\ndef",
        "test": "assert solution(\"7\\n$\\nis\\tthe\\nnumber\\nof\\nletters\\nhere\") == \"thirty is the number of letters here\" "
    },
    {
        "number": 4828,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    nop_count = 0\n    i = 0\n    while i < len(stdin):\n        if stdin[i].isupper():\n            i += 1\n            while i < len(stdin) and stdin[i].islower():\n                i += 1\n        else:\n            nop_count += 1\n            i += 1\n    return str(nop_count)",
        "test": "assert solution(\"Abcd\") == \"0\""
    },
    {
        "number": 4829,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    left, right = map(int, stdin.strip().split())\n    if left == 0 and right == 0:\n        return \"Not a moose\"\n    if left == right:\n        return f\"Even {2*left}\"\n    else:\n        return f\"Odd {max(left, right)*2}\"",
        "test": "assert solution(\"2 3\") == \"Odd 6\""
    },
    {
        "number": 4830,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    dictionary = stdin.splitlines()[1:N+1]\n    key_presses = stdin.splitlines()[N+1]\n\n    possible_words = []\n    for word in dictionary:\n        key_presses_needed = 0\n        for letter in word:\n            key_presses_needed += key_presses.count(str(ord(letter) - 96))\n        if key_presses_needed == len(word):\n            possible_words.append(word)\n\n    return str(len(possible_words))",
        "test": "assert solution(\"2\\nja\\nla\\n52\") == \"2\" "
    },
    {
        "number": 4831,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    p_frame = \"..#..\\n.#.#.\\n#.{}.#\\n.#.#.\\n..#..\\n\"\n    w_frame = \"..*..\\n.*.*.\\n*.{}.*\\n.*.*.\\n..*..\\n\"\n    output = \"\"\n    \n    for i, letter in enumerate(stdin):\n        if i % 2 == 0:\n            output += p_frame.format(letter)\n        else:\n            output += w_frame.format(letter)\n    \n    return output.rstrip(\"\\n\")",
        "test": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\""
    },
    {
        "number": 4832,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    \n    # Calculate the area of a circle in Euclidian geometry\n    area_E = 3.14159 * R * R\n    \n    # Calculate the area of a circle in taxicab geometry\n    area_T = (2 * R) * (2 * R)\n    \n    return f\"{area_E:.6f}\\n{area_T:.6f}\" ",
        "test": "assert solution(\"21\") == \"1385.442360\\n882.000000\\n\" "
    },
    {
        "number": 4833,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    expenses = [int(i) for i in lines[1].split()]\n\n    total_expenses = sum(filter(lambda x: x < 0, expenses))\n\n    return str(total_expenses)",
        "test": "assert solution(\"5\\n129 44 394 253 147\") == \"0\" "
    },
    {
        "number": 4834,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    times = list(map(int, stdin.split()[1:]))\n    max_time = max(times)\n    return str(N * max_time)",
        "test": "assert solution(\"3\\n2 2 2\") == \"6\""
    },
    {
        "number": 4835,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    t, N, M = map(int, stdin.splitlines()[0].split())\n    grid = stdin.splitlines()[1:]\n    \n    # Initialize variables\n    queue = [(0, 0)]\n    visited = set()\n    directions = {'U': (0, -1), 'D': (0, 1), 'L': (-1, 0), 'R': (1, 0)}\n    total_zones = 0\n    min_zones = float('inf')\n    \n    # Breadth-first search\n    while queue:\n        x, y = queue.pop(0)\n        visited.add((x, y))\n        \n        if grid[x][y] == 'S':\n            min_zones = min(min_zones, total_zones)\n        \n        if total_zones >= t:\n            break\n        \n        for direction in directions:\n            new_x, new_y = x + directions[direction][0], y + directions[direction][1]\n            \n            if 0 <= new_x < N and 0 <= new_y < M and (new_x, new_y) not in visited and grid[new_x][new_y] != '1':\n                queue.append((new_x, new_y))\n                total_zones += 1\n    \n    # Return output\n    return \"NOT POSSIBLE\" if min_zones == float('inf') else str(min_zones)",
        "test": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\""
    },
    {
        "number": 4836,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, C = map(int, stdin.split()[:2])\n    weights = list(map(int, stdin.split()[2:]))\n    \n    unique_weights = set(weights)\n    max_different_fruits = 0\n    \n    for weight in unique_weights:\n        if weight <= C:\n            current_different_fruits = weights.count(weight)\n            if current_different_fruits > max_different_fruits:\n                max_different_fruits = current_different_fruits\n    \n    return str(max_different_fruits)",
        "test": "assert solution(\"7 5\\n1 5 4 3 2 1 1\") == \"3\""
    },
    {
        "number": 4837,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R, Sven_symbols, N, friends_symbols = stdin.split('\\n')\n    R, N = int(R), int(N)\n    Sven_symbols = list(Sven_symbols)\n\n    def compare_symbols(s1: str, s2: str) -> int:\n        if s1 == s2:\n            return 1\n        elif (s1, s2) in (('S', 'P'), ('P', 'R'), ('R', 'S')):\n            return 2\n        else:\n            return 0\n\n    score = sum(compare_symbols(Sven_symbols[i], friends_symbols[j]) for i in range(R) for j in range(N))\n\n    largest_score = sum(compare_symbols(Sven_symbols[i], Sven_symbols[j]) for i in range(R) for j in range(N))\n\n    return f\"{score}\\n{largest_score}\"",
        "test": "assert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\\n15\\n\" "
    },
    {
        "number": 4838,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    times = [int(line) for line in lines[1:]]\n    time = 0\n    button_pressed = False\n\n    for t in times:\n        if not button_pressed:\n            time = t\n            button_pressed = True\n        else:\n            if t <= time:\n                time += 1\n            else:\n                time = t\n                button_pressed = False\n\n    return str(time) if button_pressed else \"still running\"",
        "test": "assert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\""
    },
    {
        "number": 4839,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, canisters = [int(x) for x in stdin.split()]\n    max_fraction = 0.0\n    canisters_sorted = sorted(canisters, reverse=True)\n    \n    for i in range(n):\n        if i == 0:\n            max_fraction = canisters_sorted[i] / (i + 1)\n        else:\n            max_fraction = max(max_fraction, (canisters_sorted[i] - canisters_sorted[i-1]) / (i + 1))\n    \n    if max_fraction <= 1:\n        return str(max_fraction)\n    else:\n        return \"impossible\"",
        "test": "assert solution(\"2\\n2 2\") == \"impossible\""
    },
    {
        "number": 4840,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def win_probability(a1, b1, a2, b2) -> float:\n        total = (b1 - a1 + 1) * (b2 - a2 + 1)\n        same_sum = (b1 - a1) * (b2 - a2)\n        diff_sum = 0\n        for i in range(a1, b1 + 1):\n            for j in range(a2, b2 + 1):\n                if i + j != i + j + 1:\n                    diff_sum += 1\n        return (diff_sum - same_sum) / total\n\n    def parse_input(input_str: str) -> Tuple[int, int, int, int]:\n        a1, b1, a2, b2 = map(int, input_str.split())\n        return a1, b1, a2, b2\n\n    a1, b1, a2, b2 = parse_input(stdin)\n    gunnar_prob = win_probability(a1, b1, a2, b2)\n    a1, b1, a2, b2 = parse_input(stdin.replace(\"1 4\", \"1 6\"))\n    emma_prob = win_probability(a1, b1, a2, b2)\n\n    if gunnar_prob > emma_prob:\n        return \"Gunnar\"\n    elif gunnar_prob < emma_prob:\n        return \"Emma\"\n    else:\n        return \"Tie\"",
        "test": "assert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\""
    },
    {
        "number": 4841,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    bites = [int(x) if x.isdigit() else x for x in stdin.split()]\n    \n    last_bite = 0\n    for bite in bites:\n        if bite == \"mumble\":\n            return \"something is fishy\"\n        if bite <= last_bite:\n            return \"something is fishy\"\n        last_bite = bite\n    \n    return \"makes sense\"",
        "test": "assert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\""
    },
    {
        "number": 4842,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    n = int(input_values[0])\n    sequence = [int(x) for x in input_values[1:]]\n\n    def find_degree(sequence):\n        differences = [sequence[i+1] - sequence[i] for i in range(len(sequence)-1)]\n        if differences.count(differences[0]) == len(differences):\n            return 1\n        else:\n            return 2\n\n    degree = find_degree(sequence)\n    next_value = sequence[-1] + (sequence[-1] - sequence[-2])\n\n    return f\"{degree} {next_value}\" ",
        "test": "assert solution(\"5 3 6 9 12 15\") == \"1 18\""
    },
    {
        "number": 4843,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Verifies if the given positions of the queens is a solution to the N-queens puzzle.\n\n    Args:\n    stdin (str): input containing the value of N followed by N lines, each containing the position of a queen as two integers.\n\n    Returns:\n    str: CORRECT if the positions of the queens is a solution to the N-queens puzzle, and INCORRECT otherwise.\n    \"\"\"\n    # Parse the input\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    queens = []\n    for i in range(1, n + 1):\n        x, y = map(int, lines[i].split())\n        queens.append((x, y))\n\n    # Check if there are any queens attacking each other\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Check if they are on the same row\n            if queens[i][0] == queens[j][0]:\n                return 'INCORRECT'\n            # Check if they are on the same column\n            if queens[i][1] == queens[j][1]:\n                return 'INCORRECT'\n            # Check if they are on the same diagonal\n            if abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                return 'INCORRECT'\n\n    return 'CORRECT'",
        "test": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\""
    },
    {
        "number": 4844,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    matrix = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    result = [0] * N\n\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            result[i] |= matrix[i][j]\n\n    return ' '.join(map(str, result))",
        "test": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\""
    },
    {
        "number": 4845,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    D, M = map(int, stdin.split())\n    from datetime import datetime\n    date = datetime(2009, M, D)\n    return date.strftime(\"%A\")",
        "test": "assert solution(\"1 1\") == \"Thursday\""
    },
    {
        "number": 4846,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    L, D, X = map(int, stdin.split())\n    N = L\n    while sum(int(digit) for digit in str(N)) != X:\n        N += 1\n        if N > D:\n            return \"No such numbers exist\"\n    M = L\n    while sum(int(digit) for digit in str(M)) != X:\n        M -= 1\n        if M < L:\n            return \"No such numbers exist\"\n    return f\"{N}\\n{M}\"",
        "test": "assert solution(\"100\\n500\\n12\\n\") == \"129\\n480\\n\""
    },
    {
        "number": 4847,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    v1, v2, v3 = [int(x) for x in lines[0].split()]\n    v4, v5, v6 = [int(x) for x in lines[1].split()]\n    n = int(lines[2])\n    \n    def is_inside(point):\n        x, y = point\n        return y - v6 * x >= 0 and y - v5 * x >= 0 and y - v4 * x >= 0\n    \n    apple_trees = [tuple(map(int, line.split())) for line in lines[3:]]\n    apple_trees_inside = list(filter(is_inside, apple_trees))\n    \n    area = abs((v1 * (v2 - v3) + v2 * (v3 - v1) + v3 * (v1 - v2)) / 2)\n    return f'{area:.1f}\\n{len(apple_trees_inside)}'",
        "test": "assert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\\n\" "
    },
    {
        "number": 4848,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3 or n > 10**5 or not is_squarefree(n):\n        return \"Invalid input\"\n    \n    m = 2\n    while m * n > 10**5 or not is_squarefree(m * n):\n        m += 1\n        \n    return str(m)\n\ndef",
        "test": "assert solution('30') == '7'"
    },
    {
        "number": 4849,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    blimps = stdin.split('\\n')\n    cia_blimps = []\n\n    for i in range(len(blimps)):\n        if 'FBI' in blimps[i]:\n            cia_blimps.append(i + 1)\n\n    if not cia_blimps:\n        return \"HE GOT AWAY!\"\n    else:\n        return ' '.join(map(str, cia_blimps))",
        "test": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\""
    },
    {
        "number": 4850,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    triangles = [tuple(map(float, line.split())) for line in stdin.splitlines()[1:]]\n\n    def triangle_area(triangle):\n        a, b, c = triangle\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    areas = [triangle_area(triangle) for triangle in triangles]\n    base = max(areas) ** 0.5\n\n    return f\"{base:.4f}\"\n\ninput_data = \"\"\"2\n3 3 3\n4 4 5\"\"\"\nprint(solution(input_data)) # Output: 8.0\n\ninput_data = \"\"\"2\n3 3 3\n4 5 4\"\"\"\nprint(solution(input_data)) # Output: 6.8435",
        "test": "assert solution(\"2\\n3 3 3\\n4 5 4\") == \"6.843530573929037\" "
    },
    {
        "number": 4851,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    current_number = n\n    while True:\n        digits_sum = sum(int(digit) for digit in str(current_number))\n        if current_number % digits_sum == 0:\n            return str(current_number)\n        current_number += 1",
        "test": "assert solution(\"25\") == \"27\""
    },
    {
        "number": 4852,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import product\n\n    def evaluate(expression: str) -> int:\n        stack = []\n        for char in expression:\n            if char.isdigit():\n                stack.append(int(char))\n            else:\n                b = stack.pop()\n                a = stack.pop()\n                if char == '+':\n                    stack.append(a + b)\n                else:\n                    stack.append(str(a) + str(b))\n        return stack[0]\n\n    def generate_expressions(s: str) -> set[str]:\n        plus_indices = [i for i, c in enumerate(s) if c == '+']\n        for plus_index in plus_indices:\n            s = s[:plus_index] + '+' + s[plus_index + 1:]\n        return set(s.replace('+', '') for s in plus_indices)\n\n    expressions = generate_expressions(stdin)\n    results = set()\n    for expression in expressions:\n        results.add(evaluate(expression))\n\n    return str(len(results))",
        "test": "assert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\""
    },
    {
        "number": 4853,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *coefficients = map(int, stdin.split())\n    coefficients.reverse()\n    C = [0] * (n + 1)\n    C[0] = coefficients[0]\n    for i in range(1, n + 1):\n        C[i] = coefficients[i - 1] - coefficients[i]\n    \n    return ' '.join(map(str, C))\n\ndef",
        "test": "assert solution(\"2 2 -4 5\") == \"5 -2 4\" "
    },
    {
        "number": 4854,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    message = list(map(int, input().split()))\n    \n    freq = [0] * (c + 1)\n    \n    for i in range(n):\n        freq[message[i]] += 1\n    \n    freq_sorted = sorted(freq, reverse=True)\n    \n    for i in range(1, c + 1):\n        if freq_sorted[i - 1] == 0:\n            continue\n        for j in range(i):\n            if freq_sorted[j] > 0:\n                freq_sorted[j] -= 1\n                print(i, end=' ')\n                break\n    \n    return \"\"",
        "test": "assert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\""
    },
    {
        "number": 4855,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, I = map(int, stdin.split())\n    total_citations = A * I\n    bribed_scientists = total_citations - (A - 1)\n    return str(bribed_scientists)\n\ninput_data = \"38 24\"\nprint(solution(input_data)) ",
        "test": "assert solution(\"1 100\") == \"100\" "
    },
    {
        "number": 4856,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    a, b = int(nums[0]), int(nums[1])\n    a_reversed = str(a)[::-1]\n    b_reversed = str(b)[::-1]\n    larger_num = max(a_reversed, b_reversed)\n    return larger_num",
        "test": "assert solution(\"221 231\") == \"132\" "
    },
    {
        "number": 4857,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    l, w = map(int, stdin.split())\n    weighted_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    possible_strings = []\n    for letter in weighted_dict:\n        current_weight = weighted_dict[letter]\n        if current_weight <= w:\n            remaining_weight = w - current_weight\n            remaining_length = l - 1\n            possible_strings.extend(recursive_weight_words(remaining_weight, remaining_length, weighted_dict, possible_strings, letter))\n    if possible_strings:\n        return random.choice(possible_strings)\n    else:\n        return 'impossible'\n\ndef",
        "test": "assert solution(\"7 96\") == \"contest\""
    },
    {
        "number": 4858,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def read_frame(stdin: str, M: int, N: int) -> list:\n        frame = []\n        for i in range(M):\n            line = stdin.readline().strip()\n            assert len(line) == N\n            frame.append(line)\n        stdin.readline()  # skip empty line\n        for i in range(M):\n            line = stdin.readline().strip()\n            assert len(line) == N\n            assert line != frame[i]\n        return frame\n\n    def get_falcon_position(frame: list) -> tuple:\n        def find_falcon_range(line: str) -> tuple:\n            start = 0\n            end = len(line) - 1\n            while line[start] != 'X':\n                start += 1\n            while line[end] != 'X':\n                end -= 1\n            return start, end\n\n        falcon_range = find_falcon_range(frame[0])\n        for i in range(1, len(frame)):\n            if not find_falcon_range(frame[i]) == falcon_range:\n                raise ValueError(\"Silhouette image is not connected\")\n        return falcon_range\n\n    def extrapolate_frame(frame: list, falcon_range: tuple) -> list:\n        M, N = len(frame), len(frame[0])\n        falcon_position = (falcon_range[0] + falcon_range[1]) // 2\n        new_frame = ['' for _ in range(M)]\n        for i in range(M):\n            for j in range(N):\n                if frame[i][j] == 'X':\n                    if i == 0:\n                        new_frame[i] += 'X'\n                    else:\n                        if frame[i - 1][j] == 'X':\n                            new_frame[i] += 'X'\n                        elif j < falcon_position:\n                            new_frame[i] += 'X'\n                        else:\n                            new_frame[i] += '.'\n                else:\n                    new_frame[i] += '.'\n        return new_frame\n\n    stdin = io.StringIO(stdin)\n    M1, N1, C1 = map(int, stdin.readline().strip().split())\n    frame1 = read_frame(stdin, M1, N1)\n    M2, N2, C2 = map(int, stdin.readline().strip().split())\n    frame2 = read_frame(stdin, M2, N2)\n    if M1 != M2 or N1 != N2:\n        raise ValueError(\"Frames must have the same size\")\n    if C1 != C2:\n        raise ValueError(\"Frames must have the same silhouette character\")\n\n    falcon_range1 = get_falcon_position(frame1)\n    falcon_range2 = get_falcon_position(frame2)\n    shift = (falcon_range2[0] - falcon_range1[0], falcon_range2[1] - falcon_range1[1])\n\n    new_frame = extrapolate_frame(frame2, (falcon_range2[0] + shift[0], falcon_range2[1] + shift[1]))\n    for line in new_frame:\n        print(line)\n    print()",
        "test": "assert solution('3 12 \\'A\\'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABA\\nBBABABABABAB\\nBABABABABABA') == 'BBABABABABAC\\nBBBABABABABA\\nBBABABABABAB\\n' "
    },
    {
        "number": 4859,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    b, d, c, l = map(int, stdin.split())\n    # Check if the total number of legs is divisible by 2, 3, or 4\n    if l % 2 != 0 or l % 3 != 0 or l % 4 != 0:\n        return \"impossible\\n\"\n\n    # Check if the numbers of legs for each type of animal are divisible by 2, 3, or 4\n    if b % 2 != 0 or d % 2 != 0 or c % 2 != 0:\n        return \"impossible\\n\"\n    if b % 3 != 0 or d % 3 != 0 or c % 3 != 0:\n        return \"impossible\\n\"\n    if b % 4 != 0 or d % 4 != 0 or c % 4 != 0:\n        return \"impossible\\n\"\n\n    # Calculate the possible number of animals for each type\n    b_animals = l // 2\n    d_animals = l // 3\n    c_animals = l // 4\n\n    # Check if the total number of legs is the sum of the legs for each animal type\n    if b_animals * 2 + d_animals * 3 + c_animals * 4 != l:\n        return \"impossible\\n\"\n\n    # Check if the possible number of animals for each type is within the given constraints\n    if b_animals > 100 or d_animals > 100 or c_animals > 100:\n        return \"impossible\\n\"\n\n    # Check if the total number of legs is the sum of the legs for each animal type\n    if b_animals * 2 + d_animals * 3 + c_animals * 4 != l:\n        return \"impossible\\n\"\n\n    # Print all possible solutions\n    answers = []\n    for b in range(b_animals + 1):\n        for d in range(d_animals + 1):\n            for c in range(c_animals + 1):\n                if b * 2 + d * 3 + c * 4 == l:\n                    answers.append((b, d, c))\n\n    # Sort the answers in lexicographical order\n    sorted_answers = sorted(answers)\n\n    # Print the answers\n    for answer in sorted_answers:\n        print(\" \".join(map(str, answer))) ",
        "test": "assert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n\""
    },
    {
        "number": 4860,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(line.strip()) for line in stdin.split(\"\\n\")[1:]]\n    missing_numbers = []\n\n    for i in range(1, numbers[-1] + 1):\n        if i not in numbers:\n            missing_numbers.append(i)\n\n    if not missing_numbers:\n        return \"good job\"\n    else:\n        return \"\\n\".join(str(num) for num in missing_numbers)",
        "test": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"1\\n3\\n6\\n12\""
    },
    {
        "number": 4861,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s, v = map(float, stdin.split())\n    c = 1.57\n    t = n * (math.log2(n)**c * math.sqrt(2)) / (p * 10**9)\n    return f\"{t:.6f} {c}\"",
        "test": "assert solution(\"4 2.9 1000000 600\") == \"147.4166666666666 2.243873495004\""
    },
    {
        "number": 4862,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0 or N == 1:\n        return str(0)\n    else:\n        return str((N*(N-1))//2)",
        "test": "assert solution('2') == '2\\n'"
    },
    {
        "number": 4863,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    answers = stdin.split('\\n')[1:]\n    score = 0\n    for i in range(n):\n        if answers[i] == 'A':\n            score += 1\n    return str(score)",
        "test": "assert solution(\"10\\nA\\nA\\nA\\nA\\nB\\nA\\nC\\nA\\nD\\nA\") == \"4\" "
    },
    {
        "number": 4864,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R, C, Z_R, Z_C = map(int, stdin.split()[:4])\n    input_matrix = [list(line.strip()) for line in stdin.splitlines()[1:]]\n\n    enlarged_matrix = []\n    for row in input_matrix:\n        enlarged_row = []\n        for char in row:\n            enlarged_char = [char] * (Z_C * C)\n            enlarged_row.extend(enlarged_char)\n        enlarged_matrix.append(enlarged_row)\n\n    for i in range(Z_R - 1):\n        enlarged_matrix.extend(enlarged_matrix[:R])\n\n    enlarged_matrix = [enlarged_matrix[i:i + C] for i in range(0, len(enlarged_matrix), C)]\n\n    return '\\n'.join([''.join(row) for row in enlarged_matrix])\n\ninput_data = '''3 3 1 2\n.x.\nx.x\n.x.'''\noutput_data = solution(input_data)\nprint(output_data) ",
        "test": "assert solution('2 5 2 3\\nabc.\\n.def') == 'ab..c.\\n..d..e\\n..f..c.\\n'"
    },
    {
        "number": 4865,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    lines = stdin.split(\"\\n\")\n    for i in range(1, len(lines)):\n        line = lines[i]\n        direction, minutes, hour, minute = line.split()\n        if direction == \"F\":\n            new_minute = int(minute) + int(minutes)\n            new_hour = int(hour)\n            if new_minute >= 60:\n                new_minute -= 60\n                new_hour += 1\n            if new_hour >= 24:\n                new_hour -= 24\n        else:\n            new_minute = int(minute) - int(minutes)\n            new_hour = int(hour)\n            if new_minute < 0:\n                new_minute += 60\n                new_hour -= 1\n            if new_hour < 0:\n                new_hour += 24\n        result += str(new_hour) + \" \" + str(new_minute) + \"\\n\"\n    return result",
        "test": "assert solution('1\\nF 60 13 20') == '14 20\\n'"
    },
    {
        "number": 4866,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    month, day = stdin.split()\n    day = int(day)\n    \n    if (month == \"OCT\" and day == 31) or (month == \"DEC\" and day == 25):\n        return \"yup\"\n    else:\n        return \"nope\"",
        "test": "assert solution(\"OCT 31\") == \"yup\""
    },
    {
        "number": 4867,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    M, N, U, L, R, D = map(int, stdin.split()[:6])\n    puzzle = stdin.split(sep='\\n')[1:]\n    \n    frame = []\n    for i in range(U):\n        frame.append('.' * (L + M + R))\n        \n    for i in range(M):\n        row = []\n        if i % 2 == 0:\n            row.append('#')\n        for j in range(L):\n            row.append('.')\n        row.append('#')\n        row.extend(list(puzzle[i]))\n        row.append('#')\n        for j in range(R):\n            row.append('.')\n        row.append('#')\n        frame.append(''.join(row))\n        \n    for i in range(U):\n        frame.append('.' * (L + M + R))\n    \n    return '\\n'.join(frame)\n\ndef",
        "test": "assert solution(\"5 5\\n1 1 3 3\\nabcd\\nefgh\\nijkl\\nmnop\\nqrst\") == \"#.abcd.#\\n.#.efgh.#\\n#.ijkl#.\\n.#mnop.#\\n#.qrst#.\" "
    },
    {
        "number": 4868,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize the chess board\n    board = [\n        [\".\" for _ in range(8)] for _ in range(8)\n    ]\n\n    # Initialize the piece positions\n    white_pieces = {}\n    black_pieces = {}\n\n    # Parse the input\n    for row in stdin.split(\"\\n\"):\n        color, pieces = row.split(\":\")\n        if color == \"White\":\n            for piece in pieces.split(\",\"):\n                if piece.endswith(\"1\"):\n                    board[ord(piece[1]) - ord('a')][ord(piece[0]) - ord('1')] = piece[0].upper()\n                    white_pieces[piece[0].upper()] = (ord(piece[1]) - ord('a'), ord(piece[0]) - ord('1'))\n                else:\n                    board[ord(piece[1]) - ord('a')][ord(piece[0]) - ord('1')] = piece[0].lower()\n        elif color == \"Black\":\n            for piece in pieces.split(\",\"):\n                if piece.endswith(\"8\"):\n                    board[ord(piece[1]) - ord('a')][ord(piece[0]) - ord('1')] = piece[0].upper()\n                    black_pieces[piece[0].upper()] = (ord(piece[1]) - ord('a'), ord(piece[0]) - ord('1'))\n                else:\n                    board[ord(piece[1]) - ord('a')][ord(piece[0]) - ord('1')] = piece[0].lower()\n\n    # Convert the board to output format\n    output = \"\"\n    for row in range(8):\n        for col in range(8):\n            if (row, col) in white_pieces:\n                output += board[row][col].upper()\n            elif (row, col) in black_pieces:\n                output += board[row][col].lower()\n            else:\n                output += \".\"\n            if col < 7:\n                output += \":\"\n        output += \"\\n\"\n\n    return output",
        "test": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\""
    },
    {
        "number": 4869,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, N = [float(x) for x in stdin.split()]\n    if A > N:\n        return \"Need more materials!\"\n    else:\n        return \"Diablo is happy!\"",
        "test": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\""
    },
    {
        "number": 4870,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    f, s, g, u, d = map(int, stdin.split())\n    s -= 1\n    g -= 1\n    if s == g:\n        return \"0\"\n    if s > g:\n        return \"use the stairs\"\n    if u >= f or d >= f:\n        return \"use the stairs\"\n    if s + u * (f - s) < g:\n        return \"use the stairs\"\n    if g - s > d * (f - g):\n        return \"use the stairs\"\n    up = min(u, (g - s) // d)\n    down = (g - s) % d\n    return str(up + down + 2 * (f - g))",
        "test": "assert solution(\"5 1 5 1 1\") == \"use the stairs\""
    },
    {
        "number": 4871,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    scores = [int(line) for line in stdin.splitlines()[1:]]\n\n    # Calculate current group score\n    current_group_score = 0\n    for i in range(n):\n        current_group_score += scores[i] * (4 / 5) ** i\n    current_group_score /= 5\n\n    # Calculate average new group score if one student leaves\n    new_group_scores = []\n    for i in range(n):\n        new_group_score = 0\n        for j in range(n - 1):\n            if j < i:\n                new_group_score += scores[j] * (4 / 5) ** j\n            else:\n                new_group_score += scores[j + 1] * (4 / 5) ** j\n        new_group_score /= 5\n        new_group_scores.append(new_group_score)\n\n    avg_new_group_score = sum(new_group_scores) / n\n\n    return f\"{current_group_score:.1f}\\n{avg_new_group_score:.6f}\"",
        "test": "assert solution(\"5\\n5000\\n4000\\n3000\\n2000\\n1000\\n\") == \"1000.0\\n333.3333333333333\\n\""
    },
    {
        "number": 4872,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    dirty_pushes = list(map(int, stdin.split()))\n    dirty_pushes.sort()\n    n = dirty_pushes[0]\n    days = dirty_pushes[1:]\n    \n    cleanup_phases = 0\n    dirtiness = 0\n    for day in days:\n        dirtiness += day\n        if dirtiness >= 20:\n            cleanup_phases += 1\n            dirtiness -= 20\n    \n    return str(cleanup_phases)",
        "test": "assert solution(\"5\\n1 45 65 84 346\") == \"4\""
    },
    {
        "number": 4873,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    W, H = map(int, stdin.splitlines()[0].split())\n    grid = [list(line.strip()) for line in stdin.splitlines()[1:]]\n\n    def neighbors(x, y):\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < W and 0 <= ny < H and grid[ny][nx] != '#':\n                yield nx, ny\n\n    def dfs(x, y, visited):\n        if (x, y) in visited:\n            return 0\n        visited.add((x, y))\n        if grid[y][x] == 'G':\n            return 1\n        if grid[y][x] == 'T':\n            return 0\n        return sum(dfs(nx, ny, visited) for nx, ny in neighbors(x, y))\n\n    start_x, start_y = next((x, y) for y, row in enumerate(grid) for x, cell in enumerate(row) if cell == 'P')\n    return str(dfs(start_x, start_y, set()))",
        "test": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\""
    },
    {
        "number": 4874,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.splitlines()[0].split())\n    grid = [line.strip() for line in stdin.splitlines()[1:N+1]]\n    \n    count = 0\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == '$' and (j == M-1 or grid[i][j+1] == '_'):\n                count += 1\n    \n    return str(count)",
        "test": "assert solution(\"10 10\\n_______$______\\n_______$______\\n_______$______\\n_______$______\\n_______$______\\n_______$______\\n_______$______\\n_______$______\\n_______$______\\n_______$______\\n_______$______\") == \"0\""
    },
    {
        "number": 4875,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pig_latin = \"\"\n    words = stdin.split()\n    \n    for word in words:\n        if word[0].lower() in \"aeiouy\":\n            pig_latin += word + \"yay \"\n        else:\n            vowels = \"aeiouy\"\n            while word[0].lower() not in vowels:\n                word = word[1:] + word[0]\n            pig_latin += word + \"ay \"\n            \n    return pig_latin.strip()",
        "test": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\""
    },
    {
        "number": 4876,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    restaurants = []\n\n    for i in range(1, n + 1):\n        k = int(lines[i * 2 - 1])\n        menu = lines[i * 2:i * 2 + k]\n        if 'pea soup' in menu and 'pancakes' in menu:\n            restaurants.append(menu[0])\n\n    if restaurants:\n        return restaurants[0]\n    else:\n        return 'Anywhere is fine I guess'\n\ninput_str = \"\"\"\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\"\n\nprint(solution(input_str)) ",
        "test": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancake\\npea soup\") == \"Anywhere is fine I guess\""
    },
    {
        "number": 4877,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    times = 0\n    distance = 0\n    while distance < h:\n        distance += a\n        distance -= b\n        times += 1\n    return str(times)",
        "test": "assert solution(\"5 0 15\") == \"3\""
    },
    {
        "number": 4878,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R1, S = map(int, stdin.split())\n    R2 = 2 * S - R1\n    return str(R2)",
        "test": "assert solution(\"11 15\") == \"19\""
    },
    {
        "number": 4879,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    if (a == \"South\" and b == \"West\") or (a == \"West\" and b == \"South\"):\n        if c == \"East\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif (a == \"South\" and b == \"East\") or (a == \"East\" and b == \"South\"):\n        if c == \"West\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif (a == \"West\" and b == \"East\") or (a == \"East\" and b == \"West\"):\n        if c == \"North\" or c == \"South\":\n            return \"No\"\n        else:\n            return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"North East South\") == \"No\""
    },
    {
        "number": 4880,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    key_last_n = stdin.split()[1]\n    ciphertext = stdin.split()[2]\n\n    def autokey_cipher(key: str, plaintext: str) -> str:\n        result = \"\"\n        prev_key = 0\n        for i, char in enumerate(plaintext):\n            shift = ord(key[i % len(key)]) - ord('a')\n            cipher_char = chr(((ord(char) - ord('a') + shift - prev_key) % 26) + ord('a'))\n            result += cipher_char\n            prev_key = ord(cipher_char) - ord('a')\n        return result\n\n    plaintext_last_n = autokey_cipher(key_last_n, key_last_n)[:n]\n    return autokey_cipher(plaintext_last_n, ciphertext)",
        "test": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\""
    },
    {
        "number": 4881,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, N + 1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    if even_count == N or odd_count == N:\n        return \"Either\"\n    elif even_count > odd_count:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "test": "assert solution(\"1\") == \"Either\""
    },
    {
        "number": 4882,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    result = []\n\n    for i in range(1, N + 1):\n        cost = int(lines[i])\n        if cost == 0:\n            result.append(\"1\")\n        else:\n            result.append(str(len(str(cost))))\n\n    return \"\\n\".join(result)\n\nstdin = \"\"\"5\n314\n1\n5926\n5\n35897\"\"\"\n\nprint(solution(stdin)) # Output: 3\\n1\\n4\\n1\\n5 ",
        "test": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'"
    },
    {
        "number": 4883,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def check_match(translations, word1, word2):\n        if len(word1) != len(word2):\n            return False\n        for i in range(len(word1)):\n            char1, char2 = word1[i], word2[i]\n            if char1 == char2:\n                continue\n            found = False\n            for translation in translations:\n                if translation[0] == char1:\n                    found = True\n                    if char2 != translation[1]:\n                        return False\n                    break\n            if not found:\n                return False\n        return True\n\n    def read_input(input_data: str) -> tuple:\n        lines = input_data.split(\"\\n\")\n        translations_count, words_count = map(int, lines[0].split())\n        translations = [line.split() for line in lines[1:translations_count+1]]\n        words = [line.split() for line in lines[translations_count+1:]]\n        return translations, words\n\n    translations, words = read_input(stdin)\n    result = []\n    for word1, word2 in words:\n        result.append(\"yes\" if check_match(translations, word1, word2) else \"no\")\n    return \"\\n\".join(result)\n\ndef",
        "test": "assert solution(\"10 4\\na b\\nc d\\ne f\\ng h\\ni j\\nk l\\nm n\\no p\\nq r\\ns t\\nu v\\nw x\\ny z\\ncode\\nbreak\\nsecre\\nkey\\nzero\\n\") == \"no\\nno\\nno\\nno\\nno\""
    },
    {
        "number": 4884,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    num_contestants, num_huffle_puff_problems = map(int, stdin.split())\n    carrots_handed_out = num_huffle_puff_problems // 2\n    return str(carrots_handed_out)",
        "test": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\""
    },
    {
        "number": 4885,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    board = []\n\n    # parse the board\n    for i, row in enumerate(stdin):\n        if i == 0 or i == len(stdin) - 1:\n            continue\n        if i % 2 == 0:\n            board.append(row[1:-1])\n        else:\n            board.append(row)\n\n    white_pieces = []\n    black_pieces = []\n\n    # parse the pieces\n    for row_idx, row in enumerate(board):\n        for col_idx, piece in enumerate(row):\n            if piece in \"KQRBN\":\n                piece_type = piece\n                player = \"White\" if piece.isupper() else \"Black\"\n                if piece_type == \"K\":\n                    piece_description = \"Ke\" + chr(ord('a') + col_idx)\n                elif piece_type == \"Q\":\n                    piece_description = \"Qd\" + chr(ord('a') + col_idx)\n                elif piece_type == \"R\":\n                    if col_idx == 0:\n                        piece_description = \"Ra\" + chr(ord('1') + row_idx)\n                    else:\n                        piece_description = \"Rh\" + chr(ord('1') + row_idx)\n                elif piece_type == \"B\":\n                    if col_idx == 2:\n                        piece_description = \"Bc\" + chr(ord('1') + row_idx)\n                    elif col_idx == 5:\n                        piece_description = \"Bf\" + chr(ord('1') + row_idx)\n                elif piece_type == \"N\":\n                    if row_idx == 3:\n                        piece_description = \"Nb\" + chr(ord('1') + col_idx)\n            elif piece == \"P\":\n                player = \"White\" if row_idx == 6 else \"Black\"\n                piece_description = chr(ord('a') + col_idx) + str(row_idx + 1)\n            elif piece == \".\":\n                continue\n            elif piece == \":\":\n                continue\n            else:\n                raise ValueError(\"Invalid piece\")\n\n            if player == \"White\":\n                white_pieces.append(piece_description)\n            else:\n                black_pieces.append(piece_description)\n\n    return \"White: \" + \",\".join(white_pieces) + \"\\nBlack: \" + \",\".join(black_pieces) ",
        "test": "assert solution(\"+---+---+---+---+---+---+---+---+---+\""
    },
    {
        "number": 4886,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if K >= 1 and K <= N - 1:\n        return \"Your wish is granted!\"\n    else:\n        return \"You will become a flying monkey!\"",
        "test": "assert solution('8 3') == 'Your wish is granted!'"
    },
    {
        "number": 4887,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    area = int(stdin)\n    fence_length = area ** 0.5\n    return str(round(fence_length, 6))",
        "test": "assert solution(10000000000) == 10000000000"
    },
    {
        "number": 4888,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, T = map(int, lines[0].split())\n    tasks = list(map(int, lines[1].split()))\n    time_left = T\n    tasks_completed = 0\n\n    for task in tasks:\n        if time_left >= task:\n            time_left -= task\n            tasks_completed += 1\n        else:\n            break\n\n    return str(tasks_completed)",
        "test": "assert solution(\"6 180\\n45 30 55 20 80 20\") == \"4\" "
    },
    {
        "number": 4889,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    rods = list(map(int, stdin.split(\"\\n\")[1:]))\n    javelin_length = sum(rods) - (len(rods) - 1)\n    return str(javelin_length)\n\ninput_str = \"4\\n21\\n34\\n18\\n9\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\""
    },
    {
        "number": 4890,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def is_cold(c_1, c_2):\n        return c_2 - c_1 > d // 2\n\n    def is_possible(slots: list[int], n: int, m: int) -> bool:\n        count = 0\n        for slot in slots:\n            count += slot\n        return count >= m * d\n\n    def refill(n: int, m: int, s: int, d: int, slots: list[int]) -> str:\n        def fill_front(front: int, n: int, slots: list[int]) -> list[int]:\n            result = [0] * s\n            for i in range(front, s):\n                result[i] = min(n, d - slots[i])\n                n -= result[i]\n            return result\n\n        def fill_back(back: int, n: int, slots: list[int]) -> list[int]:\n            result = [0] * s\n            for i in range(back - 1, -1, -1):\n                result[i] = min(n, d - slots[i])\n                n -= result[i]\n            return result\n\n        front = 0\n        back = s - 1\n        result = [0] * s\n\n        while n > 0:\n            if front <= back:\n                result = fill_front(front, n, slots)\n                front += 1\n                if front > back:\n                    result = fill_back(back, n, slots)\n                    back -= 1\n            else:\n                result = fill_back(back, n, slots)\n                back -= 1\n                if front > back:\n                    result = fill_front(front, n, slots)\n                    front += 1\n\n        return result\n\n    n, m, s, d = [int(x) for x in stdin.split()]\n    c_s = [int(x) for x in input().split()]\n\n    if not is_possible(c_s, n, m):\n        return \"impossible\"\n\n    slots = [0] * s\n    for i in range(len(c_s)):\n        slots[i] = c_s[i]\n\n    refilled = refill(n, m, s, d, slots)\n    cold_slots = [i for i, bottles in enumerate(refilled) if is_cold(c_s[i], bottles)]\n\n    return \" \".join(map(str, cold_slots))",
        "test": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\""
    },
    {
        "number": 4891,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pieces_count = [int(x) for x in stdin.split()]\n    required_pieces_count = [1, 1, 2, 2, 2, 8]\n    diff = [required - actual for required, actual in zip(required_pieces_count, pieces_count)]\n    return ' '.join(map(str, diff))",
        "test": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\""
    },
    {
        "number": 4892,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    passwords = []\n    for i in range(1, N+1):\n        password, probability = lines[i].split()\n        probability = float(probability)\n        passwords.append((password, probability))\n    \n    total_prob = sum([p[1] for p in passwords])\n    max_prob = max([p[1] for p in passwords])\n    if max_prob == 1:\n        return \"0\"\n    \n    expected_attempts = 0\n    for i, (password, prob) in enumerate(passwords):\n        expected_attempts += i * prob\n    \n    return str(expected_attempts / total_prob)",
        "test": "assert solution(\"3\\npassword 0.1234\\n123456 0.5678\\nqwerty 0.3093\\n\") == \"1.8021\""
    },
    {
        "number": 4893,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_min_distance(n: int, p: int, distances: List[int]) -> int:\n        distances.sort()\n        min_distance = 0\n        for i in range(1, n + 1):\n            min_distance += p * (i + 1)\n            if min_distance > distances[i - 1]:\n                return min_distance - p * (i)\n        return min_distance\n\n    lines = stdin.split(\"\\n\")\n    n, p = map(int, lines[0].split())\n    distances = list(map(int, lines[1].split()))\n\n    return str(calculate_min_distance(n, p, distances))",
        "test": "assert solution(\"3 1\\n1 2 4\") == \"1\""
    },
    {
        "number": 4894,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    notes = stdin.strip().split()\n    n = int(notes[0])\n    notes = notes[1:]\n    \n    # Initialize the staff\n    staff = []\n    for i in range(6):\n        staff.append('-' * 50)\n    \n    # Update the staff with the notes\n    for note in notes:\n        pitch = note[0]\n        duration = 1\n        if len(note) > 1:\n            duration = int(note[1])\n        octave = 5\n        if pitch.isupper():\n            octave = 4\n        elif pitch in ['B', 'E', 'G']:\n            octave -= 1\n        elif pitch in ['F', 'C']:\n            octave -= 2\n        elif pitch == 'A':\n            octave -= 3\n        column = (ord(pitch) - ord('C')) * 2 + octave * 12\n        \n        # Update the staff with the note\n        for i in range(duration):\n            for j in range(5):\n                staff[j] = staff[j][0:column] + '*' + staff[j][column+1:]\n            column += 2\n    \n    # Print the staff and notes\n    result = ''\n    for i in range(6):\n        result += chr(65+i) + ': ' + staff[i] + '\\n'\n    \n    return result ",
        "test": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == '''G:                                                               "
    },
    {
        "number": 4895,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    sticks = [int(x) for x in lines[1].split()]\n    sticks.sort()\n\n    for i in range(n - 2):\n        if sticks[i] + sticks[i + 1] > sticks[i + 2]:\n            return \"possible\"\n\n    return \"impossible\"",
        "test": "assert solution(\"3\\n1 1 1\") == \"possible\""
    },
    {
        "number": 4896,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    bricks = [int(x) for x in stdin.split()[1:]]\n    towers = 1\n    base = bricks[0]\n\n    for i in range(1, n):\n        if bricks[i] > base:\n            towers += 1\n            base = bricks[i]\n\n    return str(towers)",
        "test": "assert solution(\"5\\n4 3 2 1 5\") == \"2\""
    },
    {
        "number": 4897,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def find_best_team(runners: List[Tuple[str, float, float]]) -> Tuple[float, List[str]]:\n        def calculate_team_time(runner_times: List[float], leg: int) -> float:\n            total_time = 0\n            for time in runner_times:\n                total_time += time\n            return total_time\n\n        def select_runner_for_leg(runners: List[Tuple[str, float, float]], leg: int) -> Tuple[str, float]:\n            selected_runner = max(runners, key=lambda x: x[2])\n            runners.remove(selected_runner)\n            return selected_runner\n\n        runners_copy = runners.copy()\n        best_team_time = float('inf')\n        best_team = []\n\n        for leg in range(1, 5):\n            runner_times = []\n            for _ in range(4):\n                runner = select_runner_for_leg(runners_copy, leg)\n                runner_times.append(runner[1] if leg == 1 else runner[2])\n            team_time = calculate_team_time(runner_times, leg)\n            if team_time < best_team_time:\n                best_team_time = team_time\n                best_team = runner_times\n\n        return best_team_time, [runner[0] for runner in best_team]\n\n    runners = []\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        name, a, b = stdin.readline().strip().split()\n        runners.append((name, float(a), float(b)))\n\n    best_team_time, best_team_runners = find_best_team(runners)\n    return \"{:.2f}\\n{}\\n{}\\n{}\\n{}\".format(best_team_time, best_team_runners[0], best_team_runners[1], best_team_runners[2], best_team_runners[3])",
        "test": "assert solution(\"5\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nPOWELL 9.72 8.61\") == \"35.48\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE\""
    },
    {
        "number": 4898,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def get_min_room_count(minions: List[Tuple[int, int]]) -> int:\n        minions.sort(key=lambda x: x[1])\n        room_count = 1\n        last_room_temp = minions[0][1]\n        for i in range(1, len(minions)):\n            if minions[i][0] <= last_room_temp:\n                continue\n            room_count += 1\n            last_room_temp = minions[i][1]\n        return room_count\n\n    lines = stdin.splitlines()\n    num_minions = int(lines[0])\n    minions = [(int(lines[i].split()[0]), int(lines[i].split()[1])) for i in range(1, num_minions + 1)]\n\n    return str(get_min_room_count(minions))",
        "test": "assert solution(\"3\\n1 2\\n2 4\\n5 6\") == \"2\""
    },
    {
        "number": 4899,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.strip()\n    if len(input_string) > 1000:\n        return \"Invalid input. Length should be at most 1000.\"\n    \n    if len(input_string) < 3:\n        return \"Invalid input. Length should be at least 3.\"\n    \n    if not input_string.endswith(\"ey\"):\n        return \"Invalid input. The input should end with 'ey'.\"\n    \n    if not input_string.startswith(\"he\"):\n        return \"Invalid input. The input should start with 'he'.\"\n    \n    e_count = input_string.count(\"e\")\n    new_string = input_string[:2] + e_count * \"e\" + \"y\"\n    return new_string",
        "test": "assert solution(\"hey\") == \"heey\""
    },
    {
        "number": 4900,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    table = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    roads = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if table[i][j] != table[j][i]:\n                raise ValueError(\"Inconsistent distance table\")\n            roads.append((i+1, j+1))\n\n    return '\\n'.join(f\"{u} {v}\" for u, v in roads)",
        "test": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\\n') == '1 2\\n1 3\\n1 4\\n'"
    },
    {
        "number": 4901,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Divide the message in half\n    half_len = len(stdin) // 2\n    first_half = stdin[:half_len]\n    second_half = stdin[half_len:]\n\n    # Calculate the rotation value for each half\n    rotation_value_first_half = sum(ord(char) - ord('A') for char in first_half)\n    rotation_value_second_half = sum(ord(char) - ord('A') for char in second_half)\n\n    # Rotate each character in the first half by the rotation value\n    rotated_first_half = \"\"\n    for char in first_half:\n        new_char = chr(((ord(char) - ord('A') + rotation_value_first_half) % 26) + ord('A'))\n        rotated_first_half += new_char\n\n    # Rotate each character in the second half by the rotation value\n    rotated_second_half = \"\"\n    for char in second_half:\n        new_char = chr(((ord(char) - ord('A') + rotation_value_second_half) % 26) + ord('A'))\n        rotated_second_half += new_char\n\n    # Rotate each character in the first half by the corresponding character in the second half\n    decrypted_message = \"\"\n    for i in range(half_len):\n        new_char = chr(((ord(rotated_first_half[i]) - ord('A') + ord(rotated_second_half[i]) - ord('A')) % 26) + ord('A'))\n        decrypted_message += new_char\n\n    return decrypted_message",
        "test": "assert solution(\"EWPGAJRB\") == \"ABCD\""
    },
    {
        "number": 4902,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Remove all non-letter characters and convert the string to lowercase\n    input_string = \"\".join(c for c in stdin.lower() if c.isalpha())\n    \n    # Find all palindromes in the string\n    palindromes = [input_string[i:j] for i in range(len(input_string)) for j in range(i+1, len(input_string)+1) if input_string[i:j] == input_string[i:j][::-1]]\n    \n    # Find all anagrams of the palindromes\n    anagrams = []\n    for palindrome in palindromes:\n        for i in range(len(input_string)):\n            for j in range(i+1, len(input_string)+1):\n                substring = input_string[i:j]\n                if substring == palindrome:\n                    anagrams.append(substring)\n    \n    # Calculate the minimum number of characters to remove\n    min_chars_to_remove = len(input_string)\n    for anagram in anagrams:\n        chars_to_remove = len(input_string) - len(anagram)\n        if chars_to_remove < min_chars_to_remove:\n            min_chars_to_remove = chars_to_remove\n    \n    return min_chars_to_remove",
        "test": "assert solution(\"abc\") == 2"
    },
    {
        "number": 4903,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    jon_aah, doctor_aah = stdin.split(\"\\n\")\n    if jon_aah.count(\"a\") >= doctor_aah.count(\"a\"):\n        return \"go\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"aaah\\naaaaaah\") == \"no\""
    },
    {
        "number": 4904,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    alice_score = 0\n    barbara_score = 0\n    prev_score = 0\n\n    for i in range(0, len(stdin), 2):\n        player = stdin[i]\n        points = int(stdin[i+1])\n\n        if player == \"A\":\n            alice_score += points\n        else:\n            barbara_score += points\n\n        if alice_score >= 11 or barbara_score >= 11:\n            if (alice_score - barbara_score) >= 2:\n                return \"A\"\n            elif (barbara_score - alice_score) >= 2:\n                return \"B\"\n\n        if alice_score == barbara_score and alice_score == 10:\n            if alice_score - prev_score >= 2:\n                return \"A\"\n            elif barbara_score - prev_score >= 2:\n                return \"B\"\n            else:\n                prev_score = alice_score\n\n    return \"A\" if alice_score > barbara_score else \"B\"",
        "test": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\""
    },
    {
        "number": 4905,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, A, B, K, G, streets, times = parse_input(stdin)\n    visited = [False] * (N + 1)\n    queue = [(0, A)]\n    visited[A] = True\n\n    while queue:\n        time, current = queue.pop(0)\n        if current == B:\n            return str(time)\n\n        for neighbor, street_time in streets[current]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                queue.append((time + street_time, neighbor))\n\n    return \"Impossible\"\n\ndef",
        "test": "assert solution(\"6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\""
    },
    {
        "number": 4906,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    command, message = stdin.split()\n    if command == \"E\":\n        encoded = \"\"\n        i = 0\n        while i < len(message):\n            count = 1\n            while i + 1 < len(message) and message[i] == message[i + 1]:\n                count += 1\n                i += 1\n            encoded += str(count) + message[i]\n            i += 1\n        return encoded\n    else:\n        decoded = \"\"\n        i = 0\n        while i < len(message):\n            count = int(message[i])\n            decoded += message[i + 1] * count\n            i += 2\n        return decoded ",
        "test": "assert solution(\"D H3e2l3o1W1o3r4l2d1!2\") == \"HHHeellloWooorrrrlld!!\" "
    },
    {
        "number": 4907,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    # Alice starts the game and plays optimally\n    if n % 3 == 2:\n        return \"Alice\\n1\"\n\n    # Bob wins\n    return \"Bob\\n\"",
        "test": "assert solution(\"2\") == \"Alice\\n1\""
    },
    {
        "number": 4908,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b == c:\n        return f\"{a}+{b}={c}\"\n    elif a - b == c:\n        return f\"{a}-{b}={c}\"\n    elif a * b == c:\n        return f\"{a}*{b}={c}\"\n    elif a / b == c:\n        return f\"{a}/{b}={c}\"\n    else:\n        return \"No solution found\"",
        "test": "assert solution(\"5 3 8\") == \"5+3=8\""
    },
    {
        "number": 4909,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *direct_connections = map(int, stdin.split())\n    if n > 1:\n        for i in range(1, n):\n            if direct_connections[i] == 0:\n                return \"NO\"\n            for j in range(i):\n                if direct_connections[j] >= i - j:\n                    break\n            else:\n                return \"NO\"\n        return \"YES\"\n    else:\n        return \"YES\"",
        "test": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\""
    },
    {
        "number": 4910,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    categories = {}\n    for i in range(1, n + 1):\n        category = lines[i]\n        if category in categories:\n            categories[category] += 1\n        else:\n            categories[category] = 1\n\n    max_count = max(categories.values())\n    winners = sorted([category for category, count in categories.items() if count == max_count])\n    return \"\\n\".join(winners)\n\nstdin = \"\"\"10\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\"\"\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"5\\nmummy\\nmummy\\nwitch\\nmummy\\nwitch\") == \"mummy\\nwitch\""
    },
    {
        "number": 4911,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    attributes, songs, sorts = stdin.split('\\n')\n    attributes = attributes.split()\n    songs = songs.split('\\n')\n    sorts = list(map(lambda x: x.strip(), sorts.split('\\n')))\n\n    def sort_songs(songs, attribute):\n        songs.sort(key=lambda x: x.split()[attributes.index(attribute)])\n        return songs\n\n    for sort in sorts:\n        songs = sort_songs(songs, sort)\n        print(f\"{sort} {' '.join(attributes)}\")\n        for song in songs:\n            print(song)\n        print()\n\n\ninput_data = \"\"\"Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n\"\"\"\n\nsolution(input_data) ",
        "test": "assert solution("
    },
    {
        "number": 4912,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    h, w, n = map(int, stdin.split()[:3])\n    bricks = list(map(int, stdin.split()[3:]))\n    \n    for i in range(h):\n        total_length = sum(bricks)\n        if total_length <= w:\n            return \"YES\"\n        else:\n            for j in range(n):\n                if bricks[j] > w:\n                    return \"NO\"\n                else:\n                    total_length -= bricks[j]\n                    bricks[j] = 0\n            return \"YES\"",
        "test": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\\n\") == \"YES\" "
    },
    {
        "number": 4913,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.split('\\n')[0])\n    participants = stdin.split('\\n')[1:]\n\n    # initialize counts and efficiencies\n    counts_vacc = {'A': 0, 'B': 0, 'C': 0}\n    counts_control = {'A': 0, 'B': 0, 'C': 0}\n    efficiencies = {}\n\n    # count infections and efficiencies for each strain\n    for p in participants:\n        if p[0] == 'Y':\n            counts_vacc['A'] += p[1] == 'Y'\n            counts_vacc['B'] += p[2] == 'Y'\n            counts_vacc['C'] += p[3] == 'Y'\n        else:\n            counts_control['A'] += p[1] == 'Y'\n            counts_control['B'] += p[2] == 'Y'\n            counts_control['C'] += p[3] == 'Y'\n\n    for strain in counts_vacc:\n        if counts_vacc[strain] == 0:\n            efficiencies[strain] = 'Not Effective'\n        else:\n            efficiencies[strain] = (1 - counts_vacc[strain] / counts_control[strain]) * 100\n\n    # print efficiencies\n    return '\\n'.join([str(efficiencies[strain]) for strain in efficiencies])",
        "test": "assert solution('5\\nNYYY\\nNNYY\\nYYYY\\nNNYY\\nYYYY') == '50.000000\\nNot Effective\\nNot Effective\\n100.000000'"
    },
    {
        "number": 4914,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    correct_answers = list(stdin.split('\\n')[1])\n\n    adrian_seq = ['A', 'B', 'C'] * (n // 3 + 1)\n    bruno_seq = ['B', 'A', 'B', 'C'] * (n // 4 + 1)\n    goran_seq = ['C', 'C', 'A', 'A', 'B', 'B', 'C', 'C', 'A', 'A', 'B', 'B']\n\n    seqs = [adrian_seq, bruno_seq, goran_seq]\n\n    correct_count = []\n    for seq in seqs:\n        count = 0\n        for i in range(n):\n            if seq[i] == correct_answers[i]:\n                count += 1\n        correct_count.append(count)\n\n    max_correct = max(correct_count)\n    result = []\n    for i, count in enumerate(correct_count):\n        if count == max_correct:\n            result.append(list(seqs[i])[0])\n\n    result = sorted(result)\n    return str(max_correct) + '\\n' + ', '.join(result)",
        "test": "assert solution(\"10\\nABCABCDABCDA\") == \"4\\nAdrian\\nBruno\""
    },
    {
        "number": 4915,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    problems_solved = set()\n    time_score = 0\n    last_submission_time = 0\n    wrong_submissions = {}\n\n    for line in stdin.split(\"\\n\")[:-1]:\n        submission_time, problem, result = line.split()\n        submission_time = int(submission_time)\n\n        if submission_time > last_submission_time:\n            last_submission_time = submission_time\n\n            if result == \"right\":\n                problems_solved.add(problem)\n                time_score += submission_time\n            else:\n                wrong_submissions[problem] = wrong_submissions.get(problem, 0) + 1\n\n        elif problem not in problems_solved:\n            if result == \"right\":\n                problems_solved.add(problem)\n                time_score += submission_time - last_submission_time\n                last_submission_time = submission_time\n            else:\n                wrong_submissions[problem] = wrong_submissions.get(problem, 0) + 1\n\n    for problem, count in wrong_submissions.items():\n        if count == 1:\n            time_score += 20\n\n    return str(len(problems_solved)) + \" \" + str(time_score)",
        "test": "assert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n-1\") == \"4 502\\n\" "
    },
    {
        "number": 4916,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    art_installation = []\n    for i in range(n):\n        art_installation.append(list(map(int, stdin.split('\\n')[i].split())))\n\n    def manhattan_distance(x1, y1, x2, y2):\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    def find_shortest_path(art_installation, n, k):\n        shortest_path = [float('inf')] * k\n        shortest_path[0] = 0\n\n        for i in range(1, k):\n            for j in range(n):\n                for l in range(n):\n                    if art_installation[j][l] == i:\n                        for m in range(1, k):\n                            if art_installation[j][l] == m and shortest_path[m] != float('inf'):\n                                distance = manhattan_distance(j, l, art_installation[j][l] - 1, art_installation[j][l] - 1)\n                                shortest_path[i] = min(shortest_path[i], shortest_path[m] + distance)\n\n        return shortest_path\n\n    shortest_path = find_shortest_path(art_installation, n, k)\n\n    if shortest_path[-1] == float('inf'):\n        return -1\n    else:\n        return shortest_path[-1]",
        "test": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\") == \"5\""
    },
    {
        "number": 4917,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.splitlines()\n    num_boilings = int(lines[0])\n    intervals = []\n    for i in range(1, num_boilings + 1):\n        start, end = map(int, lines[i].split())\n        intervals.append((start, end))\n\n    # Check if all intervals are the same length\n    interval_lengths = set(end - start for start, end in intervals)\n    if len(interval_lengths) > 1:\n        return \"edward is right\"\n\n    # Check if all intervals are the same distance from the end of boiling\n    boiling_points = set(start - interval_lengths.pop() for start, end in intervals)\n    if len(boiling_points) > 1:\n        return \"edward is right\"\n\n    # All intervals are the same length and start at the same point\n    return \"gunilla has a point\"",
        "test": "assert solution(\"2\\n1 3\\n1 7\") == \"edward is right\""
    },
    {
        "number": 4918,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, q = list(map(int, stdin.split()[:2]))\n    guests = [set() for _ in range(n+1)]\n    queries = stdin.split('\\n')[1:]\n    \n    for query in queries:\n        if query[0] == 't':\n            a, b = list(map(int, query.split()[1:]))\n            guests[a].add(b)\n            guests[b].add(a)\n        elif query[0] == 's':\n            guest = int(query.split()[1])\n            result = 1\n            while guest in guests[guest]:\n                guest = guests[guest].pop()\n                result += 1\n            print(result)\n\ninput_str = \"\"\"10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10\"\"\"\nsolution(input_str) ",
        "test": "assert solution(\"10 11\\nt 1 10\\nt 1 2\\nt 1 3\\ns 1\\ns 2\\ns 3\\ns 4\\nt 5 6\\ns 5\\ns 6\\ns 10\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\" "
    },
    {
        "number": 4919,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    trips = {}\n    queries = []\n    lines = stdin.split('\\n')\n    num_trips = int(lines[0])\n    lines = lines[1:]\n    \n    # Read in all the trips\n    for i in range(0, num_trips):\n        country, year = lines[i].split(' ')\n        year = int(year)\n        if country not in trips:\n            trips[country] = []\n        trips[country].append(year)\n    \n    # Read in all the queries\n    num_queries = int(lines[num_trips])\n    lines = lines[num_trips+1:]\n    for i in range(0, num_queries):\n        country, k = lines[i].split(' ')\n        k = int(k)\n        queries.append((country, k))\n    \n    # Process the queries\n    for query in queries:\n        country, k = query\n        year = trips[country][k-1]\n        print(year)",
        "test": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1982\\n2016\""
    },
    {
        "number": 4920,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    types = set(stdin)\n    dp = [1] * n\n    \n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1, n):\n            if stdin[i] != stdin[j]:\n                dp[j] += dp[i]\n                \n    result = 0\n    for i in range(n - 1):\n        for j in range(i + 2, n):\n            if stdin[i] != stdin[j]:\n                result += dp[i] * dp[j]\n                \n    return result % (10**9 + 7)\n\ndef",
        "test": "assert solution(\"abcdcde\") == \"3\""
    },
    {
        "number": 4921,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    seen_words = set()\n    result = []\n    \n    for word in words:\n        if word.lower() not in seen_words:\n            seen_words.add(word.lower())\n            result.append(word)\n        else:\n            result.append(\".\")\n            \n    return \" \".join(result)",
        "test": "assert solution(\"Engineering will save the world from inefficiency\") == \"Engineering will save the world from inefficiency\""
    },
    {
        "number": 4922,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split()[:2])\n    clauses = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:-1]]\n    \n    if m < 8:\n        return \"unsatisfactory\"\n    \n    return \"satisfactory\"",
        "test": "assert solution(\"8 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n-2 -1 3\\n-2 -1 -3\\n-2 1 -3\") == \"satisfiable\" "
    },
    {
        "number": 4923,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    max_unique = None\n    for i in range(n):\n        unique = True\n        for j in range(n):\n            if i != j and a[i] == a[j]:\n                unique = False\n                break\n        if unique:\n            if max_unique is None or a[i] > a[max_unique]:\n                max_unique = i\n\n    return str(max_unique) if max_unique is not None else \"none\"",
        "test": "assert solution(\"3\\n1 2 3\") == \"none\""
    },
    {
        "number": 4924,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    current_time, explosion_time = stdin.split(\"\\n\")\n    current_hour, current_minute, current_second = map(int, current_time.split(\":\"))\n    target_hour, target_minute, target_second = map(int, explosion_time.split(\":\"))\n\n    total_seconds_current = current_hour * 3600 + current_minute * 60 + current_second\n    total_seconds_target = target_hour * 3600 + target_minute * 60 + target_second\n\n    if total_seconds_target < total_seconds_current:\n        total_seconds_target += 24 * 3600\n\n    time_delta = total_seconds_target - total_seconds_current\n\n    hours = time_delta // 3600\n    time_delta %= 3600\n    minutes = time_delta // 60\n    seconds = time_delta % 60\n\n    return f\"{hours:02d}:{minutes:02d}:{seconds:02d}\"\n\ninput_data = \"20:00:00\\n04:00:00\"\nprint(solution(input_data)) ",
        "test": "assert solution(\"12:30:45\\n12:30:46\") == \"00:00:01\""
    },
    {
        "number": 4925,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    l, n = map(int, stdin.split())\n    k = 1\n    while True:\n        if n <= k * l:\n            return str(k)\n        k += 1",
        "test": "assert solution(\"100 10\") == \"1\""
    },
    {
        "number": 4926,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    e = 1\n    factorial = 1\n    for i in range(n + 1):\n        factorial *= i\n        e += 1 / factorial\n    return f\"{e:.12f}\"  # Format the output to 12 decimal places",
        "test": "assert solution('1') == '2.718281828459045235360287471352662497757'"
    },
    {
        "number": 4927,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = map(int, stdin.split())\n    if N % 2 == 0:\n        if P + Q <= N:\n            return \"paul\"\n        else:\n            return \"opponent\"\n    else:\n        if P <= N:\n            return \"paul\"\n        else:\n            return \"opponent\"",
        "test": "assert solution(\"10 10 10\") == \"opponent\""
    },
    {
        "number": 4928,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    max_pieces = 0\n\n    for i in range(n+1):\n        for j in range(n+1):\n            pieces = 2 * i * j\n            max_pieces = max(max_pieces, pieces)\n\n    return str(max_pieces)",
        "test": "assert solution(\"1\") == \"2\" "
    },
    {
        "number": 4929,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def reverse_case(password: str) -> str:\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in password])\n\n    def can_form(password: str, stored_password: str) -> bool:\n        return password in [stored_password, stored_password[1:], stored_password[:-1]]\n\n    stored_password, attempted_password = stdin.strip().split('\\n')\n\n    if attempted_password == stored_password or can_form(attempted_password, stored_password):\n        return 'Yes'\n    elif attempted_password.lower() == stored_password.lower():\n        return 'Yes'\n    elif reverse_case(attempted_password) == stored_password:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(\"123\\n123a\") == \"No\""
    },
    {
        "number": 4930,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    decoded_words = []\n    for word in words:\n        decoded_word = \"\"\n        for i in range(len(word)):\n            if word[i] in \"aeiou\":\n                decoded_word += word[i] + \"p\" + word[i]\n            else:\n                decoded_word += word[i]\n        decoded_words.append(decoded_word)\n    return \" \".join(decoded_words)",
        "test": "assert solution(\"papapapipika\") == \"paprika\""
    },
    {
        "number": 4931,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n\n    if Y % 1 == 0:\n        return \"ALL GOOD\"\n    else:\n        temp = X / (Y - 1)\n        if abs(temp) <= 10**6:\n            return str(temp)\n        else:\n            return \"IMPOSSIBLE\"",
        "test": "assert solution(\"-100 100\") == \"ALL GOOD\""
    },
    {
        "number": 4932,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.splitlines()[0].split())\n    P, M, G = map(int, stdin.splitlines()[1].split())\n\n    dog1 = [True] * A + [False] * B\n    dog2 = [True] * C + [False] * D\n\n    P_result = dog1[P % len(dog1)] and dog2[P % len(dog2)]\n    M_result = dog1[M % len(dog1)] and dog2[M % len(dog2)]\n    G_result = dog1[G % len(dog1)] and dog2[G % len(dog2)]\n\n    if P_result and M_result and G_result:\n        return \"both\\none\\nnone\\n\"\n    elif P_result and M_result:\n        return \"both\\nnone\\nnone\\n\"\n    elif M_result and G_result:\n        return \"none\\none\\nnone\\n\"\n    elif P_result and G_result:\n        return \"none\\nnone\\none\\n\"\n    elif P_result:\n        return \"one\\nnone\\none\\n\"\n    elif M_result:\n        return \"none\\none\\nnone\\n\"\n    elif G_result:\n        return \"none\\nnone\\none\\n\"\n    else:\n        return \"none\\nnone\\nnone\\n\"\n\ndef",
        "test": "assert solution('2 3 4 5\\n1 2 3') == 'both\\nnone\\nnone'"
    },
    {
        "number": 4933,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if c - a == b - a:\n        return str(c + b - a)\n    elif c - b == a - b:\n        return str(c + 2 * b - a)\n    else:\n        return str(a + 2 * (c - a))",
        "test": "assert solution(\"1 2 3\") == \"4\""
    },
    {
        "number": 4934,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    h, v = map(int, stdin.split())\n    ladder_length = (h ** 2 - (h - 1) ** 2) / (2 * math.tan(math.radians(v)))\n    return str(math.ceil(ladder_length))",
        "test": "assert solution(\"1000 45\") == \"1000\""
    },
    {
        "number": 4935,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    def calculate_velocity(distance, angle, gravity):\n        return math.sqrt(2 * distance * math.cos(math.radians(angle))) / (math.sin(math.radians(angle)) + math.cos(math.radians(angle))) * gravity\n\n    lines = stdin.split('\\n')\n    n = int(lines[0].split()[0])\n    g = float(lines[0].split()[1])\n    distances_and_angles = [line.split() for line in lines[1:]]\n\n    velocities = []\n    for i in range(n):\n        distance = int(distances_and_angles[i][0])\n        angle = int(distances_and_angles[i][1])\n        velocity = calculate_velocity(distance, angle, g)\n        velocities.append(velocity)\n\n    output = '\\n'.join([f'{velocity:.1f}' for velocity in velocities])\n    return output",
        "test": "assert solution(\"4 10\\n20 90\\n20 80\\n20 70\\n10 60\") == \"24.549294725486\\n16.682400806457\\n11.191435330427\\n5.40928290145\\n0.0\""
    },
    {
        "number": 4936,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    temperatures = [int(x) for x in stdin.splitlines()[1].split()]\n    best_day = 0\n    best_temp = float('inf')\n    \n    for day in range(1, n-1):\n        current_temp = max(temperatures[day-1], temperatures[day+1])\n        if current_temp < best_temp:\n            best_day = day\n            best_temp = current_temp\n            \n    return f\"{best_day} {best_temp}\"",
        "test": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\""
    },
    {
        "number": 4937,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, a = map(int, lines[0].split())\n    e = list(map(int, lines[1].split()))\n    \n    # sort the ships Finni has in descending order\n    e.sort(reverse=True)\n    \n    # initialize the number of wins\n    wins = 0\n    \n    # loop through the solar systems and compare ships\n    for i in range(n):\n        if a >= e[i]:\n            wins += 1\n            a -= e[i]\n        else:\n            break\n    \n    return str(wins)",
        "test": "assert solution(\"2 6\\n1 2 3\") == \"2\""
    },
    {
        "number": 4938,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    max_diff, queue = stdin.split('\\n')\n    max_diff = int(max_diff)\n    \n    women = 0\n    men = 0\n    count = 0\n    \n    for gender in queue:\n        if gender == 'W':\n            women += 1\n        else:\n            men += 1\n        \n        diff = abs(women - men)\n        if diff <= max_diff:\n            count += 1\n        else:\n            return str(count)\n    \n    return str(count)",
        "test": "assert solution(\"1\\nMWWMWMMWM\") == \"9\""
    },
    {
        "number": 4939,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def process_throw_command(start_index, current_index, command):\n        if command.isdigit():\n            command = int(command)\n            if command == 0:\n                return current_index\n            return (current_index + command) % n\n        elif command.startswith(\"undo\"):\n            m = int(command.split()[-1])\n            return (current_index - m) % n\n        else:\n            raise ValueError(\"Invalid command\")\n\n    n, k = map(int, stdin.split()[:2])\n    commands = stdin.split()[2:]\n    current_index = 0\n\n    for command in commands:\n        current_index = process_throw_command(0, current_index, command)\n\n    return str(current_index)",
        "test": "assert solution(\"3 5\\n10 10 -20 5 10 -5 undo 3\") == \"0\""
    },
    {
        "number": 4940,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    P = []\n    for line in stdin.split('\\n')[1:]:\n        if line:\n            P.append(list(map(int, line.split())))\n\n    T = [0] * N\n    remaining = [M] * N\n    total_time = 0\n\n    while True:\n        available_workers = sum(remaining)\n        if available_workers == 0:\n            break\n\n        for i in range(N):\n            if remaining[i] > 0:\n                P_min = min(P[i])\n                if P_min <= available_workers:\n                    T[i] += P_min\n                    remaining[i] -= P_min\n                    P[i].remove(P_min)\n                else:\n                    T[i] += available_workers\n                    remaining[i] -= available_workers\n\n        total_time += 1\n\n    return ' '.join(str(t) for t in T)",
        "test": "assert solution(\"5 4\\n10 10 10 10\\n5 5 5 5\\n10 5 10 5\\n5 10 5 10\\n10 10 10 10\") == \"100 65 130 195\"  # example test case with multiple swathers and stages "
    },
    {
        "number": 4941,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def parse_input(stdin: str) -> tuple:\n        n, sentence, m, *dict_lines = stdin.strip().split('\\n')\n        n = int(n)\n        m = int(m)\n        sentence = sentence.split()\n        dict_lines = [line.strip().split() for line in dict_lines]\n        return n, sentence, m, dict_lines\n\n    def build_dictionary(dict_lines: list) -> dict:\n        dictionary = {}\n        for line in dict_lines:\n            dutch, english, correctness = line\n            if dutch not in dictionary:\n                dictionary[dutch] = []\n            dictionary[dutch].append((english, correctness))\n        return dictionary\n\n    def find_translations(sentence: list, dictionary: dict) -> list:\n        translations = []\n        for word in sentence:\n            if word not in dictionary:\n                return []\n            translations.append(dictionary[word])\n        return translations\n\n    def count_translations(translations: list) -> tuple:\n        correct_translations = 0\n        incorrect_translations = 0\n        for translation in translations:\n            for word, correctness in translation:\n                if correctness == 'correct':\n                    correct_translations += 1\n                else:\n                    incorrect_translations += 1\n        return correct_translations, incorrect_translations\n\n    n, sentence, m, dict_lines = parse_input(stdin)\n    dictionary = build_dictionary(dict_lines)\n    translations = find_translations(sentence, dictionary)\n\n    if not translations:\n        return \"Incorrect sentence\\n\"\n\n    correct_translations, incorrect_translations = count_translations(translations)\n\n    if len(translations) == 1:\n        if correct_translations == len(sentence):\n            return \" \".join(sentence) + \"\\ncorrect\\n\"\n        else:\n            return \" \".join(sentence) + \"\\nincorrect\\n\"\n    else:\n        return str(correct_translations) + \" correct\\n\" + str(incorrect_translations) + \" incorrect\\n\"",
        "test": "assert solution(\"3\\nthe dog is running\\n8\\nthe dog 1 correct\\nrunning 1 correct\\nis 1 incorrect\\nrun 1 incorrect\\ndog 1 correct\\nto 1 correct\\nthis 1 incorrect\\nnot 1 incorrect\\nrunning 1 correct\\n\") == \"1 correct\\n7 incorrect\" "
    },
    {
        "number": 4942,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, tree_growth_days = stdin.split('\\n')\n    n = int(n)\n    tree_growth_days = list(map(int, tree_growth_days.split()))\n\n    # Sort the trees by growth time\n    tree_growth_days.sort(reverse=True)\n\n    # Calculate the minimum time needed for the trees to grow\n    min_time = sum(tree_growth_days)\n\n    # Calculate the time when the last tree has grown up\n    last_tree_growth_time = sum(tree_growth_days) - tree_growth_days[-1]\n\n    # The party can take place the next day after the last tree has grown up\n    earliest_day = last_tree_growth_time + 1\n\n    return str(earliest_day)",
        "test": "assert solution(\"2\\n3 2\") == \"5\""
    },
    {
        "number": 4943,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, points, A = stdin.strip().split('\\n')\n    N = int(N)\n    points = [tuple(map(float, point.split())) for point in points]\n    A = int(A)\n    \n    # Find the centroid of the polygon\n    centroid = (sum(p[0] for p in points) / N, sum(p[1] for p in points) / N)\n    \n    # Find the radius of the circle that has the same area as the polygon\n    radius = (A / N / 2) ** 0.5\n    \n    # Find the ratio of the radius to the distance between the centroid and each point\n    ratios = [radius / dist for point, dist in zip(points, [((point[0] - centroid[0]) ** 2 + (point[1] - centroid[1]) ** 2) ** 0.5 for point in points])]\n    \n    # Calculate the new coordinates of each point using the ratios\n    new_points = [(point[0] + (centroid[0] - point[0]) * ratio, point[1] + (centroid[1] - point[1]) * ratio) for point, ratio in zip(points, ratios)]\n    \n    # Ensure the new polygon is in the north-east quadrant and touches the x and y axes\n    min_x = min(point[0] for point in new_points)\n    min_y = min(point[1] for point in new_points)\n    new_points = [(point[0] - min_x, point[1] - min_y) for point in new_points]\n    \n    return '\\n'.join(f'{point[0]:.6f} {point[1]:.6f}' for point in new_points) ",
        "test": "assert solution(\"5\\n0 0\\n1 1\\n1 2\\n2 2\\n2 3\\n3\") == \"0.0 0.0\\n1.0 1.0\\n1.0 2.0\\n2.0 2.0\\n2.0 3.0\\n\""
    },
    {
        "number": 4944,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    else:\n        days = 1\n        total_statues = 1\n        while total_statues < n:\n            days += 1\n            total_statues += 1\n            if total_statues == n:\n                break\n            total_statues += 1\n        return str(days)",
        "test": "assert solution('1') == '1'"
    },
    {
        "number": 4945,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # split the input into lines\n    lines = stdin.split(\"\\n\")\n\n    # parse input\n    a, b = map(int, lines[0].split())\n    m, sigma = map(int, lines[1].split())\n\n    # check if constraints are satisfied\n    if a <= 0 or b <= 0 or m < 2 or sigma < 2:\n        return \"Invalid input\"\n\n    # find the maximum rent\n    max_rent = max(a * x + b * y for x in range(1, m) for y in range(1, m - x + 1) if 2 * x + y >= sigma)\n\n    return str(max_rent)",
        "test": "assert solution(\"3 1\\n12 16\") == \"34\""
    },
    {
        "number": 4946,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    num_guests, languages = stdin.split(\"\\n\")\n    num_guests = int(num_guests)\n    languages = list(map(int, languages.split()))\n\n    # Initialize a list to store the minimum awkwardness level for each guest\n    min_awkwardness = [0] * num_guests\n\n    # Initialize a dictionary to store the guests who speak the same language as the current guest\n    same_language_guests = {}\n\n    for i in range(num_guests):\n        # Check if there are any guests who speak the same language as the current guest\n        if languages[i] in same_language_guests:\n            # Update the minimum awkwardness for the current guest and for the guests who speak the same language\n            for guest in same_language_guests[languages[i]]:\n                min_awkwardness[guest] = max(min_awkwardness[guest], i - guest)\n                min_awkwardness[i] = max(min_awkwardness[i], guest - i)\n        else:\n            # Initialize a list to store the guests who speak the same language as the current guest\n            same_language_guests[languages[i]] = []\n\n        # Add the current guest to the list of guests who speak the same language\n        same_language_guests[languages[i]].append(i)\n\n    # Calculate the minimum awkwardness for all guests\n    min_awkwardness = max(min_awkwardness)\n\n    return str(min_awkwardness)",
        "test": "assert solution(\"4\\n1 2 3 1\") == \"3\""
    },
    {
        "number": 4947,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    paces_conversion_ratio = 1000 * 5280 / 4854\n    roman_paces = int(x * paces_conversion_ratio + 0.5)\n    return str(roman_paces)",
        "test": "assert solution(\"1.0\") == \"1088\""
    },
    {
        "number": 4948,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.readline().split())\n    holes = []\n    for i in range(n):\n        r, x, y, z = map(int, stdin.readline().split())\n        holes.append((r, x, y, z))\n    \n    # Calculate the total weight of the cheese block\n    weight = (100 * 100) * 100 * 100000\n    \n    # Calculate the weight of each slice\n    slice_weight = weight / s\n    \n    # Calculate the thickness of each slice\n    slice_thickness = 0\n    for r, x, y, z in holes:\n        slice_thickness += (slice_weight - (3/4 * r**3 * 3.14159)) / (4/3 * r**2 * 3.14159)\n    slice_thickness /= n\n    \n    # Calculate the height of each slice\n    slice_height = 100\n    \n    # Calculate the length of each slice\n    slice_length = 100\n    \n    # Calculate the surface area of each slice\n    slice_area = slice_length * slice_height\n    \n    # Calculate the weight of each slice\n    slice_weight = slice_area * slice_thickness\n    \n    # Calculate the volume of each slice\n    slice_volume = slice_length * slice_height * slice_thickness\n    \n    # Calculate the thickness of each slice\n    slice_thickness = (100 * 100) * 100 / slice_volume\n    \n    # Display the slice thicknesses\n    for i in range(s):\n        print(\"{:.6f}\".format(slice_thickness))",
        "test": "assert solution(\"3 4\\n1000 5000 5000 100\\n1000 5000 5000 100\\n1000 5000 5000 100\\n\") == \"100.000000000\\n100.000000000\\n100.000000000\\n100.000000000\\n\""
    },
    {
        "number": 4949,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    dimensions = stdin.split()\n    n = int(dimensions[0])\n    w, h = int(dimensions[1]), int(dimensions[2])\n    matches = [int(x) for x in stdin.split('\\n')[1:]]\n\n    # Define function to check if match fits in box\n    def match_fits(match_length, box_width, box_height):\n        return match_length <= box_width and match_length <= box_height\n\n    # Check if each match fits in the box\n    output = \"\"\n    for match in matches:\n        if match_fits(match, w, h):\n            output += \"DA\\n\"\n        else:\n            output += \"NE\\n\"\n\n    return output\n",
        "test": "assert solution(\"1 5 5\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\\n\""
    },
    {
        "number": 4950,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    distances = []\n    times = []\n\n    for i in range(1, n+1):\n        t, d = map(int, lines[i].split())\n        times.append(t)\n        distances.append(d)\n\n    max_speed = 0\n    for i in range(1, n):\n        delta_time = times[i] - times[i-1]\n        delta_distance = distances[i] - distances[i-1]\n        speed = delta_distance / delta_time\n        max_speed = max(max_speed, int(speed))\n\n    return str(max_speed)",
        "test": "assert solution(\"2\\n0 0\\n7 42\") == \"6\""
    },
    {
        "number": 4951,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    proof = lines[1:]\n    valid_lines = ['->'.join(line.split()) for line in proof]\n\n    for i in range(n):\n        line = valid_lines[i]\n        if len(line.split('->')) != 2:\n            return str(i+1)\n\n    return 'correct'",
        "test": "assert solution(\"1\\nALICE -> BOB\\nALICE BOB -> CARL\") == \"2\""
    },
    {
        "number": 4952,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    candidates = {}\n    for line in stdin.split('\\n'):\n        if line == \"***\":\n            break\n        candidates[line] = candidates.get(line, 0) + 1\n\n    max_votes = max(candidates.values())\n    winners = [name for name, votes in candidates.items() if votes == max_votes]\n\n    if len(winners) == 1:\n        return winners[0]\n    else:\n        return \"Runoff!\"",
        "test": "assert solution(\"David Johnson\\nBarbara Skinner\\nDavid Johnson\\nBarbara Skinner\\nDavid Johnson\\nBarbara Skinner\\n***\") == \"Runoff!\""
    },
    {
        "number": 4953,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    characters = []\n    \n    for i in range(1, n+1):\n        name, language, *additional_languages = lines[i].split()\n        characters.append((name, language, set(additional_languages)))\n    \n    def can_converse(char1, char2):\n        language1, language2 = char1[1], char2[1]\n        for character in characters:\n            if language1 in character[2] and language2 in character[2]:\n                return True\n        return False\n    \n    def check_converse_all_pairs(characters_to_leave):\n        for i in range(n):\n            for j in range(n):\n                if i == j or (i, j) in characters_to_leave:\n                    continue\n                if not can_converse(characters[i], characters[j]):\n                    return False\n        return True\n    \n    for i in range(1, n+1):\n        if check_converse_all_pairs(set((i,))):\n            return str(1)\n    \n    for i in range(1, n-1):\n        for j in range(i+1, n):\n            if check_converse_all_pairs(set((i, j))):\n                return str(2)\n    \n    return str(n)",
        "test": "assert solution('''7"
    },
    {
        "number": 4954,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, B, H, W = [int(x) for x in stdin.splitlines()[0].split()]\n    hotels = []\n    for i in range(H):\n        hotel = [int(x) for x in stdin.splitlines()[2+i*2].split()]\n        hotel.append([int(x) for x in stdin.splitlines()[3+i*2].split()])\n        hotels.append(hotel)\n    \n    # Find the cheapest hotel that can accommodate all participants\n    min_cost = float('inf')\n    for hotel in hotels:\n        hotel_cost = hotel[0]\n        available_beds = hotel[W+1]\n        needed_beds = N\n        for weekend in range(W):\n            if needed_beds > available_beds[weekend]:\n                break\n            needed_beds -= available_beds[weekend]\n            hotel_cost += (weekend+1) * hotel[weekend]\n        else:\n            if hotel_cost <= B:\n                min_cost = min(min_cost, hotel_cost)\n    \n    # Output the result\n    if min_cost == float('inf'):\n        return \"stay home\"\n    else:\n        return str(min_cost)",
        "test": "assert solution(\"5 1000000 5 3"
    },
    {
        "number": 4955,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    notes = stdin.split()\n\n    # Define scales\n    major_scales = [\n        \"A# C D# F\",\n        \"B C# E F#\",\n        \"C D E F# G#\",\n        \"D# E F# A\",\n        \"E F# G A#\",\n        \"F G A Bb\",\n        \"G A B C\",\n        \"A B C# E\",\n        \"Bb C D F\",\n        \"C D# E G\",\n    ]\n\n    # Find all major scales that can be used to form the song\n    valid_scales = []\n    for scale in major_scales:\n        notes_in_scale = scale.split()\n        is_valid = True\n        for note in notes:\n            if note not in notes_in_scale:\n                is_valid = False\n                break\n        if is_valid:\n            valid_scales.append(scale)\n\n    # Return the result\n    if valid_scales:\n        return \" \".join(sorted(valid_scales))\n    else:\n        return \"none\"",
        "test": "assert solution(\"10\\nA B C D E F G A\") == \"none\"  # should pass"
    },
    {
        "number": 4956,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into words\n    words = stdin.split()\n\n    # Calculate the percentage of words containing the letter 'ae'\n    ae_count = sum(1 for word in words if 'ae' in word)\n    percentage_ae = ae_count / len(words) * 100\n\n    # Check if the sentence is in \u00f6stg\u00f6tska\n    if percentage_ae >= 40:\n        return \"dae ae ju traeligt va\"\n    else:\n        return \"haer talar vi rikssvenska\"",
        "test": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\""
    },
    {
        "number": 4957,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n    visited = [[False] * m for _ in range(n)]\n    result = []\n\n    def dfs(i, j):\n        if i < 0 or i >= n or j < 0 or j >= m or visited[i][j] or grid[i][j] == '#':\n            return\n        visited[i][j] = True\n        if grid[i][j] == '.':\n            grid[i][j] = 'E'\n        for x, y in ((i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)):\n            dfs(x, y)\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                dfs(i, j)\n\n    return '\\n'.join([''.join(row) for row in grid])",
        "test": "assert solution(\"3 3\\n...\\n.#.\\n..#\") == \"E..\\n.E#\\n..E\""
    },
    {
        "number": 4958,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    boxes = [int(x) for x in stdin.split()]\n    boxes.sort(reverse=True)\n    \n    first_tower = boxes[:3]\n    second_tower = boxes[3:]\n    \n    return \" \".join(str(x) for x in first_tower + second_tower)",
        "test": "assert solution(\"7 4 10 9 1 3 21 8\") == \"10 9 7 4 3 1\""
    },
    {
        "number": 4959,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    e, f, c = map(int, stdin.split())\n    num_of_sodas = (e + f) // c\n    return str(num_of_sodas)",
        "test": "assert solution('1 2 4') == '1'"
    },
    {
        "number": 4960,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    binary_numeral = stdin.lstrip('0') or '0'\n    binary_len = len(binary_numeral)\n    if binary_len > 100 or binary_len == 0 or binary_numeral[0] != '1':\n        raise ValueError(\"Invalid input\")\n\n    binary_numeral = '0' * ((3 - binary_len % 3) % 3) + binary_numeral\n\n    octal_numeral = ''\n    for i in range(0, len(binary_numeral), 3):\n        binary_group = binary_numeral[i:i+3]\n        octal_digit = str(int(binary_group, 2))\n        octal_numeral += octal_digit\n\n    return octal_numeral.lstrip('0') or '0'",
        "test": "assert solution(\"1010\") == \"12\""
    },
    {
        "number": 4961,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    R, S = map(int, stdin.split()[0].split())\n    seating_order = stdin.split('\\n')[1:]\n    handshakes = 0\n    \n    for row in seating_order:\n        for i in range(S):\n            if row[i] == 'o':\n                # Check if there are any empty spaces to the left or right of the person\n                if i > 0 and row[i-1] == '.':\n                    handshakes += 1\n                if i < S-1 and row[i+1] == '.':\n                    handshakes += 1\n                    \n                # Check if there are any empty spaces above or below the person\n                for j in range(R):\n                    if seating_order[j][i] == '.':\n                        handshakes += 1\n                        \n    return str(handshakes)",
        "test": "assert solution(\"2 3\\n..o\\no..\") == \"2\""
    },
    {
        "number": 4962,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, L = map(int, stdin.splitlines()[0].split())\n    A, B = [], []\n    for i in range(1, N + 1):\n        a, b = map(int, stdin.splitlines()[i].split())\n        A.append(a)\n        B.append(b)\n\n    # Initialize result\n    result = []\n    visited = set()\n\n    # For each item, follow the rules\n    for i in range(N):\n        # Store in the first available drawer\n        if A[i] not in visited:\n            result.append(\"LADICA\")\n            visited.add(A[i])\n        elif B[i] not in visited:\n            result.append(\"LADICA\")\n            visited.add(B[i])\n        else:\n            result.append(\"SMECE\")\n\n    # Return result\n    return \"\\n\".join(result)",
        "test": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\""
    },
    {
        "number": 4963,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, relations = stdin.split('\\n')\n    n = int(n)\n    relations = [int(x) for x in relations.split()]\n    \n    lineup = [1] + [0] * (n-1)\n    for i in range(len(relations)):\n        lineup[relations[i]+1] = n - i\n    \n    for i in range(n):\n        if lineup[i] == 0:\n            for j in range(i+1, n):\n                if lineup[j] == 0:\n                    lineup[i], lineup[j] = lineup[j], lineup[i]\n                    break\n    \n    return \" \".join(map(str, lineup))",
        "test": "assert solution(\"2\\n0\") == \"1 2\""
    },
    {
        "number": 4964,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_horror_index(movie_id: int, horror_list: set, similarities: list) -> int:\n        if movie_id in horror_list:\n            return 0\n        worst_similar_movie = float('inf')\n        for a, b in similarities:\n            if a == movie_id:\n                if calculate_horror_index(b, horror_list, similarities) == 0:\n                    return 1\n                worst_similar_movie = min(worst_similar_movie, calculate_horror_index(b, horror_list, similarities))\n        return worst_similar_movie + 1\n\n    def parse_input(stdin: str) -> tuple:\n        lines = stdin.split('\\n')\n        N, H, L = map(int, lines[0].split())\n        horror_list = set(map(int, lines[1].split()))\n        similarities = [tuple(map(int, line.split())) for line in lines[2:]]\n        return N, H, L, horror_list, similarities\n\n    N, H, L, horror_list, similarities = parse_input(stdin)\n    horror_indices = [calculate_horror_index(movie_id, horror_list, similarities) for movie_id in range(N)]\n    max_horror_index = max(horror_indices)\n    best_movies = [i for i, hi in enumerate(horror_indices) if hi == max_horror_index]\n    return str(min(best_movies))\n\nsample_input = \"\"\"6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\"\"\"\n\nprint(solution(sample_input)) ",
        "test": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\""
    },
    {
        "number": 4965,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, temps = stdin.splitlines()\n    n = int(n)\n    temps = list(map(int, temps.split()))\n    result = []\n    \n    for i in range(n):\n        result.append(max(temps))\n        temps.remove(max(temps))\n    \n    return \" \".join(map(str, result))",
        "test": "assert solution(\"3\\n1 3 4\") == \"4 3 1\""
    },
    {
        "number": 4966,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k, timestamps = stdin.split(\"\\n\")\n    n = int(n)\n    p = int(p)\n    k = int(k)\n    timestamps = list(map(int, timestamps.split()))\n    \n    # Calculate the original length of the video\n    original_length = k\n    for i in range(n):\n        original_length -= (100 + p) * (timestamps[i] - original_length) / 100\n        \n    return format(original_length, \".3f\")",
        "test": "assert solution(\"1 30 20\\n5 10\") == \"18.750\""
    },
    {
        "number": 4967,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    grid = [list(line) for line in lines[1:]]\n    safe_houses = []\n    spies = []\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'H':\n                safe_houses.append((i, j))\n            elif grid[i][j] == 'S':\n                spies.append((i, j))\n\n    max_distance = 0\n    for spy in spies:\n        min_distance = float('inf')\n        for safe_house in safe_houses:\n            distance = abs(spy[0] - safe_house[0]) + abs(spy[1] - safe_house[1])\n            min_distance = min(min_distance, distance)\n        max_distance = max(max_distance, min_distance)\n\n    return str(max_distance)",
        "test": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\") == \"5\""
    },
    {
        "number": 4968,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, s, r = map(int, stdin.split()[:3])\n    damaged_teams = set(map(int, stdin.split()[3:3+s]))\n    reserve_teams = set(map(int, stdin.split()[3+s:]))\n\n    inaccessible_teams = set()\n\n    for team in damaged_teams:\n        if team - 1 in reserve_teams:\n            reserve_teams.remove(team - 1)\n        if team + 1 in reserve_teams:\n            reserve_teams.remove(team + 1)\n\n    for team in reserve_teams:\n        if team - 1 in damaged_teams:\n            inaccessible_teams.add(team - 1)\n        if team + 1 in damaged_teams:\n            inaccessible_teams.add(team + 1)\n\n    return str(len(inaccessible_teams))\n\nstdin = \"5 2 3\\n2 4\\n1 3 5\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\""
    },
    {
        "number": 4969,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    cheese_area = 3.14159 * (R ** 2) - 3.14159 * ((R - C) ** 2)\n    total_area = 3.14159 * (R ** 2)\n    percentage = cheese_area / total_area * 100\n    return \"{:.8f}\".format(percentage)",
        "test": "assert solution(\"5 1\") == \"0.9763779528\""
    },
    {
        "number": 4970,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    n = int(stdin[0])\n    stdin = stdin[1:]\n    courses = [set(x.split()) for x in stdin]\n    max_popularity = 0\n    for i in range(len(courses)):\n        popularity = 1\n        for j in range(len(courses)):\n            if i != j and courses[i] == courses[j]:\n                popularity += 1\n        if popularity > max_popularity:\n            max_popularity = popularity\n    return str(max_popularity)",
        "test": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\""
    },
    {
        "number": 4971,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.strip())\n    \n    def sum_of_cubes(n: int) -> int:\n        return n * (n + 1) // 2\n    \n    def count_ways(n: int, x: int) -> int:\n        ways = 0\n        for a in range(1, n + 1):\n            for b in range(1, n + 1):\n                if sum_of_cubes(a) + sum_of_cubes(b) == x:\n                    ways += 1\n        return ways\n    \n    for x in range(m, 0, -1):\n        if count_ways(m, x) >= 2:\n            return str(x)\n    \n    return \"none\"",
        "test": "assert solution(\"400000\") == \"204673\""
    },
    {
        "number": 4972,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    k = 0\n    while X >= 1:\n        k += 1\n        X -= (k**k - (k-1)**k)\n    return str(k-1)",
        "test": "assert solution(\"123456789\") == \"8\""
    },
    {
        "number": 4973,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def valid_move(r, c):\n        return 1 <= r <= N and 1 <= c <= N\n\n    def next_moves(r, c):\n        for dr, dc in moves:\n            new_r, new_c = r + dr, c + dc\n            if valid_move(new_r, new_c):\n                if board[new_r][new_c] == '.':\n                    yield new_r, new_c\n                elif board[new_r][new_c] == 'K':\n                    yield 1, 1\n\n    def knight_moves(r, c):\n        visited = set()\n        queue = [(r, c, 0)]\n        while queue:\n            r, c, depth = queue.pop(0)\n            if (r, c) not in visited:\n                visited.add((r, c))\n                if (r, c) == (1, 1):\n                    return depth\n                for new_r, new_c in next_moves(r, c):\n                    queue.append((new_r, new_c, depth + 1))\n        return -1\n\n    N = int(stdin.readline().strip())\n    moves = [(1, 2), (1, -2), (2, 1), (2, -1), (-1, 2), (-1, -2), (-2, 1), (-2, -1)]\n    board = [list(stdin.readline().strip()) for _ in range(N)]\n    result = knight_moves(N, N)\n    return str(result)",
        "test": "assert solution(\"5\\n..#..\\n.K#..\\n.#...\\n.#...\\n.....\") == \"4\""
    },
    {
        "number": 4974,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.splitlines()[0].split())\n    rooms = [True] * r\n    for room in map(int, stdin.splitlines()[1:]):\n        rooms[room-1] = False\n\n    for i, available in enumerate(rooms):\n        if available:\n            return str(i+1)\n\n    return \"too late\"",
        "test": "assert solution(\"10 3\\n1\\n2\\n3\\n4\") == \"too late\""
    },
    {
        "number": 4975,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    key_phrase, plaintext = stdin.split(\"\\n\")\n    key_phrase = key_phrase.replace(\" \", \"\")\n    key_phrase = \"\".join(sorted(set(key_phrase)))\n    alphabet = \"\".join([chr(i) for i in range(97, 123) if chr(i) != \"q\"])\n    key = key_phrase + alphabet\n    key_table = [list(key[i:i+5]) for i in range(0, len(key), 5)]\n\n    def encrypt_pair(pair: str) -> str:\n        pair = pair.upper()\n        if len(pair) == 1:\n            return pair + \"X\"\n        elif pair[0] == pair[1]:\n            return pair[0] + \"X\"\n        row1, col1 = [i for i, row in enumerate(key_table) if pair[0] in row][0], key_table[0].index(pair[0])\n        row2, col2 = [i for i, row in enumerate(key_table) if pair[1] in row][0], key_table[0].index(pair[1])\n        if row1 == row2:\n            return key_table[row1][(col1 + 1) % 5] + key_table[row1][(col2 + 1) % 5]\n        elif col1 == col2:\n            return key_table[(row1 + 1) % 5][col1] + key_table[(row2 + 1) % 5][col2]\n        else:\n            return key_table[row1][col2] + key_table[row2][col1]\n\n    ciphertext = \"\".join([encrypt_pair(plaintext[i:i+2]) for i in range(0, len(plaintext), 2)])\n    return ciphertext.upper()\n\ninput_text = \"\"\"playfair example\nhide the gold in the tree stump\"\"\"\noutput_text = solution(input_text)\nprint(output_text) ",
        "test": "assert solution(\"secret message\", \"the quick brown fox jumps over the lazy dog\") == \"SGDUFHMXOYZVCKBEAINRWQLTJUP\""
    },
    {
        "number": 4976,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    gopher_x, gopher_y, dog_x, dog_y = [float(x) for x in stdin.split()[:4]]\n    gopher_holes = [(float(x), float(y)) for x, y in [line.split() for line in stdin.splitlines()[1:]]]\n\n    def distance(x1, y1, x2, y2):\n        return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n\n    gopher_distance_from_hole = [distance(gopher_x, gopher_y, hole[0], hole[1]) for hole in gopher_holes]\n    dog_distance_from_hole = [distance(dog_x, dog_y, hole[0], hole[1]) for hole in gopher_holes]\n\n    can_escape = False\n    for i in range(len(gopher_holes)):\n        if dog_distance_from_hole[i] > gopher_distance_from_hole[i]:\n            can_escape = True\n            break\n\n    if can_escape:\n        return f\"The gopher can escape through the hole at ({gopher_holes[i][0]}, {gopher_holes[i][1]}).\"\n    else:\n        return \"The gopher cannot escape.\"",
        "test": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\""
    },
    {
        "number": 4977,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, t = map(int, stdin.split())\n    \n    # calculate the Manhattan distance between the starting and destination coordinates\n    distance = abs(c - a) + abs(d - b)\n    \n    # check if the distance can be travelled using the given number of electrical charge\n    if distance <= t:\n        return \"Y\"\n    else:\n        return \"N\"",
        "test": "assert solution('3 4\\n3 3\\n3') == 'Y'"
    },
    {
        "number": 4978,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.split()[0].split())\n    grid = [list(line.strip()) for line in stdin.split('\\n')[1:N+1]]\n\n    # Function to spread water\n    def spread_water():\n        changes = []\n        for i in range(N):\n            for j in range(M):\n                if grid[i][j] == 'V':\n                    if i > 0 and grid[i-1][j] == '.':\n                        changes.append((i-1, j, 'V'))\n                    if j > 0 and grid[i][j-1] == 'V':\n                        changes.append((i, j-1, 'V'))\n                        if j+1 < M and grid[i][j+1] == '.':\n                            changes.append((i, j+1, 'V'))\n                    if j+1 < M and grid[i][j+1] == 'V':\n                        changes.append((i, j+1, 'V'))\n                    if i+1 < N and grid[i+1][j] == 'V':\n                        changes.append((i+1, j, 'V'))\n        return changes\n\n    # Spread water until no changes occur\n    while True:\n        changes = spread_water()\n        if not changes:\n            break\n        for i, j, val in changes:\n            grid[i][j] = val\n\n    # Print output\n    return '\\n'.join([''.join(row) for row in grid])",
        "test": "assert solution('''5 7"
    },
    {
        "number": 4979,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to an integer\n    num = int(stdin)\n    \n    # Convert the integer to binary string\n    binary = bin(num)[2:]\n    \n    # Reverse the binary string\n    reversed_binary = binary[::-1]\n    \n    # Convert the reversed binary string to integer\n    reversed_num = int(reversed_binary, 2)\n    \n    # Return the reversed integer\n    return str(reversed_num)",
        "test": "assert solution(\"13\") == \"11\""
    },
    {
        "number": 4980,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    button_count = 0\n    pink_count = 0\n    rose_count = 0\n    for button_name in stdin.strip().split('\\n'):\n        button_count += 1\n        if 'pink' in button_name.lower():\n            pink_count += 1\n        if 'rose' in button_name.lower():\n            rose_count += 1\n    if pink_count == 0 or rose_count == 0:\n        return \"I must watch Star Wars with my daughter\"\n    else:\n        return pink_count * rose_count // gcd(pink_count, rose_count)",
        "test": "assert solution(\"1\\nTeal\") == \"I must watch Star Wars with my daughter\""
    },
    {
        "number": 4981,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    order = list(input(\"Enter the desired order: \"))\n    sorted_list = sorted(input_list)\n    result = \"\"\n\n    for char in order:\n        if char == \"A\":\n            result += str(sorted_list[0]) + \" \"\n        elif char == \"B\":\n            result += str(sorted_list[1]) + \" \"\n        else:\n            result += str(sorted_list[2]) + \" \"\n\n    return result\n",
        "test": "assert solution(\"2 4 6\\nACB\") == \"6 2 4\""
    },
    {
        "number": 4982,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def calc_avg_cost(shares, cost):\n        return cost / shares\n\n    def split(x, cost):\n        return x * cost\n\n    def merge(x, shares, cost):\n        return cost * shares / x\n\n    def buy_sell(buy_sell, x, y):\n        if buy_sell == \"buy\":\n            return (x, y)\n        elif buy_sell == \"sell\":\n            return (x, y, x)\n        else:\n            return None\n\n    def final_sell(shares, cost):\n        tax = cost * 0.3\n        return (shares - 1) * (cost - tax)\n\n    events = stdin.strip().split(\"\\n\")\n    shares = 0\n    cost = 0\n    for event in events:\n        if event.startswith(\"buy\"):\n            x, y = map(int, event.split()[1:])\n            shares += x\n            cost = calc_avg_cost(shares, cost * (shares - x) + y * x)\n        elif event.startswith(\"sell\"):\n            x, y = map(int, event.split()[1:])\n            shares -= x\n            if shares < 0:\n                return \"Error: Invalid sell event.\"\n            if cost == 0:\n                return \"Error: No shares owned.\"\n        elif event.startswith(\"split\"):\n            x = int(event.split()[1])\n            cost = split(x, cost)\n        elif event.startswith(\"merge\"):\n            x = int(event.split()[1])\n            cost = merge(x, shares, cost)\n        elif event.startswith(\"die\"):\n            y = int(event.split()[1])\n            total_shares = shares + 1\n            final_cost = (cost * total_shares + y) / total_shares\n            return str(final_sell(total_shares, final_cost))\n\n    return \"Error: No die event.\"",
        "test": "assert solution(\"buy 5 10\\nsell 3 8\\nsplit 2\\nsell 4 20\\nsell 2 15\\ndie 5\") == \"36.60000000\" "
    },
    {
        "number": 4983,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    \n    while x >= 10:\n        new_x = 1\n        for digit in str(x):\n            if digit != '0':\n                new_x *= int(digit)\n        x = new_x\n    \n    return str(x)",
        "test": "assert solution(\"2\") == \"2\""
    },
    {
        "number": 4984,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find_islands(grid, visited, r, c):\n        def dfs(i, j):\n            if i < 0 or i >= r or j < 0 or j >= c or visited[i][j] or grid[i][j] == 'W':\n                return\n            visited[i][j] = True\n            dfs(i - 1, j)\n            dfs(i + 1, j)\n            dfs(i, j - 1)\n            dfs(i, j + 1)\n\n        for i in range(r):\n            for j in range(c):\n                if not visited[i][j] and grid[i][j] == 'L':\n                    dfs(i, j)\n\n    r, c = map(int, stdin.split()[0].split())\n    grid = [list(line.strip()) for line in stdin.split()[1:]]\n    visited = [[False for _ in range(c)] for _ in range(r)]\n\n    islands = 0\n    for i in range(r):\n        for j in range(c):\n            if not visited[i][j] and grid[i][j] == 'L':\n                find_islands(grid, visited, r, c)\n                islands += 1\n\n    return islands",
        "test": "assert solution(\"4 5\\nWWWWL\\nLWWWC\\nCWWWW\\nWWWWW\") == \"1\""
    },
    {
        "number": 4985,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, B = map(str, stdin.split()[0].split())\n    hands = [stdin.split()[i:i+4] for i in range(1, 4*int(N)+1, 4)]\n    scores = {\n        \"A\": {\"S\": 11, \"H\": 11, \"D\": 11, \"C\": 11},\n        \"K\": {\"S\": 4, \"H\": 4, \"D\": 4, \"C\": 4},\n        \"Q\": {\"S\": 3, \"H\": 3, \"D\": 3, \"C\": 3},\n        \"J\": {\"S\": 20, \"H\": 2, \"D\": 2, \"C\": 2},\n        \"T\": {\"S\": 10, \"H\": 10, \"D\": 10, \"C\": 10},\n        \"9\": {\"S\": 14, \"H\": 0, \"D\": 0, \"C\": 0},\n        \"8\": {\"S\": 0, \"H\": 0, \"D\": 0, \"C\": 0},\n        \"7\": {\"S\": 0, \"H\": 0, \"D\": 0, \"C\": 0}\n    }\n    total_points = 0\n    for hand in hands:\n        for card in hand:\n            total_points += scores[card[0]][card[1]]\n    return str(total_points)\n\ninput_str = \"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\"\nprint(solution(input_str)) ",
        "test": "assert solution(\"3 H\\nKH\\nJH\\nTH\\nQD\\nKD\\nTQ\\nKC\\nAD\\nTC\\nQC\\nQS\\nTQ\\nKS\\nAD\\nJD\\nTH\\nJC\\nTS\\nQH\\nAC\\nJD\\nKD\\nKH\\nKC\\nJD\\nJC\\nJH\\nQS\\nQD\\nQC\\nAH\\nTS\\nKC\\nAH\\nKH\\nAD\\nQS\\nKC\\nQH\\nKD\\nJC\\nAD\\nAH\\nKC\\nQC\\nKS\\nKD\\nJH\\nKC\\nJH\\nQD\\nAH\\nTD\\nJD\\nQD\\nTH\\nKS\\nAH\\nQH\\nKD\\nQS\\nJD\\nQC\\nAH\\nKC\\nKD\\nJH\\nJD\\nQS\\nAH\\nJD\\nJC\\nQC\\nKS\\nKH\\nQD\\nKD\\nAH\\nJC\\nQD\\nQC\\nKH\\nKS\\nKH\\nKH\\nAC\\nJD\\nJC\\nKC\\nQS\\nTD\\nJD\\nQD\\nKC\\nKD\\nKS\\nKC\\nKD\\nKD\\nKC\\nKH\\nJC\\nKH\\nJC\\nJD\\nQS\\nKD\\nQC\\nKD\\nKH\\nJC\\nKS\\nJC\\nKC\\nKH\\nJH\\nJC\\nKD\\nQC\\nJD\\nQD\\nAH\\nJD\\nQS\\nAD\\nTD\\nAH\\nTD\\nQD\\nJC\\nKD\\nKD\\nKD\\nKH\\nKS\\nKD\\nJC\\nKD\\nJC\\nKD\\nKC\\nQD\\nKH\\nJH\\nKS\\nJD\\nQD\\nQS\\nKD\\nKC\\nKC\\nKC\\nKD\\nQD\\nAH\\nTD\\nJD\\nAH\\nJD\\nQD\\nJD\\nQS\\nJD\\nAH\\nKH\\nJC\\nKC\\nKC\\nJC\\nKD\\nAH\\nJD\\nAH\\nKD\\nKD\\nQD\\nJD\\nAH\\nJD\\nKH\\nKC\\nQC\\nJD\\nAH\\nKC\\nKD\\nQC\\nKH\\nAD\\nKS\\nAH\\nJD\\nJC\\nKH\\nKC\\nKS\\nAH\\nJD\\nJD\\nJC\\nJC\\nQD\\nKD\\nKH\\nAH\\nJC\\nKS\\nKD\\nKC\\nKC\\nKD\\nJD\\nKS\\nJC\\nQD\\nKH\\nJC\\nJH\\nKD\\nKC\\nJD\\nKC\\nQD\\nJD\\nKD\\nAH\\nJD\\nQS\\nAH\\nJD\\nAH\\nJD\\nQS\\nJD\\nAH\\nJD\\nKC\\nJD\\nKS\\nAH\\nJD\\nJD\\nAH\\nKS\\nKC\\nKD\\nQC\\nJD\\nKD\\nKD\\nAH\\nKD\\nKC\\nKC"
    },
    {
        "number": 4986,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    sticky_chars = []\n\n    for i in range(len(s)):\n        if s[i] != t[i * 2]:\n            sticky_chars.append(s[i])\n\n    return \"\".join(sticky_chars)",
        "test": "assert solution(\"this is very annoying\") == \"se\""
    },
    {
        "number": 4987,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S, C, K = map(int, stdin.split()[:3])\n    D = list(map(int, stdin.split()[3:]))\n    \n    total_machines = 0\n    socks_left = S\n    current_machine = []\n    \n    for d in D:\n        if len(current_machine) < C and (not current_machine or max([abs(d - sock) for sock in current_machine]) <= K):\n            current_machine.append(d)\n            socks_left -= 1\n        else:\n            total_machines += 1\n            current_machine = [d]\n    \n    total_machines += socks_left // C\n    total_machines += 1 if socks_left % C else 0\n    \n    return str(total_machines)",
        "test": "assert solution(\"5 3 0\\n0 0 1 1 2\") == \"3\""
    },
    {
        "number": 4988,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.split(\"\\n\")[0])\n    results = []\n    for i in range(1, T + 1):\n        N = int(stdin.split(\"\\n\")[i])\n        factorial = 1\n        for j in range(1, N + 1):\n            factorial *= j\n        results.append(str(factorial % 10))\n    return \"\\n\".join(results)",
        "test": "assert solution(\"3\\n1\\n2\\n3\") == \"1\\n2\\n6\""
    },
    {
        "number": 4989,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *pieces = map(int, stdin.split())\n    pieces.sort(reverse=True)\n\n    alice_pieces = [pieces[i] for i in range(n) if i % 2 == 0]\n    bob_pieces = [pieces[i] for i in range(n) if i % 2 == 1]\n\n    alice_value = sum(alice_pieces)\n    bob_value = sum(bob_pieces)\n\n    return f\"{alice_value} {bob_value}\"",
        "test": "assert solution(\"3\\n3 1 2\") == \"4 2\""
    },
    {
        "number": 4990,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    b, k, g = map(int, stdin.split())\n    if k < g:\n        return \"Invalid input. The number of knights in each group should be less than or equal to the total number of knights.\"\n    if b * g > k:\n        return \"Invalid input. The number of groups should be less than or equal to the total number of knights divided by the minimum number of knights in each group.\"\n    \n    # Find the number of days it would take to search every bridge\n    days_per_bridge = (k - 1) // g + 1\n    total_days = b * days_per_bridge\n    \n    # The troll can stay in the same place for at most k-1 days before being found\n    # Therefore, the troll can stay in the same place for at most days_per_bridge - 1 days\n    # and the troll can be found at most b*(days_per_bridge - 1) days after the start of the search\n    max_days_without_finding = b * (days_per_bridge - 1)\n    \n    return str(min(total_days, max_days_without_finding))",
        "test": "assert solution(\"10 3 2\") == \"2\""
    },
    {
        "number": 4991,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def hailstone_sum(n: int) -> int:\n        def h(n: int) -> int:\n            if n == 1:\n                return 1\n            if n % 2 == 0:\n                return n + h(n // 2)\n            return n + h(3 * n + 1)\n\n        return h(n)\n\n    n = int(stdin)\n    return str(hailstone_sum(n))",
        "test": "assert solution(\"5\") == \"36\""
    },
    {
        "number": 4992,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    num_students = [int(num) for num in lines[1].split()]\n\n    # Check if there is a safe order\n    safe_order = find_safe_order(num_students)\n\n    # If there is a safe order, output it. Otherwise, output \"impossible\"\n    if safe_order:\n        return \" \".join([str(i) for i in safe_order])\n    else:\n        return \"impossible\"\n\ndef",
        "test": "assert solution(\"5\\n3 2 4 5 6\") == \"impossible\""
    },
    {
        "number": 4993,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    parts, days = map(int, stdin.split())\n    parts_list = []\n    for i in range(days):\n        parts_list.append(input())\n\n    for day in range(days):\n        if parts_list.count(parts_list[day]) == parts:\n            return str(day + 1)\n    return \"paradox avoided\"\n\ninput_str = input()\nprint(solution(input_str)) ",
        "test": "assert solution(\"5 10\\na\\nb\\na\\nb\\na\\nc\\nc\\na\\nd\\nd\\na\\ne\\ne\\na\\nf\\nf\\nf\") == \"paradox avoided\""
    },
    {
        "number": 4994,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    points = [line.strip().split() for line in stdin.split('\\n')]\n    x1, y1 = int(points[0][0]), int(points[0][1])\n    x2, y2 = int(points[1][0]), int(points[1][1])\n    x3, y3 = int(points[2][0]), int(points[2][1])\n    dx1, dy1 = x2 - x1, y2 - y1\n    dx2, dy2 = x3 - x1, y3 - y1\n    x4, y4 = x1 + dx2, y1 + dy2\n    if dx1 == dy2 and dx2 == -dy1:\n        return f\"{x4} {y4}\"\n    else:\n        return \"The points do not form a rectangle.\"",
        "test": "assert solution(\"1 2\\n3 4\\n5 6\") == \"5 6\""
    },
    {
        "number": 4995,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    measurements = [tuple(map(int, line.split())) for line in stdin.strip().split('\\n')]\n    total_time = sum(time for _, time in measurements)\n    total_minutes = sum(minutes for minutes, _ in measurements)\n    average_minute_length = total_time / total_minutes\n    if average_minute_length <= 60:\n        return \"measurement error\"\n    else:\n        return f\"{average_minute_length / 60:.7f}\"",
        "test": "assert solution(\"2\\n1 60\\n2 120\") == \"1.0\""
    },
    {
        "number": 4996,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    encrypted, key = stdin.split()\n    decrypted = \"\"\n    for i in range(len(encrypted)):\n        if i % 2 == 0:\n            shift = ord(key[i]) - ord('A')\n        else:\n            shift = ord('A') - ord(key[i])\n        decrypted += chr(((ord(encrypted[i]) - ord('A') - shift) % 26) + ord('A'))\n    return decrypted",
        "test": "assert solution(\"CPMCRYY\\nALBERTA\") == \"CALGARY\""
    },
    {
        "number": 4997,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    cups = ['A', 'B', 'C']\n    ball_position = 0\n    for move in stdin:\n        if move == 'A':\n            ball_position = (ball_position - 1) % 3\n        elif move == 'B':\n            ball_position = (ball_position + 1) % 3\n        else:\n            ball_position = ball_position\n    return cups[ball_position]",
        "test": "assert solution(\"ABC\") == \"1\""
    },
    {
        "number": 4998,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    areas = []\n    for a, b, c, d in itertools.permutations([A, B, C, D]):\n        if a + b <= c + d:\n            areas.append(a * b)\n        if a + c <= b + d:\n            areas.append(a * c)\n        if b + c <= a + d:\n            areas.append(b * c)\n        if a + b <= c + d:\n            areas.append(a * b)\n        if a + c <= b + d:\n            areas.append(a * c)\n        if b + c <= a + d:\n            areas.append(b * c)\n    return str(max(areas))",
        "test": "assert solution('10 5 7 8') == '20'"
    },
    {
        "number": 4999,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    operations = 0\n    while a != b:\n        if a % 2 == 0:\n            a //= 2\n            operations += 1\n        else:\n            a += 1\n            operations += 1\n    return str(operations)",
        "test": "assert solution(\"2 3\") == \"1\""
    }
]