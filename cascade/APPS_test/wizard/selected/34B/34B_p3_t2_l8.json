[
    {
        "number": 4000,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(graph, visited, vertex):\n        visited[vertex] = True\n        for neighbor in graph[vertex]:\n            if not visited[neighbor]:\n                dfs(graph, visited, neighbor)\n\n    def bfs(graph, visited, vertex):\n        queue = [(vertex, 0)]\n        visited[vertex] = True\n        path_lengths = {vertex: 0}\n\n        while queue:\n            current_vertex, length = queue.pop(0)\n            for neighbor in graph[current_vertex]:\n                if not visited[neighbor]:\n                    queue.append((neighbor, length + 1))\n                    visited[neighbor] = True\n                    path_lengths[neighbor] = length + 1\n        return path_lengths\n\n    def build_graph(n, edges):\n        graph = {i: [] for i in range(1, n + 1)}\n        for edge in edges:\n            a, b = edge\n            graph[a].append(b)\n            graph[b].append(a)\n        return graph\n\n    def find_max_edges(graph, n):\n        max_edges = 0\n        a, b, c = 0, 0, 0\n        for i in range(1, n + 1):\n            visited = [False] * (n + 1)\n            dfs(graph, visited, i)\n            path_lengths = bfs(graph, visited, i)\n\n            for j in range(1, n + 1):\n                if i != j and visited[j]:\n                    for k in range(1, n + 1):\n                        if k != i and k != j and visited[k]:\n                            edges = len(set(path_lengths[j]) | set(path_lengths[k]))\n                            if edges > max_edges:\n                                max_edges = edges\n                                a, b, c = i, j, k\n\n        return max_edges, a, b, c\n\n    n, edges = int(stdin.splitlines()[0]), list(map(lambda x: tuple(map(int, x.split())), stdin.splitlines()[1:]))\n    graph = build_graph(n, edges)\n    max_edges, a, b, c = find_max_edges(graph, n)\n    return f\"{max_edges}\\n{a} {b} {c}\"",
        "test": "assert solution(\"\"\"8",
        "num_ids": 1475,
        "indeed": false
    },
    {
        "number": 4001,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    divisors = sorted(list(set(map(int, stdin.split('\\n')[1].split()))))\n\n    x_divisors = []\n    y_divisors = []\n\n    for i in range(n):\n        if i % 2 == 0:\n            x_divisors.append(divisors[i])\n        else:\n            y_divisors.append(divisors[i])\n\n    x = 1\n    y = 1\n\n    for divisor in x_divisors:\n        x *= divisor\n\n    for divisor in y_divisors:\n        y *= divisor\n\n    return f\"{x} {y}\"",
        "test": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\" ",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 4002,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n\n    max_sum = 0\n    for row in a:\n        row.sort(reverse=True)\n        row_sum = 0\n        for i in range(len(row)):\n            if i >= m // 2:\n                break\n            row_sum += row[i]\n        if row_sum % k == 0:\n            max_sum = max(max_sum, row_sum)\n\n    return str(max_sum)",
        "test": "assert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\" ",
        "num_ids": 950,
        "indeed": false
    },
    {
        "number": 4003,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    increasing_sequence = []\n    while a:\n        if not increasing_sequence or a[0] < increasing_sequence[-1]:\n            increasing_sequence.append(a.pop(0))\n        else:\n            increasing_sequence.append(a.pop())\n\n    return f\"{len(increasing_sequence)}\\n{''.join(['L' if a[0] < a[1] else 'R' for a in zip(increasing_sequence, increasing_sequence[1:])])}\"\n\ndef",
        "test": "assert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"",
        "num_ids": 993,
        "indeed": false
    },
    {
        "number": 4004,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n\n    min_d = float(\"inf\")\n    min_d_count = float(\"inf\")\n\n    for i in range(1, max(a) - min(a) + 1):\n        d_count = 0\n        for j in range(n):\n            if a[j] % i != 0:\n                d_count += a[j] // i\n\n        if d_count < min_d_count or (d_count == min_d_count and i < min_d):\n            min_d = i\n            min_d_count = d_count\n\n    if min_d_count == 0:\n        return str(min_d)\n    else:\n        return \"-1\"",
        "test": "assert solution(\"5\\n2 2 5 2 5\\n\") == \"3\\n\"",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 4005,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    coordinates = [int(x) for x in stdin.split()]\n    x1, y1, x2, y2 = coordinates[:4]\n    x3, y3, x4, y4 = coordinates[4:8]\n    x5, y5, x6, y6 = coordinates[8:]\n\n    white_sheet_area = (x2 - x1) * (y2 - y1)\n    black_sheet_1_area = (x4 - x3) * (y4 - y3)\n    black_sheet_2_area = (x6 - x5) * (y6 - y5)\n\n    total_area = white_sheet_area + black_sheet_1_area + black_sheet_2_area\n    overlap_area = (min(x2, x4, x6) - max(x1, x3, x5)) * (min(y2, y4, y6) - max(y1, y3, y5))\n\n    if overlap_area == total_area:\n        return \"NO\"\n    else:\n        return \"YES\"",
        "test": "assert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\\n\") == \"YES\"",
        "num_ids": 1050,
        "indeed": false
    },
    {
        "number": 4006,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def f(x):\n        while x % 10 == 0:\n            x //= 10\n        return x\n\n    def reachable(n):\n        visited = set()\n        stack = [n]\n        while stack:\n            current = stack.pop()\n            if current not in visited:\n                visited.add(current)\n                stack.append(f(current))\n        return visited\n\n    n = int(stdin.strip())\n    result = reachable(n)\n    return str(len(result) - 1)",
        "test": "assert solution(\"10\") == 19",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 4007,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    f = [int(i) for i in stdin.split('\\n')[1].split()]\n\n    for i in range(n):\n        if f[i] == 0:\n            for j in range(n):\n                if f[j] == i + 1:\n                    f[i] = j + 1\n                    break\n\n    for i in range(n):\n        if f[i] == 0:\n            f[i] = i + 1\n\n    return ' '.join([str(n * i) for i in f])",
        "test": "assert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 4008,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def is_valid_coloring(colors):\n        for i in range(1, k + 1):\n            if not any(c == i for c in colors):\n                return False\n        for i in range(1, k + 1):\n            if not len(set([a[j] for j in range(n) if colors[j] == i])) == k:\n                return False\n        return True\n\n    def backtrack(start):\n        if start == n:\n            return colors\n        for i in range(1, k + 1):\n            colors[start] = i\n            if is_valid_coloring(colors):\n                result = backtrack(start + 1)\n                if result:\n                    return result\n        return None\n\n    colors = [0] * n\n    result = backtrack(0)\n\n    if result:\n        return \"YES\\n\" + \" \".join(map(str, result))\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 4009,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = list(input())\n    num_int = int(''.join(num))\n    target_remainder = pow(10, y, pow(10, x))\n    current_remainder = num_int % pow(10, x)\n    operations = 0\n\n    while current_remainder != target_remainder:\n        for i in range(n):\n            if num[i] == '0':\n                num[i] = '1'\n                current_remainder = (current_remainder * 2 + 1) % pow(10, x)\n                operations += 1\n                if current_remainder == target_remainder:\n                    break\n            else:\n                num[i] = '0'\n                current_remainder = (current_remainder * 2) % pow(10, x)\n                operations += 1\n                if current_remainder == target_remainder:\n                    break\n\n    return str(operations)\n",
        "test": "assert solution(\"11 5 1\\n11010100101\\n\") == 3",
        "num_ids": 855,
        "indeed": false
    },
    {
        "number": 4010,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def subsequence_palindrome(a, n, k):\n        for i in range(n - k + 1):\n            for j in range(i + k - 1, n):\n                if is_palindrome(a[i:j + 1]):\n                    return True\n        return False\n\n    test_cases = stdin.split(\"\\n\")\n    t = int(test_cases[0])\n    for i in range(t):\n        n = int(test_cases[2 * i + 1])\n        a = [int(x) for x in test_cases[2 * i + 2].split()]\n        if subsequence_palindrome(a, n, 3):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
        "test": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\\nYES\\nNO\\nYES\\nNO\" ",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 4011,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = [int(x) for x in stdin.readline().strip().split()]\n\n    max_num = -1\n\n    for i in range(n):\n        for j in range(i, n):\n            num = a[:i] + ''.join(str(f[int(x)]) for x in a[i:j + 1]) + a[j + 1:]\n            max_num = max(max_num, int(num))\n\n    return str(max_num)",
        "test": "assert solution(\"5\\n11111\\n9 8 7 6 5 4 3 2 1\") == \"99999\"",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 4012,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def find_operations(a, b, c):\n        A, B, C = a, b, c\n        operations = 0\n\n        while A != 1 or B % A != 0 or C % B != 0:\n            if A != 1 and B % A == 0 and C % B == 0:\n                B += 1\n                operations += 1\n            elif B % A != 0:\n                delta = abs(A - B % A)\n                if B + delta > C:\n                    B += delta\n                    operations += delta\n                else:\n                    A = B % A\n                    B += A\n                    operations += A\n            elif C % B != 0:\n                B, C = C, B\n            else:\n                A = B % A\n                B += A\n                operations += A\n\n        return operations, A, B, C\n\n    def process_test_cases(t: int):\n        for _ in range(t):\n            a, b, c = map(int, input().split())\n            res, A, B, C = find_operations(a, b, c)\n            print(res)\n            print(f\"{A} {B} {C}\")\n\n    t = int(input())\n    process_test_cases(t)\n",
        "test": "assert solution(\"2\\n123 321 456\\n1 2 3\\n\") == \"1\\n1 2 3\\n102\\n114 228 456\"",
        "num_ids": 1284,
        "indeed": false
    },
    {
        "number": 4013,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    instability = max(a) - min(a)\n    for i in range(n):\n        new_a = a[:i] + a[i+1:]\n        new_instability = max(new_a) - min(new_a)\n        instability = min(instability, new_instability)\n\n    return str(instability)",
        "test": "assert solution(\"4\\n1 3 3 7\") == \"2\"",
        "num_ids": 545,
        "indeed": true
    },
    {
        "number": 4014,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def prepare_exams(exams, n):\n        days = [0] * (n + 1)\n        for i, exam in enumerate(exams):\n            s, d, c = exam\n            for j in range(s, d):\n                days[j] += 1\n            days[d] += 1\n        return days\n\n    def find_schedule(exams, n, m):\n        days = prepare_exams(exams, n)\n        schedule = [0] * (n + 1)\n        for i, exam in enumerate(exams):\n            s, d, c = exam\n            found = False\n            for j in range(s, d - c):\n                if all(days[k] == 0 for k in range(j, j + c)):\n                    for k in range(j, j + c):\n                        schedule[k] = i + 1\n                    found = True\n                    break\n            if not found:\n                return -1\n        return schedule[1:]\n\n    data = list(map(int, stdin.split()))\n    n, m = data[0], data[1]\n    exams = [data[2 + i * 3: 2 + (i + 1) * 3] for i in range(m)]\n    schedule = find_schedule(exams, n, m)\n    if schedule == -1:\n        return \"-1\"\n    return \" \".join(map(str, schedule))",
        "test": "assert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"",
        "num_ids": 1543,
        "indeed": false
    },
    {
        "number": 4015,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"0\"\n    if n * 2 == m or n * 3 == m:\n        return \"1\"\n    if n % 2 != m % 2 or n % 3 != m % 3:\n        return \"-1\"\n    steps = 0\n    while n != m:\n        if n > m:\n            n //= 2\n        else:\n            n //= 3\n        steps += 1\n    return str(steps)",
        "test": "assert solution(\"42 42\") == \"0\"",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 4016,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    t = stdin.readline().strip()\n    \n    length = (len(t) * k) + k - 1\n    s = t * k\n    s = s[:length]\n    \n    return s\n\ndef",
        "test": "assert solution(\"3 2\\ncat\") == \"catcat\"",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 4017,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    nice_indices = []\n    for i in range(n):\n        if sum(a) - a[i] == a[i]:\n            nice_indices.append(i + 1)\n\n    return f\"{len(nice_indices)}\\n{' '.join(map(str, nice_indices))}\"",
        "test": "assert solution(\"4\\n8 3 5 2\") == \"2\\n1 4\"",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 4018,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n\n    def is_subsequence(t: str) -> bool:\n        it1, it2 = iter(s), iter(t)\n        try:\n            while True:\n                if next(it1) == next(it2):\n                    return True\n        except StopIteration:\n            return False\n\n    def find_min_cost(t: str) -> int:\n        return n - len(t)\n\n    S = set()\n    total_cost = 0\n\n    for i in range(n, 0, -1):\n        for j in range(n - i + 1):\n            t = s[j:j + i]\n            if is_subsequence(t) and t not in S:\n                S.add(t)\n                total_cost += find_min_cost(t)\n                if len(S) == k:\n                    return total_cost\n\n    return -1\n",
        "test": "assert solution(\"5 6\\naaaaa\\n\") == \"15\\n\"",
        "num_ids": 946,
        "indeed": false
    },
    {
        "number": 4019,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(adj, d):\n        visited = [False] * n\n        stack = [(1, 0)]\n        while stack:\n            v, p_degree = stack.pop()\n            visited[v - 1] = True\n            degree = 0\n            for u in adj[v - 1]:\n                if u != p:\n                    if not visited[u - 1]:\n                        stack.append((u, degree))\n                    else:\n                        degree += 1\n            if v == 1:\n                return degree == d\n            if degree == 0:\n                return False\n        return True\n\n    def find_spanning_tree(adj, d):\n        tree = []\n        visited = [False] * n\n        stack = [(1, 0)]\n        while stack:\n            v, p = stack.pop()\n            visited[v - 1] = True\n            degree = 0\n            for u in adj[v - 1]:\n                if u != p:\n                    if not visited[u - 1]:\n                        stack.append((u, v))\n                        tree.append((v, u))\n                    else:\n                        degree += 1\n            if degree == 0 and v != 1:\n                return False\n        if visited[0] and d != 0:\n            return False\n        return tree\n\n    stdin = stdin.split('\\n')\n    n, m, D = map(int, stdin[0].split())\n    adj = [[] for _ in range(n)]\n    for i in range(m):\n        v, u = map(int, stdin[i + 1].split())\n        adj[v - 1].append(u)\n        adj[u - 1].append(v)\n\n    if is_valid(adj, D):\n        tree = find_spanning_tree(adj, D)\n        if tree:\n            return 'YES\\n' + '\\n'.join(f'{v} {u}' for v, u in tree)\n    return 'NO'",
        "test": "assert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\"",
        "num_ids": 1739,
        "indeed": false
    },
    {
        "number": 4020,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    time1, time2 = stdin.split('\\n')\n    h1, m1 = map(int, time1.split(':'))\n    h2, m2 = map(int, time2.split(':'))\n    m_diff = (h2 * 60 + m2) - (h1 * 60 + m1)\n    m_mid = m1 + m_diff // 2\n    h_mid, m_mid = divmod(m_mid, 60)\n    h3 = (h1 + h_mid) % 24\n    m3 = m_mid\n    return f\"{h3:02d}:{m3:02d}\"",
        "test": "assert solution(\"10:00\\n11:00\") == \"10:30\"",
        "num_ids": 614,
        "indeed": true
    },
    {
        "number": 4021,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    count = 0\n    while a > 1:\n        a >>= 1\n        count += 1\n    return str(count)",
        "test": "assert solution(\"2\") == \"1\"",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 4022,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l, r))\n\n    def segment_intersection(seg1: tuple, seg2: tuple) -> tuple:\n        left = max(seg1[0], seg2[0])\n        right = min(seg1[1], seg2[1])\n        return (left, right) if left <= right else None\n\n    def segment_length(seg: tuple) -> int:\n        return seg[1] - seg[0]\n\n    def max_intersection(segment_to_remove: int) -> int:\n        max_len = 0\n        for i in range(n):\n            if i != segment_to_remove:\n                intersection = segment_intersection(segments[i], segments[segment_to_remove])\n                if intersection:\n                    max_len = max(max_len, segment_length(intersection))\n        return max_len\n\n    max_len = 0\n    for i in range(n):\n        max_len = max(max_len, max_intersection(i))\n\n    return str(max_len)",
        "test": "assert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n\") == \"2\"",
        "num_ids": 1045,
        "indeed": false
    },
    {
        "number": 4023,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    if all(x == a[0] for x in a):\n        return \"YES\"\n\n    max_height = max(a)\n    min_height = min(a)\n\n    if max_height - min_height > 1:\n        return \"NO\"\n\n    if a[0] != a[-1]:\n        return \"NO\"\n\n    for i in range(1, n - 1):\n        if a[i] != a[i - 1] and a[i] != a[i + 1]:\n            return \"NO\"\n\n    return \"YES\"\n",
        "test": "assert solution(\"3\\n4 5 3\") == \"NO\"",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 4024,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = input()\n\n    # Create a set of subsequences for the given string\n    subsequences = set()\n    for i in range(n):\n        for j in range(i, n):\n            subsequences.add(s[i:j + 1])\n\n    # Calculate the total cost to obtain the set S\n    total_cost = 0\n    for subseq in sorted(subsequences, key=len):\n        if len(subseq) == 1:\n            total_cost += 0\n        else:\n            total_cost += n - len(subseq)\n\n        if len(subseq) == n:\n            total_cost -= (n - 1)\n\n        if len(subseq) >= n - (n - k):\n            total_cost -= (n - 1)\n\n        if len(subseq) > n - (n - k):\n            total_cost -= (len(subseq) - (n - (n - k)) - 1)\n            break\n\n    if total_cost > 0 and len(subsequences) < k:\n        return -1\n    else:\n        return total_cost\n",
        "test": "assert solution(\"5 6\\naaaaa\") == \"15\"",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 4025,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    total_days = a + b + c\n\n    # Calculate the maximum number of days the cat can eat without additional food purchases\n    max_days = 7\n    for i in range(1, 7):\n        if i % 7 not in [1, 3, 4]:\n            max_days = i\n            break\n\n    return min(total_days, max_days)",
        "test": "assert solution(\"3 2 2\") == \"7\"",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 4026,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(tile_size, square_size):\n        return tile_size <= square_size\n\n    def is_symmetric(square):\n        for i in range(len(square)):\n            for j in range(len(square)):\n                if square[i][j] != square[j][i]:\n                    return False\n        return True\n\n    def place_tile(square, tile, row, col):\n        if row + 2 > len(square) or col + 2 > len(square):\n            return False\n\n        for i in range(2):\n            for j in range(2):\n                if square[row + i][col + j] != 0 and square[row + i][col + j] != tile[i][j]:\n                    return False\n\n        for i in range(2):\n            for j in range(2):\n                square[row + i][col + j] = tile[i][j]\n\n        return True\n\n    def construct_square(n, m, tiles, square_size):\n        square = [[0 for _ in range(square_size)] for _ in range(square_size)]\n        for tile_type in tiles:\n            top_left, top_right, bottom_left, bottom_right = tile_type\n            tile = [[top_left, top_right], [bottom_left, bottom_right]]\n            if is_valid(2, square_size):\n                for i in range(square_size - 1):\n                    for j in range(square_size - 1):\n                        if square[i][j] == 0 and place_tile(square, tile, i, j):\n                            if is_symmetric(square):\n                                return True\n        return False\n\n    test_cases = int(stdin.readline())\n    result = []\n\n    for _ in range(test_cases):\n        n, m = map(int, stdin.readline().split())\n        tiles = []\n        for _ in range(n):\n            top_left, top_right = map(int, stdin.readline().split())\n            bottom_left, bottom_right = map(int, stdin.readline().split())\n            tiles.append((top_left, top_right, bottom_left, bottom_right))\n        if construct_square(n, m, tiles, m):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result) ",
        "test": "assert solution(\"\"\"6",
        "num_ids": 1439,
        "indeed": false
    },
    {
        "number": 4027,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    # Check if n is even or odd\n    if n % 2 == 0:\n        # If n is even, the minimum possible value of |sum(A) - sum(B)| is 0\n        return \"0\"\n    else:\n        # If n is odd, the minimum possible value of |sum(A) - sum(B)| is 1\n        return \"1\"\n",
        "test": "assert solution('5\\n') == '1'",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 4028,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    mod = 1000000007\n\n    def is_valid(seq: str) -> bool:\n        stack = []\n        for bracket in seq:\n            if bracket == '(':\n                stack.append(bracket)\n            else:\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    def count_valid_sequences(length: int, substring: str) -> int:\n        total = 0\n        for i in range(length):\n            total += count_valid_sequences(i, substring) * count_valid_sequences(length - i - len(substring), substring)\n            total %= mod\n        return total\n\n    result = count_valid_sequences(2 * n, s)\n    if is_valid(s):\n        result -= count_valid_sequences(2 * n - len(s), s)\n        result %= mod\n\n    return result",
        "test": "assert solution(3, \"(()\") == 4",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 4029,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_str = str(n)\n    swaps_count = 0\n\n    for i in range(len(n_str) - 1):\n        if n_str[i] == '0' and n_str[i + 1] != '0':\n            n_str = n_str[:i] + n_str[i + 1] + n_str[i] + n_str[i + 2:]\n            swaps_count += 1\n\n    if n_str[-1] == '0':\n        n_str = n_str[:-1]\n        swaps_count += 1\n\n    if n_str[0] == '0':\n        return -1\n\n    if int(n_str) % 25 == 0:\n        return swaps_count\n    else:\n        for i in range(len(n_str) - 1):\n            for j in range(i + 1, len(n_str)):\n                n_str_new = list(n_str)\n                n_str_new[i], n_str_new[j] = n_str_new[j], n_str_new[i]\n                n_str_new = ''.join(n_str_new)\n\n                if int(n_str_new) % 25 == 0:\n                    return swaps_count + 1\n\n    return -1\n",
        "test": "assert solution('5071') == 4",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 4030,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def count_swaps(s, coloring):\n        swaps = 0\n        for i in range(1, len(s)):\n            if coloring[i] != coloring[i - 1] and s[i] < s[i - 1]:\n                swaps += 1\n        return swaps\n\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    if sorted(s) != list(s):\n        return \"0\\n1\"\n    else:\n        coloring = [1] * n\n        return f\"{n}\\n{' '.join(map(str, coloring))}\"\n",
        "test": "assert solution(\"8\\naaabbcbb\") == \"2\\n1 2 1 2 1 2 1 1\"",
        "num_ids": 610,
        "indeed": false
    },
    {
        "number": 4031,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(s1: str, s2: str) -> bool:\n        for i in range(len(s2) - len(s1) + 1):\n            if s1 == s2[i:i + len(s1)]:\n                return True\n        return False\n\n    def find_first_not_contained(strings: list[str]) -> str:\n        for s1 in strings:\n            contained = False\n            for s2 in strings:\n                if s1 != s2 and is_substring(s1, s2):\n                    contained = True\n                    break\n            if not contained:\n                return s1\n        return \"\"\n\n    def can_reorder(strings: list[str]) -> bool:\n        while strings:\n            first_not_contained = find_first_not_contained(strings)\n            if not first_not_contained:\n                return False\n            strings.remove(first_not_contained)\n        return True\n\n    n = int(stdin.readline().strip())\n    strings = []\n    for _ in range(n):\n        strings.append(stdin.readline().strip())\n\n    if can_reorder(strings):\n        return \"YES\\n\" + \"\\n\".join(strings)\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5\\na\\nabacaba\\nba\\naba\\nabab\") == \"NO\"",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 4032,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    problems = list(map(int, input().split()))\n    solved = 0\n\n    while problems and (problems[0] <= k or problems[-1] <= k):\n        if problems[0] <= k:\n            problems.pop(0)\n        elif problems[-1] <= k:\n            problems.pop()\n        solved += 1\n\n    return str(solved)",
        "test": "assert solution('5 2\\n3 1 2 1 3') == '0'",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 4033,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    p = a + b + 2\n    if a == b:\n        p = a + b + 4\n    return str(p)",
        "test": "assert solution(\"4 4\") == \"12\"",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 4034,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    if sorted(s) != sorted(set(s)):\n        return \"NO\"\n\n    coloring = [\"0\"] * n\n    for i in range(n):\n        if s[i] == sorted(set(s))[i // 2]:\n            coloring[i] = \"1\"\n\n    return \"YES\\n\" + \"\".join(coloring)",
        "test": "assert solution(\"8\\naaabbcbb\") == \"YES\\n01011011\"",
        "num_ids": 724,
        "indeed": false
    },
    {
        "number": 4035,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_price = -1\n    for price in range(1, A * 10 + 1):\n        if (price * 10) % 12 == A and (price * 10) % 15 == B:\n            if min_price == -1:\n                min_price = price\n            else:\n                min_price = min(min_price, price)\n    return str(min_price)",
        "test": "assert solution(\"8 10\") == \"93\"",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 4036,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    if k == 1:\n        return \"YES\\n\" + str(n)\n\n    if n % k != 0:\n        return \"NO\"\n\n    a = [1] * k\n    for i in range(1, k):\n        a[i] = a[i - 1] + 1\n        while a[i] * 2 > n // k:\n            a[i] -= 1\n\n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"",
        "test": "assert solution(\"8 3\\n\") == \"NO\"",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 4037,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.readline().split())\n    projects = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\n    projects.sort(key=lambda x: (-x[1], -x[0]))\n\n    subset = []\n\n    for project in projects:\n        if r >= project[0]:\n            subset.append(project)\n            r += project[1]\n\n    return str(len(subset))",
        "test": "assert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == 5",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 4038,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindromic(matrix: List[List[int]]) -> bool:\n        for row in matrix:\n            if row != row[::-1]:\n                return False\n        for col in range(len(matrix)):\n            if [matrix[row][col] for row in range(len(matrix))] != [matrix[row][col] for row in range(len(matrix))][::-1]:\n                return False\n        return True\n\n    n, numbers = map(int, stdin.split('\\n')[0].split())\n    numbers = list(map(int, stdin.split('\\n')[1].split()))\n\n    if n == 1:\n        return f\"YES\\n{numbers[0]}\"\n\n    matrix = [[0] * n for _ in range(n)]\n    numbers.sort()\n\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = numbers.pop()\n\n    if is_palindromic(matrix):\n        return f\"YES\\n{' '.join(str(x) for x in matrix[i])}\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\"",
        "num_ids": 1320,
        "indeed": false
    },
    {
        "number": 4039,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def can_complete_projects(projects: List[List[int]], rating: int) -> bool:\n        for i in range(len(projects)):\n            if rating < projects[i][0]:\n                return False\n            rating += projects[i][1]\n            if rating < 0:\n                return False\n        return True\n\n    def binary_search(projects: List[List[int]], left: int, right: int) -> str:\n        if left > right:\n            return \"NO\"\n\n        mid = (left + right) // 2\n        if can_complete_projects(projects, mid):\n            if mid == 0 or not can_complete_projects(projects, mid - 1):\n                return \"YES\"\n            else:\n                return binary_search(projects, left, mid - 1)\n        else:\n            return binary_search(projects, mid + 1, right)\n\n    lines = stdin.splitlines()\n    n, r = map(int, lines[0].split())\n    projects = [list(map(int, line.split())) for line in lines[1:]]\n\n    max_required_rating = max(project[0] for project in projects)\n    min_rating_change = min(project[1] for project in projects)\n\n    if r >= max_required_rating:\n        return \"YES\"\n    elif min_rating_change <= 0:\n        return binary_search(projects, max_required_rating, r)\n    else:\n        return \"NO\"",
        "test": "assert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\") == \"YES\"",
        "num_ids": 766,
        "indeed": false
    },
    {
        "number": 4040,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(positions: List[int]) -> bool:\n        for i in range(len(positions) - 1):\n            if positions[i + 1] <= positions[i]:\n                return False\n        return True\n\n    def can_reach_end(positions: List[int], length: int) -> bool:\n        curr_pos = 0\n        for pos in positions:\n            if pos - curr_pos > length:\n                return False\n            curr_pos = pos + length\n        return curr_pos >= n + 1\n\n    def find_platform(pos: int, positions: List[int]) -> int:\n        for i, p in enumerate(positions):\n            if p == pos:\n                return i + 1\n        return 0\n\n    def create_river(positions: List[int], lengths: List[int], n: int) -> List[int]:\n        river = [0] * (n + 2)\n        for i, pos in enumerate(positions):\n            length = lengths[i]\n            for j in range(pos, pos + length):\n                river[j] = i + 1\n        return river[1:-1]\n\n    input_data = list(map(int, stdin.split()))\n    n, m, d = input_data[0], input_data[1], input_data[2]\n    lengths = input_data[3:]\n\n    positions = [i for i in range(1, m + 1)]\n\n    while True:\n        if is_valid(positions):\n            if can_reach_end(positions, d):\n                river = create_river(positions, lengths, n)\n                result = \"YES\\n\" + \" \".join(map(str, river))\n                return result\n            else:\n                break\n        else:\n            break\n\n    return \"NO\"",
        "test": "assert solution(\"10 1 11\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 1\"",
        "num_ids": 1099,
        "indeed": false
    },
    {
        "number": 4041,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n, m = len(s), len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n][m]\n\ndef",
        "test": "assert solution(\"baaba\\nab\") == 2",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 4042,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int((x + 1) // 0.2)\n    b = int((5 - x) // 0.2)\n    return f\"{a} {b}\\n\"",
        "test": "assert solution(\"2.572479\") == \"10 3\\n\"",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 4043,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find_degree(n, d):\n        degree = 1\n        while degree < n - 1:\n            degree = (degree * 2) + 1\n        return degree\n\n    def find_max_degree(n, d):\n        degree = find_degree(n, d)\n        max_degree = (degree + 1) // 2\n        return min(max_degree, k)\n\n    def find_max_depth(n, d):\n        degree = find_degree(n, d)\n        max_depth = (degree + 1) // 2\n        return (n - 1) - max_depth\n\n    def find_children(parent, degree, max_degree, n, d):\n        children = []\n        for i in range(1, max_degree + 1):\n            child = (parent + i) % degree\n            children.append(child)\n            if len(children) == n - 1:\n                break\n        return children\n\n    def build_tree(parent, children, max_depth, n, d):\n        tree = []\n        if max_depth == 0:\n            return tree\n        for child in children:\n            tree.append((parent, child))\n            tree.extend(build_tree(child, find_children(child, degree, max_degree, n, d), max_depth - 1, n, d))\n        return tree\n\n    n, d, k = map(int, stdin.split())\n\n    degree = find_degree(n, d)\n    max_degree = find_max_degree(n, d)\n    max_depth = find_max_depth(n, d)\n\n    if degree > k:\n        return \"NO\"\n\n    tree = build_tree(1, find_children(1, degree, max_degree, n, d), max_depth, n, d)\n\n    output = [\"YES\"]\n    for edge in tree:\n        output.append(\" \".join(map(str, edge)))\n    return \"\\n\".join(output)",
        "test": "assert solution(\"6 2 3\") == \"NO\"",
        "num_ids": 1582,
        "indeed": false
    },
    {
        "number": 4044,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = ''\n    for i in range(a):\n        s += '0'\n    for i in range(b):\n        s += '1'\n\n    indices = sorted(random.sample(range(1, len(s)), x))\n    for i in indices:\n        s = s[:i] + ('0' if s[i] == '1' else '1') + s[i + 1:]\n\n    return s\n",
        "test": "assert solution(3, 3, 3) in [\"110100\", \"101100\", \"110010\", \"100110\", \"011001\", \"001101\", \"010011\", \"001011\"]",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 4045,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    if n < 2 or (s[0] == s[1] or t[0] == t[1]):\n        return \"NO\"\n\n    res = []\n    for i in range(n):\n        res.append(s[0])\n        res.append(s[1])\n        res.append(t[0])\n\n    return \"YES\\n\" + \"\".join(res)",
        "test": "assert solution(\"3\\naa\\ncb\") == \"YES\\nacbcbacbab\"",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 4046,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *q = map(int, stdin.split())\n    p = [0] * n\n    for i in range(n - 1):\n        if q[i] == 0:\n            p[i] = i + 1\n        else:\n            for j in range(i + 1, n):\n                if q[i] == j - i:\n                    p[i] = j\n                    break\n            if p[i] == 0:\n                return \"-1\"\n    p[-1] = n - sum(p) + p[0]\n    if p[-1] <= n:\n        return \" \".join(map(str, p))\n    else:\n        return \"-1\"",
        "test": "assert solution(\"5\\n1 1 1 1\\n\") == \"1 2 3 4 5\\n\"",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 4047,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    coords = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    coins = 0\n    min_coord = min(coords)\n    max_coord = max(coords)\n\n    for coord in coords:\n        coins += abs(coord - min_coord)\n\n    return str(coins)",
        "test": "assert solution(\"5\\n2 2 2 3 3\") == \"2\"",
        "num_ids": 502,
        "indeed": false
    },
    {
        "number": 4048,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    i = 1\n    j = 1\n    count = 0\n\n    while i * j < n:\n        if i * j + j + 1 <= n:\n            i += 1\n        else:\n            j += 1\n        count += 1\n\n    return str(count)",
        "test": "assert solution(100) == 8, \"Test case 2 failed\"",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 4049,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n    \n    alice_wins = 0\n    bob_wins = 0\n    \n    for i in range(n):\n        if (a[i] == 0 and b[i] == 2) or (a[i] == 1 and b[i] == 0) or (a[i] == 2 and b[i] == 1):\n            alice_wins += 1\n        elif (b[i] == 0 and a[i] == 2) or (b[i] == 1 and a[i] == 0) or (b[i] == 2 and a[i] == 1):\n            bob_wins += 1\n            \n    return f\"{alice_wins} {bob_wins}\"",
        "test": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 4050,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            blocks.append((i, j))\n\n    def is_valid(blocks):\n        for i in range(len(blocks)):\n            for j in range(i + 1, len(blocks)):\n                if blocks[i][1] > blocks[j][0] or blocks[j][1] > blocks[i][0]:\n                    return False\n        return True\n\n    def same_sum(blocks):\n        sums = []\n        for l, r in blocks:\n            sums.append(sum(arr[l : r + 1]))\n        return len(set(sums)) == 1\n\n    def find_max_blocks(blocks):\n        max_blocks = []\n        for i in range(len(blocks)):\n            max_blocks.append(blocks[i])\n            if is_valid(max_blocks) and same_sum(max_blocks):\n                return max_blocks\n        return max_blocks\n\n    max_blocks = find_max_blocks(blocks)\n    output = [str(len(max_blocks))]\n    for block in max_blocks:\n        output.append(\"{} {}\".format(block[0] + 1, block[1] + 1))\n    return \"\\n\".join(output)",
        "test": "assert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\"",
        "num_ids": 1253,
        "indeed": false
    },
    {
        "number": 4051,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n\n    stacks = []\n    for i in range(n):\n        stack = []\n        for j in range(arr[i]):\n            stack.append(i + 1)\n        stacks.append(stack)\n\n    while len(stacks) > 1:\n        tallest_index = 0\n        for i in range(1, len(stacks)):\n            if len(stacks[i]) > len(stacks[tallest_index]):\n                tallest_index = i\n            elif len(stacks[i]) == len(stacks[tallest_index]) and i < tallest_index:\n                tallest_index = i\n\n        for i in range(tallest_index + 1, len(stacks)):\n            if len(stacks[tallest_index]) - len(stacks[i]) >= 2:\n                return \"NO\"\n\n        stacks.pop(tallest_index)\n\n        for i in range(tallest_index, len(stacks)):\n            if i > 0:\n                if len(stacks[i - 1]) - len(stacks[i]) >= 2:\n                    return \"NO\"\n            stacks[i] += [tallest_index + 1] * (len(stacks[tallest_index]) - len(stacks[i]))\n\n    return \"YES\"",
        "test": "assert solution(\"3\\n1 2 3\") == \"YES\"",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 4052,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def swap(s: str, i: int) -> str:\n        s = list(s)\n        s[i], s[i + 1] = s[i + 1], s[i]\n        return ''.join(s)\n\n    n, s, t = stdin.strip().split('\\n')\n    n = int(n)\n\n    if sorted(s) != sorted(t):\n        return \"-1\\n\"\n\n    moves = []\n    for i in range(n - 1):\n        if s[i] != t[i]:\n            for j in range(i + 1, n):\n                if s[j] == t[i]:\n                    s = swap(s, j)\n                    moves.append(j)\n                    break\n            s = swap(s, i)\n            moves.append(i)\n\n    return f\"{len(moves)}\\n{' '.join(map(str, moves))}\\n\"",
        "test": "assert solution(\"4\\nabcd\\naccd\") == \"-1\\n\"",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 4053,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n', 1)[0])\n    strings = stdin.split('\\n')[1:]\n    result = ['P'] * (2 * n - 2)\n\n    for i in range(1, n):\n        prefix = ''.join(strings[:i])\n        suffix = ''.join(strings[-i:])\n\n        if prefix in strings and suffix in strings:\n            for j in range(i - 1, (2 * n - 2) - i + 1):\n                result[j] = 'P'\n            for j in range((2 * n - 2) - i + 1, 2 * n - 2 - i):\n                result[j] = 'S'\n\n    return ''.join(result)",
        "test": "assert solution(\"3\\na\\naa\\na\\naa\") == \"PPSS\"",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 4054,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    a = list(map(int, stdin.split()))\n    \n    # Calculate the sum of the elements in the list\n    total_sum = sum(a)\n    \n    # Calculate the sum of squares of the elements in the list\n    square_sum = sum(x**2 for x in a)\n    \n    # Check if the sum of squares is equal to the square of the sum\n    if square_sum == total_sum**2:\n        return 1\n    else:\n        return 0",
        "test": "assert solution(\"1 3 5 7 9\") == 0",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 4055,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_disturbed(i: int) -> bool:\n        return 1 < i < n and a[i - 1] == a[i + 1] == 1 and a[i] == 0\n\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    disturbed_flats = [i for i in range(2, n - 1) if is_disturbed(i)]\n    return str(max(0, len(disturbed_flats) - 1))",
        "test": "assert solution(\"5\\n1 1 0 0 0\") == \"0\"",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 4056,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    result = a[0]\n    for i in range(1, n):\n        result = lcm(result, a[i])\n\n    count = 0\n    i = 1\n    while i <= result:\n        if result % i == 0:\n            count += 1\n        i += 1\n\n    return str(count)",
        "test": "assert solution(\"6\\n6 90 12 18 30 18\") == \"4\" ",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 4057,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    coins = sorted(list(map(int, stdin.split('\\n')[1].split())))\n\n    pockets = 1\n    current_value = coins[0]\n    for i in range(1, n):\n        if coins[i] != current_value:\n            current_value = coins[i]\n        else:\n            pockets += 1\n            current_value = coins[i]\n\n    return str(pockets)",
        "test": "assert solution(\"1\\n100\") == 1",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 4058,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.readline().split())\n    vova_house = list(map(int, stdin.readline().split()))\n\n    heaters_needed = 0\n    heaters_on = 0\n    max_position = 0\n\n    for i in range(n):\n        if vova_house[i] == 1:\n            max_position = max(max_position, i + r)\n            heaters_on += 1\n        elif i < max_position:\n            continue\n        else:\n            heaters_needed += 1\n            heaters_on = 1\n            max_position = i + r\n\n    if heaters_needed + heaters_on > n:\n        return -1\n    else:\n        return heaters_needed",
        "test": "assert solution(\"5 3\\n1 0 0 0 1\") == \"2\"",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 4059,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            c = n - a*b\n            if c > 0:\n                count += 1\n    return str(count)",
        "test": "assert solution(\"3\") == \"3\"",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 4060,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_regular(brackets: str) -> bool:\n        stack = []\n        for bracket in brackets:\n            if bracket == '(':\n                stack.append(bracket)\n            else:\n                if not stack or stack.pop() != '(':\n                    return False\n        return len(stack) == 0\n\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    count = 0\n    for i in range(n):\n        if s[i] == '(':\n            s_copy = list(s)\n            s_copy[i] = ')'\n            if is_regular(''.join(s_copy)):\n                count += 1\n        elif s[i] == ')':\n            s_copy = list(s)\n            s_copy[i] = '('\n            if is_regular(''.join(s_copy)):\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"6\\n()()()\") == 0",
        "num_ids": 739,
        "indeed": false
    },
    {
        "number": 4061,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    if s == t:\n        return 0\n    n, m = len(s), len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][m] - t.count(s[:dp[n][m]])",
        "test": "assert solution(\"baaba\\nab\") == 2",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 4062,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    \n    # Calculate the maximum possible value of x * y\n    max_product = max(a * d, b * d, b * c, a * c)\n    \n    return str(max_product)",
        "test": "assert solution('1 2 1 1') == '2'",
        "num_ids": 351,
        "indeed": true
    },
    {
        "number": 4063,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, difficulties = int(stdin.split('\\n')[0]), list(map(int, stdin.split('\\n')[1].split()))\n\n    # Initialize variables\n    num_arc = num_abc = 0\n    min_difficulty = max(difficulties)\n\n    # Count number of problems for ARCs and ABCs for each possible K\n    for K in range(1, max(difficulties) + 1):\n        arc_count = abc_count = 0\n        for difficulty in difficulties:\n            if difficulty >= K:\n                arc_count += 1\n            else:\n                abc_count += 1\n        if arc_count == abc_count:\n            num_arc = arc_count\n            num_abc = abc_count\n            min_difficulty = K\n\n    return str(min_difficulty)",
        "test": "assert solution(\"8\\n7 10 15 14 6 3 9 12\") == \"2\"",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 4064,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    h, n, l, r, *a = map(int, stdin.split())\n    a.sort()\n    a = [0] + a\n    total_slept = 0\n    slept = 0\n\n    for i in range(1, n + 1):\n        if a[i] - a[i - 1] - 1 >= l and a[i] - a[i - 1] - 1 <= r:\n            slept += 1\n        total_slept += a[i] - a[i - 1]\n\n    if total_slept + l <= h:\n        slept += n - total_slept // (l + 1)\n\n    return str(slept)",
        "test": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\\n\") == \"3\"",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 4065,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    difficulties = sorted([int(x) for x in stdin.split(\"\\n\")[1].split()])\n\n    max_problems = 0\n    for i in range(n):\n        temp_difficulties = [difficulties[i]]\n        for j in range(i + 1, n):\n            if difficulties[j] > temp_difficulties[-1] * 2:\n                temp_difficulties.append(difficulties[j])\n            if j == n - 1:\n                max_problems = max(max_problems, len(temp_difficulties))\n\n    return str(max_problems)",
        "test": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 4066,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    min_lcm = float('inf')\n    min_i = 0\n    min_j = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            current_lcm = lcm(a[i], a[j])\n            if current_lcm < min_lcm:\n                min_lcm = current_lcm\n                min_i = i + 1\n                min_j = j + 1\n\n    return f\"{min_i} {min_j}\\n\"",
        "test": "assert solution(\"5\\n5 2 11 3 7\\n\") == \"2 4\\n\"",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 4067,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.splitlines())\n    n = int(n)\n    s = list(s)\n\n    def check_balance(s: list) -> bool:\n        count = [0] * 3\n        for i in range(n):\n            count[int(s[i])] += 1\n        return count[0] == count[1] == count[2]\n\n    def lexicographically_smallest_balanced_string(s: list, n: int) -> str:\n        s.sort()\n        count = [0] * 3\n        for i in range(n):\n            count[int(s[i])] += 1\n        for i in range(n):\n            if count[i] < count[(i + 1) % 3]:\n                s[i], s[i + 1] = s[i + 1], s[i]\n                count[i] += 1\n                count[(i + 1) % 3] -= 1\n            if check_balance(s):\n                return \"\".join(s)\n\n    return lexicographically_smallest_balanced_string(s, n)",
        "test": "assert solution(\"6\\n000000\") == \"001122\"",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 4068,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M, *broken_steps = map(int, stdin.split())\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, N + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n        for j in range(M):\n            if i - 1 == broken_steps[j]:\n                dp[i] -= dp[i - 2]\n        dp[i] %= 1000000007\n\n    return str(dp[N])",
        "test": "assert solution(\"10 2\\n2 5\\n\") == \"20\"",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 4069,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    return str(min(abs(x + d * k), abs(x - d * k)))",
        "test": "assert solution(\"6 2 4\") == \"2\"",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 4070,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    binary_str = bin(n)[2:]\n    binary_str_len = len(binary_str)\n    count = 0\n    i = binary_str_len - 1\n    while i >= 0:\n        if binary_str[i] == '0':\n            count += 1\n        else:\n            break\n        i -= 1\n    return str(count)",
        "test": "assert solution(14) == 0",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 4071,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = a ** 3\n    return str(result)",
        "test": "assert solution(\"3\") == \"27\"",
        "num_ids": 162,
        "indeed": false
    },
    {
        "number": 4072,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    if a % 3 == 0:\n        return \"1\"\n    else:\n        return \"0\"",
        "test": "assert solution(\"927\") == \"1\"",
        "num_ids": 180,
        "indeed": false
    },
    {
        "number": 4073,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input data\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    # Calculate the sum\n    result = sum(a)\n\n    # Check for the conditions\n    if result > 40:\n        result = 40\n    if result < 10:\n        result = 10\n\n    return str(result)",
        "test": "assert solution(\"5\\n9 3 7 5 1\") == 2",
        "num_ids": 1429,
        "indeed": false
    },
    {
        "number": 4074,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n_test_cases = int(lines[0])\n    output = []\n\n    for i in range(1, n_test_cases + 1):\n        n, k = map(int, lines[i].split())\n        if n == k:\n            output.append(1)\n        elif n % k == 0:\n            output.append(n // k)\n        else:\n            output.append(n)\n\n    return '\\n'.join(map(str, output))",
        "test": "assert solution(\"5\\n8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\") == \"2\\n8\\n1\\n999999733\\n1\"",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 4075,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def is_lighted(switches: list, bulb_switches: list, p: int) -> bool:\n        on_switches = sum(switches[s - 1] for s in bulb_switches)\n        return on_switches % 2 == p\n\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    switches = [False] * N\n    bulbs = [[] for _ in range(M)]\n    for i in range(M):\n        k, *s = map(int, lines[i + 1].split())\n        bulbs[i] = s\n    p = list(map(int, lines[M + 1].split()))\n\n    count = 0\n    for i in range(2 ** N):\n        switch_states = format(i, f'0{N}b')\n        switches = [s == '1' for s in switch_states]\n        if all(is_lighted(switches, bulb_switches, p[j]) for j, bulb_switches in enumerate(bulbs)):\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"",
        "num_ids": 928,
        "indeed": true
    },
    {
        "number": 4076,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n\n    # Calculate the angle the hour and minute hands have moved\n    hour_angle = (H * 30) + (M * 0.5)\n    minute_angle = M * 6\n\n    # Calculate the distance between the two unfixed endpoints\n    distance = abs(A * sin(radians(hour_angle)) - B * sin(radians(minute_angle)))\n\n    return f\"{distance:.12f}\"",
        "test": "assert solution(\"500 1000 11 59\") == \"1498.0000000000000000\"",
        "num_ids": 610,
        "indeed": false
    },
    {
        "number": 4077,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    a.sort()\n    count = 0\n\n    for l in range(n):\n        for r in range(l, n):\n            if a[l] <= m <= a[r]:\n                count += 1\n\n    return str(count)\n",
        "test": "assert solution(\"3 1\\n1 1 1\\n\") == \"6\"",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 4078,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    segments = [list(map(int, stdin.readline().split())) for _ in range(m)]\n\n    def max_min_diff(a: List[int]) -> int:\n        return max(a) - min(a)\n\n    def apply_segments(a: List[int], segments: List[List[int]]) -> List[int]:\n        b = a.copy()\n        for l, r in segments:\n            for i in range(l - 1, r):\n                b[i] -= 1\n        return b\n\n    ans = -1\n    ans_segments = []\n\n    for subset in itertools.chain.from_iterable(itertools.combinations(segments, r) for r in range(len(segments) + 1)):\n        b = apply_segments(a, subset)\n        diff = max_min_diff(b)\n        if diff > ans:\n            ans = diff\n            ans_segments = subset\n\n    return f\"{ans}\\n{len(ans_segments)}\\n\" + \" \".join(map(str, sorted(i + 1 for i, _ in ans_segments))) + \"\\n\"\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 1341,
        "indeed": false
    },
    {
        "number": 4079,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    strings = stdin.split(\"\\n\")[1:]\n\n    def is_diverse(string: str) -> bool:\n        if len(set(string)) != len(string):\n            return False\n\n        for i in range(1, len(string)):\n            if ord(string[i]) - ord(string[i - 1]) != 1:\n                return False\n\n        return True\n\n    result = []\n    for string in strings:\n        if is_diverse(string):\n            result.append(\"Yes\")\n        else:\n            result.append(\"No\")\n\n    return \"\\n\".join(result)\n\n\nstdin = \"\"\"8\nfced\nxyz\nr\ndabcef\naz\naa\nbad\nbabc\"\"\"\n\nprint(solution(stdin)) ",
        "test": "assert solution(\"8\\nfced\\nxyz\\nr\\ndabcef\\naz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\" ",
        "num_ids": 643,
        "indeed": false
    },
    {
        "number": 4080,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def get_difference(a: List[int], segments: List[Tuple[int, int]]) -> int:\n        b = [0] * len(a)\n        for l, r in segments:\n            for i in range(l - 1, r):\n                b[i] -= 1\n        return max(b) - min(b)\n\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    segments = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n\n    d = get_difference(a, segments)\n    segments_to_apply = [(i, d - get_difference(a, [segments[i]])) for i in range(m)]\n    max_difference = max(diff for i, diff in segments_to_apply)\n    valid_segments = [i for i, diff in segments_to_apply if diff == max_difference]\n    q = len(valid_segments)\n\n    return f\"{d}\\n{q}\\n{' '.join(map(str, valid_segments))}\\n\" ",
        "test": "assert solution(\"\"\"5 4",
        "num_ids": 1079,
        "indeed": false
    },
    {
        "number": 4081,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = sorted([int(x) for x in stdin.split(\"\\n\")[1].split(\" \")])\n    \n    moves = []\n    left = 0\n    right = n - 1\n    \n    while left < right:\n        if a[left] < a[right]:\n            moves.append(\"L\")\n            left += 1\n        else:\n            moves.append(\"R\")\n            right -= 1\n    \n    return f\"{len(moves)}\\n{''.join(moves)}\"",
        "test": "assert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"",
        "num_ids": 997,
        "indeed": false
    },
    {
        "number": 4082,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    max_length = 0\n    for i in range(n):\n        if i > 0 and a[i] <= a[i - 1]:\n            continue\n        for j in range(i + 1, n):\n            if a[j] <= a[j - 1]:\n                max_length = max(max_length, j - i)\n                break\n        max_length = max(max_length, n - i)\n\n    return str(max_length)",
        "test": "assert solution(\"2\\n1 2\") == \"2\"",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 4083,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    a.sort()\n    min_operations = float('inf')\n    \n    for i in range(n - k + 1):\n        operations = 0\n        current = a[i]\n        for j in range(i, n):\n            operations += a[j] // current\n            if j - i + 1 >= k and a[j] // current < min_operations:\n                min_operations = a[j] // current\n                \n    return str(min_operations)",
        "test": "assert solution(\"5 3\\n1 2 3 4 5\") == 2",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 4084,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    total_balls = a + b\n    total_blue_balls = a\n\n    if n <= total_balls:\n        blue_balls_in_first_n = n // 2\n        if n % 2 == 1:\n            blue_balls_in_first_n += 1\n    else:\n        blue_balls_in_first_n = total_blue_balls\n        remaining_balls = n - total_balls\n        while remaining_balls > 0:\n            total_balls += total_balls - 1\n            total_blue_balls += total_balls - total_blue_balls\n            if remaining_balls <= total_balls:\n                blue_balls_in_first_n += remaining_balls // 2\n                if remaining_balls % 2 == 1:\n                    blue_balls_in_first_n += 1\n                break\n            else:\n                blue_balls_in_first_n += total_blue_balls\n                remaining_balls -= total_balls\n\n    return str(blue_balls_in_first_n)",
        "test": "assert solution(\"8 3 4\") == \"4\"",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 4085,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_x(divisors: List[int]) -> Union[int, str]:\n        def is_valid(x: int, divisors: List[int]) -> bool:\n            for d in divisors:\n                if x % d != 0:\n                    return False\n            return True\n\n        def binary_search(divisors: List[int]) -> int:\n            left, right = 1, 10**6\n            while left <= right:\n                mid = (left + right) // 2\n                if is_valid(mid, divisors):\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            return left if is_valid(left, divisors) else -1\n\n        return binary_search(divisors)\n\n    t = int(stdin.readline().strip())\n    result = []\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        divisors = list(map(int, stdin.readline().strip().split()))\n        result.append(find_min_x(divisors))\n\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"2\\n8\\n8 2 12 6 4 24 16 3\\n1\\n2\") == \"-1\\n4\" ",
        "num_ids": 954,
        "indeed": false
    },
    {
        "number": 4086,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    arr = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    unique_elements = []\n    for i in range(n - 1, -1, -1):\n        if arr[i] not in unique_elements:\n            unique_elements.append(arr[i])\n\n    output = f\"{len(unique_elements)}\\n{' '.join(map(str, unique_elements[::-1]))}\"\n\n    return output",
        "test": "assert solution(\"5\\n2 4 2 4 4\\n\") == \"2\\n2 4\"",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 4087,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_interesting(n: int) -> bool:\n        return sum(map(int, str(n))) % 4 == 0\n\n    a = int(stdin)\n    n = a\n    while not is_interesting(n):\n        n += 1\n\n    return str(n)",
        "test": "assert solution(\"432\") == \"435\"",
        "num_ids": 373,
        "indeed": true
    },
    {
        "number": 4088,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_distances(s: str) -> List[int]:\n        distances = [0] * len(s)\n        for i, c in enumerate(s):\n            for j in range(i + 1, len(s)):\n                if s[j] > c:\n                    distances[i] += j - i\n        return distances\n\n    def find_t(s: str, b: List[int]) -> str:\n        t = \"\"\n        for c in sorted(set(s), key=lambda x: ord(x)):\n            t += c * b.pop(0)\n        return t\n\n    q = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline().strip())\n        b = list(map(int, stdin.readline().strip().split()))\n\n        distances = calculate_distances(s)\n        if b == distances:\n            result.append(find_t(s, b))\n        else:\n            result.append(\"\")\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"abc\\n1\\n0\") == \"b\"",
        "num_ids": 1008,
        "indeed": false
    },
    {
        "number": 4089,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"a\"\n    elif n <= 26*26:\n        return chr(96 + n)\n    elif n <= 26*26*26:\n        q, r = divmod(n, 26)\n        return solution(q) + solution(r)\n    else:\n        q, r = divmod(n, 26*26*26)\n        return solution(q) + solution(r)\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "assert solution(26) == \"z\"",
        "num_ids": 786,
        "indeed": false
    },
    {
        "number": 4090,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    words = stdin.split(\"\\n\")[1].split()\n\n    def equal_segments(i1, j1, i2, j2):\n        if j1 - i1 != j2 - i2:\n            return False\n        for t in range(j1 - i1):\n            if words[i1 + t] != words[i2 + t]:\n                return False\n        return True\n\n    def abbreviate(i1, j1, i2, j2):\n        if not equal_segments(i1, j1, i2, j2):\n            return None\n        return words[i1].upper() + words[j1].upper()\n\n    abbreviations = set()\n    for i1 in range(n):\n        for j1 in range(i1 + 1, n + 1):\n            for i2 in range(n):\n                for j2 in range(i2 + 1, n + 1):\n                    if i1 != i2 and j1 != j2:\n                        abbreviation = abbreviate(i1, j1, i2, j2)\n                        if abbreviation:\n                            abbreviations.add(abbreviation)\n\n    min_length = len(words)\n    for abbreviation in abbreviations:\n        min_length = min(min_length, len(abbreviation) + n - 2)\n\n    return min_length",
        "test": "assert solution(10, \"a ab a a b ab a a b c\") == 13",
        "num_ids": 1223,
        "indeed": false
    },
    {
        "number": 4091,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def read_line() -> List[str]:\n        return stdin.readline().strip().split()\n\n    def read_int() -> int:\n        return int(stdin.readline().strip())\n\n    def read_ints() -> List[int]:\n        return list(map(int, stdin.readline().strip().split()))\n\n    n, k = read_ints()\n    difficulties = read_ints()\n\n    profit = 0\n    days = [0] * k\n\n    # Calculate the total profit and the number of problems per day\n    for i in range(k):\n        if i == k - 1:\n            days[i] = n - sum(days)\n        else:\n            days[i] = len([x for x in difficulties if x >= profit])\n            profit += max(difficulties[:days[i]])\n\n    return f\"{profit}\\n\" + \" \".join(str(x) for x in days)\n",
        "test": "assert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 4092,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n\n    def has_zero_sum(a: int, b: int, c: int) -> bool:\n        return a + b + c == 0\n\n    zero_subsegments = 0\n    for i in range(n - 2):\n        if has_zero_sum(arr[i], arr[i + 1], arr[i + 2]):\n            zero_subsegments += 1\n\n    return str(zero_subsegments)",
        "test": "assert solution(\"5\\n4 -2 3 -9 2\\n\") == \"0\"",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 4093,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    res = []\n    for i in range(1, t + 1):\n        n, m = map(int, stdin.split(\"\\n\")[i].split())\n        if m == n or m == n * (n - 1) // 2:\n            res.append(m)\n        else:\n            res.append(2 * m - n * (n - 1) // 2)\n    return \"\\n\".join(map(str, res))\n\ndef",
        "test": "assert solution(\"5\\n1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 4094,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    i = 1\n    while True:\n        if k * i == 7 or k * i == 77 or k * i == 777:\n            return str(i)\n        i += 1\n    return \"-1\"",
        "test": "assert solution(7) == 1",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 4095,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, input().split()))\n\n    def median(l, r):\n        if r - l % 2 == 1:\n            return sorted(p[l:r + 1])[(r - l) // 2]\n        else:\n            return sorted(p[l:r + 1])[((r - l) // 2) - 1]\n\n    count = 0\n    for l in range(n):\n        for r in range(l, n):\n            if median(l, r) == m:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"5 5\\n1 2 3 4 5\\n\") == \"1\"",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 4096,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    caffeine = list(map(int, stdin.split()[2:]))\n    caffeine.sort(reverse=True)\n\n    days = 0\n    total_pages = 0\n\n    for i in range(n):\n        if caffeine[i] <= i:\n            total_pages += caffeine[i] - i + 1\n            days += 1\n        else:\n            total_pages += caffeine[i]\n            days += 1\n            for j in range(i + 1, n):\n                if caffeine[j] <= j - i:\n                    total_pages += caffeine[j] - j + i + 1\n                    days += 1\n                else:\n                    total_pages += caffeine[j]\n                    days += 1\n                    break\n            else:\n                return -1\n\n        if total_pages >= m:\n            return str(days)\n\n    return -1",
        "test": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 4097,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    b = list(map(int, stdin.split('\\n')[1].split()))\n\n    if n == 1 or n == 2:\n        return 0\n\n    d = b[1] - b[0]\n    changed = 0\n\n    for i in range(2, n):\n        if b[i] - b[i - 1] != d:\n            changed += 1\n            if changed > 1:\n                return -1\n            d = b[i] - b[i - 1]\n\n    return changed\n\n\ndef",
        "test": "assert solution(\"2\\n500 500\") == \"0\"",
        "num_ids": 1077,
        "indeed": false
    },
    {
        "number": 4098,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    a = list(map(int, stdin.split()[1].split()))\n\n    a.sort()\n\n    teams = []\n    for i in range(k):\n        teams.append([])\n\n    j = 0\n    for i in range(n):\n        teams[j].append(a[i])\n        j += 1\n        if j == k:\n            j -= 1\n\n    max_team_size = 0\n    for i in range(k):\n        team_size = len(teams[i])\n        max_team_size = max(max_team_size, team_size)\n\n    return str(max_team_size)",
        "test": "assert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"",
        "num_ids": 820,
        "indeed": false
    },
    {
        "number": 4099,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, *A = list(map(int, stdin.split()))\n    total_score = sum(A) + (N - len(A)) * M\n    min_score = (N * M - total_score) // (N - len(A))\n    return str(min_score) if 0 <= min_score <= K else \"-1\"",
        "test": "assert solution(\"2 50 45\\n25 30\") == \"40\"",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 4100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split()[0:3])\n    A = list(map(int, stdin.split()[3:]))\n\n    scores = [K for _ in range(N)]\n    for i in range(Q):\n        scores[A[i] - 1] -= 1\n        for j in range(N):\n            if j != A[i] - 1:\n                scores[j] -= 1\n\n    result = []\n    for score in scores:\n        if score > 0:\n            result.append(\"Yes\")\n        else:\n            result.append(\"No\")\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"3 10 4\\n1\\n2\\n1\\n3\") == \"Yes\\nYes\\nYes\\n\"",
        "num_ids": 832,
        "indeed": false
    },
    {
        "number": 4101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = [list(map(int, stdin.split()[2 + i * m:2 + (i + 1) * m])) for i in range(n)]\n\n    def is_sorted(matrix):\n        return all(matrix[i] <= matrix[i + 1] for i in range(len(matrix) - 1))\n\n    def sort_matrix(matrix):\n        sorted_matrix = sorted(matrix)\n        if is_sorted(sorted_matrix):\n            return True, sorted_matrix\n        return False, []\n\n    def invert_row(matrix, row):\n        matrix[row] = [1 - x for x in matrix[row]]\n\n    def invert_column(matrix, col):\n        for i in range(len(matrix)):\n            matrix[i][col] = 1 - matrix[i][col]\n\n    for row in range(n):\n        invert_row(a, row)\n        if sorted_matrix := sort_matrix(a)[1]:\n            break\n        invert_row(a, row)\n\n    for col in range(m):\n        invert_column(a, col)\n        if sorted_matrix := sort_matrix(a)[1]:\n            break\n        invert_column(a, col)\n\n    if sorted_matrix:\n        row_inversions = \"\".join(\"1\" if is_sorted(a[i:i + 2]) else \"0\" for i in range(n - 1))\n        col_inversions = \"\".join(\"1\" if is_sorted(sorted_matrix[i:i + 2]) else \"0\" for i in range(m - 1))\n        return \"YES\\n\" + row_inversions + \"\\n\" + col_inversions\n    else:\n        return \"NO\"",
        "test": "assert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\\n\") == \"YES\\n010\\n0000\\n\"",
        "num_ids": 1582,
        "indeed": false
    },
    {
        "number": 4102,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    sum = 0\n    while num > 0:\n        digit = num % 10\n        sum += digit\n        num //= 10\n    return \"Yes\" if sum % 3 == 0 else \"No\"",
        "test": "assert solution(\"121\") == \"No\"",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 4103,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, b, a = map(int, lines[0].split())\n    s = [int(x) for x in lines[1].split()]\n\n    battery = b\n    accumulator = 0\n    segments_passed = 0\n\n    for i in range(n):\n        if battery > 0:\n            battery -= 1\n            segments_passed += 1\n            if s[i] == 1:\n                accumulator += 1\n        elif accumulator > 0:\n            accumulator -= 1\n            segments_passed += 1\n        else:\n            break\n\n    return str(segments_passed)",
        "test": "assert solution('6 2 1\\n1 0 0 1 0 1') == '3'",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 4104,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into a list of operands and operators\n    input_list = []\n    current_operand = \"\"\n    for char in stdin:\n        if char in [\"+\", \"-\"]:\n            input_list.append(current_operand)\n            input_list.append(char)\n            current_operand = \"\"\n        else:\n            current_operand += char\n    input_list.append(current_operand)\n\n    # Evaluate the expression\n    result = 0\n    current_operand = \"\"\n    current_operator = \"+\"\n    for item in input_list:\n        if item in [\"+\", \"-\"]:\n            current_operator = item\n        else:\n            operand = int(item)\n            if current_operator == \"+\":\n                result += operand\n            else:\n                result -= operand\n    return str(result)",
        "test": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 4105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    if n > k * (k + 1) // 2:\n        return \"NO\"\n\n    def generate_valid_pair(pair_count, color_count):\n        man_color = 1\n        woman_color = 1\n\n        pairs = []\n        for i in range(pair_count):\n            if man_color == woman_color:\n                woman_color = (woman_color % (color_count - 1)) + 2\n\n            pairs.append((man_color, woman_color))\n\n            man_color += 1\n            if man_color > color_count:\n                man_color = 1\n\n            woman_color += 1\n            if woman_color > color_count:\n                woman_color = 1\n\n        return pairs\n\n    valid_pairs = generate_valid_pair(n, k)\n\n    output = [\"YES\"]\n    for pair in valid_pairs:\n        output.append(f\"{pair[0]} {pair[1]}\")\n\n    return \"\\n\".join(output)",
        "test": "assert solution(\"10 4\") == \"YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\"",
        "num_ids": 1107,
        "indeed": false
    },
    {
        "number": 4106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n\n    if x == n:\n        return sum(a)\n\n    total = 0\n    for i in range(n - k + 1):\n        total += a[i]\n\n    max_total = total\n\n    for i in range(n - k + 1, n - x + 1):\n        total = total - a[i - 1] + a[i + k - 1]\n        max_total = max(max_total, total)\n\n    return max_total if max_total > 0 else -1",
        "test": "assert solution(\"6 1 5\\n10 30 30 70 10 10\\n\") == \"-1\"",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 4107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    routers = []\n    for i in range(n):\n        if s[i] == '1':\n            routers.append(i)\n\n    total_cost = sum(range(1, n + 1))\n    for r in routers:\n        total_cost -= sum(range(max(1, r - k), min(n, r + k) + 1))\n\n    return str(total_cost) ",
        "test": "assert solution(\"6 1\\n000000\") == 21",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 4108,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s_dict = {}\n    for char in s:\n        if char in s_dict:\n            s_dict[char] += 1\n        else:\n            s_dict[char] = 1\n\n    t_dict = {}\n    for char in t:\n        if char in t_dict:\n            t_dict[char] += 1\n        else:\n            t_dict[char] = 1\n\n    if len(s) != len(t):\n        return 'No'\n\n    for key, value in s_dict.items():\n        if key not in t_dict or value != t_dict[key]:\n            return 'No'\n\n    return 'Yes'",
        "test": "assert solution(\"abcd\\nefg\") == \"No\"",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 4109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = map(int, stdin.split())\n    C = list(map(int, stdin.split()))\n    A = [list(map(int, stdin.split())) for _ in range(N)]\n\n    costs = [0] * M\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0 and C[i] > costs[j]:\n                costs[j] = C[i]\n\n    total_cost = sum(costs)\n    if all(std_level >= X for std_level in costs):\n        return \"Yes\" if total_cost == 0 else f\"Yes\\n{total_cost}\"\n    else:\n        return \"No\"\n",
        "test": "assert solution(\"3 4\\n50 100\\n30 20 50 60\\n10 5 70 80\\n100 100 100 100\\n20 50 30 40\") == \"No\"",
        "num_ids": 1455,
        "indeed": false
    },
    {
        "number": 4110,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(target, p, c):\n        left, right = 0, 1000000\n        while left + 1 < right:\n            mid = (left + right) // 2\n            if target - mid * p * 100 >= c:\n                right = mid\n            else:\n                left = mid\n        return left\n\n    input_list = list(map(int, stdin.split()))\n    D, G = input_list[0], input_list[1]\n    p_list, c_list = [], []\n    for i in range(D):\n        p, c = input_list[2 + 2 * i], input_list[3 + 2 * i]\n        p_list.append(p)\n        c_list.append(c)\n\n    total_problems = sum(p_list)\n    base_score = 0\n    for i in range(D):\n        base_score += p_list[i] * 100 * binary_search(G - base_score, p_list[i], c_list[i])\n        if base_score >= G:\n            break\n\n    return str(sum(p_list[:i+1]))",
        "test": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\" ",
        "num_ids": 937,
        "indeed": false
    },
    {
        "number": 4111,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    weights = list(map(int, stdin.split('\\n')[1].split()))\n\n    good_candies = 0\n    for i in range(n):\n        total_odd = sum([weights[j] for j in range(n) if j != i and (j + 1) % 2 != 0])\n        total_even = sum([weights[j] for j in range(n) if j != i and (j + 1) % 2 == 0])\n\n        if total_odd == total_even:\n            good_candies += 1\n\n    return str(good_candies)",
        "test": "assert solution(\"7\\n5 5 4 5 5 5 6\\n\") == \"2\"",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 4112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    if n < k:\n        return -1\n\n    a.sort(reverse=True)\n    total_beauty = sum(a[:x])\n    remaining_beauty = sum(a[x:])\n    reposted_segments = x // k\n\n    for i in range(reposted_segments):\n        total_beauty += a[x + i * k] * (k - 1)\n\n    if total_beauty > remaining_beauty:\n        return total_beauty\n    else:\n        return -1",
        "test": "assert solution(\"6 1 5\\n10 30 30 70 10 10\\n\") == \"-1\"",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 4113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 4 or n > 100:\n        return \"No\"\n    for i in range(n // 4 + 1):\n        j = n - i * 4\n        if j % 7 == 0:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"14\") == \"Yes\", \"Example 2\"",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 4114,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    points = [list(map(int, line.split())) for line in lines[1:]]\n    x_min = y_min = 101\n    x_max = y_max = -1\n    h_min = 10**9\n    for x, y, h in points:\n        x_min = min(x_min, x)\n        x_max = max(x_max, x)\n        y_min = min(y_min, y)\n        y_max = max(y_max, y)\n        h_min = min(h_min, h)\n    \n    center_x = (x_min + x_max) // 2\n    center_y = (y_min + y_max) // 2\n    height = h_min + max(abs(center_x - x_min), 0) + max(abs(center_y - y_min), 0)\n    \n    return f\"{center_x} {center_y} {height}\"",
        "test": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 6\") != \"2 2 6\"",
        "num_ids": 1005,
        "indeed": false
    },
    {
        "number": 4115,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    min_hugs = 0\n\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            min_hugs += 1\n\n    return min_hugs\n",
        "test": "assert solution(\"racecar\") == 0",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 4116,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == N:\n                return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"10\") == \"Yes\"",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 4117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    L = sorted(list(map(int, L.split())))\n    count = 0\n    for i in range(N - 2):\n        k = i + 2\n        for j in range(i + 1, N - 1):\n            while k < N and L[i] + L[j] > L[k]:\n                k += 1\n            if k < N and L[i] + L[j] == L[k]:\n                count += 1\n    return str(count)\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "assert solution(\"5\\n4 4 9 7 5\") == \"5\"",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 4118,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if 1 <= a <= 9 and 1 <= b <= 9:\n        return str(a * b)\n    else:\n        return \"-1\"",
        "test": "assert solution(\"9 3\") == \"27\"  # Sample Input 2",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 4119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    X = list(map(int, stdin.split()[2:]))\n\n    visited = {}\n    for x in X:\n        if x in visited:\n            visited[x] += 1\n        else:\n            visited[x] = 1\n\n    moves = 0\n    for i in range(N):\n        if i not in visited:\n            moves += 1\n\n    return str(moves)",
        "test": "assert solution(\"3 4\\n1 2 3 4\\n5 6 7 8\\n9 10 11 12\") == \"8\"",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 4120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m, k = map(int, stdin.readline().split())\n    roads = [list(map(int, stdin.readline().split())) for _ in range(m)]\n\n    # Create a graph\n    graph = [[0] * n for _ in range(n)]\n    for a, b in roads:\n        graph[a - 1][b - 1] = 1\n        graph[b - 1][a - 1] = 1\n\n    # Perform BFS to check connectivity\n    def bfs(graph, start):\n        visited = [False] * n\n        queue = [start]\n        visited[start] = True\n\n        while queue:\n            vertex = queue.pop(0)\n            for i in range(n):\n                if graph[vertex][i] == 1 and not visited[i]:\n                    visited[i] = True\n                    queue.append(i)\n\n        return all(visited)\n\n    # Check for connectivity\n    if not bfs(graph, 0):\n        return \"0\"\n\n    # Find valid options\n    valid_options = []\n    for i in range(2 ** m):\n        option = bin(i)[2:].zfill(m)\n        if option.count(\"1\") == n - 1:\n            graph_copy = [row[:] for row in graph]\n            for j in range(m):\n                if option[j] == \"0\":\n                    a, b = roads[j]\n                    graph_copy[a - 1][b - 1] = 0\n                    graph_copy[b - 1][a - 1] = 0\n            if bfs(graph_copy, 0):\n                valid_options.append(option)\n\n    # Output the result\n    if len(valid_options) < k:\n        return \"0\"\n    else:\n        output = str(len(valid_options)) + \"\\n\"\n        for option in valid_options[:k]:\n            output += option + \"\\n\"\n        return output.strip()",
        "test": "assert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\\n101001\\n\"",
        "num_ids": 1791,
        "indeed": false
    },
    {
        "number": 4121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a.sort()\n    if a[0] == a[-1]:\n        return \"YES\"\n    elif a[-1] - a[0] <= 2:\n        if n == 2:\n            return \"YES\" if a[0] + 2 == a[1] or a[1] - 2 == a[0] else \"NO\"\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"3\\n4 5 3\\n\") == \"YES\"",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 4122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.readline().split())\n    d = list(map(int, stdin.readline().split()))\n\n    hp = H\n    minutes = 0\n\n    while hp > 0:\n        hp += sum(d)\n        minutes += n\n\n    if minutes <= 10**12:\n        return str(minutes)\n    else:\n        return \"-1\"",
        "test": "assert solution(\"1000000000000 5\\n-1 0 0 0 0\\n\") == \"4999999999996\"",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 4123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    two_grams = {}\n    \n    for i in range(n - 1):\n        two_gram = s[i:i+2]\n        if two_gram in two_grams:\n            two_grams[two_gram] += 1\n        else:\n            two_grams[two_gram] = 1\n    \n    max_count = 0\n    max_two_gram = \"\"\n    \n    for two_gram, count in two_grams.items():\n        if count > max_count:\n            max_count = count\n            max_two_gram = two_gram\n            \n    return max_two_gram\n\nn = int(input())\ns = input()\n\nresult = solution(f\"{n} {s}\")\nprint(result) ",
        "test": "assert solution(\"5\\nZZZAA\") == \"ZZ\"",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 4124,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    moves = 0\n\n    while len(s) > 0 and len(t) > 0:\n        if s[0] == t[0]:\n            s = s[1:]\n            t = t[1:]\n        elif len(s) > 1 and len(t) > 1:\n            s = s[1:]\n            t = t[1:]\n            moves += 1\n        elif len(s) > 1:\n            s = s[1:]\n            moves += 1\n        elif len(t) > 1:\n            t = t[1:]\n            moves += 1\n\n    return moves + len(s) + len(t)",
        "test": "assert solution(\"codeforces\\nyes\") == 9",
        "num_ids": 646,
        "indeed": false
    },
    {
        "number": 4125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    x_list = sorted(list(map(int, stdin.split())))\n    \n    D = 1\n    while D <= max(x_list) - X:\n        visited_cities = set()\n        current_position = X\n        \n        while visited_cities != set(x_list):\n            for city in x_list:\n                if current_position - D <= city <= current_position + D:\n                    visited_cities.add(city)\n            \n            if current_position + D in x_list:\n                current_position += D\n            elif current_position - D in x_list:\n                current_position -= D\n            else:\n                break\n        \n        if visited_cities == set(x_list):\n            return str(D)\n        \n        D += 1\n    \n    return \"0\"",
        "test": "assert solution(\"4 10\\n1 2 3 4\\n\") == \"3\\n\"",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 4126,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n % 2 == 0 or n < 3 or n > 99:\n        return \"No\"\n\n    if s == s[::-1]:\n        if s[:n//2] == s[:n//2][::-1] and s[n//2+1:] == s[n//2+1:][::-1]:\n            return \"Yes\"\n\n    return \"No\"\n",
        "test": "assert solution(\"abcbabcba\") == \"No\"",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 4127,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    result = int(A * B)\n    return str(result)",
        "test": "assert solution(\"198 1.10\") == \"217\"",
        "num_ids": 232,
        "indeed": false
    },
    {
        "number": 4128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    test_cases = [int(x) for x in stdin.split('\\n')[1:]]\n    output = []\n\n    for n in test_cases:\n        count = 0\n        for a in range(1, n):\n            b = n - a\n            if a > b > 0:\n                count += 1\n        output.append(str(count))\n\n    return '\\n'.join(output)\n",
        "test": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\" ",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 4129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    data = list(map(int, stdin.split()))\n    n, m, s = data[0], data[1], data[2]\n    roads = []\n    for i in range(m):\n        road = list(map(int, input().split()))\n        roads.append(road)\n\n    # Create adjacency list\n    adj_list = [[] for _ in range(n + 1)]\n    for road in roads:\n        u, v = road\n        adj_list[u].append(v)\n\n    # Perform BFS to find the minimum number of new roads\n    visited = [False] * (n + 1)\n    queue = [s]\n    visited[s] = True\n    new_roads = 0\n\n    while queue:\n        curr_city = queue.pop(0)\n        for neighbor in adj_list[curr_city]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                queue.append(neighbor)\n        if not queue:\n            new_roads += 1\n            for i in range(1, n + 1):\n                if not visited[i]:\n                    queue.append(i)\n                    break\n\n    return str(new_roads - 1)",
        "test": "assert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == 1 ",
        "num_ids": 1268,
        "indeed": false
    },
    {
        "number": 4130,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    weights = sorted([int(x) for x in stdin.split('\\n')[1].split()])\n\n    unique_weights = []\n    max_people = 0\n\n    for weight in weights:\n        if weight not in unique_weights:\n            unique_weights.append(weight)\n            max_people += 1\n\n    return str(max_people)",
        "test": "assert solution(\"4\\n3 2 4 1\") == \"4\"",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 4131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    prefectures = [[] for _ in range(N + 1)]\n    \n    for i in range(M):\n        prefecture, year = map(int, input().split())\n        prefectures[prefecture].append(year)\n    \n    result = []\n    for i in range(1, N + 1):\n        prefecture_cities = sorted(prefectures[i])\n        for j, year in enumerate(prefecture_cities, start=1):\n            city_id = f\"{i:06d}{j:06d}\"\n            result.append(city_id)\n    \n    return \"\\n\".join(result)",
        "test": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"",
        "num_ids": 894,
        "indeed": false
    },
    {
        "number": 4132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, A = list(map(int, stdin.split()))\n    A.sort(reverse=True)\n    while len(A) > 1:\n        attacker_health = A[0]\n        defender_health = A[1]\n        if attacker_health <= defender_health:\n            A[1] = defender_health - attacker_health\n        else:\n            A[0] = attacker_health - defender_health\n            A[1] = A[2]\n            A[2] = defender_health\n        A.sort(reverse=True)\n    return str(A[0])",
        "test": "assert solution(\"3\\n20 30 50\") == \"10\"  # Sample Input 2",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 4133,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def valid_name(name: str) -> bool:\n        if len(name) < 13:\n            return False\n        if \"?\" not in name:\n            return False\n        if not any(char.isdigit() for char in name):\n            return False\n        if not any(char in \"?_-+*\" for char in name):\n            return False\n        if name.count(\":\") != 1:\n            return False\n        return True\n\n    def get_jaws(name: str) -> list:\n        jaws = []\n        inside_jaws = False\n        for char in name:\n            if char == \":\":\n                inside_jaws = True\n            elif inside_jaws and char.isdigit():\n                jaws.append(int(char))\n        return jaws\n\n    def is_possible(jaws: list, values: str) -> bool:\n        if len(jaws) != len(values):\n            return False\n        for i, value in enumerate(values):\n            if jaws[i] > int(value):\n                return False\n        return True\n\n    def find_min_sequence(jaws: list, start: int = 0, sequence: str = \"\") -> str:\n        if start == len(jaws):\n            return sequence\n        min_sequence = \"9\" * len(jaws)\n        for value in range(start, 10):\n            new_sequence = sequence + str(value)\n            if is_possible(jaws, new_sequence):\n                min_sequence = min(min_sequence, new_sequence)\n        return min_sequence if min_sequence != \"9\" * len(jaws) else \"false\"\n\n    if not valid_name(stdin):\n        return \"false\"\n    jaws = get_jaws(stdin)\n    min_sequence = find_min_sequence(jaws)\n    return min_sequence",
        "test": "assert solution(\"?(__-_+_/_____):-__>__,_____<__.\") == \"false\"",
        "num_ids": 1823,
        "indeed": false
    },
    {
        "number": 4134,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    n, m, k = map(int, stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, stdin.readline().split())))\n\n    # Initialize the dp table\n    dp = [[[0] * (k + 1) for _ in range(m + 1)] for _ in range(n + 1)]\n    dp[0][1][grid[0][0] ^ k] = 1\n\n    # Iterate through the grid\n    for i in range(n):\n        for j in range(m):\n            # Update the dp table\n            for j_ in range(m):\n                for k_ in range(k + 1):\n                    dp[i + 1][j_ + 1][k_] += dp[i][j][k_ ^ (grid[i][j] ^ k)]\n\n    # Return the number of paths\n    return str(dp[n][m])",
        "test": "assert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"5\\n\"",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 4135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s = t\n    for d in range(1, n + 1):\n        if n % d == 0:\n            s = s[:d][::-1] + s[d:]\n    return s",
        "test": "assert solution(\"16\\nplmaetwoxesisiht\") == \"thisisexampletwo\"",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 4136,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)",
        "test": "assert solution(\"5 14\") == \"19\"",
        "num_ids": 174,
        "indeed": true
    },
    {
        "number": 4137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Split input into a list of integers and signs\n    expression = [int(x) if x.isdigit() else x for x in stdin]\n\n    # Generate Brainfuck code for the expression\n    bf_code = \">\"  # Move pointer to the right\n    for i in range(len(expression)):\n        if expression[i] == \"+\":\n            bf_code += \"+\" * int(expression[i - 1])  # Add left operand\n            bf_code += \"-\" * int(expression[i + 1])  # Subtract right operand\n            bf_code += \">\"  # Move pointer to the right\n        elif expression[i] == \"-\":\n            bf_code += \"-\" * int(expression[i - 1])  # Subtract left operand\n            bf_code += \"+\" * int(expression[i + 1])  # Add right operand\n            bf_code += \">\"  # Move pointer to the right\n\n    bf_code += \"<[<\"  # Move pointer to the left and enter loop\n    bf_code += \"-]<\"  # Subtract and loop while value is not 0\n    bf_code += \"+\" * 256  # Add 256 to ensure unsigned 8-bit wraparound\n    bf_code += \".\"  # Print value\n\n    return bf_code",
        "test": "assert solution('9-7') == '+++++++++>+++++++> <[<->-]<++++++++++++++++++++++++++++++++++++++++++++++++.', 'Incorrect output for 9-7'",
        "num_ids": 1216,
        "indeed": false
    },
    {
        "number": 4138,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    queries = [int(k_i) for k_i in stdin.split('\\n')[1:]]\n    sequence = \"112123123412345\"\n    answer = []\n    for k_i in queries:\n        if k_i <= len(sequence):\n            answer.append(int(sequence[k_i - 1]))\n        else:\n            block_num = 1\n            while k_i > sum(range(1, block_num + 1)):\n                block_num += 1\n            last_block_size = block_num - 1\n            k_i -= sum(range(1, last_block_size + 1))\n            if k_i == last_block_size + 1:\n                answer.append(0)\n            else:\n                answer.append(int(sequence[k_i - 1]))\n    return '\\n'.join(str(x) for x in answer)",
        "test": "assert solution(\"4\\n2132\\n506\\n99999999999999999\\n100000000000000000\") == \"8\\n2\\n4\\n1\"",
        "num_ids": 942,
        "indeed": false
    },
    {
        "number": 4139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    def is_shichi_go_san(num: int) -> bool:\n        digits = set(str(num))\n        return all(\n            str(digit) in digits for digit in [7, 5, 3]\n        ) and not any(\n            digit not in digits and digit not in [\"7\", \"5\", \"3\"] for digit in str(num)\n        )\n\n    return str(sum(1 for i in range(1, n + 1) if is_shichi_go_san(i)))",
        "test": "assert solution(1000) == 27",
        "num_ids": 408,
        "indeed": false
    },
    {
        "number": 4140,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    count = 0\n    for i in range(1, N - 1):\n        if stdin[i] == stdin[i - 1]:\n            count += 1\n    return count",
        "test": "assert solution(\"000\") == 1  # Sample Input 1",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 4141,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    for i in range(0, N, 2):\n        if A[i] % 3 != 0 and A[i] % 5 != 0:\n            return \"DENIED\"\n    return \"APPROVED\"",
        "test": "assert solution(\"6\\n2 4 5 7 8 9\") == \"DENIED\"  # Sample Input 2",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 4142,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    length = len(S)\n    \n    for i in range(length):\n        if i % 2 == 1 and S[i] == 'L':\n            return \"No\"\n        elif i % 2 == 0 and S[i] == 'R':\n            return \"No\"\n    \n    return \"Yes\"",
        "test": "assert solution(\"LULLDR\") == \"No\"",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 4143,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split('\\n'))\n\n    minutes = 0\n    people_at_city_1 = N\n    people_at_city_2 = 0\n    people_at_city_3 = 0\n    people_at_city_4 = 0\n    people_at_city_5 = 0\n    people_at_city_6 = 0\n\n    while people_at_city_6 != N:\n        minutes += 1\n\n        # Number of people who can travel from City 1 to City 2\n        people_from_city_1_to_2 = min(people_at_city_1, A)\n\n        # Number of people who can travel from City 2 to City 3\n        people_from_city_2_to_3 = min(people_at_city_2, B)\n\n        # Number of people who can travel from City 3 to City 4\n        people_from_city_3_to_4 = min(people_at_city_3, C)\n\n        # Number of people who can travel from City 4 to City 5\n        people_from_city_4_to_5 = min(people_at_city_4, D)\n\n        # Number of people who can travel from City 5 to City 6\n        people_from_city_5_to_6 = min(people_at_city_5, E)\n\n        # Update the number of people at each city\n        people_at_city_1 = max(0, people_at_city_1 - people_from_city_1_to_2)\n        people_at_city_2 = max(0, people_at_city_2 + people_from_city_1_to_2 - people_from_city_2_to_3)\n        people_at_city_3 = max(0, people_at_city_3 + people_from_city_2_to_3 - people_from_city_3_to_4)\n        people_at_city_4 = max(0, people_at_city_4 + people_from_city_3_to_4 - people_from_city_4_to_5)\n        people_at_city_5 = max(0, people_at_city_5 + people_from_city_4_to_5 - people_from_city_5_to_6)\n        people_at_city_6 = max(0, people_at_city_6 + people_from_city_5_to_6)\n\n    return str(minutes)",
        "test": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"",
        "num_ids": 1515,
        "indeed": false
    },
    {
        "number": 4144,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    mod = 10**9 + 7\n    \n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 10\n    \n    for i in range(2, n + 1):\n        dp[i] = (dp[i - 1] * 10 + dp[i - 2] * 9) % mod\n        \n    return str(dp[n])\n\ndef",
        "test": "assert solution(2) == 2",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 4145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    prime = True\n    \n    while True:\n        x += 1\n        \n        if x == 2:\n            continue\n        \n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                prime = False\n                break\n        if prime:\n            return str(x)\n        prime = True\n",
        "test": "assert solution(10) == 11",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 4146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, *v = list(map(int, stdin.split()))\n    count = 0\n    v.sort()\n    \n    for i in range(n - 2):\n        if v[i] == v[i + 1] and v[i] != v[i + 2]:\n            count += 1\n        elif v[i] != v[i + 1] and v[i] != v[i + 2] and v[i + 1] != v[i + 2]:\n            count += 1\n    \n    return str(count)\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "assert solution('4\\n3 1 3 1') == '0'",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 4147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n    N, A, B, C = input_data[0], input_data[1], input_data[2], input_data[3]\n    lengths = input_data[4:]\n\n    def find_min_cost(a, b, c, mp, cost, index):\n        if index == N:\n            if a >= A and b >= B and c >= C:\n                return cost\n            else:\n                return float('inf')\n\n        min_cost = find_min_cost(a, b, c, mp, cost, index + 1)\n\n        if a + lengths[index] <= A + B:\n            min_cost = min(min_cost, find_min_cost(a + lengths[index], b, c, mp + 10, cost + 10, index + 1))\n\n        if b + lengths[index] <= A + B:\n            min_cost = min(min_cost, find_min_cost(a, b + lengths[index], c, mp + 10, cost + 10, index + 1))\n\n        if c + lengths[index] <= A + B:\n            min_cost = min(min_cost, find_min_cost(a, b, c + lengths[index], mp + 10, cost + 10, index + 1))\n\n        if lengths[index] >= 2:\n            min_cost = min(min_cost, find_min_cost(a, b, c, mp + 1, cost + 1, index + 1))\n\n        if mp >= 1:\n            min_cost = min(min_cost, find_min_cost(a + 1, b, c, mp + 1, cost + 1, index + 1))\n\n        if mp >= 10:\n            min_cost = min(min_cost, find_min_cost(a, b + 1, c, mp + 1, cost + 1, index + 1))\n\n        if mp >= 10:\n            min_cost = min(min_cost, find_min_cost(a, b, c + 1, mp + 1, cost + 1, index + 1))\n\n        return min_cost\n\n    return str(find_min_cost(0, 0, 0, 0, 0, 0))",
        "test": "assert solution(\"3 10 20 30\\n10\\n20\\n30\") == \"1\"",
        "num_ids": 1497,
        "indeed": false
    },
    {
        "number": 4148,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(str, stdin.split())\n    N = int(N)\n\n    result = \"\"\n    for char in S:\n        shifted_char = chr((ord(char) - 65 + N) % 26 + 65)\n        result += shifted_char\n\n    return result",
        "test": "assert solution(\"2\\nABCXYZ\") == \"CDEZAB\"",
        "num_ids": 366,
        "indeed": true
    },
    {
        "number": 4149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    n = int(stdin.split('\\n')[0])\n    b = list(map(int, stdin.split('\\n')[1].split()))\n\n    a = []\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1",
        "test": "assert solution(\"1\\n2750131 199999\\n\") == \"199999\\n\"",
        "num_ids": 1763,
        "indeed": false
    },
    {
        "number": 4150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    first_team = []\n    second_team = []\n\n    while a:\n        max_skill = max(a)\n        max_skill_idx = a.index(max_skill)\n        left_k = a[max(0, max_skill_idx - k):max_skill_idx]\n        right_k = a[max_skill_idx + 1:min(n, max_skill_idx + k + 1)]\n        chosen = [max_skill_idx] + left_k + right_k\n        for i in chosen:\n            a.remove(a[i])\n        if not first_team:\n            first_team = chosen\n        else:\n            second_team = chosen\n\n    result = ['0'] * n\n    for i in first_team:\n        result[i] = '1'\n    for i in second_team:\n        result[i] = '2'\n    return ''.join(result)",
        "test": "assert solution('5 1\\n2 1 3 5 4\\n') == '22111'",
        "num_ids": 1043,
        "indeed": false
    },
    {
        "number": 4151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    b = [0] * n\n    mod = 998244353\n\n    # Count the occurrences of each element in the array\n    freq = {}\n    for x in a:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n\n    # Sort the unique elements by their frequency and value\n    unique_elements = sorted(freq.items(), key=lambda x: (x[1], x[0]))\n\n    # Assign the monotonic renumeration to each element\n    # in the array, starting from the most frequent elements\n    index = 0\n    for element, frequency in unique_elements:\n        for i in range(n):\n            if a[i] == element:\n                b[i] = index\n        index += frequency\n\n    # Count the number of different monotonic renumerations\n    num_monotonic_renumerations = 1\n    for i in range(1, n):\n        if b[i] > b[i - 1]:\n            num_monotonic_renumerations *= i\n            num_monotonic_renumerations %= mod\n        elif b[i] == b[i - 1]:\n            continue\n        else:\n            break\n\n    return str(num_monotonic_renumerations)",
        "test": "assert solution(\"2\\n100 1\\n\") == \"2\"",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 4152,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    if n == 0:\n        return \"0\"\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    if len(a) == 0:\n        return \"0\"\n\n    def is_power_of_two(num: int) -> bool:\n        return num != 0 and ((num & (num - 1)) == 0)\n\n    def is_good(num: int) -> bool:\n        for i in range(len(a)):\n            if i != num and is_power_of_two(a[i] + a[num]):\n                return True\n        return False\n\n    count = 0\n    for i in range(len(a)):\n        if not is_good(i):\n            count += 1\n    return str(count)",
        "test": "assert solution(\"5\\n1 2 3 4 5\\n\") == \"2\"",
        "num_ids": 802,
        "indeed": true
    },
    {
        "number": 4153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    red_count = 0\n    blue_count = 0\n    for i in range(n):\n        if stdin[i] == '0':\n            red_count += 1\n        else:\n            blue_count += 1\n    return min(red_count, blue_count)\n\ndef",
        "test": "assert solution('01010101') == 4",
        "num_ids": 330,
        "indeed": false
    },
    {
        "number": 4154,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def passes_all_gates(id_card, gates):\n        for gate in gates:\n            if not (gate[0] <= id_card <= gate[1]):\n                return False\n        return True\n\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    gates = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    count = 0\n    for i in range(1, N + 1):\n        if passes_all_gates(i, gates):\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 4155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, h = map(int, stdin.split())\n    h = list(map(int, h.split()))\n\n    # Find the maximum height\n    max_height = max(h)\n\n    # Initialize the count of watering operations\n    count = 0\n\n    # Iterate through the flowers\n    for i in range(N):\n        # If the current flower is not at the maximum height\n        if h[i] < max_height:\n            # Water the current flower\n            h[i] += 1\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"5\\n1 2 3 4 5\") == 4",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 4156,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def is_valid(x: int) -> bool:\n        current_passengers = x\n        for i in range(n):\n            current_passengers += a[i]\n            if current_passengers < 0 or current_passengers > w:\n                return False\n        return True\n\n    valid_count = 0\n    for x in range(w + 1):\n        if is_valid(x):\n            valid_count += 1\n\n    return str(valid_count)",
        "test": "assert solution(\"3 5\\n2 1 -3\") == \"3\"",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 4157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    sequence = list(map(int, stdin.split('\\n')[1].split()))\n\n    def is_valid_sequence(sequence):\n        for i in range(1, len(sequence)):\n            if sequence[i] == sequence[i - 1] * 2 or sequence[i] == sequence[i - 1] // 3:\n                continue\n            else:\n                return False\n        return True\n\n    def find_permutation(sequence):\n        for i in range(n):\n            if i == 0:\n                continue\n            if sequence[i] == sequence[i - 1] * 2 or sequence[i] == sequence[i - 1] // 3:\n                continue\n            else:\n                return False\n        return True\n\n    def backtrack(sequence, start):\n        if start == n:\n            return sequence\n        for i in range(start, n):\n            if is_valid_sequence(sequence):\n                sequence[start], sequence[i] = sequence[i], sequence[start]\n                result = backtrack(sequence, start + 1)\n                if result:\n                    return result\n                sequence[start], sequence[i] = sequence[i], sequence[start]\n\n    if find_permutation(sequence):\n        return ' '.join(map(str, sequence))\n    else:\n        return ' '.join(map(str, backtrack(sequence, 0)))",
        "test": "assert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 4158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def find_subset(points, n):\n        points.sort()\n        subsets = [[]]\n\n        for point in points:\n            new_subsets = []\n            for subset in subsets:\n                new_subsets.append(subset + [point])\n                if len(subset) > 0 and abs(point - subset[-1]) == 2 ** n:\n                    new_subsets.append(subset)\n            subsets = new_subsets\n\n        return max(subsets, key=len)\n\n    n = int(stdin.readline().strip())\n    points = list(map(int, stdin.readline().strip().split()))\n\n    max_power = 0\n    max_subset = []\n    for i in range(1, 20):\n        subset = find_subset(points, i)\n        if len(subset) > len(max_subset):\n            max_power = i\n            max_subset = subset\n\n    return f\"{len(max_subset)}\\n{' '.join(map(str, max_subset))}\"",
        "test": "assert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"",
        "num_ids": 1182,
        "indeed": false
    },
    {
        "number": 4159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    for _ in range(K):\n        if A > 0:\n            A -= 1\n        elif B > 0:\n            A += 1\n            B -= 1\n\n    return f\"{A} {B}\"",
        "test": "assert solution(\"10000000000000 99999999999999 10000000000000\") == \"10000000000000 99999999999998\"",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 4160,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    years = 0\n    balance = 100\n\n    while balance < x:\n        years += 1\n        balance = int(balance * 1.01)\n\n    return str(years)",
        "test": "assert solution(\"103\") == \"3\" # Testcase 1",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 4161,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    result = 0\n    for a in range(1, K + 1):\n        for b in range(1, K + 1):\n            for c in range(1, K + 1):\n                result += math.gcd(math.gcd(a, b), c)\n    return str(result)",
        "test": "assert solution(\"2\") == \"9\" ",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 4162,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = list(map(int, stdin.split()))\n    max_f = float('-inf')\n    for m in range(2, 10**5):\n        f = sum(m % i for i in a)\n        if f > max_f:\n            max_f = f\n    return str(max_f)",
        "test": "assert solution(\"3\\n3 4 6\\n\") == \"10\"",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 4163,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def check_doublet(rolls: list) -> bool:\n        for i in range(len(rolls) - 2):\n            if rolls[i][0] == rolls[i][1] and rolls[i + 1][0] == rolls[i + 1][1] and rolls[i + 2][0] == rolls[i + 2][1]:\n                return True\n        return False\n\n    input_data = list(map(int, stdin.split()))\n    N = input_data[0]\n    rolls = [input_data[i:i + 2] for i in range(1, len(input_data), 2)]\n\n    if check_doublet(rolls):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"3\\n1 1\\n1 1\\n1 1\") == \"Yes\"",
        "num_ids": 645,
        "indeed": true
    },
    {
        "number": 4164,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip())\n    result = r**2\n    return str(result)",
        "test": "assert solution(\"2\") == \"4\"",
        "num_ids": 203,
        "indeed": true
    },
    {
        "number": 4165,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *sides = list(map(int, stdin.split()))\n    longest_side = max(sides)\n    total_length = sum(sides)\n    \n    if longest_side < total_length - longest_side:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"  # Sample Input 1",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 4166,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into lines and convert the first line to integers\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split())\n\n    # Create a dictionary to store the conditions\n    conditions = {}\n    for i in range(1, M + 1):\n        s, c = map(int, lines[i].split())\n        conditions[s] = c\n\n    # Find the smallest integer that satisfies the conditions\n    answer = -1\n    for i in range(1, 10 ** N):\n        if len(str(i)) == N:\n            valid = True\n            for s, c in conditions.items():\n                if int(str(i)[s - 1]) != c:\n                    valid = False\n                    break\n            if valid:\n                answer = i\n                break\n\n    return str(answer)",
        "test": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"",
        "num_ids": 892,
        "indeed": false
    },
    {
        "number": 4167,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            for c in range(1, N + 1):\n                if a + b == (K * (a // K + 1)) and b + c == (K * (b // K + 1)) and c + a == (K * (c // K + 1)):\n                    count += 1\n    return str(count)",
        "test": "assert solution(\"10 3\") == \"13\"  # Sample Input 2",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 4168,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    result = \"\"\n    while n != 0:\n        remainder = n % (-2)\n        if remainder == -1:\n            result = \"1\" + result\n            n += 1\n        else:\n            result = str(remainder) + result\n        n //= (-2)\n    return result",
        "test": "assert solution(0) == \"0\"",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 4169,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    A = []\n    B = []\n    for i in range(N):\n        A_i, B_i = map(int, stdin.readline().split())\n        A.append(A_i)\n        B.append(B_i)\n\n    cans_bought = 0\n    money_spent = 0\n    stores_index = 0\n\n    while cans_bought < M:\n        if B[stores_index] > 0:\n            cans_to_buy = min(M - cans_bought, B[stores_index])\n            money_spent += cans_to_buy * A[stores_index]\n            B[stores_index] -= cans_to_buy\n            cans_bought += cans_to_buy\n        stores_index = (stores_index + 1) % N\n\n    return str(money_spent)",
        "test": "assert solution(\"3 10\\n5 7\\n8 2\\n3 6\") == \"30\"",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 4170,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    heights = list(map(int, stdin.split('\\n')[1].split()))\n    max_steps = 0\n    current_steps = 0\n    current_height = heights[0]\n\n    for i in range(1, n):\n        if heights[i] >= current_height:\n            current_steps += 1\n            current_height = heights[i]\n        else:\n            max_steps = max(max_steps, current_steps)\n            current_steps = 1\n            current_height = heights[i]\n\n    max_steps = max(max_steps, current_steps)\n\n    return str(max_steps)",
        "test": "assert solution(\"5\\n10 4 8 7 3\") == \"2\" # Sample Test Case 1",
        "num_ids": 646,
        "indeed": false
    },
    {
        "number": 4171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:n + 2]))\n    a.sort(reverse=True)\n    operations = 0\n\n    for i in range(n - k):\n        if a[i] // 2 >= a[i + k]:\n            operations += a[i] // 2 - a[i + k]\n            a[i + k] = a[i] // 2\n        else:\n            break\n\n    return str(operations)",
        "test": "assert solution(\"5 3\\n1 2 3 4 5\") == 2",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 4172,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    a.sort()\n\n    count = 0\n    min_val = float('inf')\n    max_val = float('-inf')\n\n    for i in range(n):\n        if a[i] < min_val:\n            min_val = a[i]\n        elif a[i] > max_val:\n            max_val = a[i]\n        else:\n            count += 1\n            if count >= k:\n                return str(i)\n\n    min_moves = float('inf')\n\n    for i in range(n):\n        if a[i] == min_val:\n            min_moves = min(min_moves, n - i - (k - count))\n        elif a[i] == max_val:\n            min_moves = min(min_moves, i + (k - count))\n\n    return str(min_moves) ",
        "test": "assert solution(\"6 5\\n1 2 2 4 2 3\") == \"3\"",
        "num_ids": 847,
        "indeed": false
    },
    {
        "number": 4173,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    queries = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    \n    def min_cost(n: int, a: int, b: int) -> int:\n        n1, n2 = n // a, n // b\n        n1_cost = n1 * a\n        n2_cost = n2 * b\n        if n % a == 0:\n            n1_cost -= b\n        elif n % b == 0:\n            n2_cost -= a\n        else:\n            n1_cost -= b\n            n2_cost -= a\n        return min(n1_cost, n2_cost)\n    \n    return '\\n'.join(str(min_cost(n, a, b)) for n, a, b in queries)",
        "test": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\" ",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 4174,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    L = list(map(int, stdin.split()))\n    bounces = 1\n    coordinate = 0\n    for i in range(N):\n        coordinate += L[i]\n        if coordinate <= X:\n            bounces += 1\n        else:\n            break\n    return str(bounces)",
        "test": "assert solution(\"4 10\\n2 3 7 1\") == \"3\"",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 4175,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    words = lines[1:]\n\n    used_words = set()\n    last_char = ''\n\n    for word in words:\n        if word in used_words or not word or word[0] != last_char:\n            return \"No\"\n        used_words.add(word)\n        last_char = word[-1]\n\n    return \"Yes\"",
        "test": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 4176,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(A + B - 1, A * B))",
        "test": "assert solution(\"3 2\") == 6  # When we have six snack pieces, each guest can take two pieces if we have three guests, and each guest can take three if we have two guests.",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 4177,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    return 'x' * len(stdin)",
        "test": "assert solution(\"sardine\") == \"xxxxxxx\"",
        "num_ids": 216,
        "indeed": true
    },
    {
        "number": 4178,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = list(map(int, stdin.split()))\n\n    for i in range(1, N):\n        if H[i] < H[i - 1]:\n            H[i] += 1\n        elif H[i] > H[i - 1] + 1:\n            return \"No\"\n\n    return \"Yes\"",
        "test": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 4179,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, M, C = map(int, lines[0].split())\n    B = list(map(int, lines[1].split()))\n    A = [list(map(int, line.split())) for line in lines[2:]]\n\n    def is_correct(code):\n        return sum(a * b for a, b in zip(code, B)) + C > 0\n\n    correct_codes = sum(1 for code in A if is_correct(code))\n    return str(correct_codes)",
        "test": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"",
        "num_ids": 604,
        "indeed": true
    },
    {
        "number": 4180,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    change = N % 1000\n    return str(change)",
        "test": "assert solution(\"1000\") == \"0\" ",
        "num_ids": 179,
        "indeed": false
    },
    {
        "number": 4181,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = list(map(int, stdin.split()))\n    A.insert(0, 0)\n    B.append(0)\n\n    total_monsters = 0\n    for i in range(N + 1):\n        total_monsters += A[i]\n\n    max_monsters_defeated = 0\n    for i in range(N):\n        max_monsters_defeated += min(B[i], A[i] + A[i + 1])\n\n    return str(total_monsters - max_monsters_defeated)",
        "test": "assert solution(\"3\\n4 7 1 3\\n3 5 7\\n\") == \"24\"",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 4182,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find_z(x, y, x_coordinates, y_coordinates):\n        x_coordinates.sort()\n        y_coordinates.sort()\n\n        if len(x_coordinates) == 1 and len(y_coordinates) == 1:\n            if x < y_coordinates[0] < y and x_coordinates[0] < y_coordinates[0]:\n                return y_coordinates[0]\n            else:\n                return None\n\n        for i in range(len(x_coordinates) - 1, -1, -1):\n            if x_coordinates[i] < y_coordinates[0]:\n                continue\n            else:\n                if i == 0:\n                    if x < x_coordinates[i] < y and x_coordinates[i] < y_coordinates[0]:\n                        return y_coordinates[0]\n                    else:\n                        return None\n                else:\n                    if x < x_coordinates[i - 1] < y and x_coordinates[i] < y_coordinates[0]:\n                        return y_coordinates[0]\n                    else:\n                        return None\n\n    N, M, X, Y = map(int, stdin.split()[0:4])\n    x_coordinates = list(map(int, stdin.split()[4:N + 4]))\n    y_coordinates = list(map(int, stdin.split()[N + 4:N + M + 4]))\n\n    if X < Y:\n        Z = find_z(X, Y, x_coordinates, y_coordinates)\n        if Z:\n            return \"No War\"\n        else:\n            return \"War\"\n    else:\n        return \"War\"",
        "test": "assert solution(\"3 2 10 20\\n8 15 13\\n17 22\") == \"War\"",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 4183,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    N, *T = list(map(int, stdin.split()))\n    T_lcm = T[0]\n    for i in range(1, N):\n        T_lcm = lcm(T_lcm, T[i])\n\n    return str(T_lcm)",
        "test": "assert solution(\"2\\n2\\n3\\n\") == \"6\"  # Sample Input 1",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 4184,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *weights = list(map(int, stdin.split()))\n    weights.sort()\n\n    min_diff = float('inf')\n    for T in range(1, N):\n        S_1 = sum(weights[:T])\n        S_2 = sum(weights[T:])\n        diff = abs(S_1 - S_2)\n        min_diff = min(min_diff, diff)\n\n    return str(min_diff)",
        "test": "assert solution(\"3\\n1 2 3\") == \"0\"",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 4185,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    matrix = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\n    def can_be_transformed_to_goal(matrix):\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] != (i * m + j + 1):\n                    return False\n        return True\n\n    def count_cyclic_shifts(matrix):\n        count = 0\n        for j in range(m):\n            if matrix[0][j] != (j + 1):\n                count += 1\n        return count\n\n    if can_be_transformed_to_goal(matrix):\n        return \"0\"\n    else:\n        return str(min(n * m, count_cyclic_shifts(matrix)))\n\n    # Read input\n    n, m = map(int, input().split())\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n\n    # Check if matrix can be transformed to goal\n    def can_be_transformed_to_goal(matrix):\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] != (i * m + j + 1):\n                    return False\n        return True\n\n    # Count the number of cyclic shifts needed\n    def count_cyclic_shifts(matrix):\n        count = 0\n        for j in range(m):\n            if matrix[0][j] != (j + 1):\n                count += 1\n        return count\n\n    # If matrix is already good, return 0\n    if can_be_transformed_to_goal(matrix):\n        return \"0\"\n    else:\n        return str(min(n * m, count_cyclic_shifts(matrix)))",
        "test": "assert solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\") == \"0\"",
        "num_ids": 1253,
        "indeed": false
    },
    {
        "number": 4186,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    a.sort()\n    teams = []\n    for i in range(0, n, 2):\n        if a[i] == a[i+1]:\n            teams.append((a[i], a[i+1]))\n        else:\n            teams.append((a[i], a[i+1]))\n            teams.append((a[i], a[i+1]))\n    \n    total_problems = sum([teams[i][0] - teams[i][1] for i in range(len(teams))])\n    \n    return str(total_problems)",
        "test": "assert solution(\"2\\n1 100\") == \"99\"",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 4187,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def count_max_rests(arr):\n        max_rest = 0\n        current_rest = 0\n        for i in arr:\n            if i == 1:\n                current_rest += 1\n            else:\n                max_rest = max(max_rest, current_rest)\n                current_rest = 0\n        return max(max_rest, current_rest)\n\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n\n    if 0 not in arr:\n        return 0\n\n    return str(count_max_rests(arr))",
        "test": "assert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 4188,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    facts = {\n        1: \"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\",\n        2: \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n        3: \"The largest online maths competition consisted of 12766 participants.\",\n        4: \"The Nile is credited as the longest river in the world. From its farthest stream in Burundi, it extends 6695 km in length.\",\n        5: \"The main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        6: \"Angel Falls is the highest waterfall. Its greatest single drop measures 807 m.\",\n        7: \"Uranium is the heaviest of all the naturally occurring elements. Its most common isotope has a nucleus containing 146 neutrons.\",\n        8: \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        9: \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\",\n        10: \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n        11: \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\",\n        12: \"Alaska has a longer coastline than all of the other 49 U.S. States put together: it is 154103 miles long.\",\n        13: \"Lake Baikal is the largest freshwater lake in the world. It reaches 1642\u00a0meters in depth and contains around one-fifth of the world's unfrozen fresh water.\",\n        14: \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\",\n        15: \"The largest state of USA is Alaska; its area is 663268 square miles\",\n        16: \"The longest state of USA is Alaska; its area is 663268 square miles\"\n    }\n\n    input_int = int(stdin)\n\n    if input_int in facts:\n        return 1\n    else:\n        return 0",
        "test": "assert solution(1) == 1",
        "num_ids": 1076,
        "indeed": false
    },
    {
        "number": 4189,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_cheeses = int(stdin.split('\\n')[0])\n    cheeses = stdin.split('\\n')[1:]\n    types = [cheese.split()[1] for cheese in cheeses]\n    num_types = len(set(types))\n    return str(num_types)",
        "test": "assert solution(\"\"\"9",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 4190,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    b.sort(key=lambda x: (x + a[b.index(x)]))\n\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    return ' '.join(map(str, c))\n",
        "test": "assert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"",
        "num_ids": 997,
        "indeed": false
    },
    {
        "number": 4191,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    result = 0\n    for i in input_list:\n        result ^= int(i)\n    return str(result)",
        "test": "assert solution(\"0\\n1\\n1\\n0\") == \"0\"",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 4192,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    time_taken = d / s\n    if time_taken <= t:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution(\"1000 15 80\") == \"Yes\"",
        "num_ids": 293,
        "indeed": true
    },
    {
        "number": 4193,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Get input values\n    values = list(map(int, stdin.split()))\n    bingo_card = [values[:3], values[3:6], values[6:]]\n    N = values[9]\n    bingo_numbers = values[10:10 + N]\n\n    # Check for bingo\n    for i in range(3):\n        for j in range(3):\n            if i == 0 and j == 0:\n                if bingo_card[0][0] in bingo_numbers and bingo_card[1][0] in bingo_numbers and bingo_card[2][0] in bingo_numbers:\n                    return \"Yes\"\n                elif bingo_card[0][0] in bingo_numbers and bingo_card[0][1] in bingo_numbers and bingo_card[0][2] in bingo_numbers:\n                    return \"Yes\"\n                elif bingo_card[0][0] in bingo_numbers and bingo_card[1][1] in bingo_numbers and bingo_card[2][2] in bingo_numbers:\n                    return \"Yes\"\n            elif i == 1 and j == 0:\n                if bingo_card[0][0] in bingo_numbers and bingo_card[1][0] in bingo_numbers and bingo_card[2][0] in bingo_numbers:\n                    return \"Yes\"\n                elif bingo_card[1][0] in bingo_numbers and bingo_card[1][1] in bingo_numbers and bingo_card[1][2] in bingo_numbers:\n                    return \"Yes\"\n            elif i == 2 and j == 0:\n                if bingo_card[0][0] in bingo_numbers and bingo_card[1][0] in bingo_numbers and bingo_card[2][0] in bingo_numbers:\n                    return \"Yes\"\n                elif bingo_card[2][0] in bingo_numbers and bingo_card[2][1] in bingo_numbers and bingo_card[2][2] in bingo_numbers:\n                    return \"Yes\"\n            elif i == 0 and j == 1:\n                if bingo_card[0][1] in bingo_numbers and bingo_card[1][1] in bingo_numbers and bingo_card[2][1] in bingo_numbers:\n                    return \"Yes\"\n            elif i == 0 and j == 2:\n                if bingo_card[0][2] in bingo_numbers and bingo_card[1][2] in bingo_numbers and bingo_card[2][2] in bingo_numbers:\n                    return \"Yes\"\n            elif i == 1 and j == 2:\n                if bingo_card[1][2] in bingo_numbers and bingo_card[2][2] in bingo_numbers:\n                    return \"Yes\"\n\n    return \"No\"",
        "test": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"",
        "num_ids": 1698,
        "indeed": false
    },
    {
        "number": 4194,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    A = list(map(int, stdin.split()[2:]))\n    A.sort(reverse=True)\n\n    days_spent = 0\n    for i in range(M):\n        if N < A[i]:\n            return \"-1\"\n        N -= A[i]\n        days_spent += A[i]\n\n    return str(N + days_spent)",
        "test": "assert solution(\"100 1\\n50\") == \"100\"",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 4195,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    \n    if d == 0:\n        return str(n)\n    elif d == 1:\n        return str(n * 100)\n    else:\n        return str(n * 10000)",
        "test": "assert solution('0 5') == '5'",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 4196,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    A = list(map(int, A.split()))\n    A.sort()\n    if N == 1:\n        return str(A[0])\n    elif N == 2:\n        return str(A[0])\n    else:\n        return str(A[0])\n\ndef",
        "test": "assert solution(\"4\\n12 15 20 25\") == 5",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 4197,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    students = [0] * n\n\n    for i in range(n):\n        students[a[i] - 1] = i + 1\n\n    return \" \".join(map(str, students))\n",
        "test": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 4198,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    \n    max_digits = len(str(X // (A + B)))\n    if max_digits < 1:\n        return \"0\"\n    \n    max_num = 10**max_digits - 1\n    max_price = A * max_num + B * len(str(max_num))\n    \n    while max_price > X:\n        max_digits -= 1\n        if max_digits < 1:\n            return \"0\"\n        max_num = 10**max_digits - 1\n        max_price = A * max_num + B * len(str(max_num))\n    \n    return str(max_num)",
        "test": "assert solution(\"10 7 100\") == \"9\"",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 4199,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, K, *heights = list(map(int, stdin.split()))\n    count = sum(1 for h in heights if h >= K)\n    return str(count)",
        "test": "assert solution(\"4 150\\n150 140 100 200\\n\") == \"2\" ",
        "num_ids": 348,
        "indeed": true
    },
    {
        "number": 4200,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M, *A = list(map(int, stdin.split()))\n    total_votes = sum(A)\n    A.sort(reverse=True)\n\n    selected_items = 0\n    for i in range(M):\n        if A[i] >= total_votes / (4 * M):\n            selected_items += 1\n        else:\n            break\n\n    return \"Yes\" if selected_items == M else \"No\"",
        "test": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 4201,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split()[0:3])\n    grid = list(stdin.split()[3:])\n\n    black_squares = 0\n    for row in grid:\n        black_squares += row.count('#')\n\n    total_squares = H * W\n    white_squares = total_squares - black_squares\n\n    if K > white_squares or K > black_squares:\n        return 0\n\n    count = 0\n    for i in range(H + 1):\n        for j in range(W + 1):\n            chosen_rows = grid[:i]\n            chosen_cols = [''] * len(grid)\n            for col in range(j):\n                for row in range(len(grid)):\n                    chosen_cols[row] += grid[row][col]\n\n            black_count = 0\n            for row in chosen_rows:\n                black_count += row.count('#')\n            for col in chosen_cols:\n                black_count += col.count('#')\n\n            if black_count == K:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"3 3 3\\n...\\n...\\n...\") == 0",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 4202,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    mod = 2019\n    min_product = float('inf')\n\n    for i in range(L, R):\n        for j in range(i + 1, R + 1):\n            product = (i * j) % mod\n            min_product = min(min_product, product)\n\n    return str(min_product)",
        "test": "assert solution(\"0 10\") == \"0\"  # i = 0",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 4203,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) < 4 or len(s) > 10 or not s[0].isupper() or s[0] != 'A':\n        return 'WA'\n    if s[2:].count('C') != 1:\n        return 'WA'\n    for c in s[1:]:\n        if c.isupper() and c != 'A' and c != 'C':\n            return 'WA'\n    return 'AC'",
        "test": "assert solution(\"AaCCoder\") == \"WA\"",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 4204,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def update_string(s: str) -> str:\n        new_string = \"\"\n        for char in s:\n            if char == \"2\":\n                new_string += \"22\"\n            elif char == \"3\":\n                new_string += \"333\"\n            elif char == \"4\":\n                new_string += \"4444\"\n            elif char == \"5\":\n                new_string += \"55555\"\n            elif char == \"6\":\n                new_string += \"666666\"\n            elif char == \"7\":\n                new_string += \"7777777\"\n            elif char == \"8\":\n                new_string += \"88888888\"\n            elif char == \"9\":\n                new_string += \"999999999\"\n            else:\n                new_string += char\n        return new_string\n\n    S, K = stdin.split()\n    S = list(S)\n    K = int(K)\n\n    for _ in range(5 * 10**15):\n        new_S = update_string(S)\n        S = new_S\n\n    return S[K - 1]",
        "test": "assert solution(\"23456789\\n2\") == \"3\"",
        "num_ids": 932,
        "indeed": false
    },
    {
        "number": 4205,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    p = list(map(int, stdin.split('\\n')[1].split()))\n    p_sorted = sorted(p)\n\n    if p == p_sorted:\n        return 'YES'\n    else:\n        for i in range(n):\n            for j in range(i + 1, n):\n                if p[i] != p_sorted[i] and p[j] != p_sorted[i]:\n                    return 'YES'\n                elif p[j] != p_sorted[j] and p[i] != p_sorted[j]:\n                    return 'YES'\n        return 'NO'",
        "test": "assert solution(\"5\\n5 2 3 4 1\") == \"YES\"",
        "num_ids": 670,
        "indeed": false
    },
    {
        "number": 4206,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in stdin:\n        if int(i) % 3 == 0:\n            count += 1\n    return str(count)",
        "test": "assert solution('6') == '1'",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 4207,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    b = list(map(int, lines[2].split()))\n\n    min_a = min(a)\n    min_b = min(b)\n    max_a = max(a)\n    max_b = max(b)\n\n    if min_a * min_b > 0:\n        return \"0\"\n\n    if min_a > 0 or max_a < 0:\n        return str(n - a.count(0))\n\n    return str(n - b.count(0))",
        "test": "assert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 4208,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if l[i] == r[j] or l[i] == '?' or r[j] == '?':\n                pairs.append((i + 1, j + 1))\n\n    result = []\n    for p in pairs:\n        if p[0] not in result and p[1] not in result:\n            result.append(p[0])\n            result.append(p[1])\n\n    return str(len(result) // 2)) + '\\n' + '\\n'.join(' '.join(map(str, p)) for p in zip(result[::2], result[1::2]))\n",
        "test": "assert solution(\"7\\nabaca?b\\nzabbbcc\") == \"5\\n6 5\\n2 3\\n4 6\\n7 4\\n1 2\"",
        "num_ids": 878,
        "indeed": false
    },
    {
        "number": 4209,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, a))\n\n    def is_valid_block(l, r):\n        total = sum(a[l:r+1])\n        return all(sum(a[l:r+1]) == sum(a[i:j+1]) for i, j in combinations(range(l, r+1), 2))\n\n    blocks = [(i, j) for i, j in combinations(range(n), 2) if is_valid_block(i, j)]\n    max_blocks = []\n    max_size = 0\n\n    for block in blocks:\n        valid = True\n        for other_block in blocks:\n            if block == other_block:\n                continue\n            if not (other_block[1] < block[0] or other_block[0] > block[1]):\n                valid = False\n                break\n        if valid:\n            size = block[1] - block[0] + 1\n            if size > max_size:\n                max_size = size\n                max_blocks = [block]\n            elif size == max_size:\n                max_blocks.append(block)\n\n    output = [str(len(max_blocks))] + [\" \".join(map(str, block)) for block in max_blocks]\n    return \"\\n\".join(output) + \"\\n\"",
        "test": "assert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\"",
        "num_ids": 1136,
        "indeed": false
    },
    {
        "number": 4210,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if (int(str(a[i]) + str(a[j])) % k) == 0:\n                    count += 1\n\n    return str(count)\n",
        "test": "assert solution('4 2\\n2 78 4 10\\n') == '12\\n'",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 4211,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, B = list(map(int, stdin.split()))\n    A = [max(0, B[i] - B[i + 1]) for i in range(N - 1)]\n    A.append(B[-1])\n    return sum(A)",
        "test": "assert solution(\"5\\n4 6 10 7\\n\") == \"28\"",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 4212,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q, *quadruples = list(map(int, stdin.split()))\n    max_score = 0\n\n    for i in range(1, N + 1):\n        for j in range(i + 1, N + 1):\n            for k in range(1, M):\n                score = 0\n                A = [0] * N\n                A[i - 1] = k\n                A[j - 1] = k + 1\n                for a, b, c, d in quadruples:\n                    if A[b - 1] - A[a - 1] == c:\n                        score += d\n                max_score = max(max_score, score)\n\n    return str(max_score)",
        "test": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"",
        "num_ids": 1158,
        "indeed": false
    },
    {
        "number": 4213,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n    max_diff = abs(A[0] - A[1])\n\n    for i in range(N):\n        for j in range(i+1, N):\n            diff = abs(A[i] - A[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return str(max_diff)\n\nstdin = \"4\\n1 4 6 3\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"4\\n1 4 6 3\") == \"5\"",
        "num_ids": 489,
        "indeed": true
    },
    {
        "number": 4214,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    towns = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    \n    total_length = 0\n    total_permutations = 0\n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                length = ((towns[i][0] - towns[j][0]) ** 2 + (towns[i][1] - towns[j][1]) ** 2) ** 0.5\n                total_length += length\n                total_permutations += 1\n    \n    average_length = total_length / total_permutations\n    return f\"{average_length:.6f}\"",
        "test": "assert solution(\"\"\"3",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 4215,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    uncovered_part = A - 2 * B\n    if uncovered_part < 0:\n        uncovered_part = 0\n    return str(uncovered_part)",
        "test": "assert solution(\"12 4\") == \"4\"",
        "num_ids": 233,
        "indeed": true
    },
    {
        "number": 4216,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    # Find the square root of N to reduce the search space\n    limit = int(n ** 0.5) + 1\n\n    # Initialize the minimum value of F(A,B) to infinity\n    min_f = float('inf')\n\n    # Iterate over all pairs of positive integers (A,B) such that N = A * B\n    for i in range(2, limit):\n        if n % i == 0:\n            a, b = i, n // i\n            min_f = min(min_f, max(len(str(a)), len(str(b))))\n\n    return min_f",
        "test": "assert solution(\"10000\") == 3, \"Test case failed\"",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 4217,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    \n    food_count = [0] * M\n    \n    for i in range(1, N+1):\n        _, *foods = map(int, lines[i].split())\n        for food in foods:\n            food_count[food-1] += 1\n    \n    liked_by_all = 0\n    for count in food_count:\n        if count == N:\n            liked_by_all += 1\n    \n    return str(liked_by_all)",
        "test": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\\n2 3 2\\n\") == \"1\"",
        "num_ids": 734,
        "indeed": true
    },
    {
        "number": 4218,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    odd_numbers = [i for i in range(1, N+1) if i % 2 != 0]\n    total_numbers = [i for i in range(1, N+1)]\n    probability = len(odd_numbers) / len(total_numbers)\n    return f\"{probability:.10f}\"",
        "test": "assert solution(\"4\") == \"0.5000000000\"",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 4219,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def is_consistent(honest_people, testimony):\n        x, y = testimony\n        if y == 1:\n            if x not in honest_people:\n                return False\n        else:\n            if x in honest_people:\n                return False\n        return True\n\n    def dfs(index, honest_people):\n        if index > N:\n            return len(honest_people)\n        max_honest = dfs(index + 1, honest_people)\n        honest_people.add(index)\n        max_inconsistent = dfs(index + 1, honest_people)\n        honest_people.remove(index)\n        return max(max_honest, max_inconsistent)\n\n    input_list = stdin.split('\\n')\n    N = int(input_list[0])\n    A = list(map(int, input_list[1:N + 1]))\n    testimonies = [list(map(int, input_list[i + N + 1].split())) for i in range(N)]\n\n    honest_people = set()\n    for i in range(N):\n        for j in range(A[i]):\n            if not is_consistent(honest_people, testimonies[i][j]):\n                return str(len(honest_people))\n            if testimonies[i][j][1] == 1:\n                honest_people.add(testimonies[i][j][0])\n\n    max_honest = dfs(0, set())\n    return str(max_honest)",
        "test": "assert solution(\"4\\n1\\n2 1\\n1 1\\n1\\n3 0\\n1\\n2 1\\n3 0\\n1\\n4 1\\n2 1\\n3 0\\n1\\n4 1\\n\") == \"3\"",
        "num_ids": 1441,
        "indeed": false
    },
    {
        "number": 4220,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(str, stdin.split())\n    K = int(K)\n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + \"...\"",
        "test": "assert solution(10, \"helloworld\") == \"helloworld\"",
        "num_ids": 258,
        "indeed": true
    },
    {
        "number": 4221,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[-1] == 's':\n        return s + 'es'\n    else:\n        return s + 's'",
        "test": "assert solution(\"apple\") == \"apples\"",
        "num_ids": 211,
        "indeed": true
    },
    {
        "number": 4222,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, K = map(int, lines[0].split())\n\n    snacks = [set() for _ in range(N)]\n    for i in range(K):\n        d, *A = map(int, lines[i + 1].split())\n        for a in A:\n            snacks[a - 1].add(i)\n\n    victims = [i + 1 for i in range(N) if not snacks[i]]\n    return str(len(victims))",
        "test": "assert solution(\"5 3\\n2\\n1 3\\n3\\n1 3 5\\n3\\n2 4\\n2\\n2 4\") == \"2\"",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 4223,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split('\\n')\n    n = int(n)\n    ans = []\n    i = 0\n    while i < n:\n        color = s[i]\n        count = 1\n        i += 1\n        while i < n and s[i] == color:\n            count += 1\n            i += 1\n        ans.append(color * count)\n    return len(ans)\n\nstdin = sys.stdin.read()\nprint(solution(stdin)) ",
        "test": "assert solution(\"7\\nabcdddb\") == 3",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 4224,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    max_operations = 0\n\n    for i in range(n):\n        if a[i] % 2 == 1:\n            if a[i] % 3 == 1:\n                max_operations += 1\n            else:\n                max_operations += 2\n        else:\n            max_operations += 1\n\n    return str(max_operations)",
        "test": "assert solution(\"5\\n1 2 3 4 5\") == 2",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 4225,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    cards = [1] * A + [0] * B + [-1] * C\n    cards.sort(reverse=True)\n    return str(sum(cards[:K]))",
        "test": "assert solution(\"2 1 1 3\") == \"2\"  # Example 1",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 4226,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    \n    for cranes in range(x + 1):\n        turtles = x - cranes\n        if 2 * cranes + 4 * turtles == y:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"3 8\") == \"Yes\" # there are 2 cranes and 1 turtle ",
        "num_ids": 401,
        "indeed": true
    },
    {
        "number": 4227,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_path(graph, visited):\n        if len(visited) == len(graph):\n            return True\n\n        for vertex in graph[visited[-1]]:\n            if vertex not in visited:\n                visited.append(vertex)\n                if is_valid_path(graph, visited):\n                    return True\n                visited.pop()\n        return False\n\n    def count_paths(graph, visited, current_vertex, target_vertex):\n        if current_vertex == target_vertex:\n            return 1\n\n        if current_vertex not in visited:\n            visited.append(current_vertex)\n            count = 0\n            for vertex in graph[current_vertex]:\n                if vertex not in visited:\n                    count += count_paths(graph, visited, vertex, target_vertex)\n            visited.pop()\n            return count\n        return 0\n\n    N, M = map(int, stdin.readline().split())\n    graph = {i: set() for i in range(1, N + 1)}\n\n    for _ in range(M):\n        a, b = map(int, stdin.readline().split())\n        graph[a].add(b)\n        graph[b].add(a)\n\n    visited = [1]\n    if is_valid_path(graph, visited):\n        return count_paths(graph, [], 1, N)\n    return 0",
        "test": "assert solution(\"4 4\\n1 2\\n1 3\\n2 3\\n1 4\") == 4",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 4228,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.strip().split())\n    apples = [L + i - 1 for i in range(1, N + 1)]\n    max_flavor = sum(apples)\n    min_diff = float('inf')\n    best_choice = None\n\n    for i, apple in enumerate(apples):\n        new_flavor = max_flavor - apple\n        diff = abs(new_flavor - max_flavor)\n\n        if diff < min_diff:\n            min_diff = diff\n            best_choice = i\n\n    return str(sum(apples[:best_choice] + apples[best_choice + 1:]))",
        "test": "assert solution(\"4 0\\n\") == \"6\"",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 4229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    total_sum = 0\n    for i in range(1, N + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            total_sum += i\n        elif i % 3 == 0:\n            total_sum += i\n        elif i % 5 == 0:\n            total_sum += i\n    return str(total_sum)\n",
        "test": "assert solution(10) == 33   # Sum of numbers from 1 to 10",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 4230,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    input_data = list(map(int, stdin.split()))\n    X = input_data[0]\n    N = input_data[1]\n    p = input_data[2:]\n\n    # Create a set of the sequence to efficiently check membership\n    p_set = set(p)\n\n    # Initialize the nearest integer and the absolute difference\n    nearest_integer = None\n    min_diff = float('inf')\n\n    # Iterate through all possible integers not in the sequence\n    for i in range(1, 101):\n        if i not in p_set:\n            diff = abs(i - X)\n            if diff < min_diff:\n                min_diff = diff\n                nearest_integer = i\n\n    return str(nearest_integer)",
        "test": "assert solution('6 5\\n4 7 10 6 5\\n') == '8'",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 4231,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, W, h, w = map(int, stdin.split())\n    white_cells = H * W - (h * W + w * H - h * w)\n    return str(white_cells)",
        "test": "assert solution(\"3 2\\n2 1\") == \"1\"",
        "num_ids": 336,
        "indeed": true
    },
    {
        "number": 4232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sequence = list(map(int, input().split()))\n    \n    if k == 0:\n        return \"1\"\n    elif k == n:\n        return \"1000000000\"\n    \n    sequence.sort()\n    \n    if sequence[0] > k:\n        return \"-1\"\n    \n    left, right = 1, 10**9\n    \n    while left < right:\n        mid = (left + right + 1) // 2\n        count = 0\n        \n        for num in sequence:\n            if num <= mid:\n                count += 1\n        \n        if count >= k:\n            right = mid - 1\n        else:\n            left = mid\n            \n    return str(left)",
        "test": "assert solution(\"7 2\\n3 7 5 1 10 3 20\\n\") == \"-1\"",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 4233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_star(x: int, y: int, size: int, n: int, m: int) -> bool:\n        return 1 <= x <= n - 1 and 1 <= y <= m - 1 and all(\n            (x + dx, y + dy) != (x, y) and (1 <= x + dx <= n - 1 and 1 <= y + dy <= m - 1)\n            for dx, dy in [(0, size), (size, 0), (0, -size), (-size, 0)]\n        )\n\n    n, m = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(n)]\n\n    stars = []\n    for x in range(n):\n        for y in range(m):\n            if grid[x][y] == \"*\":\n                for size in range(1, min(n, m) + 1):\n                    if is_valid_star(x, y, size, n, m):\n                        stars.append((x, y, size))\n\n    if len(stars) > n * m:\n        return \"-1\"\n    else:\n        result = [f\"{len(stars)}\"]\n        for x, y, size in stars:\n            result.append(f\"{x} {y} {size}\")\n        return \"\\n\".join(result)",
        "test": "assert solution(\"\"\"",
        "num_ids": 1368,
        "indeed": false
    },
    {
        "number": 4234,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    k = 0\n    for i in range(1, n - 1, 2):\n        if s[i] == s[i + 1]:\n            k += 1\n    \n    if n % 2 == 0:\n        if s[-1] == s[-2]:\n            k += 1\n    \n    if k % 2 == 1:\n        k += 1\n    \n    print(k)\n    \n    if k > 0:\n        result = \"\"\n        for i in range(0, n - k, 2):\n            result += s[i]\n        if n % 2 == 0 or k % 2 == 0:\n            result += s[-1]\n        print(result)",
        "test": "assert solution(\"4\\naabc\\n\") == \"2\\nab\"",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 4235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    edges = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n\n    # Check if it is possible to direct edges without creating paths of length 2 or greater\n    for i in range(m):\n        u, v = edges[i]\n        for j in range(m):\n            if i == j:\n                continue\n            w, x = edges[j]\n            if u == w and v == x:\n                return \"NO\"\n            if u == x and v == w:\n                return \"NO\"\n\n    # Output the possible orientation of edges\n    return \"YES\\n\" + \"\".join([\"1\" if edges[i][0] > edges[i][1] else \"0\" for i in range(m)])",
        "test": "assert solution(\"4 2\\n1 2\\n3 4\") == \"NO\"",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 4236,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Split input by lines and parse the first line to get n and m\n    n, m = map(int, stdin.split('\\n')[0].split())\n\n    # Create a set to store points that don't belong to any segment\n    points = set(range(1, m + 1))\n\n    # Iterate over the next n lines and remove points that belong to each segment\n    for i in range(n):\n        l, r = map(int, stdin.split('\\n')[i + 1].split())\n        points -= set(range(l, r + 1))\n\n    # Calculate the number of remaining points\n    k = len(points)\n\n    # Convert the set to a list and sort it\n    points = sorted(list(points))\n\n    # Return the output as a string\n    return f\"{k}\\n{' '.join(map(str, points))}\"",
        "test": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"",
        "num_ids": 677,
        "indeed": false
    },
    {
        "number": 4237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for i in range(A, B + 1):\n        if i % C != 0 and i % D != 0:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"1 10 3 5\") == 2",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 4238,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    digits_sum = sum(int(d) for d in str(n))\n    if digits_sum % 9 == 0:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(\"123456789\") == \"Yes\"",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 4239,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    count = 0\n    power_6 = 1\n    power_9 = 1\n\n    while N > 0:\n        if N >= power_6:\n            N -= power_6\n            count += 1\n        elif N >= power_9:\n            N -= power_9\n            count += 1\n        else:\n            N -= 1\n            count += 1\n\n        power_6 = 6 * power_6\n        power_9 = 9 * power_9\n\n    return str(count)",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 4240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\"\\n\")\n    if len(S) != len(T):\n        return \"No\"\n    if S == T:\n        return \"Yes\"\n    return \"Yes\" if (S + S).find(T) != -1 else \"No\"",
        "test": "assert solution(\"tokyo\") == \"Yes\"",
        "num_ids": 299,
        "indeed": true
    },
    {
        "number": 4241,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    s_len, t_len = len(s), len(t)\n    if t_len > s_len:\n        return -1\n    for i in range(s_len - t_len + 1):\n        if s[i:i + t_len] == t:\n            return 0\n    min_changes = float('inf')\n    for i in range(s_len - t_len + 1):\n        for j in range(i, i + t_len):\n            min_changes = min(min_changes, s[j] != t[j - i])\n    return min_changes",
        "test": "assert solution(\"hello\\nhel\") == 0",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 4242,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    common_divisors = []\n\n    for i in range(1, min(A, B) + 1):\n        if A % i == 0 and B % i == 0:\n            common_divisors.append(i)\n\n    common_divisors.sort(reverse=True)\n    return str(common_divisors[K - 1])",
        "test": "assert solution(\"8 12 2\") == \"2\"",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 4243,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    count = [0] * 6\n    happiness = [0] * 6\n\n    # Define happiness points for each coin\n    happiness[0] = 0  # 1 yen coin\n    happiness[1] = 5  # 5 yen coin\n    happiness[2] = 10  # 10 yen coin\n    happiness[3] = 50  # 50 yen coin\n    happiness[4] = 100  # 100 yen coin\n    happiness[5] = 1000  # 500 yen coin\n\n    for i in range(5, -1, -1):\n        # Calculate maximum number of coins of each type\n        count[i] = x // happiness[i]\n        x -= count[i] * happiness[i]\n\n    total_happiness = sum(happiness[i] * count[i] for i in range(6))\n    return str(total_happiness)",
        "test": "assert solution(\"0\") == 0",
        "num_ids": 528,
        "indeed": false
    },
    {
        "number": 4244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, X = list(map(int, stdin.split()))\n    X = sorted(X)\n    mean = X[N // 2]\n\n    total_stamina = 0\n    for x in X:\n        total_stamina += (x - mean) ** 2\n\n    return str(total_stamina)",
        "test": "assert solution(\"3\\n1 3 5\") == 4",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 4245,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    count = 0\n    while B > 0:\n        B -= A\n        count += 1\n    return str(count)",
        "test": "assert solution(\"4 10\") == \"3\"",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 4246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.splitlines()\n    count = 0\n    for i in range(len(S)):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"SSR\\nRCS\") == 1",
        "num_ids": 245,
        "indeed": true
    },
    {
        "number": 4247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    count = 0\n    \n    for i in range(1, n - 1):\n        sorted_p = sorted([p[i - 1], p[i], p[i + 1]])\n        if sorted_p[1] == p[i]:\n            count += 1\n            \n    return str(count)",
        "test": "assert solution(\"5\\n1 2 3 4 5\") == \"0\"",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 4248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for _ in range(n):\n        x, y = map(float, stdin.readline().strip().split())\n        points.append((x, y))\n\n    def slope(p1, p2):\n        if p1[0] == p2[0]:\n            return float('inf')\n        return (p2[1] - p1[1]) / (p2[0] - p1[0])\n\n    def angle(s1, s2):\n        return math.atan((s2 - s1) / (1 + s1 * s2))\n\n    angles = []\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if points[i][0] == points[j][0] and points[i][1] == points[j][1]:\n                continue\n            s1 = slope(points[i], points[j])\n            for k in range(j + 1, n):\n                if points[j][0] == points[k][0] and points[j][1] == points[k][1]:\n                    continue\n                s2 = slope(points[j], points[k])\n                if s1 == float('inf') or s2 == float('inf'):\n                    continue\n                angles.append(angle(s1, s2))\n\n    if not angles:\n        return \"0.00\"\n    return \"{:.3f}\".format(sum(angles) / len(angles))",
        "test": "assert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"",
        "num_ids": 1467,
        "indeed": false
    },
    {
        "number": 4249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def can_write_pages(cups, pages_to_write):\n        total_caffeine = 0\n        for i, cup in enumerate(cups, start=1):\n            total_caffeine += cup\n            if total_caffeine >= pages_to_write:\n                return True\n            if i < len(cups):\n                total_caffeine -= i\n        return False\n\n    def binary_search(cups, pages_to_write, left, right):\n        while left <= right:\n            mid = (left + right) // 2\n            if can_write_pages(cups, mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n\n    n, m = map(int, stdin.readline().split())\n    cups = list(map(int, stdin.readline().split()))\n\n    if n * max(cups) < m:\n        return \"-1\"\n\n    pages_to_write = binary_search(cups, m, 0, n * max(cups))\n    return str(pages_to_write)\n",
        "test": "assert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"",
        "num_ids": 859,
        "indeed": false
    },
    {
        "number": 4250,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = list(map(int, stdin.readline().split()))\n\n    # Create a dictionary to store the frequency of each element in s\n    freq_dict = {}\n    for num in s:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Create an array t to store the elements of s with the highest frequency\n    t = []\n    for i in range(k):\n        max_freq = 0\n        max_num = None\n        for num in freq_dict:\n            if freq_dict[num] > max_freq:\n                max_freq = freq_dict[num]\n                max_num = num\n        if max_num is not None:\n            t.append(max_num)\n            freq_dict[max_num] -= 1\n            if freq_dict[max_num] == 0:\n                del freq_dict[max_num]\n\n    # Return the array t as a string\n    return \" \".join(map(str, t))",
        "test": "assert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"",
        "num_ids": 1063,
        "indeed": false
    },
    {
        "number": 4251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n\n    def is_k_acceptable(k: int) -> bool:\n        for i in range(n * m - 1):\n            if abs(a[i // m][i % m] - a[(i + 1) // m][(i + 1) % m]) < k:\n                return False\n        return True\n\n    left, right = 0, 10 ** 9\n    while left < right:\n        mid = (left + right + 1) // 2\n        if is_k_acceptable(mid):\n            left = mid\n        else:\n            right = mid - 1\n\n    return str(left)",
        "test": "assert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\\n\") == \"0\"",
        "num_ids": 903,
        "indeed": false
    },
    {
        "number": 4252,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, file_name = stdin.split(\"\\n\")\n    n = int(n)\n\n    if \"xxx\" not in file_name:\n        return \"0\"\n\n    min_removals = n\n    for i in range(n - 2):\n        if file_name[i:i + 3] == \"xxx\":\n            min_removals = min(min_removals, n - i - 3)\n\n    return str(min_removals)\n",
        "test": "assert solution(\"5\\nxxoxx\") == \"0\"",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 4253,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip())\n    area = 3 * r ** 2\n    return str(area)",
        "test": "assert solution('4') == '48'",
        "num_ids": 179,
        "indeed": true
    },
    {
        "number": 4254,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if W >= S:\n        return \"unsafe\"\n    else:\n        return \"safe\"",
        "test": "assert solution(\"4 5\") == \"unsafe\"",
        "num_ids": 256,
        "indeed": true
    },
    {
        "number": 4255,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    ab, bc, ca = map(int, stdin.split())\n    area = 0.5 * ab * bc\n    return str(int(area))",
        "test": "assert solution(\"3 4 5\") == \"6\"",
        "num_ids": 294,
        "indeed": true
    },
    {
        "number": 4256,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if B // A >= C:\n        return str(C)\n    else:\n        return str(B // A)",
        "test": "assert solution(\"2 11 4\") == \"4\"",
        "num_ids": 290,
        "indeed": true
    },
    {
        "number": 4257,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    result = a * b\n    return str(result)",
        "test": "assert solution('2 5') == '10'",
        "num_ids": 175,
        "indeed": true
    },
    {
        "number": 4258,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = map(int, stdin.split())\n    total_biscuits = 0\n    seconds = 1\n    while seconds <= t + 0.5:\n        if seconds % a == 0:\n            total_biscuits += b\n        seconds += 1\n    return str(total_biscuits)",
        "test": "assert solution(\"1 1 1\") == \"1\"",
        "num_ids": 343,
        "indeed": true
    },
    {
        "number": 4259,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    for i in range(A, B + 1):\n        if i % K == 0:\n            return \"OK\"\n    return \"NG\"",
        "test": "assert solution(\"7\\n500 600\") == \"OK\"",
        "num_ids": 299,
        "indeed": true
    },
    {
        "number": 4260,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    hours_world_a = T * X\n    return str(hours_world_a)",
        "test": "assert solution(\"2 1\") == \"2\"  # sample test case 2",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 4261,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    amount_to_transfer = min(C, A - B)\n    return str(C - amount_to_transfer)\n\nstdin = \"6 4 3\"\nprint(solution(stdin)) ",
        "test": "assert solution('6 4 3') == '1'",
        "num_ids": 245,
        "indeed": true
    },
    {
        "number": 4262,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def factorial(n: int) -> int:\n        if n <= 1:\n            return 1\n        return n * factorial(n - 1)\n\n    def lexicographic_rank(permutation: list) -> int:\n        n = len(permutation)\n        rank = 0\n        for i in range(n):\n            count = 0\n            for j in range(i):\n                if permutation[j] < permutation[i]:\n                    count += 1\n            rank += count * factorial(n - i - 1)\n        return rank + 1\n\n    def find_distance(P: list, Q: list) -> int:\n        return abs(lexicographic_rank(P) - lexicographic_rank(Q))\n\n    stdin_list = stdin.split(\"\\n\")\n    N = int(stdin_list[0])\n    P = [int(x) for x in stdin_list[1].split()]\n    Q = [int(x) for x in stdin_list[2].split()]\n    result = find_distance(P, Q)\n    return str(result)",
        "test": "assert solution(\"2\\n2 1\\n1 2\\n\") == \"1\"",
        "num_ids": 816,
        "indeed": false
    },
    {
        "number": 4263,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    ACGT = \"ACGT\"\n    max_len = 0\n\n    for i in range(len(S)):\n        for j in range(i, len(S)):\n            if all(c in ACGT for c in S[i:j+1]):\n                max_len = max(max_len, j-i+1)\n\n    return max_len",
        "test": "assert solution(\"ATCODER\") == 3",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 4264,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if len(str(i)) % 2 == 1:\n            count += 1\n    return count",
        "test": "assert solution(11) == 9",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 4265,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    count = 0\n\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            count += 1\n\n    return count",
        "test": "assert solution(\"cupofcoffee\\ncupofhottea\") == 4",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 4266,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    black_stones = [X + i for i in range(K)]\n    black_stones += [X - i for i in range(1, K)]\n    black_stones.sort()\n    return ' '.join(map(str, black_stones))",
        "test": "assert solution(\"3 7\") == \"5 6 7 8 9\"",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 4267,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    \n    if x >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"25\") == \"No\"",
        "num_ids": 178,
        "indeed": true
    },
    {
        "number": 4268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split()[:2])\n    points = [list(map(int, stdin.split()[2+D*i:2+D*(i+1)])) for i in range(N)]\n    \n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist.is_integer():\n                count += 1\n                \n    return str(count)",
        "test": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"",
        "num_ids": 615,
        "indeed": false
    },
    {
        "number": 4269,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    bad = False\n    for i in range(3):\n        if S[i] == S[i+1]:\n            bad = True\n            break\n    return \"Good\" if not bad else \"Bad\"",
        "test": "assert solution(\"3776\") == \"Bad\"",
        "num_ids": 292,
        "indeed": true
    },
    {
        "number": 4270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *v = map(int, stdin.split())\n    v.sort()\n    max_value = float(v[0])\n    for i in range(1, N):\n        max_value = (max_value + v[i]) / 2\n    return format(max_value, \".5f\")\n\nstdin = sys.stdin.readline().strip()\nprint(solution(stdin)) ",
        "test": "assert solution(\"3\\n1 2 3\\n\") == \"2\"",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 4271,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(lambda x: list(map(int, x.split())), stdin.split('\\n'))\n    n = n[0]\n    a = a[:n]\n    b = b[:n]\n    c = c[:n-1]\n\n    satisfaction = 0\n    for i in range(n):\n        satisfaction += b[a[i] - 1]\n        if i < n - 1 and a[i] + 1 == a[i + 1]:\n            satisfaction += c[a[i] - 1]\n\n    return str(satisfaction)",
        "test": "assert solution(\"3\\n3 1 2\\n2 5 4\\n3 6\") == \"14\"  # Sample Input 1",
        "num_ids": 588,
        "indeed": true
    },
    {
        "number": 4272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split('\\n')\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'ABC':\n            count += 1\n    return str(count)",
        "test": "assert solution(\"ABCABCABC\") == \"3\"  # All three characters are in contiguous subsequences",
        "num_ids": 299,
        "indeed": true
    },
    {
        "number": 4273,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(name: str) -> bool:\n        return name[0] in 'MARCH'\n\n    N, *names = stdin.split('\\n')\n    N = int(N)\n    valid_names = [name for name in names if is_valid(name)]\n\n    count = 0\n    for i in range(len(valid_names)):\n        for j in range(i + 1, len(valid_names)):\n            for k in range(j + 1, len(valid_names)):\n                if len({valid_names[i][0], valid_names[j][0], valid_names[k][0]}) == 3:\n                    count += 1\n\n    return str(count)",
        "test": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"",
        "num_ids": 861,
        "indeed": false
    },
    {
        "number": 4274,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    if m == n:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"3 3\") == \"Yes\"",
        "num_ids": 181,
        "indeed": true
    },
    {
        "number": 4275,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('sippuu') == 'Yes'",
        "num_ids": 221,
        "indeed": true
    },
    {
        "number": 4276,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, T = map(int, lines[0].split())\n    costs = []\n    times = []\n    for i in range(1, N + 1):\n        c, t = map(int, lines[i].split())\n        if t <= T:\n            costs.append(c)\n            times.append(t)\n    if len(costs) == 0:\n        return \"TLE\"\n    return str(min(costs))",
        "test": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"",
        "num_ids": 600,
        "indeed": true
    },
    {
        "number": 4277,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    train_cost = N * A\n    min_cost = min(train_cost, B)\n    return str(min_cost)",
        "test": "assert solution('4 2 9') == '8'",
        "num_ids": 249,
        "indeed": true
    },
    {
        "number": 4278,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    strings = stdin.split('\\n')[1:]\n    anagrams = {}\n\n    for i in range(N):\n        sorted_string = ''.join(sorted(strings[i]))\n        if sorted_string in anagrams:\n            anagrams[sorted_string] += 1\n        else:\n            anagrams[sorted_string] = 1\n\n    count = 0\n    for key in anagrams:\n        count += (anagrams[key] * (anagrams[key] - 1)) // 2\n\n    return str(count)",
        "test": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 4279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def get_number(k: int) -> int:\n        block_number = 1\n        while k > block_number * (block_number + 1) // 2:\n            k -= block_number * (block_number + 1) // 2\n            block_number += 1\n        block_elements = [str(i) for i in range(1, block_number + 1)]\n        return int(block_elements[k - 1])\n\n    queries = [int(line) for line in stdin.strip().split('\\n')][1:]\n    result = [get_number(query) for query in queries]\n    return '\\n'.join([str(r) for r in result])",
        "test": "assert solution(\"4\\n2132\\n506\\n999999999\\n100000000\") == \"8\\n2\\n9\\n8\"",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 4280,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def find_parent(parent, x):\n        if parent[x] != x:\n            parent[x] = find_parent(parent, parent[x])\n        return parent[x]\n\n    def union_parent(parent, x, y):\n        x_root = find_parent(parent, x)\n        y_root = find_parent(parent, y)\n\n        if x_root != y_root:\n            parent[y_root] = x_root\n\n    n, k = map(int, stdin.readline().split())\n\n    parent = [i for i in range(n + 1)]\n    roads = []\n    for _ in range(n - 1):\n        x, y = map(int, stdin.readline().split())\n        union_parent(parent, x, y)\n        roads.append((x, y))\n\n    components = set()\n    for i in range(1, n + 1):\n        components.add(find_parent(parent, i))\n\n    r = len(components)\n    cities = [0] * n\n    for x, y in roads:\n        if find_parent(parent, x) != find_parent(parent, y):\n            cities[x - 1] += 1\n            cities[y - 1] += 1\n\n    while True:\n        bad_cities = sum(1 for c in cities if c > 1)\n        if bad_cities <= k:\n            break\n\n        r += 1\n        for i in range(n):\n            if cities[i] > 1:\n                cities[i] -= 1\n                cities[find_parent(parent, i + 1) - 1] += 1\n\n    companies = [i % r + 1 for i in range(n - 1)]\n    output = \"{}\".format(r)\n    output += \"\\n{}\".format(\" \".join(str(c) for c in companies))\n    return output",
        "test": "assert solution(\"\"\"6 2",
        "num_ids": 1230,
        "indeed": false
    },
    {
        "number": 4281,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    x = list(map(int, stdin.split('\\n')[1].split()))\n\n    min_houses = len(set(x))\n    max_houses = len(set(x)) + len([i for i in range(1, n+1) if i not in x])\n\n    return f\"{min_houses} {max_houses}\"",
        "test": "assert solution(\"9\\n1 1 8 8 8 4 4 4 4\\n\") == \"3 8\"",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 4282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    data = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    p = []\n    visited = set()\n\n    for i in range(n):\n        if i not in visited:\n            p.append(i + 1)\n            visited.add(i)\n            while p[-1] not in visited:\n                x, y = data[p[-1] - 1]\n                if x not in visited:\n                    p.append(x)\n                    visited.add(x)\n                elif y not in visited:\n                    p.append(y)\n                    visited.add(y)\n                else:\n                    break\n            if len(p) == n:\n                break\n\n    return \" \".join(map(str, p))",
        "test": "assert solution(\"3\\n2 3\\n3 1\\n1 2\") == \"3 1 2\" ",
        "num_ids": 1049,
        "indeed": false
    },
    {
        "number": 4283,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    arr.sort()\n\n    max_students = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) <= 5:\n                max_students = max(max_students, j - i + 1)\n\n    return str(max_students)",
        "test": "assert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"",
        "num_ids": 699,
        "indeed": true
    },
    {
        "number": 4284,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def max_first_type_turns(k: int, n: int, a: int, b: int) -> int:\n        if k < a:\n            return -1\n        max_turns = 0\n        for i in range(n):\n            if k > a:\n                k -= a\n                max_turns += 1\n            elif k > b:\n                k -= b\n            else:\n                break\n        return max_turns if k > 0 else -1\n\n    queries = [list(map(int, line.split())) for line in stdin.splitlines()]\n    results = [max_first_type_turns(*query) for query in queries]\n    return \"\\n\".join(map(str, results))",
        "test": "assert solution(\"15 5 4 3\") == -1",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 4285,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    modulo = 10**9 + 7\n\n    dp = [[0] * 3 for _ in range(n + 1)]\n\n    for i in range(n):\n        if s[i] == \"?\":\n            for j in range(3):\n                for k in range(3):\n                    dp[i + 1][j] += dp[i][k]\n                    dp[i + 1][j] %= modulo\n        else:\n            dp[i + 1][ord(s[i]) - ord(\"a\")] = 1\n\n    result = dp[n][0] * 2\n    result += dp[n][1] * 2\n    result += dp[n][2] * 1\n\n    return str(result % modulo)",
        "test": "assert solution(\"7\\n???????\") == \"2835\"",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 4286,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    offers = [list(map(int, lines[i].split())) for i in range(2, 2 + m)]\n\n    def kruskal(n, a, offers):\n        parent = list(range(n))\n        rank = [0] * n\n\n        def find(x):\n            if parent[x] != x:\n                parent[x] = find(parent[x])\n            return parent[x]\n\n        def union(x, y):\n            xroot = find(x)\n            yroot = find(y)\n            if xroot == yroot:\n                return False\n            if rank[xroot] < rank[yroot]:\n                parent[xroot] = yroot\n            elif rank[xroot] > rank[yroot]:\n                parent[yroot] = xroot\n            else:\n                parent[yroot] = xroot\n                rank[xroot] += 1\n            return True\n\n        edges = []\n        for x, y, w in offers:\n            edges.append((w, x - 1, y - 1))\n        for i in range(n):\n            for j in range(i + 1, n):\n                edges.append((a[i] + a[j], i, j))\n\n        edges.sort()\n\n        connected_components = n\n        minimum_cost = 0\n        for w, x, y in edges:\n            if union(x, y):\n                connected_components -= 1\n                minimum_cost += w\n                if connected_components == 1:\n                    return minimum_cost\n        return None\n\n    return str(kruskal(n, a, offers))",
        "test": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\\n\") == \"5\"",
        "num_ids": 1355,
        "indeed": false
    },
    {
        "number": 4287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(left, right):\n        while left < right:\n            mid = (left + right) // 2\n            if is_valid(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left\n\n    def is_valid(total_fatigue):\n        current_fatigue = 0\n        umbrellas = []\n        for i in range(a + 1):\n            if i > 0 and any(l_i <= i <= r_i for l_i, r_i in rain_segments):\n                current_fatigue += total_fatigue\n            while umbrellas and umbrellas[0][1] <= i:\n                umbrellas.pop(0)\n            if umbrellas:\n                current_fatigue += umbrellas[0][0]\n            if current_fatigue > total_fatigue:\n                return False\n        return True\n\n    stdin = stdin.split('\\n')\n    a, n, m = map(int, stdin[0].split())\n    rain_segments = [list(map(int, stdin[i + 1].split())) for i in range(n)]\n    umbrellas = [list(map(int, stdin[n + i + 1].split())) for i in range(m)]\n\n    if any(r_i - l_i + 1 > m for l_i, r_i in rain_segments):\n        return \"-1\"\n\n    total_fatigue = binary_search(0, sum(p for x, p in umbrellas) + a)\n    return str(total_fatigue) ",
        "test": "assert solution(\"\"\"10 2 4",
        "num_ids": 1612,
        "indeed": false
    },
    {
        "number": 4288,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if (A == B and A != C) or (A == C and A != B) or (B == C and B != A):\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"5 7 5\") == \"Yes\" ",
        "num_ids": 280,
        "indeed": true
    },
    {
        "number": 4289,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def get_avg_temperature(elevation: int) -> float:\n        return elevation * 0.006\n\n    N, T, A = map(int, stdin.split()[0:3])\n    H = list(map(int, stdin.split()[3:]))\n\n    min_diff = float('inf')\n    min_diff_index = -1\n\n    for i, h in enumerate(H):\n        avg_temp = T - get_avg_temperature(h)\n        diff = abs(avg_temp - A)\n\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n\n    return str(min_diff_index + 1)",
        "test": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"",
        "num_ids": 600,
        "indeed": true
    },
    {
        "number": 4290,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N % 2 == 0:\n        return str(N * (N - 1) // 2)\n    else:\n        return str((N - 1) * N // 2)",
        "test": "assert solution(\"2 1\") == \"1\"  # Test case 1",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 4291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, Q = map(int, lines[0].split())\n    S = lines[1]\n    queries = [list(map(int, query.split())) for query in lines[2:]]\n\n    def count_AC(s: str) -> int:\n        count = 0\n        i = 0\n        while i < len(s) - 1:\n            if s[i:i+2] == 'AC':\n                count += 1\n                i += 2\n            else:\n                i += 1\n        return count\n\n    def substring_count(l: int, r: int) -> int:\n        return count_AC(S[l-1:r])\n\n    result = []\n    for query in queries:\n        l, r = query\n        result.append(substring_count(l, r))\n\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"8 3\\nACACTACG\\n3 7\\n2 3\\n1 8\") == \"2\\n0\\n3\"",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 4292,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, K = map(int, lines[0].split())\n    prices = list(map(int, lines[1].split()))\n    prices.sort()\n    total_price = sum(prices[:K])\n    return str(total_price)",
        "test": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"  # Sample Input 1",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 4293,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n\n    route_a_b_c = P + Q\n    route_a_c_a = R + Q\n    route_b_a_c = P + Q\n    route_b_c_a = P + R\n    route_c_a_b = R + Q\n    route_c_b_a = P + R\n\n    min_route = min(route_a_b_c, route_a_c_a, route_b_a_c, route_b_c_a, route_c_a_b, route_c_b_a)\n\n    return str(min_route)",
        "test": "assert solution(\"1 3 4\") == \"4\"",
        "num_ids": 485,
        "indeed": true
    },
    {
        "number": 4294,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x < a:\n        return str(0)\n    else:\n        return str(10)",
        "test": "assert solution(\"3 5\") == \"0\"",
        "num_ids": 227,
        "indeed": true
    },
    {
        "number": 4295,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n\n    while N != 0:\n        N = abs(N - K)\n\n    return str(N)",
        "test": "assert solution(\"10 5\") == \"0\"",
        "num_ids": 238,
        "indeed": false
    },
    {
        "number": 4296,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if A_1+A_2+A_3 >= 22:\n        return \"bust\"\n    else:\n        return \"win\"",
        "test": "assert solution(\"5 7 9\") == \"win\"",
        "num_ids": 278,
        "indeed": true
    },
    {
        "number": 4297,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    lcm = 2 * N\n    while True:\n        if lcm % N == 0:\n            return str(lcm)\n        lcm += 2",
        "test": "assert solution(\"3\") == \"6\"",
        "num_ids": 202,
        "indeed": false
    },
    {
        "number": 4298,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    return min(N, D + 1)",
        "test": "assert solution(\"1 1\") == 1",
        "num_ids": 341,
        "indeed": false
    },
    {
        "number": 4299,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 10 == 2 or N % 10 == 4 or N % 10 == 5 or N % 10 == 7 or N % 10 == 9:\n        return \"hon\"\n    elif N % 10 == 0 or N % 10 == 1 or N % 10 == 6 or N % 10 == 8:\n        return \"pon\"\n    else:\n        return \"bon\"",
        "test": "assert solution(\"16\") == \"pon\"",
        "num_ids": 455,
        "indeed": true
    },
    {
        "number": 4300,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    total_health = 0\n    \n    for i in range(N):\n        for j in range(i + 1, N):\n            total_health += d[i] * d[j]\n            \n    return str(total_health)",
        "test": "assert solution(\"3\\n3 1 2\") == \"11\"",
        "num_ids": 375,
        "indeed": true
    },
    {
        "number": 4301,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, A = int(stdin.split(\"\\n\")[0]), list(map(int, stdin.split(\"\\n\")[1:]))\n\n    # Initialize result list\n    res = []\n\n    # Iterate through each element in the sequence\n    for i in range(N):\n        # Find the maximum value among the N-1 elements other than A_i in the sequence\n        max_val = max(A[:i] + A[i+1:])\n\n        # Append the result to the result list\n        res.append(max_val)\n\n    # Convert the result list to a string and return it\n    return \"\\n\".join(map(str, res))",
        "test": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 4302,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return str(A * 2)\n    elif A > B:\n        return str(A + B - 1)\n    else:\n        return str(A + B)",
        "test": "assert solution(\"10 10\") == \"20\"",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 4303,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    x = list(map(int, stdin.split()[2:]))\n    x.sort()\n\n    time = 0\n    for i in range(K):\n        time += abs(x[i] - (i - 1))\n        time += 1\n\n    return str(time)",
        "test": "assert solution(\"3 2\\n-3 1 5\") == \"5\"",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 4304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    height = sum(range(1, 1000))\n    snow_cover = height - a - b\n    return str(snow_cover)",
        "test": "assert solution(\"1 499500\") == \"999\"",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 4305,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    return str((H + A - 1) // A)",
        "test": "assert solution(\"10 4\") == \"3\"",
        "num_ids": 180,
        "indeed": true
    },
    {
        "number": 4306,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    start_time = max(A, C)\n    end_time = min(B, D)\n    duration = end_time - start_time\n    if duration > 0:\n        return str(duration)\n    else:\n        return \"0\"",
        "test": "assert solution(\"0 75 25 100\") == \"50\"",
        "num_ids": 332,
        "indeed": true
    },
    {
        "number": 4307,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    for i in range(1, N+1):\n        divisors = []\n        for j in range(1, i+1):\n            if i % j == 0:\n                divisors.append(j)\n        if len(divisors) == 8 and i % 2 != 0:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"1\") == \"0\" # Test input 1",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 4308,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    min_diff = float('inf')\n    for i in range(1, N//K+1):\n        diff = N - K*i\n        if diff >= 0 and diff < min_diff:\n            min_diff = diff\n        else:\n            break\n    return str(min_diff)",
        "test": "assert solution(\"7 3\") == \"1\"",
        "num_ids": 333,
        "indeed": false
    },
    {
        "number": 4309,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 100:\n        return \"111\"\n    else:\n        return str(n).replace('0', '').replace('1', '111').replace('2', '111').replace('3', '111').replace('4', '111').replace('5', '111').replace('6', '111').replace('7', '111').replace('8', '111').replace('9', '111')[:3]",
        "test": "assert solution(\"111\") == \"111\"",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 4310,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n\n    # Calculate the cost for each possible order of completion\n    cost_123 = abs(A_2 - A_1) + abs(A_3 - A_2)\n    cost_132 = abs(A_3 - A_1) + abs(A_2 - A_3)\n    cost_213 = abs(A_1 - A_2) + abs(A_3 - A_1)\n    cost_231 = abs(A_3 - A_2) + abs(A_1 - A_3)\n    cost_312 = abs(A_1 - A_3) + abs(A_2 - A_1)\n    cost_321 = abs(A_2 - A_3) + abs(A_1 - A_2)\n\n    # Return the minimum cost\n    return min(cost_123, cost_132, cost_213, cost_231, cost_312, cost_321)",
        "test": "assert solution('1 6 3') == 5",
        "num_ids": 620,
        "indeed": false
    },
    {
        "number": 4311,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    n = 1\n    while True:\n        if a[n-1] % 2 == 0:\n            a.append(a[n-1] // 2)\n        else:\n            a.append((3 * a[n-1]) + 1)\n        if a[n] in a[:n]:\n            break\n        n += 1\n    return str(n + 1)",
        "test": "assert solution(\"8\") == \"5\"",
        "num_ids": 472,
        "indeed": true
    },
    {
        "number": 4312,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    takahashi_health = A\n    aoki_health = C\n    while takahashi_health > 0 and aoki_health > 0:\n        aoki_health -= B\n        if aoki_health <= 0:\n            break\n        takahashi_health -= D\n        if takahashi_health <= 0:\n            break\n    if takahashi_health > 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('10 9 10 10') == 'No'",
        "num_ids": 416,
        "indeed": true
    },
    {
        "number": 4313,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, V, C = list(map(int, stdin.split()))\n    V, C = V[1:], C[1:]\n    V.sort()\n    C.sort()\n    X, Y = 0, 0\n    for i in range(N - 1):\n        X += V[i]\n        Y += C[i]\n    return str(X - Y)",
        "test": "assert solution(\"3\\n10 2 5\\n6 3 4\\n\") == \"5\\n\"  # Sample Input with trailing newline",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 4314,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def remove_row_or_column(matrix, index, is_row):\n        if is_row:\n            return [row for i, row in enumerate(matrix) if i != index]\n        else:\n            return [row[:index] + row[index + 1:] for row in matrix]\n\n    def is_all_white(matrix, index, is_row):\n        if is_row:\n            return all(cell == '.' for cell in matrix[index])\n        else:\n            return all(row[index] == '.' for row in matrix)\n\n    H, W = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(H)]\n\n    rows_to_remove = set()\n    columns_to_remove = set()\n\n    for i in range(H):\n        if is_all_white(grid, i, True):\n            rows_to_remove.add(i)\n\n    for j in range(W):\n        if is_all_white(grid, j, False):\n            columns_to_remove.add(j)\n\n    while rows_to_remove or columns_to_remove:\n        if rows_to_remove:\n            row_index = rows_to_remove.pop()\n            grid = remove_row_or_column(grid, row_index, True)\n            H -= 1\n\n        if columns_to_remove:\n            column_index = columns_to_remove.pop()\n            grid = remove_row_or_column(grid, column_index, False)\n            W -= 1\n\n    return '\\n'.join([''.join(row) for row in grid])",
        "test": "assert solution(\"5 5\\n#####\\n#.#.#\\n#.#.#\\n#.#.#\\n#####\") == \"#####\\n#...#\\n#...#\\n#...#\\n#####\"",
        "num_ids": 1329,
        "indeed": false
    },
    {
        "number": 4315,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin.strip())\n    circumference = 2 * 3.141592653589793 * R\n    return f\"{circumference:.15f}\"",
        "test": "assert solution(\"2\") == \"12.566370614359172583\"",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 4316,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.upper()\n    if len(set(s)) == 2:\n        char1 = s[0]\n        char2 = s[1]\n        if s.count(char1) == 2 and s.count(char2) == 2:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"ASSA\") == \"Yes\"",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 4317,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    options = [a + b, a - b, a * b]\n    largest = max(options)\n    return str(largest)",
        "test": "assert solution(\"-13 3\") == \"-10\"",
        "num_ids": 251,
        "indeed": true
    },
    {
        "number": 4318,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = map(int, stdin.split())\n    count = 0\n    max_height = H[0]\n\n    for i in range(1, N):\n        if H[i] >= max_height:\n            count += 1\n            max_height = H[i]\n\n    return str(count + 1)",
        "test": "assert solution(\"4\\n6 5 6 8\") == \"3\"",
        "num_ids": 366,
        "indeed": true
    },
    {
        "number": 4319,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    numbers = list(map(int, stdin.split('\\n')[1].split()))\n\n    stairways = []\n    current_stairway = 1\n    for i in range(1, n):\n        if numbers[i] == 1 and numbers[i - 1] == current_stairway:\n            stairways.append(current_stairway)\n            current_stairway = 1\n        else:\n            current_stairway += 1\n\n    if current_stairway != 1:\n        stairways.append(current_stairway)\n\n    return f\"{len(stairways)}\\n{' '.join(map(str, stairways))}\"",
        "test": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 4320,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find_x(n: int, k: int) -> int:\n        return (n * 2 - k) // (k - 1)\n\n    def check_solution(n: int, x: int, k: int) -> bool:\n        return sum(x * 2 ** (i - 1) for i in range(1, k + 1)) == n\n\n    t = int(stdin.split('\\n')[0])\n    test_cases = [int(x) for x in stdin.split('\\n')[1:] if x.isdigit()]\n\n    output = []\n    for n in test_cases:\n        k = 2\n        while not check_solution(n, find_x(n, k), k):\n            k += 1\n        output.append(str(find_x(n, k)))\n\n    return '\\n'.join(output)",
        "test": "assert solution(6) == 2",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 4321,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for _ in range(k):\n        if n % 10 != 0:\n            n -= 1\n        else:\n            n //= 10\n    return str(n)",
        "test": "assert solution(\"512 4\") == \"50\"",
        "num_ids": 305,
        "indeed": true
    },
    {
        "number": 4322,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n\n    def is_balanced(circle: list) -> bool:\n        for i in range(len(circle)):\n            if abs(circle[i] - circle[(i + 1) % len(circle)]) > 1:\n                return False\n        return True\n\n    max_people = 1\n    max_circle = [min(heights)]\n\n    for i in range(n):\n        for j in range(i + 2, n + 1):\n            circle = heights[i:j]\n            if is_balanced(circle) and len(circle) > max_people:\n                max_people = len(circle)\n                max_circle = circle\n\n    output = [str(max_people)]\n    output.extend(list(map(str, max_circle)))\n    return '\\n'.join(output)",
        "test": "assert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"",
        "num_ids": 908,
        "indeed": false
    },
    {
        "number": 4323,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(songs, m):\n        left, right = 0, len(songs)\n        while left < right:\n            mid = (left + right) // 2\n            if sum(songs[:mid]) <= m:\n                left = mid + 1\n            else:\n                right = mid\n        return left - 1\n\n    n, m = map(int, stdin.readline().split())\n    songs = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    songs.sort(key=lambda x: x[1])\n\n    result = binary_search(songs, m)\n    return str(result) if result != n else \"-1\"\n",
        "test": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 4324,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    for case in range(t):\n        n, a, b = map(int, stdin.split(\"\\n\")[case + 1].split())\n        if a == 1:\n            s = \"a\" * n\n        elif n == a:\n            s = \"a\" * b + \"b\" * (a - b)\n        else:\n            s = \"a\" * b + \"b\" * (a - b) + \"c\" * (n - a)\n        print(s)",
        "test": "assert solution(6, 1, 1) == 'qwerty'",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 4325,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = map(int, stdin.split())\n\n    # Calculate the number of machines needed and the remaining pieces\n    machines_needed = N // X\n    remaining_pieces = N % X\n\n    # Calculate the time needed\n    time_needed = machines_needed * T\n    if remaining_pieces > 0:\n        time_needed += T\n\n    return str(time_needed)",
        "test": "assert solution(\"5 3 2\") == \"4\"",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 4326,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(n // 3)",
        "test": "assert solution('8') == '2'  # example from prompt",
        "num_ids": 180,
        "indeed": true
    },
    {
        "number": 4327,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    pies = 0\n    while P >= 2:\n        pies += P // 2\n        A += P // 2\n        P = A\n        A = 0\n    return str(pies)",
        "test": "assert solution(\"10 20\") == \"30\"",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 4328,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B % A == 0:\n        return str(A + B)\n    else:\n        return str(B - A)",
        "test": "assert solution(\"3 10\") == \"7\"",
        "num_ids": 285,
        "indeed": true
    },
    {
        "number": 4329,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    if len(t) == len(s) + 1 and t.startswith(s):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"chokudai\\nchokudaiz\") == \"Yes\"",
        "num_ids": 327,
        "indeed": true
    },
    {
        "number": 4330,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if A == B:\n        return \"IMPOSSIBLE\"\n    \n    if A < B:\n        A, B = B, A\n    \n    K = A - (A - B) // 2\n    \n    if A - K != B - K:\n        return \"IMPOSSIBLE\"\n    \n    return str(K)",
        "test": "assert solution(\"4 9\") == \"6\"",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 4331,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 7 or (n // 10) % 10 == 7 or (n // 100) % 10 == 7:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('985') == 'No'",
        "num_ids": 222,
        "indeed": true
    },
    {
        "number": 4332,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    digits = [int(d) for d in str(N)]\n    S_N = sum(digits)\n\n    if N % S_N == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"12\") == \"Yes\"",
        "num_ids": 262,
        "indeed": true
    },
    {
        "number": 4333,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n\n    # Calculate the length of each side of the square\n    side = abs(x_1 - x_2) + abs(y_1 - y_2)\n\n    # Calculate the midpoints of each side of the square\n    mid_x1_x2 = (x_1 + x_2) // 2\n    mid_y1_y2 = (y_1 + y_2) // 2\n\n    # Calculate the coordinates of the missing vertices\n    x_3 = mid_x1_x2 + (y_1 - y_2)\n    y_3 = mid_y1_y2 + (x_2 - x_1)\n    x_4 = mid_x1_x2 - (y_1 - y_2)\n    y_4 = mid_y1_y2 - (x_2 - x_1)\n\n    return f\"{x_3} {y_3} {x_4} {y_4}\"",
        "test": "assert solution(\"0 0 1 0\") == \"-1 0 0 1\\n\"",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 4334,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t, a, b, u = stdin.split()\n    a = int(a)\n    b = int(b)\n\n    if u == s:\n        return f\"{a-1} {b}\"\n    else:\n        return f\"{a} {b-1}\"",
        "test": "assert solution(\"red blue\\n3 4\\nred\") == \"2 4\"",
        "num_ids": 460,
        "indeed": true
    },
    {
        "number": 4335,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    if n % 2 == 0:\n        t = s[:n//2]\n        if s == t + t:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"6\\nabcabc\") == \"Yes\"",
        "num_ids": 322,
        "indeed": true
    },
    {
        "number": 4336,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n\n    def area(x, y):\n        return (x * y) / 2\n\n    max_area = float('-inf')\n    max_cut = None\n    count = 0\n\n    for cut in range(1, min(W, H) + 1):\n        cut_area = 0\n        for i in range(cut):\n            a = area(W - i, H - i)\n            b = area(W - i, H - cut + i)\n            c = area(W - cut + i, H - i)\n            d = area(W - cut + i, H - cut + i)\n            cut_area += max(a, b, c, d)\n        if cut_area > max_area:\n            max_area = cut_area\n            max_cut = cut\n            count = 1\n        elif cut_area == max_area:\n            count += 1\n\n    return f\"{max_area:.6f} {count - 1}\"",
        "test": "assert solution('5 4 3 2\\n') == '6.000000 1\\n'",
        "num_ids": 771,
        "indeed": false
    },
    {
        "number": 4337,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, colors = stdin.split(\"\\n\")\n    n = int(n)\n    colors = colors.split(\" \")\n    color_set = set(colors)\n    \n    if len(color_set) == 3:\n        return \"Three\"\n    else:\n        return \"Four\"",
        "test": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"",
        "num_ids": 311,
        "indeed": true
    },
    {
        "number": 4338,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[0].split())\n    a = list(map(int, stdin.split()[1].split()))\n\n    doors_zero = sum(1 for door in a if door == 0)\n    doors_nonzero = [door for door in a if door != 0]\n\n    for i in range(10**100):\n        if not doors_nonzero:\n            break\n\n        # Your move\n        for j in range(len(doors_nonzero)):\n            if doors_nonzero[j] - x <= y:\n                doors_nonzero[j] = 0\n                doors_zero += 1\n\n        # Slavik's move\n        for j in range(len(doors_nonzero)):\n            if doors_nonzero[j] == 0:\n                doors_nonzero.pop(j)\n                break\n            doors_nonzero[j] += y\n\n    return str(doors_zero)",
        "test": "assert solution(\"5 3 3\\n1 2 4 2 3\") == 2",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 4339,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    b = list(map(int, lines[2].split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == \"7\"",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 4340,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def replace_adjacent(a: List[int]) -> List[int]:\n        for i in range(1, 10**9, 2):\n            a = [i + 1 if x == i else x - 1 if x == i + 1 else x for x in a]\n        return a\n\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    b = replace_adjacent(a)\n\n    return ' '.join(map(str, b))",
        "test": "assert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\" ",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 4341,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    edges = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n\n    def dfs(vertex, visited, parent):\n        visited.add(vertex)\n        for neighbor in graph[vertex]:\n            if neighbor not in visited:\n                if dfs(neighbor, visited, vertex):\n                    return True\n            elif neighbor != parent:\n                return True\n        return False\n\n    def is_cycle(vertex, visited, parent):\n        visited.add(vertex)\n        for neighbor in graph[vertex]:\n            if neighbor not in visited:\n                if is_cycle(neighbor, visited, vertex):\n                    return True\n            elif neighbor != parent:\n                return True\n        return False\n\n    graph = {i: set() for i in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n\n    components = []\n    for vertex in range(1, n + 1):\n        if vertex not in visited:\n            component = set()\n            dfs(vertex, component, None)\n            components.append(component)\n\n    cycle_components = 0\n    for component in components:\n        if is_cycle(next(iter(component)), set(), None):\n            cycle_components += 1\n\n    return str(cycle_components)\n",
        "test": "assert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\\n\") == \"2\" ",
        "num_ids": 1535,
        "indeed": false
    },
    {
        "number": 4342,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_nice_edge(edge, colors, adjacency_list):\n        vertex1, vertex2 = edge\n        color1, color2 = colors[vertex1 - 1], colors[vertex2 - 1]\n        components = [set(), set()]\n\n        for component_index, vertex in enumerate([vertex1, vertex2]):\n            for neighbor in adjacency_list[vertex]:\n                if neighbor != vertex:\n                    components[component_index].add(colors[neighbor - 1])\n\n        return color1 not in components[1] and color2 not in components[0]\n\n    def dfs(vertex, visited, adjacency_list):\n        visited.add(vertex)\n        for neighbor in adjacency_list[vertex]:\n            if neighbor not in visited:\n                dfs(neighbor, visited, adjacency_list)\n\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    colors = [int(color) for color in lines[1].split()]\n    edges = [tuple(map(int, line.split())) for line in lines[2:]]\n\n    adjacency_list = [set() for _ in range(n + 1)]\n    for vertex1, vertex2 in edges:\n        adjacency_list[vertex1].add(vertex2)\n        adjacency_list[vertex2].add(vertex1)\n\n    nice_edges_count = 0\n    for edge in edges:\n        if is_nice_edge(edge, colors, adjacency_list):\n            nice_edges_count += 1\n\n    return str(nice_edges_count)",
        "test": "assert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"",
        "num_ids": 1339,
        "indeed": false
    },
    {
        "number": 4343,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\n    def get_next_lexicographic_string(s: str):\n        index_to_increment = None\n        for i in range(len(s) - 1, -1, -1):\n            if s[i] < 'z':\n                index_to_increment = i\n                break\n        if index_to_increment is None:\n            return None\n        next_char = alphabet[alphabet.index(s[index_to_increment]) + 1]\n        return s[:index_to_increment] + next_char + 'a' * (k - index_to_increment - 1)\n\n    current_string = s\n    while current_string < t:\n        current_string = get_next_lexicographic_string(current_string)\n\n    return current_string[:k // 2] + 'a' * (k - k // 2) + current_string[k // 2 + 1:] ",
        "test": "assert solution(\"5\\nafogk\\nasdji\") == \"alvuw\"",
        "num_ids": 1128,
        "indeed": false
    },
    {
        "number": 4344,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    if k > n:\n        return \"NO\"\n    \n    for i in range(n):\n        if a.count(a[i]) == 1:\n            k -= 1\n            if k == 0:\n                return \"YES\\n\" + \" \".join([str(j+1) for j in range(n) if a[j] == a[i]])\n    \n    return \"NO\"",
        "test": "assert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 4345,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find_increasing_sequence(a):\n        increasing_sequence = []\n        for i in range(len(a)):\n            if not increasing_sequence or increasing_sequence[-1] < a[i]:\n                increasing_sequence.append(a[i])\n            else:\n                return None\n        return increasing_sequence\n\n    def find_decreasing_sequence(a):\n        decreasing_sequence = []\n        for i in range(len(a)):\n            if not decreasing_sequence or decreasing_sequence[-1] > a[i]:\n                decreasing_sequence.append(a[i])\n            else:\n                return None\n        return decreasing_sequence\n\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    increasing_sequence = find_increasing_sequence(a)\n    decreasing_sequence = find_decreasing_sequence(a)\n\n    if not increasing_sequence or not decreasing_sequence:\n        return \"NO\"\n\n    result = []\n    for num in a:\n        if num in increasing_sequence:\n            result.append(0)\n        else:\n            result.append(1)\n\n    return \"YES\\n\" + \" \".join(map(str, result))",
        "test": "assert solution(\"5\\n1 2 4 0 2\") == \"NO\" ",
        "num_ids": 972,
        "indeed": false
    },
    {
        "number": 4346,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def count_lanterns(L, v, l, r):\n        lanterns = [i for i in range(v, L + 1, v)]\n        for i in range(l, r + 1):\n            if i in lanterns:\n                lanterns.remove(i)\n        return len(lanterns)\n\n    t = int(stdin.readline())\n    output = []\n    for _ in range(t):\n        L, v, l, r = map(int, stdin.readline().split())\n        output.append(count_lanterns(L, v, l, r))\n\n    return \"\\n\".join(map(str, output))",
        "test": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 4347,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(2 * factorial(n // 2) // (2 * n))\n\ndef",
        "test": "assert solution(4) == 3",
        "num_ids": 186,
        "indeed": false
    },
    {
        "number": 4348,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    s = stdin.split('\\n')[1]\n    for i in range(k):\n        for letter in 'abcdefghijklmnopqrstuvwxyz':\n            if letter in s:\n                s = s.replace(letter, '', 1)\n                break\n    return s",
        "test": "assert solution(\"15 3\\ncccaabababaccbc\") == \"cccbbabaccbc\"",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 4349,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    offers = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n\n    days_needed = [0] * n\n    for i in range(n):\n        days_needed[i] = k[i] // 2\n        if k[i] % 2 == 1:\n            days_needed[i] += 1\n\n    for day, offer_type in offers:\n        if days_needed[offer_type - 1] > 0:\n            days_needed[offer_type - 1] -= 1\n\n    return str(max(days_needed))",
        "test": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\" ",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 4350,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_star(x: int, y: int, size: int) -> bool:\n        if 1 <= x <= n - 1 and 1 <= y <= m - 1:\n            for dx in range(-1, 2):\n                for dy in range(-1, 2):\n                    if not grid[x + dx][y + dy] == '*':\n                        return False\n            return True\n        else:\n            return False\n\n    n, m = map(int, stdin.readline().strip().split())\n    grid = [list(stdin.readline().strip()) for _ in range(n)]\n\n    stars = []\n    for size in range(1, min(n, m) // 2 + 1):\n        for x in range(size - 1, n - size):\n            for y in range(size - 1, m - size):\n                if is_valid_star(x, y, size):\n                    stars.append((x, y, size))\n\n    if not stars:\n        return \"-1\"\n    else:\n        output = [str(len(stars))]\n        for x, y, size in stars:\n            output.append(\" \".join(map(str, [x, y, size])))\n        return \"\\n\".join(output)",
        "test": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"",
        "num_ids": 1510,
        "indeed": false
    },
    {
        "number": 4351,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if str(N) == str(N)[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"575\") == \"Yes\" #Test case for palindromic number",
        "num_ids": 239,
        "indeed": true
    },
    {
        "number": 4352,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return \"Alice\"\n    elif A < B:\n        return \"Bob\"\n    else:\n        return \"Draw\"",
        "test": "assert solution(\"8 6\") == \"Alice\"",
        "num_ids": 272,
        "indeed": false
    },
    {
        "number": 4353,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(\",\", \" \")\n    return s",
        "test": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"",
        "num_ids": 222,
        "indeed": true
    },
    {
        "number": 4354,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, M = map(int, lines[0].split())\n    students = [tuple(map(int, line.split())) for line in lines[1:N+1]]\n    checkpoints = [tuple(map(int, line.split())) for line in lines[N+1:]]\n    \n    output = []\n    for student in students:\n        nearest_checkpoint = None\n        min_distance = float('inf')\n        for i, checkpoint in enumerate(checkpoints, start=1):\n            distance = abs(student[0] - checkpoint[0]) + abs(student[1] - checkpoint[1])\n            if distance < min_distance:\n                min_distance = distance\n                nearest_checkpoint = i\n        output.append(str(nearest_checkpoint))\n    \n    return '\\n'.join(output)",
        "test": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"",
        "num_ids": 807,
        "indeed": true
    },
    {
        "number": 4355,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    result = a + a**2 + a**3\n    return str(result)",
        "test": "assert solution(\"2\") == \"14\"",
        "num_ids": 169,
        "indeed": true
    },
    {
        "number": 4356,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    A = [stdin.readline().strip() for _ in range(N)]\n    B = [stdin.readline().strip() for _ in range(M)]\n\n    for i in range(N - M + 1):\n        for j in range(N - M + 1):\n            if A[i][j:j + M] == B[0]:\n                is_contain = True\n                for k in range(1, M):\n                    if A[i + k][j:j + M] != B[k]:\n                        is_contain = False\n                        break\n                if is_contain:\n                    return 'Yes'\n\n    return 'No'",
        "test": "assert solution(\"5 3\\n###...#\\n#..#.#.\\n###..#.\\n#..#.#.\\n###.###\\n#...#..\\n.##.##.\\n.#..#..\\n.##.##.\\n.#..#..\\n.##.##.\\n\") == \"Yes\"",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 4357,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    max_allowance = max(A + B + C, A + B * C, A * B + C, A * B * C)\n    return str(max_allowance)",
        "test": "assert solution('9 9 9') == '81'",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 4358,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    N = input_list[0]\n    p = input_list[1:]\n    p.sort(reverse=True)\n    total_cost = sum(p) - p[0] / 2\n    return str(int(total_cost))",
        "test": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"  # Sample Input 1",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 4359,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n\n    # Calculate the time required to serve all the dishes\n    ABCDon = A + 29\n    ARCCurry = B + 30\n    AGCPasta = C + 50\n    ATPCHanbagu = E + 60\n    APCRamen = D + 180\n\n    # Find the maximum of all the times required to serve the dishes\n    last_dish = max(ABCDon, ARCCurry, AGCPasta, ATPCHanbagu, APCRamen)\n\n    return str(last_dish)",
        "test": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"",
        "num_ids": 610,
        "indeed": false
    },
    {
        "number": 4360,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.strip().split()))\n    sum_of_inverses = sum(map(lambda x: 1 / x, A))\n    inverse_of_sum = 1 / sum_of_inverses\n    return str(inverse_of_sum)",
        "test": "assert solution(\"2\\n10 30\") == \"7.5\"",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 4361,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_max_diff(heights, k):\n        heights.sort()\n        return heights[-k] - heights[k - 1]\n\n    input_list = list(map(int, stdin.split()))\n    n, k = input_list[0], input_list[1]\n    heights = input_list[2:]\n\n    return str(find_min_max_diff(heights, k))",
        "test": "assert solution(\"10 5\\n5\\n10\\n15\\n20\\n25\\n30\\n35\\n40\\n45\\n50\") == \"5\"",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 4362,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isupper():\n        return \"A\"\n    else:\n        return \"a\"",
        "test": "assert solution('A') == 'A'",
        "num_ids": 141,
        "indeed": true
    },
    {
        "number": 4363,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    count = 0\n    for X in range(K + 1):\n        for Y in range(K + 1):\n            Z = S - X - Y\n            if 0 <= Z <= K:\n                count += 1\n    return str(count)",
        "test": "assert solution(\"2 2\") == \"6\"",
        "num_ids": 272,
        "indeed": false
    },
    {
        "number": 4364,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n\n    # Check if valid in YYMM format\n    if s[2:].isdigit() and 1 <= int(s[2:]) <= 12:\n        valid_in_YYMM = True\n    else:\n        valid_in_YYMM = False\n\n    # Check if valid in MMYY format\n    if s[:2].isdigit() and 1 <= int(s[:2]) <= 12:\n        valid_in_MMYY = True\n    else:\n        valid_in_MMYY = False\n\n    # Determine output\n    if valid_in_YYMM and not valid_in_MMYY:\n        output = \"YYMM\"\n    elif valid_in_MMYY and not valid_in_YYMM:\n        output = \"MMYY\"\n    elif valid_in_YYMM and valid_in_MMYY:\n        output = \"AMBIGUOUS\"\n    else:\n        output = \"NA\"\n\n    return output\n",
        "test": "assert solution('1905') == 'YYMM'",
        "num_ids": 834,
        "indeed": true
    },
    {
        "number": 4365,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    even_nums = [i for i in range(2, k+1, 2)]\n    odd_nums = [i for i in range(1, k+1, 2)]\n    return str(len(even_nums) * len(odd_nums))",
        "test": "assert solution(\"3\") == \"2\" # Test case 1",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 4366,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    start_time = (A + B) % 24\n    return str(start_time) ",
        "test": "assert solution(\"9 12\") == \"21\"",
        "num_ids": 218,
        "indeed": true
    },
    {
        "number": 4367,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    \n    if N >= 10:\n        inner_rating = R\n    else:\n        inner_rating = R + 100 * (10 - N)\n        \n    return str(inner_rating)",
        "test": "assert solution(\"2 2919\") == \"3719\" ",
        "num_ids": 313,
        "indeed": true
    },
    {
        "number": 4368,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    digits = 0\n\n    while N > 0:\n        N //= K\n        digits += 1\n\n    return str(digits)",
        "test": "assert solution(\"11 2\") == \"4\" # binary representation of 11 is 1011",
        "num_ids": 328,
        "indeed": true
    },
    {
        "number": 4369,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    sheets = (N + 1) // 2\n    return str(sheets)",
        "test": "assert solution('5') == '3', \"Test failed\"",
        "num_ids": 191,
        "indeed": true
    },
    {
        "number": 4370,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if A + B > 16:\n        return \":(\"\n    \n    if A == 1 and B == 15:\n        return \":(\"\n    \n    if A == 15 and B == 1:\n        return \":(\"\n    \n    if A == 1 and B > 1:\n        return \":(\"\n    \n    if A > 1 and B == 1:\n        return \":(\"\n    \n    if A == 1 and B == 1:\n        return \":(\"\n    \n    return \"Yay!\"",
        "test": "assert solution(\"16 0\") == \"Yay!\"",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 4371,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    x = [int(s[i:i+3]) for i in range(len(s) - 2)]\n    return min(abs(i - 753) for i in x)",
        "test": "assert solution(\"1234567876\") == 34",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 4372,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    y_min = 1\n    z_min = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] != a[j]:\n                y = (sum(a) - a[i]) // (a[j] - a[i])\n                z = (a[j] - a[i])\n                if y >= y_min and z < z_min:\n                    y_min = y\n                    z_min = z\n\n    return f\"{y_min} {z_min}\"",
        "test": "assert solution(\"2\\n2 9\") == \"1 7\"",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 4373,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort(reverse=True)\n    k = 1\n    days = 0\n    for i in range(n):\n        if a[i] >= k:\n            days += 1\n            k += 1\n        else:\n            break\n    return str(days)",
        "test": "assert solution(\"3\\n1 1 1\\n\") == 1",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 4374,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find(parents, i):\n        if parents[i] == i:\n            return i\n        return find(parents, parents[i])\n\n    def union(parents, rank, x, y):\n        xroot = find(parents, x)\n        yroot = find(parents, y)\n\n        if rank[xroot] < rank[yroot]:\n            parents[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parents[yroot] = xroot\n        else:\n            parents[yroot] = xroot\n            rank[xroot] += 1\n\n    n, m = map(int, stdin.readline().split())\n    edges = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n\n    parents = list(range(n + 1))\n    rank = [0] * (n + 1)\n\n    for u, v in edges:\n        union(parents, rank, u, v)\n\n    components = {}\n    for i in range(1, n + 1):\n        components.setdefault(find(parents, i), set()).add(i)\n\n    diameter = 0\n    result = []\n\n    for component in components.values():\n        if len(component) == 1:\n            continue\n\n        component = sorted(component)\n        for i in range(len(component) - 1):\n            result.append((component[i], component[i + 1]))\n\n        for i in range(len(component) - 1):\n            for j in range(i + 2, len(component)):\n                diameter = max(diameter, len(result))\n                result.pop()\n\n    if not result:\n        return f\"{diameter}\\n\"\n\n    output = [f\"{u} {v}\" for u, v in result]\n    output.append(f\"{diameter}\")\n    return \"\\n\".join(output) + \"\\n\" ",
        "test": "assert solution(\"2 0\") == \"1\\n1 2\"",
        "num_ids": 1705,
        "indeed": false
    },
    {
        "number": 4375,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    weights = list(map(int, stdin.readline().split()))\n    edges = [list(map(int, stdin.readline().split())) for _ in range(n - 1)]\n\n    # Implement your algorithm here\n\n    return str(max_weight)",
        "test": "assert solution(\"7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n\") == \"4\" ",
        "num_ids": 1380,
        "indeed": false
    },
    {
        "number": 4376,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    rooms = list(map(int, stdin.readline().split()))\n    rooms_sum = [rooms[0]]\n    for i in range(1, n):\n        rooms_sum.append(rooms_sum[-1] + rooms[i])\n    letters = list(map(int, stdin.readline().split()))\n    result = []\n    for letter in letters:\n        dormitory = 0\n        while dormitory < n and rooms_sum[dormitory] < letter:\n            dormitory += 1\n        room = 0\n        if dormitory == 0:\n            room = letter\n        else:\n            room = letter - rooms_sum[dormitory - 1]\n        result.append(f\"{dormitory + 1} {room}\")\n    return \"\\n\".join(result)",
        "test": "assert solution(\"2 3\\n5 1000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\\n\" ",
        "num_ids": 1120,
        "indeed": false
    },
    {
        "number": 4377,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n\n    for x, y, z in permutations([a, b, c, d], 3):\n        if x + y == z:\n            return f\"{x} {y} {z}\"\n\n    for x, y in permutations([a, b, c, d], 2):\n        if x + y == a + b + c:\n            return f\"{x} {y} {a+b+c-x-y}\"",
        "test": "assert solution(\"40 40 40 60\") == \"20 20 20\"",
        "num_ids": 417,
        "indeed": false
    },
    {
        "number": 4378,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_recolor(s):\n        n = len(s)\n        min_recolor = float('inf')\n        min_recolor_garland = ''\n\n        for r in range(n):\n            for g in range(n):\n                for b in range(n):\n                    recolor = r + g + b\n                    garland = ['R'] * r + ['G'] * g + ['B'] * b\n                    if len(garland) < n:\n                        garland += ['R'] * (n - len(garland))\n                    if recolor < min_recolor:\n                        valid_garland = True\n                        for i in range(1, n):\n                            if garland[i] == garland[i - 1]:\n                                valid_garland = False\n                                break\n                        if valid_garland:\n                            min_recolor = recolor\n                            min_recolor_garland = ''.join(garland)\n\n        return min_recolor, min_recolor_garland\n\n    n, s = stdin.strip().split('\\n')\n    n = int(n)\n\n    min_recolor, min_recolor_garland = find_min_recolor(s)\n\n    return f'{min_recolor}\\n{min_recolor_garland}'",
        "test": "assert solution('8\\nBBBGBRRR') == '2\\nBRBGBRGR'",
        "num_ids": 1276,
        "indeed": false
    },
    {
        "number": 4379,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n\n    def find_subseq(arr):\n        dp = [1] * n\n        for i in range(n):\n            for j in range(i):\n                if arr[j] < arr[i]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)\n\n    def find_indices(arr, dp):\n        max_len = find_subseq(arr)\n        indices = []\n        for i in range(n - 1, -1, -1):\n            if dp[i] == max_len:\n                start = arr[i] - max_len + len(indices)\n                indices += list(range(start, start + max_len))\n                max_len -= 1\n        return indices\n\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    max_len = find_subseq(arr)\n    indices = find_indices(arr, dp)\n\n    return f\"{max_len}\\n{' '.join(map(str, indices))}\"",
        "test": "assert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\\n\"",
        "num_ids": 959,
        "indeed": false
    },
    {
        "number": 4380,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for C in range(1, 4):\n        if (A * B * C) % 2 != 0:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"3 1\") == \"Yes\"",
        "num_ids": 248,
        "indeed": true
    },
    {
        "number": 4381,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    discounted_fare = y // 2\n    total_fare = x + discounted_fare\n    return str(total_fare)",
        "test": "assert solution(\"81 58\") == \"110\"",
        "num_ids": 230,
        "indeed": true
    },
    {
        "number": 4382,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N * N * N)",
        "test": "assert solution(\"2\") == \"8\"",
        "num_ids": 189,
        "indeed": true
    },
    {
        "number": 4383,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x in [3, 5, 7]:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n",
        "test": "assert solution(\"5\") == \"YES\", \"5 year old should be celebrated\"",
        "num_ids": 228,
        "indeed": true
    },
    {
        "number": 4384,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 1998:\n        raise ValueError(\"Input must be between 1 and 1998 (inclusive)\")\n    \n    if n <= 999:\n        return \"ABC\"\n    else:\n        return \"ABD\"",
        "test": "assert solution(1) == \"ABC\" # Test case for the first round",
        "num_ids": 411,
        "indeed": true
    },
    {
        "number": 4385,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    dist = [e - a, b - a, c - a, d - a, e - a]\n    \n    for i in range(len(dist)):\n        if dist[i] > k:\n            return ':( Yay!'\n    \n    return 'Yay!'",
        "test": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 4386,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, s = map(str, stdin.split())\n    a = int(a)\n    if a >= 3200:\n        return s\n    else:\n        return \"red\"",
        "test": "assert solution(3199, \"pink\") == \"red\"",
        "num_ids": 247,
        "indeed": true
    },
    {
        "number": 4387,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin)\n    if rating < 1200:\n        return \"ABC\"\n    elif rating < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"",
        "test": "assert solution(1199) == 'ABC'",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 4388,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_str = str(n)\n    result_str = \"\"\n    for char in n_str:\n        if char == \"1\":\n            result_str += \"9\"\n        elif char == \"9\":\n            result_str += \"1\"\n    return result_str",
        "test": "assert solution('119') == '991'",
        "num_ids": 338,
        "indeed": true
    },
    {
        "number": 4389,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        b = stdin.readline().strip()\n        if len(b) % 2 != 0:\n            print(\"Invalid input\")\n            continue\n        a = \"\"\n        for j in range(0, len(b), 2):\n            a += b[j + 1] + b[j]\n        print(a)\n",
        "test": "assert solution(\"ac\") == \"ac\"",
        "num_ids": 500,
        "indeed": false
    },
    {
        "number": 4390,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    result = []\n    for i in range(1, t + 1):\n        a, b = map(int, stdin.split('\\n')[i].split())\n        if a % b == 0:\n            result.append(0)\n        else:\n            result.append(b - a % b)\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 4391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    max_avg = 0\n\n    for i in range(n - k + 1):\n        avg = sum(a[i:i + k]) / k\n        if avg > max_avg:\n            max_avg = avg\n\n    return '{:.10f}'.format(max_avg)",
        "test": "assert solution(\"5 2\\n3 4 1 2 5\\n\") == \"3.333333333333333\"",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 4392,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_sorted(arr: list) -> bool:\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                return False\n        return True\n\n    def can_sort(a: list, p: set, n: int) -> bool:\n        for i in range(n - 1):\n            if a[i] > a[i + 1] and (i + 1) not in p:\n                return False\n        return True\n\n    def sort_array(a: list, p: set) -> list:\n        n = len(a)\n        for i in range(n - 1):\n            if a[i] > a[i + 1] and (i + 1) in p:\n                a[i], a[i + 1] = a[i + 1], a[i]\n        return a\n\n    def main(stdin: str) -> list:\n        lines = stdin.strip().split('\\n')\n        outputs = []\n        for i in range(1, len(lines), 3):\n            n, m = map(int, lines[i].split())\n            a = list(map(int, lines[i + 1].split()))\n            p = set(map(int, lines[i + 2].split()))\n\n            if n == m + 1:\n                outputs.append(\"YES\")\n                continue\n\n            if not can_sort(a, p, n):\n                outputs.append(\"NO\")\n                continue\n\n            sorted_a = sort_array(a, p)\n            if is_sorted(sorted_a):\n                outputs.append(\"YES\")\n            else:\n                outputs.append(\"NO\")\n        return outputs\n\n    return '\\n'.join(main(stdin)) ",
        "test": "assert solution(\"6\\n3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\") == \"YES\\nNO\\nYES\\nYES\\nNO\\nYES\" ",
        "num_ids": 1404,
        "indeed": true
    },
    {
        "number": 4393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = stdin.readline().strip()\n\n    s = \"\"\n    i = 0\n    while i < n:\n        count = 1\n        while i + 1 < n and t[i] == t[i + 1]:\n            count += 1\n            i += 1\n        s += t[i] * count\n        i += 1\n\n    return s\n",
        "test": "assert solution(\"10\\noopppssss\") == \"oops\"",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 4394,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find(parent, u):\n        if parent[u] == u:\n            return u\n        parent[u] = find(parent, parent[u])\n        return parent[u]\n\n    def union(parent, rank, u, v):\n        u_root = find(parent, u)\n        v_root = find(parent, v)\n\n        if u_root == v_root:\n            return False\n\n        if rank[u_root] > rank[v_root]:\n            parent[v_root] = u_root\n        elif rank[u_root] < rank[v_root]:\n            parent[u_root] = v_root\n        else:\n            parent[v_root] = u_root\n            rank[u_root] += 1\n\n        return True\n\n    def kruskal(n, edges):\n        parent = [i for i in range(n)]\n        rank = [0] * n\n        mst_cost = 0\n        mst_edges = []\n\n        for e in sorted(edges, key=lambda x: x[2]):\n            u, v, w = e\n            if union(parent, rank, u - 1, v - 1):\n                mst_cost += w\n                mst_edges.append(e)\n\n        return mst_cost, mst_edges\n\n    def unify_mst(n, edges):\n        mst_cost, mst_edges = kruskal(n, edges)\n        modified_edges = []\n\n        for i, e in enumerate(mst_edges):\n            u, v, w = e\n            for new_w in range(w + 1, 10**9 + 1):\n                edges[i][2] = new_w\n                new_mst_cost, new_mst_edges = kruskal(n, edges)\n\n                if new_mst_cost != mst_cost:\n                    edges[i][2] = w\n                    break\n\n                modified_edges.append((i, new_w - w))\n\n        return modified_edges\n\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    edges = [list(map(int, line.split())) for line in lines[1:m + 1]]\n\n    modified_edges = unify_mst(n, edges)\n    return str(len(modified_edges))",
        "test": "assert solution(\"\"\"8 10",
        "num_ids": 1805,
        "indeed": false
    },
    {
        "number": 4395,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_nice(s: str) -> bool:\n        for i in range(len(s)):\n            for j in range(i + 1, len(s)):\n                if s[i] == s[j] and (j - i) % 3 != 0:\n                    return False\n        return True\n\n    def min_recolor(s: str) -> int:\n        r, g, b = s.count('R'), s.count('G'), s.count('B')\n        r_g, r_b, g_b = min(r, g), min(r, b), min(g, b)\n        if is_nice(s):\n            return 0\n        else:\n            return max(r_g + r_b + g_b - min(r_g, r_b, g_b), 1)\n\n    def construct_garland(s: str) -> str:\n        lamps = list(s)\n        for i in range(len(lamps)):\n            if lamps[i] == 'R':\n                lamps[i] = 'G'\n                break\n            elif lamps[i] == 'G':\n                lamps[i] = 'B'\n                break\n            elif lamps[i] == 'B':\n                lamps[i] = 'R'\n                break\n        return \"\".join(lamps)\n\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    r = min_recolor(s)\n    t = construct_garland(s)\n    if not is_nice(t):\n        t = construct_garland(t)\n\n    return f\"{r}\\n{t}\"",
        "test": "assert solution(\"3\\nBRB\") == \"1\\nGRB\"",
        "num_ids": 1893,
        "indeed": false
    },
    {
        "number": 4396,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    total_yen = 0\n    \n    for i in range(1, N+1):\n        x, u = lines[i].split()\n        x = float(x)\n        if u == 'JPY':\n            total_yen += x\n        else:\n            total_yen += x * 380000.0\n            \n    return f\"{total_yen:.1f}\"",
        "test": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 4397,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    j = N - i + 1\n    return str(j)",
        "test": "assert solution(\"4 2\") == \"3\"",
        "num_ids": 173,
        "indeed": true
    },
    {
        "number": 4398,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    S, T = stdin.split('\\n')[1].split(' ')\n\n    result = \"\"\n    for i in range(N):\n        result += S[i] + T[i]\n\n    return result.rstrip()",
        "test": "assert solution(\"2\\nip cc\") == \"icpc\"",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 4399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if S[0] != S[1] or S[1] != S[2]:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "assert solution(\"BAB\") == \"Yes\"",
        "num_ids": 238,
        "indeed": false
    },
    {
        "number": 4400,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace('S', '0')\n    s = s.replace('R', '1')\n    s = list(map(int, s))\n    max_count = 0\n    count = 0\n    for i in s:\n        if i == 1:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n    return str(max_count)",
        "test": "assert solution(\"RRS\") == \"2\"",
        "num_ids": 370,
        "indeed": true
    },
    {
        "number": 4401,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    x, y, z = map(int, stdin.split())\n    \n    # Swap the contents of the boxes A and B\n    x, y = y, x\n    \n    # Swap the contents of the boxes A and C\n    x, z = z, x\n    \n    # Print the integers contained in the boxes A, B, and C\n    return f\"{x} {y} {z}\"",
        "test": "assert solution(\"1 2 3\") == \"3 1 2\"",
        "num_ids": 362,
        "indeed": true
    },
    {
        "number": 4402,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A >= 13:\n        cost = B\n    elif 6 <= A <= 12:\n        cost = B / 2\n    else:\n        cost = 0\n    return str(cost)",
        "test": "assert solution(\"30 100\") == \"100\"",
        "num_ids": 344,
        "indeed": false
    },
    {
        "number": 4403,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = 0\n    for c in s:\n        if c == \"+\":\n            result += 1\n        elif c == \"-\":\n            result -= 1\n    return str(result)\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "assert solution(\"-+-+\") == 0",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 4404,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_date = stdin.strip()\n    year, month, day = map(int, input_date.split('/'))\n    \n    if year == 2019 and month == 4 and day <= 30:\n        return \"Heisei\"\n    else:\n        return \"TBD\"",
        "test": "assert solution('2019/04/30') == 'Heisei'",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 4405,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    topics = sorted(list(map(int, stdin.split('\\n')[1].split())), reverse=True)\n\n    max_problems = 0\n    curr_problems = 0\n    prev_problems = 0\n\n    for topic in topics:\n        if curr_problems == 0 or (curr_problems == 2 * prev_problems):\n            curr_problems += 1\n        else:\n            max_problems += prev_problems\n            prev_problems = curr_problems\n            curr_problems = 1\n\n    max_problems += prev_problems\n\n    return str(max_problems)",
        "test": "assert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 4406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    ids = list(map(int, stdin.readline().split()))\n\n    conversations = []\n    for id in ids:\n        if id in conversations:\n            continue\n        elif len(conversations) < k:\n            conversations.append(id)\n        else:\n            conversations.pop(0)\n            conversations.append(id)\n\n    return f\"{len(conversations)}\\n{' '.join(map(str, conversations))}\"",
        "test": "assert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\\n\" ",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 4407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, q = map(int, lines[0].split())\n    coins = list(map(int, lines[1].split()))\n    queries = [int(x) for x in lines[2:]]\n\n    dp = set()\n    dp.add(0)\n\n    for coin in coins:\n        new_dp = set()\n        for x in dp:\n            new_dp.add(x + coin)\n        dp |= new_dp\n\n    answers = []\n    for query in queries:\n        if query in dp:\n            answers.append(min([coins.count(x) for x in coins if x <= query]))\n        else:\n            answers.append(-1)\n\n    return '\\n'.join(map(str, answers)) + '\\n' ",
        "test": "assert solution(\"5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"1\\n-1\\n3\\n2\\n\" ",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 4408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    c = list(map(int, stdin.readline().split()))\n    f = list(map(int, stdin.readline().split()))\n    h = list(map(int, stdin.readline().split()))\n\n    c.sort()\n    f.sort()\n\n    total_joy = 0\n\n    for i in range(n):\n        player_joy = 0\n        for j in range(k):\n            if c[i * k + j] == f[i]:\n                player_joy += h[j]\n        total_joy += player_joy\n\n    return str(total_joy)",
        "test": "assert solution(\"\"\"4 3",
        "num_ids": 779,
        "indeed": false
    },
    {
        "number": 4409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_operations(a):\n        n = len(a)\n        min_operations = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if abs(a[i] - a[j]) > 10**18:\n                    return None\n            min_operations += abs(a[i] - a[i + 1]) if i < n - 1 else 0\n        return min_operations\n\n    def find_operations(a, min_operations):\n        n = len(a)\n        operations = []\n        for i in range(n):\n            if i < n - 1 and abs(a[i] - a[i + 1]) == min_operations:\n                operations.append((1, i, i + 1))\n                a[i] += abs(a[i] - a[i + 1])\n                a[i + 1] -= abs(a[i] - a[i + 1])\n            elif i > 0 and abs(a[i] - a[i - 1]) == min_operations:\n                operations.append((2, i, i - 1))\n                a[i] += abs(a[i] - a[i - 1])\n                a[i - 1] -= abs(a[i] - a[i - 1])\n        return operations\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    min_operations = find_min_operations(a)\n    if min_operations is None:\n        return \"0\"\n    else:\n        operations = find_operations(a, min_operations)\n        return f\"{min_operations}\\n\" + \"\\n\".join(f\"{t} {i} {j}\" for t, i, j in operations)",
        "test": "assert solution(\"3\\n2 8 10\\n\") == \"2\\n2 2 1 \\n2 3 2 \\n\"",
        "num_ids": 1328,
        "indeed": false
    },
    {
        "number": 4410,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    t = int(stdin.readline())\n    result = []\n    for i in range(t):\n        n, k = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n        max_occupy = 0\n        occupied_tables = [i for i in range(len(s)) if s[i] == \"1\"]\n        if len(occupied_tables) == 0:\n            max_occupy = n\n        else:\n            for i in range(len(occupied_tables)):\n                for j in range(i + 1, len(occupied_tables)):\n                    if abs(occupied_tables[i] - occupied_tables[j]) > k:\n                        max_occupy += 1\n        result.append(str(max_occupy))\n    return \"\\n\".join(result)",
        "test": "assert solution(\"6 2\\n000000\") == 2",
        "num_ids": 1041,
        "indeed": false
    },
    {
        "number": 4411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def is_bad(segment, k, points):\n        bad_points = 0\n        for point in range(segment[0], segment[1] + 1):\n            if points[point] > k:\n                bad_points += 1\n        return bad_points\n\n    def remove_segments(segments, k, points, removed_segments):\n        if not segments:\n            return removed_segments\n\n        segment_to_remove = segments[0]\n        for i in range(1, len(segments)):\n            if is_bad(segments[i], k, points) < is_bad(segment_to_remove, k, points):\n                segment_to_remove = segments[i]\n\n        points_to_remove = set(range(segment_to_remove[0], segment_to_remove[1] + 1))\n        for point in points_to_remove:\n            points[point] -= 1\n\n        segments.remove(segment_to_remove)\n        removed_segments.append(segment_to_remove[2])\n\n        return remove_segments(segments, k, points, removed_segments)\n\n    def process_case(stdin: str) -> str:\n        n, k = map(int, stdin.readline().strip().split())\n        segments = []\n        for i in range(n):\n            l, r = map(int, stdin.readline().strip().split())\n            segments.append([l, r, i + 1])\n\n        points = [0] * (2 * 10**5 + 1)\n        for segment in segments:\n            for j in range(segment[0], segment[1] + 1):\n                points[j] += 1\n\n        removed_segments = remove_segments(segments, k, points, [])\n        removed_segments.sort()\n\n        return f\"{len(removed_segments)}\\n{' '.join(map(str, removed_segments))}\\n\"\n\n    cases = int(stdin.readline())\n    output = []\n    for _ in range(cases):\n        output.append(process_case(stdin))\n\n    return \"\\n\".join(output) ",
        "test": "assert solution(\"\"\"7 2",
        "num_ids": 1491,
        "indeed": false
    },
    {
        "number": 4412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(x, y, z):\n        return all(x % i for i in (y, z)) and all(y % i for i in (x, z)) and all(z % i for i in (x, y))\n\n    def max_prettiness(arr):\n        n = len(arr)\n        dp = [0] * n\n        for i in range(n):\n            dp[i] = arr[i]\n            for j in range(i):\n                if is_valid(arr[i], arr[j], 1):\n                    dp[i] = max(dp[i], arr[i] + dp[j])\n        return dp[n - 1]\n\n    queries = stdin.strip().split('\\n')[1:]\n    result = []\n    for query in queries:\n        n, *arr = map(int, query.strip().split())\n        if n == 1:\n            result.append(arr[0])\n        elif n == 2:\n            result.append(sum(arr))\n        else:\n            arr.sort(reverse=True)\n            result.append(max(sum(arr[:2]), max_prettiness(arr)))\n\n    return '\\n'.join(map(str, result))\n\nstdin = \"\"\"3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6\n\"\"\"\n\nprint(solution(stdin)) ",
        "test": "assert solution(4, [10, 6, 30, 15]) == 31",
        "num_ids": 1569,
        "indeed": false
    },
    {
        "number": 4413,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def can_be_in_team(a, b):\n        return abs(a - b) > 1\n\n    def min_teams(n, a):\n        a.sort()\n        teams = []\n        for i in range(n):\n            added = False\n            for team in teams:\n                if all(can_be_in_team(a[i], a[j]) for j in team):\n                    team.append(i)\n                    added = True\n                    break\n            if not added:\n                teams.append([i])\n        return len(teams)\n\n    queries = stdin.split(\"\\n\")\n    q = int(queries[0])\n    output = []\n    for i in range(1, len(queries), 2):\n        n = int(queries[i])\n        a = list(map(int, queries[i + 1].split()))\n        output.append(min_teams(n, a))\n\n    return \"\\n\".join(map(str, output))",
        "test": "assert solution(\"4\\n4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\" ",
        "num_ids": 835,
        "indeed": true
    },
    {
        "number": 4414,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n\n    q = int(stdin.split('\\n')[0])\n    outputs = []\n\n    for i in range(1, q + 1):\n        a, b, n, S = map(int, stdin.split('\\n')[i].split())\n        total_value = a * n + b\n\n        if S > total_value or (S % n != 0 and S % lcm(a, b) != 0):\n            outputs.append(\"NO\")\n        else:\n            outputs.append(\"YES\")\n\n    return \"\\n\".join(outputs)",
        "test": "assert solution(\"4\\n1 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18\") == \"YES\\nNO\\nNO\\nYES\" ",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 4415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    increasing_sequence = []\n    decreasing_sequence = []\n\n    for i in range(n - 1):\n        if a[i] <= a[i + 1]:\n            increasing_sequence.append(a[i])\n        else:\n            decreasing_sequence.append(a[i])\n\n    if a[n - 1] >= a[n - 2]:\n        increasing_sequence.append(a[n - 1])\n    else:\n        decreasing_sequence.append(a[n - 1])\n\n    if len(increasing_sequence) + len(decreasing_sequence) == n:\n        return \"YES\\n{}\\n{}\\n{}\\n{}\\n{}\".format(\n            len(increasing_sequence),\n            \" \".join(map(str, sorted(increasing_sequence))),\n            len(decreasing_sequence),\n            \" \".join(map(str, sorted(decreasing_sequence, reverse=True))),\n        )\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5\\n4 3 1 5 3\") == \"YES\\n1\\n3 \\n4\\n5 4 3 1\"",
        "num_ids": 1538,
        "indeed": false
    },
    {
        "number": 4416,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(books, k, target_time):\n        left, right = 0, sum(t for t, _, _ in books)\n        while left <= right:\n            mid = (left + right) // 2\n            if can_read(books, k, mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n\n    def can_read(books, k, target_time):\n        alice_books, bob_books = [], []\n        for t, a, b in books:\n            if t <= target_time:\n                if a == 1:\n                    alice_books.append(t)\n                if b == 1:\n                    bob_books.append(t)\n        return len(alice_books) >= k and len(bob_books) >= k\n\n    n, k = map(int, stdin.readline().split())\n    books = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    total_time = sum(t for t, _, _ in books)\n\n    if any(a == 1 and b == 1 for _, a, b in books):\n        return \"1\"\n\n    if k > n or k == 1:\n        return \"-1\"\n\n    for _, a, b in books:\n        if a == 1 and b == 0:\n            return \"-1\"\n        if a == 0 and b == 1:\n            return \"-1\"\n\n    time_limit = binary_search(books, k, total_time)\n    return str(time_limit)\n",
        "test": "assert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\") == \"8\\n\"",
        "num_ids": 1229,
        "indeed": false
    },
    {
        "number": 4417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    q = int(lines[0])\n    result = []\n\n    for i in range(1, len(lines), 2):\n        n, k = map(int, lines[i].split())\n        a = list(map(int, lines[i + 1].split()))\n\n        min_a = min(a)\n        max_a = max(a)\n        min_diff = min(abs(x - min_a) for x in a)\n        max_diff = max(abs(x - max_a) for x in a)\n\n        if min_diff > k or max_diff > k:\n            result.append(-1)\n        else:\n            result.append(max(min_a + k, max_a - k))\n\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 4418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    while len(a) % 6 != 0 or len(a) < 6:\n        a.pop()\n        count += 1\n    return str(count)",
        "test": "assert solution(\"12\\n4 8 4 15 16 8 23 15 16 42 23 42\") == 0",
        "num_ids": 758,
        "indeed": false
    },
    {
        "number": 4419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_min_moves(a: int, b: int) -> int:\n        return abs(a - b)\n\n    t = int(stdin.split('\\n')[0])\n    test_cases = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    outputs = []\n    for a, b in test_cases:\n        outputs.append(get_min_moves(a, b))\n\n    return '\\n'.join(map(str, outputs))\n",
        "test": "assert solution(\"6\\n5 5\\n13 42\\n18 4\\n1337 420\\n123456789 1000000000\\n100500 9000\") == \"0\\n3\\n2\\n92\\n87654322\\n9150\"",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 4420,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    output = []\n    for i in range(1, t + 1):\n        x, y, n = map(int, stdin.split('\\n')[i].split())\n        k = y + (n - y) // x * x\n        output.append(str(k))\n    return '\\n'.join(output)",
        "test": "assert solution(\"7\\n7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\" ",
        "num_ids": 757,
        "indeed": true
    },
    {
        "number": 4421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = map(int, lines[0].split())\n    d = list(map(int, lines[1].split()))\n    d.sort()\n    pairs = []\n    i, j = 0, n - 1\n    while i < j:\n        if (d[i] + d[j]) % k == 0:\n            pairs.append((i, j))\n            i += 1\n            j -= 1\n        elif (d[i] + d[j]) % k < k / 2:\n            i += 1\n        else:\n            j -= 1\n    return str(len(pairs))",
        "test": "assert solution(\"8 2\\n1 2 2 3 2 4 6 10\\n\") == \"8\"",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 4422,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K, S = stdin.split()\n    N, K = int(N), int(K)\n    \n    # Lowercase the K-th character\n    S = list(S)\n    S[K-1] = S[K-1].lower()\n    S = ''.join(S)\n    \n    return S",
        "test": "assert solution(\"3 1\\nABC\") == \"aBC\"",
        "num_ids": 318,
        "indeed": true
    },
    {
        "number": 4423,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    restaurants = []\n    for i in range(1, n+1):\n        city, score = stdin.split('\\n')[i].split()\n        restaurants.append((city, int(score), i))\n\n    restaurants.sort(key=lambda x: (x[0], -x[1]))\n\n    result = [str(restaurant[2]) for restaurant in restaurants]\n    return '\\n'.join(result)",
        "test": "assert solution(\"6\\nkhabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"",
        "num_ids": 535,
        "indeed": true
    },
    {
        "number": 4424,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    total_coins = K * 500\n    if total_coins >= X:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"2 900\") == \"Yes\"",
        "num_ids": 233,
        "indeed": true
    },
    {
        "number": 4425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    probability = 0\n\n    for i in range(1, N):\n        if K - i >= 2 ** i:\n            probability += 1 / (3 * (2 ** (i - 1)))\n\n    probability += 1 / (3 * (2 ** (N - 1)))\n    probability = round(probability, 10)\n\n    return str(probability)",
        "test": "assert solution(\"5 20\") == \"0.1791666666\"",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 4426,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    days = [\"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"]\n    days_until_sunday = 7 - days.index(stdin)\n    return days_until_sunday\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "assert solution(\"SUN\") == 7",
        "num_ids": 322,
        "indeed": false
    },
    {
        "number": 4427,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n    result = []\n    for i in range(10):\n        x = r * x_2000 - D\n        result.append(str(x))\n        x_2000 = x\n    return \"\\n\".join(result)",
        "test": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"",
        "num_ids": 725,
        "indeed": true
    },
    {
        "number": 4428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    d = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    \n    d.sort()\n    sum_d = sum(d)\n    \n    if sum_d % 2 == 1:\n        return '0'\n    \n    target = sum_d // 2\n    left = 0\n    right = n - 1\n    sum_left = 0\n    sum_right = 0\n    \n    while left < right:\n        if sum_left + d[left] < sum_right + d[right]:\n            sum_left += d[left]\n            left += 1\n        else:\n            sum_right += d[right]\n            right -= 1\n            \n        if sum_left == sum_right and sum_left == target:\n            return str(target)\n            \n    return '0'",
        "test": "assert solution(\"5\\n1 3 2 1 4\") == \"4\"",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 4429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_triplet(x, y, z):\n        a, b, c = max(x, y), max(x, z), max(y, z)\n        if a + b > c and a + c > b and b + c > a:\n            return \"YES\", a, b, c\n        else:\n            return \"NO\", None, None, None\n\n    t = int(stdin.splitlines()[0])\n    result = []\n    for i in range(1, t + 1):\n        x, y, z = map(int, stdin.splitlines()[i].split())\n        status, a, b, c = find_triplet(x, y, z)\n        if status == \"NO\":\n            result.append(\"NO\")\n        else:\n            result.append(\"YES\")\n            result.append(f\"{a} {b} {c}\")\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\" ",
        "num_ids": 1055,
        "indeed": false
    },
    {
        "number": 4430,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    a.sort(reverse=True)\n\n    boxes = [k] * m\n    objects_packed = 0\n\n    for i in range(n):\n        for j in range(m):\n            if boxes[j] >= a[i]:\n                boxes[j] -= a[i]\n                objects_packed += 1\n                break\n\n    return str(objects_packed)",
        "test": "assert solution('5 1 4\\n4 2 3 4 1') == '1'",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 4431,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    available_letters = set(stdin.readline().split())\n\n    def is_valid_substring(substring: str) -> bool:\n        for letter in substring:\n            if letter not in available_letters:\n                return False\n        return True\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if is_valid_substring(s[i:j]):\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"10 3\\nsadfaasdda\\nf a d\") == \"21\"",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 4432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def max_alternating_subsequence(a: List[int]) -> int:\n        n = len(a)\n        up = [0] * n\n        down = [0] * n\n\n        for i in range(n):\n            if i == 0 or a[i] > a[i - 1]:\n                up[i] = up[i - 1] + a[i] if i > 0 else a[i]\n            if i == 0 or a[i] < a[i - 1]:\n                down[i] = down[i - 1] + a[i] if i > 0 else a[i]\n\n        return max(up[i] - down[i - 1] if i > 0 else up[i] for i in range(n))\n\n    t = int(stdin.split('\\n', 1)[0])\n    test_cases = stdin.split('\\n')[1:]\n\n    results = []\n    for i in range(t):\n        n = int(test_cases[i * 2])\n        a = list(map(int, test_cases[i * 2 + 1].split()))\n        results.append(str(max_alternating_subsequence(a)))\n\n    return '\\n'.join(results)\n",
        "test": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\" ",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 4433,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def kruskal(n, m, edges):\n        parent = list(range(n))\n        rank = [0] * n\n        count = [1] * n\n\n        def find(x):\n            if parent[x] != x:\n                parent[x] = find(parent[x])\n            return parent[x]\n\n        def union(x, y):\n            xroot = find(x)\n            yroot = find(y)\n            if xroot == yroot:\n                return False\n            if rank[xroot] < rank[yroot]:\n                parent[xroot] = yroot\n                count[yroot] += count[xroot]\n            elif rank[xroot] > rank[yroot]:\n                parent[yroot] = xroot\n                count[xroot] += count[yroot]\n            else:\n                parent[yroot] = xroot\n                rank[xroot] += 1\n                count[xroot] += count[yroot]\n            return True\n\n        mst = []\n        for edge in sorted(edges, key=lambda x: x[2]):\n            if union(edge[0] - 1, edge[1] - 1):\n                mst.append(edge)\n                if len(mst) == n - 1:\n                    break\n\n        return [f\"{x[0]} {x[1]}\" for x in mst]\n\n    n, m = map(int, stdin.split()[0:2])\n    edges = []\n    for i in range(m):\n        v, u = map(int, stdin.split()[2 + 2 * i:4 + 2 * i])\n        edges.append((v, u, i))\n\n    result = kruskal(n, m, edges)\n    return \"\\n\".join(result)\n",
        "test": "assert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"",
        "num_ids": 1619,
        "indeed": false
    },
    {
        "number": 4434,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def min_moves(n: int) -> int:\n        moves = 0\n        for i in range(1, n // 2 + 1):\n            moves += i * (n - 2 * i)\n        return moves\n\n    t = int(stdin.split('\\n')[0])\n    result = []\n    for _ in range(t):\n        n = int(stdin.split('\\n')[1 + _])\n        result.append(min_moves(n))\n\n    return '\\n'.join(map(str, result))\n",
        "test": "assert solution(\"1\\n1\") == \"0\"",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 4435,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def is_opposite_parity(a: int, b: int) -> bool:\n        return (a % 2 == 0) != (b % 2 == 0)\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    d = [0] * n\n    visited = [False] * n\n    q = [(i, 0) for i in range(n)]\n\n    while q:\n        i, moves = q.pop(0)\n\n        if d[i] > 0 and d[i] <= moves:\n            continue\n\n        d[i] = moves\n        visited[i] = True\n\n        for j in [max(0, i - a[i]), i + a[i]]:\n            if j < n and not visited[j] and is_opposite_parity(a[i], a[j]):\n                q.append((j, moves + 1))\n\n    for i in range(n):\n        d[i] = -1 if not is_opposite_parity(a[i], a[0]) else d[i]\n\n    return ' '.join(map(str, d))",
        "test": "assert solution(\"10\\n4 5 7 6 7 5 4 4 6 2\") == \"1 1 1 2 -1 1 1 3 1 1\"",
        "num_ids": 1085,
        "indeed": false
    },
    {
        "number": 4436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\", 1)[0])\n    for _ in range(t):\n        n = int(stdin.split(\"\\n\", 1)[0])\n        stdin = stdin.split(\"\\n\", 1)[1]\n        a, b, c = 2, 2, n // 2\n        while a <= n // a and b <= n // b and c >= 2:\n            if a * b * c == n and a != b and a != c and b != c:\n                return f\"YES\\n{a} {b} {c}\"\n            elif a * b * c < n:\n                c += 1\n            else:\n                b += 1\n                c = n // b\n        return \"NO\"\n\n    return \"NO\"\n",
        "test": "assert solution(\"32\\n\") == \"YES\\n2 2 16\\n\"",
        "num_ids": 698,
        "indeed": false
    },
    {
        "number": 4437,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split('\\n'))\n    n = int(n)\n\n    if n == 2:\n        if s[0] == s[1]:\n            return f\"1\\n{s[::-1]}\"\n        else:\n            return f\"0\\n{s}\"\n\n    if n % 2 == 1:\n        s = s[:n - 1] + s[n - 1]\n        n -= 1\n\n    operations = 0\n    for i in range(0, n, 2):\n        prefix = s[i:i + 2]\n        a_count = prefix.count('a')\n        b_count = prefix.count('b')\n\n        if a_count != b_count:\n            operations += abs(a_count - b_count)\n\n    return f\"{operations}\\n{s}\"",
        "test": "assert solution(\"6\\nababab\") == \"0\\nababab\"",
        "num_ids": 757,
        "indeed": false
    },
    {
        "number": 4438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import chain\n    from heapq import heappush, heappop\n\n    def distance(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n    def neighbors(p):\n        return [(p[0] + 1, p[1]), (p[0] - 1, p[1]), (p[0], p[1] + 1), (p[0], p[1] - 1)]\n\n    def dijkstra(start, end, points):\n        queue = [(0, start)]\n        visited = set()\n        while queue:\n            dist, p = heappop(queue)\n            if p == end:\n                return dist\n            if p in visited:\n                continue\n            visited.add(p)\n            for neighbor in neighbors(p):\n                if neighbor in points:\n                    heappush(queue, (dist + distance(p, neighbor), neighbor))\n        return float('inf')\n\n    points = []\n    for i in range(int(stdin.readline())):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n\n    points.sort(key=lambda p: max(p[0], p[1]))\n    total_distance = 0\n    start_level = 0\n    start_point = (0, 0)\n    end_point = None\n    while points:\n        if start_level == max(end_point[0], end_point[1]) if end_point else 0:\n            for point in points:\n                if point[0] <= end_point[0] and point[1] <= end_point[1]:\n                    total_distance += dijkstra(start_point, point, set(points))\n                    start_point = point\n                    points.remove(point)\n                    if not points:\n                        break\n            start_level = max(point[0], point[1])\n        else:\n            end_point = points.pop(0)\n\n    return str(total_distance)\n",
        "test": "assert solution(\"\"\"8",
        "num_ids": 1215,
        "indeed": false
    },
    {
        "number": 4439,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    choices = [1, 2, 3]\n    choices.remove(A)\n    choices.remove(B)\n    return str(choices[0])",
        "test": "assert solution(\"3\\n1\") == \"2\"  # Test case 1",
        "num_ids": 265,
        "indeed": true
    },
    {
        "number": 4440,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    \n    max_volume = 0\n    for a in range(1, L):\n        for b in range(1, L - a + 1):\n            c = L - a - b\n            volume = a * b * c\n            if volume > max_volume:\n                max_volume = volume\n    \n    return f\"{max_volume:.12f}\"",
        "test": "assert solution(\"3\") == \"1.000000000000\"",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 4441,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"Hello World\"\n    else:\n        a, b = map(int, input().split())\n        return str(a + b)",
        "test": "assert solution(\"1\") == \"Hello World\"",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 4442,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    if a > b:\n        a, b = b, a\n    \n    str_a = str(a) * b\n    str_b = str(b) * a\n    \n    return str_a if str_a < str_b else str_b",
        "test": "assert solution(\"4 3\") == \"3333\"",
        "num_ids": 293,
        "indeed": true
    },
    {
        "number": 4443,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'z':\n        return 'a'\n    else:\n        return chr(ord(stdin) + 1)",
        "test": "assert solution(\"a\") == \"b\"",
        "num_ids": 172,
        "indeed": true
    },
    {
        "number": 4444,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return T + S",
        "test": "assert solution(\"oder atc\") == \"atcoder\" # Test case 1",
        "num_ids": 146,
        "indeed": true
    },
    {
        "number": 4445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find_sum(arr, n, start_parity):\n        deleted = 0\n        for i in range(n):\n            if i == 0 or (arr[i] % 2 != start_parity and arr[i] != -1):\n                deleted += arr[i]\n                start_parity = 1 - start_parity\n                arr[i] = -1\n        return sum(arr) - deleted\n\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    even_sum = find_sum(arr, n, 0)\n    odd_sum = find_sum(arr, n, 1)\n    return str(min(even_sum, odd_sum))",
        "test": "assert solution(\"6\\n5 1 2 4 6 3\") == 0",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 4446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k, *h = map(int, stdin.split())\n    h.sort()\n\n    points = 0\n    current_a = k\n    current_b = 0\n    skip_turn = False\n\n    for i in range(n):\n        if not skip_turn and h[i] <= a:\n            points += 1\n            current_a -= 1\n            if current_a == 0 and i < n - 1:\n                skip_turn = True\n        elif not skip_turn and h[i] > a:\n            current_b -= 1\n            if current_b == 0 and i < n - 1:\n                skip_turn = True\n        elif skip_turn and i < n - 1:\n            skip_turn = False\n\n    return str(points)",
        "test": "assert solution(\"1 1 100 99\\n100\\n\") == \"1\\n\"",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 4447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    def count_elements(arr):\n        counts = [0] * m\n        for num in arr:\n            counts[num % m] += 1\n        return counts\n\n    def find_min_moves(counts):\n        moves = 0\n        for i in range(m):\n            diff = (n // m) - counts[i]\n            if diff > 0:\n                moves += diff\n                counts[i] += diff\n            elif diff < 0:\n                change = min(abs(diff), counts[(i + 1) % m])\n                counts[i] += change\n                counts[(i + 1) % m] -= change\n                moves += change\n        return moves, counts\n\n    counts = count_elements(a)\n    min_moves, new_counts = find_min_moves(counts)\n\n    for i in range(n):\n        a[i] += (n // m) - (a[i] % m)\n\n    return f\"{min_moves}\\n{' '.join(map(str, a))}\"",
        "test": "assert solution(\"4 2\\n0 1 2 3\") == \"0\\n0 1 2 3\"",
        "num_ids": 1008,
        "indeed": false
    },
    {
        "number": 4448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_cost(type_id: int, day: int) -> int:\n        if (day, type_id) in on_sale:\n            return 1\n        return 2\n\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    on_sale = set()\n\n    for _ in range(m):\n        day, type_id = map(int, stdin.readline().split())\n        on_sale.add((day, type_id))\n\n    days = 1\n    money = 1\n    burles = 1\n\n    while any(k):\n        days += 1\n        burles += 1\n        for type_id in range(n):\n            if not k[type_id]:\n                continue\n            if burles >= calculate_cost(type_id, days):\n                k[type_id] -= 1\n                money += calculate_cost(type_id, days)\n                burles -= calculate_cost(type_id, days)\n\n    return str(days)",
        "test": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\" ",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 4449,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def is_possible(n, arr):\n        total_area = sum(arr) // 4\n        for i in range(0, len(arr), 4):\n            if arr[i] != arr[i + 1] or arr[i + 2] != arr[i + 3]:\n                return False\n            if arr[i] * arr[i + 1] != total_area:\n                return False\n        return True\n\n    q = int(stdin.readline().strip())\n    result = []\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        arr = list(map(int, stdin.readline().strip().split()))\n        if len(arr) != 4 * n:\n            raise ValueError(\"Invalid input length\")\n        if is_possible(n, arr):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n    return \"\\n\".join(result)",
        "test": "assert solution(\"5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\\n\") == \"YES\\nYES\\nNO\\nYES\\nYES\" ",
        "num_ids": 1117,
        "indeed": false
    },
    {
        "number": 4450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m, k = map(int, stdin.split(\"\\n\")[0].split())\n    graph = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        graph[i][i] = 0\n    for i in range(m):\n        x, y, w = map(int, stdin.split(\"\\n\")[i + 1].split())\n        graph[x - 1][y - 1] = w\n        graph[y - 1][x - 1] = w\n\n    # Floyd-Warshall algorithm\n    for i in range(n):\n        for j in range(n):\n            for l in range(n):\n                graph[j][l] = min(graph[j][l], graph[j][i] + graph[i][l])\n\n    # Find the k-th smallest shortest path\n    distances = [graph[i][j] for i in range(n) for j in range(n) if i != j]\n    distances.sort()\n    return str(distances[k - 1])",
        "test": "assert solution(\"\"\"6 10 5",
        "num_ids": 1012,
        "indeed": false
    },
    {
        "number": 4451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find_teams(skills):\n        sorted_skills = sorted(enumerate(skills), key=lambda x: x[1])\n        teams = []\n        while sorted_skills:\n            team = [sorted_skills.pop()]\n            while sorted_skills and sorted_skills[-1][1] - team[0][1] <= 2:\n                team.append(sorted_skills.pop())\n            teams.append(team)\n        return teams\n\n    def calculate_total_diversity(teams):\n        total_diversity = 0\n        for team in teams:\n            total_diversity += team[-1][1] - team[0][1]\n        return total_diversity\n\n    def assign_students_to_teams(teams, student_ids):\n        team_assignment = [-1] * len(student_ids)\n        for team_id, team in enumerate(teams):\n            for student_id, _ in team:\n                team_assignment[student_id] = team_id\n        return team_assignment\n\n    n, skills = map(int, stdin.split()[0:2])\n    skills = list(map(int, stdin.split()[1:n + 1]))\n\n    teams = find_teams(skills)\n    total_diversity = calculate_total_diversity(teams)\n    team_assignment = assign_students_to_teams(teams, list(range(n)))\n\n    return f\"{total_diversity} {len(teams)}\\n{' '.join(map(str, team_assignment))}\"",
        "test": "assert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"",
        "num_ids": 1643,
        "indeed": false
    },
    {
        "number": 4452,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_round(n: int) -> bool:\n        s = str(n)\n        return all(d == s[0] for d in s[1:])\n\n    def find_min_summands(n: int) -> int:\n        i = 1\n        while not is_round(n - i * 1000):\n            i *= 10\n        return i\n\n    def represent_as_sum(n: int, k: int) -> str:\n        s = str(n)\n        result = [int(s[0] * k + '0')]\n        remaining = n - result[0]\n        i = 1\n        while remaining > 0:\n            x = min(900, remaining)\n            result.append(int(str(x) + '0' * i))\n            remaining -= x\n            i += 1\n        return ' '.join(str(x) for x in result)\n\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    test_cases = [int(x) for x in lines[1:]]\n\n    output = []\n    for n in test_cases:\n        k = find_min_summands(n)\n        output.append(f\"{k}\\n{represent_as_sum(n, k)}\")\n\n    return '\\n'.join(output)\n",
        "test": "assert solution(\"5\\n5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"",
        "num_ids": 1306,
        "indeed": false
    },
    {
        "number": 4453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_cycle_length(p: List[int]) -> int:\n        n = len(p)\n        vis = [-1] * n\n        for i in range(n):\n            if vis[i] == -1:\n                j, cycle_length = i, 0\n                while vis[j] == -1:\n                    vis[j] = i\n                    j = p[j] - 1\n                    cycle_length += 1\n                if cycle_length > 0:\n                    return cycle_length\n        return n\n\n    def get_first_day_of_return(n: int, p: List[int]) -> List[int]:\n        cycle_length = find_cycle_length(p)\n        first_days_of_return = [-1] * n\n        for i in range(cycle_length):\n            curr_p = p\n            for j in range(n):\n                if first_days_of_return[j] == -1:\n                    first_days_of_return[j] = i + 1\n                curr_p = curr_p[curr_p.index(j + 1)]\n        return first_days_of_return\n\n    queries = [line.rstrip() for line in stdin.strip().split('\\n')]\n    q = int(queries[0])\n    results = []\n    for i in range(1, q + 1):\n        n = int(queries[i * 2 - 1])\n        p = list(map(int, queries[i * 2].split()))\n        assert len(p) == n and len(set(p)) == n and all(1 <= x <= n for x in p)\n        first_days_of_return = get_first_day_of_return(n, p)\n        results.append(' '.join(map(str, first_days_of_return)))\n\n    return '\\n'.join(results)",
        "test": "assert solution(\"6\\n5 1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1 \\n3 3 3 \\n2 3 3 2 1 3 \\n1 \\n2 2 2 2  \\n4 4 4 1 4\" ",
        "num_ids": 1553,
        "indeed": false
    },
    {
        "number": 4454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = [line.strip().split() for line in stdin.split('\\n') if line.strip()][1:]\n    output = []\n\n    for query in queries:\n        n, prices = int(query[0]), list(map(int, query[1:]))\n        min_price = min(prices)\n        total_price = sum(prices)\n\n        if total_price % n != 0:\n            equal_price = total_price // n + 1\n        else:\n            equal_price = total_price // n\n\n        if equal_price < min_price:\n            output.append(str(min_price))\n        else:\n            output.append(str(equal_price))\n\n    return '\\n'.join(output)",
        "test": "assert solution(\"3\\n5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1\") == \"3\\n2\\n1\" ",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 4455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    n, k = map(int, stdin.readline().split())\n    skills = list(map(int, stdin.readline().split()))\n    quarrels = [tuple(map(int, stdin.readline().split())) for _ in range(k)]\n\n    # Find the number of mentors for each programmer\n    mentors = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if (i != j) and (skills[i] > skills[j]) and (i, j) not in quarrels and (j, i) not in quarrels:\n                mentors[i] += 1\n\n    # Return the result as a string\n    return \" \".join(str(m) for m in mentors)",
        "test": "assert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5 \" ",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 4456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    q = list(map(int, stdin.readline().split()))\n\n    if n < k:\n        return \"NO\"\n\n    s = [chr(i) for i in range(ord('a'), ord('a') + k)]\n    for i in range(k, n):\n        s.append(s[-1])\n\n    s_sorted = sorted(s)\n    for i in range(n):\n        s[p[i] - 1] = s_sorted[i]\n\n    for i in range(n):\n        if s[q[i] - 1] != s_sorted[i]:\n            return \"NO\"\n\n    return \"YES\\n\" + \"\".join(s)\n",
        "test": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\" ",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 4457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n == 1:\n        return \"1\\n1\"\n    total_shots = sum(a) * n\n    order = [i for i in range(1, n + 1)]\n    return f\"{total_shots}\\n{' '.join(map(str, order))}\"",
        "test": "assert solution(\"4\\n10 10 10 10\") == \"64\\n2 1 4 3\"",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 4458,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, P = int(stdin.split(\"\\n\")[0]), list(map(int, stdin.split(\"\\n\")[1].split()))\n    count = 0\n    for i in range(N):\n        is_valid = True\n        for j in range(1, i + 1):\n            if P[i] < P[j]:\n                is_valid = False\n                break\n        if is_valid:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"  # Test case 1",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 4459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_sequence(seq: List[int]) -> bool:\n        for x in seq:\n            if seq.count(x) != x:\n                return False\n        return True\n\n    def min_removals(seq: List[int]) -> int:\n        seq = sorted(seq, reverse=True)\n        removals = 0\n        for i, x in enumerate(seq):\n            if x > i + removals + 1:\n                break\n            removals += x - (i + removals + 1)\n        return removals\n\n    N = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    if is_good_sequence(a):\n        return \"0\"\n    else:\n        return str(min_removals(a))",
        "test": "assert solution(\"7\\n3 2 4 5 4 2 4\") == 2 ",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 4460,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    if x_1 == 0:\n        return \"1\"\n    elif x_2 == 0:\n        return \"2\"\n    elif x_3 == 0:\n        return \"3\"\n    elif x_4 == 0:\n        return \"4\"\n    elif x_5 == 0:\n        return \"5\"\n    else:\n        return \"None\"",
        "test": "assert solution('0 2 3 4 5') == '1'",
        "num_ids": 461,
        "indeed": true
    },
    {
        "number": 4461,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    return str(max(0, W * 2 - H * W))",
        "test": "assert solution(\"2 10\") == \"0\"",
        "num_ids": 408,
        "indeed": false
    },
    {
        "number": 4462,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    if N == 1:\n        return \"Yes\"\n\n    for i in range(N - 1):\n        if (a[i] * a[i + 1]) % 4 != 0:\n            return \"No\"\n\n    return \"Yes\"",
        "test": "assert solution(\"3\\n1 10 101\") == \"No\"",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 4463,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s_sorted = sorted(s)\n    t_sorted = sorted(t)\n\n    for i in range(len(s_sorted)):\n        if s_sorted[i] != t_sorted[i]:\n            return \"Yes\"\n\n    return \"No\"\n",
        "test": "assert solution(\"yx\\naxy\") == \"Yes\"",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 4464,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    selected_numbers = [A * i for i in range(1, B // A + 1)]\n    selected_numbers_sum = sum(selected_numbers)\n    if selected_numbers_sum % B == C:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"10 10 0\") == \"YES\"",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 4465,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    area = A * B - 2\n    return str(area)",
        "test": "assert solution('5 5') == '20\\n'",
        "num_ids": 195,
        "indeed": false
    },
    {
        "number": 4466,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    \n    # calculate the maximum number of people that can be seated\n    max_people = (X - Y) // (Y + 2 * Z)\n    \n    return str(max_people)",
        "test": "assert solution(\"10 3 2\") == 3",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 4467,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(str, stdin.split('\\n')))\n    N = int(input_list[0])\n    red_points = [(int(input_list[i].split()[0]), int(input_list[i].split()[1])) for i in range(1, N+1)]\n    blue_points = [(int(input_list[i].split()[0]), int(input_list[i].split()[1])) for i in range(N+1, 2*N+1)]\n    \n    count = 0\n    for r in red_points:\n        for b in blue_points:\n            if r[0] < b[0] and r[1] < b[1]:\n                count += 1\n                blue_points.remove(b)\n                break\n                \n    return str(count)",
        "test": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\") == \"2\"",
        "num_ids": 1091,
        "indeed": false
    },
    {
        "number": 4468,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, T, *times = list(map(int, stdin.split()))\n    time_sum = 0\n    start_time = 0\n    end_time = 0\n\n    for i in range(N):\n        if i == 0:\n            start_time = times[i]\n        else:\n            start_time = end_time\n\n        if i == N - 1:\n            end_time = times[i] + T\n        else:\n            end_time = times[i + 1]\n\n        time_sum += end_time - start_time\n\n    return str(time_sum)",
        "test": "assert solution(\"2 4\\n0 3\") == \"7\"",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 4469,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    queries = stdin.split('\\n')\n    q = int(queries[0])\n    queries = queries[1:]\n\n    # Initialize shelf\n    shelf = []\n\n    # Process queries\n    result = []\n    for query in queries:\n        q_type, book_id = query.split()\n        book_id = int(book_id)\n\n        if q_type == 'L':\n            shelf.insert(0, book_id)\n        elif q_type == 'R':\n            shelf.append(book_id)\n        elif q_type == '?':\n            if book_id in shelf:\n                left = shelf.index(book_id)\n                right = len(shelf) - shelf[::-1].index(book_id) - 1\n                result.append(min(left, right))\n            else:\n                result.append(0)\n\n    # Format output\n    return '\\n'.join(map(str, result)) + '\\n'",
        "test": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\\n\"",
        "num_ids": 1099,
        "indeed": false
    },
    {
        "number": 4470,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def min_moves(n: int) -> int:\n        moves = 0\n        while n > 1:\n            if n % 2 == 0:\n                n //= 2\n            elif n % 3 == 0:\n                n = n * 2 // 3\n            elif n % 5 == 0:\n                n = n * 4 // 5\n            else:\n                return -1\n            moves += 1\n        return moves\n\n    queries = [int(line) for line in stdin.splitlines()[1:]]\n    results = [min_moves(query) for query in queries]\n    return \"\\n\".join(map(str, results))\n",
        "test": "assert solution(\"7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\"",
        "num_ids": 734,
        "indeed": true
    },
    {
        "number": 4471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def process(a):\n        while any(a):\n            i = a.index(max(a))\n            a[i] += 2\n            yield i\n            a = [x - 1 if x > 0 else 0 for x in a]\n\n    def clearable(a):\n        for _ in process(a.copy()):\n            pass\n        return all(x == 0 for x in a)\n\n    t = int(stdin.strip().split('\\n')[0])\n    result = []\n    for i in range(t):\n        n, a = map(int, stdin.strip().split('\\n')[i * 2 + 1].split())\n        a = list(map(int, stdin.strip().split('\\n')[i * 2 + 2].split()))\n        result.append(\"YES\" if clearable(a) else \"NO\")\n    return '\\n'.join(result)",
        "test": "assert solution(\"4\\n3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\\nNO\\nYES\\nYES\"",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 4472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n\n    def is_equal(a: str, b: str) -> bool:\n        return all(a[i] == b[i] for i in range(n))\n\n    def is_symmetric(a: str) -> bool:\n        for i in range(1, n // 2 + 1):\n            if a[i] != a[n - i + 1]:\n                return False\n        return True\n\n    def is_solvable(a: str, b: str) -> bool:\n        if is_equal(a, b):\n            return True\n\n        for i in range(n):\n            if a[i] != b[i]:\n                if a[i] in b and is_symmetric(a):\n                    return True\n                elif b[i] in a and is_symmetric(b):\n                    return True\n                else:\n                    return False\n\n    if is_solvable(a, b):\n        return \"0\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5\\nzcabd\\ndbacz\") == \"0\"",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 4473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def frog_jump(a: int, b: int, k: int) -> int:\n        position = 0\n        for i in range(k):\n            if i % 2 == 0:\n                position += a\n            else:\n                position -= b\n        return position\n\n    queries = []\n    for line in stdin.strip().split('\\n')[1:]:\n        a, b, k = map(int, line.split())\n        queries.append(frog_jump(a, b, k))\n\n    return '\\n'.join(map(str, queries))\n",
        "test": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\" ",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 4474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(number):\n        powers = []\n        current_power = 0\n        while number > 0:\n            if number % 3 == 0:\n                current_power += 1\n                number //= 3\n            else:\n                if current_power > 0:\n                    powers.append(current_power)\n                    current_power = 0\n                else:\n                    return False\n        if current_power > 0:\n            powers.append(current_power)\n        return len(set(powers)) == len(powers)\n\n    def smallest_good(n):\n        while not is_good(n):\n            n += 1\n        return n\n\n    queries = [int(line.strip()) for line in stdin.split('\\n')[1:]]\n    return '\\n'.join(str(smallest_good(n)) for n in queries)",
        "test": "assert solution(\"8\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n100000000000000000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089\"",
        "num_ids": 892,
        "indeed": false
    },
    {
        "number": 4475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_min_product(a: int, b: int, x: int, y: int, n: int) -> int:\n        for _ in range(n):\n            if a > x and b > y:\n                if a - x > b - y:\n                    a -= x\n                else:\n                    b -= y\n            else:\n                break\n        return a * b\n\n    test_cases = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    results = [str(get_min_product(a, b, x, y, n)) for a, b, x, y, n in test_cases]\n    return '\\n'.join(results)\n",
        "test": "assert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n177177\\n999999999000000000\\n999999999\\n55\\n10\"",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 4476,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def get_moves(a, b):\n        moves = 0\n        while a != b:\n            if a < b:\n                x = (b - a + 1) // 2\n                a += x\n                moves += 1\n            else:\n                y = (a - b) // 2\n                a -= y\n                moves += 1\n        return moves\n\n    test_cases = list(map(int, stdin.split()))[1:]\n    results = []\n    for i in range(0, len(test_cases), 2):\n        a, b = test_cases[i], test_cases[i + 1]\n        results.append(get_moves(a, b))\n\n    return \"\\n\".join(map(str, results))\n",
        "test": "assert solution(\"1\\n10 10\") == \"0\"",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 4477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    total_digits = []\n    for i in range(1, t + 1):\n        n = int(stdin.split('\\n')[i])\n        num_digits = len(str(n))\n        total_digits.append(num_digits * (num_digits + 1) // 2)\n    return '\\n'.join(str(x) for x in total_digits)\n\nstdin = '''4\n22\n9999\n1\n777'''\n\nprint(solution(stdin)) ",
        "test": "assert solution(\"1\\n123\\n\") == \"10\\n\"",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 4478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def read_line() -> str:\n        return stdin.readline().strip()\n\n    def read_int() -> int:\n        return int(read_line())\n\n    def read_ints() -> List[int]:\n        return list(map(int, read_line().split()))\n\n    k = read_int()\n    sequences = []\n    for _ in range(k):\n        n = read_int()\n        sequence = read_ints()\n        sequences.append((n, sequence))\n\n    for i in range(k):\n        n1, sequence1 = sequences[i]\n        for j in range(i + 1, k):\n            n2, sequence2 = sequences[j]\n            for x in range(n1):\n                for y in range(n2):\n                    if sum(sequence1[:x] + sequence1[x + 1 :]) == sum(sequence2[:y] + sequence2[y + 1 :]):\n                        return \"YES\\n\" + f\"{i + 1} {x + 1}\\n{j + 1} {y + 1}\\n\"\n    return \"NO\"",
        "test": "assert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\\n\") == \"NO\\n\"",
        "num_ids": 1022,
        "indeed": false
    },
    {
        "number": 4479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, K = map(int, stdin.split())\n    A = list(map(int, input().split()))\n    A.sort()\n    for i in range(K):\n        if A[i] < 0:\n            A[i] = -A[i]\n        else:\n            break\n    return sum(A)",
        "test": "assert solution([3,-1,0,2], 3) == 6",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 4480,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    total_sum = sum(A)\n    if total_sum % 3 != 0:\n        return \"false\"\n\n    subset_sum = total_sum // 3\n    A.sort()\n    n = len(A)\n\n    for i in range(n - 2):\n        if A[i] > subset_sum:\n            break\n        if A[i] == subset_sum:\n            j = i + 1\n            k = n - 1\n            while j < k:\n                if A[j] + A[k] == subset_sum:\n                    return \"true\"\n                elif A[j] + A[k] < subset_sum:\n                    j += 1\n                else:\n                    k -= 1\n        else:\n            j = i + 1\n            k = n - 2\n            while j < k:\n                if A[i] + A[j] + A[k] == subset_sum:\n                    return \"true\"\n                elif A[i] + A[j] + A[k] < subset_sum:\n                    j += 1\n                else:\n                    k -= 1\n    return \"false\"\n\ndef",
        "test": "assert solution([0,2,1,-6,6,7,9,-1,2,0,1]) == False",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 4481,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    votes = stdin.split(\"\\n\")[1:]\n\n    vote_counts = {}\n    for vote in votes:\n        if vote in vote_counts:\n            vote_counts[vote] += 1\n        else:\n            vote_counts[vote] = 1\n\n    max_count = max(vote_counts.values())\n\n    most_voted = [vote for vote, count in vote_counts.items() if count == max_count]\n    most_voted.sort()\n\n    return \"\\n\".join(most_voted)",
        "test": "assert solution(\"7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\") == \"beet\\nvet\" ",
        "num_ids": 550,
        "indeed": true
    },
    {
        "number": 4482,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *arr = list(map(int, stdin.split()))\n    arr.sort()\n    if N % 2 != 0:\n        mid = arr[N // 2]\n        return sum([(x - mid) ** 2 for x in arr])\n    else:\n        mid1 = arr[N // 2 - 1]\n        mid2 = arr[N // 2]\n        cost1 = sum([(x - mid1) ** 2 for x in arr])\n        cost2 = sum([(x - mid2) ** 2 for x in arr])\n        return min(cost1, cost2)",
        "test": "assert solution(\"3\\n2 2 3\") == 1",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 4483,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    cake_cost = A\n    donut_cost = B\n    total_money = X\n\n    money_left = total_money - cake_cost\n    donuts_bought = money_left // donut_cost\n    money_left = money_left % donut_cost\n\n    return str(money_left)",
        "test": "assert solution('1234\\n150\\n100') == '84'",
        "num_ids": 401,
        "indeed": true
    },
    {
        "number": 4484,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    if n == 0 or m == 0:\n        return \"0\"\n\n    mod = 10**9 + 7\n    dp = [[0, 0], [0, 0]]\n    dp[0][0] = m + 1\n    dp[0][1] = n + 1\n    dp[1][0] = n + 1\n    dp[1][1] = m + 1\n\n    for i in range(2, n + m + 1):\n        for j in range(2):\n            for k in range(2):\n                if j != k:\n                    dp[j][i % 2] += dp[k][(i - 1) % 2]\n                    dp[j][i % 2] %= mod\n\n    return str(dp[0][n % 2] - 1)",
        "test": "assert solution(\"5 3\") == \"400\"",
        "num_ids": 772,
        "indeed": false
    },
    {
        "number": 4485,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        a, b = map(int, stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n\n    visited = [False] * (n + 1)\n    visited[1] = True\n    stack = [1]\n\n    while stack:\n        current = stack.pop()\n        for neighbor in graph[current]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                stack.append(neighbor)\n\n    if visited[n]:\n        return \"POSSIBLE\"\n    else:\n        return \"IMPOSSIBLE\"\n",
        "test": "assert solution(\"3 1\\n1 3\") == \"IMPOSSIBLE\"",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 4486,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    odd_indexed_chars = s[1::2]\n    result = ''.join(odd_indexed_chars)\n    return result",
        "test": "assert solution(\"abcde\") == \"bde\"",
        "num_ids": 200,
        "indeed": false
    },
    {
        "number": 4487,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    \n    if a[-1] == b[0] and b[-1] == c[0]:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution('rng gorilla apple') == 'YES'",
        "num_ids": 266,
        "indeed": true
    },
    {
        "number": 4488,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return \"GREATER\"\n    elif a < b:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"",
        "test": "assert solution(\"36\\n24\") == \"GREATER\" # Testing for greater number",
        "num_ids": 305,
        "indeed": true
    },
    {
        "number": 4489,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    s = set(lines[1:N + 1])\n    M = int(lines[N + 1])\n    t = set(lines[N + 2:])\n\n    max_profit = 0\n    for card in s:\n        max_profit += 1\n    for card in t:\n        if card in s:\n            max_profit -= 2\n\n    return str(max_profit)",
        "test": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\\n\") == \"2\"",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 4490,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'A':\n        return 'T'\n    elif stdin == 'T':\n        return 'A'\n    elif stdin == 'C':\n        return 'G'\n    elif stdin == 'G':\n        return 'C'\n    else:\n        return 'Invalid input'",
        "test": "assert solution(\"A\") == \"T\"",
        "num_ids": 215,
        "indeed": true
    },
    {
        "number": 4491,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    A1, A2 = A[:N], A[N:]\n\n    dp = [[0] * N for _ in range(2)]\n    for i in range(1, N + 1):\n        dp[1][i - 1] = A2[i - 1] + dp[1][i - 2] if i > 1 else A2[i - 1]\n        dp[0][i - 1] = A1[i - 1] + dp[0][i - 2] if i > 1 else A1[i - 1]\n\n    return str(max(dp[0][N - 1], dp[1][N - 1]))",
        "test": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == 14",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 4492,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def get_min_operations(boxes: int, limit: int, candies: List[int]) -> int:\n        operations = 0\n        for candy in candies:\n            if candy > limit:\n                operations += (candy - limit)\n        return operations\n\n    data = list(map(int, stdin.split()))\n    N, x = data[0], data[1]\n    a = data[2:]\n\n    return str(get_min_operations(N, x, a))",
        "test": "assert solution(\"5 7\\n3 6 9 2 7\") == \"2\"",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 4493,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    grid = [list(map(int, row.split())) for row in stdin.split('\\n')]\n    a = [sum(grid[i][j] for j in range(3)) for i in range(3)]\n    b = [sum(grid[i][j] for i in range(3)) for j in range(3)]\n    for i in range(3):\n        for j in range(3):\n            if grid[i][j] != a[i] + b[j]:\n                return \"No\"\n    return \"Yes\"",
        "test": "assert solution(\"1 0 1\\n2 1 2\\n1 0 2\") == \"No\"",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 4494,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"ABC\"",
        "test": "assert solution(\"ABC\") == \"ARC\"",
        "num_ids": 201,
        "indeed": true
    },
    {
        "number": 4495,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"4 8 2\") == \"3\"",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 4496,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    if D == 25:\n        return \"Christmas\"\n    elif D == 24:\n        return \"Christmas Eve\"\n    elif D == 23:\n        return \"Christmas Eve Eve\"\n    else:\n        return \"Christmas Eve Eve Eve\"",
        "test": "assert solution(25) == \"Christmas\"",
        "num_ids": 359,
        "indeed": true
    },
    {
        "number": 4497,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    max_divisible_count = 0\n    max_divisible = None\n\n    for i in range(1, n + 1):\n        divisible_count = 0\n        temp = i\n        while temp % 2 == 0:\n            divisible_count += 1\n            temp //= 2\n\n        if divisible_count > max_divisible_count:\n            max_divisible_count = divisible_count\n            max_divisible = i\n\n    return str(max_divisible)",
        "test": "assert solution(10) == 8, \"Test case 2 failed\"",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 4498,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n\n    if a <= d:\n        return \"Yes\"\n    if c <= d:\n        return \"Yes\"\n    if b - a <= d and c - b <= d:\n        return \"Yes\"\n\n    return \"No\"",
        "test": "assert solution('4 7 9 3') == 'Yes'",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 4499,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    acronym = ''.join([word[0].upper() for word in words])\n    return acronym",
        "test": "assert solution(\"atcoder beginner contest\") == \"ABC\"",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 4500,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A + B >= C:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('50 100 120') == 'Yes'",
        "num_ids": 259,
        "indeed": true
    },
    {
        "number": 4501,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def count_ways(n, a, x, dp):\n        if a == 0:\n            return 1\n        if n < 0 or a < 0:\n            return 0\n        if (n, a) in dp:\n            return dp[(n, a)]\n        dp[(n, a)] = count_ways(n - 1, a - x, x, dp) + count_ways(n - 1, a, x, dp)\n        return dp[(n, a)]\n\n    N, A = map(int, stdin.split()[0:2])\n    x = list(map(int, stdin.split()[2:]))\n    dp = {}\n    total_sum = sum(x)\n    if A * N != total_sum:\n        return \"0\"\n    else:\n        return str(count_ways(N - 1, A - x[0], x[0], dp))",
        "test": "assert solution(\"5 3\\n1 2 3 4 5\") == \"10\"",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 4502,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, a.split()))\n    b = []\n\n    for i in range(n):\n        b.append(a[i])\n        b.reverse()\n\n    return \" \".join(map(str, b))",
        "test": "assert solution(\"5\\n1 2 3 4 5\\n\") == \"5 4 3 2 1\"",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 4503,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            if A[i] + A[j] <= H:\n                return \"Yes\"\n\n    return \"No\"",
        "test": "assert solution(\"1000000000 100000\\n
        "num_ids": 1593,
        "indeed": false
    },
    {
        "number": 4504,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    i = 0\n    while i < n // 2 and s[i] == s[n - i - 1]:\n        i += 1\n    if i == n // 2:\n        return n // 2\n    else:\n        return n - i - 2 ",
        "test": "assert solution(\"abababab\") == 8",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 4505,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    \n    if 'a' in s and 'b' in s and 'c' in s:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(\"bac\") == \"Yes\"",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 4506,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n\n    mod = 998244353\n    total_sum = 0\n\n    a.sort()\n    b.sort()\n\n    for i in range(n):\n        total_sum += a[i] * b[i]\n\n    return str(total_sum % mod)\n",
        "test": "assert solution(\"1\\n1000000\\n1000000\") == \"757402647\"",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 4507,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_cost(n: int, m: int, k: int, a: list[int], offers: list[tuple[int, int]]) -> int:\n        a.sort()\n        offers.sort(key=lambda x: x[0])\n        total_cost = 0\n        bought_shovels = 0\n        i = 0\n        while bought_shovels < k:\n            if i < m:\n                x, y = offers[i]\n                if bought_shovels + x <= k:\n                    total_cost += sum(a[:x])\n                    bought_shovels += x\n                    i += 1\n                    continue\n            total_cost += a[0]\n            bought_shovels += 1\n        return total_cost\n\n    lines = stdin.splitlines()\n    n, m, k = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    offers = [tuple(map(int, line.split())) for line in lines[2:]]\n\n    min_cost = find_min_cost(n, m, k, a, offers)\n    return str(min_cost)",
        "test": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"",
        "num_ids": 1411,
        "indeed": false
    },
    {
        "number": 4508,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, edges = int(stdin.split(\"\\n\", 1)[0]), list(map(lambda x: tuple(map(int, x.split())), stdin.split(\"\\n\")[1:]))\n\n    tree = [[] for _ in range(n + 1)]\n    for u, v in edges:\n        tree[u].append(v)\n        tree[v].append(u)\n\n    queue = [(1, 0)]\n    visited = [False] * (n + 1)\n    farthest = 0\n\n    while queue:\n        vertex, distance = queue.pop(0)\n        if visited[vertex]:\n            continue\n        visited[vertex] = True\n        farthest = max(farthest, distance)\n        for neighbor in tree[vertex]:\n            if not visited[neighbor]:\n                queue.append((neighbor, distance + 1))\n\n    return str(max(0, farthest - 1))\n\ndef",
        "test": "assert solution(\"\"\"7",
        "num_ids": 1112,
        "indeed": false
    },
    {
        "number": 4509,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible(num: int, n: int) -> bool:\n        return num % n == 0\n\n    def find_kth_not_divisible(n: int, k: int) -> int:\n        num = n\n        count = 0\n        while count < k:\n            if not is_divisible(num, n):\n                count += 1\n            num += 1\n        return num - 1\n\n    cases = list(map(int, stdin.split()))\n    result = []\n    for i in range(1, len(cases), 2):\n        n, k = cases[i], cases[i + 1]\n        result.append(find_kth_not_divisible(n, k))\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"4 12\") == \"15\"",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 4510,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    messages = list(map(int, stdin.readline().split()))\n    \n    conversations = []\n    for message in messages:\n        if message in conversations:\n            continue\n        elif len(conversations) < k:\n            conversations.append(message)\n        else:\n            conversations.pop(k-1)\n            conversations.insert(0, message)\n    \n    output = [str(len(conversations))] + list(map(str, conversations))\n    return '\\n'.join(output)",
        "test": "assert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"",
        "num_ids": 828,
        "indeed": false
    },
    {
        "number": 4511,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    total_damage = 0\n\n    for i in range(1, n + 1):\n        current_cards = list(map(int, lines[i].split()))\n        k = current_cards[0]\n        cards = current_cards[1:]\n        cards.sort(key=lambda x: x[1], reverse=True)\n        damage = 0\n        for j in range(0, k, 3):\n            if j + 1 < k and j + 2 < k:\n                damage += cards[j][1] + cards[j + 1][1] + cards[j + 2][1]\n                if (j + 3) % 10 == 0:\n                    damage += cards[j + 3][1] * 2\n                else:\n                    damage += cards[j + 3][1]\n            elif j + 1 < k:\n                damage += cards[j][1] + cards[j + 1][1]\n                if (j + 2) % 10 == 0:\n                    damage += cards[j + 2][1] * 2\n            else:\n                damage += cards[j][1]\n                if (j + 1) % 10 == 0:\n                    damage += cards[j + 1][1] * 2\n        total_damage += damage\n\n    return str(total_damage)",
        "test": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 4512,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    s = lines[0]\n    q = int(lines[1])\n    result = []\n\n    for i in range(2, 2 + q):\n        query = lines[i].split()\n        if query[0] == '1':\n            pos = int(query[1])\n            c = query[2]\n            s = s[:pos - 1] + c + s[pos:]\n        else:\n            l, r = int(query[1]), int(query[2])\n            sub_s = s[l - 1:r]\n            distinct_chars = set(sub_s)\n            result.append(len(distinct_chars))\n\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"abacaba\\n5\\n2 1 4\\n1 4 b\\n1 5 b\\n2 4 6\\n2 1 7\") == \"3\\n1\\n2\"",
        "num_ids": 1098,
        "indeed": true
    },
    {
        "number": 4513,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    board = []\n    for line in lines:\n        row = []\n        for char in line:\n            row.append(int(char))\n        board.append(row)\n\n    def is_anti_sudoku(board):\n        for i in range(9):\n            row_set = set()\n            col_set = set()\n            box_set = set()\n            for j in range(9):\n                if board[i][j] in row_set or board[j][i] in col_set:\n                    return False\n                row_set.add(board[i][j])\n                col_set.add(board[j][i])\n\n                box_x = i // 3 * 3 + j // 3\n                box_y = i % 3 * 3 + j % 3\n                if board[box_x][box_y] in box_set:\n                    return False\n                box_set.add(board[box_x][box_y])\n        return True\n\n    def find_empty_cell(board):\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] == 0:\n                    return (i, j)\n        return None\n\n    def solve(board):\n        empty_cell = find_empty_cell(board)\n        if not empty_cell:\n            return board\n\n        row, col = empty_cell\n        for num in range(1, 10):\n            board[row][col] = num\n            if is_anti_sudoku(board):\n                solve(board)\n                if find_empty_cell(board):\n                    board[row][col] = 0\n                else:\n                    return board\n        board[row][col] = 0\n\n    solve(board)\n    return \"\\n\".join([\"\".join(map(str, row)) for row in board])",
        "test": "assert solution(\"\"\"1",
        "num_ids": 1249,
        "indeed": false
    },
    {
        "number": 4514,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(u: int, k: int) -> int:\n        nonlocal visited, order\n        visited[u] = True\n        if k == 1:\n            order.append(u)\n        else:\n            for v in subordinates[u]:\n                if not visited[v]:\n                    dfs(v, k - 1)\n        return order[-1] if k <= len(order) else -1\n\n    def build_tree(parent: List[int]) -> None:\n        for i in range(2, n + 1):\n            subordinates[parent[i - 1]].append(i)\n\n    def process_queries() -> List[int]:\n        result = []\n        for u, k in queries:\n            result.append(dfs(u, k))\n        return result\n\n    input_data = list(map(int, stdin.split()))\n    n, q = input_data[0], input_data[1]\n    parent = input_data[2:n + 1]\n    visited = [False] * (n + 1)\n    subordinates = defaultdict(list)\n    order = []\n\n    build_tree(parent)\n\n    queries = []\n    for i in range(q):\n        u, k = input_data[n + 1 + i * 2], input_data[n + 2 + i * 2]\n        queries.append((u, k))\n\n    result = process_queries()\n    return '\\n'.join(map(str, result)) + '\\n' ",
        "test": "assert solution(\"\"\"",
        "num_ids": 953,
        "indeed": false
    },
    {
        "number": 4515,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n', 1)[0])\n    test_cases = list(map(lambda x: list(map(int, x.split())), stdin.split('\\n')[1:]))\n\n    for test_case in test_cases:\n        a, b, c, n = test_case\n        if n == 0 or (a + b + c) % n != 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n",
        "test": "assert solution(\"5\\n5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\\nYES\\nNO\\nNO\\nYES\" ",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 4516,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n\n    def pos(p, val):\n        return p.index(val)\n\n    def f(p):\n        return sum(abs(pos(p, x[i]) - pos(p, x[i + 1])) for i in range(m - 1))\n\n    result = [f(list(range(i, n)) + list(range(i))) for i in range(n)]\n\n    return \" \".join(map(str, result))",
        "test": "assert solution(\"5 5\\n2 1 5 3 5\\n\") == \"9 8 12 6 8\"",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 4517,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(query: List[int]) -> bool:\n        seen = {1}\n        stack = [(1, 0)]\n        while stack:\n            node, depth = stack.pop()\n            for child in graph[node]:\n                if child not in seen:\n                    seen.add(child)\n                    stack.append((child, depth + 1))\n            if node in query and depth > 0:\n                return True\n        return False\n\n    stdin_list = stdin.split('\\n')\n    n, m = map(int, stdin_list[0].split())\n    graph = defaultdict(set)\n    for i in range(1, n - 1):\n        u, v = map(int, stdin_list[i].split())\n        graph[u].add(v)\n        graph[v].add(u)\n\n    result = []\n    for i in range(n - 1, n - 1 + m):\n        query = list(map(int, stdin_list[i].split()[1:]))\n        if is_valid(query):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return '\\n'.join(result) ",
        "test": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\\n\" ",
        "num_ids": 1487,
        "indeed": false
    },
    {
        "number": 4518,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_connected(a, b, visited):\n        if a == b:\n            return False\n        if a not in visited:\n            visited.add(a)\n            if b in graph[a]:\n                return True\n            for neighbor in graph[a]:\n                if is_connected(neighbor, b, visited):\n                    return True\n        return False\n\n    def dfs(u, visited, stack):\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                dfs(v, visited, stack)\n        stack.append(u)\n\n    def topological_sort(graph):\n        visited = [False] * n\n        stack = []\n        for i in range(n):\n            if not visited[i]:\n                dfs(i, visited, stack)\n        result = []\n        while stack:\n            result.append(stack.pop())\n        return result[::-1]\n\n    test_cases = int(stdin.readline().strip())\n    result = []\n    for _ in range(test_cases):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        graph = {i: set() for i in range(n)}\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if a[i] != a[j]:\n                    graph[i].add(j)\n                    graph[j].add(i)\n        sorted_nodes = topological_sort(graph)\n        roads = []\n        visited = set()\n        for node in sorted_nodes:\n            if node not in visited:\n                for neighbor in graph[node]:\n                    if neighbor not in visited and is_connected(neighbor, node, set()):\n                        roads.append((node + 1, neighbor + 1))\n                        visited.add(node)\n                        visited.add(neighbor)\n        if len(roads) == n - 1:\n            result.append(\"YES\")\n            for road in roads:\n                result.append(f\"{road[0]} {road[1]}\")\n        else:\n            result.append(\"NO\")\n    return \"\\n\".join(result)",
        "test": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\\nYES\\n1 2\\n2 3\\n3 4\\nYES\\n1 2\\n1 3\\n1 4\" ",
        "num_ids": 1533,
        "indeed": false
    },
    {
        "number": 4519,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n_tests = int(stdin.split('\\n')[0])\n    tests = stdin.split('\\n')[1:]\n    results = []\n\n    for i in range(n_tests):\n        n, k = map(int, tests[i*2].split())\n        s = tests[i*2 + 1]\n\n        s_list = list(s)\n\n        if n == 1:\n            results.append(s)\n            continue\n\n        moves_left = k\n        sorted_s = ''.join(sorted(s_list))\n\n        if s == sorted_s:\n            results.append(s)\n            continue\n\n        for i in range(n - 1):\n            if s_list[i] > s_list[i + 1]:\n                s_list[i], s_list[i + 1] = s_list[i + 1], s_list[i]\n                moves_left -= 1\n\n            if moves_left == 0:\n                break\n\n        if moves_left > 0 and n % 2 == 0:\n            s_list[n - 1], s_list[n - 2] = s_list[n - 2], s_list[n - 1]\n\n        results.append(''.join(s_list))\n\n    return '\\n'.join(results)",
        "test": "assert solution(\"3\\n8 5\\n11011010\\n7 9\\n1111100\\n7 11\\n1111100\\n\") == \"01011110\\n0101111\\n0011111\"",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 4520,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def is_bad_point(point):\n        if point not in points:\n            return False\n        return points[point] > k\n\n    def remove_segment(segment_index):\n        l, r = segments[segment_index]\n        for point in range(l, r + 1):\n            if point in points:\n                points[point] -= 1\n            else:\n                points[point] = k - 1\n\n    def find_removable_segments():\n        removable_segments = []\n        for i, segment in enumerate(segments):\n            l, r = segment\n            if any(is_bad_point(point) for point in range(l, r + 1)):\n                removable_segments.append(i)\n        return removable_segments\n\n    lines = stdin.split('\\n')\n    n, k = map(int, lines[0].split())\n    segments = [tuple(map(int, line.split())) for line in lines[1:n + 1]]\n    segments.sort(key=lambda x: x[1] - x[0])\n\n    points = {}\n    for segment in segments:\n        l, r = segment\n        for point in range(l, r + 1):\n            if point in points:\n                points[point] += 1\n            else:\n                points[point] = 1\n\n    m = 0\n    removed_segments = []\n    while any(is_bad_point(point) for point in points):\n        removable_segments = find_removable_segments()\n        if not removable_segments:\n            break\n        remove_segment(removable_segments[0])\n        removed_segments.append(removable_segments[0])\n        m += 1\n\n    return f'{m}\\n{\" \".join(map(str, removed_segments))}\\n'",
        "test": "assert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 2 4\\n\"",
        "num_ids": 1572,
        "indeed": false
    },
    {
        "number": 4521,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    x = list(map(int, stdin.split('\\n')[1].split()))\n    v = list(map(int, stdin.split('\\n')[2].split()))\n\n    total_distance = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            min_distance = float('inf')\n            for t in range(n):\n                distance = abs(x[i] + t * v[i] - (x[j] + t * v[j]))\n                min_distance = min(min_distance, distance)\n            total_distance += min_distance\n\n    return str(total_distance)",
        "test": "assert solution(\"3\\n1 3 2\\n-100 2 3\\n\") == \"3\"",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 4522,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.readline().split())\n    edges = []\n    for i in range(n - 1):\n        u, v, w = map(int, stdin.readline().split())\n        edges.append((u, v, w))\n    queries = list(map(int, stdin.readline().split()))\n\n    # Build the tree\n    tree = [[] for _ in range(n)]\n    for u, v, w in edges:\n        tree[u].append((v, w))\n        tree[v].append((u, w))\n\n    # Calculate the answers for the queries\n    answers = []\n    for q in queries:\n        answer = 0\n        for u in range(1, n):\n            for v in range(u + 1, n):\n                path_weight = find_max_weight_path(tree, u, v)\n                if path_weight <= q:\n                    answer += 1\n        answers.append(answer)\n\n    return \" \".join(map(str, answers))\n\ndef",
        "test": "assert solution(\"\"\"7 5",
        "num_ids": 1271,
        "indeed": false
    },
    {
        "number": 4523,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n', 1)[0])\n    for _ in range(t):\n        a = list(map(int, stdin.split('\\n', 2)[1].split()))\n        a.sort()\n        if len(a) == 1:\n            print(\"YES\")\n        else:\n            flag = True\n            for i in range(len(a) - 1):\n                if abs(a[i] - a[i + 1]) > 1:\n                    flag = False\n                    break\n            if flag:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        stdin = stdin.split('\\n', 2)[2]",
        "test": "assert solution(\"5\\n3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\") == \"YES\\nYES\\nNO\\nNO\\nYES\" ",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 4524,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    a = int(stdin.split('\\n')[1], 2)\n    b = int(stdin.split('\\n')[2], 2)\n\n    answer = 0\n    MOD = 998244353\n\n    while b > 0:\n        answer = (answer + (a & b)) % MOD\n        b >>= 1\n\n    return str(answer)",
        "test": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 4525,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(arr: List[int]) -> bool:\n        for i in range(len(arr)):\n            if i < len(arr) // 2:\n                if arr[i] % 2 != 0:\n                    return False\n            else:\n                if arr[i] % 2 == 0:\n                    return False\n        return True\n\n    def generate_answer(n: int) -> List[int]:\n        answer = []\n        for i in range(1, n // 2 + 1, 2):\n            answer.append(i)\n        for i in range(n // 2 + 1, n + 1):\n            answer.append(i)\n        return answer\n\n    t = int(stdin.split('\\n')[0])\n    test_cases = [int(n) for n in stdin.split('\\n')[1:]]\n    result = []\n\n    for n in test_cases:\n        if n % 2 != 0:\n            result.append(\"NO\")\n        else:\n            answer = generate_answer(n)\n            if is_valid(answer):\n                result.append(\"YES\")\n                result.append(\" \".join(str(x) for x in answer))\n            else:\n                result.append(\"NO\")\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"5\\n2\\n4\\n6\\n8\\n10\") == \"NO\\nYES\\n2 4 1 5\\nNO\\nYES\\n2 4 6 8 1 3 5 11\\nNO\"",
        "num_ids": 1091,
        "indeed": false
    },
    {
        "number": 4526,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_special(a: List[int], l: int, r: int) -> bool:\n        if r - l < 2:\n            return False\n        total = sum(a[l:r + 1])\n        if total % 2 == 1:\n            return False\n        target = total // 2\n        dp = [False] * (target + 1)\n        dp[0] = True\n        for x in a[l:r + 1]:\n            for i in range(target, x - 1, -1):\n                dp[i] |= dp[i - x]\n            if dp[target]:\n                return True\n        return False\n\n    t = int(stdin.split('\\n', 1)[0])\n    output = []\n    for _ in range(t):\n        n = int(stdin.split('\\n', 1)[0])\n        a = list(map(int, stdin.split('\\n', 1)[-1].split()))\n        stdin = stdin.split('\\n', 1)[1]\n        count = sum(is_special(a, i, j) for i in range(n) for j in range(i, n))\n        output.append(str(count))\n    return '\\n'.join(output)",
        "test": "assert solution(\"5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\\n8\\n8 7 6 5 4 3 2 1\\n1\\n1\") == \"5\\n1\\n0\\n4\\n0\" ",
        "num_ids": 1001,
        "indeed": false
    },
    {
        "number": 4527,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_intersecting(segment1, segment2):\n        return not (segment1[1] < segment2[0] or segment1[0] > segment2[1])\n\n    def is_inside(segment1, segment2):\n        return segment2[0] <= segment1[0] and segment1[1] <= segment2[1]\n\n    t = int(stdin.readline())\n    output = []\n\n    for _ in range(t):\n        n = int(stdin.readline())\n        segments = []\n\n        for _ in range(n):\n            l, r = map(int, stdin.readline().split())\n            segments.append((l, r))\n\n        subset = set()\n        max_size = 0\n\n        for i in range(n):\n            subset.add(i)\n            current_subset = set(subset)\n\n            for j in range(i + 1, n):\n                if not is_intersecting(segments[i], segments[j]) and not any(is_inside(segments[j], segments[k]) for k in current_subset if k != i):\n                    current_subset.add(j)\n\n            if len(current_subset) > max_size:\n                max_size = len(current_subset)\n\n            subset = current_subset\n\n        output.append(str(max_size))\n\n    return \"\\n\".join(output)",
        "test": "assert solution(\"4\\n4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == \"3\\n4\\n2\\n7\\n\" ",
        "num_ids": 1430,
        "indeed": false
    },
    {
        "number": 4528,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    test_cases = stdin.split('\\n')[1:]\n    \n    def minutes_remaining(h, m):\n        return 60 * (23 - h) + (60 - m) if h != 23 else (60 - m)\n    \n    result = []\n    for i in range(t):\n        h, m = map(int, test_cases[i].split())\n        result.append(minutes_remaining(h, m))\n    \n    return '\\n'.join(map(str, result))\n",
        "test": "assert solution(\"5\\n23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 4529,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def process_path(path: str) -> tuple:\n        x, y = 0, 0\n        end_x, end_y = 0, 0\n\n        for char in path:\n            if char == \"L\":\n                x -= 1\n            elif char == \"R\":\n                x += 1\n            elif char == \"U\":\n                y += 1\n            else:\n                y -= 1\n\n            end_x, end_y = x, y\n\n        return end_x, end_y\n\n    def find_best_subsequence(path: str) -> tuple:\n        start, end = 0, len(path)\n        best_start, best_end, best_length = 0, 0, float(\"inf\")\n\n        while start < end:\n            while end - start + 1 < len(path) and process_path(path[start:end + 1]) == process_path(path):\n                end += 1\n\n            while start < end and process_path(path[:start] + path[end:]) == process_path(path):\n                start += 1\n\n            if end - start + 1 < best_length:\n                best_length = end - start + 1\n                best_start = start\n                best_end = end - 1\n\n            start += 1\n            end += 1\n\n        return best_start, best_end\n\n    t = int(stdin.readline().strip())\n    output = []\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        path = stdin.readline().strip()\n\n        start, end = find_best_subsequence(path)\n\n        if start == 0 and end == n - 1:\n            output.append(\"-1\")\n        else:\n            output.append(\"{} {}\".format(start + 1, end + 1))\n\n    return \"\\n\".join(output)",
        "test": "assert solution(\"4\\n4\\nLRUD\\n4\\nLURD\\n5\\nRRUDU\\n5\\nLLDDR\") == \"1 2\\n1 4\\n3 4\\n-1\" ",
        "num_ids": 1440,
        "indeed": false
    },
    {
        "number": 4530,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_size(n: int, skills: list[int]) -> int:\n        skills = sorted(list(set(skills)))\n        if len(skills) == 0:\n            return 0\n        if len(skills) == 1:\n            return n // 2\n        unique_skills = [skill for skill in skills if skills.count(skill) == 1]\n        same_skills = [skill for skill in skills if skills.count(skill) > 1]\n        x = min(len(unique_skills), len(same_skills))\n        for i in range(x, 0, -1):\n            if i <= len(unique_skills) and i <= len(same_skills):\n                return i\n        return 0\n\n    t = int(stdin.split('\\n')[0])\n    lines = stdin.split('\\n')[1:]\n    result = []\n    for i in range(t):\n        n = int(lines[i * 2])\n        a = list(map(int, lines[i * 2 + 1].split()))\n        result.append(find_max_size(n, a))\n    return '\\n'.join(map(str, result))\n",
        "test": "assert solution(\"4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == \"3\\n1\\n0\\n2\" ",
        "num_ids": 1091,
        "indeed": false
    },
    {
        "number": 4531,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(v, p):\n        for u in tree[v]:\n            if u != p:\n                dfs(u, v)\n                sz[v] += sz[u]\n\n    def dist(u, v):\n        d = 0\n        while u != v:\n            d += 1\n            u, v = parent[u], parent[v]\n        return d\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    tree = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().strip().split())\n        u, v = u - 1, v - 1\n        tree[u].append(v)\n        tree[v].append(u)\n\n    parent = [0] * n\n    sz = [1] * n\n    dfs(0, -1)\n\n    max_cost = 0\n    for i in range(n):\n        cost = sum(dist(j, i) * a[j] for j in range(n))\n        max_cost = max(max_cost, cost)\n\n    return str(max_cost)",
        "test": "assert solution(\"\"\"8",
        "num_ids": 787,
        "indeed": false
    },
    {
        "number": 4532,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible(arr, k):\n        for num in arr:\n            if num % k != 0:\n                return False\n        return True\n\n    def min_moves(a, n, k, x):\n        a.sort()\n        moves = 0\n        i = 0\n\n        while i < n and a[i] % k == 0:\n            i += 1\n\n        while i < n:\n            if a[i] + x <= a[0] + k - 1:\n                moves += 1\n                a[i] += x\n                x += 1\n                i = 0\n                a.sort()\n            else:\n                return -1\n\n            while i < n and a[i] % k == 0:\n                i += 1\n\n        return moves\n\n    t = int(stdin.readline())\n    result = []\n\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n\n        if is_divisible(a, k):\n            result.append(0)\n        else:\n            moves = min_moves(a, n, k, 0)\n            if moves == -1:\n                result.append(\"IMPOSSIBLE\")\n            else:\n                result.append(moves)\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"5\\n4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8\\n1 2 3 4 5 6 7 8\") == \"6\\n18\\n0\\n227\\n8\" ",
        "num_ids": 1310,
        "indeed": false
    },
    {
        "number": 4533,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    lines = stdin.splitlines()\n    children = list(map(int, lines[0].split()))\n    cookies = list(map(int, lines[1].split()))\n\n    # Sort the cookies and children\n    cookies.sort()\n    children.sort()\n\n    # Initialize the number of content children\n    content_children = 0\n\n    # Iterate through the children and cookies\n    i = 0\n    j = 0\n    while i < len(children) and j < len(cookies):\n        if cookies[j] >= children[i]:\n            content_children += 1\n            i += 1\n            j += 1\n        else:\n            j += 1\n\n    return str(content_children)",
        "test": "assert solution([1, 2], [1, 2, 3]) == 2",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 4534,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 0 or k > 33:\n        return \"Invalid input\"\n    \n    def calculate_pascal_row(n):\n        row = [1]\n        for i in range(1, n + 1):\n            prev = row[0]\n            for j in range(1, i):\n                curr = row[j]\n                row[j] = prev + curr\n                prev = curr\n            row.append(1)\n        return row\n    \n    row = calculate_pascal_row(k)\n    return str(row)",
        "test": "assert solution(1) == [1, 1]",
        "num_ids": 564,
        "indeed": false
    },
    {
        "number": 4535,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to an integer and count the number of '1' bits\n    num = int(stdin, 2)\n    count = bin(num).count('1')\n    \n    return str(count)",
        "test": "assert solution(\"00000000000000000000000000001011\") == \"3\"",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 4536,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    digits = list(map(int, stdin.strip().split()))\n    carry = 1\n    for i in range(len(digits) - 1, -1, -1):\n        digit = digits[i] + carry\n        carry = digit // 10\n        digits[i] = digit % 10\n    if carry:\n        digits.insert(0, carry)\n    return ' '.join(map(str, digits))",
        "test": "assert solution([4,3,2,1]) == [4,3,2,2]",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 4537,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    values = [A + B, A - B, A * B]\n    largest_value = max(values)\n    return str(largest_value)",
        "test": "assert solution(\"3 1\") == \"4\"",
        "num_ids": 256,
        "indeed": true
    },
    {
        "number": 4538,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, D = map(int, lines[0].split())\n    X, Y = [], []\n    for i in range(1, N+1):\n        x, y = map(int, lines[i].split())\n        X.append(x)\n        Y.append(y)\n\n    count = 0\n    for i in range(N):\n        if (X[i]**2 + Y[i]**2)**0.5 <= D:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"",
        "num_ids": 558,
        "indeed": true
    },
    {
        "number": 4539,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(n))\n    \n    if n % digits_sum == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"12\") == \"Yes\"",
        "num_ids": 267,
        "indeed": true
    },
    {
        "number": 4540,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, A = int(stdin.split(\"\\n\")[0]), list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    def distance(a, b):\n        return abs(a - b)\n    \n    def total_cost(i):\n        cost = distance(0, A[0])\n        for j in range(1, i):\n            cost += distance(A[j - 1], A[j])\n        for j in range(i, N - 1):\n            cost += distance(A[j], A[j + 1])\n        cost += distance(A[-1], 0)\n        return cost\n    \n    result = [total_cost(i) for i in range(1, N)]\n    return \"\\n\".join(list(map(str, result)))",
        "test": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 4541,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if stdin in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'",
        "test": "assert solution(\"a\") == \"vowel\"",
        "num_ids": 216,
        "indeed": true
    },
    {
        "number": 4542,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.strip()\n    n = len(board)\n    num_black = board.count('B')\n    num_white = n - num_black\n\n    if num_black == n or num_white == n:\n        return 0\n\n    if num_black == num_white:\n        return 1\n    else:\n        return 2",
        "test": "assert solution(\"WWWBBB\") == 1",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 4543,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    concatenation = int(str(a) + str(b))\n    root = int(concatenation ** 0.5)\n    return \"Yes\" if root * root == concatenation else \"No\"",
        "test": "assert solution(\"1 21\") == \"Yes\"",
        "num_ids": 290,
        "indeed": true
    },
    {
        "number": 4544,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, a.split()))\n\n    a.sort()\n    freq = [0] * 100000\n\n    for i in range(n):\n        freq[a[i]] += 1\n\n    for i in range(1, len(freq)):\n        freq[i] += freq[i - 1]\n\n    max_count = 0\n    for i in range(len(freq)):\n        count = freq[i]\n        if count > max_count:\n            max_count = count\n            X = i\n\n    return str(max_count)",
        "test": "assert solution(\"5\\n1 2 3 4 5\") == \"5\"",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 4545,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    total_squares = N * N\n    black_squares = total_squares - A\n    return str(black_squares)",
        "test": "assert solution(\"3\\n4\") == \"5\"",
        "num_ids": 258,
        "indeed": true
    },
    {
        "number": 4546,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b - a == c - b:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"2 4 6\") == \"YES\"",
        "num_ids": 222,
        "indeed": true
    },
    {
        "number": 4547,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if '9' in str(N):\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution('38') == 'No', 'The one\\'s digit is not 9'",
        "num_ids": 232,
        "indeed": true
    },
    {
        "number": 4548,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, A = map(int, stdin.split())\n    A = list(map(int, stdin.split()))[3:]\n    cost = 0\n    \n    if X < N:\n        for i in range(len(A)):\n            if A[i] < X:\n                continue\n            else:\n                cost += (A[i] - X)\n                X = A[i]\n                break\n        cost += (N - X)\n    else:\n        for i in range(len(A)):\n            if A[i] > X:\n                continue\n            else:\n                cost += (X - A[i])\n                X = A[i]\n                break\n        cost += (X)\n    \n    return str(cost)",
        "test": "assert solution(\"100 100 50\\n1 2 3 ... 10 20 30 ... 100\") == \"49\\n\" # Sample worst-case input",
        "num_ids": 955,
        "indeed": false
    },
    {
        "number": 4549,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    H, W = map(int, lines[0].split())\n    grid = [list(line) for line in lines[1:]]\n    can_paint = False\n\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                can_paint = True\n                break\n        if can_paint:\n            break\n\n    if not can_paint:\n        return \"No\"\n\n    def dfs(i: int, j: int, visited: set) -> bool:\n        if (i, j) in visited:\n            return True\n        if not (0 <= i < H and 0 <= j < W and grid[i][j] == '#'):\n            return False\n        visited.add((i, j))\n        for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            if dfs(i + di, j + dj, visited):\n                return True\n        return False\n\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#' and not dfs(i, j, set()):\n                return \"No\"\n\n    return \"Yes\"\n",
        "test": "assert solution(\"4 4\\n#..#\\n####\\n..#.\\n#..#\") == \"No\"",
        "num_ids": 1061,
        "indeed": true
    },
    {
        "number": 4550,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    total_candies = a + b + c\n    \n    if total_candies % 2 == 0 and a + b == c:\n        return \"Yes\"\n    elif total_candies % 2 == 0 and a + c == b:\n        return \"Yes\"\n    elif total_candies % 2 == 0 and b + c == a:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"10 30 20\") == \"Yes\"",
        "num_ids": 347,
        "indeed": true
    },
    {
        "number": 4551,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    L = A + B\n    R = C + D\n    \n    if L > R:\n        return \"Left\"\n    elif L < R:\n        return \"Right\"\n    else:\n        return \"Balanced\"",
        "test": "assert solution(\"3 8 7 1\") == \"Left\"",
        "num_ids": 347,
        "indeed": true
    },
    {
        "number": 4552,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(shop_open: List[List[int]], day: int, period: int) -> bool:\n        for i in range(1, N + 1):\n            if shop_open[i - 1][day - 1] == 1 and F[i - 1][day - 1][period - 1] == 0:\n                return False\n        return True\n\n    def dfs(shop_open: List[List[int]], day: int, period: int, profit: int) -> int:\n        if day > 5:\n            return profit\n        if period > 2:\n            return dfs(shop_open, day + 1, 1, profit)\n\n        if not is_valid(shop_open, day, period):\n            return float('-inf')\n\n        shop_open[N][day - 1] = period\n        if period == 1:\n            return max(dfs(shop_open[:], day, period + 1, profit + P[N - 1][period - 1]),\n                       dfs(shop_open, day, period + 1, profit))\n        else:\n            return max(dfs(shop_open[:], day, period + 1, profit + P[N - 1][period - 1]),\n                       dfs(shop_open, day, 1, profit))\n\n    N, F, P = parse_input(stdin)\n    F = [[F[i][j * 2 + k] for k in range(2)] for i in range(N) for j in range(5)]\n    P = [P[i][j] for i in range(N) for j in range(10)]\n\n    shop_open = [[0] * 5 for _ in range(N)]\n    profit = 0\n\n    return str(dfs(shop_open, 1, 1, profit))\n\ndef",
        "test": "assert solution(\"\"\"1",
        "num_ids": 1189,
        "indeed": false
    },
    {
        "number": 4553,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, S = stdin.split()\n    A = int(A)\n    B = int(B)\n\n    if len(S) == A + B + 1 and S[A] == '-' and S.replace('-', '').isdigit():\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(\"3 4\\n269-6650\") == \"Yes\" # Sample Input 1",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 4554,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    return str(min(abs(a - b), abs(a + W - b), abs(a - b - W)))",
        "test": "assert solution(\"3 2 6\") == \"1\"",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 4555,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    result = []\n    small_nums = sorted(range(A, B + 1))[:K]\n    large_nums = sorted(range(A, B + 1), reverse=True)[:K]\n\n    for num in range(A, B + 1):\n        if num in small_nums or num in large_nums:\n            result.append(num)\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"",
        "num_ids": 495,
        "indeed": true
    },
    {
        "number": 4556,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[1]\n    x = s[0].upper()\n    return f\"A{x}C\"",
        "test": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"",
        "num_ids": 200,
        "indeed": true
    },
    {
        "number": 4557,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = list(map(int, stdin.split()))\n    \n    if A + X <= B:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"1 100 1\") == \"YES\"",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 4558,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    return str(X - t)",
        "test": "assert solution(\"100 17\") == \"83\"",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 4559,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    result = 1\n    for x in a:\n        result *= x\n        if result > 10**18:\n            return -1\n    return str(result)",
        "test": "assert solution(\"2\\n1000000000 1000000000\") == \"1000000000000000000\" ",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 4560,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    \n    # Check if N is a multiple of 1 or 500\n    if n % 1 != 0 and n % 500 != 0:\n        return \"No\"\n    \n    # Check if N can be formed using only A 1-yen coins\n    if n <= a:\n        return \"Yes\"\n    \n    # Check if N can be formed using a combination of 1-yen and 500-yen coins\n    if n % 500 <= a:\n        return \"Yes\"\n    \n    return \"No\"",
        "test": "assert solution(\"1000000\\n1000000\") == \"Yes\"",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 4561,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    \n    if B <= X:\n        return \"delicious\"\n    elif B <= X + A:\n        return \"safe\"\n    else:\n        return \"dangerous\"",
        "test": "assert solution(\"4 3 6\") == \"safe\"",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 4562,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for i in range(int(n**0.5), 0, -1):\n        if i*i <= n:\n            return str(i*i)",
        "test": "assert solution('10') == '9'",
        "num_ids": 209,
        "indeed": true
    },
    {
        "number": 4563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b, gcd_ab):\n        return (a * b) // gcd_ab\n\n    N = int(stdin.readline().strip())\n    T_list = []\n    A_list = []\n    for i in range(N):\n        T, A = map(int, stdin.readline().strip().split())\n        T_list.append(T)\n        A_list.append(A)\n\n    total_votes = 0\n    for i in range(N):\n        gcd_Ti_Ai = gcd(T_list[i], A_list[i])\n        lcm_Ti_Ai = lcm(T_list[i], A_list[i], gcd_Ti_Ai)\n        total_votes += lcm_Ti_Ai\n\n    return str(total_votes)",
        "test": "assert solution(\"2\\n1 1\\n1 1\") == \"2\"",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 4564,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    if len(set(stdin)) == len(stdin):\n        return \"yes\"\n    else:\n        return \"no\"",
        "test": "assert solution('uncopyrightable') == 'yes'",
        "num_ids": 171,
        "indeed": true
    },
    {
        "number": 4565,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    s = s.replace(\"W\", \"0\")\n    s = s.replace(\"E\", \"1\")\n    s = list(map(int, s))\n    count = 0\n    leader = s[0]\n    count += s.count(1 - leader)\n    return str(count)",
        "test": "assert solution(\"7\\nEEEEWEE\") == \"1\"  # Sample Input 2",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 4566,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    roads = [list(map(int, stdin.split()[2 * i + 2:2 * i + 4])) for i in range(M)]\n\n    city_roads = [0] * (N + 1)\n    for road in roads:\n        city_roads[road[0]] += 1\n        city_roads[road[1]] += 1\n\n    return '\\n'.join(map(str, city_roads[1:]))",
        "test": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"",
        "num_ids": 712,
        "indeed": true
    },
    {
        "number": 4567,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *scores = list(map(int, stdin.split()))\n    max_grade = sum(scores)\n    for score in scores:\n        if score % 10 == 0:\n            max_grade -= score\n    return str(max_grade)",
        "test": "assert solution(\"4\\n1\\n2\\n3\\n4\") == \"6\"",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 4568,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    def count_different_letters(x: str, y: str) -> int:\n        return len(set(x) & set(y))\n\n    max_count = 0\n    for i in range(1, n):\n        x = s[:i]\n        y = s[i:]\n        count = count_different_letters(x, y)\n        max_count = max(max_count, count)\n\n    return str(max_count)",
        "test": "assert solution(8, \"abacdfgh\") == 3",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 4569,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    weather = {\"Sunny\": \"Cloudy\", \"Cloudy\": \"Rainy\", \"Rainy\": \"Sunny\"}\n    return weather[stdin]",
        "test": "assert solution('Sunny') == 'Cloudy'",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 4570,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    plan1 = A * N\n    plan2 = B\n    min_fee = min(plan1, plan2)\n    return str(min_fee)",
        "test": "assert solution(\"7 17 120\") == \"119\"",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 4571,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n\n    p = 1 / 2\n    total_time = 0\n\n    for i in range(1, N - M + 1):\n        total_time += 100 * (1 - p) * (N - M + i)\n        p *= 1 / 2\n\n    total_time += 1900 * M * (1 - p)\n\n    return str(int(total_time))",
        "test": "assert solution(\"5 5\") == 11500",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 4572,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.lower()\n    letters = set('abcdefghijklmnopqrstuvwxyz')\n    \n    for char in s:\n        if char in letters:\n            letters.remove(char)\n    \n    if not letters:\n        return \"None\"\n    \n    return sorted(letters)[0]",
        "test": "assert solution(\"atcoderregularcontest\") == \"b\"",
        "num_ids": 301,
        "indeed": true
    },
    {
        "number": 4573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *X = list(map(int, stdin.split()))\n    X.sort()\n\n    def find_median(l):\n        if l % 2 == 0:\n            return (l // 2) - 1, (l // 2)\n        else:\n            return (l - 1) // 2\n\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i + 1], arr[high] = arr[high], arr[i + 1]\n        return i + 1\n\n    def quick_select(arr, low, high, k):\n        if low == high:\n            return arr[low]\n\n        pivot_index = partition(arr, low, high)\n        if k == pivot_index:\n            return arr[k]\n        elif k < pivot_index:\n            return quick_select(arr, low, pivot_index - 1, k)\n        else:\n            return quick_select(arr, pivot_index + 1, high, k)\n\n    B = []\n    for i in range(N):\n        temp_X = X.copy()\n        temp_X.pop(i)\n        median_index_1, median_index_2 = find_median(len(temp_X))\n        B_i = (quick_select(temp_X, 0, len(temp_X) - 1, median_index_1) + quick_select(temp_X, 0, len(temp_X) - 1, median_index_2)) / 2\n        B.append(B_i)\n\n    return '\\n'.join(str(b) for b in B)",
        "test": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\\n\"",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 4574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    A.sort(reverse=True)\n    max_area = 0\n    for i in range(N-3):\n        for j in range(i+1, N-2):\n            k = bisect_left(A, A[i]+A[j])\n            if k < N:\n                max_area = max(max_area, A[i]*A[j])\n                if k+1 < N:\n                    max_area = max(max_area, A[i]*A[k+1])\n                    if k+2 < N:\n                        max_area = max(max_area, A[j]*A[k+2])\n    return str(max_area)",
        "test": "assert solution(\"4\\n4 5 3 2\") == \"12\"",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 4575,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, d, x = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    total_eaten = 0\n    for i in range(n):\n        total_eaten += sum(j for j in range(1, d, a[i]+1))\n\n    return str(x + total_eaten)",
        "test": "assert solution(\"1\\n2 3\\n1\\n\") == \"4\"",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 4576,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n\n    dp = [[0] * (X // 50 + 1) for _ in range(C + 1)]\n\n    for i in range(1, A + 1):\n        dp[0][(500 * i) // 50] = 1\n\n    for i in range(1, B + 1):\n        for j in range(X // 50 + 1):\n            if j >= (100 * i) // 50:\n                dp[0][j] += dp[0][j - (100 * i) // 50]\n\n    for i in range(1, C + 1):\n        for j in range(X // 50 + 1):\n            for k in range(min(i, j) + 1):\n                if j - (50 * k) >= 0:\n                    dp[i][j] += dp[i - k][j - (50 * k)]\n\n    return str(dp[C][X // 50])",
        "test": "assert solution(\"3\\n2\\n1\\n50\\n\") == \"1\"",
        "num_ids": 1072,
        "indeed": false
    },
    {
        "number": 4577,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    \n    if A <= C <= B:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1 3 2\") == \"Yes\"",
        "num_ids": 223,
        "indeed": true
    },
    {
        "number": 4578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    motos = [int(input()) for _ in range(N)]\n    total_moto = sum(motos)\n    min_moto_per_doughnut = total_moto // N\n    doughnuts = [moto // min_moto_per_doughnut for moto in motos]\n    remaining_moto = X - total_moto\n    while remaining_moto >= min_moto_per_doughnut:\n        for i in range(N):\n            if doughnuts[i] < doughnuts[i - 1]:\n                doughnuts[i] += 1\n                remaining_moto -= min_moto_per_doughnut\n        if remaining_moto < min_moto_per_doughnut:\n            break\n    return str(sum(doughnuts))",
        "test": "assert solution(\"3 1000\\n120\\n100\\n140\") == 9",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 4579,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    items = set()\n    for i in range(1, N + 1):\n        items.add(lines[i])\n    return str(len(items))",
        "test": "assert solution(\"3\\napple\\norange\\napple\\n\") == \"2\"",
        "num_ids": 296,
        "indeed": true
    },
    {
        "number": 4580,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    colors = {\n        \"gray\": 0,\n        \"brown\": 0,\n        \"green\": 0,\n        \"cyan\": 0,\n        \"blue\": 0,\n        \"yellow\": 0,\n        \"orange\": 0,\n        \"red\": 0\n    }\n\n    for rating in a:\n        if rating >= 1 and rating <= 399:\n            colors[\"gray\"] += 1\n        elif rating >= 400 and rating <= 799:\n            colors[\"brown\"] += 1\n        elif rating >= 800 and rating <= 1199:\n            colors[\"green\"] += 1\n        elif rating >= 1200 and rating <= 1599:\n            colors[\"cyan\"] += 1\n        elif rating >= 1600 and rating <= 1999:\n            colors[\"blue\"] += 1\n        elif rating >= 2000 and rating <= 2399:\n            colors[\"yellow\"] += 1\n        elif rating >= 2400 and rating <= 2799:\n            colors[\"orange\"] += 1\n        elif rating >= 2800 and rating <= 3199:\n            colors[\"red\"] += 1\n        elif rating >= 3200:\n            colors[\"red\"] += 1\n\n    min_colors = sum([1 for count in colors.values() if count > 0])\n    max_colors = min_colors + (colors[\"red\"] if colors[\"red\"] > 0 else 0)\n\n    return f\"{min_colors} {max_colors}\"",
        "test": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"",
        "num_ids": 1346,
        "indeed": false
    },
    {
        "number": 4581,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize the price of ramen\n    price = 700\n    # Convert the input string to a list\n    toppings = list(stdin)\n    # Check the presence of each topping and add the price accordingly\n    if toppings[0] == 'o':\n        price += 100\n    if toppings[1] == 'o':\n        price += 100\n    if toppings[2] == 'o':\n        price += 100\n    # Return the price as a string\n    return str(price)",
        "test": "assert solution(\"oxo\") == \"900\"",
        "num_ids": 322,
        "indeed": true
    },
    {
        "number": 4582,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    \n    if a == 'H' and b == 'H':\n        return 'H'\n    elif a == 'H' and b == 'D':\n        return 'D'\n    elif a == 'D' and b == 'H':\n        return 'D'\n    else:\n        return 'H'",
        "test": "assert solution(\"H H\") == \"H\"",
        "num_ids": 309,
        "indeed": true
    },
    {
        "number": 4583,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = stdin\n    for op1 in ['+', '-']:\n        for op2 in ['+', '-']:\n            for op3 in ['+', '-']:\n                if eval(A + op1 + B + op2 + C + op3 + D) == 7:\n                    return f\"{A}{op1}{B}{op2}{C}{op3}{D}=7\"",
        "test": "assert solution(\"1222\") == \"1+2+2+2=7\"",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 4584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    subordinates = [0] * N\n    \n    for i in range(2, N):\n        subordinates[A[i]] += 1\n    \n    return '\\n'.join(map(str, subordinates))",
        "test": "assert solution(\"10\\n3 2 5 6 9 7 8 9 1 9 9\") == \"1\\n2\\n2\\n1\\n0\\n1\\n1\\n0\\n0\\n0\"",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 4585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    time = 0\n    pos = 0\n    while pos < X:\n        time += 1\n        pos += time\n    return str(time)",
        "test": "assert solution(10) == 5, \"Test failed\"",
        "num_ids": 228,
        "indeed": true
    },
    {
        "number": 4586,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = str(n)\n    for i in range(3):\n        if n[i] == n[i+1] == n[i+2]:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert solution('1118') == 'Yes'",
        "num_ids": 291,
        "indeed": true
    },
    {
        "number": 4587,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.strip().split())\n    A.sort()\n    B.sort()\n    C.sort()\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if A[i] < B[j]:\n                for k in range(N):\n                    if B[j] < C[k]:\n                        count += 1\n    return str(count)\n\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nprint(solution(str(N) + ' ' + ' '.join(map(str, A)) + ' ' + ' '.join(map(str, B)) + ' ' + ' '.join(map(str, C)))) ",
        "test": "assert solution(\"3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"5\"",
        "num_ids": 682,
        "indeed": false
    },
    {
        "number": 4588,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x_value = hex_to_decimal(x)\n    y_value = hex_to_decimal(y)\n\n    if x_value < y_value:\n        return \"<\"\n    elif x_value > y_value:\n        return \">\"\n    else:\n        return \"=\"\n\ndef",
        "test": "assert solution(\"C D\") == \"<\"",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 4589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    S = [list(stdin.readline().strip()) for _ in range(H)]\n\n    def count_bombs(i, j):\n        directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n        bombs = 0\n        for di, dj in directions:\n            if 0 <= i + di < H and 0 <= j + dj < W and S[i + di][j + dj] == '#':\n                bombs += 1\n        return bombs\n\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == '.':\n                S[i][j] = str(count_bombs(i, j))\n\n    return '\\n'.join([''.join(row) for row in S])",
        "test": "assert solution(\"4 4\\n....\\n..#.\\n....\\n.#..\") == \"2323\\n2.1.\\n2#32\\n2123\"",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 4590,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Read input values\n    N, M, K = map(int, stdin.split()[0:3])\n    A = list(map(int, stdin.split()[3:3 + N]))\n    B = list(map(int, stdin.split()[3 + N:3 + N + M]))\n\n    # Initialize variables\n    books_read = 0\n    time_elapsed = 0\n    desk_A_index = 0\n    desk_B_index = 0\n\n    # Repeat until time_elapsed exceeds K or no more books on both desks\n    while time_elapsed <= K and (desk_A_index < N or desk_B_index < M):\n        # Choose desk with the next book to read\n        if desk_A_index < N and (desk_B_index >= M or A[desk_A_index] < B[desk_B_index]):\n            time_elapsed += A[desk_A_index]\n            desk_A_index += 1\n        else:\n            time_elapsed += B[desk_B_index]\n            desk_B_index += 1\n\n        # Increment books_read\n        books_read += 1\n\n    # Return the maximum number of books read\n    return str(books_read - 1)\n",
        "test": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"",
        "num_ids": 1001,
        "indeed": false
    },
    {
        "number": 4591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n\n    def min_cost(x, y):\n        return min(x * A + y * B, (x // 2 + y // 2) * C + max(x % 2, y % 2) * A + max(x % 2, y % 2) * B)\n\n    ans = min_cost(X, Y)\n    return str(ans)\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "assert solution(\"1000 2000 2500 1 2\") == 3500",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 4592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    MOD = 10**9 + 7\n    factorial = 1\n    result = 1\n    prime_factors = []\n\n    for i in range(1, n + 1):\n        factorial = (factorial * i) % MOD\n        count = 0\n        while factorial % i == 0:\n            count += 1\n            factorial = (factorial // i) % MOD\n        prime_factors.append(count)\n\n    for count in prime_factors:\n        result = (result * (count + 1)) % MOD\n\n    return str(result)",
        "test": "assert solution(5) == 12",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 4593,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    largest_pp = 1\n    for b in range(2, int(x**0.5) + 1):\n        p = 2\n        while b**p <= x:\n            p += 1\n        largest_pp = max(largest_pp, b**(p-1))\n    return str(largest_pp)",
        "test": "assert solution(\"10\") == \"9\"",
        "num_ids": 352,
        "indeed": true
    },
    {
        "number": 4594,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    input_list = list(map(int, stdin.split()))\n    N = input_list[0]\n    layers = []\n    for i in range(1, N + 1):\n        if i == 1 or input_list[i] < input_list[i - 1]:\n            layers.append(input_list[i])\n        else:\n            break\n    return str(len(layers))",
        "test": "assert solution('1\\n10') == '1'",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 4595,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    start = s.find('A')\n    end = s.rfind('Z')\n    length = end - start + 1\n    return length",
        "test": "assert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == 26",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 4596,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_even(num):\n        return num % 2 == 0\n\n    def can_perform_operation(numbers):\n        return all(is_even(num) for num in numbers)\n\n    def perform_operation(numbers):\n        return [num // 2 for num in numbers]\n\n    def count_operations(numbers):\n        count = 0\n        while can_perform_operation(numbers):\n            numbers = perform_operation(numbers)\n            count += 1\n        return count\n\n    N, *numbers = list(map(int, stdin.split()))\n    return str(count_operations(numbers))\n",
        "test": "assert solution(\"3\\n8 12 40\") == \"2\"",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 4597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    power = 1\n    result = 0\n    for i in range(1, n+1):\n        result += power * i\n        power *= i\n        result %= 10**9 + 7\n        power %= 10**9 + 7\n    return str(result)",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 298,
        "indeed": false
    },
    {
        "number": 4598,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    return str(sum(range(1, N+1)))",
        "test": "assert solution('3') == '6'",
        "num_ids": 189,
        "indeed": true
    },
    {
        "number": 4599,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    alice_score = sum(a[::2])\n    bob_score = sum(a[1::2])\n    return str(alice_score - bob_score)",
        "test": "assert solution(\"2\\n3 1\") == \"2\"",
        "num_ids": 339,
        "indeed": true
    },
    {
        "number": 4600,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M, submissions = parse_input(stdin)\n    correct_answers, penalties = count_correct_answers_and_penalties(N, M, submissions)\n    return f\"{correct_answers} {penalties}\\n\"\n\ndef",
        "test": "assert solution(\"3 4\\n1 AC\\n1 AC\\n2 WA\\n2 WA\\n3 AC\\n\") == \"2 0\"  # Sample Input 2",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 4601,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.readline().split())\n    H = list(map(int, stdin.readline().split()))\n    H.sort(reverse=True)\n\n    special_move_count = 0\n    attack_count = 0\n\n    for i in range(len(H)):\n        if H[i] <= 0:\n            break\n\n        if special_move_count < K:\n            H[i] = 0\n            special_move_count += 1\n        else:\n            H[i] -= 1\n            attack_count += 1\n\n    return str(attack_count)",
        "test": "assert solution(\"4 2\\n3 5 6 9\\n\") == \"8\"",
        "num_ids": 557,
        "indeed": false
    },
    {
        "number": 4602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    N, K = map(int, lines[0].split())\n    x = list(map(int, lines[1].split()))\n\n    # Calculate distance for each case (type-A robot or type-B robot)\n    total_distance_A = 0\n    total_distance_B = 0\n\n    for i in range(1, N + 1):\n        total_distance_A += abs(x[i - 1] - 0) + abs(0 - i)\n        total_distance_B += abs(x[i - 1] - K) + abs(K - i)\n\n    # Compare distances and return minimum value\n    if total_distance_A <= total_distance_B:\n        return str(total_distance_A)\n    else:\n        return str(total_distance_B)",
        "test": "assert solution(\"3\\n5\\n2 4 6\\n\") == \"29\"",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 4603,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    unlimited_train = B\n    unlimited_bus = D\n    ordinary_train = A\n    ordinary_bus = C\n    min_fare = min(unlimited_train + ordinary_bus, unlimited_bus + ordinary_train, unlimited_train + unlimited_bus)\n    return str(min_fare)",
        "test": "assert solution(\"600\\n300\\n220\\n420\") == \"520\"",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 4604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    mod = 10**9 + 7\n    ans = 1\n    factorial = [1] * (n + 1)\n    for i in range(1, n + 1):\n        factorial[i] = (factorial[i - 1] * i) % mod\n\n    for i in range(n):\n        if a[i] == 0:\n            ans = (ans * factorial[n - 1 - i]) % mod\n\n    return str(ans)\n\ndef",
        "test": "assert solution(\"10\\n5 7 3 2 8 4 9 1 6\") == \"84054810\"",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 4605,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total = 0\n    for i in range(1, N + 1):\n        digits_sum = sum(int(digit) for digit in str(i))\n        if A <= digits_sum <= B:\n            total += i\n    return str(total)",
        "test": "assert solution(\"20 2 5\") == \"84\"",
        "num_ids": 511,
        "indeed": true
    },
    {
        "number": 4606,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f\"ABC{n}\"",
        "test": "assert solution(\"100\") == \"ABC100\"",
        "num_ids": 180,
        "indeed": true
    },
    {
        "number": 4607,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    count = 0\n    for i in range(1, a + 1):\n        for j in range(1, b + 1):\n            if i == j:\n                count += 1\n    return str(count)",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 277,
        "indeed": true
    },
    {
        "number": 4608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = list(map(int, stdin.split()))\n    times = 0\n    button = 1\n    visited = set()\n\n    while button != 2:\n        visited.add(button)\n        button = a[button - 1]\n        times += 1\n\n        if times > N or button in visited:\n            return -1\n\n    return times",
        "test": "assert solution(\"3\\n3\\n1\\n2\") == \"2\"",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 4609,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    numbers = [int(x) for x in lines[1:]]\n    written_numbers = set()\n    \n    for i in range(N):\n        if numbers[i] not in written_numbers:\n            written_numbers.add(numbers[i])\n        else:\n            written_numbers.remove(numbers[i])\n    \n    return str(len(written_numbers))",
        "test": "assert solution(\"3\\n6\\n2\\n6\") == \"1\" ",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 4610,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    balls = sorted(map(int, stdin.split()[2:]))\n    min_balls = n\n\n    for i in range(n - k + 1):\n        min_balls = min(min_balls, balls[i + k - 1] - balls[i] + 1)\n\n    return str(min_balls)",
        "test": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\" ",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 4611,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    path = []\n    for i in range(1, N + 1):\n        t, x, y = map(int, lines[i].split())\n        path.append((t, x, y))\n    \n    for i in range(N - 1):\n        if path[i][1] != path[i + 1][1] and path[i][2] != path[i + 1][2]:\n            return 'No'\n    \n    return 'Yes'",
        "test": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 4612,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = (a + b) // 2\n    if (a + b) % 2 != 0:\n        x += 1\n    return str(x)",
        "test": "assert solution(\"1 3\") == \"2\"",
        "num_ids": 259,
        "indeed": true
    },
    {
        "number": 4613,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def find(parents, i):\n        if parents[i] == i:\n            return i\n        return find(parents, parents[i])\n\n    def union(parents, ranks, i, j):\n        i_id = find(parents, i)\n        j_id = find(parents, j)\n\n        if i_id == j_id:\n            return\n\n        if ranks[i_id] < ranks[j_id]:\n            parents[i_id] = j_id\n        elif ranks[i_id] > ranks[j_id]:\n            parents[j_id] = i_id\n        else:\n            parents[j_id] = i_id\n            ranks[i_id] += 1\n\n    N, M = map(int, stdin.readline().strip().split())\n    edges = [tuple(map(int, line.strip().split())) for line in stdin]\n\n    parents = list(range(N + 1))\n    ranks = [0] * (N + 1)\n\n    num_bridges = 0\n\n    for u, v in edges:\n        prev_parents = parents.copy()\n        union(parents, ranks, u, v)\n        curr_parents = parents.copy()\n\n        if prev_parents != curr_parents:\n            num_bridges += 1\n\n    return str(num_bridges)\n\nstdin = '''\n7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\n'''\n\nprint(solution(stdin)) ",
        "test": "assert solution(\"4 2\\n1 2\\n1 3\") == \"1\"",
        "num_ids": 1329,
        "indeed": false
    },
    {
        "number": 4614,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    \n    if A == B:\n        return str(C)\n    elif A == C:\n        return str(B)\n    else:\n        return str(A)",
        "test": "assert solution(\"5 7 5\") == \"7\"",
        "num_ids": 292,
        "indeed": true
    },
    {
        "number": 4615,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n\n    max_sugar_water_mass = min(F, E + 100 * A)\n    max_dissolved_sugar_mass = min(max_sugar_water_mass, E)\n\n    return f\"{max_sugar_water_mass} {max_dissolved_sugar_mass}\"",
        "test": "assert solution(\"1 2 10 20 15 200\") != \"110 11\"",
        "num_ids": 875,
        "indeed": false
    },
    {
        "number": 4616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    first_i = s.find(\"i\")\n    last_n = s.rfind(\"n\")\n    abbreviation = f\"i{last_n - first_i + 1}n\"\n    return abbreviation",
        "test": "assert solution(\"testcase\") == \"t3e\"",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 4617,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    before = [list(line) for line in lines]\n    after = before[::-1]\n    for i in range(len(after)):\n        after[i] = list(after[i])[::-1]\n    if before == after:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"pot\\ntop\") == \"YES\"",
        "num_ids": 394,
        "indeed": true
    },
    {
        "number": 4618,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    k = int(k)\n    substrings = set(s[i:j] for i in range(len(s)) for j in range(i + 1, len(s) + 1))\n    sorted_substrings = sorted(substrings)\n    return sorted_substrings[k - 1]",
        "test": "assert solution(\"aba\\n4\") == \"b\"",
        "num_ids": 362,
        "indeed": true
    },
    {
        "number": 4619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    W, H, N = map(int, stdin.split()[0:3])\n    points = [list(map(int, line.split()[0:2])) for line in stdin.split()[3:]]\n    a = [int(line.split()[-1]) for line in stdin.split()[3:]]\n\n    white_region = set()\n    for x in range(W + 1):\n        for y in range(H + 1):\n            white_region.add((x, y))\n\n    for i in range(N):\n        x, y = points[i]\n        if a[i] == 1:\n            for w in range(x):\n                for h in range(H + 1):\n                    white_region.discard((w, h))\n        elif a[i] == 2:\n            for w in range(x + 1, W + 1):\n                for h in range(H + 1):\n                    white_region.discard((w, h))\n        elif a[i] == 3:\n            for w in range(W + 1):\n                for h in range(y):\n                    white_region.discard((w, h))\n        else:\n            for w in range(W + 1):\n                for h in range(y + 1, H + 1):\n                    white_region.discard((w, h))\n\n    return str(len(white_region))",
        "test": "assert solution(\"100 100 100\\n50 50 1\\n40 40 1\\n30 30 1\\n20 20 1\\n10 10 1\\n1 1 1\\n2 2 1\\n3 3 1\\n4 4 1\\n5 5 1\") == \"5000\"",
        "num_ids": 1395,
        "indeed": false
    },
    {
        "number": 4620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, *C_S_F = list(map(int, stdin.split()))\n    S_i = [C_S_F[i + 1] for i in range(0, len(C_S_F) - 1, 3)]\n    F_i = [C_S_F[i + 2] for i in range(0, len(C_S_F) - 1, 3)]\n    C_i = [C_S_F[i] for i in range(0, len(C_S_F) - 1, 3)]\n\n    result = []\n    for i in range(1, N):\n        t = S_i[i - 1]\n        while t % F_i[i - 1] != 0:\n            t += F_i[i - 1]\n        result.append(t + C_i[i - 1])\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"5\\n10 10 1\\n15 20 2\\n5 30 3\\n20 40 4\\n25 50 5\") == \"60\\n75\\n100\\n125\\n150\"",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 4621,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    image = []\n    for _ in range(H):\n        image.append(list(stdin.readline().strip()))\n\n    extended_image = []\n    for i in range(2 * H):\n        row = []\n        for j in range(W):\n            row.append(image[i // 2][j])\n        extended_image.append(row)\n\n    return '\\n'.join([''.join(row) for row in extended_image])\n",
        "test": "assert solution(\"3 3\\n...\\n***\\n...\") == \".. \\n***\\n***\\n.. \\n...\"  # 2nd test case",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 4622,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, nums = int(stdin.split()[0]), list(map(int, stdin.split()[1:]))\n    if len(set(nums)) == len(nums):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\" # Correct output for given input",
        "num_ids": 343,
        "indeed": true
    },
    {
        "number": 4623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def max_teams(weights: List[int]) -> int:\n        weights.sort()\n        n = len(weights)\n        max_teams = 0\n        for i in range(n):\n            j = i + 1\n            k = n - j\n            while j < n and weights[i] + weights[j] <= weights[-1] * k // n:\n                j += 1\n            max_teams = max(max_teams, j - i)\n        return max_teams\n\n    def parse_input(stdin: str) -> List[List[int]]:\n        lines = stdin.splitlines()\n        test_cases = []\n        for i in range(1, len(lines), 2):\n            n = int(lines[i])\n            weights = list(map(int, lines[i + 1].split()))\n            test_cases.append((n, weights))\n        return test_cases\n\n    test_cases = parse_input(stdin)\n    results = []\n    for n, weights in test_cases:\n        results.append(max_teams(weights))\n\n    return \"\\n\".join(map(str, results))",
        "test": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\\n3\\n4\\n1\\n2\"",
        "num_ids": 1082,
        "indeed": false
    },
    {
        "number": 4624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    if n <= 2:\n        return \"1\"\n    else:\n        floor = 2\n        while n > floor * x + 2:\n            floor += 1\n        return str(floor)\n\nt = int(input())\nfor i in range(t):\n    stdin = input()\n    print(solution(stdin)) ",
        "test": "assert solution(1, 5) == 1",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 4625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        p = list(map(int, stdin.readline().strip().split()))\n\n        presses = [0] * 26\n\n        for i in range(m):\n            for j in range(p[i]):\n                presses[ord(s[j]) - ord('a')] += 1\n            for j in range(p[i], n):\n                presses[ord(s[j]) - ord('a')] += 1\n                presses[ord(s[j - p[i]]) - ord('a')] -= 1\n            for j in range(n - p[i], n):\n                presses[ord(s[j]) - ord('a')] += 1\n\n        presses[ord(s[-1]) - ord('a')] += 1\n\n        result.extend(presses)\n\n    return \"\\n\".join(\" \".join(map(str, row)) for row in result)\n",
        "test": "assert solution(\"4 2\\nabca\\n1 3\\n10 5\\ncodeforces\\n2 8 3 2 9\\n26 10\\nqwertyuioplkjhgfdsazxcvbnm\\n20 10 1 2 3 5 10 5 9 4\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 9 4 5 3 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 0\\n2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"",
        "num_ids": 1698,
        "indeed": false
    },
    {
        "number": 4626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def min_distance(a, b, c):\n        a, b, c = sorted([a, b, c])\n        d1 = abs(a - b) + abs(b - c)\n        d2 = abs(a - c)\n        return min(d1, d2)\n\n    q = int(stdin.readline())\n    output = []\n    for _ in range(q):\n        a, b, c = map(int, stdin.readline().split())\n        output.append(str(min_distance(a, b, c)))\n\n    return \"\\n\".join(output)\n",
        "test": "assert solution(\"8\\n3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\") == \"0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4\" ",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 4627,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_similar(x: int, y: int) -> bool:\n        return (x % 2 == y % 2) or abs(x - y) == 1\n\n    def find_partition(a: List[int]) -> bool:\n        a.sort()\n        n = len(a)\n        for i in range(0, n - 1, 2):\n            if not is_similar(a[i], a[i + 1]):\n                return False\n        return True\n\n    t = int(stdin.split(\"\\n\", 1)[0])\n    lines = stdin.split(\"\\n\", 1)[1].split(\"\\n\")[::2]\n\n    outputs = []\n    for line in lines:\n        n = int(line.split()[0])\n        a = list(map(int, line.split()[1:]))\n        if find_partition(a):\n            outputs.append(\"YES\")\n        else:\n            outputs.append(\"NO\")\n\n    return \"\\n\".join(outputs)",
        "test": "assert solution(\"4\\n11 14 16 12\") == \"YES\"",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 4628,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def find(parent, i):\n        if parent[i] == i:\n            return i\n        return find(parent, parent[i])\n\n    def union(parent, rank, x, y):\n        xroot = find(parent, x)\n        yroot = find(parent, y)\n\n        if xroot == yroot:\n            return False\n\n        if rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n        return True\n\n    def kruskal(n, edges):\n        parent = [i for i in range(n)]\n        rank = [0] * n\n        edges.sort(key=lambda x: x[2])\n        mst_cost = 0\n        mst_edges = []\n\n        for edge in edges:\n            if union(parent, rank, edge[0] - 1, edge[1] - 1):\n                mst_cost += edge[2]\n                mst_edges.append(edge)\n\n        return mst_cost, mst_edges\n\n    def dijkstra(n, start, edges):\n        dist = [float('inf')] * n\n        dist[start - 1] = 0\n        visited = [False] * n\n        queue = [(0, start)]\n\n        while queue:\n            cur_dist, cur_node = heapq.heappop(queue)\n\n            if visited[cur_node - 1]:\n                continue\n\n            visited[cur_node - 1] = True\n\n            for edge in edges:\n                if edge[0] == cur_node and not visited[edge[1] - 1]:\n                    if dist[edge[1] - 1] > dist[cur_node - 1] + edge[2]:\n                        dist[edge[1] - 1] = dist[cur_node - 1] + edge[2]\n                        heapq.heappush(queue, (dist[edge[1] - 1], edge[1]))\n\n        return dist\n\n    def read_input():\n        n, m, k = map(int, input().split())\n        roads = []\n        for _ in range(m):\n            x, y, w = map(int, input().split())\n            roads.append((x, y, w))\n\n        courier_routes = []\n        for _ in range(k):\n            a, b = map(int, input().split())\n            courier_routes.append((a, b))\n\n        return n, m, k, roads, courier_routes\n\n    n, m, k, roads, courier_routes = read_input()\n\n    mst_cost, mst_edges = kruskal(n, roads)\n\n    cheapest_routes = []\n    for route in courier_routes:\n        start, end = route\n        dist = dijkstra(n, start, mst_edges)\n        cheapest_routes.append(dist[end - 1])\n\n    print(sum(cheapest_routes))",
        "test": "assert solution(\"\"\"6 5 2",
        "num_ids": 1735,
        "indeed": false
    },
    {
        "number": 4629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_number(n: int) -> bool:\n        powers = []\n        while n > 0:\n            power_of_3 = 0\n            while n % 3 == 0:\n                power_of_3 += 1\n                n //= 3\n            powers.append(power_of_3)\n        return len(powers) == len(set(powers))\n\n    def find_smallest_good_number(n: int) -> int:\n        while not is_good_number(n):\n            n += 1\n        return n\n\n    queries = list(map(int, stdin.split()))\n    q = queries[0]\n    result = []\n    for i in range(1, len(queries), 1):\n        n = queries[i]\n        result.append(find_smallest_good_number(n))\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"1\\n2\\n6\\n13\\n14\\n3620\\n10000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\"",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 4630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_cycle_length(p: List[int]) -> int:\n        n = len(p)\n        vis = [False] * n\n        for i in range(n):\n            if vis[i]:\n                continue\n            cnt = 1\n            vis[i] = True\n            while not vis[p[i] - 1]:\n                i = p[i] - 1\n                cnt += 1\n                vis[i] = True\n            if cnt != n:\n                return cnt\n        return n\n\n    def find_first_return_days(p: List[int]) -> List[int]:\n        n = len(p)\n        days = [-1] * n\n        for i in range(n):\n            days[i] = (days[i] + 1) % n\n            while days[i] != 0:\n                days[i] = (days[i] + 1) % n\n                days[p[i] - 1] += days[i]\n        return [d + 1 for d in days]\n\n    q = int(stdin.readline().strip())\n    result = []\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        p = list(map(int, stdin.readline().strip().split()))\n        cycle_length = find_cycle_length(p)\n        first_return_days = find_first_return_days(p)\n        result.append([str(first_return_days[i % cycle_length]) for i in range(n)])\n\n    return \"\\n\".join([\" \".join(rd) for rd in result])\n\nstdin = sys.stdin\nsys.stdout.write(solution(stdin)) ",
        "test": "assert solution(\"6\\n5 1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1 \\n3 3 3 \\n2 3 3 2 1 3 \\n1 \\n2 2 2 2 \\n4 4 4 1 4\" ",
        "num_ids": 1382,
        "indeed": false
    },
    {
        "number": 4631,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def find_nearest_tree(tree_positions, human_positions):\n        tree_positions.sort()\n        human_positions.sort()\n        result = []\n        for human_pos in human_positions:\n            left_tree_pos = None\n            right_tree_pos = None\n            for tree_pos in tree_positions:\n                if tree_pos < human_pos:\n                    left_tree_pos = tree_pos\n                else:\n                    right_tree_pos = tree_pos\n                    break\n            if left_tree_pos is None:\n                result.append(human_pos - right_tree_pos)\n            elif right_tree_pos is None:\n                result.append(left_tree_pos - human_pos)\n            else:\n                result.append(min(human_pos - left_tree_pos, right_tree_pos - human_pos))\n        return result\n\n    def min_sum_distance(n, m, tree_positions, human_positions):\n        distances = find_nearest_tree(tree_positions, human_positions)\n        return sum(distances)\n\n    def generate_human_positions(n, m, tree_positions):\n        tree_positions.sort()\n        human_positions = []\n        i = 0\n        for j in range(m):\n            human_pos = tree_positions[i] + j\n            if human_pos not in human_positions:\n                human_positions.append(human_pos)\n            else:\n                k = 1\n                while human_pos + k in human_positions or human_pos - k in human_positions:\n                    k += 1\n                human_positions.append(human_pos + k)\n            i = (i + 1) % n\n        return human_positions\n\n    input_data = list(map(int, stdin.split()))\n    n, m = input_data[0], input_data[1]\n    tree_positions = input_data[2:]\n    human_positions = generate_human_positions(n, m, tree_positions)\n    result = min_sum_distance(n, m, tree_positions, human_positions)\n    output_data = [result] + human_positions\n    return \"\\n\".join(map(str, output_data))",
        "test": "assert solution(\"3 5\\n0 3 1\") == \"7\\n5 -2 4 -1 2\"",
        "num_ids": 1208,
        "indeed": false
    },
    {
        "number": 4632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def bfs(start, goals, moves):\n        queue = [(start, \"\")]\n        visited = set()\n\n        while queue:\n            (x, y), path = queue.pop(0)\n            if (x, y) in goals:\n                return path\n            if (x, y) not in visited:\n                visited.add((x, y))\n                queue.append(((x + 1, y), path + \"R\"))\n                queue.append(((x, y + 1), path + \"U\"))\n\n        return None\n\n    test_cases = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(test_cases):\n        n = int(stdin.readline().strip())\n        packages = []\n        for _ in range(n):\n            x, y = map(int, stdin.readline().strip().split())\n            packages.append((x, y))\n\n        start = (0, 0)\n        if start in packages or any(x == 0 and y == 0 for x, y in packages):\n            result.append(\"NO\")\n        else:\n            goals = set(packages)\n            path = bfs(start, goals, 2 * n)\n            if path is None:\n                result.append(\"NO\")\n            else:\n                result.append(\"YES\")\n                result.append(path)\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\\n2\\n1 0\\n0 1\\n1\\n4 3\") == \"YES\\nRUUURRRRUU\\nNO\\nYES\\nRRRRUUU\"",
        "num_ids": 1606,
        "indeed": false
    },
    {
        "number": 4633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def sum_of_digits(number: int) -> int:\n        return sum(map(int, str(number)))\n\n    def min_moves_to_reach_sum(n: int, s: int) -> int:\n        moves = 0\n        while sum_of_digits(n) > s:\n            n += 1\n            moves += 1\n        return moves\n\n    t = int(stdin.split('\\n', 1)[0])\n    test_cases = stdin.split('\\n', 1)[1].split('\\n')\n    results = []\n\n    for test_case in test_cases:\n        n, s = map(int, test_case.split())\n        results.append(min_moves_to_reach_sum(n, s))\n\n    return '\\n'.join(map(str, results))\n",
        "test": "assert solution(\"5\\n2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\") == \"8\\n0\\n500\\n2128012501878\\n89999999999999999\"",
        "num_ids": 874,
        "indeed": false
    },
    {
        "number": 4634,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def collect_books(books: List[int]) -> int:\n        n = len(books)\n        l = 0\n        r = 0\n        moves = 0\n        while r < n:\n            if books[r] == 1:\n                if l == 0:\n                    l = r\n                r += 1\n            elif l != 0:\n                if r - l + 1 == r - moves:\n                    moves += 1\n                else:\n                    moves += 2\n                l = 0\n                r += 1\n            else:\n                r += 1\n        if l != 0 and l != r - 1:\n            moves += 1\n        return moves\n\n    t = int(stdin.readline())\n    result = []\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        result.append(collect_books(a))\n    return '\\n'.join(map(str, result))\n\ndef",
        "test": "assert solution(\"10\\n1 1 1 1 1 1 1 1 1 1\\n7\\n0 1 0 1 0 1 0\\n10\\n1 0 1 0 1 0 1 0 1 0\\n5\\n1 0 0 0 1\\n5\\n1 1 0 1 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\\n5\\n1 0 1 0 1\") == \"0\\n2\\n6\\n1\\n2\\n2\\n2\\n1\\n1\\n2\" ",
        "num_ids": 1454,
        "indeed": false
    },
    {
        "number": 4635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    result = []\n\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        s = [''] * n\n\n        for j in range(k):\n            s[j] = chr(j + ord('a'))\n\n        for j in range(k, n):\n            s[j] = s[j % k]\n\n        result.append(''.join(s))\n\n    return '\\n'.join(result)\n\nstdin = sys.stdin\nsys.stdout.write(solution(stdin)) ",
        "test": "assert solution(4, 4, 4) == \"abcd\"",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 4636,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_total_size(candies: list, index: int, n: int) -> int:\n        total_size = 0\n        for i in range(index, index + n):\n            if i >= len(candies):\n                break\n            total_size += candies[i]\n        return total_size\n\n    def play_game(n: int, candies: list) -> tuple:\n        moves = 0\n        alice_total = 0\n        bob_total = 0\n        alice_prev_move = 0\n        bob_prev_move = 0\n\n        while n > 0:\n            moves += 1\n\n            # Alice's move\n            alice_current_move = calculate_total_size(candies, 0, 1)\n            if alice_current_move > bob_prev_move:\n                alice_total += alice_current_move\n                candies = candies[1:]\n                n -= 1\n            else:\n                alice_current_move = calculate_total_size(candies, 0, alice_current_move + 1)\n                alice_total += alice_current_move\n                candies = candies[alice_current_move:]\n                n -= alice_current_move\n\n            alice_prev_move = alice_current_move\n\n            if n == 0:\n                break\n\n            # Bob's move\n            bob_current_move = calculate_total_size(candies, len(candies) - 1, 1)\n            if bob_current_move > alice_prev_move:\n                bob_total += bob_current_move\n                candies = candies[:-1]\n                n -= 1\n            else:\n                bob_current_move = calculate_total_size(candies, len(candies) - 1, bob_current_move + 1)\n                bob_total += bob_current_move\n                candies = candies[:-bob_current_move]\n                n -= bob_current_move\n\n            bob_prev_move = bob_current_move\n\n        return moves, alice_total, bob_total\n\n    t = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        candies = list(map(int, stdin.readline().strip().split()))\n        moves, alice_total, bob_total = play_game(n, candies)\n        result.append(f\"{moves} {alice_total} {bob_total}\")\n\n    return \"\\n\".join(result)",
        "test": "assert solution(",
        "num_ids": 1499,
        "indeed": false
    },
    {
        "number": 4637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def merge_sort(arr: List[int]) -> List[int]:\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, right)\n\n    def merge(left: List[int], right: List[int]) -> List[int]:\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result.extend(left[i:])\n        result.extend(right[j:])\n        return result\n\n    def find_max_sum(a: List[int], b: List[int], k: int) -> int:\n        a = merge_sort(a)\n        b = merge_sort(b)\n        i, j = 0, 0\n        while i < len(a) and j < len(b) and k > 0:\n            if a[i] < b[j]:\n                a[i], b[j] = b[j], a[i]\n                k -= 1\n            i += 1\n            j += 1\n        return sum(a)\n\n    test_cases = int(stdin.readline().strip())\n    output = []\n    for _ in range(test_cases):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        b = list(map(int, stdin.readline().strip().split()))\n        output.append(find_max_sum(a, b, k))\n    return \"\\n\".join(map(str, output))",
        "test": "assert solution(\"\"\"5",
        "num_ids": 1366,
        "indeed": false
    },
    {
        "number": 4638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2 * n - 2]))\n    b = list(map(int, stdin.split()[2 * n - 2:2 * n - 2 + n - 1]))\n\n    dp_stairs = [0] * n\n    dp_elevator = [c] * n\n\n    for i in range(n - 1):\n        dp_stairs[i + 1] = dp_stairs[i] + a[i]\n        dp_elevator[i + 1] = dp_elevator[i] + b[i]\n\n    for i in range(n - 1, 0, -1):\n        if dp_stairs[i] > dp_stairs[i - 1] + a[i - 1]:\n            dp_stairs[i - 1] = dp_stairs[i] - a[i - 1]\n        if dp_elevator[i] > dp_elevator[i - 1] + b[i - 1]:\n            dp_elevator[i - 1] = dp_elevator[i] - b[i - 1]\n\n    for i in range(1, n):\n        dp_stairs[i] = min(dp_stairs[i], dp_stairs[i - 1] + a[i - 1])\n        dp_elevator[i] = min(dp_elevator[i], dp_elevator[i - 1] + b[i - 1])\n\n    return ' '.join(str(min(dp_stairs[i], dp_elevator[i])) for i in range(n))",
        "test": "assert solution(\"\"\"",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 4639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def generate_strings(n):\n        if n == 3:\n            return [\"abb\", \"bab\"]\n        strings = []\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                for string in generate_strings(n - i - j - 2):\n                    strings.append(\"a\" * i + \"b\" * j + string)\n        return strings\n\n    def find_kth_string(strings, k):\n        return strings[k - 1]\n\n    test_cases = int(stdin.readline())\n    result = []\n    for _ in range(test_cases):\n        n, k = map(int, stdin.readline().split())\n        strings = generate_strings(n)\n        result.append(find_kth_string(strings, k))\n\n    return \"\\n\".join(result)\n",
        "test": "assert solution(5, 2) == \"aabab\"",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 4640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def save_points(points, platforms):\n        saved_points = []\n        for point in points:\n            saved = False\n            for platform in platforms:\n                if platform[0] <= point[0] <= platform[2] and platform[1] <= point[1] <= platform[3]:\n                    saved = True\n                    break\n            if not saved:\n                saved_points.append(point)\n        return saved_points\n\n    def is_platform_valid(platform, points):\n        for point in points:\n            if platform[0] <= point[0] <= platform[2] and platform[1] <= point[1] <= platform[3]:\n                return False\n        return True\n\n    def place_platforms(points, k):\n        platforms = []\n        points.sort(key=lambda x: x[1])\n        for point in points:\n            found = False\n            for platform in platforms:\n                if platform[0] <= point[0] <= platform[2] and platform[1] <= point[1] <= platform[3]:\n                    found = True\n                    break\n            if not found:\n                if not platforms:\n                    platforms.append([point[0], point[1] - k, point[0] + k, point[1]])\n                else:\n                    last_platform = platforms[-1]\n                    if last_platform[3] - point[1] > k:\n                        platforms.append([point[0], point[1] - k, point[0] + k, point[1]])\n                    else:\n                        last_platform[2] = point[0] + k\n                        last_platform[3] = point[1]\n        return platforms\n\n    test_cases = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(test_cases):\n        n, k = map(int, stdin.readline().strip().split())\n        x = list(map(int, stdin.readline().strip().split()))\n        y = list(map(int, stdin.readline().strip().split()))\n\n        points = [(x[i], y[i]) for i in range(n)]\n        platforms = place_platforms(points, k)\n        saved_points = save_points(points, platforms)\n        result.append(len(saved_points))\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"6\\n1\\n5\\n10\\n\"",
        "num_ids": 1627,
        "indeed": false
    },
    {
        "number": 4641,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def get_mex(arr):\n        i = 0\n        while i in arr:\n            i += 1\n        return i\n\n    def get_max_mex(arr, x, q):\n        ans = []\n        for i in range(q):\n            arr.append(y[i])\n            ans.append(get_mex(arr))\n            if i < q - 1:\n                for j in range(len(arr)):\n                    if arr[j] + x <= len(arr) + x:\n                        arr[j] += x\n        return ans\n\n    stdin = stdin.split('\\n')\n    q, x = map(int, stdin[0].split())\n    y = list(map(int, stdin[1:]))\n\n    result = get_max_mex([], x, q)\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\" ",
        "num_ids": 885,
        "indeed": false
    },
    {
        "number": 4642,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def restore_array(n: int, x: int, y: int) -> str:\n        a1 = x - 1\n        a2 = y - (y - x) // 2\n        a3 = y + (y - x) // 2\n        return f\"{a1} {a2} {a3}\"\n\n    t = int(stdin.splitlines()[0])\n    result = []\n    for i in range(1, t + 1):\n        n, x, y = map(int, stdin.splitlines()[i].split())\n        result.append(restore_array(n, x, y))\n    return \"\\n\".join(result)",
        "test": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7\" ",
        "num_ids": 899,
        "indeed": false
    },
    {
        "number": 4643,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = list(map(int, stdin.split()))\n    arr.sort()\n    return \" \".join(map(str, arr))",
        "test": "assert solution(\"3 3 1 2\") == \"1 2 3\"",
        "num_ids": 261,
        "indeed": true
    },
    {
        "number": 4644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_odd(x: int) -> bool:\n        return x % 2 != 0\n\n    def can_get_odd_sum(a: list) -> bool:\n        total_sum = sum(a)\n        if is_odd(total_sum):\n            return True\n\n        for num in a:\n            if num % 2 == 1:\n                continue\n            for other_num in a:\n                if num == other_num:\n                    continue\n                if (num + other_num) % 2 == 1:\n                    return True\n        return False\n\n    test_cases = int(stdin.readline())\n    results = []\n    for _ in range(test_cases):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        if can_get_odd_sum(a):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    return \"\\n\".join(results)",
        "test": "assert solution(\"5\\n2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1\") == \"YES\\nNO\\nYES\\nNO\\nNO\" ",
        "num_ids": 897,
        "indeed": false
    },
    {
        "number": 4645,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_permutation(p: list) -> bool:\n        for i in range(len(p) - 1):\n            if not (2 <= abs(p[i] - p[i + 1]) <= 4):\n                return False\n        return True\n\n    def generate_permutation(n: int) -> list:\n        if n == 2:\n            return [1, 2]\n        if n % 2 == 0:\n            half = n // 2\n            permutation = [i for i in range(1, half + 1)] + [i for i in range(half + 1, n + 1)]\n            return permutation\n        else:\n            half = n // 2\n            permutation = [i for i in range(1, half + 1)] + [half + 2, half + 1] + [i for i in range(half + 3, n + 1)]\n            return permutation\n\n    def print_permutation(p: list) -> str:\n        return ' '.join(map(str, p))\n\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    outputs = []\n    for i in range(1, t + 1):\n        n = int(lines[i])\n        permutation = generate_permutation(n)\n        if is_valid_permutation(permutation):\n            outputs.append(print_permutation(permutation))\n        else:\n            outputs.append(-1)\n\n    return '\\n'.join(outputs)",
        "test": "assert solution(\"10\\n2\\n4\\n6\\n7\\n13\\n\") == \"9 6 10 8 4 7 3 1 5 2\\n-1\\n3 1 4 2\\n5 3 6 2 4 1\\n5 1 3 6 2 4 7\\n13 9 7 11 8 4 1 3 5 2 6 10 12\"",
        "num_ids": 1331,
        "indeed": false
    },
    {
        "number": 4646,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    for case in range(t):\n        n = int(stdin.split(\"\\n\")[1 + case * 2])\n        a = [int(i) for i in stdin.split(\"\\n\")[2 + case * 2].split()]\n        moves = 0\n        for i in range(n):\n            if i % 2 != a[i] % 2:\n                for j in range(n):\n                    if j % 2 == a[i] % 2 and j != i:\n                        a[i], a[j] = a[j], a[i]\n                        moves += 1\n                        break\n        if any(i % 2 != a[i] % 2 for i in range(n)):\n            print(-1)\n        else:\n            print(moves)\n\nstdin = \"\"\nstdin += \"4\\n\"\nstdin += \"4\\n\"\nstdin += \"3 2 7 6\\n\"\nstdin += \"3\\n\"\nstdin += \"3 2 6\\n\"\nstdin += \"1\\n\"\nstdin += \"7\\n\"\nstdin += \"7\\n\"\nstdin += \"4 9 2 1 18 3 0\\n\"\n\nsolution(stdin) ",
        "test": "assert solution([3, 2, 6]) == 1",
        "num_ids": 1044,
        "indeed": false
    },
    {
        "number": 4647,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    colors = [int(x) for x in stdin.split('\\n')[1].split()]\n    edges = [(int(x.split()[0]), int(x.split()[1])) for x in stdin.split('\\n')[2:]]\n\n    adj_list = [[] for _ in range(n + 1)]\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n\n    def dfs(node, parent):\n        subtree_white = colors[node]\n        subtree_black = 1 - colors[node]\n        for child in adj_list[node]:\n            if child != parent:\n                w, b = dfs(child, node)\n                subtree_white += w\n                subtree_black += b\n        return subtree_white, subtree_black\n\n    def max_diff(node, parent):\n        w, b = dfs(node, parent)\n        return max(w - b, b - w)\n\n    return ' '.join(str(max_diff(i, None)) for i in range(1, n + 1))",
        "test": "assert solution(\"\"\"9",
        "num_ids": 1217,
        "indeed": false
    },
    {
        "number": 4648,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    test_cases = list(map(int, stdin.split('\\n')[1:]))\n    result = []\n\n    for n in test_cases:\n        if n == 1:\n            result.append(0)\n        else:\n            moves = 0\n            while n > 1:\n                if n % 6 == 0:\n                    n //= 6\n                else:\n                    n *= 2\n                moves += 1\n\n                if moves > 1000:\n                    result.append(-1)\n                    break\n\n            if n == 1:\n                result.append(moves)\n            else:\n                result.append(-1)\n\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"7\\n1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489\") == \"0\\n-1\\n2\\n-1\\n-1\\n12\\n36\"",
        "num_ids": 704,
        "indeed": false
    },
    {
        "number": 4649,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(q):\n        n, k = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n\n        if k == n:\n            result.append(0)\n            continue\n\n        rgb_dict = {'R': 0, 'G': 0, 'B': 0}\n        for char in s:\n            rgb_dict[char] += 1\n\n        rgb_list = [rgb_dict['R'], rgb_dict['G'], rgb_dict['B']]\n        rgb_list.sort(reverse=True)\n\n        if k > n // 3:\n            result.append(n - k)\n        else:\n            min_change = rgb_list[2] - k // 3\n            if rgb_list[0] >= rgb_list[1] + k:\n                min_change = max(min_change, k - rgb_list[1])\n            result.append(min_change)\n\n    return '\\n'.join(map(str, result))\n",
        "test": "assert solution(\"3\\n5 2\\nBGGGG\\n5 3\\nRBRGR\\n5 5\\nBBBRR\") == \"1\\n0\\n3\" ",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 4650,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = [line.strip() for line in stdin.split('\\n') if line.strip()]\n    t = int(queries[0])\n    result = []\n    for i in range(1, t + 1):\n        n = int(queries[i * 2 - 1])\n        a = list(map(int, queries[i * 2].split()))\n        count = sum(1 for x in a if x % 3 == 0)\n        result.append(str(count))\n    return '\\n'.join(result)\n",
        "test": "assert solution(\"\"\"2",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 4651,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    q = int(stdin.readline().strip())\n    test_cases = []\n    for i in range(q):\n        n = int(stdin.readline().strip())\n        permutation = list(map(int, stdin.readline().strip().split()))\n        test_cases.append((n, permutation))\n    \n    # Calculate the results for each test case\n    results = []\n    for n, permutation in test_cases:\n        result = []\n        for i in range(n - 1):\n            if permutation[i] != i + 1:\n                result.append(i + 1)\n        permutation[result[0] - 1], permutation[result[0]] = permutation[result[0]], permutation[result[0] - 1]\n        result.pop(0)\n        for i in result:\n            if i == permutation.index(i):\n                index = permutation.index(i)\n                if index == n - 1:\n                    index -= 1\n                else:\n                    index += 1\n                permutation[index], permutation[permutation.index(i)] = permutation[permutation.index(i)], permutation[index]\n        results.append(' '.join(map(str, permutation)))\n    \n    # Return the results\n    return '\\n'.join(results)",
        "test": "assert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 5 2 4 3\\n1 2 3 4\\n1\\n1 4 3 2\" ",
        "num_ids": 1743,
        "indeed": false
    },
    {
        "number": 4652,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into lines\n    lines = stdin.strip().split('\\n')\n    \n    # Define the number of queries\n    q = int(lines[0])\n    \n    # Iterate through each query\n    for i in range(q):\n        # Get the number of students\n        n = int(lines[i * 2 + 1])\n        \n        # Get the permutation of indices\n        p = list(map(int, lines[i * 2 + 2].strip().split()))\n        \n        # Check if a clockwise or counterclockwise round dance can be started\n        clockwise_valid = all(p[i] == p[i - 1] + 1 for i in range(1, n))\n        counterclockwise_valid = all(p[i] == p[i - 1] - 1 for i in range(1, n))\n        \n        # If either clockwise or counterclockwise round dance is valid, print YES, otherwise print NO\n        if clockwise_valid or counterclockwise_valid:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
        "test": "assert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\" ",
        "num_ids": 850,
        "indeed": false
    },
    {
        "number": 4653,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def can_satisfy(a, b, k, n):\n        max_num_kids_with_a_plus_one = min(n // (a + 1), k // 2)\n        return b - a <= 1 and n % (a + 1) == 0 and max_num_kids_with_a_plus_one <= k // 2\n\n    def max_candies(n, k):\n        if k == 1:\n            return n\n        if n == 1:\n            return 1\n        if k == 2:\n            return n // 2\n\n        max_candies_satisfied = 0\n        for a in range(1, n // k + 1):\n            b = n // (k * a) * (a + 1)\n            if can_satisfy(a, b, k, n):\n                max_candies_satisfied = max(max_candies_satisfied, b)\n        return max_candies_satisfied\n\n    lines = stdin.splitlines()\n    t = int(lines[0])\n    outputs = []\n    for i in range(1, t + 1):\n        n, k = map(int, lines[i].split())\n        outputs.append(max_candies(n, k))\n    return \"\\n\".join(map(str, outputs))",
        "test": "assert solution(\"5\\n5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"",
        "num_ids": 951,
        "indeed": false
    },
    {
        "number": 4654,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def find_divisors(n, k):\n        if n % 2 == 0:\n            return [2] * k\n        else:\n            if n - k > 1:\n                return [1] + [2] * (k - 1)\n            elif n - k == 1:\n                return [1] * k\n            else:\n                return None\n\n    test_cases = [list(map(int, line.strip().split())) for line in stdin.strip().split('\\n')[1:]]\n    output = []\n\n    for n, k in test_cases:\n        if n < k:\n            output.append(\"NO\")\n            continue\n\n        divisors = find_divisors(n, k)\n\n        if divisors:\n            output.append(\"YES\")\n            output.append(\" \".join(map(str, divisors)))\n        else:\n            output.append(\"NO\")\n\n    return \"\\n\".join(output)\n",
        "test": "assert solution(\"10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\\n\") == \"YES\\n4 2 4\\nYES\\n55 5 5 35\\nNO\\nNO\\nYES\\n1 1 1 1 1 1 1 1\\nNO\\nYES\\n3 1 1\\nYES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120\"",
        "num_ids": 1321,
        "indeed": false
    },
    {
        "number": 4655,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_alice_candies(piles: List[int]) -> int:\n        alice_pile, bob_pile, shared_pile = sorted(piles)\n        alice_candies = alice_pile + shared_pile // 2\n        bob_candies = bob_pile + shared_pile - shared_pile // 2\n\n        if alice_candies == bob_candies:\n            return alice_candies\n        elif alice_candies > bob_candies:\n            return alice_candies - (alice_candies - bob_candies) // 2\n        else:\n            return bob_candies - (bob_candies - alice_candies) // 2\n\n    queries = [list(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    results = [str(get_alice_candies(query)) for query in queries]\n    return \"\\n\".join(results)",
        "test": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"",
        "num_ids": 966,
        "indeed": false
    },
    {
        "number": 4656,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_k_beautiful(s, k, n):\n        return set(s) == set(s[k % n:n] + s[:k % n])\n\n    def max_k_beautiful_necklace(s, k):\n        n = len(s)\n        max_length = 0\n\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                if is_k_beautiful(s[i:j], k, len(s[i:j])):\n                    max_length = max(max_length, len(s[i:j]))\n\n        return max_length\n\n    test_cases = int(stdin.readline().strip())\n    results = []\n\n    for _ in range(test_cases):\n        n, k = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        results.append(max_k_beautiful_necklace(s, k))\n\n    return \"\\n\".join(map(str, results))",
        "test": "assert solution(\"6\\n6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\") == \"6\\n3\\n5\\n4\\n15\\n10\" ",
        "num_ids": 1132,
        "indeed": false
    },
    {
        "number": 4657,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def has_odd_sum(arr):\n        return sum(arr) % 2 == 1\n\n    def split_array(a, k):\n        if k == 1:\n            return [len(a)]\n        if has_odd_sum(a):\n            return None\n        left_sum = 0\n        borders = []\n        for i, x in enumerate(a):\n            left_sum += x\n            if left_sum % 2 == 0:\n                borders.append(i)\n                if len(borders) == k - 1:\n                    borders.append(len(a))\n                    return borders\n        return None\n\n    queries = stdin.strip().split('\\n')[1:]\n    result = []\n    for query in queries:\n        n, k = map(int, query.strip().split()[:2])\n        a = list(map(int, query.strip().split()[2:]))\n        borders = split_array(a, k)\n        if borders is None:\n            result.append('NO')\n        else:\n            result.append('YES')\n            result.append(' '.join(map(str, borders)))\n\n    return '\\n'.join(result)",
        "test": "assert solution(\"3\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"YES\\n1 3 5\\nNO\\nNO\"",
        "num_ids": 1308,
        "indeed": false
    },
    {
        "number": 4658,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin, 2)\n    reverse_bits = 0\n    for i in range(32):\n        reverse_bits |= (n & 1) << (31 - i)\n        n >>= 1\n    return str(reverse_bits)",
        "test": "assert solution(\"00000010100101000001111010011100\") == \"964176192\"",
        "num_ids": 490,
        "indeed": false
    },
    {
        "number": 4659,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    numRows = int(stdin)\n    result = []\n    for i in range(numRows):\n        row = [1] * (i + 1)\n        if i > 1:\n            for j in range(1, i):\n                row[j] = result[-1][j - 1] + result[-1][j]\n        result.append(row)\n    return result ",
        "test": "assert solution(5) == [[1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1]]",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 4660,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    import re\n\n    def is_valid_email(email: str) -> bool:\n        username_pattern = r'^[a-zA-Z0-9_-]+$'\n        website_pattern = r'^[a-zA-Z0-9]+\\.[a-zA-Z]{1,3}$'\n        if re.match(username_pattern, email.split('@')[0]) and re.match(website_pattern, email.split('@')[1]):\n            return True\n        return False\n\n    stdin_list = stdin.split('\\n')\n    N = int(stdin_list[0])\n    email_addresses = stdin_list[1:]\n    valid_emails = list(filter(is_valid_email, email_addresses))\n    valid_emails.sort()\n    return str(valid_emails)\n",
        "test": "assert solution(\"2\\n@gmail.com\\n123@yahoo.co.in\") == ['123@yahoo.co.in']",
        "num_ids": 831,
        "indeed": true
    },
    {
        "number": 4661,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    fibonacci = [0, 1]\n    for i in range(2, N):\n        fibonacci.append(fibonacci[i - 1] + fibonacci[i - 2])\n    cubed_fibonacci = list(map(lambda x: x ** 3, fibonacci))\n    return str(cubed_fibonacci)",
        "test": "assert solution(\"5\") == str(list(map(lambda x: x**3, [0, 1, 1, 2, 3])))",
        "num_ids": 562,
        "indeed": true
    },
    {
        "number": 4662,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    xml = stdin.split('\\n')\n    depth = 0\n    max_depth = 0\n\n    for line in xml:\n        depth += line.count('<') - line.count('</') - line.count('<?') - line.count('?>')\n        max_depth = max(max_depth, depth)\n\n    return str(max_depth)",
        "test": "assert solution(\"2\\n<note>\\n<to>Tove</to>\\n<from>Jani</from>\\n<heading>Reminder</heading>\\n<body>Don't forget me this weekend!</body>\\n</note>\\n<note>\\n<to>Tove</to>\\n<from>Jani</from>\\n<heading>Reminder</heading>\\n<body>Don't forget me this weekend!</body>\\n</note>\") == 1",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 4663,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    numbers = stdin.split('\\n')[1:]\n    result = []\n    \n    for number in numbers:\n        if len(number) == 10 and number[0] in ['7', '8', '9']:\n            result.append('YES')\n        else:\n            result.append('NO')\n            \n    return '\\n'.join(result)",
        "test": "assert solution(\"1\\n9876543210\") == \"YES\"",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 4664,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into lines\n    lines = stdin.split('\\n')\n\n    # Convert the input into sets of integers\n    M = set(map(int, lines[1].split()))\n    N = set(map(int, lines[3].split()))\n\n    # Calculate the symmetric difference\n    result = M.symmetric_difference(N)\n\n    # Convert the result set into a sorted list of integers\n    result = sorted(list(result))\n\n    # Convert the list of integers into a string of integers separated by newlines\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"5\\n1 2 3 4 5\\n3\\n3 7 9\\n\") == \"1\\n2\\n4\\n5\\n6\\n7\\n8\\n9\\n\"",
        "num_ids": 672,
        "indeed": true
    },
    {
        "number": 4665,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def get_column_index(columns: str) -> dict:\n        column_dict = {}\n        columns = columns.split()\n        for index, column in enumerate(columns):\n            column_dict[column] = index\n        return column_dict\n\n    def calculate_average(marks: list) -> float:\n        return round(sum(marks) / len(marks), 2)\n\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    columns = lines[1]\n    column_index = get_column_index(columns)\n    marks = []\n\n    for i in range(2, N + 2):\n        data = lines[i].split()\n        marks.append(int(data[column_index['MARKS']]))\n\n    average = calculate_average(marks)\n    return f\"{average:.2f}\"",
        "test": "assert solution(\"5\\nID MARKS CLASS NAME\\n1 90 A Maths\\n2 80 B Physics\\n3 70 C Chemistry\\n4 60 D Biology\\n5 50 E Maths\") == \"70.00\"",
        "num_ids": 842,
        "indeed": true
    },
    {
        "number": 4666,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 != 0:\n        return \"Weird\"\n    elif n in range(2, 6):\n        return \"Not Weird\"\n    elif n in range(6, 21):\n        return \"Weird\"\n    elif n > 20:\n        return \"Not Weird\"",
        "test": "assert solution(1) == \"Weird\"",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 4667,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    xml = ''.join(stdin)\n    score = 0\n    start = xml.find('<')\n    while start != -1:\n        end = xml.find('>', start)\n        if end != -1:\n            element = xml[start + 1:end]\n            if ' ' in element:\n                attributes = element.split(' ')\n                score += len(attributes) - 1\n            start = xml.find('<', end)\n        else:\n            break\n    return str(score)",
        "test": "assert solution(\"<book><title>Harry Potter</title><author>J.K. Rowling</author></book>\") == 2",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 4668,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = (list(map(float, stdin.split()))[i:i+3] for i in range(0, 12, 3))\n    \n    AB, BC, CD = [np.array(B) - np.array(A), np.array(C) - np.array(B), np.array(D) - np.array(C)]\n    \n    X = np.cross(AB, BC)\n    Y = np.cross(BC, CD)\n    \n    cos_phi = np.dot(X, Y) / (np.linalg.norm(X) * np.linalg.norm(Y))\n    phi = np.arccos(cos_phi)\n    \n    return round(np.degrees(phi), 2)",
        "test": "assert solution(\"-1 0 0 0 1 0 0 0 2 0\") == \"90.00\"",
        "num_ids": 1001,
        "indeed": false
    },
    {
        "number": 4669,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def score_words(words):\n        vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n        score = 0\n        for word in words:\n            num_vowels = sum(1 for letter in word if letter in vowels)\n            if num_vowels % 2 == 0:\n                score += 2\n            else:\n                score += 1\n        return score\n\n    def process(stdin: str) -> str:\n        n = int(stdin.split('\\n')[0])\n        words = stdin.split('\\n')[1].split()\n        if n != len(words):\n            raise ValueError(\"Invalid input format\")\n        return str(score_words(words))\n\n    return process(stdin) ",
        "test": "assert solution(\"2\\nhello world\") == \"3\"",
        "num_ids": 707,
        "indeed": true
    },
    {
        "number": 4670,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    roman_numeral = stdin.strip()\n    is_valid = True\n    # Create a regular expression for a valid Roman numeral\n    regex = r\"^(?=[MDCLXVI])M*(?:CM|CD|D?C{0,3})(?:XC|XL|L?X{0,3})(?:IX|IV|V?I{0,3})$\"\n\n    if not re.match(regex, roman_numeral):\n        is_valid = False\n\n    if is_valid:\n        return \"True\"\n    else:\n        return \"False\"",
        "test": "assert solution(\"IV\") == True",
        "num_ids": 366,
        "indeed": true
    },
    {
        "number": 4671,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    num_list = []\n    for i in range(1, int(stdin.split(\"\\n\")[0]) + 1):\n        phone_num = stdin.split(\"\\n\")[i]\n        if \"+\" in phone_num or \"91\" in phone_num:\n            phone_num = phone_num.replace(\"+91\", \"\").replace(\"91\", \"\").replace(\"+\", \"\").strip()\n        elif \"0\" in phone_num:\n            phone_num = phone_num.replace(\"0\", \"\").strip()\n        num_list.append(phone_num)\n    num_list.sort()\n    result = \"\"\n    for num in num_list:\n        result += \"+91 \" + num[:5] + \" \" + num[5:] + \"\\n\"\n    return result.rstrip()",
        "test": "assert solution(\"0\\n\") == \"\"",
        "num_ids": 1089,
        "indeed": false
    },
    {
        "number": 4672,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    marks = {}\n    for i in range(1, n + 1):\n        name, scores = stdin.split('\\n')[i].split(':')\n        marks[name] = [int(score) for score in scores[1:-1].split(',')]\n    query_name = stdin.split('\\n')[-1]\n    avg = sum(marks[query_name]) / len(marks[query_name])\n    return f\"{avg:.2f}\"",
        "test": "assert solution(\"3\\nalpha 20 30 40\\nbeta 30 50 70\\ngamma 80 90 100\\nbeta\") == \"50.00\" ",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 4673,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def create_name(first_name: str, last_name: str, sex: str) -> str:\n        if sex == 'M':\n            return f\"Mr. {first_name} {last_name}\"\n        else:\n            return f\"Ms. {first_name} {last_name}\"\n\n    def sort_by_age(person: tuple) -> int:\n        return person[2]\n\n    people = []\n    for i in range(int(stdin.split(\"\\n\")[0])):\n        first_name, last_name, age, sex = stdin.split(\"\\n\")[i+1].split()\n        people.append((first_name, last_name, int(age), sex))\n\n    sorted_people = sorted(people, key=sort_by_age)\n\n    result = [create_name(person[0], person[1], person[3]) for person in sorted_people]\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"5\\nHenry Davids M 25 M\\nMary George F 22 F\\nJohn Smith M 28 M\\nMary Johnson F 22 F\\nWilliam Brown M 25 M\") == \"Ms. Mary Johnson\\nMs. Mary George\\nMr. Henry Davids\\nMr. William Brown\\nMr. John Smith\"",
        "num_ids": 865,
        "indeed": true
    },
    {
        "number": 4674,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, n = map(int, stdin.splitlines())\n    coordinates = [[i, j, k] for i in range(x + 1) for j in range(y + 1) for k in range(z + 1)]\n    valid_coordinates = [coord for coord in coordinates if sum(coord) != n]\n    valid_coordinates.sort()\n    return '\\n'.join(map(str, valid_coordinates))",
        "test": "assert solution(\"2\\n2\\n2\\n5\") == \"[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\"",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 4675,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    C, D = [complex(*map(float, line.strip().split())) for line in stdin.split('\\n')]\n    output = [f\"{C+D:.2f}\", f\"{C-D:.2f}\", f\"{C*D:.2f}\", f\"{C/D:.2f}\", f\"{abs(C):.2f}\", f\"{abs(D):.2f}\"]\n    return '\\n'.join(output) ",
        "test": "assert solution(\"-2 3\\n4 5\") == \"-4.00-2.00i\\n-6.00+2.00i\\n-13.00-2.00i\\n-0.17-0.00i\\n5.06+0.00i\\n5.83+0.00i\"",
        "num_ids": 1053,
        "indeed": false
    },
    {
        "number": 4676,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    O, E = lines[0], lines[1]\n    \n    password = []\n    for i in range(max(len(O), len(E))):\n        if i < len(O):\n            password.append(O[i])\n        if i < len(E):\n            password.append(E[i])\n    \n    return ''.join(password)",
        "test": "assert solution('xyz\\nabc') == 'xaybzc'",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 4677,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    editor = \"\"\n    for key in stdin:\n        if key == \"0\":\n            editor += \"0\"\n        elif key == \"1\":\n            editor += \"1\"\n        elif key == \"B\":\n            if editor:\n                editor = editor[:-1]\n    return editor",
        "test": "assert solution(\"01B0\") == \"00\"",
        "num_ids": 342,
        "indeed": true
    },
    {
        "number": 4678,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    stack = []\n    total_height = 0\n\n    for height in A[::-1]:\n        while stack and stack[-1] > height:\n            total_height += stack.pop()\n        stack.append(height)\n\n    return str(total_height)",
        "test": "assert solution(\"5\\n10 10 10 10 10\") == \"0\"",
        "num_ids": 502,
        "indeed": false
    },
    {
        "number": 4679,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S_A, S_B, S_C = stdin.split(\"\\n\")\n\n    def next_player(current_player: str, discarded_card: str) -> str:\n        if discarded_card == \"a\":\n            return \"Alice\"\n        elif discarded_card == \"b\":\n            return \"Bob\"\n        else:\n            return \"Charlie\"\n\n    current_player = \"Alice\"\n    while True:\n        if current_player == \"Alice\":\n            if S_A:\n                discarded_card = S_A[0]\n                S_A = S_A[1:]\n                current_player = next_player(current_player, discarded_card)\n            else:\n                return \"A\"\n        elif current_player == \"Bob\":\n            if S_B:\n                discarded_card = S_B[0]\n                S_B = S_B[1:]\n                current_player = next_player(current_player, discarded_card)\n            else:\n                return \"B\"\n        else:\n            if S_C:\n                discarded_card = S_C[0]\n                S_C = S_C[1:]\n                current_player = next_player(current_player, discarded_card)\n            else:\n                return \"C\"",
        "test": "assert solution(\"aca\\naccc\\nca\") == \"A\"  # Alice will win the game",
        "num_ids": 1089,
        "indeed": true
    },
    {
        "number": 4680,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c == 17 and 5 <= a <= 10 and 5 <= b <= 10 and 5 <= c <= 10:\n        return 'YES'\n    else:\n        return 'NO'",
        "test": "assert solution(\"1 2 3\") == \"NO\"",
        "num_ids": 296,
        "indeed": true
    },
    {
        "number": 4681,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"2\"\n    elif n == 1:\n        return \"1\"\n    else:\n        prev_prev, prev = 2, 1\n        for _ in range(2, n + 1):\n            current = prev_prev + prev\n            prev_prev, prev = prev, current\n        return str(current)",
        "test": "assert solution(10) == 123",
        "num_ids": 386,
        "indeed": true
    },
    {
        "number": 4682,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    area = (a + b) * h // 2\n    return str(area)",
        "test": "assert solution(\"3\\n4\\n2\") == \"7\"",
        "num_ids": 229,
        "indeed": true
    },
    {
        "number": 4683,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    mod = 10**9 + 7\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += a[i] * a[j]\n            total %= mod\n    return str(total)",
        "test": "assert solution(\"3\\n1 2 3\") == \"11\"",
        "num_ids": 462,
        "indeed": true
    },
    {
        "number": 4684,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    num = r * 100 + g * 10 + b\n    if num % 4 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"4 3 2\") == \"YES\"",
        "num_ids": 277,
        "indeed": true
    },
    {
        "number": 4685,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    \n    max_sum = float('-inf')\n    \n    for n in [A, B, C]:\n        new_sum = sum([2 * n if i == n else i for i in [A, B, C]])\n        max_sum = max(max_sum, new_sum)\n        \n    if K > 1:\n        for _ in range(K - 1):\n            for i in range(3):\n                if A == B and B == C:\n                    A, B, C = A + A, B + B, C + C\n                elif A == B:\n                    A, B, C = 2 * A, 2 * B, C\n                elif B == C:\n                    A, B, C = A, 2 * B, 2 * C\n                elif A == C:\n                    A, B, C = 2 * A, B, 2 * C\n                else:\n                    A, B, C = A, B, C\n            \n            max_sum = sum([A, B, C])\n    \n    return str(max_sum)",
        "test": "assert solution(\"5 3 11\\n1\") == \"30\"",
        "num_ids": 684,
        "indeed": false
    },
    {
        "number": 4686,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    letters = [0] * 26\n    for letter in stdin:\n        letters[ord(letter) - ord('a')] += 1\n    \n    for count in letters:\n        if count % 2 != 0:\n            return \"No\"\n    return \"Yes\"",
        "test": "assert solution('abaccaba') == 'Yes'",
        "num_ids": 322,
        "indeed": true
    },
    {
        "number": 4687,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    arr = []\n\n    for i in range(n):\n        a, b = map(int, stdin.split()[2 + i * 2:4 + i * 2])\n        arr.extend([a] * b)\n\n    arr.sort()\n    return str(arr[k - 1])",
        "test": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == \"3\"",
        "num_ids": 793,
        "indeed": true
    },
    {
        "number": 4688,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    # If N is even, we can always alternate colors.\n    if N % 2 == 0:\n        return str(K ** (N // 2))\n    # If N is odd, we can either alternate colors or have all balls the same color.\n    else:\n        return str((K - 1) * (K ** (N // 2)) + K ** (N // 2))",
        "test": "assert solution('2 2') == '2'",
        "num_ids": 235,
        "indeed": true
    },
    {
        "number": 4689,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    K, N = map(int, stdin.split()[:2])\n    A = list(map(int, stdin.split()[2:]))\n    A.sort()\n    min_distance = A[-1] - A[0]\n\n    for i in range(N - 1):\n        distance = min(A[i + 1] - A[i], K - A[i] + A[i + 1])\n        min_distance += distance\n\n    return str(min_distance)",
        "test": "assert solution(\"10 4\\n2 4 6 8\") == \"8\"",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 4690,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    area1, area2 = A * B, C * D\n    \n    if area1 > area2:\n        return str(area1)\n    elif area1 < area2:\n        return str(area2)\n    else:\n        return str(area1)",
        "test": "assert solution(\"3 5 2 7\") == \"15\"",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 4691,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    S = lines[1:]\n\n    # Count the verdicts\n    C = [0, 0, 0, 0]\n    for s in S:\n        if s == \"AC\":\n            C[0] += 1\n        elif s == \"WA\":\n            C[1] += 1\n        elif s == \"TLE\":\n            C[2] += 1\n        elif s == \"RE\":\n            C[3] += 1\n\n    # Print the result\n    result = f\"AC x {C[0]}\\nWA x {C[1]}\\nTLE x {C[2]}\\nRE x {C[3]}\"\n    return result",
        "test": "assert solution(\"6\\nAC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\" ",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 4692,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    M = int(stdin)\n    hours_until_new_year = 24 - M + 24  # hours left in the day + hours until midnight + hours until 23:00\n    return str(hours_until_new_year)\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "assert solution(0) == 24",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 4693,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    result = a + b\n    if result >= 10:\n        return \"error\"\n    return str(result)",
        "test": "assert solution(\"6 3\") == \"9\"",
        "num_ids": 207,
        "indeed": true
    },
    {
        "number": 4694,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = list(map(int, stdin.strip().split()))\n    a.sort()\n    distance = a[-1] - a[0]\n    for i in range(1, N):\n        distance = max(distance, a[i] - a[i - 1])\n    return str(distance)",
        "test": "assert solution(\"4\\n2 3 7 9\") == \"7\"",
        "num_ids": 505,
        "indeed": true
    },
    {
        "number": 4695,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    group1 = [2, 5, 11]\n    group2 = [3, 7, 12]\n    group3 = [4, 8, 1]\n    \n    if x in group1 and y in group1:\n        return \"Yes\"\n    elif x in group2 and y in group2:\n        return \"Yes\"\n    elif x in group3 and y in group3:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"5 8\") == \"Yes\"",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 4696,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if (a * b) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "test": "assert solution(\"3 4\") == \"Even\"",
        "num_ids": 228,
        "indeed": true
    },
    {
        "number": 4697,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return min(n, m) // 3",
        "test": "assert solution(\"2 6\") == 3",
        "num_ids": 153,
        "indeed": false
    },
    {
        "number": 4698,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n\n    N = int(lines[0])\n    T = list(map(int, lines[1].split()))\n    M = int(lines[2])\n    P_X = [list(map(int, line.split())) for line in lines[3:]]\n\n    result = []\n    for i in range(M):\n        time_sum = sum([min(T[P_X[i][0] - 1], P_X[i][1]) for P_X in P_X])\n        result.append(time_sum)\n\n    return \"\\n\".join(map(str, result))\n",
        "test": "assert solution(\"5\\n5 6 7 8 9\\n3\\n1 10\\n3 20\\n5 30\") == \"25\\n35\\n45\"",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 4699,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K, *D = [int(x) for x in stdin.split()]\n\n    # Find the smallest number with no disliked digits\n    result = N\n    while any(str(d) in str(result) for d in D):\n        result += 1\n\n    return str(result)",
        "test": "assert solution(\"100 2\\n8 9\") == \"100\"",
        "num_ids": 731,
        "indeed": true
    },
    {
        "number": 4700,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_observatory(observatory_idx: int, observatories: list, roads: list) -> bool:\n        for road in roads:\n            if observatory_idx in road:\n                other_observatory_idx = road[0] if road[1] == observatory_idx else road[1]\n                if observatories[observatory_idx] < observatories[other_observatory_idx]:\n                    return False\n        return True\n\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    observatories = list(map(int, lines[1].split()))\n    roads = [tuple(map(int, line.split())) for line in lines[2:]]\n\n    good_observatories = sum(is_good_observatory(i, observatories, roads) for i in range(N))\n    return str(good_observatories)",
        "test": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\\n\") == \"2\" ",
        "num_ids": 894,
        "indeed": false
    },
    {
        "number": 4701,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    if k >= 2:\n        a_count = n // 2\n        b_count = n - a_count\n    else:\n        a_count = b_count = n\n    \n    result = 1\n    for _ in range(a_count):\n        result *= 2\n    for _ in range(b_count):\n        result += k\n    \n    return str(result)",
        "test": "assert solution(\"4\\n3\") == \"10\"",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 4702,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0:\n        return \"1\"\n    elif x == 1:\n        return \"0\"\n    else:\n        return \"Invalid input. x must be an integer between 0 and 1.\"",
        "test": "assert solution('0') == '1'",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 4703,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    results = []\n    \n    def evaluate(formula: str) -> int:\n        result = 0\n        temp = 0\n        for char in formula:\n            if char.isdigit():\n                temp = temp * 10 + int(char)\n            else:\n                result += temp\n                temp = 0\n        result += temp\n        return result\n    \n    def backtrack(start: int, current_formula: str, current_result: int):\n        if start == len(s):\n            results.append(current_result)\n        else:\n            # Include the current digit\n            if start > 0 and current_formula[-1] != '+':\n                backtrack(start + 1, current_formula + s[start], current_result)\n            \n            # Add the '+' sign\n            if start > 0 and s[start - 1] != '+':\n                backtrack(start + 1, current_formula + '+', current_result)\n            \n            # Exclude the current digit\n            backtrack(start + 1, current_formula, current_result + evaluate(s[start]))\n    \n    backtrack(0, \"\", 0)\n    return str(sum(results))",
        "test": "assert solution(\"99999\") == 100000",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 4704,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = list(map(int, stdin.split()))\n    arr.sort()\n    snuke = sum(arr[:n-1])\n    raccoon = sum(arr[n-1:])\n    return abs(snuke - raccoon)",
        "test": "assert solution(\"2\\n1 1\") == 0",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 4705,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    x = N * 800\n    y = (N // 15) * 200\n    return str(x - y)",
        "test": "assert solution(\"20\") == \"15800\"",
        "num_ids": 284,
        "indeed": true
    },
    {
        "number": 4706,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [list(line) for line in stdin.splitlines()]\n    result = \"\"\n    for i in range(3):\n        result += matrix[i][i]\n    return result",
        "test": "assert solution('ant\\nobe\\nrec') == 'abc'",
        "num_ids": 293,
        "indeed": true
    },
    {
        "number": 4707,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.strip()))\n    return str(sum(s))",
        "test": "assert solution(\"101\") == \"2\" # Marbles on square 1 and 3",
        "num_ids": 248,
        "indeed": true
    },
    {
        "number": 4708,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, K, X, Y = map(int, stdin.split())\n    total_fee = 0\n    \n    for i in range(1, N+1):\n        if i <= K:\n            total_fee += X\n        else:\n            total_fee += Y\n            \n    return str(total_fee)",
        "test": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"",
        "num_ids": 378,
        "indeed": true
    },
    {
        "number": 4709,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, op, B = stdin.split()\n    A, B = int(A), int(B)\n\n    if op == \"+\":\n        return str(A + B)\n    elif op == \"-\":\n        return str(A - B)\n    else:\n        raise ValueError(\"Invalid operator\")",
        "test": "assert solution(\"1 + 2\") == \"3\"",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 4710,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    if x < 1200:\n        return \"ABC\"\n    else:\n        return \"ARC\"",
        "test": "assert solution(\"1000\") == \"ABC\"",
        "num_ids": 200,
        "indeed": true
    },
    {
        "number": 4711,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    bells = [(a, b), (a, c), (b, c)]\n    min_price = float('inf')\n\n    for bell in bells:\n        price = sum(bell)\n        if price < min_price:\n            min_price = price\n\n    return str(min_price)",
        "test": "assert solution(\"700 600 780\") == \"1300\" ",
        "num_ids": 438,
        "indeed": true
    },
    {
        "number": 4712,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    img = [stdin.readline().strip() for _ in range(H)]\n\n    result = []\n    box_width = W + 2\n    box_height = H + 2\n\n    # top border\n    result.append(\"#\" * box_width)\n\n    # sides and bottom border\n    for i in range(box_height - 2):\n        result.append(\"#\" + img[i] + \"#\")\n\n    # bottom border\n    result.append(\"#\" * box_width)\n\n    return \"\\n\".join(result)\n",
        "test": "assert solution(\"2 3\\nabc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\" ",
        "num_ids": 557,
        "indeed": false
    },
    {
        "number": 4713,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(str, stdin.split())\n    N = int(N)\n    x = 0\n    max_value = 0\n    \n    for i in range(N):\n        if S[i] == \"I\":\n            x += 1\n        else:\n            x -= 1\n        max_value = max(max_value, x)\n    \n    return str(max_value)",
        "test": "assert solution(\"5\\nIIDID\") == \"2\"",
        "num_ids": 385,
        "indeed": true
    },
    {
        "number": 4714,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    count = 0\n\n    for num in range(A, B + 1):\n        str_num = str(num)\n        if str_num == str_num[::-1]:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"11009 11332\") == \"4\"",
        "num_ids": 357,
        "indeed": true
    },
    {
        "number": 4715,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    colors = set([a, b, c])\n    return len(colors)",
        "test": "assert solution(\"3 1 4\") == 3",
        "num_ids": 208,
        "indeed": false
    },
    {
        "number": 4716,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    sticks = sorted(map(int, stdin.split()[2:]), reverse=True)\n\n    max_length = sum(sticks[:k])\n\n    return str(max_length)",
        "test": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\"",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 4717,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    if abs(x - a) < abs(x - b):\n        return \"A\"\n    else:\n        return \"B\"",
        "test": "assert solution(\"5 2 7\") == \"B\"",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 4718,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input string\n    s = stdin\n    \n    # Replace the first four characters with 2018\n    s = '2018' + s[4:]\n    \n    # Return the modified string\n    return s",
        "test": "assert solution(\"2017/01/13\") == \"2018/01/13\"",
        "num_ids": 279,
        "indeed": true
    },
    {
        "number": 4719,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = []\n    for _ in range(n):\n        string = stdin.readline().strip()\n        strings.append(string)\n\n    letters = set()\n    for string in strings:\n        for char in string:\n            letters.add(char)\n\n    for char in sorted(letters):\n        for string in strings:\n            if char not in string:\n                strings.remove(string)\n                break\n\n    if not strings:\n        return \"\"\n\n    longest = \"\"\n    for i in range(1, len(strings[0]) + 1):\n        for j in range(len(strings[0]) - i + 1):\n            substring = strings[0][j:j + i]\n            found = True\n            for string in strings[1:]:\n                if substring not in string:\n                    found = False\n                    break\n            if found and len(substring) > len(longest):\n                longest = substring\n\n    return longest",
        "test": "assert solution(\"2\\nabc\\nabcd\") == \"abcd\"",
        "num_ids": 758,
        "indeed": false
    },
    {
        "number": 4720,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *seats = list(map(int, stdin.split()))\n    occupied = [0] * 100001\n    \n    for i in range(N):\n        l, r = seats[2*i], seats[2*i+1]\n        for j in range(l, r+1):\n            occupied[j] = 1\n    \n    return str(sum(occupied))",
        "test": "assert solution(\"1\\n24 30\") == \"7\"",
        "num_ids": 487,
        "indeed": true
    },
    {
        "number": 4721,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str((n - 1) * (m - 1))",
        "test": "assert solution(\"3 4\") == \"6\"",
        "num_ids": 179,
        "indeed": true
    },
    {
        "number": 4722,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    common = (A + B) // 3\n    \n    if A >= common and B >= common:\n        return \"Possible\"\n    else:\n        return \"Impossible\"",
        "test": "assert solution(\"100 1\") == \"Impossible\"",
        "num_ids": 271,
        "indeed": false
    },
    {
        "number": 4723,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    S = S.replace('?', '.')\n    T = T.replace('?', '.')\n\n    if T in S:\n        for s in sorted(S):\n            if s.isalpha() and s not in T:\n                T = T.replace('.', s)\n                break\n        return T\n    else:\n        return \"UNRESTORABLE\"",
        "test": "assert solution(\"?t?????\\ncoder\") == \"UNRESTORABLE\"",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 4724,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R, G = map(int, stdin.split())\n    return str((R + G) // 2)",
        "test": "assert solution(\"0\\n4500\") == \"2250\"",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 4725,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # convert the string to a set to get distinct letters\n    distinct_letters = set(stdin)\n    # get the simplicity\n    simplicity = len(distinct_letters)\n    # compute the minimum number of letters to erase\n    min_erase = simplicity - 2 if simplicity > 2 else 0\n    return min_erase ",
        "test": "assert solution(\"string\") == 4",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 4726,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    m, n, t = map(int, stdin.split())\n    complexity = [10000000000, 5000000, 1000000000, 100000000, 10000000, 500000, 19931568]\n    \n    if t == 1:\n        return \"TLE\"\n    elif t == 2:\n        if n * 32768 <= m:\n            return \"AC\"\n        else:\n            return \"TLE\"\n    elif t == 3:\n        if n**4 <= m:\n            return \"AC\"\n        else:\n            return \"TLE\"\n    elif t == 4:\n        if n**3 <= m:\n            return \"AC\"\n        else:\n            return \"TLE\"\n    elif t == 5:\n        if n**2 <= m:\n            return \"AC\"\n        else:\n            return \"TLE\"\n    elif t == 6:\n        if n * 32768 <= m:\n            return \"AC\"\n        else:\n            return \"TLE\"\n    elif t == 7:\n        if n <= m:\n            return \"AC\"\n        else:\n            return \"TLE\"",
        "test": "assert solution(\"100000000 500 3\") == \"TLE\"",
        "num_ids": 892,
        "indeed": false
    },
    {
        "number": 4727,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def move_left(board: list) -> list:\n        def merge(line: list) -> list:\n            result = []\n            i = 0\n            while i < len(line):\n                if i == len(line) - 1 or line[i] != line[i + 1]:\n                    result.append(line[i])\n                    i += 1\n                else:\n                    result.append(line[i] * 2)\n                    i += 2\n            return result\n\n        def pad_zeros(line: list) -> list:\n            zeros = 4 - len(line)\n            return line + [0] * zeros\n\n        moved = []\n        for line in board:\n            merged = merge(line)\n            moved.append(pad_zeros(merged))\n        return moved\n\n    def move_up(board: list) -> list:\n        return move_left(transpose(board))\n\n    def move_right(board: list) -> list:\n        return reverse_rows(move_left(reverse_rows(board)))\n\n    def move_down(board: list) -> list:\n        return reverse_rows(move_up(reverse_rows(board)))\n\n    def transpose(board: list) -> list:\n        return [[board[j][i] for j in range(4)] for i in range(4)]\n\n    def reverse_rows(board: list) -> list:\n        return [line[::-1] for line in board]\n\n    def read_input(stdin: str) -> tuple:\n        lines = stdin.split('\\n')\n        board = [[int(x) for x in line.split()] for line in lines[:4]]\n        direction = int(lines[4])\n        return board, direction\n\n    def write_output(board: list) -> str:\n        return '\\n'.join([' '.join([str(x) for x in line]) for line in board])\n\n    board, direction = read_input(stdin)\n\n    if direction == 0:\n        moved = move_left(board)\n    elif direction == 1:\n        moved = move_up(board)\n    elif direction == 2:\n        moved = move_right(board)\n    else:\n        moved = move_down(board)\n\n    return write_output(moved) ",
        "test": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\\n\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"",
        "num_ids": 2363,
        "indeed": false
    },
    {
        "number": 4728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_molecule, k = stdin.split()\n    k = int(k)\n    output_molecule = input()\n\n    def parse_molecule(molecule: str) -> dict:\n        atom_count = {}\n        i = 0\n        while i < len(molecule):\n            atom = molecule[i]\n            i += 1\n            if i < len(molecule) and molecule[i].isdigit():\n                count = \"\"\n                while i < len(molecule) and molecule[i].isdigit():\n                    count += molecule[i]\n                    i += 1\n                count = int(count) if count else 1\n            else:\n                count = 1\n            if atom in atom_count:\n                atom_count[atom] += count\n            else:\n                atom_count[atom] = count\n        return atom_count\n\n    input_atom_count = parse_molecule(input_molecule)\n    output_atom_count = parse_molecule(output_molecule)\n\n    n = float('inf')\n    for atom, count in output_atom_count.items():\n        if atom not in input_atom_count:\n            return 0\n        n = min(n, input_atom_count[atom] // count)\n\n    return str(n // k)",
        "test": "assert solution(\"C2H6 10\\nC3H8\") == \"6\"",
        "num_ids": 1135,
        "indeed": false
    },
    {
        "number": 4729,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    password, message = stdin.split()\n    p_length = len(password)\n    message = message + password\n\n    for i in range(p_length):\n        if message.find(password[i]) != i:\n            return \"FAIL\"\n        message = message.replace(password[i], \"\", 1)\n\n    return \"PASS\"",
        "test": "assert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"",
        "num_ids": 500,
        "indeed": false
    },
    {
        "number": 4730,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    length = int(lines[0])\n    code = lines[1]\n\n    stack = []\n    mapping = {')': '(', ']': '[', '}': '{'}\n\n    for i, char in enumerate(code):\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack[-1]:\n                return f\"{char} {i}\"\n            stack.pop()\n\n    return 'ok so far' if not stack else f\"{stack[-1]} {i}\"",
        "test": "assert solution(\"8\\n([] [] ]\") == \"] 7\"",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 4731,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    words = lines[1:]\n    last_letter = None\n    player = 1\n\n    for word in words:\n        if last_letter is None:\n            last_letter = word[-1]\n        elif word[0] != last_letter or word in words[:player - 1]:\n            return f\"Player {player} lost\"\n        else:\n            last_letter = word[-1]\n            player = 2 if player == 1 else 1\n\n    return \"Fair Game\"",
        "test": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 4732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, operation, b = stdin.split('\\n')\n    if operation == '+':\n        return str(int(a) + int(b))\n    else:\n        return str(int(a) * int(b))",
        "test": "assert solution(\"10000\\n+\\n10\\n\") == \"10010\"",
        "num_ids": 356,
        "indeed": true
    },
    {
        "number": 4733,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, shuffle_type = stdin.split()\n    n = int(n)\n    \n    if shuffle_type == \"out\":\n        if n % 2 == 0:\n            return str((n // 2) - 1)\n        else:\n            return str((n // 2) + 1)\n    else:\n        if n % 2 == 0:\n            return str((n // 2) + 1)\n        else:\n            return str((n // 2) - 1)",
        "test": "assert solution(\"8 out\") == \"3\"",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 4734,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    y, p = stdin.split()\n    \n    if y[-2:] == \"ex\":\n        return y + p\n    elif y[-1] in \"aeiou\":\n        return y[:-1] + \"ex\" + p\n    elif y[-1] == \"e\":\n        return y + \"x\" + p\n    else:\n        return y + \"ex\" + p",
        "test": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 4735,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin.strip())\n    if year == 2018:\n        return \"yes\"\n    elif (year - 2018) % 26 == 0:\n        return \"yes\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"2019\") == \"no\"",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 4736,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    K = nums[-1]\n    nums = nums[:-1]\n    ans = 0\n    for i in range(K):\n        for j in range(K):\n            if i != j:\n                for k in range(K):\n                    if k != i and k != j:\n                        for l in range(K):\n                            if l != i and l != j and l != k:\n                                for m in range(K):\n                                    if m != i and m != j and m != k and m != l:\n                                        for n in range(K):\n                                            if n != i and n != j and n != k and n != l and n != m:\n                                                for o in range(K):\n                                                    if o != i and o != j and o != k and o != l and o != m and o != n:\n                                                        ans += 1\n                                                        for p in range(K):\n                                                            if p != i and p != j and p != k and p != l and p != m and p != n and p != o:\n                                                                for q in range(K):\n                                                                    if q != i and q != j and q != k and q != l and q != m and q != n and q != o and q != p:\n                                                                        ans += 1\n                                                        ans -= 1\n                                        ans -= 1\n                                ans -= 1\n                        ans -= 1\n                ans -= 1\n    return str(ans)",
        "test": "assert solution(\"4 0 0 0 4 0 0 0 0 4\\n4\") == \"0\"",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 4737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    N, p = input_list[0], input_list[1]\n    problem_estimates = input_list[2:]\n    num_AC = 0\n    penalty_time = 0\n    current_time = problem_estimates[p]\n\n    for i in range(N):\n        if current_time + problem_estimates[i] <= 300:\n            current_time += problem_estimates[i]\n            num_AC += 1\n        else:\n            penalty_time = current_time\n            break\n\n    return f\"{num_AC} {penalty_time}\"",
        "test": "assert solution(\"7 1\\n30 270 995 996 997 998 999\\n\") == \"2 570\"",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 4738,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    for k in range(1, n + 1):\n        if n % k != 0:\n            continue\n        substrings = [s[i:i + k] for i in range(0, n, k)]\n        if all(substrings[i] == substrings[i - 1][1:] + substrings[i - 1][0] for i in range(1, len(substrings))):\n            return k\n    return -1 ",
        "test": "assert solution(\"aaaaaaaa\") == 1",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 4739,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    M, N = map(int, lines[0].split())\n    T = list(map(int, lines[1].split()))\n    X = list(map(int, lines[2].split()))\n\n    if M == 0:\n        return \"0\\n\"\n\n    d = X[1] - X[0]\n    speeds = set()\n    distances = set()\n\n    for i in range(1, M):\n        t_diff = T[i] - T[i - 1]\n        x_diff = X[i] - X[i - 1]\n        if t_diff == 0:\n            continue\n        speed = x_diff / t_diff\n        speeds.add(speed)\n        distances.add(x_diff)\n\n    return f\"{len(speeds)}\\n{' '.join(map(str, sorted(distances)))}\\n\"",
        "test": "assert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n\") == \"1\\n1\\n\"",
        "num_ids": 930,
        "indeed": false
    },
    {
        "number": 4740,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    prefix = int(str(number)[:3])\n    if prefix == 555:\n        return \"1\"\n    else:\n        return \"0\"",
        "test": "assert solution(\"5551212\") == \"1\"",
        "num_ids": 222,
        "indeed": true
    },
    {
        "number": 4741,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    fahrenheit = list(map(int, stdin.split('/')))\n    numerator = fahrenheit[0]\n    denominator = fahrenheit[1]\n\n    if numerator == 0:\n        return \"0/1\"\n\n    celsius_numerator = (numerator - 32) * 5\n    gcd_value = gcd(celsius_numerator, denominator)\n\n    return f\"{celsius_numerator // gcd_value}/{denominator // gcd_value}\"\n\ndef",
        "test": "assert solution(\"33/1\") == \"5/9\"",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 4742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_transposition(m1, m2, n):\n        return m2 == [m1[(i + n) % n] for i in range(n)]\n\n    def is_retrograde(m1, m2, n):\n        return m2 == [m1[n - i - 1] for i in range(n)]\n\n    def is_inversion(m1, m2, n):\n        if m1[0] != m2[0]:\n            return False\n        return m2 == [m1[n - i - 1] if m1[i] != m2[i] else m1[i] for i in range(n)]\n\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    m1 = lines[1].split()\n    m2 = lines[2].split()\n\n    if is_transposition(m1, m2, n):\n        return \"Transposition\"\n    elif is_retrograde(m1, m2, n):\n        return \"Retrograde\"\n    elif is_inversion(m1, m2, n):\n        return \"Inversion\"\n    else:\n        return \"Nonsense\"",
        "test": "assert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"",
        "num_ids": 1276,
        "indeed": false
    },
    {
        "number": 4743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    vowels = \"aeiou\"\n    hard_consonants = \"bcdfgknpst\"\n\n    def replace_consonants(word: str, index: int) -> str:\n        if index == 0:\n            return word\n        if word[0] in hard_consonants:\n            return word[0] + replace_consonants(word[1:], index - 1)\n        else:\n            return word[0] + replace_consonants(word[1:], index)\n\n    def replace_last_consonant(word: str) -> str:\n        for i in range(len(word) - 1, -1, -1):\n            if word[i] in hard_consonants:\n                if i < len(word) - 1 and word[i + 1] in vowels:\n                    return word[:i + 1] + replace_consonants(word[i + 1:], i)\n                else:\n                    return word[:i] + replace_consonants(word[i:], i)\n        return word\n\n    def replace_words(word: str) -> str:\n        if word == \"each\":\n            return \"Dach\"\n        if word == \"hip-po\":\n            return \"Gip-go\"\n        return word\n\n    words = stdin.split()\n    nimion_words = []\n    for word in words:\n        if word[0].isupper():\n            word = word.lower()\n            nimion_word = replace_words(word)\n        else:\n            nimion_word = replace_last_consonant(replace_consonants(word, len(word) - 1))\n        nimion_words.append(nimion_word)\n\n    return \" \".join(nimion_words)",
        "test": "assert solution(\"Cat-a-pil-lar\") == \"Catacillar\"",
        "num_ids": 1313,
        "indeed": false
    },
    {
        "number": 4744,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    V = int(stdin)\n    min_cost = float('inf')\n    for L in range(1, int(V**(1/3))+1):\n        for W in range(1, L+1):\n            if V % (L*W) == 0:\n                H = V // (L*W)\n                cost = 2 * (L*W + L*H + W*H)\n                min_cost = min(min_cost, cost)\n    return str(min_cost)",
        "test": "assert solution('4\\n') == 16",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 4745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, X = map(int, stdin.readline().split())\n    prices = list(map(int, stdin.readline().split()))\n    prices.sort()\n    count = 0\n    for i in range(n-1, -1, -1):\n        if prices[i] <= X:\n            break\n        if i < n-2 and prices[i] + prices[i+1] <= X:\n            i += 2\n        else:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"5 10\\n4 8 1 9 7\") == \"2\"",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 4746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    C, n = map(int, stdin.readline().split())\n    data = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\n    passengers = 0\n    for i in range(n):\n        left, entered, waited = data[i]\n        passengers -= left\n        passengers += entered\n        if waited > passengers:\n            return \"impossible\"\n        if i == n - 1 and passengers != 0:\n            return \"impossible\"\n\n    return \"possible\"",
        "test": "assert solution(\"1 2\\n1 0 0\\n0 1 0\") == \"impossible\"",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 4747,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    expected_score = sum([(i / n) for i in range(1, n + 1)])\n    max_score = n + sum([(n - i) / n for i in range(1, n + 1)]) * min(k - 1, n - 1)\n    return str(max_score * expected_score)",
        "test": "assert solution(\"1 1\") == \"1.0\"",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 4748,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, N, M = map(int, stdin.split())\n    A = 0\n    B = 0\n    for k in range(1, H + 1):\n        if N >= k:\n            N -= k\n        else:\n            A += (k - N) * 2\n            N = 0\n        B += M // k\n        M = M % k\n    return f\"{A} {B}\"",
        "test": "assert solution(\"1 1 0\\n\") == \"0 0\"",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 4749,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    grid = []\n    for i in range(1, n + 1):\n        grid.append(list(stdin.split(\"\\n\")[i]))\n\n    def check_row(row):\n        black_count = row.count(\"B\")\n        white_count = row.count(\"W\")\n        if black_count != white_count:\n            return False\n        for i in range(n - 2):\n            if row[i] == row[i + 1] == row[i + 2]:\n                return False\n        return True\n\n    def check_column(grid, col_num):\n        black_count = 0\n        white_count = 0\n        for i in range(n):\n            if grid[i][col_num] == \"B\":\n                black_count += 1\n            else:\n                white_count += 1\n        if black_count != white_count:\n            return False\n        for i in range(n - 2):\n            if grid[i][col_num] == grid[i + 1][col_num] == grid[i + 2][col_num]:\n                return False\n        return True\n\n    for row in grid:\n        if not check_row(row):\n            return \"0\"\n\n    for i in range(n):\n        if not check_column(grid, i):\n            return \"0\"\n\n    return \"1\"",
        "test": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == \"1\"",
        "num_ids": 1211,
        "indeed": true
    },
    {
        "number": 4750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    queries = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    output = []\n    \n    for l1, r1, l2, r2 in queries:\n        a = l1\n        b = l2\n        if a == b:\n            b = l2 + 1\n        output.append(a)\n        output.append(b)\n    \n    return '\\n'.join(map(str, output))",
        "test": "assert solution(\"5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\" ",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 4751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    head, pos = list(map(int, stdin.split()))\n    if pos == -1:\n        return \"false\"\n    else:\n        return \"true\"",
        "test": "assert solution(\"1,2,1\") == \"true\"",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 4752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    nums, target = map(int, stdin.split())\n    nums = list(map(int, input().split()))\n    \n    hashmap = {}\n    \n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in hashmap:\n            return f\"{hashmap[complement]} {i}\"\n        hashmap[num] = i\n        \n    return \"-1\"",
        "test": "assert solution([3, 2, 4], 6) == [1, 2]",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 4753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 3:\n        return \"0\"\n    else:\n        return f\"{n-3}\"\n\ndef",
        "test": "assert solution(\"4\") == \"1\"",
        "num_ids": 276,
        "indeed": false
    },
    {
        "number": 4754,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def helper(pile1: list, pile2: list) -> int:\n        if not pile1 and not pile2:\n            return 0\n        if not pile1 or not pile2:\n            return float('inf')\n        if pile1[0] == pile2[0]:\n            return helper(pile1[1:], pile2[1:])\n        else:\n            move_top1 = 1 + helper(pile1[1:], pile2)\n            move_top2 = 1 + helper(pile1, pile2[1:])\n            return min(move_top1, move_top2)\n\n    n = int(stdin.split('\\n')[0])\n    socks = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    pile1 = socks[:n]\n    pile2 = socks[n:]\n    pile1.reverse()\n    pile2.reverse()\n\n    min_moves = helper(pile1, pile2)\n\n    if min_moves == float('inf'):\n        return \"impossible\"\n    else:\n        return str(min_moves)",
        "test": "assert solution(\"1\\n3 7\\n\") == \"impossible\"",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 4755,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    c, k = map(int, stdin.split())\n    smallest_bill = 10 ** k\n    nearest_amount = c // smallest_bill * smallest_bill\n    if c % smallest_bill >= smallest_bill // 2:\n        nearest_amount += smallest_bill\n    return str(nearest_amount) ",
        "test": "assert solution(\"123450995 1\") == \"123451000\"",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 4756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def distance(x1, y1, x2, y2):\n        return (x1 - x2) ** 2 + (y1 - y2) ** 2\n\n    def total_unusefulness(a):\n        total = 0\n        for x, y in coordinates:\n            total += distance(x, y, x + a, y - a)\n        return total\n\n    N = int(stdin.readline().strip())\n    coordinates = [tuple(map(int, stdin.readline().strip().split())) for _ in range(N)]\n\n    a = 0\n    min_unusefulness = float('inf')\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            x1, y1 = coordinates[i]\n            x2, y2 = coordinates[j]\n\n            if x1 == x2:\n                a_ = float('inf')\n            else:\n                a_ = (y2 - y1) / (x2 - x1)\n\n            unusefulness = total_unusefulness(a_)\n            if unusefulness < min_unusefulness:\n                min_unusefulness = unusefulness\n                a = a_\n\n    return f\"{a:.6f}\"",
        "test": "assert solution(\"3\\n0 1\\n1 0\\n1 1\") == \"0.000000\"",
        "num_ids": 1042,
        "indeed": false
    },
    {
        "number": 4757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, E = map(int, stdin.split('\\n')[0].split())\n    evenings = [list(map(int, line.split()))[1:] for line in stdin.split('\\n')[1:]]\n\n    # Initialize a set for each villager that contains the songs they know\n    songs = [set() for _ in range(N + 1)]\n\n    # Iterate through evenings\n    for evening in evenings:\n        # If the bard is present, add a new song to his set\n        if 1 in evening:\n            songs[1].add(len(songs[1]))\n\n        # Iterate through the villagers\n        for villager in evening:\n            # If the villager is not the bard, add all the songs he hears to his set\n            if villager != 1:\n                for other_villager in evening:\n                    if other_villager != villager:\n                        songs[villager] = songs[villager].union(songs[other_villager])\n\n    # Find the villagers that know all songs\n    all_songs = set(range(len(songs[1])))\n    known_all = [str(i) for i in range(2, N + 1) if songs[i] == all_songs]\n\n    return '\\n'.join(known_all)",
        "test": "assert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\\n\") == \"1\\n2\\n6\\n8\\n\" ",
        "num_ids": 1362,
        "indeed": false
    },
    {
        "number": 4758,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, t, m = map(int, stdin.split())\n    return str(n * t * m)",
        "test": "assert solution(\"3 4 5\") == \"60\"",
        "num_ids": 177,
        "indeed": true
    },
    {
        "number": 4759,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, at_bats = map(int, stdin.split('\\n'))\n    total_bases, official_at_bats = 0, 0\n\n    for at_bat in at_bats:\n        if at_bat != -1:\n            official_at_bats += 1\n            total_bases += at_bat\n\n    slugging_percentage = total_bases / official_at_bats\n    return f\"{slugging_percentage:.15f}\"",
        "test": "assert solution(\"3\\n1 -1 4\\n\") == \"2.5\"",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 4760,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    nums = [True] * (N + 1)\n    nums[0], nums[1] = False, False\n    count = 0\n    for i in range(2, N + 1):\n        if nums[i]:\n            count += 1\n            if count == K:\n                return i\n            for j in range(i * i, N + 1, i):\n                nums[j] = False\n    return 0",
        "test": "assert solution(\"15 12\") == \"7\"",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 4761,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    L, H = map(int, stdin.split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6:\n            if all(i % int(d) == 0 for d in str(i)):\n                count += 1\n    return str(count)",
        "test": "assert solution(\"123864 123865\") == \"1\"",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 4762,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return f\"{(n - 1) / n:.6f}\"",
        "test": "assert solution('3') == '0.66666667'",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 4763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    target = int(stdin)\n    if target > 180 or target < 1:\n        return \"impossible\"\n\n    def find_solution(target, triple_used=0, double_used=0, single_used=0, current=1):\n        if triple_used + double_used + single_used == 3 and target == 0:\n            return True\n        if current > 20 or triple_used + double_used + single_used >= 3:\n            return False\n\n        if find_solution(target, triple_used + 1, double_used, single_used, current + 1):\n            return \"triple \" + str(current) + \"\\n\"\n        if find_solution(target, triple_used, double_used + 1, single_used, current + 1):\n            return \"double \" + str(current) + \"\\n\"\n        if find_solution(target, triple_used, double_used, single_used + 1, current + 1):\n            return \"single \" + str(current) + \"\\n\"\n\n        return False\n\n    solution = find_solution(target)\n    if solution:\n        return solution\n    else:\n        return \"impossible\"",
        "test": "assert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 4764,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, h, v = map(int, stdin.split())\n\n    # Calculate the area of the four pieces\n    piece1 = (h * (n - v)) * 4\n    piece2 = (h * v) * 4\n    piece3 = ((n - h) * v) * 4\n    piece4 = ((n - h) * (n - v)) * 4\n\n    # Find the largest piece\n    largest_piece = max(piece1, piece2, piece3, piece4)\n\n    return str(largest_piece)",
        "test": "assert solution(\"10 4 7\") == \"168\"",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 4765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    ingredients = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n\n    sourness = 1\n    bitterness = 0\n\n    for ingredient in ingredients:\n        sourness *= ingredient[0]\n        bitterness += ingredient[1]\n\n    return str(abs(sourness - bitterness))",
        "test": "assert solution(\"2\\n3 8\\n5 8\\n\") == \"1\"",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 4766,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    output = []\n    for i in range(1, n+1):\n        command = lines[i]\n        if command.startswith(\"Simon says\"):\n            output.append(command[11:])\n    return '\\n'.join(output)",
        "test": "assert solution(\"3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\") == \" raise your right hand.\\n raise your left hand.\"",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 4767,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    registers = list(map(int, stdin.split()))\n    max_registers = [2, 3, 5, 7, 11, 13, 17, 19]\n    count = 0\n\n    def increment():\n        for i in range(len(registers)):\n            if registers[i] == max_registers[i] - 1:\n                registers[i] = 0\n            else:\n                registers[i] += 1\n                return True\n        return False\n\n    while increment():\n        count += 1\n\n    return str(count)",
        "test": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 4768,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def hamming_distance(s1, s2):\n        return sum(c1 != c2 for c1, c2 in zip(s1, s2))\n\n    def min_unlikeliness(samples):\n        n = len(samples)\n        min_unlikeliness = float('inf')\n        min_tree = None\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    d1 = hamming_distance(samples[i], samples[j])\n                    d2 = hamming_distance(samples[i], samples[k])\n                    d3 = hamming_distance(samples[j], samples[k])\n\n                    total_distance = d1 + d2 + d3\n                    if total_distance < min_unlikeliness:\n                        min_unlikeliness = total_distance\n                        min_tree = [(i, j), (i, k), (j, k)]\n\n        return min_unlikeliness, min_tree\n\n    n, k = map(int, stdin.readline().strip().split())\n    samples = [stdin.readline().strip() for _ in range(n)]\n\n    min_unlikeliness, min_tree = min_unlikeliness(samples)\n\n    output = [str(min_unlikeliness)]\n    for edge in min_tree:\n        output.append(' '.join(map(str, edge)))\n\n    return '\\n'.join(output)",
        "test": "assert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\\n0 1\\n0 2\\n0 3\"",
        "num_ids": 1553,
        "indeed": false
    },
    {
        "number": 4769,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_anagram(word1, word2):\n        return sorted(word1) == sorted(word2)\n\n    def find_shortest_root(word):\n        for i in range(1, len(word) // 2 + 1):\n            if is_anagram(word[:i], word[i:2 * i]):\n                return word[:i]\n        return None\n\n    word = stdin.strip()\n    root = find_shortest_root(word)\n\n    if root:\n        return root\n    else:\n        return \"-1\"\n",
        "test": "assert solution(\"ab\") == \"-1\"",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 4770,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N == M:\n        return \"Dr. Chaz will have no chicken left over!\"\n    elif N < M:\n        P = M - N\n        return f\"Dr. Chaz will have {P} piece{'s' if P > 1 else ''} of chicken left over!\"\n    else:\n        Q = N - M\n        return f\"Dr. Chaz needs {Q} more piece{'s' if Q > 1 else ''} of chicken!\"",
        "test": "assert solution(\"2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\"",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 4771,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, V = map(int, lines[0].split())\n\n    volumes = []\n    for i in range(1, n + 1):\n        l, w, h = map(int, lines[i].split())\n        volumes.append(l * w * h)\n\n    largest_volume = max(volumes)\n    largest_d = largest_volume - V\n\n    return str(largest_d)",
        "test": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"-2\"",
        "num_ids": 554,
        "indeed": true
    },
    {
        "number": 4772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.readline().split())\n    crossword = []\n    for i in range(R):\n        crossword.append(stdin.readline().strip())\n\n    words = []\n    for i in range(R):\n        row_word = \"\"\n        for j in range(C):\n            if crossword[i][j].isalpha():\n                row_word += crossword[i][j]\n            else:\n                if len(row_word) >= 2:\n                    words.append(row_word)\n                row_word = \"\"\n        if len(row_word) >= 2:\n            words.append(row_word)\n\n    for i in range(C):\n        col_word = \"\"\n        for j in range(R):\n            if crossword[j][i].isalpha():\n                col_word += crossword[j][i]\n            else:\n                if len(col_word) >= 2:\n                    words.append(col_word)\n                col_word = \"\"\n        if len(col_word) >= 2:\n            words.append(col_word)\n\n    return min(words)",
        "test": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\"",
        "num_ids": 1079,
        "indeed": false
    },
    {
        "number": 4773,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    route = stdin\n    length = len(route)\n    if length <= 10:\n        return length\n\n    def find_macro(route: str) -> str:\n        for i in range(1, length // 2 + 1):\n            if length % i == 0:\n                if route[:i] * (length // i) == route:\n                    return route[:i]\n        return \"\"\n\n    macro = find_macro(route)\n    if not macro:\n        return length\n\n    macro_length = len(macro)\n    macro_count = length // macro_length\n    macro_char = route[0]\n    for i in range(macro_length):\n        if macro[i] != macro_char:\n            macro_char = 'M'\n            break\n\n    encoded = macro_char * macro_count + macro\n    return len(encoded)",
        "test": "assert solution(\"NSEW\") == 4",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 4774,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    valid_expressions = []\n\n    # Check for addition\n    if c - d == a + b:\n        valid_expressions.append(f\"{a} + {b} = {c} + {d}\")\n    if c - d == a - b:\n        valid_expressions.append(f\"{a} - {b} = {c} - {d}\")\n    if c - d == a * b:\n        valid_expressions.append(f\"{a} * {b} = {c} * {d}\")\n    if b != 0 and c - d == a / b:\n        valid_expressions.append(f\"{a} / {b} = {c} / {d}\")\n\n    if valid_expressions:\n        return \"\\n\".join(sorted(valid_expressions))\n    else:\n        return \"problems ahead\"",
        "test": "assert solution(\"0 4 2 2\\n\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n\"",
        "num_ids": 926,
        "indeed": false
    },
    {
        "number": 4775,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    N = len(A)\n    M = len(B)\n\n    first_shared_letter = None\n    for letter in A:\n        if letter in B and (first_shared_letter is None or A.index(letter) < A.index(first_shared_letter)):\n            first_shared_letter = letter\n\n    A_index = A.index(first_shared_letter)\n    B_index = B.index(first_shared_letter)\n\n    output = []\n    for i in range(M):\n        line = [' '] * N\n        if i == B_index:\n            line[A_index] = first_shared_letter\n        output.append(line)\n\n    for i, letter in enumerate(A):\n        output[B_index][i] = letter\n\n    output = [''.join(line).replace(' ', '.') for line in output]\n    return '\\n'.join(output)",
        "test": "assert solution(\"MAMA TATA\") == \".T..\\nMAMA\\n.T..\\n.A..\"",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 4776,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    days = set()\n    \n    for i in range(1, N+1):\n        s, t = map(int, stdin.split(\"\\n\")[i].split())\n        for j in range(s, t+1):\n            days.add(j)\n            \n    return str(len(days))",
        "test": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"",
        "num_ids": 506,
        "indeed": true
    },
    {
        "number": 4777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    a_count = 0\n    b_count = 1\n    for i in range(k):\n        if i % 2 == 0:\n            a_count += b_count\n        else:\n            b_count += a_count\n    return f\"{a_count} {b_count}\"",
        "test": "assert solution(\"4\") == \"2 3\"",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 4778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def get_winner(a, b):\n        return \"A\" if a > b else \"B\"\n\n    def get_efficiency_gap(V, w_A, w_B):\n        return abs(w_A - w_B) / V\n\n    def process_precincts(precincts, districts):\n        district_votes = [{\"A\": 0, \"B\": 0} for _ in range(districts)]\n        for i, (district, a_votes, b_votes) in enumerate(precincts):\n            district_votes[district - 1][\"A\"] += a_votes\n            district_votes[district - 1][\"B\"] += b_votes\n\n        results = []\n        for votes in district_votes:\n            a_votes, b_votes = votes[\"A\"], votes[\"B\"]\n            total_votes = a_votes + b_votes\n            winner = get_winner(a_votes, b_votes)\n            wasted_a = a_votes if winner == \"B\" else 0\n            wasted_b = b_votes if winner == \"A\" else 0\n            results.append((winner, wasted_a, wasted_b))\n\n        return results\n\n    def get_efficiency_gap_over_districts(results, V):\n        total_wasted_a = sum(wasted_a for _, wasted_a, _ in results)\n        total_wasted_b = sum(wasted_b for _, _, wasted_b in results)\n        return get_efficiency_gap(V, total_wasted_a, total_wasted_b)\n\n    lines = stdin.split(\"\\n\")\n    P, D = map(int, lines[0].split())\n    precincts = [list(map(int, line.split())) for line in lines[1:P+1]]\n\n    results = process_precincts(precincts, D)\n    efficiency_gap = get_efficiency_gap_over_districts(results, P)\n\n    output = []\n    for winner, wasted_a, wasted_b in results:\n        output.append(f\"{winner} {wasted_a} {wasted_b}\")\n    output.append(f\"{efficiency_gap:.6f}\")\n\n    return \"\\n\".join(output)",
        "test": "assert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\" ",
        "num_ids": 2219,
        "indeed": false
    },
    {
        "number": 4779,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_expression(a, k):\n        return (sum(a[:k]) ** 2) * (sum(a[k:]))\n\n    input_list = list(map(int, stdin.split()))\n    n = input_list[0]\n    a = input_list[1:]\n    max_value = 0\n\n    for k in range(1, n):\n        current_value = calculate_expression(a, k)\n        max_value = max(max_value, current_value)\n\n    return str(max_value)",
        "test": "assert solution(\"2\\n1\\n1\") == \"1\"",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 4780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def reverse_row(row: str) -> str:\n        return \"\".join(reversed(row))\n\n    def swap_ants(row1: str, row2: str, index: int) -> tuple:\n        return row1[:index] + row2[index] + row1[index + 1:], row2[:index] + row1[index] + row2[index + 1:]\n\n    N1, N2, row1, row2, T = stdin.split(\"\\n\")\n    N1, N2, T = map(int, [N1, N2, T])\n    row1, row2 = row1[:N1], row2[:N2]\n    row1_reversed = reverse_row(row1)\n    row2_reversed = reverse_row(row2)\n\n    for _ in range(T):\n        for i in range(1, N1):\n            if row1[i - 1] > row1[i]:\n                row1, row2 = swap_ants(row1, row2, i)\n        for i in range(1, N2):\n            if row2[i - 1] < row2[i]:\n                row2, row1 = swap_ants(row2, row1, i)\n\n    return row1_reversed + row2_reversed",
        "test": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 4781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    initial_player = int(input_data[0])\n    num_questions = int(input_data[1])\n    question_data = input_data[2:]\n\n    current_player = initial_player\n    box_explosion_time = 210  # 3 minutes and 30 seconds\n    time_passed = 0\n\n    for i in range(num_questions):\n        time, answer = question_data[i].split()\n        time_passed += int(time)\n\n        if answer == \"T\" or answer == \"N\":\n            current_player = (current_player - 1) % 8 + 1\n            time_passed += 10  # time for passing the box\n\n        if time_passed >= box_explosion_time:\n            break\n\n    return str(current_player)",
        "test": "assert solution(\"\"\"1",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 4782,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    total_cost = sum(range(1, m + 1))\n    return str(total_cost)",
        "test": "assert solution(\"4 3\") == \"6\"",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 4783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def bfs(matrix, start_x, start_y, target_x, target_y):\n        m, n = len(matrix), len(matrix[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        queue = deque([((start_x, start_y), 0)])\n        visited[start_x][start_y] = True\n\n        while queue:\n            (x, y), height = queue.popleft()\n\n            if x == target_x and y == target_y:\n                return height\n\n            for dx, dy in [(-1, 0), (0, -1), (1, 0), (0, 1)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:\n                    if matrix[nx][ny] > matrix[x][y]:\n                        visited[nx][ny] = True\n                        queue.append(((nx, ny), matrix[nx][ny] - matrix[x][y]))\n\n        return -1\n\n    input_data = list(map(int, stdin.split()))\n    m, n = input_data[0], input_data[1]\n    matrix = [input_data[i + 1:i + 1 + n] for i in range(1, m * n + 1, n)]\n\n    result = bfs(matrix, 0, 0, m - 1, n - 1)\n\n    return str(result)",
        "test": "assert solution(\"\"\"3 3",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 4784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    input_data = list(map(int, stdin.split()))\n    X = input_data[0]\n    N = input_data[1]\n    P = input_data[2:]\n    \n    # Calculate megabytes spent and carried over to the next month\n    megabytes_spent = sum(P)\n    megabytes_carried = 0\n    for i in range(N):\n        megabytes_carried += min(X - P[i], P[i+1] if i < N-1 else 0)\n    \n    # Calculate remaining megabytes\n    remaining_megabytes = X - megabytes_spent + megabytes_carried\n    \n    return str(remaining_megabytes)",
        "test": "assert solution(\"10\\n3\\n10\\n2\\n12\\n\") == \"16\"",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 4785,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    if 'ss' in stdin:\n        return 'hiss'\n    else:\n        return 'no hiss'",
        "test": "assert solution(\"amiss\") == \"hiss\"",
        "num_ids": 167,
        "indeed": true
    },
    {
        "number": 4786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    keywords = [stdin.readline().strip().lower().replace('-', ' ') for _ in range(n)]\n\n    def is_similar(k1: str, k2: str) -> bool:\n        return k1 == k2\n\n    unique_keywords = set()\n    for k in keywords:\n        if not any(is_similar(k, k_u) for k_u in unique_keywords):\n            unique_keywords.add(k)\n\n    return str(len(unique_keywords))",
        "test": "assert solution(\"5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux\") == \"5\"",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 4787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    tablet = stdin.count('T')\n    compass = stdin.count('C')\n    gear = stdin.count('G')\n\n    tablet_points = tablet ** 2\n    compass_points = compass ** 2\n    gear_points = gear ** 2\n\n    sets = 0\n    for i in range(len(stdin) - 2):\n        if stdin[i:i+3] in ['TTT', 'CCC', 'GGG']:\n            sets += 1\n\n    total_points = tablet_points + compass_points + gear_points + (sets * 7)\n\n    return str(total_points) ",
        "test": "assert solution(\"CCC\") == 9",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 4788,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = map(int, stdin.split())\n    diff = n2 - n1\n    if diff < -180:\n        diff += 360\n    elif diff > 180:\n        diff -= 360\n    return str(diff)",
        "test": "assert solution(\"180\\n270\") == \"90\"",
        "num_ids": 407,
        "indeed": true
    },
    {
        "number": 4789,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    K = int(stdin[0])\n    desk_numbers = list(map(int, stdin[1:]))\n\n    passes = 0\n    visited = []\n\n    while len(visited) < K:\n        for desk_number in desk_numbers:\n            if desk_number not in visited:\n                visited.append(desk_number)\n                passes += 1\n                visited.sort()\n                if visited == desk_numbers[:len(visited)]:\n                    break\n\n    return str(passes)",
        "test": "assert solution(\"5\\n11\\n20\\n33\\n40\\n55\") == \"1\" ",
        "num_ids": 621,
        "indeed": false
    },
    {
        "number": 4790,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    black_stones = stdin.count('B')\n    white_stones = stdin.count('W')\n    \n    if black_stones == 0 or white_stones == 0:\n        return '1'\n    \n    if abs(black_stones - white_stones) > 2:\n        return '0'\n    \n    if black_stones == white_stones:\n        return '1'\n    \n    if black_stones > white_stones:\n        if stdin.startswith('B') and stdin[1] == 'W':\n            return '0'\n        elif stdin.endswith('B') and stdin[-2] == 'W':\n            return '0'\n        else:\n            return '1'\n    \n    if white_stones > black_stones:\n        if stdin.startswith('W') and stdin[1] == 'B':\n            return '0'\n        elif stdin.endswith('W') and stdin[-2] == 'B':\n            return '0'\n        else:\n            return '1'",
        "test": "assert solution(\"WWWWBBW\") == \"0\"",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 4791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3, s4 = map(int, stdin.split())\n\n    # Calculate the semi-perimeter\n    p = (s1 + s2 + s3 + s4) / 2\n\n    # Calculate the area using Heron's formula\n    area = (p * (p - s1) * (p - s2) * (p - s3) * (p - s4)) ** 0.5\n\n    return f\"{area:.7f}\"",
        "test": "assert solution(\"1 2 1 1\") == \"1.299038105676658\"",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 4792,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin\n    result = \"\"\n    prev_char = \"\"\n    count = 1\n    for char in name:\n        if char == prev_char:\n            count += 1\n        else:\n            result += char\n            count = 1\n        prev_char = char\n    return result ",
        "test": "assert solution(\"robert\") == \"robert\"",
        "num_ids": 382,
        "indeed": true
    },
    {
        "number": 4793,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, v1, v2 = list(map(int, stdin.split()))\n    total_bottles = s // v1\n    remaining_volume = s % v1\n    second_bottles = remaining_volume // v2\n    total_bottles += second_bottles\n    if remaining_volume % v2 != 0:\n        return \"Impossible\"\n    return f\"{total_bottles} {second_bottles}\"",
        "test": "assert solution(\"1000 900 7\") == \"Impossible\"",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 4794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.readline().split())\n    map_list = []\n    for i in range(R):\n        map_list.append(list(stdin.readline().strip()))\n\n    def check_parking(map_list, start_row, start_col, num_squash):\n        if start_row < 0 or start_row >= R or start_col < 0 or start_col >= C:\n            return False\n        if num_squash < 0:\n            return False\n        if map_list[start_row][start_col] == '#':\n            return False\n        if map_list[start_row][start_col] == 'X':\n            return check_parking(map_list, start_row - 1, start_col, num_squash - 1) or \\\n                   check_parking(map_list, start_row + 1, start_col, num_squash - 1) or \\\n                   check_parking(map_list, start_row, start_col - 1, num_squash - 1) or \\\n                   check_parking(map_list, start_row, start_col + 1, num_squash - 1)\n        if map_list[start_row][start_col] == '.':\n            return True\n\n    total_spaces = 0\n    for i in range(R):\n        for j in range(C):\n            if map_list[i][j] == '.':\n                total_spaces += 1\n\n    result = [0, 0, 0, 0, 0]\n    for i in range(R):\n        for j in range(C):\n            if map_list[i][j] == '.':\n                for num_squash in range(5):\n                    if check_parking(map_list, i, j, num_squash):\n                        result[num_squash] += 1\n\n    return f\"{result[0]}\\n{result[1]}\\n{result[2]}\\n{result[3]}\\n{result[4]}\"",
        "test": "assert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"",
        "num_ids": 1362,
        "indeed": false
    },
    {
        "number": 4795,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    P = [int(x) for x in lines[1:]]\n\n    X = 0\n    for i in range(N):\n        number = int(str(P[i])[:-1])\n        power = int(str(P[i])[-1])\n        X += number ** power\n\n    return str(X)",
        "test": "assert solution(\"5\\n23\\n17\\n43\\n52\\n22\") == \"102\"",
        "num_ids": 588,
        "indeed": true
    },
    {
        "number": 4796,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, I, J, K = list(map(int, stdin.split()))\n    cocktail_amount = min(A / I, B / J, C / K)\n    leftover_orange = A - cocktail_amount * I\n    leftover_apple = B - cocktail_amount * J\n    leftover_pineapple = C - cocktail_amount * K\n    return f\"{leftover_orange:.6f} {leftover_apple:.6f} {leftover_pineapple:.6f}\"",
        "test": "assert solution(\"9 9 9\\n3 2 1\") == \"0.000000 3.000000 6.000000\"",
        "num_ids": 735,
        "indeed": true
    },
    {
        "number": 4797,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for char in stdin:\n        if char == '<':\n            if stack:\n                stack.pop()\n        else:\n            stack.append(char)\n    return ''.join(stack)",
        "test": "assert solution(\"a<bc<\") == \"b\"",
        "num_ids": 265,
        "indeed": true
    },
    {
        "number": 4798,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split('-')\n    short_variation = ''.join([word[0] for word in words])\n    return short_variation",
        "test": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"",
        "num_ids": 215,
        "indeed": true
    },
    {
        "number": 4799,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    g, s, c = map(int, stdin.split())\n    victory_cards = {'Province': (8, 6), 'Duchy': (5, 3), 'Estate': (2, 1)}\n    treasure_cards = {'Gold': (6, 3), 'Silver': (3, 2), 'Copper': (0, 1)}\n    best_victory_card = ''\n    best_treasure_card = ''\n\n    total_buying_power = g * 3 + s * 2 + c\n\n    for victory_card, victory_card_info in victory_cards.items():\n        if total_buying_power >= victory_card_info[0]:\n            best_victory_card = victory_card\n            break\n\n    for treasure_card, treasure_card_info in treasure_cards.items():\n        if total_buying_power >= treasure_card_info[0]:\n            best_treasure_card = treasure_card\n            break\n\n    if best_victory_card and best_treasure_card:\n        return best_victory_card + ' or ' + best_treasure_card\n    elif best_treasure_card:\n        return best_treasure_card\n    else:\n        return 'None'",
        "test": "assert solution(\"0 1 0\") == \"Estate or Copper\"",
        "num_ids": 959,
        "indeed": true
    },
    {
        "number": 4800,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    d, s = map(int, stdin.split()[1].split())\n\n    if k > n:\n        return \"impossible\"\n\n    total_difficulty = (n - k) * d + k * s\n    avg_difficulty = total_difficulty / n\n\n    return f\"{avg_difficulty:.6f}\"",
        "test": "assert solution(\"10 3\\n80 90\") == \"75.7142857\"",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 4801,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input data\n    N = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n\n    # Initialize the GIS\n    gis = [A[0]]\n\n    # Compute the GIS\n    for i in range(1, N):\n        if A[i] > gis[-1]:\n            gis.append(A[i])\n\n    # Format the output\n    output = str(len(gis)) + '\\n'\n    output += ' '.join(map(str, gis))\n\n    return output",
        "test": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"",
        "num_ids": 670,
        "indeed": true
    },
    {
        "number": 4802,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, M = map(int, stdin.split())\n    \n    M -= 45\n    if M < 0:\n        H -= 1\n        M += 60\n    if H < 0:\n        H += 24\n    \n    return f\"{H} {M}\"",
        "test": "assert solution(\"10 10\") == \"9 25\"",
        "num_ids": 407,
        "indeed": true
    },
    {
        "number": 4803,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = float(stdin.strip())\n    a = (n ** (1 / n)) ** (1 / 2)\n    return f\"{a:.6f}\"",
        "test": "assert solution(\"1.000000\") == \"1.000000\"",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 4804,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin)\n    output = []\n    \n    for i in range(1, S + 1):\n        if S % i == 0:\n            for j in range(1, S // i + 1):\n                if i * j <= S and (j <= i or i * (j - 1) >= S):\n                    output.append(f\"{i},{j}\")\n                    \n    output.sort(key=lambda x: (int(x.split(',')[0]), int(x.split(',')[1])))\n    \n    return f\"{S}:\\n\" + \"\\n\".join(output) + \"\\n\"",
        "test": "assert solution(\"50\") == \"50:\\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\\n\"",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 4805,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    if len(words) != len(set(words)):\n        return \"no\"\n    return \"yes\"",
        "test": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 4806,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    mech_moves = []\n    counter = 0\n    combo = False\n    for i, move in enumerate(stdin):\n        if move == 'R':\n            if combo:\n                mech_moves.append('C')\n                counter += 1\n                combo = False\n            mech_moves.append('S')\n            counter += 1\n        elif move == 'B':\n            if combo:\n                mech_moves.append('C')\n                counter += 1\n                combo = False\n            mech_moves.append('K')\n            counter += 1\n        else:\n            if combo:\n                mech_moves.append('C')\n                counter += 1\n                combo = False\n            mech_moves.append('H')\n            counter += 1\n        \n        if not combo:\n            if i < len(stdin) - 2 and stdin[i:i+3] in ['RBL', 'RLB', 'LBR', 'LBR', 'BRL', 'BR']:\n                combo = True\n    \n    if combo:\n        mech_moves.append('C')\n        counter += 1\n    \n    return ''.join(mech_moves)",
        "test": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 4807,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, N = map(int, stdin.split())\n    result = []\n\n    for i in range(1, N + 1):\n        if i % X == 0 and i % Y == 0:\n            result.append(\"FizzBuzz\")\n        elif i % X == 0:\n            result.append(\"Fizz\")\n        elif i % Y == 0:\n            result.append(\"Buzz\")\n        else:\n            result.append(str(i))\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n\"",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 4808,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, d_m = map(int, stdin.split('\\n')[0].split())\n    d = list(map(int, stdin.split('\\n')[1].split()))\n\n    k = n\n    for i in range(n - 1):\n        if d[i] > d[i + 1]:\n            k = i + 1\n            break\n\n    if k < n:\n        return f\"It hadn't snowed this early in {k} years!\"\n    else:\n        return \"It had never snowed this early!\"",
        "test": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 4809,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, n = map(int, stdin.split())\n    players = [i for i in range(1, n+1)]\n    index = 0\n    while len(players) > 1:\n        next_index = (index + s) % len(players)\n        if next_index < index:\n            players.pop(next_index)\n        else:\n            players.pop(0)\n            players.append(players.pop(0))\n            players = players[next_index:] + players[:next_index]\n        index = players.index(players[0])\n    return str(players[0])",
        "test": "assert solution(\"10 2\") == \"2\"",
        "num_ids": 684,
        "indeed": false
    },
    {
        "number": 4810,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    message = list(stdin)\n    n = len(message)\n\n    def create_matrix(rows, cols, order='row'):\n        matrix = []\n        for i in range(rows):\n            row = []\n            for j in range(cols):\n                if order == 'row':\n                    if len(message) > 0:\n                        row.append(message.pop(0))\n                    else:\n                        row.append('')\n                elif order == 'col':\n                    if len(message) > 0:\n                        matrix[j].append(message.pop(0))\n                    else:\n                        matrix[j].append('')\n            matrix.append(row)\n        return matrix\n\n    def find_matrix(n):\n        for i in range(1, n + 1):\n            if n % i == 0:\n                rows = i\n                cols = n // i\n                matrix = create_matrix(rows, cols, 'row')\n                if rows > 1:\n                    for j in range(cols):\n                        if ''.join(matrix[i][j] for i in range(rows)) == '':\n                            matrix.pop(j)\n                            break\n                    return matrix\n                else:\n                    return matrix\n\n    matrix = find_matrix(n)\n    decrypted_message = []\n    for j in range(len(matrix[0])):\n        for i in range(len(matrix)):\n            decrypted_message.append(matrix[i][j])\n    return ''.join(decrypted_message)",
        "test": "assert solution(\"bok\") == \"bok\"",
        "num_ids": 797,
        "indeed": false
    },
    {
        "number": 4811,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    \n    if k == 1:\n        return \"1 0\"\n    \n    num_breaks = 0\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n        num_breaks += 1\n    \n    if k == bar_size:\n        return f\"{bar_size} {num_breaks - 1}\"\n    else:\n        return f\"{bar_size} {num_breaks}\"",
        "test": "assert solution(\"7\") == \"8 3\"",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 4812,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    common_word = input_list[0]\n    num_lists = int(input_list[1])\n    ending_lists = input_list[2:2 + num_lists]\n    num_phrases = int(input_list[2 + num_lists])\n    phrases = input_list[-num_phrases:]\n\n    def find_rhyming_words(common_word, ending_lists):\n        common_word_end = common_word[-1]\n        for ending_list in ending_lists:\n            for ending in ending_list.split():\n                if common_word_end == ending:\n                    return ending_list.split()\n        return None\n\n    def check_rhyme(phrase, rhyming_words):\n        if rhyming_words is not None:\n            for word in phrase.split():\n                if word in rhyming_words:\n                    return 'YES'\n        return 'NO'\n\n    rhyming_words = find_rhyming_words(common_word, ending_lists)\n    results = [check_rhyme(phrase, rhyming_words) for phrase in phrases]\n    return '\\n'.join(results)",
        "test": "assert solution(\"drought\\n2\\naught ought autacht\\nought oubt outte out oute\\n5\\ntasty sprout\\ndifficult route\\nworried and fraught\\nforever in doubt\\napples and pears\") == \"YES\\nYES\\nYES\\nYES\\nNO\"",
        "num_ids": 1192,
        "indeed": false
    },
    {
        "number": 4813,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    word, alphabet = stdin.split('\\n')\n    alphabet = list(alphabet)\n    guessed_letters = set()\n    turns = 0\n\n    while turns < 10:\n        letter = alphabet.pop(0)\n        if letter in word and letter not in guessed_letters:\n            guessed_letters.add(letter)\n            if set(word) == guessed_letters:\n                return \"WIN\"\n        else:\n            turns += 1\n\n    return \"LOSE\"",
        "test": "assert solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"WIN\"",
        "num_ids": 553,
        "indeed": true
    },
    {
        "number": 4814,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Split input into separate lines\n    lines = stdin.splitlines()\n    # Get the number of players from the first line\n    n = int(lines[0])\n    # Get the list of player names from the following lines\n    names = lines[1:]\n\n    # Check if the list is in increasing alphabetical order\n    increasing = all(names[i] <= names[i + 1] for i in range(n - 1))\n\n    # Check if the list is in decreasing alphabetical order\n    decreasing = all(names[i] >= names[i + 1] for i in range(n - 1))\n\n    # Determine the output\n    if increasing:\n        output = \"INCREASING\"\n    elif decreasing:\n        output = \"DECREASING\"\n    else:\n        output = \"NEITHER\"\n\n    return output",
        "test": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"",
        "num_ids": 823,
        "indeed": true
    },
    {
        "number": 4815,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    input_data = stdin.split('\\n')\n    n, p, m = map(int, input_data[0].split())\n    players = input_data[1:n+1]\n    scores = {}\n    for i in range(n+1, n+m+1):\n        name, score = input_data[i].split()\n        score = int(score)\n        if name in scores:\n            scores[name] += score\n        else:\n            scores[name] = score\n    \n    # Find winners\n    winners = []\n    for player, points in scores.items():\n        if points >= p:\n            winners.append(player)\n    \n    # Generate output\n    output = \"\"\n    if winners:\n        for winner in winners:\n            output += f\"{winner} wins!\\n\"\n    else:\n        output += \"No winner!\"\n    \n    return output",
        "test": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nGeorge 3\\nKelly 1\") == \"George wins!\\n\"",
        "num_ids": 1117,
        "indeed": false
    },
    {
        "number": 4816,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y, x1, y1, x2, y2 = map(int, stdin.split())\n\n    def distance(x1, y1, x2, y2):\n        return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n\n    min_distance = float('inf')\n\n    # Check if the goat is outside the house on the left side\n    if x < x1:\n        min_distance = min(min_distance, distance(x, y, x1, y))\n\n    # Check if the goat is outside the house on the right side\n    if x > x2:\n        min_distance = min(min_distance, distance(x, y, x2, y))\n\n    # Check if the goat is outside the house on the bottom side\n    if y < y1:\n        min_distance = min(min_distance, distance(x, y, x, y1))\n\n    # Check if the goat is outside the house on the top side\n    if y > y2:\n        min_distance = min(min_distance, distance(x, y, x, y2))\n\n    # Check if the goat is inside the house\n    if x1 <= x <= x2 and y1 <= y <= y2:\n        min_distance = min(min_distance, min(distance(x, y, x1, y), distance(x, y, x2, y), distance(x, y, x, y1), distance(x, y, x, y2)))\n\n    return '{:.1f}'.format(min_distance, 1)",
        "test": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"",
        "num_ids": 958,
        "indeed": false
    },
    {
        "number": 4817,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    digits = [int(d) for d in str(x)]\n    \n    # If all digits are the same, there is no larger number with the same digits\n    if len(set(digits)) == 1:\n        return \"0\"\n    \n    # Find the index of the first digit that is smaller than the previous digit\n    i = len(digits) - 1\n    while i > 0 and digits[i] <= digits[i-1]:\n        i -= 1\n    \n    # If we reach the beginning of the list, there is no larger number with the same digits\n    if i == 0:\n        return \"0\"\n    \n    # Swap the first digit that is smaller than the previous digit with the smallest digit that is larger than it\n    j = len(digits) - 1\n    while digits[j] <= digits[i-1]:\n        j -= 1\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    \n    # Reverse the digits after the swapped digit\n    digits[i:] = digits[len(digits)-1:i-1:-1]\n    \n    return \"\".join(str(d) for d in digits) ",
        "test": "assert solution(\"330\") == \"0\"",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 4818,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    tasks = list(map(int, stdin.split()[2:n+2]))\n    intervals = list(map(int, stdin.split()[n+2:n+m+2]))\n\n    tasks.sort(reverse=True)\n    intervals.sort()\n\n    count = 0\n    i = 0\n    for interval in intervals:\n        while i < n and tasks[i] <= interval:\n            i += 1\n        if i < n:\n            count += 1\n            i += 1\n        else:\n            break\n\n    return str(count)",
        "test": "assert solution(\"4 4\\n180000 185000 199999 100000\\n19999 180000 170000 120000\") == \"3\" ",
        "num_ids": 950,
        "indeed": false
    },
    {
        "number": 4819,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(x) % 42 for x in stdin.split('\\n')]\n    distinct_nums = set(nums)\n    return str(len(distinct_nums))",
        "test": "assert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"",
        "num_ids": 272,
        "indeed": true
    },
    {
        "number": 4820,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, b = map(int, stdin.split())\n    if N == 1:\n        return \"yes\"\n    return \"yes\" if N * 1000 <= 2 ** b else \"no\"",
        "test": "assert solution(\"1 0\\n\") == \"yes\"",
        "num_ids": 330,
        "indeed": false
    },
    {
        "number": 4821,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    missing_cards = [13] * 4\n    cards = set()\n\n    for i in range(0, len(stdin), 3):\n        suit = stdin[i]\n        number = int(stdin[i + 1:i + 3])\n        card = suit + str(number).zfill(2)\n\n        if card in cards:\n            return \"GRESKA\"\n\n        cards.add(card)\n        suit_index = \"PKHT\".index(suit)\n        missing_cards[suit_index] -= 1\n\n    return \" \".join(map(str, missing_cards))",
        "test": "assert solution(\"H02H10P11H02\") == \"GRESKA\"",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 4822,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    R, S, K = map(int, stdin.readline().split())\n    picture = []\n    for _ in range(R):\n        picture.append(list(stdin.readline().strip()))\n\n    # Initialize variables\n    max_flies = 0\n    max_position = (0, 0)\n\n    # Check all possible positions\n    for i in range(R - K + 1):\n        for j in range(S - K + 1):\n            # Check if the current position is valid\n            if picture[i][j] == '*' and picture[i + K - 1][j] == '*' and picture[i][j + K - 1] == '*' and picture[i + K - 1][j + K - 1] == '*':\n                # Count the number of flies in the racket\n                num_flies = sum(1 for row in picture[i:i + K] for elem in row[j:j + K] if elem == '*')\n                # Update the maximum number of flies and position if necessary\n                if num_flies > max_flies:\n                    max_flies = num_flies\n                    max_position = (i, j)\n\n    # Mark the racket in the picture\n    for i in range(max_position[0], max_position[0] + K):\n        picture[i][max_position[1]] = '|'\n        picture[i][max_position[1] + K - 1] = '|'\n    for j in range(max_position[1], max_position[1] + K - 1):\n        picture[max_position[0]][j] = '-'\n        picture[max_position[0] + K - 1][j] = '-'\n    picture[max_position[0]][max_position[1]] = '+'\n    picture[max_position[0]][max_position[1] + K - 1] = '+'\n    picture[max_position[0] + K - 1][max_position[1]] = '+'\n    picture[max_position[0] + K - 1][max_position[1] + K - 1] = '+'\n\n    # Prepare the output\n    output = [str(max_flies)]\n    for row in picture:\n        output.append(''.join(row))\n\n    return '\\n'.join(output)",
        "test": "assert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n\") == \"2\\n......\\n.*.*.*\\n+--+..\\n|*.|..\\n|.*|..\\n+--+..\\n*....*\\n\" ",
        "num_ids": 2044,
        "indeed": false
    },
    {
        "number": 4823,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    ranks = []\n    suits = []\n\n    # Split input into ranks and suits\n    for card in stdin.split():\n        ranks.append(card[0])\n        suits.append(card[1])\n\n    # Create dictionary to count ranks\n    rank_count = {}\n    for rank in ranks:\n        if rank in rank_count:\n            rank_count[rank] += 1\n        else:\n            rank_count[rank] = 1\n\n    # Find the maximum value of k\n    max_k = 0\n    for count in rank_count.values():\n        if count > max_k:\n            max_k = count\n\n    return str(max_k)",
        "test": "assert solution(\"AC AD AH AS KD\") == \"4\"",
        "num_ids": 655,
        "indeed": true
    },
    {
        "number": 4824,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    C, P = map(int, stdin.split('\\n')[0].split())\n    initial_heights = list(map(int, stdin.split('\\n')[1].split()))\n\n    pieces = {\n        1: [(1, 0), (0, 1), (1, 1), (0, 2)],\n        2: [(2, 0), (0, 1), (1, 1), (2, 1), (1, 2)],\n        3: [(3, 0), (0, 1), (1, 1), (2, 1), (3, 1), (2, 2), (1, 3)],\n        4: [(4, 0), (0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (1, 2), (2, 2), (3, 2)],\n        5: [(4, 0), (0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (1, 2), (2, 2), (3, 2), (2, 3)],\n        6: [(4, 0), (0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (1, 2), (2, 2), (3, 2), (4, 2), (3, 3)],\n        7: [(4, 0), (0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (1, 2), (2, 2), (3, 2), (4, 2), (1, 3), (2, 3), (3, 3), (4, 3)]\n    }\n\n    def is_valid(field: List[int], x: int, y: int, width: int, height: int) -> bool:\n        if x + width > C or y + height > len(field) or y + height < initial_heights[x]:\n            return False\n        for i in range(x, x + width):\n            for j in range(y, y + height):\n                if field[i + j * C] == 1:\n                    return False\n        return True\n\n    def fill(field: List[int], x: int, y: int, width: int, height: int) -> None:\n        for i in range(x, x + width):\n            for j in range(y, y + height):\n                field[i + j * C] = 1\n\n    def backtrack(field: List[int], piece: int, x: int, y: int) -> int:\n        if piece == 0:\n            return 1\n\n        ways = 0\n        for rotation in range(4):\n            width, height = pieces[piece][rotation]\n            for i in range(-width + 1, C):\n                for j in range(initial_heights[x] - height, len(field)):\n                    if is_valid(field, x + i, y + j, width, height):\n                        fill(field, x + i, y + j, width, height)\n                        ways += backtrack(field, piece - 1, x + i + width - 1, y + j + height - 1)\n                        for k in range(i, i + width):\n                            for l in range(j, j + height):\n                                field[k + l * C] = 0\n        return ways\n\n    field = [0] * (C * max(initial_heights))\n    for i in range(C):\n        for j in range(initial_heights[i]):\n            field[i + j * C] = 1\n\n    return str(backtrack(field, P, 0, 0))",
        "test": "assert solution(\"5 1\\n0 0 0 0 0\") == \"7\"",
        "num_ids": 2091,
        "indeed": false
    },
    {
        "number": 4825,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    alphabet_dict = {\n        \"a\": \"@\", \"n\": \"[]\\\\[]\", \"b\": \"8\", \"o\": \"0\", \"c\": \"(\", \"p\": \"|D\", \"d\": \"|)\", \"q\": \"(,)\", \"e\": \"3\", \"r\": \"|Z\", \"f\": \"#\", \"s\": \"$\", \"g\": \"6\", \"t\": \"']['\", \"h\": \"[-]\", \"u\": \"|_|\", \"i\": \"|\", \"v\": \"/\", \"j\": \"_|\", \"w\": \"\\\\//\", \"k\": \"|<\", \"x\": \"}{\", \"l\": \"1\", \"y\": \"`/\", \"m\": \"[]/[]\", \"z\": \"2\"\n    }\n\n    result = \"\"\n    for char in stdin:\n        if char.isalpha():\n            if char.lower() in alphabet_dict:\n                result += alphabet_dict[char.lower()]\n            else:\n                result += char.upper()\n        else:\n            result += char\n\n    return result",
        "test": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.",
        "num_ids": 1026,
        "indeed": false
    },
    {
        "number": 4826,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N % 2 == 1:\n        return \"Alice\"\n    else:\n        return \"Bob\"",
        "test": "assert solution(\"1\") == \"Alice\"",
        "num_ids": 188,
        "indeed": true
    },
    {
        "number": 4827,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    words = stdin.split('\\n')[1:]\n\n    for i in range(N):\n        if '$' in words[i]:\n            index = i\n            break\n\n    def number_to_words(num: int) -> str:\n        ones = [\"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n        tens = [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]\n        teens = [\"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]\n\n        if 1 <= num < 10:\n            return ones[num]\n        elif 10 <= num < 20:\n            return teens[num % 10]\n        elif 20 <= num < 100:\n            return tens[num // 10] + (ones[num % 10] if (num % 10 != 0) else \"\")\n        elif 100 <= num < 1000:\n            return ones[num // 100] + \"hundred\" + ((\"and\" + number_to_words(num % 100)) if (num % 100 != 0) else \"\")\n\n    return ' '.join(words[:index] + [number_to_words(sum(len(word) for word in words))] + words[index + 1:])",
        "test": "assert solution(\"7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere\\n\") == \"thirty is the number of letters here\"",
        "num_ids": 1181,
        "indeed": false
    },
    {
        "number": 4828,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    instructions = [line for line in stdin.split('\\n') if line]\n    instr_count = 0\n    nop_count = 0\n    nop_positions = []\n\n    for instr in instructions:\n        instr_count += 1\n        if instr[0].isupper():\n            nop_count += 4 - (instr_count % 4)\n            nop_positions.append(instr_count - 1)\n\n    for pos in nop_positions:\n        instructions.insert(pos, 'NOP')\n        instr_count += 1\n        nop_count += 4 - (instr_count % 4)\n\n    return str(nop_count)",
        "test": "assert solution(\"EaEbFabG\") == 5",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 4829,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    left, right = map(int, stdin.split())\n    \n    if left == 0 and right == 0:\n        return \"Not a moose\"\n    \n    points = max(left, right) * 2\n    \n    if points % 2 == 0:\n        return f\"Even {points}\"\n    else:\n        return f\"Odd {points}\"",
        "test": "assert solution(\"3 3\") == \"Even 6\"",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 4830,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def get_key_mapping(key: str) -> str:\n        mapping = {\n            \"2\": \"abc\", \"3\": \"def\", \"4\": \"ghi\", \"5\": \"jkl\", \"6\": \"mno\", \"7\": \"pqrs\", \"8\": \"tuv\", \"9\": \"wxyz\"\n        }\n        return mapping[key]\n\n    def is_word_constructible(word: str, key_presses: str) -> bool:\n        key_mapping = get_key_mapping(key_presses[0])\n        for char in word:\n            if char not in key_mapping:\n                return False\n        return True\n\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    words = lines[1:N + 1]\n    S = lines[N + 1]\n\n    count = 0\n    for word in words:\n        if is_word_constructible(word, S):\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"3\\ntomo\\nmono\\ndak\\n6666\") == \"1\"",
        "num_ids": 1082,
        "indeed": false
    },
    {
        "number": 4831,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    peter_pan_frame = [\n        \"..#..\",\n        \".#.#.\",\n        \"#.X.#\",\n        \".#.#.\",\n        \"..#..\",\n    ]\n\n    wendy_frame = [\n        \"..*..\",\n        \".*.*.\",\n        \"*.X.*\",\n        \".*.*.\",\n        \"..*..\",\n    ]\n\n    output = []\n\n    for i, letter in enumerate(stdin):\n        if (i + 1) % 3 != 0:\n            frame = peter_pan_frame\n        else:\n            frame = wendy_frame\n\n        for j, row in enumerate(frame):\n            if row.count(\"X\") == 1:\n                frame[j] = row.replace(\"X\", letter)\n\n        output.extend(frame)\n\n    return \"\\n\".join(output)",
        "test": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 4832,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin.strip())\n\n    # Calculate the area of a circle with radius R in normal geometry\n    area_normal = 3.14159 * R * R\n\n    # Calculate the area of a circle with radius R in taxicab geometry\n    area_taxicab = 2 * R * (R + 1)\n\n    return f\"{area_normal:.6f}\\n{area_taxicab:.6f}\"",
        "test": "assert solution('21\\n') == '1385.442360\\n882.000000\\n'",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 4833,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    expenses = list(map(int, stdin.split('\\n')[1].split()))\n    total_expenses = sum(filter(lambda x: x < 0, expenses))\n    return str(total_expenses)",
        "test": "assert solution(\"5\\n129 44 394 253 147\\n\") == \"0\"",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 4834,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    times = [int(x) for x in stdin.split('\\n')[1].split()]\n    times.sort()\n\n    if n == 1:\n        return str(times[0])\n\n    max_time = times[-1]\n\n    for i in range(1, n):\n        max_time = max(max_time, times[i - 1] + times[i])\n\n    return str(max_time)",
        "test": "assert solution(\"3\\n4 1 2\\n\") == \"8\" ",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 4835,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    t, n, m, grid = int(stdin.split('\\n')[0].split()[0]), int(stdin.split('\\n')[0].split()[1]), int(stdin.split('\\n')[0].split()[2]), [list(line.strip()) for line in stdin.split('\\n')[1:]]\n\n    def is_safe(x, y):\n        return 0 <= x < n and 0 <= y < m and grid[x][y] != '1'\n\n    def bfs(start_x, start_y):\n        queue = [(start_x, start_y)]\n        visited = set()\n        while queue:\n            x, y = queue.pop(0)\n            if (x, y) in visited:\n                continue\n            visited.add((x, y))\n\n            if (x, y) == (0, 0) or (x, y) == (n - 1, m - 1) or (x, y) == (n - 1, 0) or (x, y) == (0, m - 1):\n                return len(visited)\n\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                new_x, new_y = x + dx, y + dy\n                if is_safe(new_x, new_y):\n                    if grid[new_x][new_y] in {'R', 'L', 'U', 'D'} and (new_x, new_y) not in visited and (new_x - dx, new_y - dy) in visited:\n                        continue\n                    queue.append((new_x, new_y))\n        return None\n\n    start_x, start_y = None, None\n    for x in range(n):\n        for y in range(m):\n            if grid[x][y] == 'S':\n                start_x, start_y = x, y\n                break\n        if start_x is not None and start_y is not None:\n            break\n\n    if start_x is None or start_y is None:\n        return \"NOT POSSIBLE\"\n\n    result = bfs(start_x, start_y)\n    if result is None:\n        return \"NOT POSSIBLE\"\n    else:\n        return str(result)",
        "test": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"",
        "num_ids": 2381,
        "indeed": false
    },
    {
        "number": 4836,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, C = map(int, stdin.readline().split())\n    fruits = list(map(int, stdin.readline().split()))\n\n    # Determine the maximum number of different fruits Mislav can eat\n    fruits.sort()\n    weight = 0\n    count = 0\n    last_fruit = -1\n    for fruit in fruits:\n        if fruit != last_fruit:\n            weight += fruit\n            last_fruit = fruit\n            if weight <= C:\n                count += 1\n            else:\n                break\n\n    return str(count)",
        "test": "assert solution(\"7 5\\n1 5 4 3 2 1 1\") == \"3\"",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 4837,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def get_points(sven_symbol, friend_symbol):\n        points = 0\n        if sven_symbol == friend_symbol:\n            points += 1\n        elif (sven_symbol == 'S' and friend_symbol == 'R') or (sven_symbol == 'R' and friend_symbol == 'P') or (sven_symbol == 'P' and friend_symbol == 'S'):\n            points += 2\n        return points\n\n    input_data = stdin.split('\\n')\n    rounds = int(input_data[0])\n    sven_symbols = input_data[1]\n    num_friends = int(input_data[2])\n    friends_symbols = input_data[3:]\n\n    sven_score = 0\n    max_score = 0\n\n    for i in range(rounds):\n        sven_round_symbol = sven_symbols[i]\n        total_points = 0\n        for friend in friends_symbols:\n            friend_round_symbol = friend[i]\n            total_points += get_points(sven_round_symbol, friend_round_symbol)\n        sven_score += total_points\n        max_score += total_points if total_points > 3 else 3\n\n    return f\"{sven_score}\\n{max_score}\"",
        "test": "assert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\\n15\"",
        "num_ids": 1458,
        "indeed": false
    },
    {
        "number": 4838,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    times = [int(t) for t in lines[1:n+1]]\n    if n == 1:\n        return \"still running\"\n    else:\n        for i in range(n-1):\n            if times[i+1] == times[i]+1:\n                return \"still running\"\n        return str(times[-1]-times[0])",
        "test": "assert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\"",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 4839,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *helium = list(map(int, stdin.split()))\n    helium.sort(reverse=True)\n    balloons = list(range(1, n + 1))\n\n    for i in range(n):\n        if helium[i] >= balloons[i]:\n            helium[i] -= balloons[i]\n        else:\n            helium[i] = 0\n\n        if helium[i] == 0:\n            continue\n\n        j = i + 1\n        while j < n and helium[i] > 0:\n            if helium[i] >= balloons[j]:\n                helium[i] -= balloons[j]\n                j += 1\n            else:\n                balloons[j] -= helium[i]\n                helium[i] = 0\n\n        if helium[i] > 0:\n            return \"impossible\"\n\n    return \"%.6f\" % (sum(balloons) / (n * (n + 1) / 2))",
        "test": "assert solution(\"2\\n2 2\\n\") == \"impossible\"",
        "num_ids": 850,
        "indeed": false
    },
    {
        "number": 4840,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    gunnar, emma = [list(map(int, line.split())) for line in stdin.splitlines()]\n\n    gunnar_prob = sum(range(gunnar[0], gunnar[1] + 1)) / (gunnar[1] - gunnar[0] + 1)\n    emma_prob = sum(range(emma[0], emma[1] + 1)) / (emma[1] - emma[0] + 1)\n\n    if gunnar_prob > emma_prob:\n        return \"Gunnar\"\n    elif gunnar_prob < emma_prob:\n        return \"Emma\"\n    else:\n        return \"Tie\"",
        "test": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 4841,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    counts = stdin.split('\\n')[1].split()\n\n    mumbled_count = 0\n    max_count = -1\n\n    for count in counts:\n        if count == 'mumble':\n            mumbled_count += 1\n        else:\n            count = int(count)\n            if count > max_count:\n                max_count = count\n\n    if mumbled_count <= 1 or (mumbled_count == 2 and max_count == n - 1):\n        return 'makes sense'\n    else:\n        return 'something is fishy'",
        "test": "assert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\\n\") == \"something is fishy\"",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 4842,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *v = list(map(int, stdin.split()))\n    d = 1\n    while d < n and all(v[i+1]-v[i] == v[i+1]-v[i] for i in range(n-d)):\n        d += 1\n    v_n_plus_1 = v[-1] + (v[-1] - v[-2])\n    return f\"{d} {v_n_plus_1}\"",
        "test": "assert solution(\"4 9 25 49 81\") == \"2 121\"",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 4843,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(x1, y1, x2, y2):\n        return x1 == x2 or y1 == y2 or abs(x1 - x2) == abs(y1 - y2)\n\n    def is_valid_solution(queens):\n        for i in range(len(queens)):\n            for j in range(i + 1, len(queens)):\n                if is_valid(queens[i][0], queens[i][1], queens[j][0], queens[j][1]):\n                    return False\n        return True\n\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    queens = [list(map(int, line.strip().split())) for line in lines[1:]]\n\n    if len(queens) != N:\n        return \"INCORRECT\"\n\n    for x, y in queens:\n        if x < 0 or x >= N or y < 0 or y >= N:\n            return \"INCORRECT\"\n\n    if is_valid_solution(queens):\n        return \"CORRECT\"\n    else:\n        return \"INCORRECT\"",
        "test": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"",
        "num_ids": 996,
        "indeed": true
    },
    {
        "number": 4844,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    matrix = []\n    for _ in range(N):\n        matrix.append(list(map(int, stdin.readline().strip().split())))\n    \n    # Initialize the array with the values from the main diagonal\n    array = [matrix[i][i] for i in range(N)]\n    \n    # Reconstruct the array\n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                array[i] ^= array[j] & matrix[i][j]\n                array[j] ^= array[i] & matrix[i][j]\n                array[i] ^= array[j] & matrix[i][j]\n    \n    return \" \".join(map(str, array))",
        "test": "assert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\" ",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 4845,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    day, month = map(int, stdin.split())\n    if month < 3:\n        month += 12\n        year = 2008\n    else:\n        year = 2009\n    index = (year + year // 4 - year // 100 + year // 400 + (31 * (month - 1) + day) // 5) % 7\n    return days[index]",
        "test": "assert solution(\"17 1\") == \"Saturday\"",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 4846,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    L, D, X = map(int, stdin.split('\\n'))\n    N = X\n    while sum(map(int, str(N))) != X:\n        N += 1\n    M = D\n    while sum(map(int, str(M))) != X:\n        M -= 1\n    return str(N) + '\\n' + str(M)",
        "test": "assert solution(\"100\\n500\\n12\") == \"129\\n480\\n\"",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 4847,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    area = 0.0\n    tree_count = 0\n    \n    # Read input\n    for i in range(3):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    \n    n = int(input())\n    \n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n        \n    # Calculate area of triangle\n    area = abs((points[0][0] * (points[1][1] - points[2][1]) + \n                points[1][0] * (points[2][1] - points[0][1]) + \n                points[2][0] * (points[0][1] - points[1][1])) / 2)\n    \n    # Count trees in the triangle\n    for i in range(3, n + 3):\n        if (points[0][0] - points[i][0]) * (points[1][1] - points[2][1]) == (points[1][0] - points[2][0]) * (points[0][1] - points[i][1]):\n            tree_count += 1\n    \n    return \"{:.1f}\\n{}\\n\".format(area, tree_count)",
        "test": "assert solution(\"\"\"1 1",
        "num_ids": 1609,
        "indeed": false
    },
    {
        "number": 4848,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    if n < 3 or not is_squarefree(n):\n        return \"Error: Invalid input\"\n\n    for m in range(2, n):\n        if is_squarefree(m * n):\n            return str(m)\n\n    return \"No solution found\"\n\n\ndef",
        "test": "assert solution(30) == 7",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 4849,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    blimps = stdin.split('\\n')\n    cia_blimps = []\n    \n    for i, blimp in enumerate(blimps):\n        if 'FBI' in blimp:\n            cia_blimps.append(str(i+1))\n    \n    if not cia_blimps:\n        return \"HE GOT AWAY!\"\n    else:\n        return ' '.join(cia_blimps)",
        "test": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"",
        "num_ids": 616,
        "indeed": true
    },
    {
        "number": 4850,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    triangles = []\n    for i in range(N):\n        A, B, C = map(int, stdin.readline().split())\n        triangles.append((A, B, C))\n    \n    max_height = max(triangles, key=lambda x: x[2])[2]\n    max_span = max(triangles, key=lambda x: (x[0] + x[1]))[0] + max(triangles, key=lambda x: (x[0] + x[1]))[1]\n    min_length = max_height + max_span * 2\n    return '{:.4f}'.format(min_length)",
        "test": "assert solution(\"\"\"2",
        "num_ids": 649,
        "indeed": false
    },
    {
        "number": 4851,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def is_harshad(num):\n        return num % sum(int(digit) for digit in str(num)) == 0\n    harshad = n\n    while not is_harshad(harshad):\n        harshad += 1\n    return str(harshad)",
        "test": "assert solution(\"24\") == \"24\"",
        "num_ids": 325,
        "indeed": true
    },
    {
        "number": 4852,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    integers = [int(x) for x in stdin.split(\"+\")]\n    total_combinations = 2 ** (len(integers) - 1)\n    distinct_integers = set()\n\n    for i in range(total_combinations):\n        current_integer = \"\"\n        current_sum = 0\n        for j in range(len(integers)):\n            if j % 2 == 0:\n                current_integer += str(integers[j])\n            else:\n                if i & (1 << ((j - 1) // 2)):\n                    current_sum += int(current_integer)\n                    current_integer = \"\"\n                else:\n                    current_integer += \"+{}\".format(integers[j])\n\n        if i & (1 << ((len(integers) - 1) // 2)):\n            current_sum += int(current_integer)\n\n        distinct_integers.add(current_sum)\n\n    return len(distinct_integers)",
        "test": "assert solution(\"1+2+3+4+5+6+7+8+9\") == 188",
        "num_ids": 827,
        "indeed": false
    },
    {
        "number": 4853,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *coefficients = list(map(int, stdin.strip().split()))\n    c = [0] * (n + 1)\n    c[0] = coefficients[-1]\n    for i in range(1, n + 1):\n        c[i] = coefficients[-i - 1] + sum(c[j] * coefficients[n - j] for j in range(i))\n    return ' '.join(map(str, c))",
        "test": "assert solution(\"2 2 -4 5\") == \"5 -2 4\"",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 4854,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.readline().split())\n    message = list(map(int, stdin.readline().split()))\n    \n    frequency = [0] * (c + 1)\n    \n    for num in message:\n        frequency[num] += 1\n    \n    sorted_message = []\n    \n    for i in range(1, c + 1):\n        sorted_message += [i] * frequency[i]\n    \n    return \" \".join(map(str, sorted_message))",
        "test": "assert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 4855,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, I = map(int, stdin.split())\n    citations = A * I\n    bribed_scientists = 0\n    while citations > 0:\n        citations -= A\n        bribed_scientists += 1\n    return str(bribed_scientists)",
        "test": "assert solution(\"1 100\") == \"100\"",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 4856,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    reversed_a = str(a)[::-1]\n    reversed_b = str(b)[::-1]\n    \n    if int(reversed_a) > int(reversed_b):\n        return reversed_a\n    else:\n        return reversed_b",
        "test": "assert solution('734 893') == '437'",
        "num_ids": 338,
        "indeed": true
    },
    {
        "number": 4857,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    l, w = map(int, stdin.split())\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    def weight(word):\n        return sum(letters.index(c) + 1 for c in word)\n\n    def find_word(length, target_weight):\n        if length == 1:\n            return letters[target_weight - 1] if 0 < target_weight <= 26 else None\n        for i in range(26):\n            c = letters[i]\n            new_length = length - 1\n            new_weight = target_weight - (i + 1)\n            if new_weight <= 0:\n                continue\n            new_c = find_word(new_length, new_weight)\n            if new_c:\n                return c + new_c\n        return None\n\n    result = find_word(l, w)\n    return result if result else 'impossible'",
        "test": "assert solution(\"7 96\") == \"contest\"",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 4858,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.strip().split('\\n')\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    frames = []\n    for i in range(2):\n        frames.append([])\n        for j in range(1 + i * (M + 1), 1 + i * (M + 1) + M):\n            frames[i].append(list(lines[j]))\n\n    # Find falcon position in both frames\n    positions = []\n    for frame in frames:\n        for i in range(M):\n            for j in range(N):\n                if frame[i][j] == C:\n                    positions.append((i, j))\n                    break\n            else:\n                continue\n            break\n\n    # Calculate shift\n    shift_x = positions[1][1] - positions[0][1]\n    shift_y = positions[1][0] - positions[0][0]\n\n    # Shift silhouette\n    for i in range(M):\n        for j in range(N):\n            new_x = (i + shift_y) % M\n            new_y = (j + shift_x) % N\n            if frames[1][i][j] == C:\n                frames[0][new_x][new_y] = C\n\n    # Generate output\n    output = ''\n    for i in range(M):\n        output += ''.join(frames[0][i]) + '\\n'\n    output += '\\n'\n\n    return output",
        "test": "assert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\nBABABABABABA\\nBBABABABABAB\\nBABABABABABA\\n\") == \"BBABABABABAC\\nBBBABABABABA\\nBBABABABABAB\" ",
        "num_ids": 1786,
        "indeed": false
    },
    {
        "number": 4859,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    b, d, c, l = map(int, stdin.split())\n    solutions = []\n    for i in range(l // b + 1):\n        for j in range(l // d + 1):\n            for k in range(l // c + 1):\n                if i + j + k == (l // b) + (l // d) + (l // c) and i + j + k <= l:\n                    solutions.append((i, j, k))\n    if not solutions:\n        return \"impossible\"\n    else:\n        return \"\\n\".join(f\"{s[0]} {s[1]} {s[2]}\" for s in sorted(solutions))",
        "test": "assert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n\"",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 4860,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    nums = [int(x) for x in stdin.split('\\n')[1:]]\n    missing_numbers = []\n    for i in range(1, nums[-1]):\n        if i not in nums:\n            missing_numbers.append(i)\n    if len(missing_numbers) == 0:\n        return \"good job\"\n    else:\n        return \"\\n\".join(str(x) for x in missing_numbers)",
        "test": "assert solution(\"10\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"good job\"",
        "num_ids": 689,
        "indeed": true
    },
    {
        "number": 4861,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s, v = map(float, stdin.split())\n\n    def t(c):\n        return n * (log2(n))**(c * sqrt(2)) / (p * 10**9)\n\n    def opt_tour_length(c):\n        return s * (1 + 1 / c)\n\n    c = 1\n    while t(c) < opt_tour_length(c) / v:\n        c += 0.000001\n\n    t_min = min(t(c), opt_tour_length(c) / v)\n\n    return f\"{t_min:.10f} {c:.10f}\"",
        "test": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 4862,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0 or n == 1:\n        return str(0)\n    elif n == 2:\n        return str(1)\n    else:\n        return str((n * (n - 1)) // 2)",
        "test": "assert solution(\"0\") == \"0\"",
        "num_ids": 258,
        "indeed": false
    },
    {
        "number": 4863,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    answers = stdin.split('\\n')[1:]\n    correct_answers = ['A'] * n\n\n    score = 0\n    for i in range(n):\n        if answers[i] == correct_answers[i]:\n            score += 1\n\n    return str(score)",
        "test": "assert solution(\"3\\nA\\nB\\nC\") == \"1\"",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 4864,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    R, C, Z_R, Z_C = map(int, stdin.split()[0:4])\n    article = []\n    for i in range(R):\n        article.append(list(stdin.split()[4+i]))\n    \n    # Create enlarged article\n    enlarged_article = []\n    for i in range(R):\n        for j in range(Z_R):\n            row = []\n            for k in range(C):\n                for l in range(Z_C):\n                    row.append(article[i][k])\n            enlarged_article.append(row)\n    \n    # Print enlarged article\n    output = \"\"\n    for row in enlarged_article:\n        output += \"\".join(row) + \"\\n\"\n    return output.strip()",
        "test": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\" ",
        "num_ids": 774,
        "indeed": true
    },
    {
        "number": 4865,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    cases = stdin.split(\"\\n\")[1:]\n    \n    for case in cases:\n        action, minutes, hours, mins = case.split()\n        minutes = int(minutes)\n        hours = int(hours)\n        mins = int(mins)\n        \n        if action == \"F\":\n            hours += minutes // 60\n            mins += minutes % 60\n            if mins >= 60:\n                hours += mins // 60\n                mins %= 60\n            if hours >= 24:\n                hours %= 24\n        elif action == \"B\":\n            hours -= minutes // 60\n            mins -= minutes % 60\n            if mins < 0:\n                hours -= 1\n                mins += 60\n            if hours < 0:\n                hours += 24\n        \n        print(f\"{hours} {mins}\")",
        "test": "assert solution(\"1\\nB 30 12 30\\n\") == \"11 59\\n\"",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 4866,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    month, day = stdin.strip().split()\n    if month == 'OCT' and day == '31':\n        return 'yup'\n    elif month == 'DEC' and day == '25':\n        return 'yup'\n    else:\n        return 'nope'",
        "test": "assert solution('OCT 31') == 'yup'",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 4867,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.readline().split())\n    U, L, R, D = map(int, stdin.readline().split())\n    puzzle = [stdin.readline().strip() for _ in range(M)]\n\n    frame = [['#' if (x + y) % 2 == 0 else '.' for x in range(L + N + R)] for y in range(U + M + D)]\n\n    for y in range(U, U + M):\n        for x in range(L, L + N):\n            frame[y][x] = puzzle[y - U][x - L]\n\n    return '\\n'.join(''.join(row) for row in frame)",
        "test": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"\"\"#.#.#.#.",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 4868,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into white and black parts\n    white, black = stdin.split(\"\\n\")\n    \n    # Define dictionaries to map pieces to symbols and vice versa\n    piece_to_symbol = {\n        \"K\": \"k\",\n        \"Q\": \"q\",\n        \"R\": \"r\",\n        \"B\": \"b\",\n        \"N\": \"n\",\n        \"P\": \"p\"\n    }\n    \n    symbol_to_piece = {v: k for k, v in piece_to_symbol.items()}\n    \n    # Initialize empty board\n    board = [[\".\" for _ in range(8)] for _ in range(8)]\n    \n    # Parse the white pieces and add them to the board\n    for piece in white.split(\",\")[1:]:\n        column, row = piece[1], piece[0]\n        piece_symbol = piece_to_symbol[piece[2].upper()]\n        board[int(row) - 1][ord(column) - ord('a')] = piece_symbol.upper()\n    \n    # Parse the black pieces and add them to the board\n    for piece in black.split(\",\")[1:]:\n        column, row = piece[1], piece[0]\n        piece_symbol = piece_to_symbol[piece[2].upper()]\n        board[int(row) - 1][ord(column) - ord('a')] = piece_symbol\n    \n    # Convert the board to a string in the required format\n    result = \"\"\n    for row in board:\n        result += \"|\"\n        for cell in row:\n            result += cell + \"|\"\n        result += \"\\n\"\n    \n    # Add the column headers\n    result = \"|---+---+---+---+---+---+---+---|\\n\" + result\n    result += \"|:a:|:b:|:c:|:d:|:e:|:f:|:g:|:h:|\\n\"\n    result += \"|---+---+---+---+---+---+---+---|\\n\"\n    \n    # Return the result\n    return result",
        "test": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+",
        "num_ids": 3547,
        "indeed": false
    },
    {
        "number": 4869,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, N = map(float, stdin.split())\n    if N >= A:\n        return \"Diablo is happy!\"\n    else:\n        return \"Need more materials!\"",
        "test": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 4870,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    f, s, g, u, d = map(int, stdin.split())\n\n    if s == g:\n        return \"0\"\n\n    if s > g:\n        u, d = d, u\n        s, g = g, s\n\n    if s + u >= g:\n        return str(g - s)\n    elif g - s > d:\n        return \"use the stairs\"\n    else:\n        return str(d - (s - g) % u)",
        "test": "assert solution(\"10 1 10 2 2\") == \"use the stairs\"",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 4871,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def group_score(scores):\n        n = len(scores)\n        return sum(scores[i] * (4**i) for i in range(n)) / (5**n - 1)\n    \n    def new_group_score(scores, i):\n        scores = [scores[j] for j in range(len(scores)) if j != i]\n        return group_score(sorted(scores, reverse=True))\n\n    n, *scores = [int(x) for x in stdin.split('\\n')]\n    scores.sort(reverse=True)\n\n    current_score = group_score(scores)\n    new_scores = [new_group_score(scores, i) for i in range(n)]\n    average_new_score = sum(new_scores) / n\n\n    return f\"{current_score:.1f}\\n{average_new_score:.6f}\"",
        "test": "assert solution(\"\"\"3",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 4872,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    dirty_pushes = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    def days_to_cleanup(days_since_push):\n        return days_since_push + 1\n\n    total_dirtiness = 0\n    cleanup_phases = 0\n    last_cleanup = 0\n\n    for push in dirty_pushes:\n        days_since_push = push - last_cleanup\n        total_dirtiness += days_to_cleanup(days_since_push)\n\n        if total_dirtiness >= 20:\n            cleanup_phases += 1\n            total_dirtiness = 0\n            last_cleanup = push\n\n    return str(cleanup_phases)",
        "test": "assert solution(\"5\\n1 45 65 84 346\") == \"4\" ",
        "num_ids": 641,
        "indeed": true
    },
    {
        "number": 4873,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    W, H = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(H)]\n    \n    def dfs(x, y):\n        if grid[x][y] == 'G':\n            return 1\n        if grid[x][y] == 'T' or grid[x][y] == '#':\n            return 0\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < H and 0 <= ny < W and grid[nx][ny] != 'T' and grid[nx][ny] != '#':\n                grid[nx][ny] = '#'\n                gold = dfs(nx, ny)\n                if gold:\n                    return 1\n        return 0\n    \n    player_pos = [(x, y) for x in range(H) for y in range(W) if grid[x][y] == 'P']\n    if len(player_pos) != 1:\n        return 'Error'\n    \n    start_x, start_y = player_pos[0]\n    grid[start_x][start_y] = '#'\n    \n    return str(dfs(start_x, start_y))",
        "test": "assert solution(\"5 5\\n.....\\n.###.\\n.#PG.\\n.....\\n\") == \"2\"",
        "num_ids": 1594,
        "indeed": false
    },
    {
        "number": 4874,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    dance_recording = [stdin.readline().strip() for _ in range(N)]\n\n    moves = 0\n    previous_move_blank = True\n\n    for col in range(M):\n        current_move_blank = all('_' == dance_recording[row][col] for row in range(N))\n\n        if current_move_blank and not previous_move_blank:\n            moves += 1\n\n        previous_move_blank = current_move_blank\n\n    return str(moves)",
        "test": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$\\n__$_____$___$_____$___$_____$___$_____$___$_____$\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 5 ",
        "num_ids": 1344,
        "indeed": false
    },
    {
        "number": 4875,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def pig_latin(word: str) -> str:\n        vowels = \"aeiouy\"\n        if word[0] in vowels:\n            return word + \"yay\"\n        else:\n            for i, char in enumerate(word):\n                if char in vowels:\n                    return word[i:] + word[:i] + \"ay\"\n\n    lines = stdin.split(\"\\n\")\n    output = []\n    for line in lines:\n        words = line.split(\" \")\n        pig_latin_words = [pig_latin(word) for word in words]\n        output.append(\" \".join(pig_latin_words))\n\n    return \"\\n\".join(output)",
        "test": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"",
        "num_ids": 680,
        "indeed": true
    },
    {
        "number": 4876,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    num_restaurants = int(stdin.split('\\n')[0])\n    restaurants = stdin.split('\\n')[1:]\n    pea_soup_restaurants = []\n    \n    for i in range(0, len(restaurants), num_restaurants + 1):\n        if 'pea soup' in restaurants[i + 1:]:\n            pea_soup_restaurants.append(restaurants[i])\n    \n    pancakes_restaurants = []\n    for i in range(1, num_restaurants + 1):\n        if 'pancakes' in restaurants[i]:\n            pancakes_restaurants.append(restaurants[i - 1])\n    \n    for restaurant in pea_soup_restaurants:\n        if restaurant in pancakes_restaurants:\n            return restaurant\n    \n    return \"Anywhere is fine I guess\"",
        "test": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnybble\\npancakes\\npea soup\\npunsch\") == \"Anywhere is fine I guess\"",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 4877,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    count = 0\n    total_climbed = 0\n    \n    while total_climbed < h:\n        count += 1\n        total_climbed += a - b\n    \n    return str(count)",
        "test": "assert solution(\"5 0 15\") == \"3\"",
        "num_ids": 389,
        "indeed": true
    },
    {
        "number": 4878,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R1, S = map(int, stdin.split())\n    R2 = S * 2 - R1\n    return str(R2)",
        "test": "assert solution(\"11 15\") == \"19\"",
        "num_ids": 209,
        "indeed": true
    },
    {
        "number": 4879,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    if (b == 'East' and c == 'West') or (b == 'West' and c == 'East'):\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(\"South West East\") == \"Yes\"",
        "num_ids": 429,
        "indeed": true
    },
    {
        "number": 4880,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    keyword = stdin.split('\\n')[1]\n    ciphertext = stdin.split('\\n')[2]\n\n    key = keyword + ciphertext[:n]\n    plaintext = \"\"\n\n    for i in range(m):\n        key_char = key[i]\n        cipher_char = ciphertext[i]\n        shift = ord(key_char) - ord('a')\n        plain_char = chr(((ord(cipher_char) - ord('a') - shift) % 26) + ord('a'))\n        plaintext += plain_char\n\n    return plaintext",
        "test": "assert solution(\"1 11\\nz\\nyevqgdytnfm\") == \"z\"",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 4881,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Either\"\n    else:\n        if n % 2 == 0:\n            if n % 4 == 0:\n                return \"Either\"\n            else:\n                return \"Odd\"\n        else:\n            return \"Even\"",
        "test": "assert solution(1) == 'Either'",
        "num_ids": 291,
        "indeed": true
    },
    {
        "number": 4882,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n', 1)[0])\n    costs = stdin.split('\\n', 1)[1].split('\\n', n)\n    result = []\n    for cost in costs:\n        result.append(len(cost))\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"",
        "num_ids": 565,
        "indeed": true
    },
    {
        "number": 4883,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    translations = {}\n    n_translations, n_pairs = map(int, stdin.readline().split())\n    for _ in range(n_translations):\n        a, b = stdin.readline().split()\n        translations[a] = b\n\n    def check_match(word1, word2):\n        if len(word1) != len(word2):\n            return False\n\n        for i in range(len(word1)):\n            if word1[i] not in translations or translations[word1[i]] != word2[i]:\n                return False\n\n        return True\n\n    output = []\n    for _ in range(n_pairs):\n        word1, word2 = stdin.readline().split()\n        if check_match(word1, word2):\n            output.append(\"yes\")\n        else:\n            output.append(\"no\")\n\n    return \"\\n\".join(output)",
        "test": "assert solution(\"\"\"9 5",
        "num_ids": 860,
        "indeed": false
    },
    {
        "number": 4884,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, P = map(int, lines[0].split())\n    count = 0\n    for i in range(1, N+1):\n        if 'carrots' in lines[i].lower():\n            count += 1\n    return str(count)",
        "test": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\" ",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 4885,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input into a 2D list\n    board = [list(line) for line in stdin.split(\"\\n\") if line.strip()]\n\n    # Define functions to check if a field is black or white\n    def is_black(row: int, col: int) -> bool:\n        return (row + col) % 2 == 1\n\n    def is_white(row: int, col: int) -> bool:\n        return (row + col) % 2 == 0\n\n    # Define a function to find all pieces of a player\n    def find_pieces(player: str) -> list:\n        pieces = []\n        for row, line in enumerate(board):\n            for col, field in enumerate(line):\n                if field.isalpha() and field.isupper() == (player == \"White\"):\n                    pieces.append((field, col, row))\n        return pieces\n\n    # Find all pieces of both players\n    white_pieces = find_pieces(\"White\")\n    black_pieces = find_pieces(\"Black\")\n\n    # Sort the pieces according to the problem statement\n    white_pieces.sort(key=lambda x: (x[2], x[1]))\n    black_pieces.sort(key=lambda x: (-x[2], -x[1]))\n\n    # Convert the pieces into the desired notation\n    white_notation = \",\".join(f\"{piece[0]}{chr(ord('a') + piece[1])}{8 - piece[2]}\" for piece in white_pieces)\n    black_notation = \",\".join(f\"{piece[0]}{chr(ord('a') + piece[1])}{8 - piece[2]}\" for piece in black_pieces)\n\n    return f\"White: {white_notation}\\nBlack: {black_notation}\"",
        "test": "assert solution(\"\"\"+---+---+---+---+---+---+---+---+",
        "num_ids": 2129,
        "indeed": false
    },
    {
        "number": 4886,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n\n    # Check if it is always possible to guarantee a win\n    if N == 1:\n        return \"Your wish is granted!\"\n    elif N == 2 and K >= 1:\n        return \"Your wish is granted!\"\n    elif N >= 3 and K >= 2:\n        return \"Your wish is granted!\"\n    else:\n        return \"You will become a flying monkey!\"",
        "test": "assert solution(\"8 3\") == \"Your wish is granted!\"",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 4887,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    area = int(stdin)\n    perimeter = 4 * area ** 0.5\n    return str(round(perimeter, 6))",
        "test": "assert solution(\"16\") == \"16.0\"",
        "num_ids": 194,
        "indeed": false
    },
    {
        "number": 4888,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    T, tasks = list(map(int, stdin.split()))\n    time_spent = sum(tasks[:T])\n    tasks_completed = len(tasks[:T])\n    while tasks_completed < len(tasks) and tasks[tasks_completed] <= time_spent:\n        tasks_completed += 1\n    return str(tasks_completed)",
        "test": "assert solution(\"6 180\\n45 30 55 20 80 20\") == \"4\" ",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 4889,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n    n = input_data[0]\n    lengths = input_data[1:]\n    total_length = sum(lengths)\n    for i in range(n):\n        total_length -= i\n    return str(total_length)",
        "test": "assert solution(\"1\\n50\") == \"50\"",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 4890,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split()[0:4])\n    c = list(map(int, stdin.split()[4:]))\n    cnt = [0] * (s + 1)\n    for i in range(s):\n        cnt[i] = min(c[i], d - n)\n        cnt[i + 1] = c[i] - cnt[i]\n    for i in range(s):\n        if cnt[i] < 0:\n            cnt[i] = 0\n    for i in range(s, 0, -1):\n        if cnt[i] > 0:\n            cnt[i - 1] += cnt[i]\n    for i in range(s):\n        cnt[i] -= cnt[i + 1]\n    return ' '.join(map(str, cnt))",
        "test": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 4891,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    pieces = [int(x) for x in stdin.split()]\n    needed_pieces = [1 - pieces[0], 1 - pieces[1], 2 - pieces[2], 2 - pieces[3], 2 - pieces[4], 8 - pieces[5]]\n    return ' '.join(str(x) for x in needed_pieces)",
        "test": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 4892,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    passwords = []\n    probabilities = []\n\n    for i in range(N):\n        line = stdin.readline().strip().split()\n        passwords.append(line[0])\n        probabilities.append(float(line[1]))\n\n    expected_attempts = sum([i * probabilities[i] for i in range(N)])\n\n    return f\"{expected_attempts:.4f}\"",
        "test": "assert solution(\"5\\npassword 0.2\\n123456 0.2\\nqwerty 0.2\\nasdfgh 0.2\\nadmin 0.2\") == \"2.0\"",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 4893,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, p = list(map(int, stdin.split()))\n    distances = list(map(int, input().split()))\n    distances.sort()\n    min_distance = distances[0]\n    for i in range(1, n):\n        min_distance = max(min_distance, distances[i] - p * (i + 1))\n    return str(min_distance)\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "assert solution(\"4 2\\n1 2 4 8\") == \"2\"",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 4894,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    notes = lines[1]\n    \n    # Initialize the staff lines\n    staff_lines = {\n        'G': '---------------------------------------------------------',\n        'F': '---------------------------------------------------------',\n        'E': '---------------------------------------------------------',\n        'D': '---------------------------------------------------------',\n        'C': '---------------------------------------------------------',\n        'B': '---------------------------------------------------------',\n        'A': '---------------------------------------------------------',\n        'g': '---------------------------------------------------------',\n        'f': '---------------------------------------------------------',\n        'e': '---------------------------------------------------------',\n        'd': '---------------------------------------------------------',\n        'c': '---------------------------------------------------------',\n        'b': '---------------------------------------------------------',\n        'a': '---------------------------------------------------------'\n    }\n    \n    # Process the notes and update the staff lines\n    duration = 1\n    for note in notes:\n        if note.islower():\n            pitch = note.upper()\n        else:\n            pitch = note\n        \n        if note.isalpha():\n            duration = 1\n        elif note.isnumeric():\n            duration = int(note)\n        \n        # Add the note to the staff lines\n        for i in range(duration):\n            if pitch in staff_lines:\n                staff_lines[pitch] = staff_lines[pitch][:i] + '*' + staff_lines[pitch][i+1:]\n            else:\n                staff_lines[pitch] = ' ' * i + '*' + ' ' * (duration - i - 1)\n        \n        # Update the pitch for the next note\n        pitch = chr(ord(pitch) + 1) if pitch != 'G' else 'A'\n    \n    # Generate the output string\n    output = 'G:\\nF:' + staff_lines['F'] + '\\nE:' + staff_lines['E'] + '\\nD:' + staff_lines['D'] + '\\nC:' + staff_lines['C'] + '\\nB:' + staff_lines['B'] + '\\nA:' + staff_lines['A'] + '\\ng:' + staff_lines['g'] + '\\nf:' + staff_lines['f'] + '\\ne:' + staff_lines['e'] + '\\nd:' + staff_lines['d'] + '\\nc:' + staff_lines['c'] + '\\nb:' + staff_lines['b'] + '\\na:' + staff_lines['a'] + '\\n'\n    \n    return output",
        "test": "assert solution(27, \"C C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:                                                       ",
        "num_ids": 1817,
        "indeed": false
    },
    {
        "number": 4895,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    sticks = list(map(int, stdin.readline().strip().split()))\n\n    sticks.sort()\n\n    if sticks[0] + sticks[1] > sticks[2]:\n        return \"possible\"\n    else:\n        return \"impossible\"",
        "test": "assert solution(\"4\\n1 1 2 2\") == \"possible\"",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 4896,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    bricks = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n\n    towers = []\n    for brick in bricks:\n        if not towers or brick > towers[-1]:\n            towers.append(brick)\n        else:\n            for i in range(len(towers)):\n                if brick <= towers[i]:\n                    towers[i] = brick\n                    break\n\n    return str(len(towers))",
        "test": "assert solution(\"5\\n1 1 1 1 1\") == \"1\"",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 4897,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def parse_input(stdin: str) -> tuple:\n        lines = stdin.split(\"\\n\")\n        n = int(lines[0])\n        runners = []\n        for line in lines[1:]:\n            name, time_1st, time_other = line.split()\n            time_1st = float(time_1st)\n            time_other = float(time_other)\n            runners.append((name, time_1st, time_other))\n        return n, runners\n\n    def find_best_team(n: int, runners: list) -> tuple:\n        best_time = float(\"inf\")\n        best_team = None\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                for k in range(n):\n                    if k in (i, j):\n                        continue\n                    for l in range(n):\n                        if l in (i, j, k):\n                            continue\n                        team_time = runners[i][1] + runners[j][2] + runners[k][2] + runners[l][2]\n                        if team_time < best_time:\n                            best_time = team_time\n                            best_team = (runners[i][0], runners[j][0], runners[k][0], runners[l][0])\n        return best_time, best_team\n\n    n, runners = parse_input(stdin)\n    best_time, best_team = find_best_team(n, runners)\n    output = f\"{best_time:.2f}\\n\"\n    for runner in best_team:\n        output += runner + \"\\n\"\n    return output",
        "test": "assert solution(\"\"\"6",
        "num_ids": 1180,
        "indeed": false
    },
    {
        "number": 4898,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    preferences = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n\n    def can_assign_minions(rooms):\n        assigned_minions = [False] * N\n        for room in rooms:\n            for minion in room:\n                assigned_minions[minion] = True\n        return all(assigned_minions)\n\n    def helper(index, rooms, used_minions):\n        if index == N:\n            return 1 if can_assign_minions(rooms) else 0\n\n        if used_minions[index]:\n            return helper(index + 1, rooms, used_minions)\n\n        room_index = 0\n        max_temp = -1\n        for i, room in enumerate(rooms):\n            if len(room) == 0:\n                room_index = i\n                break\n            temp = sum(preferences[minion][1] for minion in room) // len(room)\n            if temp > max_temp:\n                max_temp = temp\n                room_index = i\n\n        if max_temp == -1:\n            rooms.append([])\n            room_index = len(rooms) - 1\n\n        rooms[room_index].append(index)\n        used_minions[index] = True\n        result = helper(index + 1, rooms, used_minions)\n        rooms[room_index].remove(index)\n\n        return result\n\n    return helper(0, [], [False] * N)",
        "test": "assert solution(\"2\\n1 2\\n2 4\") == 1",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 4899,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return 'he' + 'e' * (len(s) - 2) + 'y'",
        "test": "assert solution(\"hey\") == \"heey\"",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 4900,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    distances = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    def find_cycle(visited, start):\n        cycle = [start]\n        while True:\n            visited[start] = True\n            found = False\n            for neighbor in range(n):\n                if not visited[neighbor] and distances[start][neighbor] != 0:\n                    start = neighbor\n                    cycle.append(start)\n                    found = True\n                    break\n            if not found:\n                break\n        return cycle\n\n    def get_cycle_road(cycle):\n        road = []\n        for i in range(len(cycle) - 1):\n            road.append((cycle[i], cycle[i + 1]))\n        road.append((cycle[-1], cycle[0]))\n        return road\n\n    visited = [False] * n\n    cycle = find_cycle(visited, 0)\n    road = get_cycle_road(cycle)\n\n    output = [f\"{u} {v}\" for u, v in road]\n    return \"\\n\".join(output)",
        "test": "assert solution(\"\"\"4",
        "num_ids": 847,
        "indeed": false
    },
    {
        "number": 4901,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def rotate_char(char: str, rot: int) -> str:\n        return chr((ord(char.upper()) - 65 + rot) % 26 + 65)\n\n    def rotate_string(s: str, rot: str) -> str:\n        return \"\".join(rotate_char(s[i], int(rot[i % len(rot)])) for i in range(len(s)))\n\n    def drm_decrypt(msg: str) -> str:\n        mid = len(msg) // 2\n        s1, s2 = msg[:mid], msg[mid:]\n        rot1 = sum(ord(c) - 64 for c in s1)\n        rot2 = sum(ord(c) - 64 for c in s2)\n        s1_dec = rotate_string(s1, s2)\n        s2_dec = rotate_string(s2, s1)\n        return rotate_string(s1_dec[:rot1] + s2_dec[:rot2], s1_dec[rot1:] + s2_dec[rot2:])\n\n    return drm_decrypt(stdin)",
        "test": "assert solution(\"JQTHYUNXMVWREQLWK\") == \"JEDPMRWOLZ\"",
        "num_ids": 987,
        "indeed": false
    },
    {
        "number": 4902,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    \n    def is_palindrome(word: str) -> bool:\n        return word == word[::-1]\n    \n    def is_peragram(word: str) -> bool:\n        for char in set(word):\n            if Counter(word)[char] % 2 != 0:\n                return False\n        return True\n    \n    stdin_counter = Counter(stdin)\n    peragram = ''\n    for char in stdin_counter:\n        if stdin_counter[char] % 2 != 0:\n            peragram += char * (stdin_counter[char] // 2)\n    \n    if is_peragram(peragram):\n        return 0\n    \n    min_removals = len(stdin)\n    for i in range(len(stdin)):\n        for j in range(i, len(stdin)):\n            new_word = stdin[:i] + stdin[i+1:j] + stdin[j+1:]\n            if is_peragram(new_word):\n                min_removals = min(min_removals, len(new_word))\n    \n    return len(stdin) - min_removals",
        "test": "assert solution(\"abccba\") == 0",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 4903,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    jon_marius, doctor = stdin.split(\"\\n\")\n    if jon_marius.count(\"a\") >= doctor.count(\"a\") and doctor[-1] == \"h\":\n        return \"go\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"aaah\\naaaaaah\") == \"no\"",
        "num_ids": 301,
        "indeed": true
    },
    {
        "number": 4904,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    alice_score, barbara_score = 0, 0\n    alice_turn = True\n\n    for i in range(len(stdin) // 2):\n        score = int(stdin[2 * i + 1])\n        if alice_turn:\n            alice_score += score\n        else:\n            barbara_score += score\n        alice_turn = not alice_turn\n\n    while alice_score == barbara_score:\n        if alice_score >= 11:\n            break\n        alice_score += int(stdin[2 * (i + 1) + 1])\n        barbara_score += int(stdin[2 * (i + 2) + 1])\n        i += 2\n\n    if alice_score == barbara_score:\n        while alice_score - barbara_score < 2:\n            alice_score += int(stdin[2 * (i + 1) + 1])\n            barbara_score += int(stdin[2 * (i + 2) + 1])\n            i += 2\n\n    if alice_score > barbara_score:\n        return 'A'\n    else:\n        return 'B'",
        "test": "assert solution(\"A2B1A2B2A1A2A2\") == \"A\"",
        "num_ids": 1003,
        "indeed": false
    },
    {
        "number": 4905,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, A, B, K, G = map(int, stdin.split()[0].split())\n    Luka_start, Luka_dest, misterGeorge_start_time, intersections_on_route = map(int, stdin.split()[1].split())\n    misterGeorge_route = list(map(int, stdin.split()[2].split()))\n    streets = [list(map(int, line.split())) for line in stdin.split()[3:]]\n\n    streets_dict = {}\n    for street in streets:\n        streets_dict[(street[0], street[1])] = street[2]\n        streets_dict[(street[1], street[0])] = street[2]\n\n    for i in range(len(misterGeorge_route) - 1):\n        streets_dict[(misterGeorge_route[i], misterGeorge_route[i + 1])] = 0\n\n    visited = set()\n    queue = [(A, 0, K)]\n\n    while queue:\n        curr_intersection, time_taken, time_left = queue.pop(0)\n        visited.add(curr_intersection)\n\n        if curr_intersection == B:\n            return time_taken + time_left\n\n        for next_intersection in range(1, N + 1):\n            if (curr_intersection, next_intersection) in streets_dict and next_intersection not in visited:\n                time_needed = streets_dict[(curr_intersection, next_intersection)]\n                if time_left >= time_needed:\n                    queue.append((next_intersection, time_taken + time_needed, time_left - time_needed))\n\n    return \"impossible\"",
        "test": "assert solution(\"\"\"6 5",
        "num_ids": 1437,
        "indeed": false
    },
    {
        "number": 4906,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    command, message = stdin.split(\" \", 1)\n    if command == \"E\":\n        encoded = \"\"\n        i = 0\n        while i < len(message):\n            count = 1\n            while i + 1 < len(message) and message[i] == message[i + 1]:\n                count += 1\n                i += 1\n            encoded += message[i] + str(count)\n            i += 1\n        return encoded\n    elif command == \"D\":\n        decoded = \"\"\n        i = 0\n        while i < len(message):\n            count = int(message[i + 1])\n            decoded += message[i] * count\n            i += 2\n        return decoded",
        "test": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"",
        "num_ids": 888,
        "indeed": true
    },
    {
        "number": 4907,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return \"Alice\\n\" + str(n // 2)\n    else:\n        return \"Bob\"\n\ndef",
        "test": "assert solution(\"3\") == \"Bob\"",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 4908,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    # Check for addition\n    if a + b == c:\n        return f\"{a}+{b}={c}\"\n    \n    # Check for subtraction\n    if a - b == c:\n        return f\"{a}-{b}={c}\"\n    \n    # Check for multiplication\n    if a * b == c:\n        return f\"{a}*{b}={c}\"\n    \n    # Check for division\n    if a // b == c:\n        return f\"{a}//{b}={c}\"",
        "test": "assert solution(\"5 3 8\") == \"5+3=8\"",
        "num_ids": 502,
        "indeed": false
    },
    {
        "number": 4909,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, *D = list(map(int, stdin.split()))\n    \n    def is_increasing(arr: list) -> bool:\n        return all(arr[i] < arr[i + 1] for i in range(len(arr) - 1))\n\n    def is_possible(n: int, d: list) -> bool:\n        if n == 1:\n            return True\n        visited = [False] * n\n        stack = [0]\n        while stack:\n            curr = stack.pop()\n            if not visited[curr]:\n                visited[curr] = True\n                if d[curr] == 0:\n                    continue\n                for i in range(curr + 1, curr + d[curr] + 1):\n                    if i < n and not visited[i] and d[i] > 0:\n                        stack.append(i)\n        return is_increasing(list(i for i in range(n) if visited[i]))\n\n    if is_possible(N, D):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"",
        "num_ids": 753,
        "indeed": false
    },
    {
        "number": 4910,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def clean_input(stdin: str) -> tuple:\n        lines = stdin.split(\"\\n\")\n        n = int(lines[0])\n        costumes = lines[1:]\n        return n, costumes\n\n    def calculate_chances(costumes: list) -> dict:\n        chances = {}\n        for costume in costumes:\n            if costume in chances:\n                chances[costume] += 1\n            else:\n                chances[costume] = 1\n        return chances\n\n    def find_best_categories(chances: dict) -> list:\n        max_chance = max(chances.values())\n        best_categories = [\n            category for category, chance in chances.items() if chance == max_chance\n        ]\n        return sorted(best_categories)\n\n    n, costumes = clean_input(stdin)\n    chances = calculate_chances(costumes)\n    best_categories = find_best_categories(chances)\n\n    return \"\\n\".join(best_categories)",
        "test": "assert solution(\"3\\nghost\\nmummy\\nwitch\") == \"ghost\\nmummy\\nwitch\"",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 4911,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    attributes, songs, sorts = stdin.strip().split('\\n')\n    attributes = attributes.split()\n    songs = [dict(zip(attributes, song.split())) for song in songs.split('\\n')]\n    sorts = sorts.split('\\n')\n\n    def sort_key(song, attribute):\n        return song[attribute]\n\n    for attribute in sorts:\n        songs.sort(key=lambda song: sort_key(song, attribute))\n        output = attributes + ['\\n'] + [' '.join(song.values()) for song in songs] + ['\\n']\n        yield '\\n'.join(output)",
        "test": "assert solution(\"\"\"Artist Album Song_Title Length_seconds",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 4912,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    h, w, n = map(int, stdin.split('\\n')[0].split())\n    bricks = list(map(int, stdin.split('\\n')[1].split()))\n\n    for i in range(n):\n        layers = [0] * h\n        for j in range(h):\n            if layers[j] + bricks[i] <= w:\n                layers[j] += bricks[i]\n            else:\n                break\n        else:\n            return \"YES\"\n    return \"NO\"",
        "test": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\\n\") == \"YES\"",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 4913,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_efficacy(vaccinated_infected, control_infected):\n        if control_infected == 0:\n            return 100.0\n        if vaccinated_infected == 0:\n            return 0.0\n        return (1 - vaccinated_infected / control_infected) * 100\n\n    N = int(stdin.readline())\n    data = [list(line.strip()) for line in stdin]\n\n    vaccinated = [person for person in data if person[0] == 'Y']\n    control = [person for person in data if person[0] == 'N']\n\n    strain_A_vaccinated_infected = sum([1 for person in vaccinated if person[1] == 'Y'])\n    strain_A_control_infected = sum([1 for person in control if person[1] == 'Y'])\n\n    strain_B_vaccinated_infected = sum([1 for person in vaccinated if person[2] == 'Y'])\n    strain_B_control_infected = sum([1 for person in control if person[2] == 'Y'])\n\n    strain_C_vaccinated_infected = sum([1 for person in vaccinated if person[3] == 'Y'])\n    strain_C_control_infected = sum([1 for person in control if person[3] == 'Y'])\n\n    efficacy_A = calculate_efficacy(strain_A_vaccinated_infected, strain_A_control_infected)\n    efficacy_B = calculate_efficacy(strain_B_vaccinated_infected, strain_B_control_infected)\n    efficacy_C = calculate_efficacy(strain_C_vaccinated_infected, strain_C_control_infected)\n\n    result = [f\"{efficacy:.6f}\" if efficacy != 0 else \"Not Effective\" for efficacy in [efficacy_A, efficacy_B, efficacy_C]]\n    return \"\\n\".join(result)",
        "test": "assert solution(\"\"\"10",
        "num_ids": 1730,
        "indeed": false
    },
    {
        "number": 4914,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def count_correct_answers(sequence: str) -> int:\n        return sum(1 for c1, c2 in zip(sequence, correct_answers) if c1 == c2)\n\n    def find_max_correct_answers(sequences: dict) -> str:\n        max_correct_answers = 0\n        max_boys = []\n        for boy, sequence in sequences.items():\n            correct_answers_count = count_correct_answers(sequence)\n            if correct_answers_count > max_correct_answers:\n                max_correct_answers = correct_answers_count\n                max_boys = [boy]\n            elif correct_answers_count == max_correct_answers:\n                max_boys.append(boy)\n        return max_correct_answers, max_boys\n\n    N = int(stdin.readline().strip())\n    correct_answers = stdin.readline().strip()\n\n    sequences = {\n        \"Adrian\": \"ABC\" * (N // 3 + N % 3),\n        \"Bruno\": \"BACBC\" * (N // 5 + N % 5),\n        \"Goran\": \"CCAAB\" * (N // 5 + N % 5)\n    }\n\n    max_correct_answers, max_boys = find_max_correct_answers(sequences)\n\n    return f\"{max_correct_answers}\\n\" + \"\\n\".join(sorted(max_boys)) + \"\\n\"",
        "test": "assert solution(\"10\\nABACCBABCAB\") == \"6\\nAdrian, Bruno\"",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 4915,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    log = [line.strip().split() for line in stdin.split('\\n')[:-1]]\n    solved_problems = set()\n    total_time = 0\n    wrong_submissions = {}\n\n    for minute, problem, result in log:\n        if problem not in solved_problems:\n            if result == 'right':\n                solved_problems.add(problem)\n                if problem in wrong_submissions:\n                    total_time += int(minute) + 20 * wrong_submissions[problem]\n                    del wrong_submissions[problem]\n                else:\n                    total_time += int(minute)\n            else:\n                if problem in wrong_submissions:\n                    wrong_submissions[problem] += 1\n                else:\n                    wrong_submissions[problem] = 1\n\n    return f\"{len(solved_problems)} {total_time}\"",
        "test": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"",
        "num_ids": 915,
        "indeed": true
    },
    {
        "number": 4916,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.readline().split())))\n\n    def is_valid(x: int, y: int) -> bool:\n        return 0 <= x < n and 0 <= y < n\n\n    def bfs(start_x: int, start_y: int, end_value: int) -> int:\n        queue = [(start_x, start_y, 0)]\n        visited = set()\n        while queue:\n            x, y, distance = queue.pop(0)\n            if (x, y) in visited:\n                continue\n            visited.add((x, y))\n            if matrix[x][y] == end_value:\n                return distance\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                new_x, new_y = x + dx, y + dy\n                if is_valid(new_x, new_y) and (new_x, new_y) not in visited:\n                    queue.append((new_x, new_y, distance + 1))\n        return -1\n\n    result = bfs(0, 0, k)\n    return str(result)",
        "test": "assert solution(\"\"\"",
        "num_ids": 1059,
        "indeed": false
    },
    {
        "number": 4917,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    intervals = []\n    for i in range(n):\n        start, end = map(int, stdin.split('\\n')[i+1].split())\n        intervals.append((start, end))\n\n    # Sort intervals by endpoints\n    intervals.sort(key=lambda x: x[1])\n\n    # Check if all pots start boiling at the same time\n    start_time = intervals[0][1]\n    for i in range(1, n):\n        if intervals[i][0] < start_time or intervals[i][1] > start_time + 1:\n            return \"edward is right\"\n        start_time = intervals[i][1]\n\n    return \"gunilla has a point\"",
        "test": "assert solution(\"3\\n1 2\\n3 5\\n10 11\") == \"edward is right\"",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 4918,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, q = map(int, stdin.readline().split())\n    group_sizes = [1] * n\n    adjacency_list = [[] for _ in range(n)]\n\n    # Process 't' queries\n    for _ in range(q):\n        query = stdin.readline().split()\n        if query[0] == 't':\n            a, b = map(int, query[1:])\n            a -= 1\n            b -= 1\n            if not adjacency_list[a] or adjacency_list[a][-1] != b:\n                adjacency_list[a].append(b)\n            if not adjacency_list[b] or adjacency_list[b][-1] != a:\n                adjacency_list[b].append(a)\n\n    # Process 's' queries\n    output = []\n    for _ in range(q):\n        query = stdin.readline().split()\n        if query[0] == 's':\n            a = int(query[1]) - 1\n            group_size = group_sizes[a]\n            while adjacency_list[a]:\n                b = adjacency_list[a].pop()\n                group_sizes[b] = group_size\n                group_sizes[a] = group_size\n                group_size += group_sizes[b]\n                adjacency_list[b] = []\n            output.append(group_size)\n\n    # Return output\n    return '\\n'.join(map(str, output))",
        "test": "assert solution(\"10 11\\nt 1 10\\nt 1 2\\nt 1 3\\ns 1\\ns 2\\ns 3\\ns 4\\nt 5 6\\ns 5\\ns 6\\ns 10\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\" ",
        "num_ids": 1316,
        "indeed": false
    },
    {
        "number": 4919,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    trips = {}\n    for i in range(1, n + 1):\n        country, year = lines[i].split(' ')\n        year = int(year)\n        if country not in trips:\n            trips[country] = [year]\n        else:\n            trips[country].append(year)\n    \n    # Process queries\n    q = int(lines[n + 1])\n    output = []\n    for i in range(n + 2, n + 2 + q):\n        country, k = lines[i].split(' ')\n        k = int(k)\n        output.append(trips[country][k - 1])\n    \n    # Format output\n    return '\\n'.join(str(x) for x in output)",
        "test": "assert solution(\"\"\"4",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 4920,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    events = list(stdin)\n    unique_events = list(set(events))\n    n = len(events)\n    m = len(unique_events)\n    total_itineraries = 0\n\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            if events[i] != events[j] and events[0] != events[j] and events[i] != events[-1]:\n                total_itineraries += 1\n\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            if events[i] != events[j] and events[0] != events[j]:\n                total_itineraries += 1\n\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            if events[i] != events[j] and events[j] != events[-1]:\n                total_itineraries += 1\n\n    return total_itineraries",
        "test": "assert solution(\"a\") == 0",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 4921,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    seen_words = set()\n    result = \"\"\n\n    for word in words:\n        word = word.lower()\n        if word not in seen_words:\n            seen_words.add(word)\n            result += word + \" \"\n        else:\n            result += \". \"\n\n    return result[:-1]",
        "test": "assert solution(\"The quick brown fox jumps over the lazy dog\\nThe lazy dog is very quick\\nThe dog slept all day\") == \"The quick brown fox jumps over the lazy dog\\n. is very .\\n. slept all day\"",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 4922,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    m, n = map(int, lines[0].split())\n    clauses = [list(map(int, line.split())) for line in lines[1:]]\n\n    satisfactory = False\n    if m >= 8:\n        satisfactory = True\n\n    return \"satisfactory\" if satisfactory else \"unsatisfactory\"",
        "test": "assert solution(\"8 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n-1 2 -3\\n1 -2 3\\n-1 -2 3\") == \"satisfactory\"",
        "num_ids": 593,
        "indeed": true
    },
    {
        "number": 4923,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    outcomes = list(map(int, stdin.readline().strip().split()))\n    unique_outcomes = list(set(outcomes))\n    winner = None\n\n    for outcome in unique_outcomes:\n        if outcomes.count(outcome) == 1:\n            winner = outcomes.index(outcome)\n            break\n\n    return str(winner) if winner is not None else \"none\"",
        "test": "assert solution(\"6\\n6 6 5 6 4 3\") == \"none\"",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 4924,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    current_time, explosion_time = stdin.strip().split('\\n')\n    current_time = list(map(int, current_time.split(':')))\n    explosion_time = list(map(int, explosion_time.split(':')))\n    time_difference = [explosion_time[i] - current_time[i] for i in range(3)]\n    if time_difference[0] < 0:\n        time_difference[0] += 24\n    for i in range(1, 3):\n        if time_difference[i] < 0:\n            time_difference[i - 1] -= 1\n            time_difference[i] += 60\n    time_difference[0] = str(time_difference[0]).zfill(2)\n    time_difference[1:] = [str(t).zfill(2) for t in time_difference[1:]]\n    return ':'.join(time_difference)",
        "test": "assert solution(\"20:00:00\\n04:00:00\") == \"08:00:00\"",
        "num_ids": 900,
        "indeed": true
    },
    {
        "number": 4925,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    l, n = map(int, stdin.split())\n    return str((l // n) + 1)",
        "test": "assert solution(10, 5) == 1",
        "num_ids": 200,
        "indeed": false
    },
    {
        "number": 4926,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    e = 1\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n        e += 1 / fact\n    return f\"{e:.13f}\"",
        "test": "assert solution(\"1\") == \"2.2380952380952380\"",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 4927,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = map(int, stdin.split())\n    if P % (2 * N) < Q % (2 * N):\n        return \"paul\"\n    else:\n        return \"opponent\"",
        "test": "assert solution(\"7 10 10\") == \"opponent\"",
        "num_ids": 276,
        "indeed": true
    },
    {
        "number": 4928,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    return str(n + 1)",
        "test": "assert solution(\"1\") == \"2\"",
        "num_ids": 176,
        "indeed": false
    },
    {
        "number": 4929,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    S, P = stdin.split(\"\\n\")\n\n    def reverse_case(s: str) -> str:\n        return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\n    # Check if P is identical to S\n    if P == S:\n        return \"Yes\"\n\n    # Check if S can be formed from P by prepending a single digit (0\u20139)\n    for i in range(10):\n        if S == str(i) + P:\n            return \"Yes\"\n\n    # Check if S can be formed from P by appending a single digit\n    for i in range(10):\n        if S == P + str(i):\n            return \"Yes\"\n\n    # Check if S is equal to P after reversing the case of all letters in P\n    if S == reverse_case(P):\n        return \"Yes\"\n\n    # If none of the above conditions are met, reject P\n    return \"No\"",
        "test": "assert solution(\"123\\n123a\") == \"No\"",
        "num_ids": 650,
        "indeed": true
    },
    {
        "number": 4930,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    words = stdin.split(' ')\n    for i in range(len(words)):\n        word = words[i]\n        new_word = ''\n        for j in range(len(word)):\n            if word[j] in vowels:\n                new_word += word[j] * 2\n            else:\n                new_word += word[j]\n        words[i] = new_word\n    return ' '.join(words)",
        "test": "assert solution(\"kepemipijapa kupecpapuapa\") == \"kemija kupec\"",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 4931,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.strip().split())\n\n    # Calculate the temperature where both scales are the same\n    T = (X * Y) / (Y - 1)\n\n    # Check if the temperature is within the given error range\n    if abs(round(T) - T) <= 10 ** (-6):\n        return str(round(T))\n    else:\n        return \"IMPOSSIBLE\"",
        "test": "assert solution(\"0 1\") == \"0\"",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 4932,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, P, M, G = map(int, stdin.split())\n    \n    def get_attacking_dogs(arrival_time):\n        dog1_arrival_time = 0\n        dog2_arrival_time = 0\n        \n        while True:\n            dog1_arrival_time += A + B\n            dog2_arrival_time += C + D\n            \n            if arrival_time <= dog1_arrival_time:\n                return \"both\" if arrival_time <= dog2_arrival_time else \"one\"\n    \n    return \"\\n\".join([get_attacking_dogs(P), get_attacking_dogs(M), get_attacking_dogs(G)])",
        "test": "assert solution(\"1 3 2 4\\n1 3 4\") == \"one\\nboth\\nnone\"",
        "num_ids": 1384,
        "indeed": false
    },
    {
        "number": 4933,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    nums = sorted(list(map(int, stdin.split())))\n    diff = nums[1] - nums[0]\n    return str(nums[-1] + diff)",
        "test": "assert solution(\"4 6 8\") == \"10\"",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 4934,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    h, v = map(int, stdin.split())\n    \n    # Calculate the distance from the base of the wall to the top of the wall, considering the angle\n    d = h / tan(radians(v))\n    \n    # Calculate the length of the ladder\n    ladder_length = d / cos(radians(v))\n    \n    # Round up the ladder length to the nearest integer\n    ladder_length = ceil(ladder_length)\n    \n    return str(ladder_length)",
        "test": "assert solution(\"10000 1\") == \"10001\"",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 4935,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_velocity(distance: int, angle: int, g: float) -> float:\n        return distance / (1 / (g * np.cos(np.radians(angle))))\n\n    data = list(map(str.split, stdin.split('\\n')))\n    N = int(data[0][0])\n    g = float(data[0][1])\n\n    velocities = []\n    for i in range(1, N + 1):\n        distance = int(data[i][0])\n        angle = int(data[i][1])\n        velocity = calculate_velocity(distance, angle, g)\n        velocities.append(velocity)\n\n    return '\\n'.join(map(str, velocities))",
        "test": "assert solution(\"4 9.8\\n10 30\\n20 45\\n30 60\\n40 75\\n50 90\") == \"14.0\\n22.0\\n34.0\\n49.0\"",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 4936,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    temps = list(map(int, stdin.split('\\n')[1].split()))\n\n    min_temp = float('inf')\n    start_day = -1\n\n    for i in range(n - 2):\n        temp_sum = sum(temps[i:i + 2])\n        if temp_sum < min_temp:\n            min_temp = temp_sum\n            start_day = i + 1\n\n    return f\"{start_day} {min_temp}\\n\"",
        "test": "assert solution(\"4\\n23 22 28 25\") == \"2 25\"",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 4937,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    fleet = list(map(int, stdin.split()))\n    \n    battles_won = 0\n    for i in range(n):\n        if a >= fleet[i]:\n            battles_won += 1\n            a -= fleet[i]\n    return str(battles_won)\n\nstdin = input().rstrip()\nprint(solution(stdin)) ",
        "test": "assert solution(\"4 10\\n2 4 3 7\\n\") == \"3\"",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 4938,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    max_diff, gender_queue = stdin.strip().split('\\n')\n    max_diff = int(max_diff)\n    gender_queue = gender_queue.strip()\n\n    count_men = 0\n    count_women = 0\n    count_total = 0\n\n    for gender in gender_queue:\n        if gender == \"M\":\n            count_men += 1\n        elif gender == \"W\":\n            count_women += 1\n\n        if abs(count_women - count_men) > max_diff:\n            break\n\n        count_total += 1\n\n    return str(count_total)",
        "test": "assert solution(\"1\\nMWWMWMMWM\") == \"9\"",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 4939,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    commands = stdin.split()[1:]\n\n    pos = 0\n    throws = []\n\n    for command in commands:\n        if command.isdigit():\n            pos = (pos + int(command)) % n\n            throws.append(pos)\n        elif command.startswith('undo'):\n            m = int(command.split()[1])\n            throws = throws[:-m]\n            pos = throws[-1] if throws else 0\n\n    return str(pos)",
        "test": "assert solution(\"6 5\\n0 2 -4 undo 1 undo 1\") == \"5\"",
        "num_ids": 684,
        "indeed": false
    },
    {
        "number": 4940,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def get_swather_order(N: int, M: int, P: List[List[int]]) -> List[int]:\n        swathers = [(i, 0) for i in range(1, N + 1)]\n        swathers.sort(key=lambda x: P[x[0] - 1][0])\n        return [swathers[i][0] for i in range(N)]\n\n    def get_swather_completion_time(N: int, M: int, P: List[List[int]]) -> List[int]:\n        swather_order = get_swather_order(N, M, P)\n        completion_times = [0] * N\n        for j in range(M):\n            for i in range(N):\n                completion_times[i] += P[swather_order[i] - 1][j]\n        return completion_times\n\n    N, M = map(int, stdin.readline().split())\n    P = [list(map(int, stdin.readline().split())) for _ in range(N)]\n\n    completion_times = get_swather_completion_time(N, M, P)\n    return \" \".join(map(str, completion_times))",
        "test": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\" ",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 4941,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sentence = stdin.readline().strip().split()\n    m = int(stdin.readline().strip())\n    dictionary = {}\n    correct = 0\n    incorrect = 0\n\n    for i in range(m):\n        dutch, english, status = stdin.readline().strip().split()\n        if dutch not in dictionary:\n            dictionary[dutch] = []\n        dictionary[dutch].append((english, status))\n\n    def find_translations(sentence: List[str], index: int, translations: List[str]) -> List[str]:\n        if index == len(sentence):\n            return [translations]\n        word_translations = dictionary[sentence[index]]\n        all_translations = []\n        for translation, status in word_translations:\n            if status == \"correct\":\n                find_translations(sentence, index + 1, translations + [translation])\n                all_translations.append(translations + [translation])\n            else:\n                incorrect += 1\n        return all_translations\n\n    translations = find_translations(sentence, 0, [])\n    for translation in translations:\n        if len(translation) == n:\n            correct += 1\n        else:\n            incorrect += 1\n\n    return f\"{correct} correct\\n{incorrect} incorrect\" ",
        "test": "assert solution(\"\"\"7",
        "num_ids": 1128,
        "indeed": false
    },
    {
        "number": 4942,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    t = [int(x) for x in stdin.split('\\n')[1].split()]\n    t.sort()\n    return str(sum(t)) ",
        "test": "assert solution(\"2\\n1 1\\n\") == \"2\"",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 4943,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    from math import sqrt\n\n    def distance(p1, p2):\n        return sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n\n    def area(poly):\n        return abs(sum([poly[i][0] * poly[i + 1][1] - poly[i + 1][0] * poly[i][1] for i in range(len(poly))])) / 2\n\n    def scale_poly(poly, area):\n        center = sum([(p[0], p[1]) for p in poly], (0, 0)) / len(poly)\n        scaled_poly = [((p[0] - center[0]) * sqrt(area / orig_area) + center[0],\n                         (p[1] - center[1]) * sqrt(area / orig_area) + center[1])\n                        for p in poly]\n        return scaled_poly\n\n    def move_to_origin(poly):\n        return [(p[0] - min(x[0] for x in poly), p[1] - min(y[1] for y in poly)) for p in poly]\n\n    input_data = list(map(str.strip, stdin.split('\\n')))\n    n = int(input_data[0])\n    polygon = [(float(x), float(y)) for x, y in (line.split() for line in input_data[1:n + 1])]\n    orig_area = area(polygon)\n    target_area = float(input_data[n + 1])\n\n    scaled_polygon = scale_poly(polygon, target_area)\n    moved_polygon = move_to_origin(scaled_polygon)\n\n    return '\\n'.join(['{:.6f} {:.6f}'.format(*p) for p in moved_polygon])",
        "test": "assert solution(\"4\\n-1 0\\n0 1\\n1 0\\n0 -1\\n10\\n\") == \"0.0 0.0\\n5.0 5.0\\n10.0 0.0\\n5.0 -5.0\\n0.0 -10.0\"",
        "num_ids": 2113,
        "indeed": false
    },
    {
        "number": 4944,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(n)",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 4945,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, m, sigma = map(int, stdin.split())\n    \n    max_rent = 0\n    for x in range(1, m + 1):\n        for y in range(1, m - x + 1):\n            if 2 * x + y >= sigma:\n                rent = x * a + y * b\n                if rent > max_rent:\n                    max_rent = rent\n    \n    return str(max_rent)",
        "test": "assert solution(\"3 1\\n12 16\") == \"34\"",
        "num_ids": 779,
        "indeed": true
    },
    {
        "number": 4946,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    languages = list(map(int, lines[1].split()))\n\n    awkwardness = n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n\n    return str(awkwardness)",
        "test": "assert solution(\"4\\n1 2 3 1\") == \"3\"",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 4947,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    roman_paces = int(1000 * (5280 / 4854) * x + 0.5)\n    return str(roman_paces)",
        "test": "assert solution(\"0.0\") == \"0\"",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 4948,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def slice_weight(thickness):\n        weight = 0\n        for i in range(len(holes)):\n            r, x, y, z = holes[i]\n            if abs(z) - r <= thickness and z <= 0:\n                weight += (4 * r**2 * thickness) / 3\n        return weight\n\n    def bisect(target_weight):\n        low, high = 0, 100\n        while high - low > 1e-6:\n            mid = (low + high) / 2\n            if slice_weight(mid) <= target_weight:\n                low = mid\n            else:\n                high = mid\n        return low\n\n    n, s = map(int, stdin.split())\n    holes = []\n    for _ in range(n):\n        r, x, y, z = map(int, input().split())\n        holes.append((r, x, y, z))\n\n    target_weight = 100 * 100 * 100 / s\n    thicknesses = [bisect(target_weight / s) for _ in range(s)]\n    return '\\n'.join(f'{t:.10f}' for t in thicknesses)",
        "test": "assert solution(\"1 4\\n500 50000 50000 50000\\n\") == \"25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\\n\"",
        "num_ids": 1427,
        "indeed": false
    },
    {
        "number": 4949,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, w, h = map(int, input_list[0].split())\n    matches = list(map(int, input_list[1:]))\n    output_list = []\n\n    for match in matches:\n        if match <= w or match <= h:\n            output_list.append(\"DA\")\n        else:\n            output_list.append(\"NE\")\n\n    return \"\\n\".join(output_list)",
        "test": "assert solution(\"7 4 5\\n1\\n2\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nDA\\nDA\\nNE\\nNE\"",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 4950,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    checkpoints = [(int(line.split()[0]), int(line.split()[1])) for line in stdin.splitlines()[1:]]\n    max_speed = 0\n    for i in range(n - 1):\n        time_diff = checkpoints[i+1][0] - checkpoints[i][0]\n        distance_diff = checkpoints[i+1][1] - checkpoints[i][1]\n        current_speed = distance_diff / time_diff\n        max_speed = max(max_speed, current_speed)\n    return str(int(max_speed))",
        "test": "assert solution(\"2\\n0 0\\n7 42\") == \"6\"",
        "num_ids": 721,
        "indeed": true
    },
    {
        "number": 4951,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(line: str, assumptions: set, conclusions: set) -> bool:\n        parts = line.split(\" -> \")\n        if len(parts) != 2:\n            return False\n        assumption, conclusion = parts\n        if len(assumption.split()) != len(assumptions):\n            return False\n        if conclusion not in conclusions:\n            return False\n        for ass in assumption.split():\n            if ass not in assumptions:\n                return False\n        return True\n\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    assumptions = set()\n    conclusions = set()\n    for i in range(1, n + 1):\n        line = lines[i]\n        parts = line.split(\" -> \")\n        if len(parts) == 2:\n            _, conclusion = parts\n            assumptions.add(conclusion)\n        if not is_valid(line, assumptions, conclusions):\n            return i\n        for ass in assumptions:\n            conclusions.add(ass)\n\n    return \"correct\"",
        "test": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> DAVE\\nALICE BOB CARL -> DAVE\") == \"2\"",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 4952,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    votes = {}\n    for line in stdin.split('\\n')[:-1]:\n        if line not in votes:\n            votes[line] = 1\n        else:\n            votes[line] += 1\n\n    max_votes = max(votes.values())\n    max_voters = [name for name, count in votes.items() if count == max_votes]\n\n    if len(max_voters) == 1:\n        return max_voters[0]\n    else:\n        return \"Runoff!\"",
        "test": "assert solution(\"\"\"Penny Franklin",
        "num_ids": 506,
        "indeed": true
    },
    {
        "number": 4953,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into lines\n    lines = stdin.strip().split('\\n')\n\n    # Extract the number of characters\n    num_characters = int(lines[0])\n\n    # Create a dictionary to store each character's information\n    characters = {}\n\n    # Iterate over the remaining lines and store the information for each character\n    for line in lines[1:]:\n        name, language, *other_languages = line.split()\n        characters[name] = {\n            'language': language,\n            'other_languages': set(other_languages)\n        }\n\n    # Initialize an empty set to store the characters to remove\n    remove = set()\n\n    # Iterate over the characters\n    for name, character in characters.items():\n        # If the character has already been removed, skip them\n        if name in remove:\n            continue\n\n        # Iterate over the other characters\n        for other_name, other_character in characters.items():\n            # If the other character has already been removed, skip them\n            if other_name in remove:\n                continue\n\n            # If the current character can't communicate with the other character,\n            # add them both to the remove set\n            if not can_communicate(character, other_character):\n                remove.add(name)\n                remove.add(other_name)\n\n    # Return the size of the smallest set of characters to remove\n    return str(len(remove))\n\n\ndef",
        "test": "assert solution(\"\"\"7",
        "num_ids": 983,
        "indeed": false
    },
    {
        "number": 4954,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(price, available_beds):\n        for weekend in available_beds:\n            if weekend >= N:\n                return True\n        return False\n\n    lines = stdin.splitlines()\n    N, B, H, W = map(int, lines[0].split())\n    min_cost = float('inf')\n\n    for i in range(1, H + 1):\n        p, available_beds = map(int, lines[i * 2 - 1].split()), list(map(int, lines[i * 2].split()))\n        if is_valid(p, available_beds):\n            total_cost = p * N\n            if total_cost <= B and total_cost < min_cost:\n                min_cost = total_cost\n\n    return str(min_cost) if min_cost != float('inf') else \"stay home\" ",
        "test": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n0 0 0\\n\") == \"stay home\"",
        "num_ids": 1077,
        "indeed": false
    },
    {
        "number": 4955,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_major_scale(notes: str) -> bool:\n        intervals = [2, 2, 1, 2, 2, 2, 1]\n        current_note = notes[0]\n        for i in range(1, len(notes)):\n            next_note_idx = (notes.index(current_note) + intervals[i - 1]) % 12\n            if notes[i] != notes[next_note_idx]:\n                return False\n            current_note = notes[i]\n        return True\n\n    def all_scales(notes: str) -> list:\n        scales = []\n        for note in notes:\n            if note not in scales:\n                scales.append(note)\n            if is_major_scale(scales):\n                yield scales\n            if len(scales) == 12:\n                return\n            scales.append(notes[notes.index(note) + 1])\n\n    n = int(stdin.strip().split(\"\\n\")[0])\n    input_notes = stdin.strip().split(\"\\n\")[1].split()\n\n    scales = list(set([\" \".join(scale) for scale in all_scales(input_notes)]))\n\n    if not scales:\n        return \"none\"\n    return \"\\n\".join(sorted(scales))\n",
        "test": "assert solution(\"6\\nA B C A B C\") == \"A B C# D# E\"",
        "num_ids": 1364,
        "indeed": false
    },
    {
        "number": 4956,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    ae_count = sum(word.count(\"ae\") for word in words)\n    total_words = len(words)\n    percentage = (ae_count / total_words) * 100\n\n    if percentage >= 40:\n        return \"dae ae ju traeligt va\"\n    else:\n        return \"haer talar vi rikssvenska\"",
        "test": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"",
        "num_ids": 520,
        "indeed": true
    },
    {
        "number": 4957,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_adjacent(x1: int, y1: int, x2: int, y2: int) -> bool:\n        return abs(x1 - x2) + abs(y1 - y2) == 1\n    \n    def is_valid_placement(land_cells: list, x: int, y: int) -> bool:\n        for i, j in land_cells:\n            if (x, y) != (i, j) and is_adjacent(x, y, i, j):\n                return False\n        return True\n    \n    def find_valid_placement(land_cells: list) -> str:\n        for i, j in land_cells:\n            if is_valid_placement(land_cells, i, j):\n                map[i] = map[i][:j] + 'E' + map[i][j + 1:]\n                land_cells.remove((i, j))\n                if not land_cells:\n                    return '\\n'.join(map)\n                result = find_valid_placement(land_cells)\n                if result:\n                    return result\n                map[i] = map[i][:j] + '.' + map[i][j + 1:]\n                land_cells.append((i, j))\n        return None\n    \n    n, m = map(int, stdin.readline().split())\n    map = [stdin.readline().rstrip() for _ in range(n)]\n    \n    land_cells = [(i, j) for i in range(n) for j in range(m) if map[i][j] != '#']\n    return find_valid_placement(land_cells)",
        "test": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"",
        "num_ids": 1682,
        "indeed": false
    },
    {
        "number": 4958,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    input_list = list(map(int, stdin.split()))\n    box_heights = input_list[:6]\n    tower_heights = input_list[6:]\n\n    # Sort the box heights in decreasing order\n    box_heights.sort(reverse=True)\n\n    # Determine which boxes belong to each tower\n    first_tower_boxes = []\n    second_tower_boxes = []\n    for box_height in box_heights:\n        if sum(first_tower_boxes) + box_height <= tower_heights[0]:\n            first_tower_boxes.append(box_height)\n        else:\n            second_tower_boxes.append(box_height)\n\n    # Output the box heights\n    output = \" \".join(map(str, first_tower_boxes)) + \" \" + \" \".join(map(str, second_tower_boxes))\n    return output",
        "test": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'",
        "num_ids": 988,
        "indeed": true
    },
    {
        "number": 4959,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    e, f, c = map(int, stdin.split())\n    total_bottles = e + f\n    sodas_bought = total_bottles // c\n    return str(sodas_bought)",
        "test": "assert solution(\"0 10 4\") == \"2\"  # Testcase 2",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 4960,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    binary = stdin\n    while len(binary) % 3 != 0:\n        binary = \"0\" + binary\n\n    octal = \"\"\n    for i in range(0, len(binary), 3):\n        group = binary[i:i+3]\n        octal_digit = str(int(group, 2))\n        octal += octal_digit\n\n    return octal",
        "test": "assert solution(\"1010\") == \"12\"",
        "num_ids": 388,
        "indeed": true
    },
    {
        "number": 4961,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    R, S = map(int, stdin.readline().strip().split())\n    seating_order = [list(stdin.readline().strip()) for _ in range(R)]\n\n    # Find Mirko's position\n    for i in range(R):\n        for j in range(S):\n            if seating_order[i][j] == 'o':\n                mirko_row, mirko_col = i, j\n                break\n        else:\n            continue\n        break\n\n    # Count handshakes\n    handshakes = 0\n    for i in range(max(0, mirko_row - 1), min(R, mirko_row + 2)):\n        for j in range(max(0, mirko_col - 1), min(S, mirko_col + 2)):\n            if seating_order[i][j] == '.':\n                seating_order[i][j] = 'o'\n                handshakes += 1\n\n    return str(handshakes)",
        "test": "assert solution(\"\"\"2 3",
        "num_ids": 802,
        "indeed": false
    },
    {
        "number": 4962,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.readline().split())\n    A = [0] * N\n    B = [0] * N\n    stored = [False] * N\n\n    for i in range(N):\n        A[i], B[i] = map(int, stdin.readline().split())\n\n    def find_empty_drawer(start_drawer, visited_drawers):\n        current_drawer = start_drawer\n        while True:\n            if current_drawer == start_drawer:\n                return None\n            if not visited_drawers[current_drawer]:\n                return current_drawer\n            visited_drawers[current_drawer] = True\n            current_drawer = A[current_drawer - 1] if current_drawer == B[A.index(current_drawer)] else B[A.index(current_drawer)]\n\n    for i in range(N):\n        if not stored[i]:\n            if not A[i]:\n                stored[i] = True\n                print(\"LADICA\")\n            elif not B[i]:\n                stored[i] = True\n                print(\"LADICA\")\n            else:\n                visited_drawers = [False] * (L + 1)\n                visited_drawers[A[i]] = True\n                visited_drawers[B[i]] = True\n                if find_empty_drawer(A[i], visited_drawers):\n                    stored[i] = True\n                    print(\"LADICA\")\n                elif find_empty_drawer(B[i], visited_drawers):\n                    stored[i] = True\n                    print(\"LADICA\")\n                else:\n                    print(\"SMECE\")\n\n    return",
        "test": "assert solution(",
        "num_ids": 1035,
        "indeed": false
    },
    {
        "number": 4963,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    positions = list(map(int, stdin.split('\\n')[1].split()))\n\n    order = [1]\n    for i in range(n - 1):\n        if positions[i] == 0:\n            order.append(i + 2)\n        else:\n            order.insert(1, i + 2)\n\n    return ' '.join(map(str, order))",
        "test": "assert solution(\"2\\n0\") == \"1 2\"",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 4964,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_horror_index(movie_id, horror_list, similar_movies, visited_movies):\n        if movie_id in visited_movies:\n            return visited_movies[movie_id]\n\n        if movie_id in horror_list:\n            visited_movies[movie_id] = 0\n            return 0\n\n        similar_ids = similar_movies.get(movie_id, [])\n        if not similar_ids:\n            visited_movies[movie_id] = float('inf')\n            return float('inf')\n\n        horror_indices = [get_horror_index(similar_id, horror_list, similar_movies, visited_movies) for similar_id in similar_ids]\n        max_horror_index = max(horror_indices)\n        if max_horror_index == 0:\n            visited_movies[movie_id] = 1\n            return 1\n\n        visited_movies[movie_id] = max_horror_index + 1\n        return max_horror_index + 1\n\n    lines = stdin.strip().split('\\n')\n    N, H, L = map(int, lines[0].split())\n    horror_list = set(map(int, lines[1].split()))\n    similar_movies = {}\n\n    for i in range(2, 2 + L):\n        a, b = map(int, lines[i].split())\n        if a not in similar_movies:\n            similar_movies[a] = []\n        if b not in similar_movies:\n            similar_movies[b] = []\n        similar_movies[a].append(b)\n        similar_movies[b].append(a)\n\n    visited_movies = {}\n    max_horror_index = -1\n    max_movie_id = -1\n\n    for movie_id in range(N):\n        horror_index = get_horror_index(movie_id, horror_list, similar_movies, visited_movies)\n        if horror_index > max_horror_index or (horror_index == max_horror_index and movie_id < max_movie_id):\n            max_horror_index = horror_index\n            max_movie_id = movie_id\n\n    return str(max_movie_id)",
        "test": "assert solution(\"\"\"6 3 5",
        "num_ids": 1474,
        "indeed": false
    },
    {
        "number": 4965,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(arr: List[int]) -> bool:\n        for i in range(1, len(arr) - 1):\n            if abs(arr[i] - arr[i - 1]) > abs(arr[i + 1] - arr[i]):\n                return False\n        return True\n\n    def dfs(arr: List[int], path: List[int]) -> List[int]:\n        if not arr:\n            return path\n        for i in range(len(arr)):\n            if is_valid(path + [arr[i]]) and arr[i] not in path:\n                new_arr = arr[:i] + arr[i+1:]\n                result = dfs(new_arr, path + [arr[i]])\n                if result:\n                    return result\n        return []\n\n    n = int(stdin.split('\\n')[0])\n    pool_temps = list(map(int, stdin.split('\\n')[1].split()))\n\n    if n < 2 or n > 10**5:\n        return \"impossible\"\n\n    for temp in pool_temps:\n        if temp < -10**5 or temp > 10**5:\n            return \"impossible\"\n\n    result = dfs(pool_temps, [])\n\n    return ' '.join(map(str, result)) if result else \"impossible\"",
        "test": "assert solution(\"5\\n1 2 3 4 5\\n\") == \"impossible\"",
        "num_ids": 1211,
        "indeed": false
    },
    {
        "number": 4966,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = map(int, stdin.split())\n    t = list(map(int, input().split()))\n\n    total_time = 0\n    for i in range(n):\n        total_time += (t[i] - (t[i - 1] if i > 0 else 0)) * (100 + p * i) / 100\n\n    return f\"{total_time / (100 + p * n) * k:.3f}\"",
        "test": "assert solution(\"3 50 20\\n5 10 15 18\\n\") == \"20.000\"",
        "num_ids": 623,
        "indeed": false
    },
    {
        "number": 4967,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def manhattan_distance(x1, y1, x2, y2):\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    def find_nearest_safe_house(spy_x, spy_y, safe_houses):\n        min_distance = float('inf')\n        for safe_house in safe_houses:\n            distance = manhattan_distance(spy_x, spy_y, safe_house[0], safe_house[1])\n            min_distance = min(min_distance, distance)\n        return min_distance\n\n    def find_spies_and_safe_houses(stdin):\n        grid = []\n        spies = []\n        safe_houses = []\n        for i, line in enumerate(stdin.split('\\n')):\n            for j, char in enumerate(line):\n                if char == 'S':\n                    spies.append((i, j))\n                elif char == 'H':\n                    safe_houses.append((i, j))\n        return spies, safe_houses\n\n    spies, safe_houses = find_spies_and_safe_houses(stdin)\n    max_distance = 0\n    for spy in spies:\n        distance = find_nearest_safe_house(spy[0], spy[1], safe_houses)\n        max_distance = max(max_distance, distance)\n\n    return str(max_distance)",
        "test": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\\n....S\\n.....\\nH....\\n.....\") == 4",
        "num_ids": 928,
        "indeed": true
    },
    {
        "number": 4968,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, S, R = map(int, stdin.split('\\n')[0].split())\n    damaged_teams = set(map(int, stdin.split('\\n')[1].split()))\n    reserve_teams = set(map(int, stdin.split('\\n')[2].split()))\n\n    for team in damaged_teams:\n        if team - 1 in reserve_teams and team + 1 in reserve_teams:\n            reserve_teams.remove(team - 1)\n            reserve_teams.remove(team + 1)\n            reserve_teams.add(team)\n\n    return str(len(damaged_teams - reserve_teams))",
        "test": "assert solution(\"7 3 5\\n1 5 7\\n2 3 4 6 8\") == 0",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 4969,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    total_area = 2 * 3.14 * r ** 2\n    crust_area = 2 * 3.14 * (r - c) ** 2\n    cheese_area = total_area - crust_area\n    percentage = cheese_area / total_area * 100\n    return f\"{percentage:.10f}\"\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "assert solution('5 2') == '80.000000000'",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 4970,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    counts = {}\n\n    for i in range(1, n + 1):\n        line = lines[i]\n        courses = line.split()\n        courses.sort()\n        key = \" \".join(courses)\n        if key in counts:\n            counts[key] += 1\n        else:\n            counts[key] = 1\n\n    max_count = 0\n    for count in counts.values():\n        if count > max_count:\n            max_count = count\n\n    total = 0\n    for count in counts.values():\n        if count == max_count:\n            total += count\n\n    return str(total)",
        "test": "assert solution(\"1\\n100 200 300 400 500\\n\") == \"1\"",
        "num_ids": 926,
        "indeed": true
    },
    {
        "number": 4971,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_bus_number(num):\n        cube_sums = set()\n        for i in range(1, num):\n            for j in range(1, num):\n                if i != j and (i ** 3 + j ** 3 == num or (i ** 3 + j ** 3) in cube_sums):\n                    cube_sums.add(i ** 3 + j ** 3)\n                    if len(cube_sums) == 2:\n                        return True\n        return False\n\n    m = int(stdin.strip())\n    for i in range(1, m + 1)[::-1]:\n        if is_bus_number(i):\n            return str(i)\n    return \"none\"",
        "test": "assert solution(\"1000\") == \"606\"",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 4972,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def get_k(x: int) -> int:\n        k = 1\n        while (x % 2 == 0) and (x > 1):\n            k += 1\n            x //= 2\n        return k\n\n    x = int(stdin)\n    k = get_k(x)\n    return str(k)",
        "test": "assert solution(\"9\") == \"1\"         # Sample input 2",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 4973,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    board = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n\n    def is_valid(r, c):\n        return 1 <= r <= N and 1 <= c <= N\n\n    def bfs(board, knight_pos):\n        visited = set()\n        queue = [(knight_pos, 0)]\n\n        while queue:\n            (r, c), steps = queue.pop(0)\n            visited.add((r, c))\n\n            if r == 1 and c == 1:\n                return steps\n\n            for dr, dc in [(-2, 1), (-2, -1), (2, 1), (2, -1), (-1, 2), (-1, -2), (1, 2), (1, -2)]:\n                new_pos = (r + dr, c + dc)\n                if is_valid(*new_pos) and board[new_pos[0] - 1][new_pos[1] - 1] != '#' and new_pos not in visited:\n                    queue.append((new_pos, steps + 1))\n\n        return -1\n\n    knight_pos = None\n    for r in range(N):\n        for c in range(N):\n            if board[r][c] == 'K':\n                knight_pos = (r + 1, c + 1)\n                break\n\n    if knight_pos is None:\n        return -1\n\n    return bfs(board, knight_pos)",
        "test": "assert solution(\"4\\n....\\n....\\n....\\n...K\\n\") == 2",
        "num_ids": 1291,
        "indeed": false
    },
    {
        "number": 4974,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.split())\n    booked_rooms = set(map(int, stdin.split()[1:]))\n    \n    for i in range(1, r+1):\n        if i not in booked_rooms:\n            return str(i)\n    return \"too late\"",
        "test": "assert solution(\"100 0\\n\") == \"1\"",
        "num_ids": 1198,
        "indeed": false
    },
    {
        "number": 4975,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    key_phrase, plaintext = stdin.split('\\n')\n    key_phrase = key_phrase.replace('q', '').replace('Q', '')\n    key = ''.join(sorted(set(key_phrase + 'abcdefghijklmnoprstuvwxyz')))\n    key_table = [key[i:i+5] for i in range(0, 25, 5)]\n\n    def encrypt_pair(pair):\n        if pair[0] == pair[1]:\n            return pair[0] + 'X' + encrypt_pair(pair[1] + 'X')[1:]\n        row1, col1 = divmod(key_table[0].index(pair[0]), 5)\n        row2, col2 = divmod(key_table[0].index(pair[1]), 5)\n        if row1 == row2:\n            return key_table[row1][(col1 + 1) % 5] + key_table[row2][(col2 + 1) % 5]\n        elif col1 == col2:\n            return key_table[(row1 + 1) % 5][col1] + key_table[(row2 + 1) % 5][col2]\n        else:\n            return key_table[row1][col2] + key_table[row2][col1]\n\n    encrypted = []\n    for i in range(0, len(plaintext), 2):\n        pair = plaintext[i:i+2].lower()\n        encrypted.append(encrypt_pair(pair))\n    return ''.join(encrypted).upper()",
        "test": "assert solution(\"example phrase\\nthis is a test\") == \"DVTUWKTJYUYHK\"",
        "num_ids": 1762,
        "indeed": false
    },
    {
        "number": 4976,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    coordinates = stdin.split('\\n')\n    dog_coordinates = [float(x) for x in coordinates[0].split()[2:]]\n    gopher_coordinates = [float(x) for x in coordinates[0].split()[:2]]\n    escape_holes = []\n\n    for hole in coordinates[1:]:\n        hole_coordinates = [float(x) for x in hole.split()]\n        dog_distance = ((hole_coordinates[0] - dog_coordinates[0]) ** 2 + (hole_coordinates[1] - dog_coordinates[1]) ** 2) ** 0.5\n        gopher_distance = ((hole_coordinates[0] - gopher_coordinates[0]) ** 2 + (hole_coordinates[1] - gopher_coordinates[1]) ** 2) ** 0.5\n\n        if gopher_distance > dog_distance:\n            escape_holes.append(hole_coordinates)\n\n    if len(escape_holes) > 0:\n        return \"The gopher can escape through the hole at ({:.3f},{:.3f}).\".format(escape_holes[0][0], escape_holes[0][1])\n    else:\n        return \"The gopher cannot escape.\"",
        "test": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"",
        "num_ids": 1069,
        "indeed": false
    },
    {
        "number": 4977,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, t = list(map(int, stdin.split()))\n    distance = abs(a - c) + abs(b - d)\n    if t >= distance:\n        return \"Y\"\n    else:\n        return \"N\"",
        "test": "assert solution(\"3 4\\n3 3\\n3\\n\") == \"Y\"",
        "num_ids": 415,
        "indeed": false
    },
    {
        "number": 4978,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(N)]\n\n    def spread_water(row: int, col: int) -> None:\n        if grid[row][col] == \"V\":\n            if row > 0 and grid[row - 1][col] == \".\":\n                grid[row - 1][col] = \"V\"\n                spread_water(row - 1, col)\n            if row > 0 and col > 0 and grid[row - 1][col - 1] == \".\" and grid[row][col - 1] != \"#\":\n                grid[row - 1][col - 1] = \"V\"\n                spread_water(row - 1, col - 1)\n            if row > 0 and col + 1 < M and grid[row - 1][col + 1] == \".\" and grid[row][col + 1] != \"#\":\n                grid[row - 1][col + 1] = \"V\"\n                spread_water(row - 1, col + 1)\n\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == \"V\":\n                spread_water(i, j)\n\n    return \"\\n\".join([\"\".join(row) for row in grid])\n\nstdin = \"\"\"5 7\n...V...\n.......\n.......\n...#...\n..###..\"\"\"\n\nprint(solution(stdin)) ",
        "test": "assert solution(\"3 4\\n.V..\\n#...\\n.V..\") == \".V..\\n.V..\\n.V..\"",
        "num_ids": 1345,
        "indeed": false
    },
    {
        "number": 4979,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    binary = bin(n)[2:]\n    reversed_binary = binary[::-1]\n    result = int(reversed_binary, 2)\n    return str(result) ",
        "test": "assert solution(42) == 51",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 4980,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    pink_buttons = []\n    rose_buttons = []\n    for i in range(1, N + 1):\n        label = lines[i]\n        if 'pink' in label.lower():\n            pink_buttons.append(label)\n        elif 'rose' in label.lower():\n            rose_buttons.append(label)\n    if len(pink_buttons) == 0 and len(rose_buttons) == 0:\n        return \"I must watch Star Wars with my daughter\"\n    else:\n        return str(min(len(pink_buttons), len(rose_buttons)))",
        "test": "assert solution(\"3\\nblue\\ngreen\\nred\") == \"I must watch Star Wars with my daughter\"",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 4981,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    order = input().strip()\n    if order == \"ABC\":\n        return f\"{A} {B} {C}\"\n    elif order == \"ACB\":\n        return f\"{A} {C} {B}\"\n    elif order == \"BAC\":\n        return f\"{B} {A} {C}\"\n    elif order == \"BCA\":\n        return f\"{B} {C} {A}\"\n    elif order == \"CBA\":\n        return f\"{C} {B} {A}\"\n    else:\n        return f\"{C} {A} {B}\"",
        "test": "assert solution('5 1 3\\nCAB') == '3 1 5'",
        "num_ids": 517,
        "indeed": false
    },
    {
        "number": 4982,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    total_shares = 0\n    total_cost = 0\n    tax = 0.3\n\n    for line in lines:\n        tokens = line.split()\n        action = tokens[0]\n\n        if action == 'buy':\n            shares = int(tokens[1])\n            cost_per_share = int(tokens[2])\n            total_shares += shares\n            total_cost += shares * cost_per_share\n        elif action == 'sell':\n            shares = int(tokens[1])\n            profit = (int(tokens[2]) - total_cost / total_shares) * shares\n            total_shares -= shares\n            total_cost -= shares * total_cost / total_shares\n            if profit > 0:\n                taxed_profit = profit * (1 - tax)\n                total_cost += taxed_profit\n                tax += taxed_profit\n        elif action == 'split':\n            x = int(tokens[1])\n            total_shares *= x\n            total_cost /= x\n        elif action == 'merge':\n            x = int(tokens[1])\n            remainder = total_shares % x\n            total_shares -= remainder\n            total_cost *= x / (x + remainder)\n\n    taxed_profit = (int(lines[-1].split()[1]) - total_cost / total_shares) * total_shares\n    taxed_profit *= 1 - tax\n    total_cost += taxed_profit\n\n    return '{:.8f}'.format(total_cost)",
        "test": "assert solution(\"buy 10 10\\nbuy 30 5\\nsell 31 8\\nsplit 2\\nmerge 8\\ndie 42\") == \"73.80000000\" ",
        "num_ids": 1417,
        "indeed": false
    },
    {
        "number": 4983,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    while x > 9:\n        product = 1\n        for digit in str(x):\n            if digit != '0':\n                product *= int(digit)\n        x = product\n    return str(x)",
        "test": "assert solution(\"808\") == \"8\"",
        "num_ids": 255,
        "indeed": true
    },
    {
        "number": 4984,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.readline().split())\n    grid = []\n    for i in range(rows):\n        grid.append(list(stdin.readline().strip()))\n\n    def dfs(i, j):\n        if i < 0 or i >= rows or j < 0 or j >= cols or grid[i][j] != 'L':\n            return 0\n        grid[i][j] = 'X'\n        dfs(i - 1, j)\n        dfs(i + 1, j)\n        dfs(i, j - 1)\n        dfs(i, j + 1)\n        return 1\n\n    islands = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 'L':\n                islands += dfs(i, j)\n\n    return str(islands)",
        "test": "assert solution(\"\"\"4 5",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 4985,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0].split()[0])\n    dominant_suit = lines[0].split()[1]\n    values = {'A': 11, 'K': 4, 'Q': 3, 'J': 20, 'T': 10, '9': 14, '8': 0, '7': 0}\n    total_points = 0\n\n    for i in range(1, len(lines), 2):\n        card1 = lines[i]\n        card2 = lines[i + 1]\n        for card in [card1, card2]:\n            if card[1] == dominant_suit:\n                total_points += values[card[0]]\n            else:\n                total_points += 0 if values[card[0]] == 0 else 1\n\n    return str(total_points)",
        "test": "assert solution(\"5 D\\nJS\\nAS\\nKC\\n9H\\nKH\\nQD\\nQS\\nTH\") == 81",
        "num_ids": 1163,
        "indeed": false
    },
    {
        "number": 4986,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    result = ''\n\n    for i in range(len(s)):\n        if s[i] == t[i * 2]:\n            result += s[i]\n        elif s[i] == t[i * 2 + 1]:\n            result += s[i]\n\n    return result",
        "test": "assert solution(\"hello there\\nheelllo thheere\") == \"l\"",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 4987,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    input_list = list(map(int, stdin.split()))\n    S, C, K = input_list[0], input_list[1], input_list[2]\n    D = input_list[3:]\n    \n    # Sort D\n    D.sort()\n    \n    # Initialize variables\n    num_machines = 0\n    current_machine_capacity = C\n    current_min_color = 0\n    current_max_color = D[0]\n    \n    # Iterate through socks\n    for i in range(1, S):\n        if D[i] - current_min_color <= K and current_machine_capacity > 0:\n            current_machine_capacity -= 1\n            current_max_color = D[i]\n        else:\n            num_machines += 1\n            current_machine_capacity = C\n            current_min_color = D[i]\n            current_max_color = D[i]\n    \n    # Increment number of machines for the last machine\n    num_machines += 1\n    \n    return str(num_machines) ",
        "test": "assert solution(\"5 3 0\\n0 0 1 1 2\") == \"3\"",
        "num_ids": 894,
        "indeed": true
    },
    {
        "number": 4988,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def factorial_last_digit(n: int) -> int:\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return factorial_last_digit(n - 1) * n % 10\n\n    num_tests = int(stdin.split('\\n')[0])\n    inputs = stdin.split('\\n')[1:]\n\n    output = []\n    for num in inputs:\n        output.append(factorial_last_digit(int(num)))\n\n    return '\\n'.join(map(str, output))",
        "test": "assert solution(\"3\\n1\\n2\\n3\") == \"1\\n2\\n6\"",
        "num_ids": 547,
        "indeed": true
    },
    {
        "number": 4989,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, pieces = map(int, stdin.split())\n    pieces = list(map(int, pieces.split()))\n    pieces.sort(reverse=True)\n\n    alice_sum = 0\n    bob_sum = 0\n\n    for i in range(n):\n        if i % 2 == 0:\n            alice_sum += pieces[i]\n        else:\n            bob_sum += pieces[i]\n\n    return f\"{alice_sum} {bob_sum}\"",
        "test": "assert solution(\"4\\n5 5 5 5\") == \"20 20\"",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 4990,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    b, k, g = map(int, stdin.split())\n    return str(b // g + b % g)",
        "test": "assert solution(\"1000 100 1\") == \"1000\"",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 4991,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    memo = {}\n\n    def h(x: int) -> int:\n        if x == 1:\n            return 1\n        if x in memo:\n            return memo[x]\n        if x % 2 == 0:\n            result = h(x // 2)\n        else:\n            result = h(3 * x + 1)\n        memo[x] = result + x\n        return memo[x]\n\n    return str(h(n))",
        "test": "assert solution(\"7\") == 288",
        "num_ids": 405,
        "indeed": true
    },
    {
        "number": 4992,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def is_safe(rooms: list, order: list) -> bool:\n        pile = []\n        for i in order:\n            if len(pile) < rooms[i - 1]:\n                return False\n            pile = pile[rooms[i - 1]:] + pile[:rooms[i - 1]]\n        return True\n\n    def helper(rooms: list, visited: set, pile: list, order: list) -> str:\n        if len(visited) == len(rooms):\n            return \" \".join(map(str, order))\n\n        for i in range(1, len(rooms) + 1):\n            if i not in visited and len(pile) >= rooms[i - 1]:\n                visited.add(i)\n                pile = pile[rooms[i - 1]:]\n                if is_safe(rooms, order + [i]):\n                    result = helper(rooms, visited, pile, order + [i])\n                    if result:\n                        return result\n                pile = pile + [i] * rooms[i - 1]\n                visited.remove(i)\n\n        return \"impossible\"\n\n    n = int(stdin.split(\"\\n\")[0])\n    rooms = list(map(int, stdin.split(\"\\n\")[1].split()))\n    order = [1]\n\n    return helper(rooms, {1}, [1] * sum(rooms), order)",
        "test": "assert solution(\"3\\n2 3 2\\n\") == \"impossible\"",
        "num_ids": 888,
        "indeed": false
    },
    {
        "number": 4993,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    parts, days = map(int, stdin.readline().split())\n    parts_list = []\n    last_part = ''\n    for _ in range(days):\n        part = stdin.readline().strip()\n        if part not in parts_list:\n            parts_list.append(part)\n            last_part = part\n        if len(parts_list) == parts:\n            return str(days)\n    return 'paradox avoided'",
        "test": "assert solution(\"5 7\\npropeller\\nmotor\\nseat\\nbattery\\nmotor\\nseat\\nbattery\") == \"6\"",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 4994,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    points = [tuple(map(int, line.split())) for line in stdin.split('\\n')]\n    x_coordinates = set(x for x, y in points)\n    y_coordinates = set(y for x, y in points)\n    \n    for x in x_coordinates:\n        for y in y_coordinates:\n            if (x, y) not in points:\n                return f\"{x} {y}\"",
        "test": "assert solution(\"100 100\\n100 200\\n200 100\") == \"200 200\"",
        "num_ids": 575,
        "indeed": true
    },
    {
        "number": 4995,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    total_wait_time = 0\n    total_displayed_minutes = 0\n\n    for i in range(N):\n        M, S = map(int, stdin.readline().split())\n        total_wait_time += S\n        total_displayed_minutes += M\n\n    avg_sl_minute = total_displayed_minutes / total_wait_time * 60\n\n    if avg_sl_minute <= 1:\n        return \"measurement error\"\n    else:\n        return str(round(avg_sl_minute, 8))",
        "test": "assert solution(\"2\\n1 61\\n2 121\") == 1.008333333",
        "num_ids": 649,
        "indeed": false
    },
    {
        "number": 4996,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    encrypted_message, key = stdin.split('\\n')\n    decrypted_message = ''\n\n    for i in range(len(encrypted_message)):\n        char = encrypted_message[i]\n        key_char = key[i % len(key)]\n        key_char_index = ord(key_char) - ord('A')\n\n        if i % 2 == 0:\n            decrypted_char_index = (ord(char) - ord('A') - key_char_index) % 26\n        else:\n            decrypted_char_index = (ord(char) - ord('A') + key_char_index) % 26\n\n        decrypted_char = chr(decrypted_char_index + ord('A'))\n        decrypted_message += decrypted_char\n\n    return decrypted_message\n",
        "test": "assert solution(\"CPMCRYY\\nALBERTA\") == \"CALGARY\"",
        "num_ids": 658,
        "indeed": true
    },
    {
        "number": 4997,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    positions = ['A', 'B', 'C']\n    for move in stdin:\n        if move == 'A':\n            positions[0], positions[1] = positions[1], positions[0]\n        elif move == 'B':\n            positions[1], positions[2] = positions[2], positions[1]\n        else:\n            positions[0], positions[2] = positions[2], positions[0]\n    for i, position in enumerate(positions):\n        if position == 'A':\n            return str(i + 1)",
        "test": "assert solution(\"ABCABC\") == \"1\"",
        "num_ids": 416,
        "indeed": true
    },
    {
        "number": 4998,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    # Find all possible rectangles\n    rectangles = [(A, B), (A, C), (A, D), (B, C), (B, D), (C, D)]\n\n    # Calculate area for each rectangle\n    areas = [a * b for a, b in rectangles]\n\n    # Return the maximum area\n    return str(max(areas))",
        "test": "assert solution(\"10 10 10 10\") == \"50\"",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 4999,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    count = 0\n    while a != b:\n        if a > b and a % 2 == 0:\n            a //= 2\n            count += 1\n        else:\n            a += 1\n            count += 1\n    return str(count)",
        "test": "assert solution(\"1 1\") == \"0\"",
        "num_ids": 339,
        "indeed": true
    }
]