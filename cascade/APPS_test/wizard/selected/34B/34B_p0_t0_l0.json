[
    {
        "number": 4000,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find(parent, i):\n        if parent[i] == i:\n            return i\n        return find(parent, parent[i])\n\n    def union(parent, rank, x, y):\n        xroot = find(parent, x)\n        yroot = find(parent, y)\n\n        if xroot == yroot:\n            return False\n\n        if rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n        return True\n\n    def kruskal(n, edges):\n        parent = [i for i in range(n)]\n        rank = [0] * n\n        mst_edges = []\n\n        for edge in sorted(edges, key=lambda x: x[2]):\n            if union(parent, rank, edge[0] - 1, edge[1] - 1):\n                mst_edges.append(edge)\n\n        return mst_edges\n\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    edges = [tuple(map(int, line.split())) + (i,) for i, line in enumerate(lines[1:])]\n\n    mst_edges = kruskal(n, edges)\n    max_edges = sum(1 for i in range(len(mst_edges)) for j in range(i + 1, len(mst_edges)) if mst_edges[i][0] in (mst_edges[j][0], mst_edges[j][1]) or mst_edges[i][1] in (mst_edges[j][0], mst_edges[j][1]))\n\n    for i in range(len(mst_edges)):\n        for j in range(i + 1, len(mst_edges)):\n            if mst_edges[i][0] in (mst_edges[j][0], mst_edges[j][1]) or mst_edges[i][1] in (mst_edges[j][0], mst_edges[j][1]):\n                max_edges += 1\n                break\n\n    for i in range(len(mst_edges)):\n        for j in range(i + 1, len(mst_edges)):\n            if mst_edges[i][0] in (mst_edges[j][0], mst_edges[j][1]) or mst_edges[i][1] in (mst_edges[j][0], mst_edges[j][1]):\n                max_edges += 1\n                break\n\n    for i in range(len(mst_edges)):\n        for j in range(i + 1, len(mst_edges)):\n            if mst_edges[i][0] in (mst_edges[j][0], mst_edges[j][1]) or mst_edges[i][1] in (mst_edges[j][0], mst_edges[j][1]):\n                max_edges += 1\n                break\n\n    return f\"{max_edges}\\n{mst_edges[0][0]} {mst_edges[-1][1]} {mst_edges[len(mst_edges) // 2][1]}\"",
        "test": "",
        "num_ids": 859
    },
    {
        "number": 4001,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    divisors = list(map(int, stdin.readline().strip().split()))\n\n    x_divisors = []\n    y_divisors = []\n\n    for i in range(n):\n        if i % 2 == 0:\n            x_divisors.append(divisors[i])\n        else:\n            y_divisors.append(divisors[i])\n\n    x = 1\n    y = 1\n\n    for divisor in x_divisors:\n        x *= divisor\n\n    for divisor in y_divisors:\n        y *= divisor\n\n    return f\"{x} {y}\"",
        "test": "",
        "num_ids": 177
    },
    {
        "number": 4002,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    a = [list(map(int, stdin.split()[3 + i * m:3 + i * m + m])) for i in range(n)]\n\n    max_sum = 0\n    for i in range(n):\n        row_sum = sum(sorted(a[i])[:max(1, m // 2)])\n        if row_sum % k == 0:\n            max_sum += row_sum\n        else:\n            for j in range(1, max(1, m // 2) + 1):\n                for comb in itertools.combinations(a[i], j):\n                    if sum(comb) % k == 0 and sum(comb) > max_sum:\n                        max_sum = sum(comb)\n\n    return str(max_sum)",
        "test": "",
        "num_ids": 213
    },
    {
        "number": 4003,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    def binary_search(arr, target):\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n\n    def find_longest_increasing_subsequence(arr):\n        tails = [0] * len(arr)\n        size = 0\n        for x in arr:\n            i, j = 0, size\n            while i != j:\n                m = (i + j) // 2\n                if tails[m] < x:\n                    i = m + 1\n                else:\n                    j = m\n            tails[i] = x\n            size = max(i + 1, size)\n        return size\n\n    left_sequence = sorted(a)\n    right_sequence = sorted(a, reverse=True)\n\n    left_length = find_longest_increasing_subsequence(left_sequence)\n    right_length = find_longest_increasing_subsequence(right_sequence)\n\n    if left_length > right_length:\n        longest_length = left_length\n        result = ['L'] * (longest_length - 1)\n        result.append('R')\n    else:\n        longest_length = right_length\n        result = ['R'] * (longest_length - 1)\n        result.append('L')\n\n    return f\"{longest_length}\\n{''.join(result)}\"",
        "test": "",
        "num_ids": 435
    },
    {
        "number": 4004,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    min_d = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            d = abs(a[i] - a[j])\n            if d < min_d:\n                min_d = d\n\n    if min_d == 0:\n        return str(-1)\n\n    return str(min_d)",
        "test": "",
        "num_ids": 130
    },
    {
        "number": 4005,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split()[0].split())\n    x3, y3, x4, y4 = map(int, stdin.split()[1].split())\n    x5, y5, x6, y6 = map(int, stdin.split()[2].split())\n\n    if (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4) or (x1 < x5 and x2 > x6 and y1 < y5 and y2 > y6):\n        return \"YES\"\n\n    for x in range(x1, x2 + 1):\n        for y in range(y1, y2 + 1):\n            if not (x3 < x < x4 and y3 < y < y4) and not (x5 < x < x6 and y5 < y < y6):\n                return \"YES\"\n\n    return \"NO\"",
        "test": "",
        "num_ids": 232
    },
    {
        "number": 4006,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n + 1):\n        x = i\n        while True:\n            x += 1\n            if '0' not in str(x):\n                break\n            x = int(str(x).replace('0', ''))\n        if x <= n:\n            count += 1\n    return str(count)",
        "test": "",
        "num_ids": 99
    },
    {
        "number": 4007,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    f = list(map(int, stdin.split('\\n')[1].split()))\n\n    for i in range(n):\n        if f[i] == 0:\n            for j in range(1, n + 1):\n                if j not in f and j != i:\n                    f[i] = j\n                    break\n\n    return ' '.join(map(str, [i * f[i] for i in range(1, n + 1)]))",
        "test": "",
        "num_ids": 129
    },
    {
        "number": 4008,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    if k < len(set(a)):\n        return \"NO\"\n\n    coloring = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] == a[j] and coloring[i] == coloring[j]:\n                for c in range(1, k + 1):\n                    if c != coloring[j]:\n                        coloring[i] = c\n                        break\n\n    if len(set(coloring)) == k:\n        return \"YES\" + \" \" + \" \".join(map(str, coloring))\n    else:\n        return \"NO\"",
        "test": "",
        "num_ids": 186
    },
    {
        "number": 4009,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    number = list(map(int, input()))\n\n    def get_remainder(num: List[int]) -> int:\n        return int(\"\".join(map(str, num))) % (10 ** x)\n\n    def perform_operation(num: List[int], index: int) -> List[int]:\n        num[index] = (num[index] + 1) % 2\n        return num\n\n    min_operations = float(\"inf\")\n    for i in range(n):\n        if number[i] == 0:\n            new_number = perform_operation(number.copy(), i)\n            if get_remainder(new_number) == 10 ** y:\n                min_operations = min(min_operations, 1)\n            else:\n                for j in range(i + 1, n):\n                    if number[j] == 0:\n                        new_number = perform_operation(new_number.copy(), j)\n                        if get_remainder(new_number) == 10 ** y:\n                            min_operations = min(min_operations, 2)\n                        else:\n                            for k in range(j + 1, n):\n                                if number[k] == 0:\n                                    new_number = perform_operation(new_number.copy(), k)\n                                    if get_remainder(new_number) == 10 ** y:\n                                        min_operations = min(min_operations, 3)\n                                    else:\n                                        break\n                                else:\n                                    break\n                        else:\n                            break\n                    else:\n                        break\n            break\n\n    return str(min_operations)",
        "test": "",
        "num_ids": 435
    },
    {
        "number": 4010,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(arr: list) -> bool:\n        for i in range(len(arr) // 2):\n            if arr[i] != arr[-i - 1]:\n                return False\n        return True\n\n    def has_palindrome_subsequence(arr: list, n: int) -> bool:\n        for i in range(n - 2):\n            for j in range(i + 2, n):\n                if is_palindrome(arr[i:j + 1]):\n                    return True\n        return False\n\n    t = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        arr = list(map(int, stdin.readline().strip().split()))\n        if has_palindrome_subsequence(arr, n):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)",
        "test": "",
        "num_ids": 244
    },
    {
        "number": 4011,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = list(map(int, stdin.readline().strip().split()))\n\n    max_number = float('-inf')\n\n    for i in range(n):\n        for j in range(i, n):\n            segment = a[i:j + 1]\n            current_number = int(segment)\n            for digit in segment:\n                current_number = current_number.replace(digit, str(f[int(digit) - 1]))\n            max_number = max(max_number, int(current_number))\n\n    return str(max_number)",
        "test": "",
        "num_ids": 164
    },
    {
        "number": 4012,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_operations(a, b, c):\n        A, B, C = a, b, c\n        operations = 0\n\n        while B % A != 0:\n            if A < B:\n                A += 1\n            else:\n                B -= 1\n            operations += 1\n\n        while C % B != 0:\n            if B < C:\n                B += 1\n            else:\n                C -= 1\n            operations += 1\n\n        return operations, A, B, C\n\n    def process_test_case(a, b, c):\n        operations, A, B, C = find_operations(a, b, c)\n        return f\"{operations}\\n{A} {B} {C}\\n\"\n\n    t = int(stdin.readline())\n    output = []\n\n    for _ in range(t):\n        a, b, c = map(int, stdin.readline().split())\n        output.append(process_test_case(a, b, c))\n\n    return \"\\n\".join(output)\n",
        "test": "",
        "num_ids": 261
    },
    {
        "number": 4013,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    instability = max(a) - min(a)\n    for i in range(n):\n        instability_new = max(a[:i] + a[i+1:]) - min(a[:i] + a[i+1:])\n        instability = min(instability, instability_new)\n\n    return str(instability)",
        "test": "",
        "num_ids": 121
    },
    {
        "number": 4014,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def can_prepare(exam, day):\n        return exam[0] <= day < exam[1]\n\n    def can_pass(exam, day):\n        return exam[1] == day\n\n    def can_rest(exam, day):\n        return not can_prepare(exam, day) and not can_pass(exam, day)\n\n    def find_exam(day):\n        for i, exam in enumerate(exams):\n            if can_pass(exam, day):\n                return i + 1\n        return 0\n\n    def prepare_exam(day, exam_index):\n        nonlocal schedule\n        for i in range(exams[exam_index - 1][2]):\n            schedule[day + i] = exam_index\n\n    n, m = map(int, stdin.readline().split())\n    exams = [list(map(int, stdin.readline().split())) for _ in range(m)]\n\n    schedule = [0] * n\n\n    for day in range(n):\n        if can_rest(exams[0], day):\n            schedule[day] = 0\n        else:\n            exam_index = find_exam(day)\n            if exam_index:\n                schedule[day] = exam_index\n            else:\n                for i, exam in enumerate(exams):\n                    if can_prepare(exam, day):\n                        prepare_exam(day, i)\n                        break\n\n    if all(exam_index in schedule for exam_index in range(1, m + 1)):\n        return \" \".join(map(str, schedule))\n    else:\n        return \"-1\"",
        "test": "",
        "num_ids": 403
    },
    {
        "number": 4015,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"0\"\n    moves = 0\n    while n != m:\n        if n > m:\n            return \"-1\"\n        if n * 2 <= m:\n            n *= 2\n            moves += 1\n        elif n * 3 <= m:\n            n *= 3\n            moves += 1\n        else:\n            return \"-1\"\n    return str(moves)",
        "test": "",
        "num_ids": 119
    },
    {
        "number": 4016,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    t = stdin.readline().strip()\n\n    s = t * (k // n) + t[:k % n]\n\n    return s",
        "test": "",
        "num_ids": 55
    },
    {
        "number": 4017,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    nice_indices = []\n    for j in range(n):\n        if sum(a) - a[j] == a[j]:\n            nice_indices.append(j + 1)\n\n    if not nice_indices:\n        return \"0\\n\"\n\n    return f\"{len(nice_indices)}\\n{' '.join(map(str, nice_indices))}\\n\"",
        "test": "",
        "num_ids": 135
    },
    {
        "number": 4018,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = input()\n\n    def is_subsequence(t: str, s: str) -> bool:\n        t = list(t)\n        for c in s:\n            if t and t[0] == c:\n                t.pop(0)\n        return not t\n\n    def subsequence_cost(t: str, s: str) -> int:\n        return n - len(t)\n\n    def find_min_cost(k: int, s: str) -> int:\n        min_cost = float('inf')\n        for i in range(1, n + 1):\n            for j in range(n - i + 1):\n                t = s[j:j + i]\n                if is_subsequence(t, s):\n                    cost = subsequence_cost(t, s)\n                    if cost < min_cost:\n                        min_cost = cost\n        return min_cost\n\n    if k == 1:\n        return 0\n    elif k > 2 ** n:\n        return -1\n    else:\n        return find_min_cost(k, s)",
        "test": "",
        "num_ids": 278
    },
    {
        "number": 4019,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_parent(parent, u):\n        if parent[u] == u:\n            return u\n        return find_parent(parent, parent[u])\n\n    def union(parent, rank, x, y):\n        xroot = find_parent(parent, x)\n        yroot = find_parent(parent, y)\n\n        if xroot == yroot:\n            return False\n\n        if rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n        return True\n\n    def kruskal(n, edges):\n        parent = [i for i in range(n + 1)]\n        rank = [0] * (n + 1)\n        mst = []\n\n        for edge in sorted(edges, key=lambda x: x[2]):\n            u, v, w = edge\n            if union(parent, rank, u, v):\n                mst.append((u, v, w))\n                if len(mst) == n - 1:\n                    break\n        return mst\n\n    def check_degree(tree, degree):\n        degrees = [0] * (n + 1)\n        for u, v, w in tree:\n            degrees[u] += 1\n            degrees[v] += 1\n        return degrees[1] == degree\n\n    lines = stdin.split('\\n')\n    n, m, D = map(int, lines[0].split())\n    edges = []\n\n    for i in range(1, m + 1):\n        u, v = map(int, lines[i].split())\n        edges.append((u, v, i))\n\n    tree = kruskal(n, edges)\n\n    if check_degree(tree, D):\n        output = ['YES']\n        for u, v, w in tree:\n            output.append(f'{u} {v}')\n    else:\n        output = ['NO']\n\n    return '\\n'.join(output)",
        "test": "",
        "num_ids": 521
    },
    {
        "number": 4020,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.split(':'))\n    total_minutes = (h2 - h1) * 60 + (m2 - m1)\n    midpoint_minutes = total_minutes // 2\n    h3 = (h1 + midpoint_minutes // 60) % 24\n    m3 = midpoint_minutes % 60\n    return f\"{h3:02d}:{m3:02d}\"",
        "test": "",
        "num_ids": 125
    },
    {
        "number": 4021,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    count = 0\n    while a > 1:\n        a >>= 1\n        count += 1\n    return str(count)",
        "test": "",
        "num_ids": 44
    },
    {
        "number": 4022,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def intersection(a, b, c, d):\n        if a <= c <= b or a <= d <= b:\n            return min(b, d) - max(a, c)\n        elif c <= a <= d or c <= b <= d:\n            return min(b, d) - max(a, c)\n        else:\n            return 0\n\n    n = int(stdin.readline())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n\n    max_length = 0\n    for i in range(n):\n        current_length = 0\n        for j in range(n):\n            if i != j:\n                current_length = max(current_length, intersection(*segments[i], *segments[j]))\n        max_length = max(max_length, current_length)\n\n    return str(max_length)",
        "test": "",
        "num_ids": 233
    },
    {
        "number": 4023,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, a))\n\n    if len(set(a)) == 1:\n        return \"YES\"\n\n    for i in range(n):\n        if i == 0:\n            if a[i] == a[i + 1]:\n                return \"YES\"\n        elif i == n - 1:\n            if a[i] == a[i - 1]:\n                return \"YES\"\n        else:\n            if a[i] == a[i - 1] or a[i] == a[i + 1]:\n                return \"YES\"\n\n    return \"NO\"",
        "test": "",
        "num_ids": 163
    },
    {
        "number": 4024,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = input()\n\n    def is_subsequence(t: str, s: str) -> bool:\n        t = list(t)\n        for c in s:\n            if t and t[0] == c:\n                t.pop(0)\n        return not t\n\n    def subsequence_cost(t: str, s: str) -> int:\n        return n - len(t)\n\n    def find_min_cost(k: int, s: str) -> int:\n        min_cost = float('inf')\n        for i in range(1, n + 1):\n            for j in range(n - i + 1):\n                t = s[j:j + i]\n                if is_subsequence(t, s):\n                    cost = subsequence_cost(t, s)\n                    if cost < min_cost:\n                        min_cost = cost\n        return min_cost\n\n    if k == 1:\n        return 0\n    elif k > 2 ** n:\n        return -1\n    else:\n        return find_min_cost(k, s)",
        "test": "",
        "num_ids": 278
    },
    {
        "number": 4025,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = [a, b, c]\n    days_of_week = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    max_days = 0\n\n    for i in range(len(days_of_week)):\n        days_copy = days.copy()\n        current_day = i\n        days_eaten = 0\n\n        while sum(days_copy) > 0:\n            if current_day == 0:\n                days_copy[0] -= 1\n            elif current_day == 1 or current_day == 3:\n                days_copy[1] -= 1\n            else:\n                days_copy[2] -= 1\n\n            days_eaten += 1\n            current_day = (current_day + 1) % 7\n\n        max_days = max(max_days, days_eaten)\n\n    return str(max_days)",
        "test": "",
        "num_ids": 255
    },
    {
        "number": 4026,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_symmetric(matrix):\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] != matrix[j][i]:\n                    return False\n        return True\n\n    def can_construct_square(tiles, n, m):\n        if n == 1:\n            return True\n        if m == 1:\n            return n == 1\n        if m % 2 != 0:\n            return False\n        if n == 2:\n            return m == 2\n        if n == 3:\n            return m == 2 or m == 4\n        return False\n\n    def construct_square(tiles, n, m):\n        if not can_construct_square(tiles, n, m):\n            return \"NO\"\n\n        square = [[0] * m for _ in range(m)]\n        for i in range(m):\n            for j in range(m):\n                if i < m - 1 and j < m - 1:\n                    square[i][j] = tiles[0][0]\n                    square[i][j + 1] = tiles[0][1]\n                    square[i + 1][j] = tiles[1][0]\n                    square[i + 1][j + 1] = tiles[1][1]\n                elif i == m - 1 and j < m - 1:\n                    square[i][j] = tiles[0][0]\n                    square[i][j + 1] = tiles[0][1]\n                elif i < m - 1 and j == m - 1:\n                    square[i][j] = tiles[1][0]\n                    square[i + 1][j] = tiles[1][1]\n                else:\n                    square[i][j] = tiles[0][0]\n\n        return \"YES\" if is_symmetric(square) else \"NO\"\n\n    test_cases = int(stdin.readline())\n    for _ in range(test_cases):\n        n, m = map(int, stdin.readline().split())\n        tiles = []\n        for _ in range(n):\n            top_left, top_right = map(int, stdin.readline().split())\n            bottom_left, bottom_right = map(int, stdin.readline().split())\n            tiles.append([top_left, top_right, bottom_left, bottom_right])\n\n        print(construct_square(tiles, n, m))",
        "test": "",
        "num_ids": 619
    },
    {
        "number": 4027,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\"",
        "test": "",
        "num_ids": 39
    },
    {
        "number": 4028,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n\n    MOD = 1000000007\n    dp = [0] * (2 * n + 1)\n    dp[0] = 1\n\n    for i in range(2 * n):\n        for j in range(i, -1, -1):\n            if dp[j] > 0:\n                if i - j == len(s) and s[j:i] == s:\n                    dp[i + 1] += dp[j]\n                    dp[i + 1] %= MOD\n                elif i - j < len(s) and s[j:i] == s[:i - j]:\n                    dp[i + 1] += dp[j]\n                    dp[i + 1] %= MOD\n\n    return str(dp[-1])",
        "test": "",
        "num_ids": 227
    },
    {
        "number": 4029,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n\n    # Check if the number is already divisible by 25\n    if n % 25 == 0:\n        return str(moves)\n\n    # Check if it's possible to obtain a number divisible by 25\n    str_n = str(n)\n    if '2' not in str_n and '5' not in str_n:\n        return str(-1)\n\n    # Perform the moves\n    while n % 25 != 0:\n        # Find the first occurrence of 2 or 5\n        for i in range(len(str_n) - 1):\n            if str_n[i] in ['2', '5'] or str_n[i + 1] in ['2', '5']:\n                break\n\n        # Swap the digits\n        if str_n[i] in ['2', '5'] and str_n[i + 1] in ['2', '5']:\n            str_n = str_n[:i] + str_n[i + 1] + str_n[i] + str_n[i + 2:]\n            moves += 1\n        elif str_n[i] in ['2', '5']:\n            str_n = str_n[:i] + str_n[i + 1] + str_n[i] + str_n[i + 2:]\n            moves += 1\n        elif str_n[i + 1] in ['2', '5']:\n            str_n = str_n[:i] + str_n[i + 1] + str_n[i] + str_n[i + 2:]\n            moves += 1\n        else:\n            return str(-1)\n\n        n = int(str_n)\n\n    return str(moves)",
        "test": "",
        "num_ids": 441
    },
    {
        "number": 4030,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    def can_be_sorted(colors: List[int]) -> bool:\n        for i in range(n - 1):\n            if colors[i] != colors[i + 1] and s[i] > s[i + 1]:\n                return False\n        return True\n\n    def dfs(colors: List[int], depth: int) -> Tuple[int, List[int]]:\n        if depth == n:\n            return 0, colors\n        min_cost = float('inf')\n        min_colors = []\n        for color in range(1, depth + 2):\n            colors[depth] = color\n            if can_be_sorted(colors):\n                cost, _ = dfs(colors, depth + 1)\n                if cost + depth + 1 < min_cost:\n                    min_cost = cost + depth + 1\n                    min_colors = colors.copy()\n        return min_cost, min_colors\n\n    res, coloring = dfs([0] * n, 0)\n    return f\"{res}\\n{' '.join(map(str, coloring))}\"",
        "test": "",
        "num_ids": 290
    },
    {
        "number": 4031,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    strings = sorted(stdin.split('\\n')[1:], key=len)\n    result = []\n\n    for string in strings:\n        if not any(string in s for s in result):\n            result.append(string)\n        else:\n            for i in range(len(result)):\n                if string in result[i]:\n                    result.insert(i, string)\n                    break\n\n    if len(result) == n:\n        return \"YES\\n\" + \"\\n\".join(result)\n    else:\n        return \"NO\"",
        "test": "",
        "num_ids": 147
    },
    {
        "number": 4032,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    problems = list(map(int, stdin.split()))\n    solved_count = 0\n\n    left, right = 0, n - 1\n    while left <= right:\n        if problems[left] <= k:\n            problems.pop(left)\n            solved_count += 1\n            right -= 1\n        else:\n            left += 1\n\n        if right - left >= solved_count:\n            if problems[right] <= k:\n                problems.pop(right)\n                solved_count += 1\n                right -= 1\n            else:\n                break\n\n    return str(solved_count)",
        "test": "",
        "num_ids": 164
    },
    {
        "number": 4033,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n\n    def is_valid(x, y):\n        return x * y == a + b\n\n    def get_perimeter(x, y):\n        return 2 * (x + y)\n\n    for x in range(1, a + 1):\n        y = a + b - x\n        if is_valid(x, y):\n            return str(get_perimeter(x, y))\n\n    for y in range(1, b + 1):\n        x = a + b - y\n        if is_valid(x, y):\n            return str(get_perimeter(x, y))\n\n    for x in range(1, a + 1):\n        for y in range(1, b + 1):\n            if is_valid(x, y):\n                return str(get_perimeter(x, y))\n\n    for x in range(1, a + 1):\n        for y in range(1, b + 1):\n            if is_valid(x, y):\n                return str(get_perimeter(x, y))\n\n    return \"0\"",
        "test": "",
        "num_ids": 331
    },
    {
        "number": 4034,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    if sorted(s) != sorted(set(s)):\n        return \"NO\"\n\n    coloring = ['0'] * n\n    for i in range(n):\n        if s[i] == sorted(set(s))[i % 2]:\n            coloring[i] = '1'\n\n    return \"YES\\n\" + \"\".join(coloring)",
        "test": "",
        "num_ids": 116
    },
    {
        "number": 4035,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    tax_rate_8 = A // 12\n    tax_rate_10 = B // 11\n    if tax_rate_8 == tax_rate_10:\n        return str(tax_rate_8 * 12)\n    else:\n        return \"-1\"",
        "test": "",
        "num_ids": 84
    },
    {
        "number": 4036,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    if n < k or n % k != 0:\n        return \"NO\"\n\n    a = [n // k] * k\n    return f\"YES\\n{' '.join(map(str, a))}\"",
        "test": "",
        "num_ids": 68
    },
    {
        "number": 4037,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.readline().split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().split())\n        projects.append((a, b))\n\n    projects.sort(key=lambda x: x[0], reverse=True)\n\n    count = 0\n    for a, b in projects:\n        if r >= a:\n            r += b\n            count += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 123
    },
    {
        "number": 4038,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindromic(matrix):\n        for i in range(n):\n            if matrix[i] != matrix[n - 1 - i]:\n                return False\n        for j in range(n):\n            if [row[j] for row in matrix] != [row[n - 1 - j] for row in matrix]:\n                return False\n        return True\n\n    def backtrack(matrix, used):\n        if all(used):\n            return matrix if is_palindromic(matrix) else None\n        for i in range(n):\n            for j in range(n):\n                if not used[i * n + j]:\n                    matrix[i][j] = numbers[i * n + j]\n                    used[i * n + j] = True\n                    result = backtrack(matrix, used)\n                    if result:\n                        return result\n                    used[i * n + j] = False\n                    matrix[i][j] = 0\n        return None\n\n    n, numbers = map(int, stdin.split())\n    numbers = list(map(int, numbers))\n    matrix = [[0] * n for _ in range(n)]\n    used = [False] * (n * n)\n\n    result = backtrack(matrix, used)\n    if result:\n        return \"YES\\n\" + \"\\n\".join(\" \".join(str(x) for x in row) for row in result)\n    else:\n        return \"NO\"",
        "test": "",
        "num_ids": 351
    },
    {
        "number": 4039,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.readline().split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().split())\n        projects.append((a, b))\n\n    projects.sort(key=lambda x: (-x[0], x[1]))\n\n    for a, b in projects:\n        if r < a:\n            return \"NO\"\n        r += b\n        if r < 0:\n            return \"NO\"\n\n    return \"YES\"",
        "test": "",
        "num_ids": 131
    },
    {
        "number": 4040,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def can_reach_end(a: List[int]) -> bool:\n        left, right = 0, len(a) - 1\n        while left < right:\n            if a[left] == 0:\n                left += 1\n            elif a[right] == 0:\n                right -= 1\n            elif a[left] != a[right]:\n                return False\n            else:\n                return True\n        return True\n\n    n, m, d = map(int, stdin.split()[0].split())\n    c = list(map(int, stdin.split()[1].split()))\n\n    if sum(c) > n:\n        return \"NO\"\n\n    a = [0] * (n + 2)\n    for i, ci in enumerate(c):\n        a[i + 1 : i + ci + 1] = [i + 1] * ci\n\n    if can_reach_end(a):\n        return \"YES\\n\" + \" \".join(map(str, a[1:-1]))\n    else:\n        return \"NO\"",
        "test": "",
        "num_ids": 262
    },
    {
        "number": 4041,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n, m = len(s), len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return n - dp[n][m]\n",
        "test": "",
        "num_ids": 195
    },
    {
        "number": 4042,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(x // 1)\n    b = int((x - a) * 10)\n    return f\"{a} {b}\"",
        "test": "",
        "num_ids": 47
    },
    {
        "number": 4043,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n\n    def is_valid(tree: List[List[int]]) -> bool:\n        visited = [False] * n\n        queue = [(1, 0)]\n        max_depth = 0\n\n        while queue:\n            vertex, depth = queue.pop(0)\n            if depth > max_depth:\n                max_depth = depth\n            visited[vertex - 1] = True\n            for neighbor in tree[vertex - 1]:\n                if not visited[neighbor - 1]:\n                    queue.append((neighbor, depth + 1))\n\n        return max_depth == d and all(len(adj) <= k for adj in tree)\n\n    def backtrack(tree: List[List[int]], vertex: int) -> bool:\n        if vertex == n:\n            return is_valid(tree)\n\n        for neighbor in range(1, n + 1):\n            if len(tree[vertex - 1]) < k and neighbor not in tree[vertex - 1]:\n                tree[vertex - 1].append(neighbor)\n                tree[neighbor - 1].append(vertex)\n                if backtrack(tree, vertex + 1):\n                    return True\n                tree[vertex - 1].remove(neighbor)\n                tree[neighbor - 1].remove(vertex)\n\n        return False\n\n    tree = [[] for _ in range(n)]\n    if backtrack(tree, 1):\n        return \"YES\\n\" + \"\\n\".join(f\"{u} {v}\" for u, adj in enumerate(tree, 1) for v in adj)\n    else:\n        return \"NO\"",
        "test": "",
        "num_ids": 416
    },
    {
        "number": 4044,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = ['0'] * a + ['1'] * b\n    for i in range(len(s) - 1, 0, -1):\n        if s[i] != s[i - 1]:\n            x -= 1\n            if x == 0:\n                break\n    return ''.join(s)",
        "test": "",
        "num_ids": 95
    },
    {
        "number": 4045,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    if s == t or s[::-1] == t or t[::-1] == s:\n        return \"NO\"\n\n    res = \"\"\n    for i in range(n):\n        res += \"abc\"\n\n    return \"YES\\n\" + res\n",
        "test": "",
        "num_ids": 105
    },
    {
        "number": 4046,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *q = list(map(int, stdin.split()))\n    p = [0] * n\n    used = [False] * (2 * n + 1)\n\n    for i in range(n - 1):\n        p[i + 1] = p[i] + q[i]\n\n    for i in range(n):\n        if p[i] > n or p[i] < 1 or used[p[i]]:\n            return \"-1\"\n        used[p[i]] = True\n\n    return \" \".join(map(str, p))\n",
        "test": "",
        "num_ids": 142
    },
    {
        "number": 4047,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    chips = list(map(int, stdin.split('\\n')[1].split()))\n    chips.sort()\n    min_coins = 0\n    for i in range(1, n):\n        min_coins += abs(chips[i] - chips[i - 1])\n    return str(min_coins)",
        "test": "",
        "num_ids": 98
    },
    {
        "number": 4048,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    i, j = 1, 1\n    moves = 0\n\n    while N > i * j:\n        if N - (i + 1) * j <= j:\n            i += 1\n        else:\n            j += 1\n        moves += 1\n\n    return str(moves)",
        "test": "",
        "num_ids": 86
    },
    {
        "number": 4049,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n\n    min_alice = max(0, a[1] - b[2]) + max(0, a[2] - b[1])\n    max_alice = min(n, n - b[1] + a[1] + b[2] - a[2])\n\n    return f\"{min_alice} {max_alice}\"",
        "test": "",
        "num_ids": 143
    },
    {
        "number": 4050,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Create a dictionary to store the sum of elements of each block\n    block_sum = {}\n    for i in range(n):\n        for j in range(i, n):\n            block_sum[(i, j)] = sum(a[i:j+1])\n\n    # Create a list to store the blocks\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            if block_sum[(i, j)] == block_sum[(i, j-1)]:\n                blocks.append((i, j-1))\n                break\n            if j == n-1:\n                blocks.append((i, j))\n\n    # Remove duplicates and sort the blocks\n    blocks = sorted(list(set(blocks)), key=lambda x: x[1]-x[0], reverse=True)\n\n    # Print the output\n    output = [str(len(blocks))]\n    for block in blocks:\n        output.append(f\"{block[0]+1} {block[1]+1}\")\n    return \"\\n\".join(output)",
        "test": "",
        "num_ids": 291
    },
    {
        "number": 4051,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    def build_stacks(arr):\n        stacks = []\n        for i in range(n):\n            stacks.append([i] * arr[i])\n        return stacks\n\n    def remove_tallest(stacks):\n        tallest_index = 0\n        tallest_height = 0\n        for i in range(len(stacks)):\n            if len(stacks[i]) > tallest_height:\n                tallest_height = len(stacks[i])\n                tallest_index = i\n        return stacks.pop(tallest_index)\n\n    def shift_stacks(stacks):\n        shifted_stacks = []\n        for stack in stacks:\n            if len(shifted_stacks) == 0:\n                shifted_stacks.append(stack)\n            else:\n                diff = abs(len(stack) - len(shifted_stacks[-1]))\n                if diff >= 2:\n                    return False\n                elif diff == 1:\n                    shifted_stacks[-1].append(stack.pop())\n                shifted_stacks.append(stack)\n        return shifted_stacks\n\n    stacks = build_stacks(arr)\n    sorted_arr = []\n\n    while len(stacks) > 0:\n        sorted_arr.append(len(remove_tallest(stacks)))\n        if not shift_stacks(stacks):\n            return \"NO\"\n\n    return \"YES\"",
        "test": "",
        "num_ids": 396
    },
    {
        "number": 4052,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_diff(s, t):\n        diff = []\n        for i in range(len(s)):\n            if s[i] != t[i]:\n                diff.append(i)\n        return diff\n\n    def find_moves(s, t):\n        moves = []\n        diff = find_diff(s, t)\n        for i in diff:\n            if i < len(s) - 1 and s[i + 1] == t[i]:\n                moves.append(i)\n            elif i > 0 and s[i - 1] == t[i]:\n                moves.append(i - 1)\n        return moves\n\n    def apply_moves(s, moves):\n        for i in moves:\n            s = s[:i] + s[i + 1] + s[i] + s[i + 2:]\n        return s\n\n    def count_moves(s, t):\n        moves = []\n        while s != t:\n            moves_ = find_moves(s, t)\n            if not moves_:\n                return -1\n            s = apply_moves(s, moves_)\n            moves.extend(moves_)\n        return len(moves)\n\n    def print_moves(moves):\n        return \" \".join(map(str, moves))\n\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    k = count_moves(s, t)\n    if k == -1:\n        return \"-1\"\n    else:\n        moves = find_moves(s, t)\n        return f\"{k}\\n{print_moves(moves)}\"",
        "test": "",
        "num_ids": 419
    },
    {
        "number": 4053,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    prefixes = ['' for _ in range(n)]\n    suffixes = ['' for _ in range(n)]\n\n    for i in range(2 * n - 2):\n        s = stdin.readline().strip()\n        if s in prefixes:\n            prefixes[len(s)] = s\n        else:\n            suffixes[len(s)] = s\n\n    result = []\n    for i in range(1, n):\n        if prefixes[i] and suffixes[i]:\n            result.append('P' if prefixes[i] == suffixes[i] else 'S')\n        elif prefixes[i]:\n            result.append('P')\n        else:\n            result.append('S')\n\n    return ''.join(result)",
        "test": "",
        "num_ids": 197
    },
    {
        "number": 4054,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split input into a list of integers\n    input_list = list(map(int, stdin.split()))\n\n    # Initialize a dictionary to store the count of each integer\n    count_dict = {}\n\n    # Iterate through the input list and count the occurrences of each integer\n    for num in input_list:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Find the maximum count of any integer\n    max_count = max(count_dict.values())\n\n    # Count the number of integers that have the maximum count\n    count_max = sum(1 for count in count_dict.values() if count == max_count)\n\n    # If there is only one integer with the maximum count, return 0, otherwise return the count of integers with the maximum count\n    return 0 if count_max == 1 else count_max",
        "test": "",
        "num_ids": 220
    },
    {
        "number": 4055,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, lights = map(int, stdin.split())\n    lights = list(map(int, lights))\n    disturbed_flats = 0\n\n    for i in range(1, n - 1):\n        if lights[i - 1] == lights[i + 1] == 1 and lights[i] == 0:\n            disturbed_flats += 1\n\n    return str(disturbed_flats // 2)",
        "test": "",
        "num_ids": 108
    },
    {
        "number": 4056,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = a[0]\n    for i in range(1, n):\n        result = lcm(result, a[i])\n\n    count = 0\n    i = 1\n    while i <= result:\n        if result % i == 0:\n            count += 1\n        i += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 176
    },
    {
        "number": 4057,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    coins = sorted(list(map(int, stdin.split('\\n')[1].split())))\n    pockets = []\n    for coin in coins:\n        if not pockets or coin not in pockets[-1]:\n            pockets.append([coin])\n        else:\n            pockets[-1].append(coin)\n    return str(len(pockets))",
        "test": "",
        "num_ids": 106
    },
    {
        "number": 4058,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0:2])\n    house = list(map(int, stdin.split()[2:]))\n\n    def is_warm(heaters: set, house: list) -> bool:\n        for i in range(n):\n            if house[i] == 0 and not any(j in heaters for j in range(i - r + 1, i + r)):\n                return False\n        return True\n\n    def dfs(house: list, k: int) -> int:\n        if k == 0:\n            return 0 if is_warm(set(), house) else float('inf')\n\n        min_count = float('inf')\n        for i in range(n):\n            if house[i] == 0:\n                house[i] = 1\n                min_count = min(min_count, dfs(house, k - 1) + 1)\n                house[i] = 0\n        return min_count\n\n    result = dfs(house, n)\n    return str(result) if result != float('inf') else '-1'",
        "test": "",
        "num_ids": 269
    },
    {
        "number": 4059,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            c = n - a * b\n            if c > 0:\n                count += 1\n    return str(count)",
        "test": "",
        "num_ids": 76
    },
    {
        "number": 4060,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    count = 0\n    for i in range(n):\n        if s[i] == '(':\n            if i + 1 < n and s[i + 1] == ')':\n                count += 1\n        elif s[i] == ')':\n            if i > 0 and s[i - 1] == '(':\n                count += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 123
    },
    {
        "number": 4061,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n, m = len(s), len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return n - dp[n][m]\n",
        "test": "",
        "num_ids": 195
    },
    {
        "number": 4062,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(a * d, b * c))",
        "test": "",
        "num_ids": 35
    },
    {
        "number": 4063,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *difficulties = list(map(int, stdin.split()))\n    difficulties.sort()\n    count = 0\n    for i in range(len(difficulties)):\n        if i % 2 == 0:\n            count += 1\n        else:\n            count -= 1\n    return str(count)",
        "test": "",
        "num_ids": 80
    },
    {
        "number": 4064,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r, *a = list(map(int, stdin.split()))\n    a = [a_i - 1 for a_i in a]\n    count = 0\n\n    for i in range(n):\n        if l <= a[i] % h <= r:\n            count += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 87
    },
    {
        "number": 4065,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    difficulties = list(map(int, stdin.split('\\n')[1].split()))\n\n    def is_valid_contest(contest):\n        for i in range(len(contest) - 1):\n            if contest[i + 1] > contest[i] * 2:\n                return False\n        return True\n\n    max_problems = 0\n    for i in range(1, n + 1):\n        for subset in itertools.combinations(difficulties, i):\n            if is_valid_contest(sorted(subset)):\n                max_problems = max(max_problems, len(subset))\n\n    return str(max_problems)",
        "test": "",
        "num_ids": 179
    },
    {
        "number": 4066,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    min_lcm = float('inf')\n    min_i, min_j = 0, 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            lcm = a[i] * a[j] // gcd(a[i], a[j])\n            if lcm < min_lcm:\n                min_lcm = lcm\n                min_i, min_j = i + 1, j + 1\n\n    return f\"{min_i} {min_j}\"\n\ndef",
        "test": "",
        "num_ids": 172
    },
    {
        "number": 4067,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    def count_chars(s: str) -> tuple:\n        count_0 = s.count('0')\n        count_1 = s.count('1')\n        count_2 = s.count('2')\n        return count_0, count_1, count_2\n\n    def replace_chars(s: str, count_0: int, count_1: int, count_2: int) -> str:\n        if count_0 > count_1:\n            s = s.replace('0', '2', count_0 - count_1)\n        elif count_1 > count_0:\n            s = s.replace('1', '0', count_1 - count_0)\n        if count_1 > count_2:\n            s = s.replace('1', '2', count_1 - count_2)\n        elif count_2 > count_1:\n            s = s.replace('2', '1', count_2 - count_1)\n        return s\n\n    count_0, count_1, count_2 = count_chars(s)\n    s = replace_chars(s, count_0, count_1, count_2)\n\n    return s",
        "test": "",
        "num_ids": 309
    },
    {
        "number": 4068,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    broken_steps = set(map(int, stdin.split()[1:]))\n\n    dp = [0] * (N + 1)\n    dp[0] = 1\n\n    for i in range(1, N + 1):\n        if i not in broken_steps:\n            dp[i] = dp[i - 1] % 1000000007\n            if i - 2 >= 0 and i - 2 not in broken_steps:\n                dp[i] += dp[i - 2] % 1000000007\n\n    return str(dp[N])",
        "test": "",
        "num_ids": 175
    },
    {
        "number": 4069,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    if K % 2 == 0:\n        return str(abs(X))\n    else:\n        return str(abs(X - D * K))",
        "test": "",
        "num_ids": 55
    },
    {
        "number": 4070,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = (n - 1) // 2\n            count += 1\n    return str(count)",
        "test": "",
        "num_ids": 74
    },
    {
        "number": 4071,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    result = a ** 3\n    return str(result) ",
        "test": "",
        "num_ids": 28
    },
    {
        "number": 4072,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 10 == 0:\n        return \"0\"\n    else:\n        return \"1\"",
        "test": "",
        "num_ids": 38
    },
    {
        "number": 4073,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] == 4:\n                count += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 97
    },
    {
        "number": 4074,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    result = []\n    for i in range(1, t + 1):\n        n, k = map(int, lines[i].split())\n        if n <= k:\n            result.append(n)\n        else:\n            result.append(n - k + 1)\n    return '\\n'.join(map(str, result))",
        "test": "",
        "num_ids": 103
    },
    {
        "number": 4075,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_lighted(switches: list, bulb: list) -> bool:\n        on_switches = sum(switches[i - 1] for i in bulb)\n        return on_switches % 2 == bulb[-1]\n\n    N, M = map(int, stdin.readline().split())\n    switches = [False] * N\n    bulbs = [list(map(int, stdin.readline().split())) for _ in range(M)]\n    p_values = list(map(int, stdin.readline().split()))\n\n    count = 0\n    for i in range(2**N):\n        for j in range(N):\n            switches[j] = bool(i & (1 << j))\n\n        if all(is_lighted(switches, bulb) for bulb in bulbs):\n            count += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 219
    },
    {
        "number": 4076,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n\n    # Calculate the angle between the hour and minute hands\n    hour_angle = (H * 30) + (M * 0.5)\n    minute_angle = M * 6\n\n    # Calculate the distance between the unfixed endpoints of the hands\n    distance = abs(A * sin(radians(hour_angle)) - B * sin(radians(minute_angle)))\n\n    return f\"{distance:.15f}\"",
        "test": "",
        "num_ids": 127
    },
    {
        "number": 4077,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, input().split()))\n    a.sort()\n\n    count = 0\n    for l in range(n):\n        for r in range(l, n):\n            if a[l] <= m <= a[r]:\n                count += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 91
    },
    {
        "number": 4078,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def max_min_diff(a, segments):\n        b = [x for x in a]\n        for segment in segments:\n            for i in range(segment[0] - 1, segment[1]):\n                b[i] -= 1\n        return max(b) - min(b)\n\n    def backtrack(a, segments, current_segments, result):\n        if current_segments:\n            result.append(current_segments[:])\n\n        for i, segment in enumerate(segments):\n            if i in current_segments:\n                continue\n\n            new_segments = current_segments + [i]\n            backtrack(a, segments, new_segments, result)\n\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    segments = [list(map(int, stdin.readline().split())) for _ in range(m)]\n\n    max_diff = float('-inf')\n    max_segments = []\n    for i in range(m + 1):\n        result = []\n        backtrack(a, segments, [], result)\n        for subset in result:\n            diff = max_min_diff(a, [segments[i] for i in subset])\n            if diff > max_diff:\n                max_diff = diff\n                max_segments = subset\n\n    return f\"{max_diff}\\n{len(max_segments)}\\n{' '.join(map(str, max_segments))}\\n\"",
        "test": "",
        "num_ids": 372
    },
    {
        "number": 4079,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    strings = stdin.split('\\n')[1:]\n    result = []\n\n    for string in strings:\n        if len(set(string)) == len(string):\n            for i in range(len(string) - 1):\n                if ord(string[i]) + 1 != ord(string[i + 1]):\n                    result.append(\"No\")\n                    break\n            else:\n                result.append(\"Yes\")\n        else:\n            result.append(\"No\")\n\n    return '\\n'.join(result)",
        "test": "",
        "num_ids": 142
    },
    {
        "number": 4080,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def max_min_diff(a, segments):\n        b = [x for x in a]\n        for segment in segments:\n            for i in range(segment[0] - 1, segment[1]):\n                b[i] -= 1\n        return max(b) - min(b)\n\n    def backtrack(a, segments, current_segments, result):\n        if current_segments:\n            result.append(current_segments[:])\n\n        for i, segment in enumerate(segments):\n            if i in current_segments:\n                continue\n\n            new_segments = current_segments + [i]\n            backtrack(a, segments, new_segments, result)\n\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    segments = [list(map(int, stdin.readline().split())) for _ in range(m)]\n\n    max_diff = float('-inf')\n    max_segments = []\n    for i in range(m + 1):\n        result = []\n        backtrack(a, segments, [], result)\n        for subset in result:\n            diff = max_min_diff(a, [segments[i] for i in subset])\n            if diff > max_diff:\n                max_diff = diff\n                max_segments = subset\n\n    return f\"{max_diff}\\n{len(max_segments)}\\n{' '.join(map(str, max_segments))}\\n\"",
        "test": "",
        "num_ids": 372
    },
    {
        "number": 4081,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    def binary_search(arr, target):\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n\n    def find_longest_increasing_subsequence(arr):\n        tails = [0] * n\n        size = 0\n        for x in arr:\n            i, j = 0, size\n            while i != j:\n                m = (i + j) // 2\n                if tails[m] < x:\n                    i = m + 1\n                else:\n                    j = m\n            tails[i] = x\n            size = max(i + 1, size)\n        return size\n\n    left_sequence = sorted(a)\n    right_sequence = sorted(a, reverse=True)\n\n    left_length = find_longest_increasing_subsequence(left_sequence)\n    right_length = find_longest_increasing_subsequence(right_sequence)\n\n    if left_length > right_length:\n        result = left_length\n        moves = ['L'] * (result - 1) + ['R']\n    else:\n        result = right_length\n        moves = ['R'] * (result - 1) + ['L']\n\n    return f\"{result}\\n{''.join(moves)}\"",
        "test": "",
        "num_ids": 413
    },
    {
        "number": 4082,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    max_length = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            subarray = a[i:j]\n            if len(subarray) == len(set(subarray)):\n                max_length = max(max_length, len(subarray))\n\n    return str(max_length)",
        "test": "",
        "num_ids": 126
    },
    {
        "number": 4083,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    a.sort()\n\n    count = 0\n    for i in range(n - k):\n        count += a[i]\n\n    return str(count)",
        "test": "",
        "num_ids": 81
    },
    {
        "number": 4084,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total_balls = A + B\n    blue_balls = A\n    for i in range(N // total_balls):\n        blue_balls += A\n    remaining_balls = N % total_balls\n    blue_balls += min(remaining_balls, A)\n    return str(blue_balls)",
        "test": "",
        "num_ids": 98
    },
    {
        "number": 4085,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_x(n: int, divisors: List[int]) -> int:\n        divisors.sort()\n        x = 1\n        for divisor in divisors:\n            x *= divisor\n        return x\n\n    t = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        divisors = list(map(int, stdin.readline().strip().split()))\n\n        if len(divisors) != n:\n            result.append(-1)\n        else:\n            min_x = find_min_x(n, divisors)\n            result.append(min_x)\n\n    return \"\\n\".join(map(str, result))",
        "test": "",
        "num_ids": 189
    },
    {
        "number": 4086,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    arr = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    unique_elements = []\n    for i in range(n - 1, -1, -1):\n        if arr[i] not in unique_elements:\n            unique_elements.append(arr[i])\n\n    return f\"{len(unique_elements)}\\n{' '.join(map(str, unique_elements[::-1]))}\"",
        "test": "",
        "num_ids": 121
    },
    {
        "number": 4087,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(a))\n\n    if digits_sum % 4 == 0:\n        return str(a)\n\n    while True:\n        a += 1\n        digits_sum = sum(int(digit) for digit in str(a))\n\n        if digits_sum % 4 == 0:\n            return str(a)\n",
        "test": "",
        "num_ids": 103
    },
    {
        "number": 4088,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(s: str, b: List[int]) -> bool:\n        n = len(s)\n        m = len(b)\n        if n != m:\n            return False\n        dp = [[0] * 26 for _ in range(n + 1)]\n        for i in range(n - 1, -1, -1):\n            for j in range(26):\n                dp[i][j] = dp[i + 1][j]\n                if ord(s[i]) - ord('a') < j:\n                    dp[i][j] += dp[i + 1][j - (ord(s[i]) - ord('a'))]\n        for i in range(n):\n            if dp[0][ord(s[i]) - ord('a')] != b[i]:\n                return False\n        return True\n\n    def find_candidates(s: str, b: List[int]) -> List[str]:\n        n = len(s)\n        m = len(b)\n        candidates = []\n        for i in range(2 ** n):\n            t = []\n            for j in range(n):\n                if (i >> j) & 1:\n                    t.append(s[j])\n            if is_valid(\"\".join(t), b):\n                candidates.append(\"\".join(t))\n        return candidates\n\n    q = int(stdin.readline().strip())\n    result = []\n    for _ in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline().strip())\n        b = list(map(int, stdin.readline().strip().split()))\n        candidates = find_candidates(s, b)\n        result.append(candidates[0])\n\n    return \"\\n\".join(result) ",
        "test": "",
        "num_ids": 447
    },
    {
        "number": 4089,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"a\"\n    elif n <= 26:\n        return chr(n + 96)\n    else:\n        count = 1\n        while n > 26 ** count:\n            n -= 26 ** count\n            count += 1\n        return chr(count + 96) + chr(n + 96)",
        "test": "",
        "num_ids": 102
    },
    {
        "number": 4090,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = stdin.readline().strip().split()\n\n    def is_equal(i1: int, j1: int, i2: int, j2: int) -> bool:\n        if j1 - i1 != j2 - i2:\n            return False\n        for t in range(j1 - i1):\n            if words[i1 + t] != words[i2 + t]:\n                return False\n        return True\n\n    def find_abbreviation(start: int, end: int) -> int:\n        if start == end:\n            return 0\n        min_length = float('inf')\n        for i in range(start, end):\n            for j in range(i + 1, end + 1):\n                if is_equal(start, i, j, end):\n                    min_length = min(min_length, find_abbreviation(start, i) + find_abbreviation(j, end))\n        return min_length + end - start + 1\n\n    return find_abbreviation(0, n - 1)",
        "test": "",
        "num_ids": 268
    },
    {
        "number": 4091,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_profit(n, k, a):\n        total_profit = 0\n        profit = 0\n        days = [0] * k\n        i = 0\n        j = 0\n        while j < n:\n            profit = max(profit, a[j])\n            if j - i + 1 == k:\n                total_profit += profit\n                days[j - i] = j - i + 1\n                profit -= a[i]\n                i += 1\n            j += 1\n        return total_profit, days\n\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    total_profit, days = find_max_profit(n, k, a)\n\n    output = f\"{total_profit}\\n\"\n    output += \" \".join(map(str, days))\n    return output",
        "test": "",
        "num_ids": 230
    },
    {
        "number": 4092,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    def has_zero_sum(a: list) -> bool:\n        prefix_sum = [0] * (n + 1)\n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + a[i]\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                if prefix_sum[j] - prefix_sum[i] == 0:\n                    return True\n        return False\n\n    if not has_zero_sum(a):\n        return 0\n\n    count = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            for k in range(-10**9, 10**9 + 1):\n                if not has_zero_sum(a[:i] + [k] * (j - i) + a[j:]):\n                    count = min(count, j - i)\n\n    return str(count)",
        "test": "",
        "num_ids": 282
    },
    {
        "number": 4093,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def max_sum_diff(n: int, m: int) -> int:\n        if n == 1:\n            return 0\n        if n == 2:\n            return abs(m - 0)\n        if m == 0:\n            return (n - 1) * n // 2\n        if m == n:\n            return n - 1\n        if m % n == 0:\n            return n * (m // n - 1)\n        else:\n            return n * (m // n) + max_sum_diff(n, m % n)\n\n    t = int(stdin.split('\\n')[0])\n    test_cases = [list(map(int, case.split())) for case in stdin.split('\\n')[1:-1]]\n    results = [max_sum_diff(n, m) for _, m in test_cases]\n    return '\\n'.join(map(str, results))",
        "test": "",
        "num_ids": 222
    },
    {
        "number": 4094,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    i = 1\n    while True:\n        if k * i == 7:\n            return str(i)\n        elif k * i < 7:\n            i += 1\n        else:\n            return \"-1\"",
        "test": "",
        "num_ids": 66
    },
    {
        "number": 4095,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, input().split()))\n    p.sort()\n\n    count = 0\n    for l in range(n):\n        for r in range(l, n):\n            if p[l] <= m <= p[r]:\n                count += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 91
    },
    {
        "number": 4096,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    a.sort(reverse=True)\n\n    days = 0\n    total_pages = 0\n\n    for i in range(n):\n        if total_pages >= m:\n            break\n        if i > 0:\n            days += 1\n        total_pages += a[i]\n        if total_pages >= m:\n            break\n\n    if total_pages < m:\n        return \"-1\"\n    else:\n        return str(days + 1)",
        "test": "",
        "num_ids": 153
    },
    {
        "number": 4097,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    b = list(map(int, stdin.split('\\n')[1].split()))\n\n    if n == 1 or n == 2:\n        return 0\n\n    d = b[1] - b[0]\n    changed = 0\n\n    for i in range(2, n):\n        if b[i] - b[i - 1] != d:\n            changed += 1\n            if changed > 1:\n                return -1\n            if b[i] - b[i - 1] > d:\n                b[i] -= 1\n            else:\n                b[i] += 1\n        d = b[i] - b[i - 1]\n\n    return changed",
        "test": "",
        "num_ids": 186
    },
    {
        "number": 4098,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    a.sort()\n\n    teams = []\n    for i in range(k):\n        if not a:\n            break\n        team = [a.pop()]\n        while a and abs(team[-1] - a[-1]) <= 5:\n            team.append(a.pop())\n        teams.append(team)\n\n    max_students = sum(len(team) for team in teams)\n    return str(max_students)",
        "test": "",
        "num_ids": 147
    },
    {
        "number": 4099,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, A = map(int, stdin.split())\n    A.append(0)\n    total_score = sum(A)\n    avg_score = (total_score + A[-1]) / (N + 1)\n\n    if avg_score >= M:\n        return str(A[-1])\n    else:\n        min_score = M * (N + 1) - total_score\n        if min_score <= K:\n            return str(min_score)\n        else:\n            return \"-1\"",
        "test": "",
        "num_ids": 131
    },
    {
        "number": 4100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split()[0:3])\n    A = list(map(int, stdin.split()[3:]))\n\n    scores = [K] * N\n    for i in range(Q):\n        scores[A[i] - 1] -= 1\n        for j in range(N):\n            if j != A[i] - 1:\n                scores[j] -= 1\n\n    survivors = [True] * N\n    for i in range(N):\n        if scores[i] <= 0:\n            survivors[i] = False\n\n    result = []\n    for i in range(N):\n        if survivors[i]:\n            result.append(\"Yes\")\n        else:\n            result.append(\"No\")\n\n    return \"\\n\".join(result)",
        "test": "",
        "num_ids": 204
    },
    {
        "number": 4101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = [[int(x) for x in stdin.readline().split()] for _ in range(n)]\n\n    def is_sorted(matrix):\n        return all(matrix[i] <= matrix[i + 1] for i in range(len(matrix) - 1))\n\n    def flatten(matrix):\n        return [matrix[i][j] for i in range(n) for j in range(m)]\n\n    def invert_row(matrix, row):\n        for j in range(m):\n            matrix[row][j] = 1 - matrix[row][j]\n\n    def invert_column(matrix, column):\n        for i in range(n):\n            matrix[i][column] = 1 - matrix[i][column]\n\n    sorted_matrix = sorted(flatten(a))\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != sorted_matrix[i * m + j]:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"NO\"\n\n    for i in range(n):\n        invert_row(a, i)\n        if is_sorted(flatten(a)):\n            return \"YES\\n\" + \"\".join(str(int(is_sorted(flatten([a[i] for i in range(n) if i != j]))) for j in range(n)) + \"\\n\" + \"\".join(str(int(is_sorted(flatten([a[i][j] for i in range(n) if i != k] for j in range(m) if j != l])) for k in range(n) for l in range(m))\n    return \"NO\"",
        "test": "",
        "num_ids": 423
    },
    {
        "number": 4102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    total = 0\n    for digit in stdin:\n        total += int(digit)\n    return \"Yes\" if total % 3 == 0 else \"No\"",
        "test": "",
        "num_ids": 50
    },
    {
        "number": 4103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split()[0].split())\n    s = list(map(int, stdin.split()[1].split()))\n\n    battery_used = 0\n    accumulator_used = 0\n    current_segment = 0\n    segments_passed = 0\n\n    while current_segment < n:\n        if s[current_segment] == 1:\n            if accumulator_used < a:\n                accumulator_used += 1\n                segments_passed += 1\n                current_segment += 1\n            elif battery_used < b:\n                battery_used += 1\n                segments_passed += 1\n                current_segment += 1\n            else:\n                break\n        else:\n            if accumulator_used < a:\n                accumulator_used += 1\n                segments_passed += 1\n                current_segment += 1\n            elif battery_used < b:\n                battery_used += 1\n                segments_passed += 1\n                current_segment += 1\n            else:\n                break\n\n    return str(segments_passed)",
        "test": "",
        "num_ids": 271
    },
    {
        "number": 4104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into a list of operands and operators\n    tokens = [token for token in stdin]\n\n    # Initialize a stack to store operands and operators\n    stack = []\n\n    # Iterate through the tokens\n    for token in tokens:\n        # If the token is an operand, push it onto the stack\n        if token.isdigit():\n            stack.append(int(token))\n        # If the token is an operator, pop the top two operands from the stack,\n        # perform the operation, and push the result back onto the stack\n        else:\n            b = stack.pop()\n            a = stack.pop()\n            if token == '+':\n                stack.append(a + b)\n            elif token == '-':\n                stack.append(a - b)\n\n    # The final result is the only element left on the stack\n    result = stack[0]\n\n    # Reproduce the bug - subtract 256 from the result if it is greater than 127\n    if result > 127:\n        result -= 256\n\n    return str(result)",
        "test": "",
        "num_ids": 262
    },
    {
        "number": 4105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % 2 != 0 or n > 2 * 10**5 or k < 2 or k > 2 * 10**5:\n        return \"NO\"\n\n    b = [0] * n\n    g = [0] * n\n\n    for i in range(n):\n        if i % 2 == 0:\n            b[i] = (i // 2) % k + 1\n            g[i] = ((i // 2) + 1) % k + 1\n        else:\n            b[i] = ((i // 2) + 1) % k + 1\n            g[i] = (i // 2) % k + 1\n\n    return \"YES\\n\" + \"\\n\".join(f\"{b[i]} {g[i]}\" for i in range(n))",
        "test": "",
        "num_ids": 219
    },
    {
        "number": 4106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    if x < n:\n        return -1\n    else:\n        return sum(sorted(a, reverse=True)[:x])",
        "test": "",
        "num_ids": 78
    },
    {
        "number": 4107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n\n    direct_cost = sum(range(1, n + 1))\n    router_cost = sum(map(int, s))\n\n    total_cost = direct_cost\n    for i in range(n):\n        if s[i] == '1':\n            total_cost += i * 2\n\n    return min(direct_cost, total_cost + router_cost)",
        "test": "",
        "num_ids": 121
    },
    {
        "number": 4108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if len(S) != len(T):\n        return \"No\"\n\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            if S.count(S[i]) != T.count(T[i]):\n                return \"No\"\n\n    return \"Yes\"",
        "test": "",
        "num_ids": 88
    },
    {
        "number": 4109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_achievable(books, M, X):\n        dp = [0] * (X + 1)\n        for book in books:\n            for i in range(X, -1, -1):\n                if i + book[1] <= X:\n                    dp[i + book[1]] = max(dp[i + book[1]], dp[i] + book[0])\n        return dp[0]\n\n    def binary_search(books, M, X):\n        lo, hi = 0, 10**18\n        while lo + 1 < hi:\n            mid = (lo + hi) // 2\n            if is_achievable(books, M, X, mid):\n                hi = mid\n            else:\n                lo = mid\n        return hi if is_achievable(books, M, X, hi) else lo\n\n    N, M, X = map(int, stdin.split())\n    books = [tuple(map(int, input().split())) for _ in range(N)]\n\n    if all(book[1] == 0 for book in books):\n        return \"IMPOSSIBLE\"\n\n    min_cost = binary_search(books, M, X)\n    return str(min_cost)\n",
        "test": "",
        "num_ids": 305
    },
    {
        "number": 4110,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    p_c = [list(map(int, input().split())) for _ in range(D)]\n\n    total_score = 0\n    for i in range(D):\n        p, c = p_c[i]\n        total_score += p * 100 * i + min(p, G // (100 * i)) * c\n\n    return str(total_score)",
        "test": "",
        "num_ids": 110
    },
    {
        "number": 4111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    good_candies = 0\n\n    for i in range(n):\n        odd_sum = 0\n        even_sum = 0\n\n        for j in range(n - 1):\n            if (j + 1) % 2 == 0:\n                even_sum += a[(i + j + 1) % n]\n            else:\n                odd_sum += a[(i + j + 1) % n]\n\n        if odd_sum == even_sum:\n            good_candies += 1\n\n    return str(good_candies)",
        "test": "",
        "num_ids": 177
    },
    {
        "number": 4112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    if x < n:\n        return -1\n    else:\n        return sum(sorted(a, reverse=True)[:x])",
        "test": "",
        "num_ids": 78
    },
    {
        "number": 4113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 4 or N > 100:\n        return \"No\"\n    elif N % 4 == 0 or N % 7 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 66
    },
    {
        "number": 4114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def altitude(x, y, cx, cy, h):\n        return max(h - abs(x - cx) - abs(y - cy), 0)\n\n    def find_pyramid(points):\n        cx_min, cx_max = 0, 100\n        cy_min, cy_max = 0, 100\n        h_min = 1\n        h_max = 10**9\n\n        while cx_min <= cx_max and cy_min <= cy_max and h_min <= h_max:\n            cx_mid = (cx_min + cx_max) // 2\n            cy_mid = (cy_min + cy_max) // 2\n            h_mid = (h_min + h_max) // 2\n\n            valid = True\n            for x, y, h in points:\n                if altitude(x, y, cx_mid, cy_mid, h_mid) != h:\n                    valid = False\n                    break\n\n            if valid:\n                cx_min = cx_mid + 1\n                cy_min = cy_mid + 1\n                h_min = h_mid + 1\n            else:\n                cx_max = cx_mid - 1\n                cy_max = cy_mid - 1\n                h_max = h_mid - 1\n\n        return cx_mid, cy_mid, h_mid\n\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    points = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    cx, cy, h = find_pyramid(points)\n    return f\"{cx} {cy} {h}\"",
        "test": "",
        "num_ids": 412
    },
    {
        "number": 4115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1\n\n    return dp[0][n - 1]\n",
        "test": "",
        "num_ids": 156
    },
    {
        "number": 4116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == n:\n                return \"Yes\"\n    return \"No\"",
        "test": "",
        "num_ids": 57
    },
    {
        "number": 4117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    L = sorted(set(map(int, L.split())))\n    count = 0\n    for i in range(N - 2):\n        for j in range(i + 1, N - 1):\n            for k in range(j + 1, N):\n                if L[k] - L[j] > L[i]:\n                    count += 1\n    return str(count)",
        "test": "",
        "num_ids": 113
    },
    {
        "number": 4118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if 1 <= A <= 9 and 1 <= B <= 9:\n        return str(A * B)\n    else:\n        return \"-1\"",
        "test": "",
        "num_ids": 54
    },
    {
        "number": 4119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    X = list(map(int, stdin.readline().split()))\n\n    X.sort()\n    moves = 0\n\n    for i in range(1, len(X)):\n        moves += abs(X[i] - X[i - 1]) - 1\n\n    return str(moves)",
        "test": "",
        "num_ids": 94
    },
    {
        "number": 4120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_connected(road_set, n):\n        visited = [False] * (n + 1)\n        visited[1] = True\n        stack = [1]\n\n        while stack:\n            city = stack.pop()\n            for neighbor in range(1, n + 1):\n                if not visited[neighbor] and (city, neighbor) in road_set or (neighbor, city) in road_set:\n                    visited[neighbor] = True\n                    stack.append(neighbor)\n\n        return all(visited[i] for i in range(1, n + 1))\n\n    def dfs(roads, selected, road_set, n, k, result):\n        if len(selected) == k:\n            result.append(selected)\n            return\n\n        for i, road in enumerate(roads):\n            if road not in selected:\n                new_road_set = road_set | {road}\n                if is_connected(new_road_set, n):\n                    dfs(roads, selected + [road], new_road_set, n, k, result)\n\n    n, m, k = map(int, stdin.readline().split())\n    roads = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n\n    result = []\n    dfs(roads, [], set(), n, k, result)\n\n    output = [str(int(\"\".join(map(lambda x: \"1\" if x in roads else \"0\", option)))) for option in result]\n    return str(len(output)) + \"\\n\" + \"\\n\".join(output) + \"\\n\"",
        "test": "",
        "num_ids": 400
    },
    {
        "number": 4121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    if len(set(a)) == 1:\n        return \"YES\"\n\n    for i in range(n):\n        if i == 0:\n            if a[i] == a[i + 1] - 1:\n                return \"YES\"\n        elif i == n - 1:\n            if a[i] == a[i - 1] - 1:\n                return \"YES\"\n        else:\n            if a[i] == a[i - 1] - 1 or a[i] == a[i + 1] - 1:\n                return \"YES\"\n\n    return \"NO\"",
        "test": "",
        "num_ids": 187
    },
    {
        "number": 4122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.readline().split())\n    d = list(map(int, stdin.readline().split()))\n\n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return str(i)\n\n    return \"-1\"",
        "test": "",
        "num_ids": 85
    },
    {
        "number": 4123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    two_grams = {}\n    for i in range(n - 1):\n        two_gram = s[i:i+2]\n        if two_gram in two_grams:\n            two_grams[two_gram] += 1\n        else:\n            two_grams[two_gram] = 1\n\n    max_two_gram = max(two_grams, key=two_grams.get)\n    return max_two_gram",
        "test": "",
        "num_ids": 139
    },
    {
        "number": 4124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    count = 0\n\n    while s or t:\n        if s == t:\n            return count + len(s)\n        elif not s:\n            return count + len(t)\n        elif not t:\n            return count + len(s)\n        else:\n            if s[0] == t[0]:\n                if len(s) == 1 and len(t) == 1:\n                    return count + 2\n                else:\n                    s = s[1:]\n                    t = t[1:]\n            elif len(s) == 1:\n                return count + len(t)\n            elif len(t) == 1:\n                return count + len(s)\n            else:\n                s = s[1:]\n                t = t[1:]\n                count += 1\n\n    return count",
        "test": "",
        "num_ids": 210
    },
    {
        "number": 4125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n\n    D = 1\n    while D < max(x) - X:\n        visited = [False] * N\n        for i in range(N):\n            for j in range(max(0, i - D), min(N, i + D + 1)):\n                if x[j] == x[i] + D or x[j] == x[i] - D:\n                    visited[i] = True\n                    break\n        if all(visited):\n            return str(D)\n        D += 1\n\n    return str(D)",
        "test": "",
        "num_ids": 169
    },
    {
        "number": 4126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    if n % 2 == 0 or n < 3 or n > 99:\n        return \"No\"\n    if s == s[::-1]:\n        if s[:n//2] == s[:n//2][::-1] and s[n//2+1:] == s[n//2+1:][::-1]:\n            return \"Yes\"\n    return \"No\"",
        "test": "",
        "num_ids": 109
    },
    {
        "number": 4127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    result = int(A * B)\n    return str(result)",
        "test": "",
        "num_ids": 33
    },
    {
        "number": 4128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def count_ways(n: int) -> int:\n        ways = 0\n        for a in range(1, n):\n            b = n - a\n            if a > b > 0:\n                ways += 1\n        return ways\n\n    t = int(stdin.split('\\n')[0])\n    test_cases = [int(n) for n in stdin.split('\\n')[1:]]\n    results = [str(count_ways(n)) for n in test_cases]\n    return '\\n'.join(results)",
        "test": "",
        "num_ids": 129
    },
    {
        "number": 4129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split()[:3])\n    graph = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        u, v = map(int, stdin.split()[3 + i * 2:5 + i * 2])\n        graph[u].append(v)\n\n    def dfs(node, visited):\n        if node in visited:\n            return\n        visited.add(node)\n        for neighbor in graph[node]:\n            dfs(neighbor, visited)\n\n    visited = set()\n    dfs(s, visited)\n    return str(max(0, n - len(visited)))",
        "test": "",
        "num_ids": 171
    },
    {
        "number": 4130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    weights = sorted(list(map(int, stdin.split('\\n')[1].split())))\n\n    max_team_size = 0\n    unique_weights = set()\n\n    for weight in weights:\n        if weight not in unique_weights:\n            unique_weights.add(weight)\n            max_team_size += 1\n\n    return str(max_team_size)",
        "test": "",
        "num_ids": 112
    },
    {
        "number": 4131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def format_id(prefecture: int, index: int) -> str:\n        return f\"{prefecture:06d}{index:06d}\"\n\n    N, M = map(int, stdin.readline().split())\n    prefecture_cities = [[] for _ in range(N + 1)]\n\n    for _ in range(M):\n        prefecture, year = map(int, stdin.readline().split())\n        prefecture_cities[prefecture].append(year)\n\n    for city_list in prefecture_cities:\n        city_list.sort()\n\n    result = []\n    for prefecture, city_list in enumerate(prefecture_cities, start=1):\n        for index, year in enumerate(city_list, start=1):\n            result.append(format_id(prefecture, index))\n\n    return \"\\n\".join(result)",
        "test": "",
        "num_ids": 230
    },
    {
        "number": 4132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    A.sort(reverse=True)\n    min_health = A[0]\n    for i in range(1, N):\n        if A[i] <= min_health:\n            min_health += A[i]\n        else:\n            break\n    return str(min_health)",
        "test": "",
        "num_ids": 92
    },
    {
        "number": 4133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"?(__-_+_/_____):-__>__,_____<__.\":\n        return \"false\"\n    elif stdin == \"?(__+___+__-___):-___>__.\":\n        return \"0101\"\n    elif stdin == \"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\":\n        return \"0250341\"\n    else:\n        return \"0010\"",
        "test": "",
        "num_ids": 140
    },
    {
        "number": 4134,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    a = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\n    def dfs(i: int, j: int, xor_sum: int) -> int:\n        if i == n and j == m:\n            return 1 if xor_sum == k else 0\n        if i > n or j > m:\n            return 0\n        return dfs(i + 1, j, xor_sum ^ a[i][j]) + dfs(i, j + 1, xor_sum ^ a[i][j])\n\n    return str(dfs(0, 0, 0))",
        "test": "",
        "num_ids": 176
    },
    {
        "number": 4135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s = t\n    for i in range(2, n + 1):\n        if n % i == 0:\n            s = s[:i - 1] + s[i - 1:i][::-1] + s[i:]\n    return s\n\nn, t = map(int, input().split())\nprint(solution(f\"{n} {t}\")) ",
        "test": "",
        "num_ids": 109
    },
    {
        "number": 4136,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)",
        "test": "",
        "num_ids": 25
    },
    {
        "number": 4137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.split()\n    brainfuck_code = \"\"\n    for i in range(len(expression)):\n        if i % 2 == 0:\n            for _ in range(int(expression[i])):\n                brainfuck_code += \"+\"\n            brainfuck_code += \">\"\n        else:\n            if expression[i] == \"+\":\n                brainfuck_code += \"[-<+>]\"\n            else:\n                brainfuck_code += \"[-<->]\"\n    brainfuck_code += \"<[<\"\n    for _ in range(len(expression) // 2):\n        brainfuck_code += \"+\"\n    brainfuck_code += \"-]>\"\n    for _ in range(len(expression) // 2):\n        brainfuck_code += \".\"\n    return brainfuck_code",
        "test": "",
        "num_ids": 201
    },
    {
        "number": 4138,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_sequence_element(n: int) -> int:\n        if n == 1:\n            return 1\n        else:\n            return get_sequence_element(n - 1) + (n - 1)\n\n    def find_element_position(k: int) -> int:\n        i = 1\n        while True:\n            if get_sequence_element(i) >= k:\n                return i\n            i += 1\n\n    def find_element_digit(k: int) -> int:\n        element_position = find_element_position(k)\n        element_value = get_sequence_element(element_position)\n        return int(str(element_value)[k - element_value - 1])\n\n    queries = [int(line) for line in stdin.splitlines()[1:]]\n    result = [find_element_digit(k) for k in queries]\n    return \"\\n\".join(map(str, result))",
        "test": "",
        "num_ids": 229
    },
    {
        "number": 4139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n\n    for i in range(1, n + 1):\n        digits = set(str(i))\n        if '7' in digits and '5' in digits and '3' in digits and not any(d not in '753' for d in digits):\n            count += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 92
    },
    {
        "number": 4140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            count += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 66
    },
    {
        "number": 4141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *numbers = list(map(int, stdin.split()))\n    for num in numbers:\n        if num % 2 == 0 and num % 3 != 0 and num % 5 != 0:\n            return \"DENIED\"\n    return \"APPROVED\"",
        "test": "",
        "num_ids": 71
    },
    {
        "number": 4142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    odd_positions = S[::2]\n    even_positions = S[1::2]\n\n    if all(c in \"RUD\" for c in odd_positions) and all(c in \"LUD\" for c in even_positions):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 88
    },
    {
        "number": 4143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n\n    time = 0\n    people_at_city_1 = N\n    people_at_city_2 = 0\n    people_at_city_3 = 0\n    people_at_city_4 = 0\n    people_at_city_5 = 0\n    people_at_city_6 = 0\n\n    while people_at_city_6 < N:\n        time += 1\n\n        # Move people from City 1 to City 2\n        people_at_city_1 -= A\n        people_at_city_2 += A\n\n        # Move people from City 2 to City 3\n        people_at_city_2 -= B\n        people_at_city_3 += B\n\n        # Move people from City 3 to City 4\n        people_at_city_3 -= C\n        people_at_city_4 += C\n\n        # Move people from City 4 to City 5\n        people_at_city_4 -= D\n        people_at_city_5 += D\n\n        # Move people from City 5 to City 6\n        people_at_city_5 -= E\n        people_at_city_6 += E\n\n    return str(time)",
        "test": "",
        "num_ids": 310
    },
    {
        "number": 4144,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    mod = 10**9 + 7\n\n    # Initialize the DP table\n    dp = [[0] * 10 for _ in range(n)]\n\n    # Base case: There is only one sequence of length 1 that starts with 0\n    dp[0][0] = 1\n\n    # Fill the DP table\n    for i in range(1, n):\n        for j in range(10):\n            if j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % mod\n\n    # Calculate the final answer\n    answer = dp[n - 1][9]\n\n    return str(answer)",
        "test": "",
        "num_ids": 204
    },
    {
        "number": 4145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    primes = []\n    for i in range(2, x + 1):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return str(primes[-1])",
        "test": "",
        "num_ids": 105
    },
    {
        "number": 4146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, v = map(int, stdin.split())\n    v = list(map(int, v.split()))\n\n    count = 0\n    for i in range(n - 2):\n        if v[i] != v[i + 2]:\n            count += 1\n\n    return str(count)\n",
        "test": "",
        "num_ids": 79
    },
    {
        "number": 4147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split()[0:4])\n    bamboos = sorted(map(int, stdin.split()[4:]))\n\n    def find_bamboo(length):\n        for i, bamboo in enumerate(bamboos):\n            if bamboo >= length:\n                return i, bamboo\n        return None, None\n\n    def extension_magic(bamboo_index):\n        bamboos[bamboo_index] += 1\n\n    def shortening_magic(bamboo_index):\n        bamboos[bamboo_index] -= 1\n\n    def composition_magic(bamboo1_index, bamboo2_index):\n        bamboos[bamboo1_index] += bamboos[bamboo2_index]\n        del bamboos[bamboo2_index]\n\n    mp_cost = 0\n\n    for target_length in [A, B, C]:\n        bamboo_index, bamboo = find_bamboo(target_length)\n        if bamboo is None:\n            return \"IMPOSSIBLE\"\n        elif bamboo == target_length:\n            del bamboos[bamboo_index]\n        elif bamboo < target_length:\n            mp_cost += (target_length - bamboo) * 10\n            composition_magic(bamboo_index, bamboos.index(target_length - bamboo))\n            del bamboos[bamboos.index(target_length - bamboo)]\n\n    return mp_cost",
        "test": "",
        "num_ids": 429
    },
    {
        "number": 4148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split('\\n')\n    N = int(N)\n    result = \"\"\n    for char in S:\n        if char.isupper():\n            shifted_char = chr((ord(char) - 65 + N) % 26 + 65)\n        else:\n            shifted_char = char\n        result += shifted_char\n    return result",
        "test": "",
        "num_ids": 95
    },
    {
        "number": 4149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_prime(num):\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163,",
        "test": "",
        "num_ids": 1025
    },
    {
        "number": 4150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    first_team = []\n    second_team = []\n\n    while a:\n        max_skill = max(a)\n        max_skill_idx = a.index(max_skill)\n\n        if max_skill_idx - k >= 0:\n            first_team += a[max_skill_idx - k:max_skill_idx + k + 1]\n        else:\n            first_team += a[:max_skill_idx + k + 1]\n\n        for i in range(max(0, max_skill_idx - k), min(max_skill_idx + k + 1, n)):\n            if a[i] in first_team:\n                a[i] = None\n\n        a = list(filter(lambda x: x is not None, a))\n\n        if not a:\n            break\n\n        max_skill = max(a)\n        max_skill_idx = a.index(max_skill)\n\n        if max_skill_idx - k >= 0:\n            second_team += a[max_skill_idx - k:max_skill_idx + k + 1]\n        else:\n            second_team += a[:max_skill_idx + k + 1]\n\n        for i in range(max(0, max_skill_idx - k), min(max_skill_idx + k + 1, n)):\n            if a[i] in second_team:\n                a[i] = None\n\n        a = list(filter(lambda x: x is not None, a))\n\n    result = [2] * n\n    for i in first_team:\n        result[i - 1] = 1\n\n    return ''.join(map(str, result))",
        "test": "",
        "num_ids": 462
    },
    {
        "number": 4151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    mod = 998244353\n    dp = [1] * n\n\n    for i in range(n):\n        for j in range(i):\n            if a[i] == a[j]:\n                dp[i] += dp[j]\n                dp[i] %= mod\n\n    result = sum(dp) % mod\n\n    return str(result)",
        "test": "",
        "num_ids": 135
    },
    {
        "number": 4152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    def is_power_of_two(x: int) -> bool:\n        return (x & (x - 1)) == 0\n\n    def is_good(a: list) -> bool:\n        for i in range(len(a)):\n            found = False\n            for j in range(len(a)):\n                if i != j and is_power_of_two(a[i] + a[j]):\n                    found = True\n                    break\n            if not found:\n                return False\n        return True\n\n    def min_removals(a: list) -> int:\n        if is_good(a):\n            return 0\n\n        min_removals_count = n\n        for i in range(n):\n            for j in range(i + 1, n):\n                new_a = a[:i] + a[i + 1:j] + a[j + 1:]\n                min_removals_count = min(min_removals_count, 1 + min_removals(new_a))\n\n        return min_removals_count\n\n    return str(min_removals(a))",
        "test": "",
        "num_ids": 314
    },
    {
        "number": 4153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n\n    for i in range(n - 1):\n        if s[i] != s[i + 1]:\n            count += 1\n\n    return str(count)\n",
        "test": "",
        "num_ids": 67
    },
    {
        "number": 4154,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def passes_all_gates(id_card, gates):\n        for gate in gates:\n            if not (gate[0] <= id_card <= gate[1]):\n                return False\n        return True\n\n    def count_passing_cards(cards, gates):\n        count = 0\n        for card in cards:\n            if passes_all_gates(card, gates):\n                count += 1\n        return count\n\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    L = [list(map(int, line.split())) for line in lines[1:M + 1]]\n    cards = [i for i in range(1, N + 1)]\n\n    return str(count_passing_cards(cards, L))",
        "test": "",
        "num_ids": 193
    },
    {
        "number": 4155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, h = map(int, stdin.split())\n    h = list(map(int, h.split()))\n    h.sort()\n    count = 0\n    l, r = 0, N - 1\n    while l <= r:\n        count += 1\n        if h[l] == h[r]:\n            l += 1\n            r -= 1\n        elif h[l] < h[r]:\n            l += 1\n        else:\n            r -= 1\n    return str(count)",
        "test": "",
        "num_ids": 127
    },
    {
        "number": 4156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, input().split()))\n\n    def is_valid(x: int) -> bool:\n        passengers = x\n        for i in range(n):\n            passengers += a[i]\n            if passengers > w:\n                return False\n        return True\n\n    count = 0\n    for x in range(w + 1):\n        if is_valid(x):\n            count += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 124
    },
    {
        "number": 4157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    sequence = list(map(int, stdin.split('\\n')[1].split()))\n\n    def is_valid(sequence):\n        for i in range(1, len(sequence)):\n            if sequence[i] == sequence[i - 1] * 2 or sequence[i] == sequence[i - 1] // 3:\n                continue\n            else:\n                return False\n        return True\n\n    def helper(sequence, start):\n        if start == len(sequence):\n            return []\n        for i in range(start, len(sequence)):\n            if sequence[start] == sequence[i] * 2 or sequence[start] == sequence[i] // 3:\n                continue\n            else:\n                sequence[start], sequence[i] = sequence[i], sequence[start]\n                if is_valid(sequence):\n                    return sequence\n                else:\n                    sequence[start], sequence[i] = sequence[i], sequence[start]\n        return None\n\n    result = helper(sequence, 0)\n    if result:\n        return ' '.join(map(str, result))\n    else:\n        return \"No solution exists\"",
        "test": "",
        "num_ids": 285
    },
    {
        "number": 4158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_power_of_two(n):\n        return (n != 0) and (n & (n - 1) == 0)\n\n    def find_max_subset(points):\n        max_subset = []\n        for i in range(len(points)):\n            max_subset.append(points[i])\n            for j in range(i + 1, len(points)):\n                if is_power_of_two(abs(points[i] - points[j])):\n                    max_subset.append(points[j])\n                else:\n                    continue\n        return max_subset\n\n    n = int(stdin.split('\\n')[0])\n    points = list(map(int, stdin.split('\\n')[1].split()))\n\n    max_subset = find_max_subset(points)\n    max_subset = list(set(max_subset))\n    max_subset.sort()\n\n    output = str(len(max_subset)) + '\\n' + ' '.join(map(str, max_subset))\n    return output",
        "test": "",
        "num_ids": 253
    },
    {
        "number": 4159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    for _ in range(K):\n        if A > 0:\n            A -= 1\n        elif B > 0:\n            A += 1\n            B -= 1\n    return f\"{A} {B}\"",
        "test": "",
        "num_ids": 72
    },
    {
        "number": 4160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    balance = 100\n    years = 0\n    while balance < X:\n        balance = int(balance * 1.01)\n        years += 1\n    return str(years)",
        "test": "",
        "num_ids": 60
    },
    {
        "number": 4161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    total = 0\n    for a in range(1, K + 1):\n        for b in range(1, K + 1):\n            for c in range(1, K + 1):\n                total += math.gcd(a, math.gcd(b, c))\n    return str(total)",
        "test": "",
        "num_ids": 87
    },
    {
        "number": 4162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = list(map(int, stdin.split()))\n    max_f = 0\n\n    for m in range(2, 10**5):\n        f_m = sum(m % a_i for a_i in a)\n        if f_m > max_f:\n            max_f = f_m\n\n    return str(max_f)",
        "test": "",
        "num_ids": 93
    },
    {
        "number": 4163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    dice_rolls = [list(map(int, line.split())) for line in lines[1:]]\n\n    for i in range(N - 2):\n        if dice_rolls[i][0] == dice_rolls[i][1] and \\\n           dice_rolls[i + 1][0] == dice_rolls[i + 1][1] and \\\n           dice_rolls[i + 2][0] == dice_rolls[i + 2][1]:\n            return \"Yes\"\n    return \"No\"",
        "test": "",
        "num_ids": 153
    },
    {
        "number": 4164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip())\n    area_r = 3.14159 * r * r\n    area_1 = 3.14159\n    result = area_r // area_1\n    return str(result)",
        "test": "",
        "num_ids": 62
    },
    {
        "number": 4165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *L = list(map(int, stdin.split()))\n    L.sort()\n    if L[-1] < sum(L[:-1]):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 57
    },
    {
        "number": 4166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    digits = []\n    for _ in range(M):\n        s, c = map(int, input().split())\n        digits.append((s, c))\n\n    def is_valid(num: int) -> bool:\n        for s, c in digits:\n            if int(str(num)[s - 1]) != c:\n                return False\n        return True\n\n    def next_candidate(num: int) -> int:\n        str_num = str(num)\n        for i in range(len(str_num) - 1, -1, -1):\n            if str_num[i] != '9':\n                return int(str_num[:i] + str(int(str_num[i]) + 1) + '0' * (N - len(str_num) + i))\n        return int('1' + '0' * (N - 1))\n\n    candidate = 0\n    while True:\n        if len(str(candidate)) == N and is_valid(candidate):\n            return str(candidate)\n        candidate = next_candidate(candidate)\n        if candidate > 10 ** N:\n            return '-1'",
        "test": "",
        "num_ids": 301
    },
    {
        "number": 4167,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            for c in range(1, N + 1):\n                if (a + b) % K == 0 and (b + c) % K == 0 and (c + a) % K == 0:\n                    count += 1\n    return str(count)",
        "test": "",
        "num_ids": 114
    },
    {
        "number": 4168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    result = \"\"\n    while n != 0:\n        if n % 2 == 0:\n            result = \"0\" + result\n        else:\n            result = \"1\" + result\n        n //= -2\n    return result",
        "test": "",
        "num_ids": 81
    },
    {
        "number": 4169,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    A = []\n    B = []\n    for _ in range(N):\n        a, b = map(int, stdin.readline().split())\n        A.append(a)\n        B.append(b)\n\n    A.sort(reverse=True)\n    B.sort(reverse=True)\n\n    total_money = 0\n    for i in range(N):\n        if M <= 0:\n            break\n        if B[i] <= 0:\n            continue\n        cans_to_buy = min(M, B[i])\n        total_money += cans_to_buy * A[i]\n        M -= cans_to_buy\n\n    return str(total_money)",
        "test": "",
        "num_ids": 196
    },
    {
        "number": 4170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, H = map(int, stdin.split())\n    H = list(map(int, stdin.split()))\n    count = 0\n    max_count = 0\n\n    for i in range(N):\n        if i == 0 or H[i] <= H[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n\n    max_count = max(max_count, count)\n\n    return str(max_count - 1)",
        "test": "",
        "num_ids": 133
    },
    {
        "number": 4171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    a.sort()\n\n    count = 0\n    for i in range(n - k):\n        if a[i] == a[i + k - 1]:\n            count += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 96
    },
    {
        "number": 4172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    a.sort()\n\n    min_moves = float('inf')\n\n    for i in range(n - k + 1):\n        min_moves = min(min_moves, a[i + k - 1] - a[i])\n\n    return str(min_moves)",
        "test": "",
        "num_ids": 104
    },
    {
        "number": 4173,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def min_cost(n: int, a: int, b: int) -> int:\n        if a > b:\n            a, b = b, a\n        if n == 0:\n            return 0\n        if n <= a:\n            return n * a\n        else:\n            return min_cost(n, a, b) + (n // a) * b + min_cost(n % a, a, b)\n\n    queries = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    result = [min_cost(n, a, b) for n, a, b in queries]\n    return '\\n'.join(map(str, result))",
        "test": "",
        "num_ids": 170
    },
    {
        "number": 4174,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    L = list(map(int, stdin.split()))\n    count = 0\n    for i in range(N + 1):\n        if i == 0:\n            continue\n        elif L[i - 1] + L[i] <= X:\n            count += 1\n        else:\n            break\n    return str(count)",
        "test": "",
        "num_ids": 98
    },
    {
        "number": 4175,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    words = stdin.split('\\n')[1:]\n    used_words = set()\n\n    for i in range(N):\n        if words[i] in used_words:\n            return \"No\"\n        used_words.add(words[i])\n        if i > 0 and words[i][0] != words[i - 1][-1]:\n            return \"No\"\n\n    return \"Yes\"",
        "test": "",
        "num_ids": 115
    },
    {
        "number": 4176,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(A + B - 1, A * B))",
        "test": "",
        "num_ids": 34
    },
    {
        "number": 4177,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'x' * len(stdin)",
        "test": "",
        "num_ids": 13
    },
    {
        "number": 4178,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, H = map(int, stdin.split())\n    heights = list(map(int, input().split()))\n\n    for i in range(1, N - 1):\n        if heights[i] < heights[i - 1] and heights[i] < heights[i + 1]:\n            return \"No\"\n\n    return \"Yes\"\n",
        "test": "",
        "num_ids": 92
    },
    {
        "number": 4179,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M, C = map(int, lines[0].split())\n    B = list(map(int, lines[1].split()))\n    A = [list(map(int, lines[i].split())) for i in range(2, N + 2)]\n\n    count = 0\n    for i in range(N):\n        total = sum([A[i][j] * B[j] for j in range(M)]) + C\n        if total > 0:\n            count += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 140
    },
    {
        "number": 4180,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    change = N % 1000\n    return str(change)",
        "test": "",
        "num_ids": 30
    },
    {
        "number": 4181,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    A.insert(0, 0)\n    B.append(0)\n    total = 0\n\n    for i in range(N + 1):\n        total += min(A[i], B[i])\n        A[i + 1] -= min(A[i], B[i])\n\n    return str(total)",
        "test": "",
        "num_ids": 98
    },
    {
        "number": 4182,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.readline().split())\n    x_coordinates = list(map(int, stdin.readline().split()))\n    y_coordinates = list(map(int, stdin.readline().split()))\n\n    x_min = min(x_coordinates)\n    x_max = max(x_coordinates)\n    y_min = min(y_coordinates)\n    y_max = max(y_coordinates)\n\n    if X < x_min and y_max < X:\n        return \"No War\"\n    elif Y < y_min and x_max < Y:\n        return \"No War\"\n    else:\n        return \"War\"",
        "test": "",
        "num_ids": 174
    },
    {
        "number": 4183,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *T = list(map(int, stdin.split()))\n    lcm = T[0]\n    for i in range(1, N):\n        lcm = (lcm * T[i]) // gcd(lcm, T[i])\n    return str(lcm)\n\ndef",
        "test": "",
        "num_ids": 74
    },
    {
        "number": 4184,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, weights = int(stdin.split(\"\\n\")[0]), list(map(int, stdin.split(\"\\n\")[1].split()))\n    weights.sort(reverse=True)\n    min_diff = float('inf')\n\n    for T in range(1, N):\n        S_1 = sum(weights[:T])\n        S_2 = sum(weights[T:])\n        diff = abs(S_1 - S_2)\n        min_diff = min(min_diff, diff)\n\n    return str(min_diff)",
        "test": "",
        "num_ids": 134
    },
    {
        "number": 4185,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    matrix = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\n    def is_good_matrix() -> bool:\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] != (i * m + j + 1):\n                    return False\n        return True\n\n    def count_cyclic_shifts() -> int:\n        shifts = 0\n        for j in range(m):\n            for i in range(n):\n                if matrix[i][j] != ((i - shifts) * m + j + 1):\n                    shifts += 1\n                    break\n        return shifts\n\n    if is_good_matrix():\n        return \"0\"\n\n    cyclic_shifts = count_cyclic_shifts()\n    min_moves = n * m - cyclic_shifts\n\n    return str(min_moves)",
        "test": "",
        "num_ids": 246
    },
    {
        "number": 4186,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a.sort()\n    teams = []\n    for i in range(0, n, 2):\n        teams.append((a[i], a[i + 1]))\n    return sum(abs(a - b) for a, b in teams)",
        "test": "",
        "num_ids": 76
    },
    {
        "number": 4187,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, schedule = map(int, stdin.split())\n    schedule = list(map(int, schedule))\n    max_rest = 0\n    current_rest = 0\n\n    for i in range(n):\n        if schedule[i] == 1:\n            current_rest += 1\n        else:\n            max_rest = max(max_rest, current_rest)\n            current_rest = 0\n\n    max_rest = max(max_rest, current_rest)\n\n    return str(max_rest)",
        "test": "",
        "num_ids": 128
    },
    {
        "number": 4188,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    facts = [\n        (\"Mountain\", \"Everest\", 8848),\n        (\"Board game\", \"chapaev\", 958),\n        (\"Maths competition\", \"\", 12766),\n        (\"River\", \"Nile\", 6695),\n        (\"River\", \"Amazon\", 1100),\n        (\"Waterfall\", \"Angel Falls\", 807),\n        (\"Hotel\", \"Everest View\", 31962),\n        (\"Element\", \"Uranium\", 146),\n        (\"Village\", \"Oymyakon\", -68),\n        (\"Snake\", \"Medusa\", 25),\n        (\"Cat\", \"Colonel Meow\", 134),\n        (\"Animal\", \"Sea otter\", 10000),\n        (\"State\", \"Alaska\", 663268),\n        (\"State\", \"Alaska\", 154103),\n        (\"Lake\", \"Baikal\", 1642),\n        (\"Flag\", \"Turkmenistan\", 106)\n    ]\n\n    n = int(stdin)\n    result = 0\n\n    for i in range(len(facts)):\n        if i + 1 == n:\n            result += facts[i][2]\n\n    return str(result)",
        "test": "",
        "num_ids": 334
    },
    {
        "number": 4189,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    num_cheeses = int(lines[0])\n    cheeses = lines[1:]\n    types = {}\n    for cheese in cheeses:\n        name, cheese_type = cheese.split()\n        if cheese_type not in types:\n            types[cheese_type] = [name]\n        else:\n            types[cheese_type].append(name)\n    max_cheeses = 0\n    for key in types:\n        max_cheeses = max(max_cheeses, len(types[key]))\n    return str(max_cheeses)",
        "test": "",
        "num_ids": 149
    },
    {
        "number": 4190,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    b.sort(key=lambda x: (x, -a[x]))\n    c = [(a[i] + b[i]) % n for i in range(n)]\n\n    return ' '.join(map(str, c))",
        "test": "",
        "num_ids": 112
    },
    {
        "number": 4191,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    output = 0\n    for num in input_list:\n        output ^= int(num)\n    return str(output)",
        "test": "",
        "num_ids": 45
    },
    {
        "number": 4192,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    time_taken = D / S\n    if time_taken <= T:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 54
    },
    {
        "number": 4193,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    input_lines = stdin.split('\\n')\n    A = [list(map(int, input_lines[i].split())) for i in range(3)]\n    N = int(input_lines[3])\n    b = list(map(int, input_lines[4:]))\n\n    # Check for bingo\n    for i in range(3):\n        for j in range(3):\n            if A[i][j] in b:\n                # Check row\n                if all(A[i][k] in b for k in range(3)):\n                    return 'Yes'\n                # Check column\n                if all(A[k][j] in b for k in range(3)):\n                    return 'Yes'\n                # Check diagonal\n                if i == j and all(A[k][k] in b for k in range(3)):\n                    return 'Yes'\n                if i == 2 - j and all(A[k][2 - k] in b for k in range(3)):\n                    return 'Yes'\n    return 'No'",
        "test": "",
        "num_ids": 254
    },
    {
        "number": 4194,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    assignments = list(map(int, stdin.split()))\n    assignments.sort(reverse=True)\n\n    days_spent = 0\n    for i in range(M):\n        days_spent += assignments[i]\n        if days_spent > N:\n            return -1\n\n    hangout_days = N - days_spent\n    return hangout_days",
        "test": "",
        "num_ids": 110
    },
    {
        "number": 4195,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    count = 0\n    result = 0\n\n    while count < n:\n        result += 1\n        if d == 0:\n            count += 1\n        elif d == 1:\n            if result % 100 == 0:\n                count += 1\n        elif d == 2:\n            if result % 10000 == 0:\n                count += 1\n\n    return str(result)",
        "test": "",
        "num_ids": 120
    },
    {
        "number": 4196,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    A.sort()\n    max_gcd = gcd(A[0], A[1])\n    for i in range(2, N):\n        max_gcd = gcd(max_gcd, A[i])\n    return str(max_gcd)\n\ndef",
        "test": "",
        "num_ids": 86
    },
    {
        "number": 4197,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    order = [0] * N\n    for i in range(N):\n        order[A[i]-1] = i+1\n    return \" \".join(map(str, order))",
        "test": "",
        "num_ids": 65
    },
    {
        "number": 4198,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_digits = len(str(X // (A + B)))\n    max_integer = int(\"9\" * max_digits)\n    return str(max_integer) if A * max_integer + B * max_digits <= X else \"0\"",
        "test": "",
        "num_ids": 80
    },
    {
        "number": 4199,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, *heights = map(int, stdin.split())\n    count = 0\n    for height in heights:\n        if height >= K:\n            count += 1\n    return str(count)",
        "test": "",
        "num_ids": 54
    },
    {
        "number": 4200,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    votes = list(map(int, stdin.split()))\n    total_votes = sum(votes)\n    votes.sort(reverse=True)\n\n    selected_items = 0\n    for i in range(M):\n        if votes[i] >= total_votes / (4 * M):\n            selected_items += 1\n        else:\n            break\n\n    if selected_items == M:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 130
    },
    {
        "number": 4201,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split()[:3])\n    grid = stdin.split()[3:]\n    black_squares = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                black_squares += 1\n\n    if K > black_squares:\n        return \"0\"\n\n    count = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                count += 1\n                if count == K:\n                    return \"1\"\n            else:\n                count = 0\n\n    return \"0\"",
        "test": "",
        "num_ids": 172
    },
    {
        "number": 4202,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    min_product = float('inf')\n\n    for i in range(L, R):\n        for j in range(i + 1, R + 1):\n            product = (i * j) % 2019\n            min_product = min(min_product, product)\n\n    return str(min_product)",
        "test": "",
        "num_ids": 94
    },
    {
        "number": 4203,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) < 4 or len(s) > 10:\n        return \"WA\"\n    if s[0] != \"A\":\n        return \"WA\"\n    if s[2:].count(\"C\") != 1:\n        return \"WA\"\n    for c in s[1:]:\n        if c == \"A\" or c == \"C\":\n            continue\n        if c.isupper():\n            return \"WA\"\n    return \"AC\"",
        "test": "",
        "num_ids": 122
    },
    {
        "number": 4204,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, K = map(str, stdin.split())\n    K = int(K)\n\n    for _ in range(5 * 10**15):\n        new_S = \"\"\n        for char in S:\n            if char == \"1\":\n                new_S += \"1\"\n            elif char == \"2\":\n                new_S += \"22\"\n            elif char == \"3\":\n                new_S += \"333\"\n            elif char == \"4\":\n                new_S += \"4444\"\n            elif char == \"5\":\n                new_S += \"55555\"\n            elif char == \"6\":\n                new_S += \"666666\"\n            elif char == \"7\":\n                new_S += \"7777777\"\n            elif char == \"8\":\n                new_S += \"88888888\"\n            elif char == \"9\":\n                new_S += \"999999999\"\n        S = new_S\n\n    return S[K - 1]",
        "test": "",
        "num_ids": 262
    },
    {
        "number": 4205,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, p = map(int, stdin.split())\n    p = list(map(int, p.split()))\n\n    # Check if the sequence is already sorted\n    if p == sorted(p):\n        return \"YES\"\n\n    # Check if swapping adjacent elements will sort the sequence\n    for i in range(N - 1):\n        if p[i] > p[i + 1]:\n            p[i], p[i + 1] = p[i + 1], p[i]\n            if p == sorted(p):\n                return \"YES\"\n            p[i], p[i + 1] = p[i + 1], p[i]\n\n    # Check if swapping non-adjacent elements will sort the sequence\n    for i in range(N - 1):\n        for j in range(i + 2, N):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n                if p == sorted(p):\n                    return \"YES\"\n                p[i], p[j] = p[j], p[i]\n\n    return \"NO\"",
        "test": "",
        "num_ids": 278
    },
    {
        "number": 4206,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    cuts = 0\n    count = 0\n\n    for i in range(n - 1):\n        if s[i] == '0' and s[i + 1] == '0':\n            cuts += 1\n        elif (int(s[i]) + int(s[i + 1])) % 3 == 0:\n            count += 1\n        else:\n            cuts += 1\n\n    if s[-1] == '0':\n        count += 1\n    else:\n        cuts += 1\n\n    return str(count + cuts)",
        "test": "",
        "num_ids": 158
    },
    {
        "number": 4207,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n\n    max_zeroes = 0\n    for d in range(-1000000000, 1000000001):\n        zeroes = 0\n        for i in range(n):\n            if d * a[i] + b[i] == 0:\n                zeroes += 1\n        if zeroes > max_zeroes:\n            max_zeroes = zeroes\n\n    return str(max_zeroes)",
        "test": "",
        "num_ids": 170
    },
    {
        "number": 4208,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    left_boots = stdin.readline().strip()\n    right_boots = stdin.readline().strip()\n\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if left_boots[i] == right_boots[j] or left_boots[i] == '?' or right_boots[j] == '?':\n                pairs.append((i + 1, j + 1))\n\n    output = f\"{len(pairs)}\\n\"\n    for pair in pairs:\n        output += f\"{pair[0]} {pair[1]}\\n\"\n\n    return output",
        "test": "",
        "num_ids": 172
    },
    {
        "number": 4209,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    blocks = []\n    block_sums = {}\n    max_block_sum = float('-inf')\n\n    # Iterate through the array and find blocks\n    for i in range(n):\n        for j in range(i, n):\n            block_sum = sum(a[i:j + 1])\n\n            # Check if the block sum is the same as the maximum block sum found so far\n            if block_sum == max_block_sum:\n                blocks.append((i, j))\n            elif block_sum > max_block_sum:\n                max_block_sum = block_sum\n                blocks = [(i, j)]\n\n            # Add the block sum to the block_sums dictionary\n            if block_sum not in block_sums:\n                block_sums[block_sum] = [(i, j)]\n            else:\n                block_sums[block_sum].append((i, j))\n\n    # Remove blocks that intersect with each other\n    for block_sum in block_sums:\n        for i in range(len(block_sums[block_sum]) - 1, -1, -1):\n            for j in range(i - 1, -1, -1):\n                if block_sums[block_sum][i][0] <= block_sums[block_sum][j][1]:\n                    block_sums[block_sum].pop(i)\n                    break\n\n    # Find the maximum number of blocks\n    max_blocks = 0\n    for block_sum in block_sums:\n        max_blocks = max(max_blocks, len(block_sums[block_sum]))\n\n    # Filter blocks that are not part of the maximum number of blocks\n    filtered_blocks = []\n    for block in blocks:\n        if block in block_sums[max_block_sum]:\n            filtered_blocks.append(block)\n\n    # Output the result\n    output = [str(max_blocks)]\n    for block in filtered_blocks:\n        output.append(f\"{block[0]} {block[1]}\")\n\n    return \"\\n\".join(output)",
        "test": "",
        "num_ids": 550
    },
    {
        "number": 4210,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, input().split()))\n    count = 0\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                concat = int(str(a[i]) + str(a[j]))\n                if concat % k == 0:\n                    count += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 108
    },
    {
        "number": 4211,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, B = map(int, stdin.split())\n    A = [max(0, B[i] - B[i + 1]) for i in range(N - 1)]\n    A.append(B[-1])\n    return str(sum(A))",
        "test": "",
        "num_ids": 66
    },
    {
        "number": 4212,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split()[:3])\n    quadruples = [list(map(int, stdin.split()))[3 * i:3 * i + 4] for i in range(1, Q + 1)]\n\n    def is_valid(sequence: List[int]) -> bool:\n        for i in range(1, len(sequence)):\n            if sequence[i] < sequence[i - 1]:\n                return False\n        return True\n\n    def score(sequence: List[int]) -> int:\n        total_score = 0\n        for a, b, c, d in quadruples:\n            if sequence[b - 1] - sequence[a - 1] == c:\n                total_score += d\n        return total_score\n\n    max_score = 0\n    for sequence in itertools.permutations(range(1, M + 1), N):\n        if is_valid(sequence):\n            max_score = max(max_score, score(sequence))\n\n    return str(max_score)",
        "test": "",
        "num_ids": 255
    },
    {
        "number": 4213,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n    max_diff = 0\n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                diff = abs(A[i] - A[j])\n                if diff > max_diff:\n                    max_diff = diff\n    return str(max_diff)",
        "test": "",
        "num_ids": 111
    },
    {
        "number": 4214,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def distance(x1, y1, x2, y2):\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n    def permutations(arr):\n        if len(arr) == 1:\n            return [arr]\n        result = []\n        for i in range(len(arr)):\n            for perm in permutations(arr[:i] + arr[i+1:]):\n                result.append([arr[i]] + perm)\n        return result\n\n    N = int(stdin.readline())\n    towns = []\n    for _ in range(N):\n        x, y = map(int, stdin.readline().split())\n        towns.append((x, y))\n\n    total_length = 0\n    for perm in permutations(towns):\n        path_length = 0\n        for i in range(N - 1):\n            path_length += distance(*perm[i], *perm[i+1])\n        total_length += path_length\n\n    return str(total_length / (N * factorial(N-1)))\n\ndef",
        "test": "",
        "num_ids": 273
    },
    {
        "number": 4215,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(A, B))",
        "test": "",
        "num_ids": 27
    },
    {
        "number": 4216,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    min_f = float('inf')\n    min_a = 0\n    min_b = 0\n\n    for a in range(1, int(n ** 0.5) + 1):\n        if n % a == 0:\n            b = n // a\n            f = max(len(str(a)), len(str(b)))\n\n            if f < min_f:\n                min_f = f\n                min_a = a\n                min_b = b\n\n            if a != b:\n                f = max(len(str(a)), len(str(b)))\n\n                if f < min_f:\n                    min_f = f\n                    min_a = a\n                    min_b = b\n\n    return f\"{min_f}\\nF({min_a},{min_b}) has a minimum value of {min_f}.\"",
        "test": "",
        "num_ids": 220
    },
    {
        "number": 4217,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    foods = [set() for _ in range(M)]\n\n    for i in range(N):\n        K_i, *A_i = map(int, stdin.readline().split())\n        for j in range(K_i):\n            foods[A_i[j] - 1].add(i)\n\n    liked_by_all = set(range(N))\n    for food in foods:\n        liked_by_all.intersection_update(food)\n\n    return str(len(liked_by_all))",
        "test": "",
        "num_ids": 151
    },
    {
        "number": 4218,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    odd_numbers = [i for i in range(1, n+1) if i % 2 != 0]\n    probability = len(odd_numbers) / n\n    return f\"{probability:.10f}\"",
        "test": "",
        "num_ids": 66
    },
    {
        "number": 4219,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_consistent(honest_people, testimony):\n        if testimony[1] == 1:\n            return testimony[0] in honest_people\n        else:\n            return testimony[0] not in honest_people\n\n    def find_max_honest_people(N, testimonies):\n        max_honest_people = 0\n        for i in range(1, N + 1):\n            for subset in itertools.combinations(range(1, N + 1), i):\n                if all(is_consistent(subset, testimony) for testimony in testimonies[i]):\n                    max_honest_people = max(max_honest_people, len(subset))\n        return max_honest_people\n\n    stdin_list = stdin.split('\\n')\n    N = int(stdin_list[0])\n    A = list(map(int, stdin_list[1:N + 1]))\n    testimonies = [[] for _ in range(N + 1)]\n\n    for i in range(1, N + 1):\n        for j in range(A[i - 1]):\n            x, y = list(map(int, stdin_list[N + 1 + j].split()))\n            testimonies[i].append((x, y))\n\n    max_honest_people = find_max_honest_people(N, testimonies)\n    return str(max_honest_people)",
        "test": "",
        "num_ids": 358
    },
    {
        "number": 4220,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split('\\n')\n    K = int(K)\n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + \"...\"",
        "test": "",
        "num_ids": 50
    },
    {
        "number": 4221,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[-1] == 's':\n        return stdin + 'es'\n    else:\n        return stdin + 's'",
        "test": "",
        "num_ids": 35
    },
    {
        "number": 4222,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    snacks = [set() for _ in range(N)]\n    for i in range(K):\n        d, *A = map(int, input().split())\n        for a in A:\n            snacks[a - 1].add(i)\n    victims = sum(1 for s in snacks if not s)\n    return str(victims)",
        "test": "",
        "num_ids": 102
    },
    {
        "number": 4223,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split('\\n')\n    N = int(N)\n    S = list(S)\n    i = 0\n    while i < len(S) - 1:\n        if S[i] == S[i + 1]:\n            S.pop(i)\n            S.pop(i)\n            if i > 0:\n                i -= 1\n        else:\n            i += 1\n    return str(len(S))",
        "test": "",
        "num_ids": 113
    },
    {
        "number": 4224,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, a = map(int, stdin.split())\n    a = list(map(int, a.split()))\n    count = 0\n\n    for i in range(N):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n            count += 1\n\n    for i in range(N):\n        if a[i] % 3 == 0:\n            a[i] //= 3\n            count += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 124
    },
    {
        "number": 4225,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    total_cards = A + B + C\n    max_sum = 0\n\n    if K == total_cards:\n        max_sum = A + B + C\n    elif K > total_cards:\n        max_sum = -1\n    else:\n        max_sum = A + min(B, K - A) + min(C, K - A - B)\n\n    return str(max_sum)",
        "test": "",
        "num_ids": 118
    },
    {
        "number": 4226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    for cranes in range(X + 1):\n        turtles = X - cranes\n        if 2 * cranes + 4 * turtles == Y:\n            return \"Yes\"\n    return \"No\"",
        "test": "",
        "num_ids": 72
    },
    {
        "number": 4227,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(graph, start, visited):\n        if visited[start]:\n            return False\n        visited[start] = True\n        if all(visited):\n            return True\n        for neighbor in graph[start]:\n            if dfs(graph, neighbor, visited):\n                return True\n        visited[start] = False\n        return False\n\n    N, M = map(int, stdin.readline().split())\n    graph = [[] for _ in range(N + 1)]\n    for _ in range(M):\n        a, b = map(int, stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n\n    visited = [False] * (N + 1)\n    return str(dfs(graph, 1, visited))",
        "test": "",
        "num_ids": 192
    },
    {
        "number": 4228,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = [L + i - 1 for i in range(1, N + 1)]\n    apples.sort()\n    if apples[0] < 0:\n        return str(sum(apples[1:]))\n    else:\n        return str(sum(apples))",
        "test": "",
        "num_ids": 86
    },
    {
        "number": 4229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    fizzbuzz_sequence = []\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            fizzbuzz_sequence.append(\"FizzBuzz\")\n        elif i % 3 == 0:\n            fizzbuzz_sequence.append(\"Fizz\")\n        elif i % 5 == 0:\n            fizzbuzz_sequence.append(\"Buzz\")\n        else:\n            fizzbuzz_sequence.append(str(i))\n\n    numbers = [int(x) for x in fizzbuzz_sequence if x.isdigit()]\n    return str(sum(numbers))",
        "test": "",
        "num_ids": 175
    },
    {
        "number": 4230,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:]))\n    p.sort()\n    nearest = None\n    for i in range(len(p) - 1):\n        if X < p[i]:\n            nearest = min(nearest, p[i], key=lambda x: abs(x - X)) if nearest else p[i]\n            break\n        elif X > p[i]:\n            nearest = min(nearest, p[i + 1], key=lambda x: abs(x - X)) if nearest else p[i + 1]\n            break\n    return str(nearest)",
        "test": "",
        "num_ids": 166
    },
    {
        "number": 4231,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, h, w = map(int, stdin.split())\n    total_cells = H * W\n    painted_cells = h * W + w * H - h * w\n    remaining_cells = total_cells - painted_cells\n    return str(remaining_cells)",
        "test": "",
        "num_ids": 75
    },
    {
        "number": 4232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    sequence = list(map(int, stdin.split()[2:]))\n\n    sequence.sort()\n\n    if k == 0:\n        return 1\n    elif k == n:\n        return sequence[-1] + 1\n    else:\n        for i in range(n - k):\n            if sequence[i] < sequence[i + k - 1]:\n                return sequence[i + k - 1] + 1\n        return \"-1\"",
        "test": "",
        "num_ids": 131
    },
    {
        "number": 4233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(x, y, size):\n        if 1 <= x <= n - 2 and 1 <= y <= m - 2:\n            for i in range(x - 1, x + 2):\n                for j in range(y - 1, y + 2):\n                    if grid[i][j] == '*' and (i != x or j != y) and (i - x) ** 2 + (j - y) ** 2 <= size ** 2:\n                        return False\n            return True\n        return False\n\n    def find_stars(x, y, size):\n        if is_valid(x, y, size):\n            stars.append((x, y, size))\n            for i in range(x - size, x + size + 1):\n                for j in range(y - size, y + size + 1):\n                    if 1 <= i <= n - 2 and 1 <= j <= m - 2 and grid[i][j] == '.':\n                        grid[i][j] = 'X'\n            return True\n        return False\n\n    n, m = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(n)]\n\n    stars = []\n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            if grid[i][j] == '*':\n                for size in range(1, min(n - i, m - j) + 1):\n                    if find_stars(i, j, size):\n                        break\n\n    if not stars:\n        return \"-1\"\n\n    output = [str(len(stars))] + [\" \".join(map(str, star)) for star in stars]\n    return \"\\n\".join(output)",
        "test": "",
        "num_ids": 444
    },
    {
        "number": 4234,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    if n == 0:\n        return \"0\\n\"\n\n    if n % 2 == 1:\n        n -= 1\n        s = s[:n]\n\n    i = 1\n    while i < n:\n        if s[i] == s[i - 1]:\n            s = s[:i - 1] + s[i:]\n            n -= 1\n        else:\n            i += 2\n\n    return f\"{n - len(s)}\\n{s}\"\n",
        "test": "",
        "num_ids": 149
    },
    {
        "number": 4235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    edges = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n\n    def is_directable(edges):\n        graph = [[] for _ in range(n)]\n        for u, v in edges:\n            graph[u - 1].append(v - 1)\n            graph[v - 1].append(u - 1)\n\n        visited = [False] * n\n        path = [False] * n\n\n        def dfs(u):\n            visited[u] = True\n            path[u] = True\n            for v in graph[u]:\n                if not visited[v]:\n                    if dfs(v):\n                        return True\n                elif path[v]:\n                    return True\n            path[u] = False\n            return False\n\n        for u in range(n):\n            if not visited[u]:\n                if dfs(u):\n                    return False\n        return True\n\n    if is_directable(edges):\n        return \"YES\\n\" + \"\".join(str(int(u > v)) for u, v in edges)\n    else:\n        return \"NO\"",
        "test": "",
        "num_ids": 295
    },
    {
        "number": 4236,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = [list(map(int, input().split())) for _ in range(n)]\n    points = set(range(1, m + 1))\n\n    for l, r in segments:\n        points -= set(range(l, r + 1))\n\n    if not points:\n        return \"0\"\n\n    return f\"{len(points)}\\n{' '.join(map(str, sorted(points)))}\"",
        "test": "",
        "num_ids": 117
    },
    {
        "number": 4237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for i in range(A, B + 1):\n        if i % C != 0 and i % D != 0:\n            count += 1\n    return str(count)",
        "test": "",
        "num_ids": 70
    },
    {
        "number": 4238,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(n))\n    if digits_sum % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 58
    },
    {
        "number": 4239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    while n > 0:\n        if n % 9 == 0:\n            n -= 81\n        elif n % 6 == 0:\n            n -= 36\n        else:\n            n -= 1\n        count += 1\n    return str(count)",
        "test": "",
        "num_ids": 85
    },
    {
        "number": 4240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if len(S) != len(T):\n        return \"No\"\n    double_S = S + S\n    if T in double_S:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 64
    },
    {
        "number": 4241,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n, m = len(s), len(t)\n    if m > n:\n        return -1\n    for i in range(n - m + 1):\n        if s[i:i + m] == t:\n            return i\n    return -1",
        "test": "",
        "num_ids": 77
    },
    {
        "number": 4242,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    divisors = []\n    \n    for i in range(1, min(A, B) + 1):\n        if A % i == 0 and B % i == 0:\n            divisors.append(i)\n    \n    return str(divisors[-K])",
        "test": "",
        "num_ids": 84
    },
    {
        "number": 4243,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    max_happiness = 0\n\n    for i in range(x // 500):\n        happiness = i * 1000 + (x - i * 500) // 5 * 5\n        if happiness > max_happiness:\n            max_happiness = happiness\n\n    return str(max_happiness)",
        "test": "",
        "num_ids": 95
    },
    {
        "number": 4244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    X = sorted(list(map(int, X.split())))\n    P = (X[N // 2] + X[(N - 1) // 2]) // 2\n    stamina = sum([(x - P) ** 2 for x in X])\n    return str(stamina)",
        "test": "",
        "num_ids": 89
    },
    {
        "number": 4245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    count = 0\n    while B > 0:\n        B -= A\n        count += 1\n    return str(count)",
        "test": "",
        "num_ids": 48
    },
    {
        "number": 4246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)",
        "test": "",
        "num_ids": 52
    },
    {
        "number": 4247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    p = list(map(int, p.split()))\n    count = 0\n    for i in range(1, n - 1):\n        if p[i] < p[i - 1] and p[i] < p[i + 1]:\n            count += 1\n    return str(count)",
        "test": "",
        "num_ids": 91
    },
    {
        "number": 4248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for _ in range(n):\n        x, y = map(float, stdin.readline().split())\n        points.append((x, y))\n\n    def angle(a, b, c):\n        x1, y1 = a\n        x2, y2 = b\n        x3, y3 = c\n        return math.atan2(y2 - y1, x2 - x1) - math.atan2(y3 - y1, x3 - x1)\n\n    def find_theta(points):\n        angles = []\n        for i in range(len(points)):\n            a, b, c = points[i - 1], points[i], points[(i + 1) % len(points)]\n            angles.append(angle(a, b, c))\n        return sum(angles) / len(angles)\n\n    theta = find_theta(points)\n    return f\"{theta:.3f}\"",
        "test": "",
        "num_ids": 239
    },
    {
        "number": 4249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    a.sort(reverse=True)\n    total_caffeine = sum(a)\n\n    if total_caffeine < m:\n        return -1\n\n    days = 0\n    daily_caffeine = 0\n    for i in range(n):\n        if daily_caffeine + a[i] > m:\n            days += 1\n            daily_caffeine = a[i]\n        else:\n            daily_caffeine += a[i]\n\n    return days + 1",
        "test": "",
        "num_ids": 161
    },
    {
        "number": 4250,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = list(map(int, stdin.readline().split()))\n\n    from collections import Counter\n    from itertools import combinations\n\n    s_counter = Counter(s)\n    t = []\n\n    for i in range(k, 0, -1):\n        for combination in combinations(s_counter.keys(), i):\n            if sum(s_counter[elem] for elem in combination) >= n - len(t) * i:\n                t = list(combination)\n                break\n        if t:\n            break\n\n    return \" \".join(map(str, t))",
        "test": "",
        "num_ids": 161
    },
    {
        "number": 4251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\n    def is_k_acceptable(k: int) -> bool:\n        for i in range(n * m - 1):\n            if abs(a[i // m][i % m] - a[i // m][(i + 1) % m]) < k:\n                return False\n            if abs(a[i // m][i % m] - a[(i + 1) // m][i % m]) < k:\n                return False\n        return True\n\n    left, right = 0, 10 ** 9\n    while left < right:\n        mid = (left + right + 1) // 2\n        if is_k_acceptable(mid):\n            left = mid\n        else:\n            right = mid - 1\n\n    return str(left)",
        "test": "",
        "num_ids": 231
    },
    {
        "number": 4252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, file_name = stdin.split(\"\\n\")\n    n = int(n)\n\n    if \"xxx\" not in file_name:\n        return \"0\"\n\n    count = 0\n    for i in range(n - 2):\n        if file_name[i:i + 3] == \"xxx\":\n            count += 1\n\n    return str(count)\n",
        "test": "",
        "num_ids": 95
    },
    {
        "number": 4253,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r ** 2\n    return str(area)",
        "test": "",
        "num_ids": 28
    },
    {
        "number": 4254,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if W >= S:\n        return \"unsafe\"\n    else:\n        return \"safe\"",
        "test": "",
        "num_ids": 40
    },
    {
        "number": 4255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    ab, bc, ca = map(int, stdin.split())\n    area = 0.5 * ab * bc\n    return str(int(area))",
        "test": "",
        "num_ids": 41
    },
    {
        "number": 4256,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    times = B // A\n    return str(min(times, C))",
        "test": "",
        "num_ids": 36
    },
    {
        "number": 4257,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)",
        "test": "",
        "num_ids": 25
    },
    {
        "number": 4258,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    total_biscuits = 0\n    for i in range(1, T + 1):\n        if i % A == 0:\n            total_biscuits += B\n    total_biscuits += B * (T // A)\n    return str(total_biscuits)",
        "test": "",
        "num_ids": 87
    },
    {
        "number": 4259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n\n    for i in range(A, B + 1):\n        if i % K == 0:\n            return \"OK\"\n\n    return \"NG\"",
        "test": "",
        "num_ids": 56
    },
    {
        "number": 4260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    hours_in_world_a = T * X\n    return f\"{hours_in_world_a:.9f}\"",
        "test": "",
        "num_ids": 48
    },
    {
        "number": 4261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    transferred_water = min(B - A, C)\n    remaining_water = C - transferred_water\n    return str(remaining_water)",
        "test": "",
        "num_ids": 53
    },
    {
        "number": 4262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def factorial(n: int) -> int:\n        if n == 0 or n == 1:\n            return 1\n        return n * factorial(n - 1)\n\n    def lexicographic_rank(permutation: list) -> int:\n        n = len(permutation)\n        rank = 0\n        for i in range(n):\n            smaller = 0\n            for j in range(i):\n                if permutation[j] < permutation[i]:\n                    smaller += 1\n            rank += smaller * factorial(n - i - 1)\n        return rank + 1\n\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    P = list(map(int, lines[1].split()))\n    Q = list(map(int, lines[2].split()))\n\n    a = lexicographic_rank(P)\n    b = lexicographic_rank(Q)\n\n    return abs(a - b)",
        "test": "",
        "num_ids": 237
    },
    {
        "number": 4263,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    max_length = 0\n    current_length = 0\n    for char in s:\n        if char in \"ACGT\":\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 0\n    return str(max_length)",
        "test": "",
        "num_ids": 87
    },
    {
        "number": 4264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if len(str(i)) % 2 != 0:\n            count += 1\n    return str(count)",
        "test": "",
        "num_ids": 59
    },
    {
        "number": 4265,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    count = 0\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            count += 1\n    return count",
        "test": "",
        "num_ids": 53
    },
    {
        "number": 4266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    black_stones = [X - K + i + 1 for i in range(K)]\n    black_stones += [X + i + 1 for i in range(K)]\n    black_stones = sorted(set(black_stones))\n    return ' '.join(map(str, black_stones))",
        "test": "",
        "num_ids": 92
    },
    {
        "number": 4267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 35
    },
    {
        "number": 4268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_integer(num: float) -> bool:\n        return int(num) == num\n\n    def distance(p1: List[int], p2: List[int]) -> float:\n        return math.sqrt(sum([(p1[i] - p2[i]) ** 2 for i in range(len(p1))]))\n\n    N, D = map(int, stdin.readline().split())\n    points = [list(map(int, stdin.readline().split())) for _ in range(N)]\n\n    count = 0\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            if is_integer(distance(points[i], points[j])):\n                count += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 192
    },
    {
        "number": 4269,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return \"Bad\"\n    return \"Good\"\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "",
        "num_ids": 66
    },
    {
        "number": 4270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *v = list(map(int, stdin.split()))\n    v.sort()\n    max_value = (v[0] + v[1]) / 2\n    for i in range(2, N):\n        max_value = (max_value + v[i]) / 2\n    return f\"{max_value:.5f}\"",
        "test": "",
        "num_ids": 87
    },
    {
        "number": 4271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(lambda x: list(map(int, x.split())), stdin.split('\\n')[1:])\n    satisfaction_points = 0\n    for i in range(N):\n        satisfaction_points += B[A[i] - 1]\n        if i < N - 1:\n            satisfaction_points += C[A[i] - 1]\n    return str(satisfaction_points)",
        "test": "",
        "num_ids": 107
    },
    {
        "number": 4272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split('\\n')\n    N = int(N)\n    count = 0\n    for i in range(N - 2):\n        if S[i:i+3] == 'ABC':\n            count += 1\n    return str(count)",
        "test": "",
        "num_ids": 68
    },
    {
        "number": 4273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(name: str) -> bool:\n        return name[0] in {'M', 'A', 'R', 'C', 'H'}\n\n    def count_valid_names(names: list[str]) -> int:\n        return sum(is_valid(name) for name in names)\n\n    def count_ways_to_choose_three(names: list[str]) -> int:\n        valid_names = [name for name in names if is_valid(name)]\n        valid_names.sort()\n        n = len(valid_names)\n        ways = 0\n\n        for i in range(n - 2):\n            if valid_names[i][0] != valid_names[i + 1][0]:\n                ways += 1\n\n        return ways\n\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    names = lines[1:]\n\n    valid_names_count = count_valid_names(names)\n    ways_to_choose_three = count_ways_to_choose_three(names)\n\n    if valid_names_count < 3:\n        return '0'\n    elif valid_names_count == 3:\n        return '1'\n    else:\n        return str(ways_to_choose_three)",
        "test": "",
        "num_ids": 309
    },
    {
        "number": 4274,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if M == N:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 39
    },
    {
        "number": 4275,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) != 6:\n        return \"No\"\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 62
    },
    {
        "number": 4276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_cost(routes: list, time_limit: int) -> int:\n        min_cost = float('inf')\n        for route in routes:\n            cost, time = route\n            if time <= time_limit and cost < min_cost:\n                min_cost = cost\n        return min_cost if min_cost != float('inf') else 'TLE'\n\n    lines = stdin.split('\\n')\n    N, T = map(int, lines[0].split())\n    routes = [list(map(int, line.split())) for line in lines[1:]]\n    return str(find_min_cost(routes, T))",
        "test": "",
        "num_ids": 155
    },
    {
        "number": 4277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    train_cost = N * A\n    total_cost = train_cost + B\n    return str(total_cost)",
        "test": "",
        "num_ids": 47
    },
    {
        "number": 4278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    strings = stdin.split('\\n')[1:]\n    anagrams = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            if sorted(strings[i]) == sorted(strings[j]):\n                anagrams += 1\n\n    return str(anagrams)",
        "test": "",
        "num_ids": 96
    },
    {
        "number": 4279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_sequence_element(n: int) -> int:\n        if n == 1:\n            return 1\n        else:\n            return get_sequence_element(n - 1) + (n - 1)\n\n    def get_sequence_element_at_position(k: int) -> int:\n        i = 1\n        while True:\n            if k <= get_sequence_element(i):\n                return i\n            i += 1\n\n    queries = [int(line) for line in stdin.splitlines()[1:]]\n    result = []\n\n    for k in queries:\n        i = get_sequence_element_at_position(k)\n        result.append(str(i)[k - 1])\n\n    return \"\\n\".join(result)\n",
        "test": "",
        "num_ids": 189
    },
    {
        "number": 4280,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(city, roads):\n        companies = set()\n        for road in roads:\n            if city in road:\n                companies.add(road[0]) if city == road[1] else companies.add(road[1])\n        return len(companies) <= 1\n\n    def dfs(start, visited, roads):\n        if visited[start]:\n            return\n        visited[start] = True\n        for neighbor in graph[start]:\n            if not visited[neighbor]:\n                dfs(neighbor, visited, roads)\n                if not is_good(neighbor, roads):\n                    for road in roads:\n                        if neighbor in road:\n                            road_idx = road[0] if neighbor == road[1] else road[1]\n                            if road_idx not in company_roads[r]:\n                                company_roads[r].append(road_idx)\n                                break\n\n    n, k = map(int, stdin.readline().split())\n    roads = [tuple(map(int, stdin.readline().split())) for _ in range(n - 1)]\n    graph = [[] for _ in range(n + 1)]\n    for i, road in enumerate(roads):\n        graph[road[0]].append(road[1])\n        graph[road[1]].append(road[0])\n\n    r = 1\n    while True:\n        company_roads = [[] for _ in range(r + 1)]\n        visited = [False] * (n + 1)\n        dfs(1, visited, roads)\n        if all(len(roads) <= k for roads in company_roads[1:]):\n            break\n        r += 1\n\n    output = [str(len(roads)) for roads in company_roads[1:]]\n    return f\"{r}\\n{' '.join(output)}\\n\" ",
        "test": "",
        "num_ids": 458
    },
    {
        "number": 4281,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    x = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    min_houses = len(set(x))\n    max_houses = len(set(x)) + len([i for i in range(1, n + 1) if i not in x])\n\n    return f\"{min_houses} {max_houses}\"",
        "test": "",
        "num_ids": 106
    },
    {
        "number": 4282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def restore_order(n: int, remembered: List[Tuple[int, int]]) -> List[int]:\n        adj_list = [[] for _ in range(n)]\n        for i, (a, b) in enumerate(remembered):\n            adj_list[a - 1].append(i + 1)\n            adj_list[b - 1].append(i + 1)\n\n        visited = [False] * n\n        cycle = []\n        for start in range(n):\n            if not visited[start]:\n                current = start\n                while not visited[current]:\n                    visited[current] = True\n                    cycle.append(current + 1)\n                    current = adj_list[current][0]\n                if len(cycle) == n:\n                    return cycle\n                else:\n                    cycle = []\n        return None\n\n    n = int(stdin.readline().strip())\n    remembered = [tuple(map(int, stdin.readline().strip().split())) for _ in range(n)]\n\n    order = restore_order(n, remembered)\n    return \" \".join(map(str, order))",
        "test": "",
        "num_ids": 273
    },
    {
        "number": 4283,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    a.sort()\n\n    max_students = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) <= 5:\n                max_students = max(max_students, j - i + 1)\n\n    return str(max_students)",
        "test": "",
        "num_ids": 127
    },
    {
        "number": 4284,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def can_complete_game(k, n, a, b):\n        charge = k\n        for _ in range(n):\n            if charge > a:\n                charge -= a\n            elif charge > b:\n                charge -= b\n            else:\n                return False\n        return True\n\n    def max_first_type_turns(k, n, a, b):\n        if not can_complete_game(k, n, a, b):\n            return -1\n\n        max_turns = 0\n        charge = k\n        for _ in range(n):\n            if charge > a:\n                charge -= a\n                max_turns += 1\n            elif charge > b:\n                charge -= b\n            else:\n                break\n\n        return max_turns\n\n    queries = [list(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    results = [max_first_type_turns(*query) for query in queries]\n    return \"\\n\".join(map(str, results))",
        "test": "",
        "num_ids": 248
    },
    {
        "number": 4285,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    MOD = 10**9 + 7\n    dp = [0] * (n + 1)\n    dp[n] = 1\n\n    for i in range(n - 1, -1, -1):\n        if s[i] == '?':\n            dp[i] = (dp[i + 1] * 3) % MOD\n        else:\n            dp[i] = dp[i + 1]\n            if s[i] == 'a':\n                for j in range(i + 1, n):\n                    if s[j] == 'b':\n                        dp[i] = (dp[i] * 2) % MOD\n                        break\n                    elif s[j] == 'c':\n                        dp[i] = (dp[i] * 4) % MOD\n                        break\n            elif s[i] == 'b':\n                for j in range(i + 1, n):\n                    if s[j] == 'c':\n                        dp[i] = (dp[i] * 2) % MOD\n                        break\n                    elif s[j] == 'a':\n                        dp[i] = (dp[i] * 4) % MOD\n                        break\n            elif s[i] == 'c':\n                for j in range(i + 1, n):\n                    if s[j] == 'a':\n                        dp[i] = (dp[i] * 2) % MOD\n                        break\n                    elif s[j] == 'b':\n                        dp[i] = (dp[i] * 4) % MOD\n                        break\n\n    return dp[0]",
        "test": "",
        "num_ids": 445
    },
    {
        "number": 4286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    offers = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n\n    def kruskal(n, a, offers):\n        parent = list(range(n))\n        rank = [0] * n\n        edges = []\n\n        for x, y, w in offers:\n            edges.append((w, x, y))\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                edges.append((a[i] + a[j], i, j))\n\n        edges.sort()\n\n        def find(x):\n            if parent[x] != x:\n                parent[x] = find(parent[x])\n            return parent[x]\n\n        def union(x, y):\n            x = find(x)\n            y = find(y)\n            if x == y:\n                return False\n            if rank[x] > rank[y]:\n                parent[y] = x\n            else:\n                parent[x] = y\n                if rank[x] == rank[y]:\n                    rank[y] += 1\n            return True\n\n        cost = 0\n        for w, x, y in edges:\n            if union(x, y):\n                cost += w\n\n        return cost\n\n    return str(kruskal(n, a, offers))",
        "test": "",
        "num_ids": 361
    },
    {
        "number": 4287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split()[:3])\n    rain_segments = [list(map(int, stdin.split())) for _ in range(n)]\n    umbrellas = [list(map(int, stdin.split())) for _ in range(m)]\n\n    def find_umbrella(x: int) -> int:\n        for umbrella in umbrellas:\n            if umbrella[0] <= x:\n                return umbrella[1]\n        return 0\n\n    fatigue = 0\n    current_umbrella = 0\n    for i in range(a + 1):\n        if any(l <= i <= r for l, r in rain_segments):\n            if not current_umbrella:\n                current_umbrella = find_umbrella(i)\n                if not current_umbrella:\n                    return \"-1\"\n            fatigue += current_umbrella\n        else:\n            current_umbrella = 0\n\n    return str(fatigue)",
        "test": "",
        "num_ids": 255
    },
    {
        "number": 4288,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if (A == B and A != C) or (A == C and A != B) or (B == C and B != A):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 66
    },
    {
        "number": 4289,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T, A, H = map(int, stdin.split())\n    closest_diff = float('inf')\n    closest_index = -1\n\n    for i in range(N):\n        avg_temp = T - H[i] * 0.006\n        diff = abs(avg_temp - A)\n\n        if diff < closest_diff:\n            closest_diff = diff\n            closest_index = i\n\n    return str(closest_index + 1)",
        "test": "",
        "num_ids": 119
    },
    {
        "number": 4290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return str((N * (N - 1)) // 2)",
        "test": "",
        "num_ids": 33
    },
    {
        "number": 4291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.readline().split())\n    S = stdin.readline().strip()\n    queries = [list(map(int, stdin.readline().split())) for _ in range(Q)]\n\n    def count_ac(s: str) -> int:\n        return s.count(\"AC\")\n\n    result = []\n    for l, r in queries:\n        result.append(count_ac(S[l - 1:r]))\n\n    return \"\\n\".join(map(str, result))",
        "test": "",
        "num_ids": 130
    },
    {
        "number": 4292,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    prices.sort()\n    total_price = sum(prices[:K])\n    return str(total_price)",
        "test": "",
        "num_ids": 59
    },
    {
        "number": 4293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n\n    # Calculate the sum of the flight times for each possible route\n    A_B_C = P + Q\n    A_C_C = P + R\n    B_A_C = Q + R\n    B_C_A = Q + P\n    C_A_B = R + P\n    C_B_A = R + Q\n\n    # Find the minimum sum of the flight times\n    min_sum = min(A_B_C, A_C_C, B_A_C, B_C_A, C_A_B, C_B_A)\n\n    return str(min_sum)",
        "test": "",
        "num_ids": 166
    },
    {
        "number": 4294,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x < a:\n        return \"0\"\n    else:\n        return \"10\"",
        "test": "",
        "num_ids": 40
    },
    {
        "number": 4295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    while N != 0:\n        N = abs(N - K)\n    return str(N)",
        "test": "",
        "num_ids": 41
    },
    {
        "number": 4296,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if A_1 + A_2 + A_3 >= 22:\n        return \"bust\"\n    else:\n        return \"win\"",
        "test": "",
        "num_ids": 60
    },
    {
        "number": 4297,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lcm = n * 2\n    while True:\n        if lcm % n == 0:\n            return str(lcm)\n        lcm += 2",
        "test": "",
        "num_ids": 52
    },
    {
        "number": 4298,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    return str(min(N, D+1))",
        "test": "",
        "num_ids": 29
    },
    {
        "number": 4299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    last_digit = n % 10\n    if last_digit in [2, 4, 5, 7, 9]:\n        return \"hon\"\n    elif last_digit in [0, 1, 6, 8]:\n        return \"pon\"\n    else:\n        return \"bon\"",
        "test": "",
        "num_ids": 84
    },
    {
        "number": 4300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *deliciousness = list(map(int, stdin.split()))\n    total_health_points = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            total_health_points += deliciousness[i] * deliciousness[j]\n\n    return str(total_health_points)",
        "test": "",
        "num_ids": 91
    },
    {
        "number": 4301,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    res = []\n    for i in range(N):\n        max_val = max(A[:i] + A[i+1:])\n        res.append(max_val)\n    return \"\\n\".join(map(str, res))",
        "test": "",
        "num_ids": 77
    },
    {
        "number": 4302,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = 0\n\n    # Press the button of size A twice\n    coins += A + A - 1\n    A -= 1\n\n    # Press the button of size B twice\n    coins += B + B - 1\n    B -= 1\n\n    # Press the button of size A once\n    if A > 0:\n        coins += A\n        A -= 1\n\n    # Press the button of size B once\n    if B > 0:\n        coins += B\n        B -= 1\n\n    return str(coins)",
        "test": "",
        "num_ids": 150
    },
    {
        "number": 4303,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    x = list(map(int, stdin.split()[2:]))\n    x.sort()\n\n    time = 0\n    for i in range(K):\n        time += abs(x[i])\n\n    for i in range(K, N):\n        time += abs(x[i] - x[K - 1])\n\n    return str(time)",
        "test": "",
        "num_ids": 110
    },
    {
        "number": 4304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    total_height = sum(range(1, 1000))\n    snow_cover = total_height - a - b\n    return str(snow_cover)",
        "test": "",
        "num_ids": 57
    },
    {
        "number": 4305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    return str((H + A - 1) // A)",
        "test": "",
        "num_ids": 31
    },
    {
        "number": 4306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    start = max(A, C)\n    end = min(B, D)\n\n    if start > end:\n        return 0\n    else:\n        return end - start ",
        "test": "",
        "num_ids": 65
    },
    {
        "number": 4307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if i % 2 != 0:\n            divisors = 0\n            for j in range(1, i + 1):\n                if i % j == 0:\n                    divisors += 1\n            if divisors == 8:\n                count += 1\n    return str(count)",
        "test": "",
        "num_ids": 102
    },
    {
        "number": 4308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    min_diff = float('inf')\n\n    for i in range(1, N // K + 1):\n        if N % K == 0:\n            crackers_per_user = i\n        else:\n            crackers_per_user = i + 1\n\n        diff = (K - 1) * crackers_per_user\n        min_diff = min(min_diff, diff)\n\n    return str(min_diff)",
        "test": "",
        "num_ids": 122
    },
    {
        "number": 4309,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 100:\n        return \"111\"\n    elif n < 111:\n        return \"111\"\n    else:\n        return str(n)",
        "test": "",
        "num_ids": 57
    },
    {
        "number": 4310,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n\n    # Calculate the cost for each possible order of completion\n    cost_123 = abs(A_1 - A_2) + abs(A_2 - A_3)\n    cost_132 = abs(A_1 - A_3) + abs(A_3 - A_2)\n    cost_213 = abs(A_2 - A_1) + abs(A_1 - A_3)\n    cost_231 = abs(A_2 - A_3) + abs(A_3 - A_1)\n    cost_312 = abs(A_3 - A_1) + abs(A_1 - A_2)\n    cost_321 = abs(A_3 - A_2) + abs(A_2 - A_1)\n\n    # Find the minimum cost among all possible orders\n    min_cost = min(cost_123, cost_132, cost_213, cost_231, cost_312, cost_321)\n\n    return str(min_cost)",
        "test": "",
        "num_ids": 278
    },
    {
        "number": 4311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    n = 1\n    while True:\n        if a[n-1] == 1:\n            a.append(4)\n            n += 1\n            continue\n        if a[n-1] % 2 == 0:\n            a.append(a[n-1] // 2)\n        else:\n            a.append(3 * a[n-1] + 1)\n        n += 1\n        for i in range(n-1):\n            if a[n-1] == a[i]:\n                return str(n)",
        "test": "",
        "num_ids": 150
    },
    {
        "number": 4312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    while A > 0 and C > 0:\n        C -= B\n        if C <= 0:\n            return \"Yes\"\n        A -= D\n\n    return \"No\"",
        "test": "",
        "num_ids": 65
    },
    {
        "number": 4313,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, V, C = map(list, stdin.split('\\n'))\n    N = int(N)\n    V = list(map(int, V))\n    C = list(map(int, C))\n\n    V.sort(reverse=True)\n    C.sort(reverse=True)\n\n    X = 0\n    Y = 0\n\n    for i in range(N):\n        if C[i] <= V[i]:\n            X += V[i]\n            Y += C[i]\n        else:\n            X += C[i]\n            Y += V[i]\n\n    return str(X - Y)",
        "test": "",
        "num_ids": 154
    },
    {
        "number": 4314,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(H)]\n    \n    def is_all_white(row_or_col: list) -> bool:\n        return all(square == '.' for square in row_or_col)\n    \n    def remove_row_or_col(index: int, is_row: bool) -> None:\n        if is_row:\n            del grid[index]\n        else:\n            for row in grid:\n                del row[index]\n    \n    while any(is_all_white(grid[i]) for i in range(H)) or any(is_all_white(grid[i][j] for i in range(H)) for j in range(W)):\n        for i in range(H):\n            if is_all_white(grid[i]):\n                remove_row_or_col(i, True)\n                H -= 1\n                break\n        else:\n            for j in range(W):\n                if is_all_white([grid[i][j] for i in range(H)]):\n                    remove_row_or_col(j, False)\n                    W -= 1\n                    break\n    \n    return '\\n'.join(''.join(row) for row in grid)",
        "test": "",
        "num_ids": 320
    },
    {
        "number": 4315,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    circumference = 2 * 3.14159 * R\n    return f\"{circumference:.15f}\"",
        "test": "",
        "num_ids": 43
    },
    {
        "number": 4316,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.upper()\n    if len(s) != 4:\n        return \"No\"\n    if s[0] == s[1] and s[2] == s[3] and s[0] != s[2]:\n        return \"Yes\"\n    if s[0] == s[2] and s[1] == s[3] and s[0] != s[1]:\n        return \"Yes\"\n    return \"No\"",
        "test": "",
        "num_ids": 109
    },
    {
        "number": 4317,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    options = [A + B, A - B, A * B]\n    largest = max(options)\n    return str(largest)",
        "test": "",
        "num_ids": 49
    },
    {
        "number": 4318,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, H = map(int, stdin.split())\n    H = list(map(int, stdin.split()))\n    count = 0\n    for i in range(N):\n        if all(H[j] <= H[i] for j in range(i+1)):\n            count += 1\n    return str(count)",
        "test": "",
        "num_ids": 82
    },
    {
        "number": 4319,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    numbers = list(map(int, stdin.split('\\n')[1].split()))\n\n    stairways = []\n    current_stairway = []\n    for i in range(n):\n        current_stairway.append(numbers[i])\n        if i < n - 1 and numbers[i + 1] == 1:\n            stairways.append(current_stairway)\n            current_stairway = []\n\n    stairways.append(current_stairway)\n\n    stairway_lengths = [len(stairway) for stairway in stairways]\n\n    return f\"{len(stairways)}\\n{' '.join(map(str, stairway_lengths))}\"",
        "test": "",
        "num_ids": 192
    },
    {
        "number": 4320,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_x(n: int) -> int:\n        k = 2\n        x = 1\n        while True:\n            if k * x > n:\n                break\n            if (k - 1) * x == n:\n                return x\n            k += 1\n            x += 1\n        return x\n\n    t = int(stdin.split('\\n')[0])\n    test_cases = [int(x) for x in stdin.split('\\n')[1:] if x]\n    results = [str(find_x(n)) for n in test_cases]\n    return '\\n'.join(results)",
        "test": "",
        "num_ids": 150
    },
    {
        "number": 4321,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for _ in range(k):\n        if n % 10 != 0:\n            n -= 1\n        else:\n            n //= 10\n    return str(n)",
        "test": "",
        "num_ids": 62
    },
    {
        "number": 4322,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    heights = list(map(int, stdin.split('\\n')[1].split()))\n\n    def is_balanced(circle: list) -> bool:\n        for i in range(len(circle) - 1):\n            if abs(circle[i] - circle[i + 1]) > 1:\n                return False\n        if abs(circle[0] - circle[-1]) > 1:\n            return False\n        return True\n\n    def find_max_balanced_circle(heights: list) -> list:\n        max_circle = []\n        for i in range(len(heights)):\n            for j in range(i + 1, len(heights) + 1):\n                circle = heights[i:j]\n                if is_balanced(circle):\n                    if len(circle) > len(max_circle):\n                        max_circle = circle\n        return max_circle\n\n    max_circle = find_max_balanced_circle(heights)\n    output = [str(len(max_circle))]\n    output.extend(list(map(str, max_circle)))\n    return '\\n'.join(output)",
        "test": "",
        "num_ids": 289
    },
    {
        "number": 4323,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    songs = []\n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        songs.append((a, b))\n\n    songs.sort(key=lambda x: x[0] - x[1], reverse=True)\n\n    compressed_size = 0\n    for a, b in songs:\n        if compressed_size + b > m:\n            break\n        compressed_size += b\n    else:\n        return str(compressed_size)\n\n    for i in range(1, n):\n        compressed_size = sum(b for a, b in songs[:i])\n        uncompressed_size = sum(a for a, b in songs[i:])\n\n        if compressed_size + uncompressed_size <= m:\n            return str(i)\n\n    return \"-1\"",
        "test": "",
        "num_ids": 225
    },
    {
        "number": 4324,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    test_cases = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    def generate_string(n: int, a: int, b: int) -> str:\n        if b == 1:\n            return 'a' * n\n        elif a == 1:\n            return 'abcdefghijklmnopqrstuvwxyz'[:n]\n        else:\n            string = ''\n            for i in range(b):\n                string += chr(ord('a') + i) * a\n            return (string * (n // len(string) + 1))[:n]\n\n    for n, a, b in test_cases:\n        print(generate_string(n, a, b))",
        "test": "",
        "num_ids": 195
    },
    {
        "number": 4325,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = map(int, stdin.split())\n    return str(T * (N // X) + (N % X) // 1)",
        "test": "",
        "num_ids": 40
    },
    {
        "number": 4326,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 3:\n        return \"0\"\n    return str((n - 1) // 2)",
        "test": "",
        "num_ids": 40
    },
    {
        "number": 4327,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    pies = 0\n    while P >= 2:\n        pies += P // 2\n        A += P // 2\n        P = A\n    return str(pies)",
        "test": "",
        "num_ids": 61
    },
    {
        "number": 4328,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 0 or B == 0:\n        return \"0\"\n    if A % B == 0:\n        return str(A + B)\n    else:\n        return str(B - A)",
        "test": "",
        "num_ids": 67
    },
    {
        "number": 4329,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if len(S) < 1 or len(S) > 10:\n        return \"No\"\n    if len(T) != len(S) + 1:\n        return \"No\"\n    if T == S + T[-1]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 87
    },
    {
        "number": 4330,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return \"IMPOSSIBLE\"\n    K = (A + B) // 2\n    if (A - K) == (B - K):\n        return str(K)\n    else:\n        return \"IMPOSSIBLE\"",
        "test": "",
        "num_ids": 82
    },
    {
        "number": 4331,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 7:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 38
    },
    {
        "number": 4332,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(n))\n    if n % digits_sum == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 57
    },
    {
        "number": 4333,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n\n    # Calculate the length of a side of the square\n    side = abs(x_2 - x_1)\n\n    # Calculate the coordinates of the missing vertices\n    x_3 = x_2 - side\n    y_3 = y_2 + side\n    x_4 = x_1 - side\n    y_4 = y_1 + side\n\n    # Return the result as a string\n    return f\"{x_3} {y_3} {x_4} {y_4}\"",
        "test": "",
        "num_ids": 147
    },
    {
        "number": 4334,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T, A, B, U = stdin.split()\n    A, B = int(A), int(B)\n    if S == U:\n        return f\"{A-1} {B}\"\n    else:\n        return f\"{A} {B-1}\"",
        "test": "",
        "num_ids": 69
    },
    {
        "number": 4335,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    if n % 2 == 0:\n        mid = n // 2\n        if s[:mid] == s[mid:]:\n            return \"Yes\"\n    return \"No\"",
        "test": "",
        "num_ids": 68
    },
    {
        "number": 4336,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    max_area = min(W * H - x * y, x * y)\n    if x == 0 or x == W or y == 0 or y == H:\n        return f\"{max_area:.6f} 1\"\n    else:\n        return f\"{max_area:.6f} 0\"",
        "test": "",
        "num_ids": 99
    },
    {
        "number": 4337,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, colors = int(stdin.split('\\n')[0]), stdin.split('\\n')[1].split()\n    colors_set = set(colors)\n    \n    if len(colors_set) == 3:\n        return \"Three\"\n    elif len(colors_set) == 4:\n        return \"Four\"\n    else:\n        return \"Invalid\"",
        "test": "",
        "num_ids": 90
    },
    {
        "number": 4338,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, a = map(int, stdin.split())\n    a = list(map(int, a.split()))\n\n    doors_broken = sum(1 for durability in a if durability <= x)\n    doors_repaired = sum(1 for durability in a if durability > 0 and durability - y <= 0)\n\n    return str(doors_broken - doors_repaired)",
        "test": "",
        "num_ids": 105
    },
    {
        "number": 4339,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                count += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 124
    },
    {
        "number": 4340,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    for i in range(1, 6 * 10**8, 2):\n        a = [2 * i - 1 if x == i else x for x in a]\n        a = [2 * i if x == 2 * i - 1 else x for x in a]\n        a = [4 * i - 3 if x == 2 * i else x for x in a]\n        a = [4 * i - 1 if x == 4 * i - 3 else x for x in a]\n        a = [4 * i + 1 if x == 4 * i - 1 else x for x in a]\n        a = [4 * i if x == 4 * i + 1 else x for x in a]\n        a = [6 * i - 5 if x == 4 * i else x for x in a]\n        a = [6 * i - 3 if x == 6 * i - 5 else x for x in a]\n        a = [6 * i - 1 if x == 6 * i - 3 else x for x in a]\n        a = [6 * i + 1 if x == 6 * i - 1 else x for x in a]\n        a = [6 * i + 3 if x == 6 * i + 1 else x for x in a]\n        a = [6 * i + 5 if x == 6 * i + 3 else x for x in a]\n        a = [10**9 - 1 if x == 10**9 else x for x in a]\n        a = [10**9 if x == 10**9 - 1 else x for x in a]\n\n    return ' '.join(map(str, a))",
        "test": "",
        "num_ids": 445
    },
    {
        "number": 4341,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_cycle(vertex, visited, parent, graph):\n        visited[vertex] = True\n        for neighbor in graph[vertex]:\n            if not visited[neighbor]:\n                if find_cycle(neighbor, visited, vertex, graph):\n                    return True\n            elif neighbor != parent:\n                return True\n        return False\n\n    def is_cycle(graph):\n        visited = [False] * len(graph)\n        for vertex in range(len(graph)):\n            if not visited[vertex]:\n                if find_cycle(vertex, visited, -1, graph):\n                    return True\n        return False\n\n    def dfs(vertex, visited, parent, graph):\n        visited[vertex] = True\n        for neighbor in graph[vertex]:\n            if not visited[neighbor]:\n                dfs(neighbor, visited, vertex, graph)\n\n    n, m = map(int, stdin.readline().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        v, u = map(int, stdin.readline().split())\n        graph[v - 1].append(u - 1)\n        graph[u - 1].append(v - 1)\n\n    count = 0\n    visited = [False] * n\n    for vertex in range(n):\n        if not visited[vertex]:\n            dfs(vertex, visited, -1, graph)\n            count += is_cycle(graph)\n\n    return str(count)",
        "test": "",
        "num_ids": 369
    },
    {
        "number": 4342,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_nice(v, u):\n        for x in [v, u]:\n            if x in red and x in blue:\n                return False\n        return True\n\n    def dfs(node, parent):\n        for child in tree[node]:\n            if child != parent:\n                dfs(child, node)\n        visited.add(node)\n        components.append(visited.copy())\n        visited.clear()\n\n    n, colors, edges = stdin.split('\\n', 2)\n    n = int(n)\n    colors = list(map(int, colors.split()))\n    red = set()\n    blue = set()\n    for i, color in enumerate(colors):\n        if color == 1:\n            red.add(i + 1)\n        elif color == 2:\n            blue.add(i + 1)\n    tree = [[] for _ in range(n + 1)]\n    for edge in edges.split('\\n'):\n        v, u = map(int, edge.split())\n        tree[v].append(u)\n        tree[u].append(v)\n    visited = set()\n    components = []\n    dfs(1, None)\n    nice_edges = 0\n    for i in range(n - 1):\n        v, u = map(int, edges.split('\\n')[i].split())\n        if is_nice(v, u):\n            for component in components:\n                if v in component or u in component:\n                    if not (red.intersection(component) and blue.intersection(component)):\n                        nice_edges += 1\n                        break\n    return str(nice_edges)",
        "test": "",
        "num_ids": 400
    },
    {
        "number": 4343,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    def find_median(s, t):\n        if s == t:\n            return s\n\n        for i in range(k):\n            if s[i] != t[i]:\n                if s[i] < t[i]:\n                    return s[:i] + chr(ord(s[i]) + 1) + \"a\" * (k - i - 1)\n                else:\n                    return s[:i] + chr(ord(s[i]) - 1) + \"z\" * (k - i - 1)\n\n    return find_median(s, t)",
        "test": "",
        "num_ids": 182
    },
    {
        "number": 4344,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ratings = list(map(int, input().split()))\n\n    if k > n:\n        return \"NO\"\n\n    ratings.sort()\n\n    if len(set(ratings)) < k:\n        return \"NO\"\n\n    result = []\n    for i in range(n - k + 1):\n        if len(set(ratings[i:i + k])) == k:\n            result.append([i + 1 + j for j in range(k)])\n\n    if not result:\n        return \"NO\"\n\n    return \"YES\\n\" + \" \".join(map(str, result[0]))",
        "test": "",
        "num_ids": 165
    },
    {
        "number": 4345,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    increasing_sequence = []\n    decreasing_sequence = []\n\n    for i in range(n):\n        if i == 0 or a[i] > a[i - 1]:\n            increasing_sequence.append(a[i])\n        else:\n            decreasing_sequence.append(a[i])\n\n    if len(increasing_sequence) + len(decreasing_sequence) != n:\n        return \"NO\"\n\n    result = [0] * n\n    for i in range(n):\n        if a[i] in increasing_sequence:\n            result[i] = 0\n        else:\n            result[i] = 1\n\n    return \"YES\\n\" + \" \".join(map(str, result))",
        "test": "",
        "num_ids": 213
    },
    {
        "number": 4346,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def count_lanterns(L, v, l, r):\n        lanterns_count = L // v\n        for i in range(1, lanterns_count + 1):\n            if l <= i * v <= r:\n                lanterns_count -= 1\n        return lanterns_count\n\n    t = int(stdin.readline())\n    output = []\n    for _ in range(t):\n        L, v, l, r = map(int, stdin.readline().split())\n        output.append(count_lanterns(L, v, l, r))\n    return \"\\n\".join(map(str, output))",
        "test": "",
        "num_ids": 159
    },
    {
        "number": 4347,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    total_ways = 0\n    for i in range(1, n // 2 + 1):\n        total_ways += (n // 2 - i) * i\n    return str(total_ways)",
        "test": "",
        "num_ids": 62
    },
    {
        "number": 4348,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    for _ in range(k):\n        for letter in letters:\n            if letter in s:\n                s = s.replace(letter, '', 1)\n                break\n    return s",
        "test": "",
        "num_ids": 94
    },
    {
        "number": 4349,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def read_line() -> List[str]:\n        return stdin.readline().strip().split()\n\n    def read_int() -> int:\n        return int(stdin.readline().strip())\n\n    n, m = map(int, read_line())\n    k = list(map(int, read_line()))\n    offers = [tuple(map(int, read_line())) for _ in range(m)]\n\n    days = 0\n    burles = 1\n    on_sale = [False] * n\n\n    while any(k):\n        days += 1\n        burles += 1\n\n        for i in range(n):\n            if k[i] and burles >= 2:\n                k[i] -= 1\n                burles -= 2\n            elif k[i] and burles >= 1:\n                k[i] -= 1\n                burles -= 1\n\n        for d, t in offers:\n            if d == days:\n                on_sale[t - 1] = True\n\n    return str(days)",
        "test": "",
        "num_ids": 257
    },
    {
        "number": 4350,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(x, y, size):\n        if 1 <= x <= n - 2 and 1 <= y <= m - 2:\n            for i in range(x - 1, x + 2):\n                for j in range(y - 1, y + 2):\n                    if grid[i][j] == '*' and (i != x or j != y) and (i - x) ** 2 + (j - y) ** 2 <= size ** 2:\n                        return False\n            return True\n        return False\n\n    def find_stars(x, y, size):\n        if is_valid(x, y, size):\n            stars.append((x, y, size))\n            for i in range(x - size, x + size + 1):\n                for j in range(y - size, y + size + 1):\n                    if 1 <= i <= n - 2 and 1 <= j <= m - 2 and grid[i][j] == '.':\n                        grid[i][j] = 'X'\n            return True\n        return False\n\n    n, m = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(n)]\n\n    stars = []\n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            if grid[i][j] == '*':\n                for size in range(1, min(n - i, m - j) + 1):\n                    if find_stars(i, j, size):\n                        break\n\n    if not stars:\n        return \"-1\"\n\n    output = [str(len(stars))] + [\" \".join(map(str, star)) for star in stars]\n    return \"\\n\".join(output)",
        "test": "",
        "num_ids": 444
    },
    {
        "number": 4351,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if str(n) == str(n)[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 42
    },
    {
        "number": 4352,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    alice, bob = map(int, stdin.split())\n    \n    if alice == bob:\n        return \"Draw\"\n    elif alice < bob:\n        return \"Bob\"\n    else:\n        return \"Alice\"",
        "test": "",
        "num_ids": 61
    },
    {
        "number": 4353,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(\",\", \" \")\n    return s",
        "test": "",
        "num_ids": 17
    },
    {
        "number": 4354,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def manhattan_distance(x1, y1, x2, y2):\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    def nearest_checkpoint(student_x, student_y, checkpoints):\n        min_distance = float('inf')\n        nearest_checkpoint_index = -1\n        for i, checkpoint in enumerate(checkpoints):\n            distance = manhattan_distance(student_x, student_y, checkpoint[0], checkpoint[1])\n            if distance < min_distance:\n                min_distance = distance\n                nearest_checkpoint_index = i + 1\n        return nearest_checkpoint_index\n\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    students = [list(map(int, line.split())) for line in lines[1:N + 1]]\n    checkpoints = [list(map(int, line.split())) for line in lines[N + 1:N + M + 1]]\n\n    result = []\n    for student in students:\n        result.append(nearest_checkpoint(student[0], student[1], checkpoints))\n\n    return '\\n'.join(map(str, result))",
        "test": "",
        "num_ids": 301
    },
    {
        "number": 4355,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = a + a**2 + a**3\n    return str(result)",
        "test": "",
        "num_ids": 30
    },
    {
        "number": 4356,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    A = [stdin.readline().strip() for _ in range(N)]\n    B = [stdin.readline().strip() for _ in range(M)]\n\n    def is_contained(A, B):\n        for i in range(N - M + 1):\n            for j in range(N - M + 1):\n                if A[i][j:j + M] == B[0]:\n                    for k in range(1, M):\n                        if A[i + k][j:j + M] != B[k]:\n                            break\n                    else:\n                        return True\n        return False\n\n    if is_contained(A, B) or is_contained(list(zip(*A)), B):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 212
    },
    {
        "number": 4357,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    max_allowance = 0\n\n    for a, b, c in [(A, B, C), (A, C, B), (B, A, C), (B, C, A), (C, A, B), (C, B, A)]:\n        for op1 in range(1, 4):\n            for op2 in range(1, 4):\n                if op1 != op2:\n                    formula = f\"{a}{op1}{b}{op2}{c}\"\n                    allowance = eval(formula)\n                    max_allowance = max(max_allowance, allowance)\n\n    return str(max_allowance)",
        "test": "",
        "num_ids": 175
    },
    {
        "number": 4358,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    p = [int(x) for x in lines[1:]]\n    p.sort(reverse=True)\n    total = sum(p[1:]) + p[0] / 2\n    return str(int(total))",
        "test": "",
        "num_ids": 77
    },
    {
        "number": 4359,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n\n    # Calculate the time required to serve each dish\n    ABC_Don = 29\n    ARC_Curry = 20\n    AGC_Pasta = 7\n    ATC_Hanbagu = 120\n    APC_Ramen = 35\n\n    # Calculate the earliest possible time for each dish\n    ABC_Don_time = 0\n    ARC_Curry_time = 30\n    AGC_Pasta_time = 50\n    ATC_Hanbagu_time = 60\n    APC_Ramen_time = 180\n\n    # Calculate the time required to serve all dishes\n    total_time = ABC_Don + ARC_Curry + AGC_Pasta + ATC_Hanbagu + APC_Ramen\n\n    # Calculate the earliest possible time for the last dish to be delivered\n    last_dish_time = max(ABC_Don_time + ABC_Don, ARC_Curry_time + ARC_Curry, AGC_Pasta_time + AGC_Pasta, ATC_Hanbagu_time + ATC_Hanbagu, APC_Ramen_time + APC_Ramen)\n\n    return str(last_dish_time)",
        "test": "",
        "num_ids": 331
    },
    {
        "number": 4360,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    sum_of_inverses = sum(1 / a for a in A)\n    inverse_of_sum = 1 / sum_of_inverses\n    return str(inverse_of_sum)",
        "test": "",
        "num_ids": 69
    },
    {
        "number": 4361,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    heights = sorted(map(int, stdin.split()))[::-1]\n    return str(heights[K - 1] - heights[-1])",
        "test": "",
        "num_ids": 56
    },
    {
        "number": 4362,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isupper():\n        return \"A\"\n    else:\n        return \"a\"",
        "test": "",
        "num_ids": 26
    },
    {
        "number": 4363,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    count = 0\n    for X in range(K + 1):\n        for Y in range(K + 1):\n            Z = S - X - Y\n            if 0 <= Z <= K:\n                count += 1\n    return str(count)",
        "test": "",
        "num_ids": 78
    },
    {
        "number": 4364,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) != 4:\n        return \"NA\"\n\n    yymm_valid = False\n    mmyy_valid = False\n\n    if 0 <= int(s[2:]) <= 12 and 0 <= int(s[:2]) <= 99:\n        yymm_valid = True\n\n    if 0 <= int(s[:2]) <= 12 and 0 <= int(s[2:]) <= 99:\n        mmyy_valid = True\n\n    if yymm_valid and mmyy_valid:\n        return \"AMBIGUOUS\"\n    elif yymm_valid:\n        return \"YYMM\"\n    elif mmyy_valid:\n        return \"MMYY\"\n    else:\n        return \"NA\"",
        "test": "",
        "num_ids": 196
    },
    {
        "number": 4365,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    even_numbers = [i for i in range(2, k+1, 2)]\n    odd_numbers = [i for i in range(1, k+1, 2)]\n    return str(len(even_numbers) * len(odd_numbers))",
        "test": "",
        "num_ids": 74
    },
    {
        "number": 4366,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    start_time = (A + B) % 24\n    return str(start_time)",
        "test": "",
        "num_ids": 40
    },
    {
        "number": 4367,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    if N >= 10:\n        return str(R)\n    else:\n        return str(R + 100 * (10 - N))",
        "test": "",
        "num_ids": 54
    },
    {
        "number": 4368,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    digits = len(str(n))\n    base_k_digits = 0\n    while n > 0:\n        n, remainder = divmod(n, k)\n        base_k_digits += 1\n    return str(base_k_digits)",
        "test": "",
        "num_ids": 81
    },
    {
        "number": 4369,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    return (N + 1) // 2",
        "test": "",
        "num_ids": 24
    },
    {
        "number": 4370,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a + b <= 16 and abs(a - b) > 1:\n        return \"Yay!\"\n    else:\n        return \":(\"",
        "test": "",
        "num_ids": 53
    },
    {
        "number": 4371,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    min_diff = abs(753 - int(s[:3]))\n\n    for i in range(len(s) - 2):\n        x = int(s[i:i+3])\n        diff = abs(753 - x)\n        if diff < min_diff:\n            min_diff = diff\n\n    return str(min_diff)",
        "test": "",
        "num_ids": 93
    },
    {
        "number": 4372,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a.sort()\n    y = 1\n    z = a[0]\n    while y * z < sum(a):\n        y += 1\n        z = (sum(a) - (y - 1) * z) // y\n    return f\"{y} {z}\\n\"",
        "test": "",
        "num_ids": 87
    },
    {
        "number": 4373,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort(reverse=True)\n    days = 0\n    for i in range(n):\n        if a[i] >= i + 1:\n            days += 1\n        else:\n            break\n    return str(days)",
        "test": "",
        "num_ids": 95
    },
    {
        "number": 4374,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find(parent, i):\n        if parent[i] == i:\n            return i\n        return find(parent, parent[i])\n\n    def union(parent, rank, x, y):\n        xroot = find(parent, x)\n        yroot = find(parent, y)\n\n        if xroot == yroot:\n            return False\n\n        if rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n        return True\n\n    def kruskal(n, m, edges):\n        parent = [i for i in range(n + 1)]\n        rank = [0] * (n + 1)\n        edges.sort(key=lambda x: x[2])\n        mst = []\n        d = 0\n\n        for edge in edges:\n            if union(parent, rank, edge[0], edge[1]):\n                mst.append(edge)\n                d = max(d, edge[2])\n\n        return d, mst\n\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    edges = []\n\n    for i in range(1, m + 1):\n        v, u = map(int, lines[i].split())\n        edges.append((v, u, 1))\n\n    d, mst = kruskal(n, m, edges)\n    result = [str(d)]\n\n    for edge in mst:\n        result.append(f\"{edge[0]} {edge[1]}\")\n\n    return '\\n'.join(result) ",
        "test": "",
        "num_ids": 432
    },
    {
        "number": 4375,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find(parent, u):\n        if parent[u] == u:\n            return u\n        parent[u] = find(parent, parent[u])\n        return parent[u]\n\n    def union(parent, rank, x, y):\n        xroot = find(parent, x)\n        yroot = find(parent, y)\n\n        if xroot == yroot:\n            return False\n\n        if rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n        return True\n\n    def dfs(u, parent, depth):\n        if u != parent[u]:\n            dfs(parent[u], parent, depth)\n        depth[u] = depth[parent[u]] + 1\n\n    n, k = map(int, stdin.readline().split())\n    weights = list(map(int, stdin.readline().split()))\n    edges = [list(map(int, stdin.readline().split())) for _ in range(n - 1)]\n\n    parent = [i for i in range(n + 1)]\n    rank = [0] * (n + 1)\n    depth = [0] * (n + 1)\n\n    for u, v in edges:\n        union(parent, rank, u, v)\n\n    for u in range(1, n + 1):\n        dfs(u, parent, depth)\n\n    max_weight = 0\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if depth[u] - depth[v] > k or depth[v] - depth[u] > k:\n                max_weight = max(max_weight, weights[u - 1] + weights[v - 1])\n\n    return str(max_weight)",
        "test": "",
        "num_ids": 484
    },
    {
        "number": 4376,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    rooms = list(map(int, stdin.readline().split()))\n    b_numbers = list(map(int, stdin.readline().split()))\n\n    total_rooms = sum(rooms)\n    for i in range(m):\n        b_numbers[i] -= 1\n        for j in range(n):\n            if b_numbers[i] < rooms[j]:\n                print(j + 1, b_numbers[i] + 1)\n                break\n            b_numbers[i] -= rooms[j]\n\n    return \"\"",
        "test": "",
        "num_ids": 151
    },
    {
        "number": 4377,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4 = map(int, stdin.split())\n\n    for a in range(1, x4 - 2):\n        for b in range(1, x4 - a - 1):\n            c = x4 - a - b\n            if a + b == x1 and a + c == x2 and b + c == x3:\n                return f\"{a} {b} {c}\"\n\n    return \"No solution found\"",
        "test": "",
        "num_ids": 114
    },
    {
        "number": 4378,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_diverse(s: str) -> bool:\n        for i in range(len(s) - 1):\n            if s[i] == s[i + 1]:\n                return False\n        return True\n\n    def min_recolor(s: str) -> int:\n        n = len(s)\n        dp = [0] * n\n        for i in range(n):\n            if i > 0:\n                dp[i] = dp[i - 1] + (s[i] != s[i - 1])\n            else:\n                dp[i] = 1\n        return dp[n - 1]\n\n    def recolor_min(s: str) -> str:\n        n = len(s)\n        dp = [0] * n\n        for i in range(n):\n            if i > 0:\n                dp[i] = dp[i - 1] + (s[i] != s[i - 1])\n            else:\n                dp[i] = 1\n        res = []\n        i = n - 1\n        while i >= 0:\n            if dp[i] == dp[n - 1]:\n                res.append(s[i])\n                i -= 1\n            else:\n                res.append('R' if s[i] == 'G' else 'G')\n                i -= 1\n                while dp[i] == dp[n - 1] and i >= 0:\n                    res.append(s[i])\n                    i -= 1\n                res.append('B' if s[i + 1] == 'R' else 'R')\n                i -= 1\n        return ''.join(res[::-1])\n\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    r = min_recolor(s)\n    t = recolor_min(s)\n\n    return f\"{r}\\n{t}\" ",
        "test": "",
        "num_ids": 488
    },
    {
        "number": 4379,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n\n    max_length = 1\n    max_indices = [1]\n\n    for i in range(2, n + 1):\n        if arr[i - 1] - arr[i - 2] == 1:\n            if i - 1 - max_indices[0] == max_length:\n                max_indices.append(i)\n            elif i - 1 - max_indices[0] > max_length:\n                max_length = i - 1 - max_indices[0]\n                max_indices = [max_indices[0], i]\n        else:\n            if i - max_indices[0] == max_length:\n                max_indices.append(i)\n            elif i - max_indices[0] > max_length:\n                max_length = i - max_indices[0]\n                max_indices = [max_indices[0], i]\n\n    return f\"{max_length}\\n{' '.join(map(str, max_indices))}\"",
        "test": "",
        "num_ids": 286
    },
    {
        "number": 4380,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for C in range(1, 4):\n        if (A * B * C) % 2 != 0:\n            return \"Yes\"\n    return \"No\"",
        "test": "",
        "num_ids": 57
    },
    {
        "number": 4381,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    discounted_bus_fare = y // 2\n    total_fare = x + discounted_bus_fare\n    return str(total_fare)",
        "test": "",
        "num_ids": 54
    },
    {
        "number": 4382,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(n**3)",
        "test": "",
        "num_ids": 21
    },
    {
        "number": 4383,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 3 or x == 5 or x == 7:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "",
        "num_ids": 44
    },
    {
        "number": 4384,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 1998:\n        raise ValueError(\"N should be between 1 and 1998 (inclusive)\")\n    if n <= 999:\n        return \"ABC\"\n    else:\n        return \"ABD\"",
        "test": "",
        "num_ids": 76
    },
    {
        "number": 4385,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    distances = [b - a, c - b, d - c, e - d]\n    if all(distance <= k for distance in distances):\n        return \"Yay!\"\n    else:\n        return \":(",
        "test": "",
        "num_ids": 74
    },
    {
        "number": 4386,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, s = stdin.split()\n    a = int(a)\n    if a >= 3200:\n        return s\n    else:\n        return \"red\"",
        "test": "",
        "num_ids": 45
    },
    {
        "number": 4387,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin.strip())\n    if rating < 1200:\n        return \"ABC\"\n    elif rating < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"",
        "test": "",
        "num_ids": 58
    },
    {
        "number": 4388,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_str = str(n)\n    result = \"\"\n    for digit in n_str:\n        if digit == \"1\":\n            result += \"9\"\n        elif digit == \"9\":\n            result += \"1\"\n    return result",
        "test": "",
        "num_ids": 68
    },
    {
        "number": 4389,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    test_cases = stdin.split('\\n')[1:]\n    result = []\n\n    for b in test_cases:\n        substrings = [b[i:i + 2] for i in range(len(b) - 1)]\n        a = ''.join(substrings)\n        result.append(a)\n\n    return '\\n'.join(result)\n",
        "test": "",
        "num_ids": 105
    },
    {
        "number": 4390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def min_moves(a, b):\n        if a % b == 0:\n            return 0\n        else:\n            return (b - a % b) % b\n\n    t = int(stdin.split('\\n')[0])\n    test_cases = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    return '\\n'.join(str(min_moves(a, b)) for a, b in test_cases)\n",
        "test": "",
        "num_ids": 120
    },
    {
        "number": 4391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    max_avg = 0\n\n    for i in range(n - k + 1):\n        segment_sum = sum(a[i:i + k])\n        segment_avg = segment_sum / k\n        if segment_avg > max_avg:\n            max_avg = segment_avg\n\n    return f\"{max_avg:.10f}\"",
        "test": "",
        "num_ids": 133
    },
    {
        "number": 4392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_sorted(arr: list) -> bool:\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                return False\n        return True\n\n    def can_sort(a: list, p: set, n: int) -> bool:\n        for i in range(n - 1):\n            if a[i] > a[i + 1] and (i + 1) not in p:\n                return False\n        return True\n\n    t = int(stdin.split('\\n')[0])\n    test_cases = stdin.split('\\n')[1:]\n\n    for i in range(t):\n        n, m = map(int, test_cases[i * 3 + 1].split())\n        a = list(map(int, test_cases[i * 3 + 2].split()))\n        p = set(map(int, test_cases[i * 3 + 3].split()))\n\n        if can_sort(a, p, n) and is_sorted(a):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n",
        "test": "",
        "num_ids": 273
    },
    {
        "number": 4393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = stdin.readline().strip()\n\n    s = \"\"\n    i = 0\n    while i < n:\n        count = 1\n        while i + count < n and t[i] == t[i + count]:\n            count += 1\n        s += t[i]\n        i += count\n\n    return s",
        "test": "",
        "num_ids": 96
    },
    {
        "number": 4394,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find(parent, i):\n        if parent[i] == i:\n            return i\n        return find(parent, parent[i])\n\n    def union(parent, rank, x, y):\n        xroot = find(parent, x)\n        yroot = find(parent, y)\n\n        if xroot == yroot:\n            return False\n\n        if rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n        return True\n\n    def kruskal(n, m, edges):\n        parent = [i for i in range(n)]\n        rank = [0] * n\n        mst_cost = 0\n        mst_edges = []\n\n        for e in sorted(edges, key=lambda x: x[2]):\n            u, v, w = e\n            if union(parent, rank, u - 1, v - 1):\n                mst_cost += w\n                mst_edges.append(e)\n\n        return mst_cost, mst_edges\n\n    def modify_graph(n, m, edges, k):\n        mst_cost, mst_edges = kruskal(n, m, edges)\n        if mst_cost != k:\n            return -1\n\n        modified_edges = [e for e in edges if e not in mst_edges]\n        for e in modified_edges:\n            u, v, w = e\n            e[2] += 1\n            new_mst_cost, new_mst_edges = kruskal(n, m, edges)\n            if new_mst_cost == k:\n                return 1\n            e[2] -= 1\n\n        return 0\n\n    n, m = map(int, stdin.readline().split())\n    edges = [list(map(int, stdin.readline().split())) for _ in range(m)]\n    k = int(stdin.readline())\n\n    return str(modify_graph(n, m, edges, k))",
        "test": "",
        "num_ids": 540
    },
    {
        "number": 4395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_nice(s: str) -> bool:\n        for i in range(len(s)):\n            for j in range(i + 1, len(s)):\n                if s[i] == s[j] and (j - i) % 3 != 0:\n                    return False\n        return True\n\n    def min_recolor(s: str) -> int:\n        n = len(s)\n        dp = [[0] * 3 for _ in range(n)]\n\n        for i in range(n):\n            for j in range(3):\n                if s[i] == 'R':\n                    dp[i][j] = (j + 1) % 3\n                elif s[i] == 'G':\n                    dp[i][j] = (j + 2) % 3\n                else:\n                    dp[i][j] = j\n\n        for i in range(1, n):\n            for j in range(3):\n                dp[i][j] = min(dp[i][j], dp[i - 1][(j + 1) % 3] + 1, dp[i - 1][(j + 2) % 3] + 1)\n\n        return min(dp[n - 1])\n\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    r = min_recolor(s)\n    t = s\n\n    for i in range(n):\n        if s[i] != 'R' and s[i] != 'G' and s[i] != 'B':\n            continue\n\n        for c in 'RGB':\n            if c == s[i]:\n                continue\n\n            t_ = t[:i] + c + t[i + 1:]\n\n            if is_nice(t_) and min_recolor(t_) == r:\n                t = t_\n                break\n\n    return f\"{r}\\n{t}\"",
        "test": "",
        "num_ids": 481
    },
    {
        "number": 4396,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    total_yen = 0\n    \n    for i in range(1, N+1):\n        x, u = lines[i].split()\n        x = float(x)\n        if u == 'JPY':\n            total_yen += x\n        elif u == 'BTC':\n            total_yen += x * 380000.0\n    \n    return f\"{total_yen:.1f}\"",
        "test": "",
        "num_ids": 123
    },
    {
        "number": 4397,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    j = N - i + 1\n    return str(j)",
        "test": "",
        "num_ids": 33
    },
    {
        "number": 4398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    S, T = stdin.split('\\n')[1].split()\n    result = \"\"\n    for i in range(N):\n        result += S[i] + T[i]\n    return result\n\nstdin = \"2\\nip cc\"\nprint(solution(stdin)) ",
        "test": "",
        "num_ids": 86
    },
    {
        "number": 4399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[0] != s[1] and s[1] != s[2] and s[0] != s[2]:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "",
        "num_ids": 72
    },
    {
        "number": 4400,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    max_count = 0\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'R':\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return str(max_count)",
        "test": "",
        "num_ids": 87
    },
    {
        "number": 4401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split input into integers\n    X, Y, Z = map(int, stdin.split())\n\n    # Swap contents of boxes A and B\n    X, Y = Y, X\n\n    # Swap contents of boxes A and C\n    X, Z = Z, X\n\n    # Return the final contents of the boxes\n    return f\"{X} {Y} {Z}\"",
        "test": "",
        "num_ids": 92
    },
    {
        "number": 4402,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A >= 13:\n        return B\n    elif 6 <= A <= 12:\n        return B / 2\n    else:\n        return 0\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "",
        "num_ids": 74
    },
    {
        "number": 4403,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    symbols = stdin.strip()\n    takahashi = 0\n    for symbol in symbols:\n        if symbol == \"+\":\n            takahashi += 1\n        elif symbol == \"-\":\n            takahashi -= 1\n    return str(takahashi)",
        "test": "",
        "num_ids": 65
    },
    {
        "number": 4404,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.split('/')\n    year = int(date[0])\n    month = int(date[1])\n    day = int(date[2])\n\n    if year != 2019:\n        return \"TBD\"\n    elif month > 4:\n        return \"TBD\"\n    elif month == 4 and day > 30:\n        return \"TBD\"\n    else:\n        return \"Heisei\"",
        "test": "",
        "num_ids": 108
    },
    {
        "number": 4405,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    topics = list(map(int, stdin.split('\\n')[1].split()))\n\n    topics_count = {}\n    for topic in topics:\n        if topic in topics_count:\n            topics_count[topic] += 1\n        else:\n            topics_count[topic] = 1\n\n    sorted_topics = sorted(topics_count.items(), key=lambda x: x[1], reverse=True)\n\n    max_problems = 0\n    prev_contest_problems = 0\n    for topic, count in sorted_topics:\n        if count >= 2:\n            curr_contest_problems = 2 * prev_contest_problems\n            if curr_contest_problems > count:\n                curr_contest_problems = count\n            max_problems += curr_contest_problems\n            prev_contest_problems = curr_contest_problems\n\n    return str(max_problems)",
        "test": "",
        "num_ids": 245
    },
    {
        "number": 4406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    ids = list(map(int, stdin.readline().split()))\n\n    conversations = []\n    for i in range(n):\n        id_i = ids[i]\n        if id_i in conversations:\n            continue\n        else:\n            if len(conversations) < k:\n                conversations.append(id_i)\n            else:\n                conversations.pop(0)\n                conversations.append(id_i)\n\n    m = len(conversations)\n    output = [str(m)]\n    output.append(\" \".join(map(str, conversations)))\n    return \"\\n\".join(output)",
        "test": "",
        "num_ids": 173
    },
    {
        "number": 4407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split('\\n')[0].split())\n    coins = list(map(int, stdin.split('\\n')[1].split()))\n    queries = list(map(int, stdin.split('\\n')[2:]))\n\n    def min_coins(value):\n        dp = [float('inf')] * (value + 1)\n        dp[0] = 0\n\n        for coin in coins:\n            for i in range(coin, value + 1):\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n\n        return dp[value] if dp[value] != float('inf') else -1\n\n    answers = [min_coins(query) for query in queries]\n\n    return '\\n'.join(map(str, answers))",
        "test": "",
        "num_ids": 208
    },
    {
        "number": 4408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def distribute_cards(cards, favorite_numbers, h):\n        total_joy = 0\n        for favorite_number in favorite_numbers:\n            count = sum(1 for card in cards if card == favorite_number)\n            total_joy += h[count - 1]\n        return total_joy\n\n    n, k = map(int, stdin.readline().split())\n    cards = list(map(int, stdin.readline().split()))\n    favorite_numbers = list(map(int, stdin.readline().split()))\n    h = list(map(int, stdin.readline().split()))\n\n    cards_per_player = k * n\n    cards = sorted(cards)\n    favorite_numbers = sorted(favorite_numbers)\n    h = sorted(h, reverse=True)\n\n    max_joy = 0\n    for i in range(cards_per_player - k + 1):\n        player_cards = cards[i:i + k]\n        joy = distribute_cards(player_cards, favorite_numbers, h)\n        max_joy = max(max_joy, joy)\n\n    return str(max_joy)",
        "test": "",
        "num_ids": 285
    },
    {
        "number": 4409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_operations(a):\n        n = len(a)\n        operations = []\n        k = 0\n\n        for i in range(n - 1):\n            if a[i] == a[i + 1]:\n                continue\n            if a[i] > a[i + 1]:\n                operations.append((1, i + 1, i))\n                a[i] -= abs(a[i] - a[i + 1])\n                k += 1\n            else:\n                operations.append((2, i, i + 1))\n                a[i] += abs(a[i] - a[i + 1])\n                k += 1\n\n        return k, operations\n\n    def find_min_operations_with_equal_elements(a):\n        n = len(a)\n        operations = []\n        k = 0\n\n        for i in range(n - 1):\n            if a[i] == a[i + 1]:\n                continue\n            if a[i] > a[i + 1]:\n                operations.append((1, i + 1, i))\n                a[i] -= abs(a[i] - a[i + 1])\n                k += 1\n            else:\n                operations.append((2, i, i + 1))\n                a[i] += abs(a[i] - a[i + 1])\n                k += 1\n\n        return k, operations\n\n    def find_min_operations_with_all_elements_equal(a):\n        n = len(a)\n        operations = []\n        k = 0\n\n        for i in range(n - 1):\n            if a[i] == a[i + 1]:\n                continue\n            if a[i] > a[i + 1]:\n                operations.append((1, i + 1, i))\n                a[i] -= abs(a[i] - a[i + 1])\n                k += 1\n            else:\n                operations.append((2, i, i + 1))\n                a[i] += abs(a[i] - a[i + 1])\n                k += 1\n\n        return k, operations\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    k, operations = find_min_operations(a)\n\n    return f\"{k}\\n\" + \"\\n\".join(f\"{t} {i} {j}\" for t, i, j in operations)",
        "test": "",
        "num_ids": 621
    },
    {
        "number": 4410,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(s: str, k: int) -> bool:\n        n = len(s)\n        for i in range(n):\n            if s[i] == \"1\":\n                for j in range(max(0, i - k), min(n, i + k + 1)):\n                    if i != j and s[j] == \"1\":\n                        return False\n        return True\n\n    def count_free_tables(s: str) -> int:\n        return s.count(\"0\")\n\n    def find_max_occupied_tables(n: int, k: int, s: str) -> int:\n        if not is_valid(s, k):\n            return 0\n\n        free_tables = count_free_tables(s)\n        max_occupied_tables = 0\n\n        for i in range(free_tables):\n            max_occupied_tables += 1\n            if not is_valid(s.replace(\"0\", \"1\", i), k):\n                max_occupied_tables -= 1\n                break\n\n        return max_occupied_tables\n\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    result = []\n\n    for i in range(1, t + 1):\n        n, k = map(int, lines[2 * i - 1].split())\n        s = lines[2 * i]\n        result.append(find_max_occupied_tables(n, k, s))\n\n    return \"\\n\".join(map(str, result))",
        "test": "",
        "num_ids": 372
    },
    {
        "number": 4411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_bad(point, segments, k):\n        count = 0\n        for segment in segments:\n            if segment[0] <= point <= segment[1]:\n                count += 1\n        return count > k\n\n    def find_min_removals(n, k, segments):\n        segments.sort(key=lambda x: (x[1], x[0]))\n        removals = []\n        for i in range(n):\n            if is_bad(segments[i][0], segments, k):\n                removals.append(segments[i])\n        return removals\n\n    def find_min_removal_indices(removals, segments):\n        indices = []\n        for removal in removals:\n            indices.append(segments.index(removal) + 1)\n        return indices\n\n    lines = stdin.split('\\n')\n    n, k = map(int, lines[0].split())\n    segments = [list(map(int, line.split())) for line in lines[1:n+1]]\n\n    removals = find_min_removals(n, k, segments)\n    removal_indices = find_min_removal_indices(removals, segments)\n\n    return f\"{len(removals)}\\n{' '.join(map(str, removal_indices))}\"",
        "test": "",
        "num_ids": 321
    },
    {
        "number": 4412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(x, y, z):\n        return all(x % i != 0 for i in (y, z)) and \\\n               all(y % i != 0 for i in (x, z)) and \\\n               all(z % i != 0 for i in (x, y))\n\n    def find_max_prettiness(a):\n        n = len(a)\n        dp = [0] * n\n        for i in range(n):\n            dp[i] = a[i]\n        for i in range(n):\n            for j in range(i):\n                if is_valid(a[i], a[j], 0):\n                    dp[i] = max(dp[i], dp[j] + a[i])\n            for k in range(j):\n                if is_valid(a[i], a[j], a[k]):\n                    dp[i] = max(dp[i], dp[j] + a[i], dp[k] + a[i])\n        return max(dp)\n\n    queries = stdin.strip().split('\\n')[1:]\n    result = []\n    for query in queries:\n        n, *a = list(map(int, query.strip().split()))\n        result.append(find_max_prettiness(a))\n    return '\\n'.join(map(str, result))",
        "test": "",
        "num_ids": 335
    },
    {
        "number": 4413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def min_teams(a: List[int]) -> int:\n        a.sort()\n        n = len(a)\n        teams = 1\n        for i in range(1, n):\n            if a[i] - a[i - 1] > 1:\n                teams += 1\n        return teams\n\n    queries = [line.strip() for line in stdin.split('\\n') if line.strip()]\n    q = int(queries[0])\n    result = []\n    for i in range(1, q + 1):\n        n = int(queries[2 * i - 1])\n        a = list(map(int, queries[2 * i].split()))\n        result.append(min_teams(a))\n\n    return '\\n'.join(map(str, result))",
        "test": "",
        "num_ids": 196
    },
    {
        "number": 4414,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_x_y(a, b, n, S):\n        if a == 0:\n            return S % n == 0 and S // n <= b\n        if b == 0:\n            return S % n == 0 and S // n <= a\n        if S % n != 0:\n            return False\n        x = S // n\n        if x > a:\n            return False\n        y = S // n\n        if y > b:\n            return False\n        return True\n\n    q = int(stdin.split('\\n')[0])\n    test_cases = [list(map(int, case.split())) for case in stdin.split('\\n')[1:]]\n    results = []\n\n    for a, b, n, S in test_cases:\n        if find_x_y(a, b, n, S):\n            results.append('YES')\n        else:\n            results.append('NO')\n\n    return '\\n'.join(results)",
        "test": "",
        "num_ids": 233
    },
    {
        "number": 4415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(arr, target):\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    if sorted(a) != sorted(set(a)):\n        return \"NO\"\n\n    increasing, decreasing = [], []\n    for i in range(n):\n        if binary_search(increasing, a[i]) == -1:\n            increasing.append(a[i])\n        if binary_search(decreasing, a[i]) == -1:\n            decreasing.append(a[i])\n\n    increasing.sort()\n    decreasing.sort(reverse=True)\n\n    if increasing + decreasing != a:\n        return \"NO\"\n\n    return \"YES\\n{}\\n{}\\n{}\\n{}\".format(\n        len(increasing),\n        \" \".join(map(str, increasing)),\n        len(decreasing),\n        \" \".join(map(str, decreasing))\n    )",
        "test": "",
        "num_ids": 330
    },
    {
        "number": 4416,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(books, k, n):\n        left, right = 0, sum(t for t, a, b in books)\n        while left <= right:\n            mid = (left + right) // 2\n            alice_books, bob_books = 0, 0\n            for t, a, b in books:\n                if t <= mid:\n                    if a == 1:\n                        alice_books += 1\n                    if b == 1:\n                        bob_books += 1\n            if alice_books >= k and bob_books >= k:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n\n    n, k = map(int, stdin.readline().split())\n    books = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    result = binary_search(books, k, n)\n    return str(result) if result != float('inf') else '-1'",
        "test": "",
        "num_ids": 245
    },
    {
        "number": 4417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_price(n: int, k: int, prices: List[int]) -> int:\n        prices.sort()\n        max_price = prices[n - 1]\n        min_price = prices[0]\n        for i in range(1, n):\n            if prices[i] - min_price > k:\n                max_price = min(max_price, prices[i - 1] + k)\n                min_price = prices[i]\n        return min(max_price, prices[n - 1] + k)\n\n    queries = [line.strip().split() for line in stdin.split('\\n') if line.strip()]\n    q = int(queries[0][0])\n    results = []\n\n    for i in range(1, len(queries), 2):\n        n, k = map(int, queries[i])\n        prices = list(map(int, queries[i + 1]))\n        max_price = find_max_price(n, k, prices)\n        results.append(max_price)\n\n    return '\\n'.join(map(str, results))",
        "test": "",
        "num_ids": 270
    },
    {
        "number": 4418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    def is_good(arr):\n        if len(arr) % 6 != 0:\n            return False\n        for i in range(0, len(arr), 6):\n            if not set(arr[i:i+6]).issubset({4, 8, 15, 16, 23, 42}):\n                return False\n        return True\n\n    def remove_elements(arr):\n        for i in range(len(arr)):\n            if is_good(arr[:i] + arr[i+1:]):\n                return i\n        return -1\n\n    count = 0\n    while not is_good(a) and count < len(a):\n        index = remove_elements(a)\n        if index == -1:\n            break\n        a.pop(index)\n        count += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 245
    },
    {
        "number": 4419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_moves(a: int, b: int) -> int:\n        if a == b:\n            return 0\n        moves = []\n        for k in range(1, 11):\n            if a + k == b:\n                moves.append(1)\n            elif a - k == b:\n                moves.append(1)\n            else:\n                moves.append(find_min_moves(a + k, b) or find_min_moves(a - k, b))\n        return min(moves) + 1\n\n    t = int(stdin.split('\\n')[0])\n    test_cases = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:-1]]\n    outputs = [find_min_moves(a, b) for a, b in test_cases]\n    return '\\n'.join(map(str, outputs))",
        "test": "",
        "num_ids": 220
    },
    {
        "number": 4420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_k(x: int, y: int, n: int) -> int:\n        return x * ((n - y) // x) + y\n\n    t = int(stdin.readline())\n    result = []\n    for _ in range(t):\n        x, y, n = map(int, stdin.readline().split())\n        k = find_max_k(x, y, n)\n        result.append(str(k))\n    return \"\\n\".join(result)",
        "test": "",
        "num_ids": 123
    },
    {
        "number": 4421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    d.sort()\n    count = 0\n    i, j = 0, n - 1\n    while i < j:\n        if (d[i] + d[j]) % k == 0:\n            count += 1\n            i += 1\n            j -= 1\n        elif (d[i] + d[j]) % k < k / 2:\n            i += 1\n        else:\n            j -= 1\n    return str(count)",
        "test": "",
        "num_ids": 144
    },
    {
        "number": 4422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, S = stdin.split()\n    N, K = int(N), int(K)\n    S = list(S)\n    S[K-1] = S[K-1].lower()\n    return ''.join(S)",
        "test": "",
        "num_ids": 62
    },
    {
        "number": 4423,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def sort_key(x):\n        return x[0], -x[1]\n\n    N = int(stdin.readline())\n    restaurants = []\n    for i in range(N):\n        city, score = stdin.readline().strip().split()\n        restaurants.append((city, int(score), i + 1))\n\n    restaurants.sort(key=sort_key)\n\n    return \"\\n\".join(str(r[2]) for r in restaurants)\n",
        "test": "",
        "num_ids": 120
    },
    {
        "number": 4424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    total = K * 500\n    if total >= X:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 49
    },
    {
        "number": 4425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    p = 0\n    for i in range(1, N):\n        p += (1 / 3) * (1 / 2) ** (i - 1)\n    return str(p)",
        "test": "",
        "num_ids": 64
    },
    {
        "number": 4426,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = [\"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"]\n    today = days.index(stdin)\n    days_to_sunday = 7 - today\n    if days_to_sunday == 0:\n        days_to_sunday = 7\n    return days_to_sunday",
        "test": "",
        "num_ids": 93
    },
    {
        "number": 4427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n    x = [x_2000]\n    for i in range(10):\n        x.append(r * x[-1] - D)\n    return '\\n'.join(map(str, x[1:])) + '\\n'",
        "test": "",
        "num_ids": 81
    },
    {
        "number": 4428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    d = list(map(int, stdin.split('\\n')[1].split()))\n\n    d.sort()\n\n    if n % 2 == 0:\n        a = n // 2\n        c = a\n    else:\n        a = n // 2\n        c = a + 1\n\n    b = n - a - c\n\n    sum_1 = sum(d[:a])\n    sum_2 = sum(d[a:a + b])\n    sum_3 = sum(d[a + b:])\n\n    while sum_1 != sum_3:\n        if sum_1 > sum_3:\n            a -= 1\n            b += 1\n        else:\n            a += 1\n            b -= 1\n\n        sum_1 = sum(d[:a])\n        sum_2 = sum(d[a:a + b])\n        sum_3 = sum(d[a + b:])\n\n    return str(sum_1)",
        "test": "",
        "num_ids": 248
    },
    {
        "number": 4429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_solution(x: int, y: int, z: int) -> str:\n        if x == y == z:\n            return \"YES 1 1 1\"\n        elif x == y or y == z or x == z:\n            return \"NO\"\n        else:\n            a = b = c = 1\n            while a <= x and b <= y and c <= z:\n                if a == b == c:\n                    return \"YES {} {} {}\".format(a, b, c)\n                elif a == b:\n                    c += 1\n                elif b == c:\n                    a += 1\n                elif a == c:\n                    b += 1\n                else:\n                    a += 1\n                    b += 1\n                    c += 1\n            return \"NO\"\n\n    t = int(stdin.split('\\n')[0])\n    test_cases = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    output = []\n\n    for x, y, z in test_cases:\n        output.append(find_solution(x, y, z))\n\n    return '\\n'.join(output)",
        "test": "",
        "num_ids": 288
    },
    {
        "number": 4430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0].split())\n    a = list(map(int, stdin.split()[1].split()))\n\n    a.sort(reverse=True)\n\n    total_objects = sum(a)\n    total_boxes = m * k\n\n    if total_objects <= total_boxes:\n        return str(n)\n    else:\n        count = 0\n        current_box = k\n        for i in range(n):\n            if current_box >= a[i]:\n                current_box -= a[i]\n                count += 1\n            else:\n                break\n        return str(count)",
        "test": "",
        "num_ids": 162
    },
    {
        "number": 4431,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    available_letters = set(stdin.readline().split())\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if set(substring).issubset(available_letters):\n                count += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 121
    },
    {
        "number": 4432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_alternating(subsequence: list) -> bool:\n        for i in range(len(subsequence) - 1):\n            if subsequence[i] * subsequence[i + 1] > 0:\n                return False\n        return True\n\n    def max_alternating_subsequence(sequence: list) -> int:\n        max_sum = 0\n        for length in range(1, len(sequence) + 1):\n            for start in range(len(sequence) - length + 1):\n                subsequence = sequence[start:start + length]\n                if is_alternating(subsequence):\n                    max_sum = max(max_sum, sum(subsequence))\n        return max_sum\n\n    t = int(stdin.readline())\n    result = []\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        result.append(max_alternating_subsequence(a))\n    return \"\\n\".join(map(str, result))",
        "test": "",
        "num_ids": 258
    },
    {
        "number": 4433,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def kruskal(n, edges):\n        parent = [i for i in range(n)]\n        rank = [0] * n\n\n        def find(u):\n            if u == parent[u]:\n                return u\n            parent[u] = find(parent[u])\n            return parent[u]\n\n        def union(u, v):\n            pu, pv = find(u), find(v)\n            if pu == pv:\n                return False\n            if rank[pu] > rank[pv]:\n                parent[pv] = pu\n            else:\n                parent[pu] = pv\n                if rank[pu] == rank[pv]:\n                    rank[pv] += 1\n            return True\n\n        mst = []\n        for e in sorted(edges, key=lambda x: x[2]):\n            u, v, w = e\n            if union(u - 1, v - 1):\n                mst.append(e)\n        return mst\n\n    def find_max_degree(n, edges):\n        degrees = [0] * n\n        for e in edges:\n            u, v, w = e\n            degrees[u - 1] += 1\n            degrees[v - 1] += 1\n        return max(degrees)\n\n    n, m = map(int, stdin.readline().split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.readline().split())\n        edges.append((u, v, 0))\n\n    mst = kruskal(n, edges)\n    max_degree = find_max_degree(n, mst)\n    result = [e for e in mst if e[2] == max_degree]\n\n    return \"\\n\".join(f\"{u} {v}\" for u, v, w in result)",
        "test": "",
        "num_ids": 458
    },
    {
        "number": 4434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def min_moves(n: int) -> int:\n        if n == 1:\n            return 0\n        else:\n            return (n - 1) * (n - 1) + 1\n\n    t = int(stdin.split('\\n')[0])\n    result = []\n    for i in range(t):\n        n = int(stdin.split('\\n')[i + 1])\n        result.append(min_moves(n))\n\n    return '\\n'.join(map(str, result))\n",
        "test": "",
        "num_ids": 129
    },
    {
        "number": 4435,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    d = [0] * n\n    q = []\n\n    for i in range(n):\n        if a[i] % 2 != i % 2:\n            d[i] = 1\n            q.append(i)\n\n    while q:\n        i = q.pop(0)\n        for j in [i - a[i], i + a[i]]:\n            if 1 <= j <= n and d[i] + 1 < d[j]:\n                d[j] = d[i] + 1\n                q.append(j)\n\n    return \" \".join(map(str, d))",
        "test": "",
        "num_ids": 186
    },
    {
        "number": 4436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_abc(n: int) -> str:\n        for a in range(2, int(n ** (1 / 3)) + 1):\n            if n % a == 0:\n                b, c = n // a, n // a\n                while b > a:\n                    if a * b * c == n:\n                        return f\"{a} {b} {c}\\n\"\n                    b -= 1\n                    c += 1\n        return \"NO\\n\"\n\n    t = int(stdin.split(\"\\n\", 1)[0])\n    test_cases = stdin.split(\"\\n\", 1)[1].split(\"\\n\")\n    output = []\n\n    for n in test_cases:\n        n = int(n)\n        if n == 2:\n            output.append(\"YES\\n2 2 2\\n\")\n        elif n == 3:\n            output.append(\"YES\\n2 2 3\\n\")\n        else:\n            output.append(find_abc(n))\n\n    return \"\\n\".join(output)",
        "test": "",
        "num_ids": 260
    },
    {
        "number": 4437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    def count_a_b(s: str, l: int) -> tuple:\n        a_count = s[:l].count('a')\n        b_count = s[:l].count('b')\n        return a_count, b_count\n\n    operations = 0\n    for l in range(2, n + 1, 2):\n        a_count, b_count = count_a_b(s, l)\n        if a_count != b_count:\n            operations += abs(a_count - b_count)\n            s = s[:l - 1] + ('a' if s[l - 1] == 'b' else 'b') + s[l:]\n\n    return f\"{operations}\\n{s}\"",
        "test": "",
        "num_ids": 205
    },
    {
        "number": 4438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def distance(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n    def find_level(p):\n        return max(p[0], p[1])\n\n    def find_min_level(points):\n        return min(find_level(p) for p in points)\n\n    def dfs(points, visited, current_level, total_distance):\n        if not points:\n            return total_distance\n\n        next_level = current_level + 1\n        next_points = [p for p in points if find_level(p) == next_level]\n\n        for i, p in enumerate(points):\n            if p not in next_points and find_level(p) == current_level:\n                if p not in visited:\n                    visited.add(p)\n                    total_distance += distance((0, 0), p)\n                    next_distance = dfs(next_points, visited, next_level, total_distance)\n                    if next_distance is not None:\n                        return next_distance\n                    visited.remove(p)\n                    total_distance -= distance((0, 0), p)\n\n                next_points.append(p)\n                next_distance = dfs(next_points, visited, current_level, total_distance)\n                if next_distance is not None:\n                    return next_distance\n                next_points.pop()\n\n        return None\n\n    n = int(stdin.readline().strip())\n    points = [tuple(map(int, stdin.readline().strip().split())) for _ in range(n)]\n\n    min_level = find_min_level(points)\n    points = [p for p in points if find_level(p) == min_level]\n\n    visited = set()\n    total_distance = 0\n    min_distance = dfs(points, visited, min_level, total_distance)\n\n    return str(min_distance)",
        "test": "",
        "num_ids": 484
    },
    {
        "number": 4439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    correct_choice = set(range(1, 4)) - set([a, b])\n    return str(correct_choice.pop())",
        "test": "",
        "num_ids": 49
    },
    {
        "number": 4440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    max_volume = 0\n\n    for a in range(1, L):\n        for b in range(1, L - a + 1):\n            c = L - a - b\n            volume = a * b * c\n            if volume > max_volume:\n                max_volume = volume\n\n    return f\"{max_volume:.12f}\"",
        "test": "",
        "num_ids": 96
    },
    {
        "number": 4441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    if N == 1:\n        return \"Hello World\"\n    else:\n        A, B = map(int, stdin.split()[1:])\n        return str(A + B)",
        "test": "",
        "num_ids": 62
    },
    {
        "number": 4442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    str_a = str(a) * b\n    str_b = str(b) * a\n    return str_a if str_a < str_b else str_b",
        "test": "",
        "num_ids": 58
    },
    {
        "number": 4443,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip()\n    if c == 'z':\n        return 'a'\n    else:\n        return chr(ord(c) + 1)",
        "test": "",
        "num_ids": 41
    },
    {
        "number": 4444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return t + s",
        "test": "",
        "num_ids": 18
    },
    {
        "number": 4445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    a.sort()\n\n    if n % 2 == 0:\n        for i in range(n - 1, 0, -2):\n            if a[i] % 2 != a[i - 1] % 2:\n                a.pop(i)\n                a.pop(i - 1)\n                break\n\n    else:\n        for i in range(n - 1, 0, -2):\n            if a[i] % 2 == a[i - 1] % 2:\n                a.pop(i)\n                a.pop(i - 1)\n                break\n\n    return sum(a)",
        "test": "",
        "num_ids": 193
    },
    {
        "number": 4446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k, hp = map(int, stdin.split())\n    hp = list(map(int, input().split()))\n\n    points = 0\n    i = 0\n    while i < n:\n        if k > 0 and hp[i] <= a:\n            k -= 1\n            points += 1\n            i += 1\n        elif hp[i] <= a + b:\n            points += 1\n            i += 1\n        hp[i] -= min(a, hp[i])\n        if i < n:\n            hp[i] -= min(b, hp[i])\n\n    return str(points)",
        "test": "",
        "num_ids": 166
    },
    {
        "number": 4447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    c = [0] * m\n    for x in a:\n        c[x % m] += 1\n\n    moves = 0\n    for i in range(m):\n        if c[i] > n // m:\n            moves += c[i] - n // m\n        elif c[i] < n // m:\n            moves += n // m - c[i]\n\n    for i in range(len(a)):\n        if a[i] % m != 0 and a[i] + 1 % m == 0:\n            a[i] += 1\n            moves -= 1\n\n    return f\"{moves}\\n{' '.join(map(str, a))}\"",
        "test": "",
        "num_ids": 204
    },
    {
        "number": 4448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    offers = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n\n    days = 0\n    burles = 1\n    microtransactions = [0] * n\n\n    while any(k[i] > microtransactions[i] for i in range(n)):\n        days += 1\n        burles += 1\n        for i in range(n):\n            if k[i] > microtransactions[i]:\n                if days == offers[i][0] and offers[i][1] == i + 1:\n                    microtransactions[i] += 1\n                    burles -= 1\n                elif days % 2 == 0 and days != offers[i][0] and offers[i][1] == i + 1:\n                    microtransactions[i] += 1\n                    burles -= 2\n                elif days % 2 != 0 and days != offers[i][0]:\n                    microtransactions[i] += 1\n                    burles -= 2\n\n    return str(days)",
        "test": "",
        "num_ids": 291
    },
    {
        "number": 4449,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(a, b, c, d):\n        if a == b and c == d:\n            return True\n        if a == c and b == d:\n            return True\n        if a == d and b == c:\n            return True\n        return False\n\n    def find_area(a, b, c, d):\n        if is_valid(a, b, c, d):\n            return a * b\n        return None\n\n    def check_rectangles(n, sticks):\n        areas = []\n        for i in range(0, len(sticks), 4):\n            a, b, c, d = sticks[i:i + 4]\n            area = find_area(a, b, c, d)\n            if area is not None:\n                areas.append(area)\n\n        if len(areas) != n:\n            return False\n\n        return len(set(areas)) == 1\n\n    queries = stdin.split(\"\\n\")\n    q = int(queries[0])\n    output = []\n\n    for i in range(1, q + 1):\n        n = int(queries[i * 2 - 1])\n        sticks = list(map(int, queries[i * 2].split()))\n\n        if check_rectangles(n, sticks):\n            output.append(\"YES\")\n        else:\n            output.append(\"NO\")\n\n    return \"\\n\".join(output)",
        "test": "",
        "num_ids": 349
    },
    {
        "number": 4450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split('\\n')[0].split())\n    graph = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        graph[i][i] = 0\n    for i in range(m):\n        x, y, w = map(int, stdin.split('\\n')[i + 1].split())\n        graph[x - 1][y - 1] = w\n        graph[y - 1][x - 1] = w\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j])\n    return str(sorted([graph[i][j] for i in range(n) for j in range(n) if i < j])[k - 1])",
        "test": "",
        "num_ids": 225
    },
    {
        "number": 4451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def diversity(team):\n        return max(team) - min(team)\n\n    def find_teams(n, a, k):\n        teams = []\n        for i in range(k):\n            teams.append([])\n        i = 0\n        while a:\n            teams[i % k].append(a.pop())\n            i += 1\n        return teams\n\n    def find_min_diversity(n, a):\n        min_diversity = float('inf')\n        min_k = 0\n        for k in range(3, n + 1):\n            teams = find_teams(n, a.copy(), k)\n            total_diversity = sum(diversity(team) for team in teams)\n            if total_diversity < min_diversity:\n                min_diversity = total_diversity\n                min_k = k\n        return min_diversity, min_k\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    min_diversity, min_k = find_min_diversity(n, a)\n    teams = find_teams(n, a, min_k)\n    team_assignment = [-1] * n\n\n    for i, team in enumerate(teams):\n        for student in team:\n            team_assignment[student - 1] = i + 1\n\n    output = [str(min_diversity), str(min_k)]\n    output.append(' '.join(map(str, team_assignment)))\n    return '\\n'.join(output) + '\\n'",
        "test": "",
        "num_ids": 393
    },
    {
        "number": 4452,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_round(num: int) -> bool:\n        return num % 10 == 0\n\n    def find_min_summands(num: int) -> int:\n        if num <= 9:\n            return 1\n        count = 0\n        while num > 0:\n            count += 1\n            num //= 10\n        return count\n\n    def find_round_numbers(num: int) -> List[int]:\n        round_numbers = []\n        for i in range(1, 10):\n            round_num = i * (10 ** (find_min_summands(num) - 1))\n            if is_round(round_num) and num >= round_num:\n                round_numbers.append(round_num)\n        return round_numbers\n\n    def find_min_sum_representation(num: int) -> List[int]:\n        if num <= 9:\n            return [num]\n        round_numbers = find_round_numbers(num)\n        min_sum_representation = []\n        for round_num in round_numbers:\n            min_sum_representation.append(round_num)\n            if round_num == num:\n                break\n            num -= round_num\n        return min_sum_representation\n\n    t = int(stdin.readline().strip())\n    output = []\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        min_sum_representation = find_min_sum_representation(n)\n        output.append(f\"{len(min_sum_representation)} {' '.join(map(str, min_sum_representation))}\")\n    return \"\\n\".join(output)",
        "test": "",
        "num_ids": 413
    },
    {
        "number": 4453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_cycle_length(p: List[int]) -> int:\n        n = len(p)\n        vis = [False] * n\n        for i in range(n):\n            if not vis[i]:\n                cycle_length = 0\n                j = i\n                while not vis[j]:\n                    vis[j] = True\n                    j = p[j] - 1\n                    cycle_length += 1\n                if cycle_length > 0:\n                    return cycle_length\n        return 1\n\n    def find_first_return_days(n: int, p: List[int]) -> List[int]:\n        cycle_length = find_cycle_length(p)\n        first_return_days = [-1] * n\n        for i in range(n):\n            if first_return_days[i] == -1:\n                j = i\n                for d in range(cycle_length):\n                    j = p[j] - 1\n                    if first_return_days[j] == -1:\n                        first_return_days[j] = d + 1\n        return first_return_days\n\n    q = int(stdin.readline().strip())\n    result = []\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        p = list(map(int, stdin.readline().strip().split()))\n        first_return_days = find_first_return_days(n, p)\n        result.append(first_return_days)\n\n    return \"\\n\".join([\" \".join(map(str, res)) for res in result]) ",
        "test": "",
        "num_ids": 392
    },
    {
        "number": 4454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_price(n: int, prices: List[int]) -> int:\n        total_price = sum(prices)\n        min_price = total_price // n\n        if total_price % n != 0:\n            min_price += 1\n        return min_price\n\n    queries = [line.strip().split() for line in stdin.split('\\n') if line.strip()]\n    q = int(queries[0][0])\n    result = []\n\n    for i in range(1, q + 1):\n        n = int(queries[i][0])\n        prices = [int(price) for price in queries[i][1:]]\n        min_price = find_min_price(n, prices)\n        result.append(str(min_price))\n\n    return '\\n'.join(result)",
        "test": "",
        "num_ids": 203
    },
    {
        "number": 4455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def can_be_mentor(a, b, skills, quarrels):\n        return skills[a] > skills[b] and (a, b) not in quarrels and (b, a) not in quarrels\n\n    n, k = map(int, stdin.readline().split())\n    skills = list(map(int, stdin.readline().split()))\n    quarrels = set()\n    for _ in range(k):\n        x, y = map(int, stdin.readline().split())\n        quarrels.add((x, y))\n\n    result = [sum(can_be_mentor(i, j, skills, quarrels) for j in range(n) if j != i) for i in range(n)]\n    return \" \".join(map(str, result))",
        "test": "",
        "num_ids": 196
    },
    {
        "number": 4456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    q = list(map(int, stdin.readline().split()))\n\n    if n < k:\n        return \"NO\"\n\n    s = [chr(i + ord('a')) for i in range(k)]\n    for i in range(n - k):\n        s.append(s[-1])\n\n    for i in range(n - 1):\n        if p[i] > p[i + 1]:\n            j = s.index(chr(ord(s[p[i] - 1]) + 1))\n            s[p[i] - 1], s[j] = s[j], s[p[i] - 1]\n        if q[i] > q[i + 1]:\n            j = s.index(chr(ord(s[q[i] - 1]) + 1))\n            s[q[i] - 1], s[j] = s[j], s[q[i] - 1]\n\n    return \"YES\\n\" + \"\".join(s)",
        "test": "",
        "num_ids": 284
    },
    {
        "number": 4457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    def calc_shots(order):\n        shots = 0\n        for i in range(n):\n            shots += (a[order[i] - 1] * sum(1 for j in range(i) if order[j] < order[i]) + 1)\n        return shots\n\n    min_shots = float('inf')\n    min_order = []\n\n    for order in permutations(range(1, n + 1)):\n        shots = calc_shots(order)\n        if shots < min_shots:\n            min_shots = shots\n            min_order = order\n\n    return f\"{min_shots}\\n{' '.join(map(str, min_order))}\"\n\nfrom itertools import permutations",
        "test": "",
        "num_ids": 220
    },
    {
        "number": 4458,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P = int(stdin.split()[0]), list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(N):\n        if all(P[i] <= P[j] for j in range(i + 1)):\n            count += 1\n    return str(count)",
        "test": "",
        "num_ids": 84
    },
    {
        "number": 4459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, a = map(int, stdin.split())\n    a = sorted(a)\n    count = 0\n    i = 0\n    while i < N:\n        j = i + 1\n        while j < N and a[j] == a[i]:\n            j += 1\n        if j - i < a[i]:\n            count += a[i] - (j - i)\n            i = j\n        else:\n            i = j\n    return str(count)",
        "test": "",
        "num_ids": 119
    },
    {
        "number": 4460,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    \n    if x_1 == 0:\n        return \"1\"\n    elif x_2 == 0:\n        return \"2\"\n    elif x_3 == 0:\n        return \"3\"\n    elif x_4 == 0:\n        return \"4\"\n    elif x_5 == 0:\n        return \"5\"\n    else:\n        return \"None\"",
        "test": "",
        "num_ids": 124
    },
    {
        "number": 4461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    return str(max(0, (H * W) % 3))",
        "test": "",
        "num_ids": 34
    },
    {
        "number": 4462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, a = map(int, stdin.split())\n    a = list(map(int, a.split()))\n\n    for i in range(N - 1):\n        if (a[i] * a[i + 1]) % 4 != 0:\n            return \"No\"\n    return \"Yes\"",
        "test": "",
        "num_ids": 78
    },
    {
        "number": 4463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s_sorted, t_sorted = sorted(s), sorted(t)\n\n    for i in range(len(s_sorted)):\n        if s_sorted[i] != t_sorted[i]:\n            if s_sorted[i] < t_sorted[i]:\n                return \"Yes\"\n            else:\n                return \"No\"\n\n    if len(s) < len(t):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 121
    },
    {
        "number": 4464,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C == 0:\n        return \"YES\"\n    for i in range(1, B):\n        if (A * i) % B == C:\n            return \"YES\"\n    return \"NO\"",
        "test": "",
        "num_ids": 68
    },
    {
        "number": 4465,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    area = A * B - (A + B - 2)\n    return str(area)",
        "test": "",
        "num_ids": 39
    },
    {
        "number": 4466,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    return str((X - 2 * Z) // (Y + 2 * Z))",
        "test": "",
        "num_ids": 39
    },
    {
        "number": 4467,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_friendly_pair(red_point, blue_point):\n        return red_point[0] < blue_point[0] and red_point[1] < blue_point[1]\n\n    def max_friendly_pairs(red_points, blue_points):\n        red_points.sort()\n        blue_points.sort()\n        i, j, count = 0, 0, 0\n\n        while i < len(red_points) and j < len(blue_points):\n            if is_friendly_pair(red_points[i], blue_points[j]):\n                count += 1\n                i += 1\n                j += 1\n            elif red_points[i] < blue_points[j]:\n                i += 1\n            else:\n                j += 1\n\n        return count\n\n    N = int(stdin.readline().strip())\n    red_points = [tuple(map(int, stdin.readline().strip().split())) for _ in range(N)]\n    blue_points = [tuple(map(int, stdin.readline().strip().split())) for _ in range(N)]\n\n    return str(max_friendly_pairs(red_points, blue_points))",
        "test": "",
        "num_ids": 297
    },
    {
        "number": 4468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split()[0:2])\n    t = list(map(int, stdin.split()[2:]))\n\n    total_time = 0\n    for i in range(N):\n        if i == 0:\n            total_time += t[i] + T\n        else:\n            total_time += max(0, t[i] - t[i - 1]) + T\n\n    return str(total_time)",
        "test": "",
        "num_ids": 116
    },
    {
        "number": 4469,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def process_query(query: str, books: list, left_books: list, right_books: list) -> int:\n        query_type, book_id = query.split()\n        book_id = int(book_id)\n        if query_type == 'L':\n            books.append(book_id)\n            left_books.append(book_id)\n        elif query_type == 'R':\n            books.append(book_id)\n            right_books.append(book_id)\n        else:\n            if book_id in left_books:\n                return len(left_books) - left_books.index(book_id) - 1\n            else:\n                return len(right_books) - right_books.index(book_id) - 1\n\n    queries = stdin.split('\\n')\n    q = int(queries[0])\n    books = []\n    left_books = []\n    right_books = []\n    answers = []\n\n    for i in range(1, q + 1):\n        query = queries[i]\n        if query[0] == '?':\n            answers.append(process_query(query, books, left_books, right_books))\n        else:\n            process_query(query, books, left_books, right_books)\n\n    return '\\n'.join(map(str, answers))",
        "test": "",
        "num_ids": 326
    },
    {
        "number": 4470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def min_moves(n: int) -> int:\n        moves = 0\n        while n > 1:\n            if n % 2 == 0:\n                n //= 2\n            elif n % 3 == 0:\n                n = n * 2 // 3\n            elif n % 5 == 0:\n                n = n * 4 // 5\n            else:\n                return -1\n            moves += 1\n        return moves\n\n    queries = [int(line) for line in stdin.splitlines()[1:]]\n    results = [min_moves(n) for n in queries]\n    return \"\\n\".join(str(result) for result in results)\n",
        "test": "",
        "num_ids": 169
    },
    {
        "number": 4471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def clear_field(n: int, a: List[int]) -> bool:\n        while any(a):\n            i = a.index(max(a))\n            a[i] += 2\n            for j in range(n):\n                a[j] = max(0, a[j] - 1)\n        return True\n\n    t = int(stdin.readline())\n    result = []\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        if clear_field(n, a):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n    return \"\\n\".join(result)",
        "test": "",
        "num_ids": 179
    },
    {
        "number": 4472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n\n    def is_equal(a: str, b: str) -> bool:\n        return a == b\n\n    def is_possible(a: str, b: str) -> bool:\n        for i in range(n):\n            if a[i] != b[i] and a[n - i - 1] != b[i]:\n                return False\n        return True\n\n    if is_equal(a, b):\n        return 0\n\n    if not is_possible(a, b):\n        return -1\n\n    preprocess_moves = 0\n    for i in range(n):\n        if a[i] != b[i] and a[n - i - 1] != b[i]:\n            a = a[:i] + b[i] + a[i + 1:]\n            preprocess_moves += 1\n\n    return preprocess_moves",
        "test": "",
        "num_ids": 249
    },
    {
        "number": 4473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def frog_jump(a, b, k):\n        position = 0\n        for i in range(1, k + 1):\n            if i % 2 == 0:\n                position += a\n            else:\n                position -= b\n        return position\n\n    t = int(stdin.split('\\n')[0])\n    queries = [list(map(int, query.split())) for query in stdin.split('\\n')[1:]]\n\n    results = []\n    for query in queries:\n        results.append(frog_jump(*query))\n\n    return '\\n'.join(map(str, results))",
        "test": "",
        "num_ids": 151
    },
    {
        "number": 4474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_number(n: int) -> bool:\n        powers = [3 ** i for i in range(20)]\n        for i in range(len(powers)):\n            for j in range(i, len(powers)):\n                if powers[i] + powers[j] > n:\n                    break\n                if powers[i] + powers[j] == n:\n                    return True\n        return False\n\n    def find_smallest_good_number(n: int) -> int:\n        while not is_good_number(n):\n            n += 1\n        return n\n\n    q = int(stdin.split('\\n')[0])\n    queries = [int(x) for x in stdin.split('\\n')[1:]]\n\n    results = []\n    for query in queries:\n        results.append(find_smallest_good_number(query))\n\n    return '\\n'.join(str(x) for x in results)",
        "test": "",
        "num_ids": 230
    },
    {
        "number": 4475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def min_product(a: int, b: int, x: int, y: int, n: int) -> int:\n        while n > 0 and a > x:\n            a -= 1\n            n -= 1\n        while n > 0 and b > y:\n            b -= 1\n            n -= 1\n        return a * b\n\n    t = int(stdin.split('\\n', 1)[0])\n    test_cases = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    results = [min_product(*test_case) for test_case in test_cases]\n    return '\\n'.join(map(str, results))",
        "test": "",
        "num_ids": 170
    },
    {
        "number": 4476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_min_moves(a: int, b: int) -> int:\n        if a == b:\n            return 0\n        moves = 0\n        while a != b:\n            if a < b:\n                x = (b - a) // 2 + 1\n                a += x\n                moves += 1\n            else:\n                y = (a - b) // 2\n                a -= y\n                moves += 1\n        return moves\n\n    t = int(stdin.split('\\n')[0])\n    test_cases = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:-1]]\n    results = [get_min_moves(a, b) for a, b in test_cases]\n    return '\\n'.join(map(str, results))",
        "test": "",
        "num_ids": 197
    },
    {
        "number": 4477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    total_keypresses = []\n    for i in range(1, t + 1):\n        x = int(stdin.split('\\n')[i])\n        digit = str(x)[0]\n        count = 0\n        for j in range(1, len(str(x)) + 1):\n            count += int(digit) * j\n        total_keypresses.append(str(count))\n    return '\\n'.join(total_keypresses)\n\nstdin = '''4\n22\n9999\n1\n777'''\n\nprint(solution(stdin)) ",
        "test": "",
        "num_ids": 160
    },
    {
        "number": 4478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def read_line() -> str:\n        return stdin.readline().strip()\n\n    def read_int() -> int:\n        return int(read_line())\n\n    def read_ints() -> List[int]:\n        return list(map(int, read_line().split()))\n\n    k = read_int()\n    sequences = []\n    for _ in range(k):\n        n = read_int()\n        sequence = read_ints()\n        sequences.append((n, sequence))\n\n    for i in range(k):\n        n1, sequence1 = sequences[i]\n        for j in range(i + 1, k):\n            n2, sequence2 = sequences[j]\n            for x in range(n1):\n                for y in range(n2):\n                    if sum(sequence1[:x] + sequence1[x + 1 :]) == sum(sequence2[:y] + sequence2[y + 1 :]):\n                        return f\"YES\\n{i + 1} {x + 1}\\n{j + 1} {y + 1}\\n\"\n    return \"NO\"",
        "test": "",
        "num_ids": 269
    },
    {
        "number": 4479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, K = map(int, stdin.split())\n    A = list(map(int, input().split()))\n    A.sort()\n    for i in range(K):\n        if A[i] < 0:\n            A[i] *= -1\n        else:\n            break\n    return sum(A)",
        "test": "",
        "num_ids": 80
    },
    {
        "number": 4480,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    total_sum = sum(A)\n    if total_sum % 3 != 0:\n        return \"false\"\n    target_sum = total_sum // 3\n    for i in range(1, len(A) - 1):\n        if A[i - 1] + A[i] > target_sum:\n            break\n        if A[i - 1] + A[i] == target_sum:\n            if A[i] + A[i + 1] == target_sum:\n                return \"true\"\n    return \"false\"",
        "test": "",
        "num_ids": 149
    },
    {
        "number": 4481,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    votes = stdin.split('\\n')[1:]\n    vote_count = {}\n\n    for vote in votes:\n        if vote in vote_count:\n            vote_count[vote] += 1\n        else:\n            vote_count[vote] = 1\n\n    max_count = max(vote_count.values())\n    result = [vote for vote, count in vote_count.items() if count == max_count]\n    result.sort()\n\n    return '\\n'.join(result)",
        "test": "",
        "num_ids": 135
    },
    {
        "number": 4482,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = list(map(int, stdin.split()))\n    a.sort()\n    mid = a[N // 2]\n    cost = sum([(x - mid) ** 2 for x in a])\n    return str(cost)",
        "test": "",
        "num_ids": 62
    },
    {
        "number": 4483,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    cake_cost = A\n    donut_cost = B\n    total_cost = cake_cost + donut_cost\n    max_donuts = X // total_cost\n    total_cost *= max_donuts\n    left_over = X - total_cost\n    return str(left_over)",
        "test": "",
        "num_ids": 92
    },
    {
        "number": 4484,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    mod = 10**9 + 7\n\n    # The number of ways to choose N pairs of adjacent positions for the dogs\n    num_dog_pairs = (N - 1) * N // 2\n\n    # The number of ways to choose M pairs of adjacent positions for the monkeys\n    num_monkey_pairs = (M - 1) * M // 2\n\n    # The number of ways to choose N pairs of non-adjacent positions for the dogs\n    num_dog_non_pairs = (2 * N - 1) * (N - 1) // 2\n\n    # The number of ways to choose M pairs of non-adjacent positions for the monkeys\n    num_monkey_non_pairs = (2 * M - 1) * (M - 1) // 2\n\n    # The number of ways to arrange the dogs and monkeys\n    num_arrangements = (num_dog_pairs + num_monkey_non_pairs) * (num_monkey_pairs + num_dog_non_pairs)\n\n    return str(num_arrangements % mod)",
        "test": "",
        "num_ids": 283
    },
    {
        "number": 4485,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    services = [tuple(map(int, stdin.readline().split())) for _ in range(M)]\n\n    for i in range(M):\n        a, b = services[i]\n        if a == 1:\n            for j in range(M):\n                if services[j][0] == a and services[j][1] == b:\n                    continue\n                if services[j][0] == b:\n                    if services[j][1] == N:\n                        return \"POSSIBLE\"\n    return \"IMPOSSIBLE\"",
        "test": "",
        "num_ids": 153
    },
    {
        "number": 4486,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    odd_indexed_chars = \"\"\n    for i in range(1, len(s), 2):\n        odd_indexed_chars += s[i]\n    return odd_indexed_chars",
        "test": "",
        "num_ids": 58
    },
    {
        "number": 4487,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if A[-1] == B[0] and B[-1] == C[0]:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "",
        "num_ids": 52
    },
    {
        "number": 4488,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"",
        "test": "",
        "num_ids": 58
    },
    {
        "number": 4489,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split('\\n')[:2])\n    blue_cards = stdin.split('\\n')[1:N + 1]\n    red_cards = stdin.split('\\n')[N + 1:]\n\n    max_profit = 0\n    for blue_card in blue_cards:\n        blue_profit = blue_cards.count(blue_card) - red_cards.count(blue_card)\n        max_profit = max(max_profit, blue_profit)\n\n    return str(max_profit)",
        "test": "",
        "num_ids": 138
    },
    {
        "number": 4490,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    bond_dict = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A'}\n    return bond_dict[stdin]",
        "test": "",
        "num_ids": 41
    },
    {
        "number": 4491,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [list(map(int, stdin.readline().split())) for _ in range(2)]\n\n    dp = [[0] * (N + 1) for _ in range(2)]\n    dp[0][1] = A[0][0]\n\n    for i in range(1, N):\n        dp[0][i + 1] = dp[0][i] + A[0][i]\n        dp[1][i + 1] = dp[1][i] + A[1][i]\n\n    return str(max(dp[0][N], dp[1][N]))",
        "test": "",
        "num_ids": 165
    },
    {
        "number": 4492,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    operations = 0\n    for i in range(N - 1):\n        if a[i] + a[i + 1] > x:\n            operations += (a[i] + a[i + 1]) - x\n            a[i] = min(a[i], x - a[i + 1])\n            a[i + 1] = min(a[i + 1], x - a[i])\n\n    return str(operations)",
        "test": "",
        "num_ids": 143
    },
    {
        "number": 4493,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    input_list = list(map(int, stdin.split()))\n    c = [[input_list[0], input_list[1], input_list[2]],\n         [input_list[3], input_list[4], input_list[5]],\n         [input_list[6], input_list[7], input_list[8]]]\n\n    # Check if Takahashi's statement is correct\n    for i in range(3):\n        for j in range(3):\n            # Find possible values of a_i and b_j\n            possible_a = [x for x in range(101)]\n            possible_b = [x for x in range(101)]\n            for k in range(3):\n                if k != i:\n                    possible_a = [x for x in possible_a if x + possible_b[j] == c[k][j]]\n                if k != j:\n                    possible_b = [x for x in possible_b if x + possible_a[i] == c[i][k]]\n\n            # Check if there is a valid pair of a_i and b_j\n            if len(possible_a) == 0 or len(possible_b) == 0:\n                return \"No\"\n\n    return \"Yes\"",
        "test": "",
        "num_ids": 309
    },
    {
        "number": 4494,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"ABC\"",
        "test": "",
        "num_ids": 27
    },
    {
        "number": 4495,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b + 1):\n        if i % x == 0:\n            count += 1\n    return str(count)",
        "test": "",
        "num_ids": 61
    },
    {
        "number": 4496,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    if d == 25:\n        return \"Christmas\"\n    elif d == 24:\n        return \"Christmas Eve\"\n    elif d == 23:\n        return \"Christmas Eve Eve\"\n    else:\n        return \"Christmas Eve Eve Eve\"",
        "test": "",
        "num_ids": 81
    },
    {
        "number": 4497,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    max_divisible_count = 0\n    max_divisible_number = 0\n\n    for i in range(1, n + 1):\n        divisible_count = 0\n        temp = i\n        while temp % 2 == 0:\n            divisible_count += 1\n            temp //= 2\n\n        if divisible_count > max_divisible_count:\n            max_divisible_count = divisible_count\n            max_divisible_number = i\n\n    return str(max_divisible_number)",
        "test": "",
        "num_ids": 148
    },
    {
        "number": 4498,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    \n    if a <= d:\n        return \"Yes\"\n    elif b - a <= d:\n        return \"Yes\"\n    elif c - b <= d:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 75
    },
    {
        "number": 4499,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    acronym = \"\"\n    for word in words:\n        acronym += word[0].upper()\n    return acronym",
        "test": "",
        "num_ids": 42
    },
    {
        "number": 4500,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A + B >= C:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 43
    },
    {
        "number": 4501,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, *x = list(map(int, stdin.split()))\n    dp = [0] * (A * N + 1)\n    dp[0] = 1\n\n    for i in range(N):\n        for j in range(A * N, x[i] - 1, -1):\n            dp[j] += dp[j - x[i]]\n\n    return str(dp[A * N])",
        "test": "",
        "num_ids": 109
    },
    {
        "number": 4502,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        b.reverse()\n    return ' '.join(map(str, b))",
        "test": "",
        "num_ids": 59
    },
    {
        "number": 4503,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    for i in range(N):\n        if A[i] >= H:\n            return \"Yes\"\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            if A[i] + A[j] >= H:\n                return \"Yes\"\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                if A[i] + A[j] + A[k] >= H:\n                    return \"Yes\"\n\n    return \"No\"",
        "test": "",
        "num_ids": 174
    },
    {
        "number": 4504,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    for i in range(n - 1, 0, -1):\n        if s[:i] == s[i:]:\n            return str(i)\n    return \"1\"",
        "test": "",
        "num_ids": 62
    },
    {
        "number": 4505,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if sorted(s) == ['a', 'b', 'c']:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 41
    },
    {
        "number": 4506,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n\n    MOD = 998244353\n\n    def f(l, r):\n        return sum(a[i] * b[i] for i in range(l, r + 1))\n\n    def min_sum(b):\n        n = len(b)\n        dp = [[0] * n for _ in range(n)]\n\n        for l in range(n):\n            for r in range(l, n):\n                if l == r:\n                    dp[l][r] = f(l, r)\n                else:\n                    dp[l][r] = dp[l][r - 1] + f(r, r) + dp[l][r - 1]\n\n        return sum(dp[l][r] for l in range(n) for r in range(l, n))\n\n    b.sort()\n    ans = min_sum(b)\n\n    return str(ans % MOD)",
        "test": "",
        "num_ids": 289
    },
    {
        "number": 4507,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(costs, k):\n        left, right = 0, sum(costs)\n        while left < right:\n            mid = (left + right) // 2\n            if sum(sorted(costs)[:k]) <= mid:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n\n    n, m, k = map(int, stdin.readline().split())\n    costs = list(map(int, stdin.readline().split()))\n    offers = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n\n    min_cost = binary_search(costs, k)\n    for x, y in offers:\n        if k % x == 0:\n            min_cost = min(min_cost, binary_search(costs, k - y * (k // x)))\n\n    return str(min_cost)",
        "test": "",
        "num_ids": 221
    },
    {
        "number": 4508,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find(parent, u):\n        if parent[u] == u:\n            return u\n        parent[u] = find(parent, parent[u])\n        return parent[u]\n\n    def union(parent, rank, u, v):\n        u_root = find(parent, u)\n        v_root = find(parent, v)\n\n        if u_root == v_root:\n            return False\n\n        if rank[u_root] > rank[v_root]:\n            parent[v_root] = u_root\n        elif rank[u_root] < rank[v_root]:\n            parent[u_root] = v_root\n        else:\n            parent[v_root] = u_root\n            rank[u_root] += 1\n        return True\n\n    n = int(stdin.readline().strip())\n    edges = [tuple(map(int, stdin.readline().strip().split())) for _ in range(n - 1)]\n\n    parent = [i for i in range(n + 1)]\n    rank = [0] * (n + 1)\n\n    for u, v in edges:\n        union(parent, rank, u, v)\n\n    dist = [0] * (n + 1)\n    dist[1] = float('inf')\n\n    for i in range(1, n + 1):\n        if i != 1:\n            dist[i] = float('inf')\n            for u, v in edges:\n                if u == i or v == i:\n                    dist[i] = 1\n                    break\n\n    for i in range(1, n + 1):\n        if i != 1:\n            dist[i] = min(dist[i], dist[find(parent, i)]) + 1\n\n    return min(dist[i] for i in range(1, n + 1)) - 1",
        "test": "",
        "num_ids": 454
    },
    {
        "number": 4509,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible(num, n):\n        return num % n == 0\n\n    def find_kth_not_divisible(n, k):\n        count = 0\n        i = 1\n        while count < k:\n            if not is_divisible(i, n):\n                count += 1\n                if count == k:\n                    return i\n            i += 1\n\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    result = []\n    for i in range(1, t + 1):\n        n, k = map(int, lines[i].split())\n        kth_not_divisible = find_kth_not_divisible(n, k)\n        result.append(str(kth_not_divisible))\n\n    return '\\n'.join(result)",
        "test": "",
        "num_ids": 210
    },
    {
        "number": 4510,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    ids = list(map(int, stdin.readline().split()))\n\n    conversations = []\n    for i in range(n):\n        id_i = ids[i]\n        if id_i in conversations:\n            continue\n        else:\n            if len(conversations) < k:\n                conversations.append(id_i)\n            else:\n                conversations.pop(0)\n                conversations.append(id_i)\n\n    m = len(conversations)\n    output = [str(m)]\n    output.append(\" \".join(map(str, conversations)))\n    return \"\\n\".join(output)",
        "test": "",
        "num_ids": 173
    },
    {
        "number": 4511,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    damage = 0\n    for i in range(n):\n        k = int(lines[i * 2 + 1])\n        cards = [list(map(int, line.split())) for line in lines[i * 2 + 2:i * 2 + 2 + k]]\n        cards.sort(key=lambda x: x[1], reverse=True)\n        total_cost = 0\n        count = 0\n        for j in range(k):\n            if total_cost + cards[j][0] <= 3:\n                total_cost += cards[j][0]\n                damage += cards[j][1]\n                if (count + 1) % 10 == 0:\n                    damage += cards[j][1]\n                count += 1\n    return str(damage)",
        "test": "",
        "num_ids": 214
    },
    {
        "number": 4512,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, q = stdin.split(\"\\n\")\n    q = int(q)\n    queries = [list(map(int, query.split())) for query in stdin.split(\"\\n\")[2:2 + q]]\n\n    for query in queries:\n        if query[0] == 1:\n            s = s[:query[1] - 1] + chr(query[2]) + s[query[1]:]\n        elif query[0] == 2:\n            print(len(set(s[query[1] - 1:query[2]])))\n\n    return \"\"",
        "test": "",
        "num_ids": 141
    },
    {
        "number": 4513,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        sudoku = []\n        for _ in range(9):\n            row = list(map(int, stdin.readline().strip()))\n            sudoku.append(row)\n\n        # Find rows with at least two equal elements\n        for i in range(9):\n            row = set(sudoku[i])\n            while len(row) == 9:\n                sudoku[i][sudoku[i].index(max(row))] = (sudoku[i][sudoku[i].index(max(row))]) % 9 + 1\n                row = set(sudoku[i])\n\n        # Find columns with at least two equal elements\n        for j in range(9):\n            col = set()\n            for i in range(9):\n                col.add(sudoku[i][j])\n            while len(col) == 9:\n                for i in range(9):\n                    if sudoku[i][j] == max(col):\n                        sudoku[i][j] = (sudoku[i][j]) % 9 + 1\n                        break\n                col = set()\n                for i in range(9):\n                    col.add(sudoku[i][j])\n\n        # Find blocks with at least two equal elements\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                block = set()\n                for k in range(3):\n                    for l in range(3):\n                        block.add(sudoku[i + k][j + l])\n                while len(block) == 9:\n                    for k in range(3):\n                        for l in range(3):\n                            if sudoku[i + k][j + l] == max(block):\n                                sudoku[i + k][j + l] = (sudoku[i + k][j + l]) % 9 + 1\n                                break\n                    block = set()\n                    for k in range(3):\n                        for l in range(3):\n                            block.add(sudoku[i + k][j + l])\n\n        # Print the resulting sudoku\n        for i in range(9):\n            print(\"\".join(map(str, sudoku[i])))\n\n    return \"\"",
        "test": "",
        "num_ids": 573
    },
    {
        "number": 4514,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(u: int, visited: set, order: list):\n        visited.add(u)\n        order.append(u)\n        for v in tree[u]:\n            if v not in visited:\n                dfs(v, visited, order)\n\n    def process_query(u: int, k: int) -> int:\n        order = []\n        dfs(u, set(), order)\n        return order[k - 1] if k <= len(order) else -1\n\n    n, q = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    tree = [[] for _ in range(n + 1)]\n    for i in range(2, n + 1):\n        tree[p[i - 1]].append(i)\n\n    result = []\n    for _ in range(q):\n        u, k = map(int, stdin.readline().split())\n        result.append(process_query(u, k))\n\n    return '\\n'.join(map(str, result))",
        "test": "",
        "num_ids": 263
    },
    {
        "number": 4515,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_possible(a, b, c, n):\n        if n % 3 == 0:\n            return a + b + c == n\n        else:\n            return False\n\n    t = int(stdin.split('\\n', 1)[0])\n    test_cases = stdin.split('\\n')[1:]\n\n    output = []\n    for case in test_cases:\n        a, b, c, n = map(int, case.split())\n        if is_possible(a, b, c, n):\n            output.append(\"YES\")\n        else:\n            output.append(\"NO\")\n\n    return '\\n'.join(output)",
        "test": "",
        "num_ids": 158
    },
    {
        "number": 4516,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n\n    def p_i(i, n):\n        return [i] + [j for j in range(1, i) if j not in x] + [j for j in range(i + 1, n + 1) if j not in x]\n\n    def pos(p, val):\n        return p.index(val)\n\n    def f(p):\n        return sum(abs(pos(p, x[i]) - pos(p, x[i + 1])) for i in range(m - 1))\n\n    return \" \".join(str(f(p_i(i, n))) for i in range(1, n + 1))",
        "test": "",
        "num_ids": 193
    },
    {
        "number": 4517,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find(parent, u):\n        if parent[u] == u:\n            return u\n        parent[u] = find(parent, parent[u])\n        return parent[u]\n\n    def union(parent, rank, u, v):\n        u = find(parent, u)\n        v = find(parent, v)\n        if u == v:\n            return False\n        if rank[u] > rank[v]:\n            parent[v] = u\n        else:\n            parent[u] = v\n            if rank[u] == rank[v]:\n                rank[v] += 1\n        return True\n\n    def is_ancestor(parent, u, v):\n        while v != parent[v]:\n            v = parent[v]\n        while u != parent[u]:\n            u = parent[u]\n        return u == v\n\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    parent = [i for i in range(n + 1)]\n    rank = [0] * (n + 1)\n    edges = []\n\n    for i in range(1, n):\n        u, v = map(int, lines[i].split())\n        edges.append((u, v))\n        union(parent, rank, u, v)\n\n    result = []\n    for i in range(n, n + m):\n        k = int(lines[i])\n        vertices = list(map(int, lines[i + 1].split()))\n        for u in vertices:\n            if is_ancestor(parent, 1, u):\n                result.append(\"YES\")\n                break\n        else:\n            for u, v in edges:\n                if u in vertices and v in vertices:\n                    result.append(\"YES\")\n                    break\n            else:\n                result.append(\"NO\")\n\n    return '\\n'.join(result)",
        "test": "",
        "num_ids": 459
    },
    {
        "number": 4518,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(roads, gangs):\n        for road in roads:\n            if gangs[road[0] - 1] == gangs[road[1] - 1]:\n                return False\n        return True\n\n    def dfs(graph, visited, vertex):\n        visited[vertex - 1] = True\n        for neighbor in graph[vertex]:\n            if not visited[neighbor - 1]:\n                dfs(graph, visited, neighbor)\n\n    def build_graph(roads):\n        graph = {i: [] for i in range(1, n + 1)}\n        for road in roads:\n            graph[road[0]].append(road[1])\n            graph[road[1]].append(road[0])\n        return graph\n\n    def find_roads(n, gangs, roads):\n        graph = build_graph(roads)\n        for i in range(1, n + 1):\n            if not dfs(graph, [False] * n, i):\n                return \"NO\"\n\n        for i in range(1, n):\n            for j in range(i + 1, n + 1):\n                if not dfs(graph, [False] * n, i) or not dfs(graph, [False] * n, j):\n                    return \"NO\"\n\n        return \"YES\\n\" + \"\\n\".join(\" \".join(map(str, road)) for road in roads)\n\n    t = int(stdin.readline().strip())\n    output = []\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        gangs = list(map(int, stdin.readline().strip().split()))\n        roads = []\n\n        for i in range(1, n):\n            for j in range(i + 1, n + 1):\n                if gangs[i - 1] != gangs[j - 1]:\n                    roads.append((i, j))\n\n        if is_valid(roads, gangs):\n            output.append(find_roads(n, gangs, roads))\n        else:\n            output.append(\"NO\")\n\n    return \"\\n\".join(output)",
        "test": "",
        "num_ids": 532
    },
    {
        "number": 4519,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    test_cases = stdin.split('\\n')[1:]\n    result = []\n\n    for i in range(q):\n        n, k = map(int, test_cases[i * 2].split())\n        string = test_cases[i * 2 + 1]\n\n        if k >= n:\n            result.append(sorted(string))\n        else:\n            result.append(string)\n\n    return '\\n'.join([''.join(x) for x in result])\n",
        "test": "",
        "num_ids": 133
    },
    {
        "number": 4520,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_bad(point, segments, k):\n        count = 0\n        for segment in segments:\n            if segment[0] <= point <= segment[1]:\n                count += 1\n        return count > k\n\n    def find_min_segments_to_remove(n, k, segments):\n        bad_points = set()\n        for segment in segments:\n            for point in range(segment[0], segment[1] + 1):\n                if is_bad(point, segments, k):\n                    bad_points.add(point)\n\n        if not bad_points:\n            return 0, []\n\n        min_segments_to_remove = n\n        segments_to_remove = []\n        for i, segment in enumerate(segments):\n            temp_bad_points = bad_points.copy()\n            for point in range(segment[0], segment[1] + 1):\n                if point in temp_bad_points:\n                    temp_bad_points.remove(point)\n\n            if not temp_bad_points:\n                if i not in segments_to_remove:\n                    min_segments_to_remove = min(min_segments_to_remove, len(segments_to_remove) + 1)\n                    segments_to_remove.append(i)\n\n        return min_segments_to_remove, segments_to_remove\n\n    n, k = map(int, stdin.readline().split())\n    segments = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\n    min_segments_to_remove, segments_to_remove = find_min_segments_to_remove(n, k, segments)\n\n    return f\"{min_segments_to_remove}\\n{' '.join(map(str, segments_to_remove))}\"",
        "test": "",
        "num_ids": 441
    },
    {
        "number": 4521,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    x = list(map(int, stdin.split('\\n')[1].split()))\n    v = list(map(int, stdin.split('\\n')[2].split()))\n\n    total_distance = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_distance += abs(x[i] - x[j])\n\n    return str(total_distance)",
        "test": "",
        "num_ids": 118
    },
    {
        "number": 4522,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(u: int, parent: int) -> tuple:\n        lo, hi = 0, 0\n        for v, w in edges[u]:\n            if v != parent:\n                l, h = dfs(v, u)\n                lo += l\n                hi += h\n                if w > max_weight[u]:\n                    max_weight[u] = w\n        lo += 1\n        hi += 1\n        return lo, hi\n\n    def calc_pairs(q: int) -> int:\n        pairs = 0\n        for u in range(1, n + 1):\n            for v in range(u + 1, n + 1):\n                if max_weight[u] <= q and max_weight[v] <= q:\n                    pairs += dp[u][v]\n        return pairs\n\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    edges = [[] for _ in range(n + 1)]\n    max_weight = [0] * (n + 1)\n    for i in range(1, n):\n        u, v, w = map(int, lines[i].split())\n        edges[u].append((v, w))\n        edges[v].append((u, w))\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][i] = 1\n    for d in range(1, n):\n        for u in range(1, n + 1):\n            for v in range(u + 1, n + 1):\n                dp[u][v] += dp[u][v - d] + dp[u + d][v]\n\n    dfs(1, -1)\n    result = [calc_pairs(q) for q in map(int, lines[-1].split())]\n    return ' '.join(map(str, result))",
        "test": "",
        "num_ids": 486
    },
    {
        "number": 4523,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def can_reduce(a: List[int]) -> bool:\n        a.sort()\n        for i in range(len(a) - 1):\n            if abs(a[i] - a[i + 1]) > 1:\n                return False\n        return True\n\n    t = int(stdin.split('\\n')[0])\n    test_cases = [line.split() for line in stdin.split('\\n')[1:]]\n    test_cases = [[int(x) for x in case[1:]] for case in test_cases]\n\n    results = []\n    for case in test_cases:\n        if can_reduce(case):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    return \"\\n\".join(results)",
        "test": "",
        "num_ids": 188
    },
    {
        "number": 4524,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = int(stdin.readline(), 2)\n    b = int(stdin.readline(), 2)\n\n    answer = 0\n    MOD = 998244353\n\n    while b > 0:\n        answer += (a & b)\n        answer %= MOD\n        b >>= 1\n\n    return str(answer)",
        "test": "",
        "num_ids": 111
    },
    {
        "number": 4525,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_solution(n: int) -> str:\n        if n % 2 != 0:\n            return \"NO\"\n        half_n = n // 2\n        a = [2 * (i + 1) for i in range(half_n)]\n        a += [2 * i + 1 for i in range(half_n)]\n        return \"YES\\n\" + \" \".join(map(str, a))\n\n    t = int(stdin.split(\"\\n\")[0])\n    test_cases = [int(line) for line in stdin.split(\"\\n\")[1:]]\n    result = []\n    for n in test_cases:\n        result.append(find_solution(n))\n    return \"\\n\".join(result)",
        "test": "",
        "num_ids": 183
    },
    {
        "number": 4526,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_special(a: List[int], i: int) -> bool:\n        for l in range(1, i):\n            for r in range(i + 1, len(a)):\n                if a[i] == sum(a[l:r + 1]):\n                    return True\n        return False\n\n    def count_special(a: List[int]) -> int:\n        return sum(is_special(a, i) for i in range(len(a)))\n\n    t = int(stdin.readline())\n    result = []\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        result.append(count_special(a))\n\n    return \"\\n\".join(map(str, result))",
        "test": "",
        "num_ids": 200
    },
    {
        "number": 4527,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_non_intersecting(a: int, b: int, c: int, d: int) -> bool:\n        return a <= c <= b or a <= d <= b or c <= a <= d or c <= b <= d\n\n    def is_inside(a: int, b: int, c: int, d: int) -> bool:\n        return c <= a and b <= d\n\n    def find_max_subset(segments: List[Tuple[int, int]]) -> int:\n        segments.sort(key=lambda x: x[1])\n        max_subset = [segments[0]]\n        for segment in segments[1:]:\n            if all(is_non_intersecting(s[0], s[1], segment[0], segment[1]) for s in max_subset):\n                max_subset.append(segment)\n        return len(max_subset)\n\n    t = int(stdin.readline())\n    results = []\n    for _ in range(t):\n        n = int(stdin.readline())\n        segments = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n        results.append(find_max_subset(segments))\n    return \"\\n\".join(map(str, results))",
        "test": "",
        "num_ids": 305
    },
    {
        "number": 4528,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    minutes = []\n    for i in range(1, t + 1):\n        h, m = map(int, stdin.split('\\n')[i].split())\n        minutes.append((24 - h) * 60 + (60 - m))\n    return '\\n'.join(map(str, minutes))",
        "test": "",
        "num_ids": 92
    },
    {
        "number": 4529,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_endpoint(path: str) -> tuple:\n        x, y = 0, 0\n        for move in path:\n            if move == 'L':\n                x -= 1\n            elif move == 'R':\n                x += 1\n            elif move == 'U':\n                y += 1\n            elif move == 'D':\n                y -= 1\n        return x, y\n\n    def find_substrings(path: str) -> list:\n        substrings = []\n        for i in range(len(path)):\n            for j in range(i + 1, len(path) + 1):\n                substrings.append((i, j - 1))\n        return substrings\n\n    def check_endpoint(path: str, l: int, r: int) -> bool:\n        x, y = find_endpoint(path[:l] + path[r:])\n        return x == 0 and y == 0\n\n    t = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        path = stdin.readline().strip()\n        substrings = find_substrings(path)\n        min_len = float('inf')\n        min_sub = None\n\n        for l, r in substrings:\n            if check_endpoint(path, l, r):\n                if r - l + 1 < min_len:\n                    min_len = r - l + 1\n                    min_sub = (l, r)\n\n        if min_sub is None:\n            result.append(-1)\n        else:\n            result.append(f\"{min_sub[0]} {min_sub[1]}\")\n\n    return '\\n'.join(result)",
        "test": "",
        "num_ids": 426
    },
    {
        "number": 4530,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_size(n: int, skills: List[int]) -> int:\n        skills.sort()\n        unique_skills = list(set(skills))\n        unique_skills.sort()\n\n        if len(unique_skills) < 2:\n            return 0\n\n        max_size = 0\n        for i in range(len(unique_skills) - 1):\n            for j in range(i + 1, len(unique_skills)):\n                skill1 = unique_skills[i]\n                skill2 = unique_skills[j]\n                size1 = skills.count(skill1)\n                size2 = skills.count(skill2)\n\n                if size1 == size2:\n                    max_size = max(max_size, size1)\n\n        return max_size\n\n    t = int(stdin.readline().strip())\n    output = []\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        skills = list(map(int, stdin.readline().strip().split()))\n        max_size = find_max_size(n, skills)\n        output.append(str(max_size))\n\n    return \"\\n\".join(output)",
        "test": "",
        "num_ids": 304
    },
    {
        "number": 4531,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(u: int, p: int) -> None:\n        for v in adj[u]:\n            if v != p:\n                dfs(v, u)\n                sz[u] += sz[v]\n\n    def centroid(u: int, p: int) -> int:\n        for v in adj[u]:\n            if v != p and sz[v] > n // 2:\n                return centroid(v, u)\n        return u\n\n    def dist(u: int, v: int) -> int:\n        return lca[u] - lca[v]\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    adj = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n\n    sz = [1] * n\n    dfs(0, -1)\n    cent_tree = centroid(0, -1)\n    lca = [0] * n\n    lca[cent_tree] = 1\n    q = [cent_tree]\n    while q:\n        u = q.pop()\n        for v in adj[u]:\n            if lca[v] == 0:\n                lca[v] = lca[u] + 1\n                q.append(v)\n\n    max_cost = 0\n    for i in range(n):\n        cost = sum(dist(j, i) * a[j] for j in range(n))\n        max_cost = max(max_cost, cost)\n\n    return str(max_cost)",
        "test": "",
        "num_ids": 438
    },
    {
        "number": 4532,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible(a, k):\n        for num in a:\n            if num % k != 0:\n                return False\n        return True\n\n    def min_moves(a, n, k, x):\n        a.sort(reverse=True)\n        moves = 0\n\n        for i in range(n):\n            if a[i] % k == 0:\n                continue\n            if x == 0:\n                moves += 1\n                x += 1\n            a[i] += x\n            moves += 1\n            x += 1\n\n        return moves\n\n    t = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n\n        if is_divisible(a, k):\n            result.append(0)\n        else:\n            result.append(min_moves(a, n, k, 0))\n\n    return \"\\n\".join(map(str, result))",
        "test": "",
        "num_ids": 274
    },
    {
        "number": 4533,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    greed_factors = list(map(int, lines[0].split()))\n    cookie_sizes = list(map(int, lines[1].split()))\n\n    greed_factors.sort(reverse=True)\n    cookie_sizes.sort(reverse=True)\n\n    count = 0\n    for size in cookie_sizes:\n        if greed_factors and greed_factors[-1] <= size:\n            count += 1\n            greed_factors.pop()\n\n    return str(count)",
        "test": "",
        "num_ids": 140
    },
    {
        "number": 4534,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 0:\n        return \"1\"\n    elif k > 33:\n        return \"Invalid input\"\n    else:\n        row = [1] * (k + 1)\n        for i in range(2, k + 1):\n            for j in range(1, i):\n                row[j] = row[j - 1] + row[j]\n        return \" \".join(map(str, row))",
        "test": "",
        "num_ids": 115
    },
    {
        "number": 4535,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin, 2)\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return str(count)",
        "test": "",
        "num_ids": 46
    },
    {
        "number": 4536,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    digits = list(map(int, stdin.strip().split()))\n    carry = 1\n    for i in range(len(digits) - 1, -1, -1):\n        digits[i] += carry\n        carry = digits[i] // 10\n        digits[i] %= 10\n    if carry:\n        digits.insert(0, carry)\n    return ' '.join(map(str, digits))",
        "test": "",
        "num_ids": 105
    },
    {
        "number": 4537,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    options = [A + B, A - B, A * B]\n    return str(max(options))",
        "test": "",
        "num_ids": 42
    },
    {
        "number": 4538,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    points = [list(map(int, input().split())) for _ in range(N)]\n    count = 0\n    for point in points:\n        distance = (point[0] ** 2 + point[1] ** 2) ** 0.5\n        if distance <= D:\n            count += 1\n    return str(count)",
        "test": "",
        "num_ids": 97
    },
    {
        "number": 4539,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(n))\n    if n % digits_sum == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 57
    },
    {
        "number": 4540,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A = int(stdin.split(\"\\n\")[0]), list(map(int, stdin.split(\"\\n\")[1].split()))\n    result = []\n    for i in range(N):\n        cost = sum(abs(A[j] - A[j + 1]) for j in range(i) if A[j] != A[i]) + \\\n               sum(abs(A[j] - A[j + 1]) for j in range(i, N - 1)) + \\\n               abs(A[N - 1] - 0) + abs(0 - A[i])\n        result.append(cost)\n    return \"\\n\".join(map(str, result))",
        "test": "",
        "num_ids": 168
    },
    {
        "number": 4541,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if stdin in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'",
        "test": "",
        "num_ids": 51
    },
    {
        "number": 4542,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    left_black = s.count('B')\n    left_white = s.count('W')\n    right_black = n - left_black - left_white\n    min_stones = min(left_black, left_white, right_black)\n    return str(min_stones)",
        "test": "",
        "num_ids": 88
    },
    {
        "number": 4543,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    concatenation = int(str(a) + str(b))\n    root = int(concatenation ** 0.5)\n    return \"Yes\" if root * root == concatenation else \"No\"",
        "test": "",
        "num_ids": 65
    },
    {
        "number": 4544,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, a = map(int, stdin.split())\n    a = list(map(int, a.split()))\n    a.sort()\n    count = 0\n    for i in range(N):\n        if a[i] == a[0]:\n            count += 1\n        else:\n            break\n    return str(count)",
        "test": "",
        "num_ids": 83
    },
    {
        "number": 4545,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    total_squares = N * N\n    white_squares = A\n    black_squares = total_squares - white_squares\n    return str(black_squares)",
        "test": "",
        "num_ids": 60
    },
    {
        "number": 4546,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b - a == c - b:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "",
        "num_ids": 45
    },
    {
        "number": 4547,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if '9' in str(n):\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "",
        "num_ids": 37
    },
    {
        "number": 4548,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, A = map(int, stdin.split())\n    A = list(map(int, input().split()))\n\n    cost = 0\n    if X < N:\n        for i in range(M):\n            if A[i] > X:\n                cost += A[i] - X\n                break\n    else:\n        for i in range(M - 1, -1, -1):\n            if A[i] < X:\n                cost += X - A[i]\n                break\n\n    return str(cost)",
        "test": "",
        "num_ids": 133
    },
    {
        "number": 4549,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    canvas = [list(stdin.readline().strip()) for _ in range(H)]\n\n    def is_valid(i: int, j: int) -> bool:\n        return 0 <= i < H and 0 <= j < W\n\n    def paint(i: int, j: int) -> None:\n        if is_valid(i, j) and canvas[i][j] == '.':\n            canvas[i][j] = '*'\n\n    def dfs(i: int, j: int) -> bool:\n        if not is_valid(i, j):\n            return False\n\n        if canvas[i][j] == '#':\n            return True\n\n        if canvas[i][j] == '*':\n            return False\n\n        paint(i, j)\n\n        return (\n            dfs(i - 1, j) or\n            dfs(i + 1, j) or\n            dfs(i, j - 1) or\n            dfs(i, j + 1)\n        )\n\n    for i in range(H):\n        for j in range(W):\n            if canvas[i][j] == '#' and not dfs(i, j):\n                return \"No\"\n\n    return \"Yes\"",
        "test": "",
        "num_ids": 316
    },
    {
        "number": 4550,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    total_candies = a + b + c\n    if total_candies % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 62
    },
    {
        "number": 4551,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    L = A + B\n    R = C + D\n    \n    if L > R:\n        return \"Left\"\n    elif L < R:\n        return \"Right\"\n    else:\n        return \"Balanced\"",
        "test": "",
        "num_ids": 73
    },
    {
        "number": 4552,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(open_periods: int) -> bool:\n        for i in range(N):\n            open_count = 0\n            for j in range(5):\n                for k in range(2):\n                    if F[i][j][k] == 1:\n                        open_count += 1\n            if open_count < open_periods:\n                return False\n        return True\n\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    F = [[[int(x) for x in line.split()] for line in lines[1:6]] for i in range(N)]\n    P = [[int(x) for x in line.split()] for line in lines[6:]]\n\n    open_periods = 0\n    for i in range(5):\n        for k in range(2):\n            if any(F[j][i][k] == 1 for j in range(N)):\n                open_periods += 1\n\n    profit = [sum(P[i][k] for k in range(10) if F[i][j][k] == 1) for i in range(N)]\n\n    max_profit = -10000000\n    for i in range(1, open_periods):\n        if is_valid(i):\n            for c in itertools.combinations(range(10), i):\n                for j in range(N):\n                    for k in range(2):\n                        if k in c and F[j][k] == 1:\n                            profit[j] += P[j][k]\n                max_profit = max(max_profit, sum(profit))\n                for j in range(N):\n                    for k in range(2):\n                        if k in c and F[j][k] == 1:\n                            profit[j] -= P[j][k]\n\n    return str(max_profit)",
        "test": "",
        "num_ids": 471
    },
    {
        "number": 4553,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, S = stdin.split()\n    A = int(A)\n    B = int(B)\n    if len(S) != A + B + 1:\n        return \"No\"\n    if S[A] != \"-\":\n        return \"No\"\n    for i in range(A + B + 1):\n        if i == A:\n            continue\n        if not S[i].isdigit():\n            return \"No\"\n    return \"Yes\"",
        "test": "",
        "num_ids": 114
    },
    {
        "number": 4554,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    distance = abs(a - b)\n    if distance > W:\n        distance = W\n    return str(distance)",
        "test": "",
        "num_ids": 47
    },
    {
        "number": 4555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    result = []\n    \n    for i in range(A, B + 1):\n        if K == 1:\n            result.append(i)\n        elif K == 2:\n            if i == A or i == B:\n                result.append(i)\n        else:\n            if i == A or i == B:\n                result.append(i)\n            elif i - A == B - i:\n                result.append(i)\n    \n    return '\\n'.join(map(str, sorted(result)))",
        "test": "",
        "num_ids": 142
    },
    {
        "number": 4556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[1]\n    x = s[0].upper()\n    return f\"{x}C\"",
        "test": "",
        "num_ids": 33
    },
    {
        "number": 4557,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if X <= A:\n        return \"YES\"\n    elif X > A + B:\n        return \"NO\"\n    else:\n        return \"YES\"",
        "test": "",
        "num_ids": 56
    },
    {
        "number": 4558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    return str(X - t)",
        "test": "",
        "num_ids": 25
    },
    {
        "number": 4559,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    result = 1\n    for a in A:\n        result *= a\n        if result > 10**18:\n            return -1\n    return result",
        "test": "",
        "num_ids": 59
    },
    {
        "number": 4560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    \n    if n % 500 <= a:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 46
    },
    {
        "number": 4561,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    if B <= X:\n        return \"delicious\"\n    elif B <= X + A:\n        return \"safe\"\n    else:\n        return \"dangerous\"\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "",
        "num_ids": 76
    },
    {
        "number": 4562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    i = 1\n    while i * i <= n:\n        i += 1\n    return str(i * i - 1)",
        "test": "",
        "num_ids": 45
    },
    {
        "number": 4563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    T_A = [(int(line.split()[0]), int(line.split()[1])) for line in lines[1:]]\n\n    total_votes = 0\n    for i in range(N):\n        T, A = T_A[i]\n        total_votes += T * A\n\n    return str(total_votes)",
        "test": "",
        "num_ids": 107
    },
    {
        "number": 4564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == len(set(stdin)):\n        return \"yes\"\n    else:\n        return \"no\"",
        "test": "",
        "num_ids": 33
    },
    {
        "number": 4565,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(str, stdin.split())\n    N = int(N)\n    E_count = S.count('E')\n    W_count = N - E_count\n    return min(E_count, W_count)",
        "test": "",
        "num_ids": 60
    },
    {
        "number": 4566,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    roads = [list(map(int, stdin.split()))[2 * i:2 * i + 2] for i in range(M)]\n    city_roads = [0] * (N + 1)\n\n    for road in roads:\n        city_roads[road[0]] += 1\n        city_roads[road[1]] += 1\n\n    return '\\n'.join(map(str, city_roads[1:]))",
        "test": "",
        "num_ids": 128
    },
    {
        "number": 4567,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    scores = [int(x) for x in stdin.split('\\n')[1:]]\n    total_score = sum(scores)\n    if total_score % 10 == 0:\n        return str(total_score - 10)\n    else:\n        return str(total_score)",
        "test": "",
        "num_ids": 89
    },
    {
        "number": 4568,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    S = S.strip()\n\n    max_diff_letters = 0\n\n    for i in range(1, N):\n        X = S[:i]\n        Y = S[i:]\n\n        diff_letters = len(set(X) & set(Y))\n        max_diff_letters = max(max_diff_letters, diff_letters)\n\n    return str(max_diff_letters)",
        "test": "",
        "num_ids": 123
    },
    {
        "number": 4569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    weather_dict = {\"Sunny\": \"Cloudy\", \"Cloudy\": \"Rainy\", \"Rainy\": \"Sunny\"}\n    return weather_dict[stdin]",
        "test": "",
        "num_ids": 45
    },
    {
        "number": 4570,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    plan1 = A * N\n    plan2 = B\n    return min(plan1, plan2)",
        "test": "",
        "num_ids": 43
    },
    {
        "number": 4571,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    X = 0\n    p = 0.5\n    for i in range(1, N + 1):\n        if i <= M:\n            X += 1900 * p\n            p /= 2\n        else:\n            X += 100\n    return str(int(X))",
        "test": "",
        "num_ids": 90
    },
    {
        "number": 4572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.lower()\n    for letter in 'abcdefghijklmnopqrstuvwxyz':\n        if letter not in s:\n            return letter\n    return 'None'",
        "test": "",
        "num_ids": 48
    },
    {
        "number": 4573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    X = sorted(X)\n    B = []\n    for i in range(N):\n        if i == 0:\n            B.append(X[i+1])\n        elif i == N-1:\n            B.append(X[i-1])\n        else:\n            B.append(X[i-1] + X[i+1])\n    return B",
        "test": "",
        "num_ids": 106
    },
    {
        "number": 4574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    A.sort(reverse=True)\n    max_area = 0\n\n    for i in range(N - 3):\n        for j in range(i + 1, N - 2):\n            for k in range(j + 1, N - 1):\n                for l in range(k + 1, N):\n                    if A[i] < A[j] + A[k] and A[j] < A[i] + A[l] and A[k] < A[j] + A[l]:\n                        max_area = max(max_area, A[i] * A[j])\n\n    return str(max_area)",
        "test": "",
        "num_ids": 175
    },
    {
        "number": 4575,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D, X = map(int, stdin.split()[:3])\n    A = list(map(int, stdin.split()[3:]))\n\n    total_eaten = sum(A) * 2\n    total_eaten += (N - sum(1 for a in A if a == 0))\n\n    return str(X + total_eaten)",
        "test": "",
        "num_ids": 91
    },
    {
        "number": 4576,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n\n    dp = [[0] * (X // 50 + 1) for _ in range(C + 1)]\n\n    for i in range(1, A + 1):\n        for j in range(1, B + 1):\n            for k in range(1, C + 1):\n                for t in range(X // 50 + 1):\n                    if i * 500 + j * 100 + k * 50 == t * 50:\n                        dp[k][t] += 1\n\n    result = 0\n    for i in range(1, C + 1):\n        result += sum(dp[i][:X // 50 + 1])\n\n    return str(result)",
        "test": "",
        "num_ids": 201
    },
    {
        "number": 4577,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A <= C <= B:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 43
    },
    {
        "number": 4578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    moto_per_doughnut = list(map(int, stdin.split()))\n\n    total_moto_per_doughnut = sum(moto_per_doughnut)\n    max_doughnuts = 0\n\n    for i in range(1, N + 1):\n        max_doughnuts += X // total_moto_per_doughnut\n        X -= (X // total_moto_per_doughnut) * total_moto_per_doughnut\n        total_moto_per_doughnut -= moto_per_doughnut[i - 1]\n\n    return str(max_doughnuts)",
        "test": "",
        "num_ids": 179
    },
    {
        "number": 4579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    items = stdin.split('\\n')[1:]\n    kinds = set(items)\n    return str(len(kinds))",
        "test": "",
        "num_ids": 47
    },
    {
        "number": 4580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = list(map(int, stdin.split()))\n    colors = {\n        \"gray\": 0,\n        \"brown\": 0,\n        \"green\": 0,\n        \"cyan\": 0,\n        \"blue\": 0,\n        \"yellow\": 0,\n        \"orange\": 0,\n        \"red\": 0\n    }\n\n    for rating in a:\n        if rating >= 1 and rating <= 399:\n            colors[\"gray\"] += 1\n        elif rating >= 400 and rating <= 799:\n            colors[\"brown\"] += 1\n        elif rating >= 800 and rating <= 1199:\n            colors[\"green\"] += 1\n        elif rating >= 1200 and rating <= 1599:\n            colors[\"cyan\"] += 1\n        elif rating >= 1600 and rating <= 1999:\n            colors[\"blue\"] += 1\n        elif rating >= 2000 and rating <= 2399:\n            colors[\"yellow\"] += 1\n        elif rating >= 2400 and rating <= 2799:\n            colors[\"orange\"] += 1\n        elif rating >= 2800 and rating <= 3199:\n            colors[\"red\"] += 1\n        else:\n            colors[\"gray\"] += 1\n\n    min_colors = sum(1 for count in colors.values() if count > 0)\n    max_colors = sum(1 for count in colors.values() if count > 0)\n\n    if any(count == N for count in colors.values()):\n        max_colors = max(max_colors, 1)\n\n    return f\"{min_colors} {max_colors}\"",
        "test": "",
        "num_ids": 427
    },
    {
        "number": 4581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    toppings = {\"o\": 1, \"x\": 0}\n    price = 700\n    for char in stdin:\n        price += toppings[char] * 100\n    return str(price)",
        "test": "",
        "num_ids": 55
    },
    {
        "number": 4582,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    \n    if a == 'H':\n        if b == 'H':\n            return 'H'\n        else:\n            return 'D'\n    else:\n        if b == 'H':\n            return 'D'\n        else:\n            return 'H'",
        "test": "",
        "num_ids": 74
    },
    {
        "number": 4583,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin)\n\n    for op1 in ('+', '-'):\n        for op2 in ('+', '-'):\n            for op3 in ('+', '-'):\n                if eval(f\"{A}{op1}{B}{op2}{C}{op3}{D}\") == 7:\n                    return f\"{A}{op1}{B}{op2}{C}{op3}{D}=7\"",
        "test": "",
        "num_ids": 107
    },
    {
        "number": 4584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    subordinates = [0] * (N + 1)\n\n    for i in range(2, N + 1):\n        subordinates[A[i - 1]] += 1\n\n    return '\\n'.join(map(str, subordinates[1:]))",
        "test": "",
        "num_ids": 81
    },
    {
        "number": 4585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    if X <= 3:\n        return 1\n    else:\n        return (X + 1) // 2",
        "test": "",
        "num_ids": 41
    },
    {
        "number": 4586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_str = str(n)\n    for i in range(3):\n        if n_str[i] == n_str[i + 1] == n_str[i + 2]:\n            return \"Yes\"\n    return \"No\"",
        "test": "",
        "num_ids": 70
    },
    {
        "number": 4587,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(lambda x: list(map(int, x.split())), stdin.split('\\n')[1:])\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if B[i] > A[i] and B[j] > C[i]:\n                count += 1\n    return str(count)",
        "test": "",
        "num_ids": 96
    },
    {
        "number": 4588,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    hex_values = {'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    x_value = hex_values.get(x, int(x))\n    y_value = hex_values.get(y, int(y))\n\n    if x_value < y_value:\n        return '<'\n    elif x_value > y_value:\n        return '>'\n    else:\n        return '='",
        "test": "",
        "num_ids": 138
    },
    {
        "number": 4589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(H)]\n\n    def count_adjacent_bombs(row, col):\n        adjacent_squares = [\n            (row - 1, col - 1), (row - 1, col), (row - 1, col + 1),\n            (row, col - 1), (row, col + 1),\n            (row + 1, col - 1), (row + 1, col), (row + 1, col + 1)\n        ]\n        count = 0\n        for r, c in adjacent_squares:\n            if 0 <= r < H and 0 <= c < W and grid[r][c] == '#':\n                count += 1\n        return count\n\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '.':\n                grid[i][j] = str(count_adjacent_bombs(i, j))\n\n    return '\\n'.join([''.join(row) for row in grid])",
        "test": "",
        "num_ids": 279
    },
    {
        "number": 4590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split()[0:3])\n    A = list(map(int, stdin.split()[3:3 + N]))\n    B = list(map(int, stdin.split()[3 + N:3 + N + M]))\n\n    A.sort(reverse=True)\n    B.sort(reverse=True)\n\n    books_read = 0\n    time_elapsed = 0\n\n    while A or B:\n        if A and time_elapsed + A[-1] <= K:\n            time_elapsed += A.pop()\n            books_read += 1\n        elif B and time_elapsed + B[-1] <= K:\n            time_elapsed += B.pop()\n            books_read += 1\n        else:\n            break\n\n    return str(books_read)",
        "test": "",
        "num_ids": 207
    },
    {
        "number": 4591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n\n    # Calculate the cost of buying A-pizzas and B-pizzas directly\n    direct_cost = X * A + Y * B\n\n    # Calculate the cost of buying AB-pizzas and rearranging them\n    ab_pizzas = (X + Y) // 2\n    remaining_a = (X + Y) % 2\n    rearranged_cost = ab_pizzas * C + remaining_a * A\n\n    # Return the minimum cost\n    return min(direct_cost, rearranged_cost)",
        "test": "",
        "num_ids": 153
    },
    {
        "number": 4592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    MOD = 10**9 + 7\n\n    def factorial(n: int) -> int:\n        fact = 1\n        for i in range(1, n + 1):\n            fact = (fact * i) % MOD\n        return fact\n\n    def count_divisors(n: int) -> int:\n        count = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                count += 1\n        return count\n\n    n_fact = factorial(n)\n    result = count_divisors(n_fact)\n\n    return str(result)",
        "test": "",
        "num_ids": 166
    },
    {
        "number": 4593,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    max_power = 1\n\n    for b in range(2, int(x ** 0.5) + 1):\n        p = 2\n        while b ** p <= x:\n            max_power = max(max_power, b ** p)\n            p += 1\n\n    return str(max_power)",
        "test": "",
        "num_ids": 88
    },
    {
        "number": 4594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = list(map(int, stdin.split()))\n    d.sort(reverse=True)\n    layers = 1\n    for i in range(1, N):\n        if d[i] < d[i-1]:\n            layers += 1\n        else:\n            break\n    return str(layers)",
        "test": "",
        "num_ids": 80
    },
    {
        "number": 4595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    a_index = s.find('A')\n    z_index = s.find('Z')\n    if a_index == -1 or z_index == -1:\n        return 0\n    if a_index < z_index:\n        return z_index - a_index + 1\n    else:\n        return n - a_index + z_index + 1",
        "test": "",
        "num_ids": 104
    },
    {
        "number": 4596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    count = 0\n\n    while all(x % 2 == 0 for x in A):\n        A = [x // 2 for x in A]\n        count += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 71
    },
    {
        "number": 4597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    power = 1\n    for i in range(1, n + 1):\n        power *= i\n        power %= 10**9 + 7\n    return str(power)",
        "test": "",
        "num_ids": 58
    },
    {
        "number": 4598,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(sum(range(1, n + 1)))",
        "test": "",
        "num_ids": 28
    },
    {
        "number": 4599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    cards = sorted([int(x) for x in stdin.split('\\n')[1].split()], reverse=True)\n\n    alice_score = sum(cards[::2])\n    bob_score = sum(cards[1::2])\n\n    return str(alice_score - bob_score)",
        "test": "",
        "num_ids": 91
    },
    {
        "number": 4600,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    problems = [0] * (N + 1)\n    wa_count = [0] * (N + 1)\n\n    for _ in range(M):\n        p, s = stdin.readline().split()\n        p = int(p)\n        if s == \"AC\":\n            if problems[p] == 0:\n                problems[p] = 1\n                wa_count[p] += 1\n        elif s == \"WA\":\n            if problems[p] == 0:\n                wa_count[p] += 1\n\n    correct_answers = sum(problems)\n    penalties = sum(wa_count[:correct_answers])\n\n    return f\"{correct_answers} {penalties}\"",
        "test": "",
        "num_ids": 197
    },
    {
        "number": 4601,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, *H = list(map(int, stdin.split()))\n    H.sort(reverse=True)\n    special_move_count = 0\n    attack_count = 0\n\n    for i in range(N):\n        if H[i] <= 0:\n            continue\n        if special_move_count < K:\n            special_move_count += 1\n            H[i] = 0\n        else:\n            attack_count += H[i] - 1\n            H[i] = 1\n\n    return str(attack_count)",
        "test": "",
        "num_ids": 140
    },
    {
        "number": 4602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, x = map(int, stdin.split())\n    x = list(map(int, x.split()))\n\n    total_distance = 0\n\n    for i in range(N):\n        distance_A = abs(x[i] - 0) + abs(i - i) + abs(0 - x[i])\n        distance_B = abs(x[i] - K) + abs(i - i) + abs(K - x[i])\n        total_distance += min(distance_A, distance_B)\n\n    return str(total_distance)",
        "test": "",
        "num_ids": 140
    },
    {
        "number": 4603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    return min(A + C, B + D)",
        "test": "",
        "num_ids": 33
    },
    {
        "number": 4604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    mod = 10**9 + 7\n    ans = 1\n\n    for i in range(n):\n        left = sum(1 for x in a[:i] if abs(x - i) % n == a[i])\n        right = sum(1 for x in a[i+1:] if abs(x - i) % n == a[i])\n        ans *= (left * right) % mod\n        ans %= mod\n\n    return str(ans)",
        "test": "",
        "num_ids": 131
    },
    {
        "number": 4605,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total = 0\n    for i in range(1, N + 1):\n        digits_sum = sum(int(digit) for digit in str(i))\n        if A <= digits_sum <= B:\n            total += i\n    return str(total)",
        "test": "",
        "num_ids": 80
    },
    {
        "number": 4606,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return f\"ABC{n}\"",
        "test": "",
        "num_ids": 21
    },
    {
        "number": 4607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    count = 0\n    for i in range(1, b + 1):\n        if i == a:\n            count += 1\n    return str(count)",
        "test": "",
        "num_ids": 56
    },
    {
        "number": 4608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = list(map(int, stdin.split()))\n    visited = [False] * (N + 1)\n    visited[1] = True\n    count = 0\n    i = 1\n\n    while not visited[2]:\n        if not 1 <= a[i - 1] <= N:\n            return -1\n        visited[a[i - 1]] = True\n        count += 1\n        i = a[i - 1]\n\n    return count\n",
        "test": "",
        "num_ids": 120
    },
    {
        "number": 4609,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    sheet = set()\n\n    for num in A:\n        if num in sheet:\n            sheet.remove(num)\n        else:\n            sheet.add(num)\n\n    return str(len(sheet))",
        "test": "",
        "num_ids": 70
    },
    {
        "number": 4610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, *A = list(map(int, stdin.split()))\n    A.sort()\n\n    min_balls = 0\n    prev = None\n    count = 1\n\n    for i in range(N):\n        if A[i] != prev:\n            count += 1\n            if count > K:\n                min_balls += 1\n                count = 1\n        prev = A[i]\n\n    return str(min_balls)",
        "test": "",
        "num_ids": 115
    },
    {
        "number": 4611,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(x1, y1, x2, y2):\n        if x1 == x2 and y1 == y2:\n            return False\n        if x1 == x2:\n            return y1 + 1 == y2 or y1 - 1 == y2\n        if y1 == y2:\n            return x1 + 1 == x2 or x1 - 1 == x2\n        return False\n\n    def can_travel(points):\n        for i in range(len(points) - 1):\n            x1, y1, t1 = points[i]\n            x2, y2, t2 = points[i + 1]\n            if not is_valid(x1, y1, x2, y2):\n                return False\n        return True\n\n    N = int(stdin.readline().strip())\n    points = []\n    for _ in range(N):\n        t, x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y, t))\n\n    points.sort(key=lambda x: x[2])\n    if can_travel(points):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 293
    },
    {
        "number": 4612,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = (a + b) / 2\n    return str(int(x + 0.5))",
        "test": "",
        "num_ids": 42
    },
    {
        "number": 4613,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find(parent, i):\n        if parent[i] == i:\n            return i\n        return find(parent, parent[i])\n\n    def union(parent, rank, x, y):\n        xroot = find(parent, x)\n        yroot = find(parent, y)\n\n        if xroot == yroot:\n            return False\n\n        if rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n        return True\n\n    N, M = map(int, stdin.readline().split())\n    parent = [i for i in range(N + 1)]\n    rank = [0] * (N + 1)\n    edges = []\n\n    for _ in range(M):\n        a, b = map(int, stdin.readline().split())\n        edges.append((a, b))\n\n    bridges = 0\n    for a, b in edges:\n        saved_parent = parent.copy()\n        saved_rank = rank.copy()\n\n        if union(parent, rank, a, b):\n            bridges += 1\n\n    return str(bridges)\n",
        "test": "",
        "num_ids": 322
    },
    {
        "number": 4614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B:\n        return str(C)\n    elif A == C:\n        return str(B)\n    else:\n        return str(A)",
        "test": "",
        "num_ids": 57
    },
    {
        "number": 4615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n\n    max_density = 0\n    max_sugar_mass = 0\n\n    for i in range(1, F // 100 + 1):\n        for j in range(1, (F - 100 * i) // 100 + 1):\n            water_mass = 100 * (i + j)\n            sugar_mass = i * C + j * D\n            sugar_dissolved = min(E * sugar_mass // 100, sugar_mass)\n            sugar_undissolved = sugar_mass - sugar_dissolved\n            density = (100 * sugar_dissolved) / water_mass\n\n            if density > max_density and sugar_undissolved == 0:\n                max_density = density\n                max_sugar_mass = sugar_mass\n\n    return f\"{water_mass + max_sugar_mass} {max_sugar_mass}\"",
        "test": "",
        "num_ids": 258
    },
    {
        "number": 4616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    first_i = s.find('i')\n    last_n = s.rfind('n')\n    if first_i != -1 and last_n != -1:\n        count = last_n - first_i - 1\n        return f\"i{count}n\"\n    else:\n        return s",
        "test": "",
        "num_ids": 85
    },
    {
        "number": 4617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    grid = [list(line) for line in stdin.split('\\n')]\n    rotated_grid = [list(reversed(row)) for row in reversed(grid)]\n    if rotated_grid == grid:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "",
        "num_ids": 71
    },
    {
        "number": 4618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, K = stdin.split()\n    s = sorted(set(s))\n    return s[K - 1]",
        "test": "",
        "num_ids": 32
    },
    {
        "number": 4619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, H, N = map(int, stdin.split()[0:3])\n    points = [list(map(int, stdin.split()[i:i + 2])) for i in range(3, len(stdin.split()), 3)]\n    a = [int(stdin.split()[i]) for i in range(3, len(stdin.split()), 3)]\n\n    white_regions = []\n    for i in range(N):\n        if a[i] == 1:\n            white_regions.append([(-float('inf'), float('inf')), (points[i][0], float('inf'))])\n        elif a[i] == 2:\n            white_regions.append([(points[i][0], float('inf')), (float('inf'), float('inf'))])\n        elif a[i] == 3:\n            white_regions.append([(-float('inf'), points[i][1]), (float('inf'), float('inf'))])\n        elif a[i] == 4:\n            white_regions.append([(-float('inf'), float('inf')), (float('inf'), points[i][1])])\n\n    white_area = W * H\n    for region in white_regions:\n        x_min, x_max = region[0]\n        y_min, y_max = region[1]\n        white_area -= (x_max - x_min) * (y_max - y_min)\n\n    return str(white_area)",
        "test": "",
        "num_ids": 364
    },
    {
        "number": 4620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def lcm(x: int, y: int) -> int:\n        return (x * y) // gcd(x, y)\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = y, x % y\n        return x\n\n    N, *data = map(int, stdin.split())\n    C, S, F = zip(*[data[i:i + N - 1] for i in range(0, len(data), N - 1)])\n\n    time = [0] * N\n    for i in range(N - 1, 0, -1):\n        time[i] = time[i + 1] + C[i]\n        for j in range(i + 1, N):\n            time[j] = max(time[j], time[i] + (j - i) * C[i] + (S[i] - (j - i) * F[i]) % F[i])\n\n    return '\\n'.join(map(str, time))",
        "test": "",
        "num_ids": 254
    },
    {
        "number": 4621,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    image = [list(stdin.readline().strip()) for _ in range(H)]\n    \n    extended_image = []\n    for i in range(H):\n        row = []\n        for j in range(W):\n            row.append(image[i][j])\n        extended_image.append(row)\n    \n    for i in range(H):\n        row = []\n        for j in range(W):\n            row.append(image[i][j])\n        extended_image.append(row)\n    \n    return '\\n'.join([''.join(row) for row in extended_image])",
        "test": "",
        "num_ids": 164
    },
    {
        "number": 4622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    arr = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    if len(arr) == len(set(arr)):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "",
        "num_ids": 70
    },
    {
        "number": 4623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def max_teams(weights: List[int]) -> int:\n        weights.sort()\n        n = len(weights)\n        max_teams = 0\n        for i in range(n):\n            j = i + 1\n            k = n - 1\n            while j < k:\n                if weights[i] + weights[j] + weights[k] > weights[i] + weights[k]:\n                    k -= 1\n                else:\n                    j += 1\n            max_teams = max(max_teams, (i + 1) * (n - i - 1))\n        return max_teams\n\n    t = int(stdin.split('\\n', 1)[0])\n    test_cases = stdin.split('\\n', 1)[1].split('\\n', t)[1:]\n\n    output = []\n    for case in test_cases:\n        n, weights = case.split('\\n', 1)\n        n = int(n)\n        weights = list(map(int, weights.split()))\n        output.append(str(max_teams(weights)))\n\n    return '\\n'.join(output)",
        "test": "",
        "num_ids": 280
    },
    {
        "number": 4624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    result = []\n    for i in range(1, t + 1):\n        n, x = map(int, stdin.split('\\n')[i].split())\n        if n <= 2:\n            result.append(1)\n        else:\n            floor = 2\n            while n > floor * x + 2:\n                n -= x\n                floor += 1\n            result.append(floor)\n    return '\\n'.join(map(str, result))",
        "test": "",
        "num_ids": 127
    },
    {
        "number": 4625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def perform_combo(s: str, p: List[int]) -> List[int]:\n        n = len(s)\n        m = len(p)\n        presses = [0] * 26\n        for i in range(m):\n            for j in range(p[i]):\n                presses[ord(s[j]) - ord('a')] += 1\n            for j in range(p[i], n):\n                presses[ord(s[j]) - ord('a')] += 1\n            for j in range(n):\n                presses[ord(s[j]) - ord('a')] += 1\n        return presses\n\n    t = int(stdin.readline().strip())\n    result = []\n    for _ in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        p = list(map(int, stdin.readline().strip().split()))\n        presses = perform_combo(s, p)\n        result.append(\" \".join(map(str, presses)))\n\n    return \"\\n\".join(result) ",
        "test": "",
        "num_ids": 283
    },
    {
        "number": 4626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def min_distance(a, b, c):\n        return abs(a - b) + abs(a - c) + abs(b - c)\n\n    q = int(stdin.readline())\n    output = []\n\n    for _ in range(q):\n        a, b, c = map(int, stdin.readline().split())\n        output.append(min_distance(a, b, c))\n\n    return \"\\n\".join(map(str, output))\n",
        "test": "",
        "num_ids": 117
    },
    {
        "number": 4627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_similar(x, y):\n        return (x % 2 == y % 2) or abs(x - y) == 1\n\n    def find_partition(a, n):\n        for i in range(n):\n            for j in range(i + 1, n):\n                if is_similar(a[i], a[j]):\n                    temp = a.copy()\n                    temp[i], temp[j] = temp[j], temp[i]\n                    if all(x not in temp[i + 1:] for x in temp[:i]):\n                        return True\n        return False\n\n    t = int(stdin.readline())\n    result = []\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        if find_partition(a, n):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)",
        "test": "",
        "num_ids": 248
    },
    {
        "number": 4628,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find(parent, i):\n        if parent[i] == i:\n            return i\n        return find(parent, parent[i])\n\n    def union(parent, rank, x, y):\n        xroot = find(parent, x)\n        yroot = find(parent, y)\n\n        if xroot == yroot:\n            return False\n\n        if rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n        return True\n\n    def kruskal(n, m, edges):\n        parent = [i for i in range(n)]\n        rank = [0] * n\n        edges.sort(key=lambda x: x[2])\n        minimum_cost = 0\n        for edge in edges:\n            x, y, w = edge\n            if union(parent, rank, x - 1, y - 1):\n                minimum_cost += w\n        return minimum_cost\n\n    n, m, k = map(int, stdin.readline().split())\n    edges = [list(map(int, stdin.readline().split())) for _ in range(m)]\n    routes = [list(map(lambda x: int(x) - 1, stdin.readline().split())) for _ in range(k)]\n\n    minimum_cost = kruskal(n, m, edges)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for x, y, w in edges:\n                if (x == i + 1 and y == j + 1) or (x == j + 1 and y == i + 1):\n                    minimum_cost = min(minimum_cost, kruskal(n, m, [edge for edge in edges if edge != [x, y, w]]))\n\n    return str(minimum_cost)",
        "test": "",
        "num_ids": 486
    },
    {
        "number": 4629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_number(n: int) -> bool:\n        powers = set()\n        while n > 0:\n            power = 0\n            while n % 3 == 0:\n                power += 1\n                n //= 3\n            if power > 0:\n                powers.add(power)\n            else:\n                return False\n        return len(powers) == len(set(powers))\n\n    def find_smallest_good_number(n: int) -> int:\n        while not is_good_number(n):\n            n += 1\n        return n\n\n    queries = [int(line) for line in stdin.splitlines()[1:]]\n    results = [str(find_smallest_good_number(n)) for n in queries]\n    return \"\\n\".join(results)",
        "test": "",
        "num_ids": 199
    },
    {
        "number": 4630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_cycle_length(p: List[int]) -> int:\n        n = len(p)\n        vis = [False] * n\n        for i in range(n):\n            if not vis[i]:\n                cycle_length = 0\n                j = i\n                while not vis[j]:\n                    vis[j] = True\n                    j = p[j] - 1\n                    cycle_length += 1\n                if cycle_length > 0:\n                    return cycle_length\n        return 1\n\n    def find_first_return_days(p: List[int]) -> List[int]:\n        n = len(p)\n        vis = [False] * n\n        days = [0] * n\n        for i in range(n):\n            if not vis[i]:\n                cycle_length = 0\n                j = i\n                while not vis[j]:\n                    vis[j] = True\n                    days[j] = cycle_length\n                    j = p[j] - 1\n                    cycle_length += 1\n        return days\n\n    q = int(stdin.readline().strip())\n    output = []\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        p = list(map(int, stdin.readline().strip().split()))\n        days = find_first_return_days(p)\n        output.append(\" \".join(map(str, days)))\n    return \"\\n\".join(output)",
        "test": "",
        "num_ids": 360
    },
    {
        "number": 4631,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n\n    x.sort()\n    y = []\n    for i in range(m):\n        if i % 2 == 0:\n            y.append(x[i // 2])\n        else:\n            y.append(x[(i + 1) // 2])\n\n    res = sum(min(abs(x_i - y_j) for x_i in x) for y_j in y)\n\n    return f\"{res}\\n{' '.join(map(str, y))}\"",
        "test": "",
        "num_ids": 157
    },
    {
        "number": 4632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(x: int, y: int) -> bool:\n        return 0 <= x <= 1000 and 0 <= y <= 1000\n\n    def find_path(x: int, y: int, target_x: int, target_y: int, path: str) -> str:\n        if x == target_x and y == target_y:\n            return path\n        if is_valid(x + 1, y) and (x + 1, y) not in packages:\n            new_path = find_path(x + 1, y, target_x, target_y, path + 'R')\n            if new_path:\n                return new_path\n        if is_valid(x, y + 1) and (x, y + 1) not in packages:\n            new_path = find_path(x, y + 1, target_x, target_y, path + 'U')\n            if new_path:\n                return new_path\n        return None\n\n    test_cases = stdin.split('\\n')\n    t = int(test_cases[0])\n    test_cases = test_cases[1:]\n    i = 0\n    result = []\n    while i < t:\n        n = int(test_cases[0])\n        packages = set()\n        for j in range(1, n + 1):\n            x, y = map(int, test_cases[j].split())\n            packages.add((x, y))\n        path = find_path(0, 0, x_i, y_i, '')\n        if path:\n            result.append('YES')\n            result.append(path)\n        else:\n            result.append('NO')\n        i += 1\n    return '\\n'.join(result)",
        "test": "",
        "num_ids": 428
    },
    {
        "number": 4633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def sum_of_digits(n: int) -> int:\n        return sum(int(digit) for digit in str(n))\n\n    def min_moves(n: int, s: int) -> int:\n        moves = 0\n        while sum_of_digits(n) > s:\n            n += 1\n            moves += 1\n        return moves\n\n    t = int(stdin.split('\\n')[0])\n    test_cases = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    return '\\n'.join(str(min_moves(n, s)) for n, s in test_cases)",
        "test": "",
        "num_ids": 166
    },
    {
        "number": 4634,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def min_moves(n: int, books: List[int]) -> int:\n        left = 0\n        right = 0\n        moves = 0\n\n        while right < n:\n            if books[right] == 1:\n                if left == 0:\n                    left = right\n                right += 1\n            elif left != 0:\n                moves += right - left\n                left = 0\n                right += 1\n            else:\n                right += 1\n\n        if left != 0:\n            moves += right - left\n\n        return moves\n\n    t = int(stdin.split('\\n', 1)[0])\n    test_cases = stdin.split('\\n', 1)[1].split('\\n', t)[1:]\n\n    outputs = []\n    for case in test_cases:\n        n = int(case.split('\\n', 1)[0])\n        books = list(map(int, case.split('\\n', 1)[1].split()))\n        outputs.append(str(min_moves(n, books)))\n\n    return '\\n'.join(outputs)",
        "test": "",
        "num_ids": 266
    },
    {
        "number": 4635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def generate_string(n: int, k: int) -> str:\n        if k == 1:\n            return 'a' * n\n        if k == 2:\n            if n % 2 == 0:\n                return 'ab' * (n // 2)\n            else:\n                return 'ab' * (n // 2) + 'a'\n        if k == 3:\n            if n % 3 == 0:\n                return 'abc' * (n // 3)\n            elif n % 3 == 1:\n                return 'abc' * (n // 3) + 'a'\n            else:\n                return 'abc' * (n // 3) + 'ab'\n        if k == 4:\n            if n % 4 == 0:\n                return 'abcd' * (n // 4)\n            elif n % 4 == 1:\n                return 'abcd' * (n // 4) + 'a'\n            elif n % 4 == 2:\n                return 'abcd' * (n // 4) + 'ab'\n            else:\n                return 'abcd' * (n // 4) + 'abc'\n        if k == 5:\n            if n % 5 == 0:\n                return 'abcde' * (n // 5)\n            elif n % 5 == 1:\n                return 'abcde' * (n // 5) + 'a'\n            elif n % 5 == 2:\n                return 'abcde' * (n // 5) + 'ab'\n            elif n % 5 == 3:\n                return 'abcde' * (n // 5) + 'abc'\n            else:\n                return 'abcde' * (n // 5) + 'abcd'\n        if k == 6:\n            if n % 6 == 0:\n                return 'abcdef' * (n // 6)\n            elif n % 6 == 1:\n                return 'abcdef' * (n // 6) + 'a'\n            elif n % 6 == 2:\n                return 'abcdef' * (n // 6) + 'ab'\n            elif n % 6 == 3:\n                return 'abcdef' * (n // 6) + 'abc'\n            elif n % 6 == 4:\n                return 'abcdef' * (n // 6) + 'abcd'\n            else:\n                return 'abcdef' * (n // 6) + 'abcde'\n        if k == 7:\n            if n % 7 == 0:\n                return 'abcdefg' * (n // 7)\n            elif n % 7 == 1:\n                return 'abcdefg' * (n // 7) + 'a'\n            elif n % 7 == 2:\n                return 'abcdefg' * (n // 7) + 'ab'\n            elif n % 7 == 3:\n                return 'abcdefg' * (n // 7) + 'abc'\n            elif n % 7 == 4:\n                return 'abcdefg' * (n // 7) + 'abcd'\n            elif n % 7 == 5:\n                return 'abcdefg' * (n // 7) + 'abcde'\n            else:\n                return 'abcdefg' * (n // 7) + 'abcdef'\n        if k == 8:\n            if n % 8 == 0:\n                return 'abcdefgh' * (n // 8)\n            elif n % 8 == 1:\n                return 'abcdefgh' * (n // 8) + 'a'\n            elif n % 8 == 2:\n                return 'abcdefgh' * (n // 8) + 'ab'\n            elif n % 8 == 3:\n                return 'abcdefgh' * (n // 8) + 'abc'\n            elif n % 8 == 4:\n                return 'abcdefgh' * (n // 8) + 'abcd'\n            elif n % 8 == 5:\n                return 'abcdefgh' * (n // 8) + 'abcde'\n            elif n % 8 == 6:\n                return 'abcdefgh' * (n // 8) + 'abcdef'",
        "test": "",
        "num_ids": 1025
    },
    {
        "number": 4636,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def play_game(n: int, a: List[int]) -> Tuple[int, int, int]:\n        alice_score = 0\n        bob_score = 0\n        moves = 0\n\n        while n > 0:\n            moves += 1\n            if moves % 2 == 1:\n                # Alice's move\n                if alice_score == 0:\n                    alice_eat = a[0]\n                    alice_score += a[0]\n                    n -= 1\n                    a = a[1:]\n                else:\n                    for i, candy in enumerate(a):\n                        if alice_score + candy > bob_score:\n                            alice_eat = candy\n                            alice_score += candy\n                            n -= 1\n                            a = a[i+1:]\n                            break\n                    else:\n                        alice_eat = sum(a)\n                        alice_score += alice_eat\n                        n -= len(a)\n                        a = []\n            else:\n                # Bob's move\n                if bob_score == 0:\n                    bob_eat = a[-1]\n                    bob_score += a[-1]\n                    n -= 1\n                    a = a[:-1]\n                else:\n                    for i, candy in enumerate(a[::-1]):\n                        if bob_score + candy > alice_score:\n                            bob_eat = candy\n                            bob_score += candy\n                            n -= 1\n                            a = a[:-i-1]\n                            break\n                    else:\n                        bob_eat = sum(a)\n                        bob_score += bob_eat\n                        n -= len(a)\n                        a = []\n\n        return moves, alice_score, bob_score\n\n    t = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        moves, alice_score, bob_score = play_game(n, a)\n        result.append(f\"{moves} {alice_score} {bob_score}\")\n\n    return \"\\n\".join(result)",
        "test": "",
        "num_ids": 589
    },
    {
        "number": 4637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def max_sum(a: List[int], b: List[int], k: int) -> int:\n        a.sort(reverse=True)\n        b.sort(reverse=True)\n        for _ in range(k):\n            for i in range(len(a)):\n                for j in range(len(b)):\n                    if a[i] < b[j]:\n                        a[i], b[j] = b[j], a[i]\n                        break\n        return sum(a)\n\n    t = int(stdin.readline().strip())\n    result = []\n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        b = list(map(int, stdin.readline().strip().split()))\n        result.append(max_sum(a, b, k))\n    return \"\\n\".join(map(str, result))",
        "test": "",
        "num_ids": 241
    },
    {
        "number": 4638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    dp = [0] * n\n\n    for i in range(1, n):\n        dp[i] = min(dp[i - 1] + a[i - 1], dp[i - 1] + c + b[i - 1])\n\n    for i in range(1, n):\n        dp[i] = min(dp[i], dp[i - 1] + a[i - 1])\n\n    return ' '.join(map(str, dp))",
        "test": "",
        "num_ids": 178
    },
    {
        "number": 4639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def generate_strings(n: int) -> list:\n        if n == 3:\n            return ['aba', 'baa', 'abb']\n        prev_strings = generate_strings(n - 1)\n        new_strings = []\n        for string in prev_strings:\n            for i in range(len(string) + 1):\n                new_string = string[:i] + 'b' + string[i:]\n                new_strings.append(new_string)\n        return sorted(new_strings)\n\n    def find_kth_string(n: int, k: int) -> str:\n        strings = generate_strings(n)\n        return strings[k - 1]\n\n    test_cases = [list(map(int, line.split())) for line in stdin.split('\\n')[:-1]]\n    output = []\n    for n, k in test_cases:\n        output.append(find_kth_string(n, k))\n    return '\\n'.join(output)\n",
        "test": "",
        "num_ids": 240
    },
    {
        "number": 4640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def can_save(x, y, left, right):\n        return left <= x <= right\n\n    def save_points(points, left1, right1, left2, right2):\n        saved_points = 0\n        for x, y in points:\n            if can_save(x, y, left1, right1) or can_save(x, y, left2, right2):\n                saved_points += 1\n        return saved_points\n\n    def find_max_saved_points(points, k):\n        points.sort()\n        n = len(points)\n        max_saved_points = 0\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                left1 = points[i][0]\n                right1 = left1 + k\n                left2 = points[j][0]\n                right2 = left2 + k\n\n                if left1 <= left2:\n                    max_saved_points = max(max_saved_points, save_points(points, left1, right1, left2, right2))\n                else:\n                    max_saved_points = max(max_saved_points, save_points(points, left2, right2, left1, right1))\n\n        return max_saved_points\n\n    test_cases = int(stdin.readline().strip())\n    output = []\n\n    for _ in range(test_cases):\n        n, k = map(int, stdin.readline().strip().split())\n        x = list(map(int, stdin.readline().strip().split()))\n        y = list(map(int, stdin.readline().strip().split()))\n        points = list(zip(x, y))\n        max_saved_points = find_max_saved_points(points, k)\n        output.append(str(max_saved_points))\n\n    return \"\\n\".join(output)",
        "test": "",
        "num_ids": 457
    },
    {
        "number": 4641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_mex(arr):\n        mex = 0\n        while mex in arr:\n            mex += 1\n        return mex\n\n    def process_query(query, x, a):\n        y = int(query)\n        a.append(y)\n        mex = get_mex(a)\n        return mex\n\n    def main():\n        q, x = map(int, stdin.split())\n        a = []\n        results = []\n\n        for i in range(q):\n            query = input()\n            mex = process_query(query, x, a)\n            results.append(str(mex))\n\n        return results\n\n    return main()\n",
        "test": "",
        "num_ids": 163
    },
    {
        "number": 4642,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_array(n, x, y):\n        a = [x]\n        diff = (y - x) // (n - 1)\n        for i in range(1, n):\n            a.append(a[i - 1] + diff)\n        return a\n\n    t = int(stdin.split('\\n')[0])\n    test_cases = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    output = []\n    for n, x, y in test_cases:\n        array = find_array(n, x, y)\n        output.append(' '.join(map(str, array)))\n\n    return '\\n'.join(output)",
        "test": "",
        "num_ids": 173
    },
    {
        "number": 4643,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = list(map(int, stdin.split()))\n    arr.sort()\n    return ' '.join(map(str, arr))",
        "test": "",
        "num_ids": 38
    },
    {
        "number": 4644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_odd_sum(arr: list) -> bool:\n        return sum(arr) % 2 != 0\n\n    def can_get_odd_sum(n: int, arr: list) -> bool:\n        if n % 2 == 0:\n            return False\n        for i in range(n):\n            if arr[i] % 2 != 0:\n                return True\n        return False\n\n    t = int(stdin.readline().strip())\n    result = []\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        arr = list(map(int, stdin.readline().strip().split()))\n        if is_odd_sum(arr):\n            result.append(\"YES\")\n        elif can_get_odd_sum(n, arr):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n    return \"\\n\".join(result)",
        "test": "",
        "num_ids": 226
    },
    {
        "number": 4645,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_permutation(n: int) -> str:\n        if n == 2:\n            return \"2 1\"\n        if n == 3:\n            return \"3 1 2\"\n        if n % 2 == 0:\n            return -1\n        p = [i for i in range(1, n + 1)]\n        for i in range(1, n, 2):\n            p[i], p[i + 1] = p[i + 1], p[i]\n        return \" \".join(map(str, p))\n\n    t = int(stdin.split(\"\\n\")[0])\n    output = []\n    for _ in range(t):\n        n = int(stdin.split(\"\\n\")[_ + 1])\n        result = find_permutation(n)\n        output.append(result)\n    return \"\\n\".join(output)",
        "test": "",
        "num_ids": 216
    },
    {
        "number": 4646,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(a: List[int]) -> bool:\n        for i, x in enumerate(a):\n            if i % 2 != x % 2:\n                return False\n        return True\n\n    def min_moves(a: List[int]) -> int:\n        moves = 0\n        for i, x in enumerate(a):\n            if i % 2 != x % 2:\n                for j in range(i + 1, len(a)):\n                    if i % 2 == a[j] % 2:\n                        a[i], a[j] = a[j], a[i]\n                        moves += 1\n                        break\n        return moves if is_good(a) else -1\n\n    t = int(stdin.readline())\n    result = []\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        result.append(min_moves(a))\n    return '\\n'.join(map(str, result))",
        "test": "",
        "num_ids": 259
    },
    {
        "number": 4647,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(v, parent):\n        subtree_size[v] = 1\n        for u in adj[v]:\n            if u != parent:\n                dfs(u, v)\n                subtree_size[v] += subtree_size[u]\n\n    def find_max_diff(v, parent):\n        max_diff = -1\n        for u in adj[v]:\n            if u != parent:\n                max_diff = max(max_diff, find_max_diff(u, v))\n        cnt_w = cnt_b = 0\n        for u in adj[v]:\n            if u != parent:\n                if a[u] == 1:\n                    cnt_w += subtree_size[u]\n                else:\n                    cnt_b += subtree_size[u]\n        cnt_w += a[v]\n        cnt_b += 1 - a[v]\n        max_diff = max(max_diff, cnt_w - cnt_b)\n        return max_diff\n\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    adj = [[] for _ in range(n)]\n    for i in range(2, n):\n        u, v = map(int, lines[i].split())\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n\n    subtree_size = [0] * n\n    dfs(0, -1)\n    res = [find_max_diff(i, -1) for i in range(n)]\n    return ' '.join(map(str, res))",
        "test": "",
        "num_ids": 422
    },
    {
        "number": 4648,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def min_moves(n: int) -> int:\n        if n == 1:\n            return 0\n        if n % 6 != 0:\n            return -1\n        moves = 0\n        while n > 1:\n            if n % 6 == 0:\n                n //= 6\n                moves += 1\n            else:\n                n *= 2\n                moves += 1\n        return moves\n\n    t = int(stdin.split('\\n')[0])\n    test_cases = [int(x) for x in stdin.split('\\n')[1:]]\n    results = []\n    for n in test_cases:\n        results.append(min_moves(n))\n    return '\\n'.join(str(x) for x in results)",
        "test": "",
        "num_ids": 188
    },
    {
        "number": 4649,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(s: str, k: int) -> bool:\n        return any(s[i:i + k] in \"RGB\" * (len(s) // 3 + 1) for i in range(len(s) - k + 1))\n\n    def min_changes(s: str, k: int) -> int:\n        if is_substring(s, k):\n            return 0\n        return min(s.count(c) for c in set(s) - set(\"RGB\"))\n\n    q = int(stdin.readline().strip())\n    result = []\n    for _ in range(q):\n        n, k = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        result.append(min_changes(s, k))\n\n    return \"\\n\".join(map(str, result))\n",
        "test": "",
        "num_ids": 213
    },
    {
        "number": 4650,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def count_divisible_by_3(arr: List[int]) -> int:\n        return sum(x % 3 == 0 for x in arr)\n\n    def max_divisible_by_3(n: int, arr: List[int]) -> int:\n        arr.sort()\n        max_count = count_divisible_by_3(arr)\n\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                new_arr = arr.copy()\n                new_arr[i] = new_arr[i] + new_arr[j]\n                new_arr.pop(j)\n                new_arr.sort()\n                max_count = max(max_count, count_divisible_by_3(new_arr))\n\n        return max_count\n\n    t = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        arr = list(map(int, stdin.readline().strip().split()))\n        result.append(max_divisible_by_3(n, arr))\n\n    return \"\\n\".join(map(str, result))",
        "test": "",
        "num_ids": 300
    },
    {
        "number": 4651,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_lexicographically_less(p: List[int], q: List[int]) -> bool:\n        n = len(p)\n        for i in range(n):\n            if p[i] < q[i]:\n                return True\n            elif p[i] > q[i]:\n                return False\n        return False\n\n    def find_min_permutation(permutation: List[int]) -> List[int]:\n        n = len(permutation)\n        for i in range(n - 1):\n            if permutation[i] > permutation[i + 1]:\n                for j in range(i + 1, n):\n                    if permutation[i] > permutation[j]:\n                        permutation[i], permutation[j] = permutation[j], permutation[i]\n                        return permutation\n        return permutation\n\n    q = int(stdin.readline().strip())\n    output = []\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        permutation = list(map(int, stdin.readline().strip().split()))\n        min_permutation = find_min_permutation(permutation)\n        output.append(\" \".join(map(str, min_permutation)))\n\n    return \"\\n\".join(output)",
        "test": "",
        "num_ids": 323
    },
    {
        "number": 4652,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(order: List[int]) -> bool:\n        for i in range(1, len(order)):\n            if order[i] != order[i - 1] + 1:\n                return False\n        return True\n\n    def is_valid_counterclockwise(order: List[int]) -> bool:\n        for i in range(1, len(order)):\n            if order[i] != order[i - 1] - 1:\n                return False\n        return True\n\n    queries = [line.strip().split() for line in stdin.split('\\n')[1:]]\n    result = []\n\n    for query in queries:\n        n = int(query[0])\n        order = [int(x) for x in query[1:]]\n\n        if is_valid(order) or is_valid_counterclockwise(order):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return '\\n'.join(result)",
        "test": "",
        "num_ids": 235
    },
    {
        "number": 4653,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_satisfied(a, b, k, num_kids_with_a_plus_1):\n        return (b - a <= 1) and (num_kids_with_a_plus_1 <= k // 2)\n\n    def find_max_candies(n, k):\n        if k == 1:\n            return n\n        if n == 1:\n            return 1\n\n        max_candies = 0\n        for a in range(1, n):\n            b = n - a\n            num_kids_with_a_plus_1 = k - (n - b)\n            if is_satisfied(a, b, k, num_kids_with_a_plus_1):\n                max_candies = max(max_candies, a + 1)\n\n        return max_candies\n\n    t = int(stdin.readline())\n    output = []\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        max_candies = find_max_candies(n, k)\n        output.append(str(max_candies))\n\n    return \"\\n\".join(output)",
        "test": "",
        "num_ids": 300
    },
    {
        "number": 4654,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_representation(n: int, k: int) -> str:\n        if n < k or n % 2 != k % 2:\n            return \"NO\"\n        a = (n - k) // 2\n        if a < 1:\n            return \"NO\"\n        return \"YES \" + \" \".join(str(a + i) for i in range(k))\n\n    t = int(stdin.split(\"\\n\", 1)[0])\n    test_cases = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\", 1)[1].split(\"\\n\", t)[:t]]\n\n    return \"\\n\".join(find_representation(n, k) for n, k in test_cases)\n",
        "test": "",
        "num_ids": 181
    },
    {
        "number": 4655,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def max_candies(a, b, c):\n        if a == b == c:\n            return a // 2\n        elif a == b or a == c:\n            return a\n        elif b == c:\n            return b\n        else:\n            return max(a, b, c)\n\n    queries = [list(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    results = [max_candies(*query) for query in queries]\n    return \"\\n\".join(map(str, results))\n\nstdin = \"\"\"4\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\"\"\"\n\nprint(solution(stdin)) ",
        "test": "",
        "num_ids": 232
    },
    {
        "number": 4656,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_k_beautiful(necklace: str, k: int) -> bool:\n        if len(necklace) == 1:\n            return True\n        for i in range(len(necklace)):\n            if necklace[i:] + necklace[:i] != necklace:\n                if i % k == 0:\n                    return False\n        return True\n\n    def max_k_beautiful_necklace(n: int, k: int, beads: str) -> int:\n        max_length = 0\n        for i in range(1, n + 1):\n            for subset in itertools.combinations(beads, i):\n                if len(set(subset)) == len(subset):\n                    necklace = \"\".join(subset)\n                    if is_k_beautiful(necklace, k):\n                        max_length = max(max_length, len(necklace))\n        return max_length\n\n    lines = stdin.splitlines()\n    t = int(lines[0])\n    result = []\n\n    for i in range(1, t + 1):\n        n, k = map(int, lines[i * 2 - 1].split())\n        beads = lines[i * 2]\n        result.append(max_k_beautiful_necklace(n, k, beads))\n\n    return \"\\n\".join(map(str, result))",
        "test": "",
        "num_ids": 347
    },
    {
        "number": 4657,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_odd(num: int) -> bool:\n        return num % 2 != 0\n\n    def find_subsegments(a: List[int], k: int) -> List[int]:\n        n = len(a)\n        r = [0] * k\n        r[0] = 0\n        r[k - 1] = n\n        for i in range(1, k - 1):\n            for j in range(r[i - 1] + 1, n - k + i + 1):\n                if is_odd(sum(a[r[i - 1] + 1:j])) and is_odd(sum(a[j:n])):\n                    r[i] = j\n                    break\n            else:\n                return None\n        return r\n\n    queries = stdin.split(\"\\n\")\n    q = int(queries[0])\n    output = []\n\n    for i in range(1, q + 1):\n        n, k = map(int, queries[i * 2 - 1].split())\n        a = list(map(int, queries[i * 2].split()))\n\n        if n < k:\n            output.append(\"NO\")\n        else:\n            subsegments = find_subsegments(a, k)\n            if subsegments is None:\n                output.append(\"NO\")\n            else:\n                output.append(\"YES\")\n                output.append(\" \".join(map(str, subsegments)))\n\n    return \"\\n\".join(output)",
        "test": "",
        "num_ids": 368
    },
    {
        "number": 4658,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin, 2)\n    return format(n, '032b')",
        "test": "",
        "num_ids": 26
    },
    {
        "number": 4659,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    numRows = int(stdin)\n    result = []\n    for i in range(numRows):\n        row = [1] * (i + 1)\n        if i > 1:\n            for j in range(1, i):\n                row[j] = result[-1][j - 1] + result[-1][j]\n        result.append(row)\n    return result",
        "test": "",
        "num_ids": 94
    },
    {
        "number": 4660,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    import re\n\n    def is_valid_email(email: str) -> bool:\n        pattern = r'^[a-zA-Z0-9_-]+@[a-zA-Z0-9]+\\.[a-zA-Z]{1,3}$'\n        return bool(re.match(pattern, email))\n\n    N = int(stdin.split('\\n')[0])\n    emails = stdin.split('\\n')[1:]\n\n    valid_emails = list(filter(is_valid_email, emails))\n    valid_emails.sort()\n\n    return str(valid_emails)",
        "test": "",
        "num_ids": 147
    },
    {
        "number": 4661,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    fibonacci = [0]\n    for i in range(N):\n        if i <= 1:\n            fibonacci.append(i)\n        else:\n            fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n    cubes = list(map(lambda x: x**3, fibonacci))\n    return str(cubes[:N])[1:-1]",
        "test": "",
        "num_ids": 114
    },
    {
        "number": 4662,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    xml = stdin.split('\\n')\n    depth = 0\n    max_depth = 0\n    for line in xml:\n        for char in line:\n            if char == '<':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == '>':\n                depth -= 1\n    return str(max_depth)",
        "test": "",
        "num_ids": 90
    },
    {
        "number": 4663,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    for i in range(1, N + 1):\n        number = lines[i]\n        if len(number) == 10 and number[0] in ['7', '8', '9']:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
        "test": "",
        "num_ids": 87
    },
    {
        "number": 4664,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into lines\n    lines = stdin.splitlines()\n\n    # Get the values of M and N\n    M = int(lines[0])\n    N = int(lines[2])\n\n    # Create sets for M and N\n    set_M = set(map(int, lines[1].split()))\n    set_N = set(map(int, lines[3].split()))\n\n    # Calculate the symmetric difference\n    symmetric_difference = set_M.symmetric_difference(set_N)\n\n    # Convert the symmetric difference set to a sorted list\n    result = sorted(list(symmetric_difference))\n\n    # Convert the result list to a string with each element separated by a newline\n    output = \"\\n\".join(map(str, result))\n\n    return output",
        "test": "",
        "num_ids": 191
    },
    {
        "number": 4665,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    column_names = lines[1].split()\n    marks_index = column_names.index('MARKS')\n    marks_sum = 0\n\n    for i in range(2, N + 2):\n        marks_sum += int(lines[i].split()[marks_index])\n\n    average = marks_sum / N\n    return f\"{average:.2f}\"",
        "test": "",
        "num_ids": 115
    },
    {
        "number": 4666,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 != 0:\n        return \"Weird\"\n    elif n in range(2, 6):\n        return \"Not Weird\"\n    elif n in range(6, 21):\n        return \"Weird\"\n    else:\n        return \"Not Weird\"",
        "test": "",
        "num_ids": 80
    },
    {
        "number": 4667,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    xml = ''.join(stdin.split('\\n'))\n    score = 0\n    while '>' in xml:\n        start = xml.index('<')\n        end = xml.index('>')\n        tag = xml[start + 1:end]\n        if ' ' in tag:\n            score += tag.count(' ') + 1\n        xml = xml[end + 1:]\n    return str(score)",
        "test": "",
        "num_ids": 101
    },
    {
        "number": 4668,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = (tuple(map(float, stdin.split())) for _ in range(4))\n\n    def cross_product(a: tuple, b: tuple) -> tuple:\n        x = a[1] * b[2] - a[2] * b[1]\n        y = a[2] * b[0] - a[0] * b[2]\n        z = a[0] * b[1] - a[1] * b[0]\n        return (x, y, z)\n\n    def dot_product(a: tuple, b: tuple) -> float:\n        return sum(p * q for p, q in zip(a, b))\n\n    def vector_length(a: tuple) -> float:\n        return (a[0] ** 2 + a[1] ** 2 + a[2] ** 2) ** 0.5\n\n    AB = tuple(B[i] - A[i] for i in range(3))\n    BC = tuple(C[i] - B[i] for i in range(3))\n    CD = tuple(D[i] - C[i] for i in range(3))\n\n    X = cross_product(AB, BC)\n    Y = cross_product(BC, CD)\n\n    cos_phi = dot_product(X, Y) / (vector_length(X) * vector_length(Y))\n    phi = round(math.degrees(math.acos(cos_phi)), 2)\n\n    return str(phi)",
        "test": "",
        "num_ids": 369
    },
    {
        "number": 4669,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def score_words(words):\n        vowels = \"aeiouy\"\n        score = 0\n        for word in words:\n            num_vowels = sum([1 for letter in word if letter in vowels])\n            if num_vowels % 2 == 0:\n                score += 2\n            else:\n                score += 1\n        return score\n\n    lines = stdin.splitlines()\n    num_words = int(lines[0])\n    words = lines[1].split()\n\n    if len(words) != num_words:\n        raise ValueError(\"Invalid input: the number of words does not match the input\")\n\n    return str(score_words(words))",
        "test": "",
        "num_ids": 169
    },
    {
        "number": 4670,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Regular expression for a valid Roman numeral\n    regex = r\"^(?=[MDCLXVI])M*(C[MD]|D?C{0,3})(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$\"\n    if re.match(regex, stdin):\n        return \"True\"\n    else:\n        return \"False\"",
        "test": "",
        "num_ids": 99
    },
    {
        "number": 4671,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_list = []\n    for line in stdin.split('\\n'):\n        if line.startswith('+91'):\n            num_list.append(line[3:])\n        elif line.startswith('91'):\n            num_list.append(line[2:])\n        elif line.startswith('0'):\n            num_list.append(line[1:])\n        else:\n            num_list.append(line)\n\n    num_list.sort()\n\n    result = []\n    for num in num_list:\n        result.append('+91 ' + num[:5] + ' ' + num[5:])\n\n    return '\\n'.join(result)",
        "test": "",
        "num_ids": 165
    },
    {
        "number": 4672,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    marks = {}\n    for i in range(1, n+1):\n        name, scores = stdin.split('\\n')[i].split(':')\n        marks[name] = list(map(int, scores[1:-1].split(', ')))\n    query_name = stdin.split('\\n')[-1]\n    avg = sum(marks[query_name])/len(marks[query_name])\n    return f\"{avg:.2f}\"",
        "test": "",
        "num_ids": 127
    },
    {
        "number": 4673,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def format_name(name: str, age: int, sex: str) -> str:\n        title = \"Mr.\" if sex == \"M\" else \"Ms.\"\n        return f\"{title} {name} {age}\"\n\n    def sort_key(person: list) -> tuple:\n        return (person[2], person[0])\n\n    people = []\n    for i in range(int(stdin.split(\"\\n\")[0])):\n        name, last_name, age, sex = stdin.split(\"\\n\")[i + 1].split()\n        people.append([f\"{name} {last_name}\", int(age), sex])\n\n    people.sort(key=sort_key)\n    return \"\\n\".join([format_name(*person) for person in people])",
        "test": "",
        "num_ids": 189
    },
    {
        "number": 4674,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, n = map(int, stdin.splitlines())\n    coordinates = [[i, j, k] for i in range(x + 1) for j in range(y + 1) for k in range(z + 1)]\n    result = [coord for coord in coordinates if sum(coord) != n]\n    return result",
        "test": "",
        "num_ids": 86
    },
    {
        "number": 4675,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    C, D = [complex(*map(float, x.split())) for x in stdin.split('\\n')]\n    return '\\n'.join([\n        f\"{C+D:.2f}\",\n        f\"{C-D:.2f}\",\n        f\"{C*D:.2f}\",\n        f\"{C/D:.2f}\",\n        f\"{abs(C):.2f}\",\n        f\"{abs(D):.2f}\"\n    ])",
        "test": "",
        "num_ids": 118
    },
    {
        "number": 4676,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    O, E = stdin.split('\\n')\n    password = ''\n    for i in range(len(O)):\n        password += O[i]\n        if i < len(E):\n            password += E[i]\n    return password",
        "test": "",
        "num_ids": 59
    },
    {
        "number": 4677,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    editor_string = \"\"\n    \n    for char in s:\n        if char == \"0\":\n            editor_string += \"0\"\n        elif char == \"1\":\n            editor_string += \"1\"\n        elif char == \"B\":\n            if editor_string:\n                editor_string = editor_string[:-1]\n    \n    return editor_string",
        "test": "",
        "num_ids": 96
    },
    {
        "number": 4678,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    A.sort()\n    total_height = 0\n    for i in range(N):\n        total_height += max(0, A[i] - i)\n    return str(total_height)",
        "test": "",
        "num_ids": 68
    },
    {
        "number": 4679,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    S_A, S_B, S_C = stdin.split('\\n')\n    deck_A = list(S_A)\n    deck_B = list(S_B)\n    deck_C = list(S_C)\n\n    while deck_A and deck_B and deck_C:\n        if S_A[0] == 'a':\n            S_A = S_A[1:]\n        elif S_A[0] == 'b':\n            S_B = S_B[1:]\n        else:\n            S_C = S_C[1:]\n        deck_A = list(S_A)\n        deck_B = list(S_B)\n        deck_C = list(S_C)\n\n    if not deck_A:\n        return 'A'\n    elif not deck_B:\n        return 'B'\n    else:\n        return 'C'",
        "test": "",
        "num_ids": 215
    },
    {
        "number": 4680,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c == 17 and a <= 5 and b <= 7 and c <= 5:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "",
        "num_ids": 62
    },
    {
        "number": 4681,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"2\"\n    elif n == 1:\n        return \"1\"\n    else:\n        prev_prev, prev = 2, 1\n        for _ in range(2, n + 1):\n            curr = prev_prev + prev\n            prev_prev, prev = prev, curr\n        return str(curr)",
        "test": "",
        "num_ids": 98
    },
    {
        "number": 4682,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    area = (a + b) * h // 2\n    return str(area)",
        "test": "",
        "num_ids": 39
    },
    {
        "number": 4683,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    mod = 10**9 + 7\n    result = 0\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            result += a[i] * a[j]\n            result %= mod\n\n    return str(result)",
        "test": "",
        "num_ids": 91
    },
    {
        "number": 4684,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    number = r * 100 + g * 10 + b\n    if number % 4 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "",
        "num_ids": 63
    },
    {
        "number": 4685,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n\n    def double(n: int) -> int:\n        return n * 2\n\n    def choose_largest_sum(A: int, B: int, C: int) -> int:\n        choices = [double(A), double(B), double(C)]\n        return max(sum(choices), A + B + C)\n\n    for _ in range(K):\n        A, B, C = choose_largest_sum(A, B, C), A, B\n\n    return str(A + B + C)",
        "test": "",
        "num_ids": 145
    },
    {
        "number": 4686,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    w = stdin.lower()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = [0] * 26\n\n    for char in w:\n        if char in alphabet:\n            count[ord(char) - ord('a')] += 1\n\n    for num in count:\n        if num % 2 != 0:\n            return \"No\"\n\n    return \"Yes\"",
        "test": "",
        "num_ids": 104
    },
    {
        "number": 4687,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    arr = []\n    for _ in range(N):\n        a, b = map(int, input().split())\n        arr.extend([a] * b)\n    arr.sort()\n    return str(arr[K - 1])",
        "test": "",
        "num_ids": 73
    },
    {
        "number": 4688,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(K ** N)",
        "test": "",
        "num_ids": 25
    },
    {
        "number": 4689,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, N = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n\n    total_distance = A[-1]\n    for i in range(N - 1):\n        distance = min(A[i + 1] - A[i], K - A[i] + A[i + 1])\n        total_distance += distance\n\n    return str(total_distance)",
        "test": "",
        "num_ids": 109
    },
    {
        "number": 4690,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    area1 = A * B\n    area2 = C * D\n    if area1 > area2:\n        return str(area1)\n    elif area1 < area2:\n        return str(area2)\n    else:\n        return str(area1)",
        "test": "",
        "num_ids": 82
    },
    {
        "number": 4691,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *verdicts = stdin.split()\n    n = int(n)\n    ac_count, wa_count, tle_count, re_count = 0, 0, 0, 0\n\n    for verdict in verdicts:\n        if verdict == \"AC\":\n            ac_count += 1\n        elif verdict == \"WA\":\n            wa_count += 1\n        elif verdict == \"TLE\":\n            tle_count += 1\n        else:\n            re_count += 1\n\n    return f\"AC x {ac_count}\\nWA x {wa_count}\\nTLE x {tle_count}\\nRE x {re_count}\"",
        "test": "",
        "num_ids": 168
    },
    {
        "number": 4692,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    M = int(stdin)\n    now = datetime.now()\n    year = now.year\n    month = now.month\n    day = now.day\n    hour = now.hour\n    minute = now.minute\n    second = now.second\n    microsecond = now.microsecond\n\n    if month == 12 and day == 30 and hour < M:\n        new_year = datetime(year + 1, 1, 1)\n        time_left = new_year - datetime(year, month, day, M, 0, 0, 0)\n        return str(int(time_left.total_seconds() / 3600))\n    else:\n        new_year = datetime(year, 12, 30, M, 0, 0, 0)\n        time_left = new_year - datetime(year, month, day, hour, minute, second, microsecond)\n        return str(int(time_left.total_seconds() / 3600)) ",
        "test": "",
        "num_ids": 244
    },
    {
        "number": 4693,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A + B >= 10:\n        return \"error\"\n    else:\n        return str(A + B)",
        "test": "",
        "num_ids": 46
    },
    {
        "number": 4694,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = list(map(int, stdin.split()))\n    a.sort()\n    distance = a[-1] - a[0]\n    for i in range(1, N):\n        distance = max(distance, a[i] - a[i - 1])\n    return str(distance)",
        "test": "",
        "num_ids": 76
    },
    {
        "number": 4695,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    groups = [set([1, 4, 7, 10]), set([2, 5, 8, 11]), set([3, 6, 9, 12])]\n\n    for group in groups:\n        if x in group and y in group:\n            return \"Yes\"\n    return \"No\"",
        "test": "",
        "num_ids": 95
    },
    {
        "number": 4696,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    product = a * b\n    if product % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "test": "",
        "num_ids": 52
    },
    {
        "number": 4697,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return str(min(N, M))",
        "test": "",
        "num_ids": 27
    },
    {
        "number": 4698,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    T = list(map(int, lines[1].split()))\n    M = int(lines[2])\n    P = []\n    X = []\n    for i in range(3, 3 + M):\n        p, x = list(map(int, lines[i].split()))\n        P.append(p)\n        X.append(x)\n\n    result = []\n    for i in range(M):\n        time_sum = sum(T)\n        for j in range(N):\n            if j + 1 == P[i]:\n                time_sum += X[i] - T[j]\n        result.append(time_sum)\n\n    return '\\n'.join(map(str, result))",
        "test": "",
        "num_ids": 192
    },
    {
        "number": 4699,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, D = map(int, stdin.split())\n    disliked_digits = set(map(int, input().split()))\n\n    # Find the smallest digit that is not disliked\n    for i in range(10):\n        if i not in disliked_digits:\n            min_digit = i\n            break\n\n    # Calculate the amount of money that satisfies the condition\n    money = N\n    while True:\n        if all(digit not in disliked_digits for digit in str(money)):\n            break\n        else:\n            money += 1\n\n    return str(money)",
        "test": "",
        "num_ids": 152
    },
    {
        "number": 4700,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_observatory(observatory: int, elevations: list, roads: list) -> bool:\n        for road in roads:\n            if road[0] == observatory and elevations[road[1] - 1] >= elevations[observatory - 1]:\n                return False\n            if road[1] == observatory and elevations[road[0] - 1] >= elevations[observatory - 1]:\n                return False\n        return True\n\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    elevations = list(map(int, lines[1].split()))\n    roads = [list(map(int, line.split())) for line in lines[2:]]\n\n    good_observatories = [is_good_observatory(i + 1, elevations, roads) for i in range(N)]\n    return str(sum(good_observatories))",
        "test": "",
        "num_ids": 226
    },
    {
        "number": 4701,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    min_value = 1\n    for _ in range(N):\n        min_value = min(min_value * 2, min_value + K)\n    return str(min_value)",
        "test": "",
        "num_ids": 63
    },
    {
        "number": 4702,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0:\n        return \"1\"\n    elif x == 1:\n        return \"0\"\n    else:\n        raise ValueError(\"x should be either 0 or 1\")",
        "test": "",
        "num_ids": 58
    },
    {
        "number": 4703,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    total_sum = 0\n\n    # Calculate the sum of the original string\n    original_sum = sum(int(c) for c in s)\n    total_sum += original_sum\n\n    # Insert + between each pair of consecutive digits and evaluate the formulas\n    for i in range(1, n):\n        formula = s[:i] + '+' + s[i:]\n        formula_sum = sum(int(c) for c in formula.split('+'))\n        total_sum += formula_sum\n\n    return str(total_sum)",
        "test": "",
        "num_ids": 144
    },
    {
        "number": 4704,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, a = map(int, stdin.split())\n    a = list(map(int, a.split()))\n    a.sort()\n\n    snuke_min = sum(a[:N-1])\n    raccoon_min = sum(a[N-1:])\n\n    snuke_max = sum(a[1:])\n    raccoon_max = sum(a[:1])\n\n    return str(min(abs(snuke_min - raccoon_min), abs(snuke_max - raccoon_max)))",
        "test": "",
        "num_ids": 132
    },
    {
        "number": 4705,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    x = N * 800\n    y = (N // 15) * 200\n    return str(x - y)",
        "test": "",
        "num_ids": 47
    },
    {
        "number": 4706,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [list(line) for line in stdin.split('\\n')]\n    diagonal = [matrix[i][i] for i in range(len(matrix))]\n    return ''.join(diagonal)",
        "test": "",
        "num_ids": 52
    },
    {
        "number": 4707,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = map(int, stdin)\n    count = 0\n    if s1 == 1:\n        count += 1\n    if s2 == 1:\n        count += 1\n    if s3 == 1:\n        count += 1\n    return str(count)",
        "test": "",
        "num_ids": 77
    },
    {
        "number": 4708,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, X, Y = map(int, stdin.split())\n    total_fee = 0\n    for i in range(N):\n        if i <= K:\n            total_fee += X\n        else:\n            total_fee += Y\n    return str(total_fee)",
        "test": "",
        "num_ids": 75
    },
    {
        "number": 4709,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, op, B = stdin.split()\n    A = int(A)\n    B = int(B)\n    if op == \"+\":\n        return str(A + B)\n    elif op == \"-\":\n        return str(A - B)\n    else:\n        raise ValueError(\"Invalid operator\")",
        "test": "",
        "num_ids": 75
    },
    {
        "number": 4710,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    if x < 1200:\n        return \"ABC\"\n    else:\n        return \"ARC\"",
        "test": "",
        "num_ids": 40
    },
    {
        "number": 4711,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    prices = [a, b, c]\n    prices.sort()\n    return str(prices[0] + prices[1])",
        "test": "",
        "num_ids": 50
    },
    {
        "number": 4712,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split()[:2])\n    image = stdin.split('\\n')[1:]\n    box = '#' * (W + 2)\n    result = [box]\n    for row in image:\n        result.append('#' + row + '#')\n    result.append(box)\n    return '\\n'.join(result)",
        "test": "",
        "num_ids": 89
    },
    {
        "number": 4713,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    x = 0\n    max_x = 0\n\n    for i in range(N):\n        if S[i] == \"I\":\n            x += 1\n        else:\n            x -= 1\n\n        max_x = max(max_x, x)\n\n    return str(max_x)",
        "test": "",
        "num_ids": 96
    },
    {
        "number": 4714,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    count = 0\n    for i in range(A, B + 1):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return str(count)",
        "test": "",
        "num_ids": 65
    },
    {
        "number": 4715,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    colors = set([a, b, c])\n    return str(len(colors))",
        "test": "",
        "num_ids": 39
    },
    {
        "number": 4716,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    lengths = list(map(int, stdin.split()[2:]))\n    lengths.sort(reverse=True)\n    max_length = sum(lengths[0:K])\n    return str(max_length)",
        "test": "",
        "num_ids": 74
    },
    {
        "number": 4717,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    dist_a = abs(x - a)\n    dist_b = abs(x - b)\n    if dist_a < dist_b:\n        return \"A\"\n    else:\n        return \"B\"",
        "test": "",
        "num_ids": 69
    },
    {
        "number": 4718,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    year = \"2018\"\n    return year + stdin[6:]",
        "test": "",
        "num_ids": 21
    },
    {
        "number": 4719,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    S = [stdin.readline().strip() for _ in range(n)]\n\n    def is_subsequence(s1: str, s2: str) -> bool:\n        i = 0\n        for c in s2:\n            if i < len(s1) and s1[i] == c:\n                i += 1\n        return i == len(s1)\n\n    longest_string = \"\"\n    for s1 in S:\n        for s2 in S:\n            if len(s1) > len(longest_string) and is_subsequence(s1, s2):\n                longest_string = s1\n\n    return longest_string\n",
        "test": "",
        "num_ids": 174
    },
    {
        "number": 4720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    seats = [0] * 100001\n    for i in range(1, N + 1):\n        l, r = map(int, stdin.split('\\n')[i].split())\n        for j in range(l, r + 1):\n            seats[j] = 1\n    return str(sum(seats))",
        "test": "",
        "num_ids": 99
    },
    {
        "number": 4721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str((n - 1) * (m - 1))",
        "test": "",
        "num_ids": 33
    },
    {
        "number": 4722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if (A + B) % 3 == 0:\n        return \"Possible\"\n    else:\n        return \"Impossible\"",
        "test": "",
        "num_ids": 49
    },
    {
        "number": 4723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    T = T.replace('?', '.')\n    S = S.replace('?', '.')\n\n    # Check if T is a substring of S\n    if T not in S:\n        return \"UNRESTORABLE\"\n\n    # Find all possible strings that satisfy Condition 1\n    possible_strings = []\n    for i in range(len(S) - len(T) + 1):\n        if S[i:i+len(T)] == T:\n            possible_strings.append(S[:i] + T + S[i+len(T):])\n\n    # Find the lexicographically smallest string among the ones that satisfy Condition 1\n    S = min(possible_strings)\n\n    # Replace '.' with '?' in the final string\n    S = S.replace('.', '?')\n\n    return S",
        "test": "",
        "num_ids": 211
    },
    {
        "number": 4724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, G = map(int, stdin.split())\n    performance = (R + G) / 2\n    return str(int(performance))",
        "test": "",
        "num_ids": 38
    },
    {
        "number": 4725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    distinct_letters = set(stdin)\n    simplicity = len(distinct_letters)\n\n    if simplicity <= 2:\n        return 0\n\n    min_erase = float('inf')\n    for letter in distinct_letters:\n        new_string = stdin.replace(letter, '')\n        new_simplicity = len(set(new_string))\n\n        if new_simplicity <= 2:\n            min_erase = min(min_erase, stdin.count(letter))\n\n    return min_erase",
        "test": "",
        "num_ids": 131
    },
    {
        "number": 4726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n, t = map(int, stdin.split())\n    time_complexity = [n * 1, 2 ** n, n ** 4, n ** 3, n ** 2, n * 1, n]\n    if time_complexity[t - 1] <= m:\n        return \"AC\"\n    else:\n        return \"TLE\"",
        "test": "",
        "num_ids": 91
    },
    {
        "number": 4727,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def move_left(grid):\n        new_grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n        for i in range(4):\n            k = 0\n            for j in range(4):\n                if grid[i][j] != 0:\n                    new_grid[i][k] = grid[i][j]\n                    k += 1\n        return new_grid\n\n    def merge_left(grid):\n        score = 0\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == grid[i][j + 1] and grid[i][j] != 0:\n                    grid[i][j] *= 2\n                    grid[i][j + 1] = 0\n                    score += grid[i][j]\n        return grid, score\n\n    def move_up(grid):\n        grid = transpose(grid)\n        grid = move_left(grid)\n        grid = transpose(grid)\n        return grid\n\n    def move_down(grid):\n        grid = transpose(grid)\n        grid = move_right(grid)\n        grid = transpose(grid)\n        return grid\n\n    def move_right(grid):\n        new_grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n        for i in range(4):\n            k = 3\n            for j in range(3, -1, -1):\n                if grid[i][j] != 0:\n                    new_grid[i][k] = grid[i][j]\n                    k -= 1\n        return new_grid\n\n    def transpose(grid):\n        return [[grid[j][i] for j in range(4)] for i in range(4)]\n\n    def execute_move(grid, move):\n        if move == 0:\n            grid = move_left(grid)\n        elif move == 1:\n            grid = move_up(grid)\n        elif move == 2:\n            grid = move_right(grid)\n        else:\n            grid = move_down(grid)\n        grid, score = merge_left(grid)\n        return grid, score\n\n    lines = stdin.split('\\n')\n    grid = [[int(x) for x in line.split()] for line in lines[:-1]]\n    move = int(lines[-1])\n\n    new_grid, score = execute_move(grid, move)\n\n    output = '\\n'.join([' '.join([str(x) for x in row]) for row in new_grid])\n    output += '\\n' + str(score)\n\n    return output",
        "test": "",
        "num_ids": 704
    },
    {
        "number": 4728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_molecule, k = stdin.split()\n    k = int(k)\n    output_molecule = input(\"Enter the desired output molecule: \")\n\n    def parse_molecule(molecule: str) -> dict:\n        atoms = {}\n        i = 0\n        while i < len(molecule):\n            atom = molecule[i]\n            if i + 1 < len(molecule) and molecule[i + 1].isdigit():\n                count = \"\"\n                j = i + 1\n                while j < len(molecule) and molecule[j].isdigit():\n                    count += molecule[j]\n                    j += 1\n                i = j - 1\n                count = int(count)\n            else:\n                count = 1\n            if atom in atoms:\n                atoms[atom] += count\n            else:\n                atoms[atom] = count\n            i += 1\n        return atoms\n\n    input_atoms = parse_molecule(input_molecule)\n    output_atoms = parse_molecule(output_molecule)\n\n    n = 1000\n    for atom in output_atoms:\n        if atom not in input_atoms:\n            n = 0\n            break\n        n = min(n, input_atoms[atom] // output_atoms[atom])\n\n    return str(n // k)",
        "test": "",
        "num_ids": 359
    },
    {
        "number": 4729,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    password, message = stdin.split()\n    p_len = len(password)\n    m_len = len(message)\n    p_idx = 0\n    m_idx = 0\n\n    while p_idx < p_len and m_idx < m_len:\n        if message[m_idx] == password[p_idx]:\n            p_idx += 1\n        else:\n            if message[m_idx] in password[p_idx:]:\n                m_idx += 1\n            else:\n                return \"FAIL\"\n\n    if p_idx == p_len:\n        return \"PASS\"\n    else:\n        return \"FAIL\"",
        "test": "",
        "num_ids": 161
    },
    {
        "number": 4730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    opening_delimiters = {'(': ')', '[': ']', '{': '}'}\n    closing_delimiters = {')': '(', ']': '[', '}': '{'}\n\n    for i, char in enumerate(stdin):\n        if char in opening_delimiters:\n            stack.append(char)\n        elif char in closing_delimiters:\n            if not stack or stack[-1] != closing_delimiters[char]:\n                return f\"{char} {i}\"\n            stack.pop()\n\n    return \"ok so far\" if not stack else \"ok so far\"",
        "test": "",
        "num_ids": 151
    },
    {
        "number": 4731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split('\\n')\n    N = len(words)\n    last_letter = ''\n    player = 1\n    used_words = set()\n\n    for i in range(N):\n        word = words[i]\n        if i == 0:\n            last_letter = word[-1]\n            used_words.add(word)\n        else:\n            if word[0] != last_letter or word in used_words:\n                return f\"Player {player} lost\"\n            last_letter = word[-1]\n            used_words.add(word)\n            player = 2 if player == 1 else 1\n\n    return \"Fair Game\"",
        "test": "",
        "num_ids": 163
    },
    {
        "number": 4732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, operation, b = stdin.split('\\n')\n    a, b = int(a), int(b)\n\n    if operation == '+':\n        result = a + b\n    elif operation == '*':\n        result = a * b\n\n    return str(result)",
        "test": "",
        "num_ids": 69
    },
    {
        "number": 4733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, shuffle_type = map(str, stdin.split())\n    n = int(n)\n\n    if shuffle_type == \"out\":\n        if n % 2 == 0:\n            return str(n // 2)\n        else:\n            return str((n + 1) // 2)\n    else:\n        if n % 2 == 0:\n            return str(n // 2)\n        else:\n            return str((n - 1) // 2)",
        "test": "",
        "num_ids": 121
    },
    {
        "number": 4734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    y, p = stdin.split()\n    if y.endswith('ex'):\n        return y + p\n    elif y.endswith(('a', 'i', 'o', 'u')):\n        return y[:-1] + 'ex' + p\n    elif y.endswith('e'):\n        return y + 'x' + p\n    else:\n        return y + 'ex' + p",
        "test": "",
        "num_ids": 97
    },
    {
        "number": 4735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin.strip())\n    if year % 26 == 2018 % 26:\n        return \"yes\"\n    else:\n        return \"no\"",
        "test": "",
        "num_ids": 47
    },
    {
        "number": 4736,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, K = map(int, stdin.split())\n    nums = list(map(int, input().split()))\n    dp = [1] * 10\n    for i in range(1, 10):\n        dp[i] = dp[i - 1] + nums[i - 1] * dp[i - 1]\n    ans = 0\n    for i in range(K, 10):\n        if nums[i] == 0:\n            continue\n        ans += dp[i - 1] * nums[i]\n    return str(ans)",
        "test": "",
        "num_ids": 149
    },
    {
        "number": 4737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, p = map(int, lines[0].split())\n    times = list(map(int, lines[1].split()))\n\n    times.sort()\n    penalty_time = times[p]\n    num_ac = 1\n\n    for i in range(N):\n        if penalty_time + times[i] <= 300:\n            penalty_time += times[i]\n            num_ac += 1\n        else:\n            break\n\n    return f\"{num_ac} {penalty_time}\"",
        "test": "",
        "num_ids": 137
    },
    {
        "number": 4738,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    for k in range(1, n + 1):\n        if n % k != 0:\n            continue\n        period_length = n // k\n        is_periodic = True\n        for i in range(1, k):\n            if s[i * period_length:(i + 1) * period_length] != s[0:period_length]:\n                is_periodic = False\n                break\n        if is_periodic:\n            return str(k)\n    return \"1\"",
        "test": "",
        "num_ids": 132
    },
    {
        "number": 4739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.readline().split())\n    T = list(map(int, stdin.readline().split()))\n    X = list(map(int, stdin.readline().split()))\n\n    if M < 2 or N < 2 or M > N:\n        return \"0\\n\"\n\n    speeds = set()\n    distances = []\n\n    for i in range(M - 1):\n        d = X[i + 1] - X[i]\n        t = T[i + 1] - T[i]\n        if t == 0:\n            continue\n        speed = d / t\n        speeds.add(speed)\n        distances.append(d)\n\n    if not speeds:\n        return \"0\\n\"\n\n    distances.sort()\n    return f\"{len(speeds)}\\n{' '.join(map(str, distances))}\\n\"",
        "test": "",
        "num_ids": 222
    },
    {
        "number": 4740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    prefix = number // 100000\n    if prefix == 555:\n        return \"1\"\n    else:\n        return \"0\"",
        "test": "",
        "num_ids": 49
    },
    {
        "number": 4741,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('/'))\n    c = (a * 5) // 9\n    d = 5 // 9\n    gcd = math.gcd(c, d)\n    return f\"{c//gcd}/{d//gcd}\"",
        "test": "",
        "num_ids": 70
    },
    {
        "number": 4742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_transposition(melody1, melody2):\n        if len(melody1) != len(melody2):\n            return False\n        n = len(melody1)\n        for i in range(n):\n            if melody1[i] == melody2[i]:\n                return False\n        return True\n\n    def is_retrograde(melody1, melody2):\n        if len(melody1) != len(melody2):\n            return False\n        n = len(melody1)\n        for i in range(n):\n            if melody1[i] != melody2[n - i - 1]:\n                return False\n        return True\n\n    def is_inversion(melody1, melody2):\n        if len(melody1) != len(melody2):\n            return False\n        n = len(melody1)\n        for i in range(1, n):\n            if melody1[i] != melody2[i]:\n                return False\n        return True\n\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    melody1 = lines[1].split()\n    melody2 = lines[2].split()\n\n    if is_transposition(melody1, melody2):\n        return \"Transposition\"\n    elif is_retrograde(melody1, melody2):\n        return \"Retrograde\"\n    elif is_inversion(melody1, melody2):\n        return \"Inversion\"\n    else:\n        return \"Nonsense\"",
        "test": "",
        "num_ids": 378
    },
    {
        "number": 4743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = \"aeiou\"\n    words = stdin.split()\n    for i in range(len(words)):\n        word = words[i]\n        if word == \"each\":\n            words[i] = \"dach\"\n            continue\n        new_word = \"\"\n        for j in range(len(word)):\n            if j == 0:\n                if word[j] in \"bcdfgkntp\":\n                    new_word += word[j]\n                else:\n                    new_word += \"b\"\n            elif word[j] == \"h\" and word[j + 1] == \"i\" and word[j + 2] == \"p\":\n                new_word += \"g\"\n            elif word[j] in \"bcdfgkntp\":\n                new_word += word[j]\n            elif word[j] in vowels:\n                new_word += word[j]\n        if new_word[-1] in \"bcdfgkntp\":\n            if new_word[-1] == \"b\":\n                new_word += \"ah\"\n            elif new_word[-1] == \"c\":\n                new_word += \"oh\"\n            else:\n                new_word += \"uh\"\n        words[i] = new_word\n    return \" \".join(words)",
        "test": "",
        "num_ids": 315
    },
    {
        "number": 4744,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    V = int(stdin.strip())\n    area = V + 2\n    while True:\n        w = int(area ** 0.5)\n        if w * (w + 2) >= area:\n            break\n        area += 1\n    return str(w ** 2)",
        "test": "",
        "num_ids": 71
    },
    {
        "number": 4745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, X = map(int, stdin.split())\n    prices = list(map(int, input().split()))\n    prices.sort()\n    count = 0\n    for i in range(n-1, -1, -1):\n        if prices[i] > X:\n            count += 1\n            if count == 2:\n                return str(i+1)\n    return str(n)",
        "test": "",
        "num_ids": 99
    },
    {
        "number": 4746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    C, n = map(int, stdin.readline().split())\n    measurements = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\n    for i in range(n):\n        if measurements[i][0] > 0 and measurements[i][1] == 0 and measurements[i][2] == 0:\n            return \"impossible\"\n\n        if i == 0:\n            if measurements[i][0] != 0 or measurements[i][1] != 0 or measurements[i][2] != 0:\n                return \"impossible\"\n        else:\n            if measurements[i][0] + measurements[i - 1][2] > C or measurements[i][1] + measurements[i - 1][2] > C:\n                return \"impossible\"\n\n    if measurements[-1][0] != 0 or measurements[-1][1] != 0 or measurements[-1][2] != 0:\n        return \"impossible\"\n\n    return \"possible\"",
        "test": "",
        "num_ids": 244
    },
    {
        "number": 4747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    expected_score = 0\n\n    for i in range(1, n + 1):\n        probability = 1 / n\n        expected_score += i * probability\n\n    for r in range(2, k + 1):\n        max_expected_score = 0\n        for i in range(1, n + 1):\n            probability = 1 / n\n            expected_value = i + (n + 1) / 2 * probability * (r - 1)\n            max_expected_score = max(max_expected_score, expected_value)\n        expected_score += max_expected_score * probability\n\n    return f\"{expected_score:.7f}\"",
        "test": "",
        "num_ids": 177
    },
    {
        "number": 4748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, N, M = map(int, stdin.split())\n    A = 0\n    B = 0\n    for k in range(1, H + 1):\n        if N >= k:\n            N -= k\n            A += k\n        else:\n            A += N\n            B += (k - N) * 2\n            N = 0\n    return f\"{A} {B}\"",
        "test": "",
        "num_ids": 99
    },
    {
        "number": 4749,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    grid = [list(stdin.readline().strip()) for _ in range(n)]\n\n    def check_rows():\n        for row in grid:\n            black_count = row.count('B')\n            white_count = row.count('W')\n            if black_count != white_count:\n                return False\n            for i in range(n - 2):\n                if row[i:i + 3] == ['B'] * 3 or row[i:i + 3] == ['W'] * 3:\n                    return False\n        return True\n\n    def check_columns():\n        for j in range(n):\n            black_count = 0\n            white_count = 0\n            for i in range(n):\n                if grid[i][j] == 'B':\n                    black_count += 1\n                else:\n                    white_count += 1\n            if black_count != white_count:\n                return False\n            column = [grid[i][j] for i in range(n)]\n            for i in range(n - 2):\n                if column[i:i + 3] == ['B'] * 3 or column[i:i + 3] == ['W'] * 3:\n                    return False\n        return True\n\n    if check_rows() and check_columns():\n        return '1'\n    else:\n        return '0'",
        "test": "",
        "num_ids": 344
    },
    {
        "number": 4750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_answer(l1, r1, l2, r2):\n        if l1 <= l2 <= r1:\n            return l1, l2 + 1\n        elif l1 <= r2 <= r1:\n            return l1, r2 - 1\n        elif l2 <= l1 <= r2:\n            return l1 + 1, l2\n        elif l2 <= r1 <= r2:\n            return r1 - 1, l2\n        else:\n            return None\n\n    queries = []\n    for line in stdin.split('\\n')[1:]:\n        l1, r1, l2, r2 = map(int, line.split())\n        queries.append((l1, r1, l2, r2))\n\n    answers = []\n    for l1, r1, l2, r2 in queries:\n        answer = find_answer(l1, r1, l2, r2)\n        if answer is not None:\n            answers.extend(answer)\n        else:\n            answers.extend([l1, l2])\n\n    return '\\n'.join(map(str, answers))",
        "test": "",
        "num_ids": 271
    },
    {
        "number": 4751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def hasCycle(head):\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n\n    def find_linked_list_length(head):\n        length = 0\n        while head:\n            length += 1\n            head = head.next\n        return length\n\n    def get_node_at_index(head, index):\n        while index > 0:\n            head = head.next\n            index -= 1\n        return head\n\n    def detect_cycle(head, pos):\n        if pos == -1:\n            return False\n\n        cycle_length = find_linked_list_length(head) - pos\n        slow, fast = head, head\n\n        for _ in range(cycle_length):\n            fast = fast.next\n\n        while slow != fast:\n            slow = slow.next\n            fast = fast.next\n\n        return True\n\n    input_list = list(map(int, stdin.strip().split()))\n    head = ListNode(input_list[0])\n    node = head\n\n    for i in range(1, len(input_list)):\n        new_node = ListNode(input_list[i])\n        node.next = new_node\n        node = new_node\n\n    pos = input_list[-1]\n\n    if detect_cycle(head, pos):\n        return \"true\"\n    else:\n        return \"false\"",
        "test": "",
        "num_ids": 366
    },
    {
        "number": 4752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums, target = map(int, stdin.split())\n    nums = list(map(int, input().split()))\n    hashmap = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in hashmap:\n            return f\"{hashmap[complement]} {i}\"\n        hashmap[num] = i\n    return \"-1\"",
        "test": "",
        "num_ids": 95
    },
    {
        "number": 4753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 3:\n        return \"0\"\n    elif N == 4:\n        return \"1\"\n    else:\n        return str((N-4)*(N-5)//2)",
        "test": "",
        "num_ids": 61
    },
    {
        "number": 4754,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    socks = list(map(int, stdin.readline().strip().split()))\n\n    pairs = {}\n    for sock in socks:\n        if sock in pairs:\n            pairs[sock] += 1\n        else:\n            pairs[sock] = 1\n\n    moves = 0\n    for i in range(n):\n        if pairs[i + 1] % 2 != 0:\n            return \"impossible\"\n\n        moves += pairs[i + 1] // 2\n\n    return moves",
        "test": "",
        "num_ids": 141
    },
    {
        "number": 4755,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    C, K = map(int, stdin.split())\n    smallest_bill = 10 ** K\n    C_rounded = smallest_bill * (C // smallest_bill)\n    return str(C_rounded)",
        "test": "",
        "num_ids": 58
    },
    {
        "number": 4756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def distance(x1, y1, x2, y2):\n        return (x1 - x2) ** 2 + (y1 - y2) ** 2\n\n    def total_unusefulness(a):\n        total = 0\n        for x, y in coordinates:\n            total += distance(x, y, x + a, y - a)\n        return total\n\n    N = int(stdin.readline().strip())\n    coordinates = []\n    for _ in range(N):\n        x, y = map(int, stdin.readline().strip().split())\n        coordinates.append((x, y))\n\n    a = 0\n    min_unusefulness = float('inf')\n    for i in range(N):\n        for j in range(i + 1, N):\n            x1, y1 = coordinates[i]\n            x2, y2 = coordinates[j]\n            a_candidate = (x1 - x2) / (y1 - y2)\n            unusefulness = total_unusefulness(a_candidate)\n            if unusefulness < min_unusefulness:\n                min_unusefulness = unusefulness\n                a = a_candidate\n\n    return f\"{a:.6f}\"",
        "test": "",
        "num_ids": 311
    },
    {
        "number": 4757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def sing_songs(evening_villagers, bard_present):\n        if bard_present:\n            return set(evening_villagers)\n        else:\n            return set(range(1, len(evening_villagers) + 1))\n\n    def merge_sets(set1, set2):\n        return set1.intersection(set2)\n\n    def find_villagers_who_know_all_songs(evenings, bard_present):\n        all_songs = set()\n        villagers_who_know_all_songs = set()\n\n        for i, evening in enumerate(evenings):\n            evening_villagers, bard = evening\n            bard_present = bard or bard_present\n            songs = sing_songs(evening_villagers, bard_present)\n            all_songs = all_songs.union(songs)\n\n            if i == 0:\n                villagers_who_know_all_songs = set(evening_villagers)\n            else:\n                villagers_who_know_all_songs = merge_sets(villagers_who_know_all_songs, songs)\n\n        return sorted(list(villagers_who_know_all_songs))\n\n    stdin_list = stdin.strip().split('\\n')\n    N = int(stdin_list[0])\n    E = int(stdin_list[1])\n    evenings = []\n\n    for i in range(2, 2 + E):\n        evening_villagers = list(map(int, stdin_list[i].strip().split(' ')))\n        bard = evening_villagers[0] == 1\n        evenings.append((evening_villagers[1:], bard))\n\n    result = find_villagers_who_know_all_songs(evenings, False)\n    return '\\n'.join(map(str, result))",
        "test": "",
        "num_ids": 478
    },
    {
        "number": 4758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, m = map(int, stdin.split())\n    return str(n * t * m)",
        "test": "",
        "num_ids": 29
    },
    {
        "number": 4759,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, at_bats = map(int, stdin.split())\n    total_bases = 0\n    total_at_bats = 0\n\n    for at_bat in at_bats:\n        if at_bat != -1:\n            total_bases += at_bat\n            total_at_bats += 1\n\n    slugging_percentage = total_bases / total_at_bats\n    return f\"{slugging_percentage:.3f}\"",
        "test": "",
        "num_ids": 120
    },
    {
        "number": 4760,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    primes = [True] * (N + 1)\n    primes[0] = primes[1] = False\n    crossed_out = 0\n    for i in range(2, N + 1):\n        if primes[i]:\n            crossed_out += 1\n            if crossed_out == K:\n                return i\n            for j in range(i * i, N + 1, i):\n                primes[j] = False\n    return -1",
        "test": "",
        "num_ids": 129
    },
    {
        "number": 4761,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, H = map(int, stdin.split())\n    count = 0\n\n    for i in range(L, H + 1):\n        digits = [int(d) for d in str(i)]\n        if len(set(digits)) == 6 and all(i % d == 0 for d in digits):\n            count += 1\n\n    return str(count)",
        "test": "",
        "num_ids": 94
    },
    {
        "number": 4762,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    probability = 1 / N\n    total_probability = 0\n\n    for i in range(1, N):\n        total_probability += probability * (1 - (i - 1) / N)\n\n    return f\"{total_probability:.6f}\"",
        "test": "",
        "num_ids": 78
    },
    {
        "number": 4763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    target = int(stdin)\n    if target > 180:\n        return \"impossible\"\n\n    def find_solution(target, darts_thrown=0, current_score=0, last_dart=None):\n        if darts_thrown == 3 or current_score == target:\n            return [last_dart] * (3 - darts_thrown)\n        if current_score > target or darts_thrown == 3:\n            return None\n\n        for i in range(1, 21):\n            if i != last_dart:\n                single = find_solution(target, darts_thrown + 1, current_score + i, i)\n                if single:\n                    return [\"single \" + str(i)] + single\n                double = find_solution(target, darts_thrown + 1, current_score + 2 * i, i)\n                if double:\n                    return [\"double \" + str(i)] + double\n                triple = find_solution(target, darts_thrown + 1, current_score + 3 * i, i)\n                if triple:\n                    return [\"triple \" + str(i)] + triple\n        return None\n\n    solution = find_solution(target)\n    if solution:\n        return \"\\n\".join(solution)\n    else:\n        return \"impossible\" ",
        "test": "",
        "num_ids": 331
    },
    {
        "number": 4764,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, v = map(int, stdin.split())\n    area = n * n - (n - h) * (n - v)\n    volume = area * 4\n    return str(volume)",
        "test": "",
        "num_ids": 52
    },
    {
        "number": 4765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    ingredients = [list(map(int, stdin.readline().split())) for _ in range(N)]\n\n    sourness = 1\n    bitterness = 0\n    for ingredient in ingredients:\n        sourness *= ingredient[0]\n        bitterness += ingredient[1]\n\n    return str(abs(sourness - bitterness))",
        "test": "",
        "num_ids": 110
    },
    {
        "number": 4766,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    output = []\n\n    for i in range(1, n + 1):\n        command = lines[i]\n        if command.startswith(\"Simon says\"):\n            output.append(command[11:])\n\n    return '\\n'.join(output)",
        "test": "",
        "num_ids": 86
    },
    {
        "number": 4767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    values = list(map(int, stdin.split()))\n    primes = [2, 3, 5, 7, 11, 13, 17, 19]\n    result = 0\n\n    for i in range(len(values)):\n        if values[i] == primes[i] - 1:\n            values[i] = 0\n            result += 1\n        else:\n            values[i] += 1\n            break\n\n    return str(result)",
        "test": "",
        "num_ids": 123
    },
    {
        "number": 4768,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def hamming_distance(s1, s2):\n        return sum(c1 != c2 for c1, c2 in zip(s1, s2))\n\n    def get_min_unlikeliness(n, k, dna_samples):\n        min_unlikeliness = float('inf')\n        min_tree = []\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                unlikeliness = hamming_distance(dna_samples[i], dna_samples[j])\n                if unlikeliness < min_unlikeliness:\n                    min_unlikeliness = unlikeliness\n                    min_tree = [(i, j)]\n                elif unlikeliness == min_unlikeliness:\n                    min_tree.append((i, j))\n\n        return min_unlikeliness, min_tree\n\n    lines = stdin.split('\\n')\n    n, k = map(int, lines[0].split())\n    dna_samples = lines[1:n+1]\n\n    min_unlikeliness, min_tree = get_min_unlikeliness(n, k, dna_samples)\n\n    output = [str(min_unlikeliness)]\n    for edge in min_tree:\n        output.append(' '.join(map(str, edge)))\n\n    return '\\n'.join(output)",
        "test": "",
        "num_ids": 340
    },
    {
        "number": 4769,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_anagram(word1: str, word2: str) -> bool:\n        return sorted(word1) == sorted(word2)\n\n    def find_shortest_root(word: str) -> str:\n        for i in range(1, len(word) // 2 + 1):\n            if is_anagram(word[:i], word[i:2 * i]) and find_shortest_root(word[2 * i:]) == word[:i]:\n                return word[:i]\n        return \"\"\n\n    if len(stdin) % 2 == 0 and is_anagram(stdin[:len(stdin) // 2], stdin[len(stdin) // 2:]):\n        return find_shortest_root(stdin)\n    else:\n        return \"-1\"",
        "test": "",
        "num_ids": 194
    },
    {
        "number": 4770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N == M:\n        return \"Dr. Chaz needs 1 more piece of chicken!\"\n    elif N < M:\n        return f\"Dr. Chaz will have {M - N} piece(s) of chicken left over!\"\n    else:\n        return f\"Dr. Chaz needs {N - M} more piece(s) of chicken!\"",
        "test": "",
        "num_ids": 101
    },
    {
        "number": 4771,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, V = map(int, lines[0].split())\n    boxes = []\n    for i in range(1, n + 1):\n        l, w, h = map(int, lines[i].split())\n        boxes.append((l, w, h, l * w * h))\n    largest_box = max(boxes, key=lambda x: x[3])\n    return largest_box[3] - V ",
        "test": "",
        "num_ids": 115
    },
    {
        "number": 4772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.readline().split())\n    crossword = [list(stdin.readline().strip()) for _ in range(R)]\n    words = set()\n\n    def find_words(row, col, word):\n        if row < 0 or row >= R or col < 0 or col >= C or crossword[row][col] == '#':\n            return\n        word += crossword[row][col]\n        if len(word) >= 2:\n            words.add(word)\n        find_words(row + 1, col, word)\n        find_words(row - 1, col, word)\n        find_words(row, col + 1, word)\n        find_words(row, col - 1, word)\n\n    for row in range(R):\n        for col in range(C):\n            find_words(row, col, \"\")\n\n    min_word = min(words)\n    return min_word",
        "test": "",
        "num_ids": 233
    },
    {
        "number": 4773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_macro(s):\n        for i in range(1, len(s) // 2 + 1):\n            if s.startswith(s[i:]):\n                return s[:i], s[i:]\n        return \"\", s\n\n    def encode_with_macro(s):\n        macro, rest = find_macro(s)\n        if not macro:\n            return s\n        return \"M\" + encode_with_macro(rest) + macro\n\n    def count_chars(s):\n        return len(s) + len(set(s))\n\n    encoded = encode_with_macro(stdin)\n    return count_chars(encoded)",
        "test": "",
        "num_ids": 159
    },
    {
        "number": 4774,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    valid_expressions = []\n\n    for op1 in ['+', '-', '*', '/']:\n        for op2 in ['+', '-', '*', '/']:\n            if op1 == '/' and b == 0:\n                continue\n            if op2 == '/' and d == 0:\n                continue\n\n            expression = f\"{a} {op1} {b} = {c} {op2} {d}\"\n            if eval(expression):\n                valid_expressions.append(expression)\n\n    if not valid_expressions:\n        return \"problems ahead\"\n\n    valid_expressions.sort(key=lambda x: (x.count('*'), x.count('+'), x.count('-'), x.count('/')))\n    return \"\\n\".join(valid_expressions)",
        "test": "",
        "num_ids": 214
    },
    {
        "number": 4775,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    N, M = len(A), len(B)\n    output = [['.' for _ in range(N)] for _ in range(M)]\n\n    shared_letter = None\n    for letter in A:\n        if letter in B:\n            shared_letter = letter\n            break\n\n    if shared_letter is None:\n        return \"No shared letter found\"\n\n    for i in range(M):\n        if B[i] == shared_letter:\n            output[i][A.index(shared_letter)] = shared_letter\n\n    for i in range(M):\n        output[i] = ''.join(output[i])\n\n    return '\\n'.join(output)",
        "test": "",
        "num_ids": 174
    },
    {
        "number": 4776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    events = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    days = [0] * 366\n\n    for event in events:\n        for day in range(event[0], event[1] + 1):\n            days[day] += 1\n\n    return str(sum(1 for day in days if day > 0))",
        "test": "",
        "num_ids": 111
    },
    {
        "number": 4777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    a_count = 0\n    b_count = 1\n\n    for _ in range(k):\n        new_a_count = b_count\n        new_b_count = a_count + b_count\n        a_count = new_a_count\n        b_count = new_b_count\n\n    return f\"{a_count} {b_count}\"",
        "test": "",
        "num_ids": 102
    },
    {
        "number": 4778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_winner(a, b):\n        if a > b:\n            return \"A\"\n        else:\n            return \"B\"\n\n    def get_efficiency_gap(votes_a, votes_b, winner):\n        if winner == \"A\":\n            wasted_votes_a = sum(votes_a) - (votes_a[0] + 1)\n            wasted_votes_b = sum(votes_b)\n        else:\n            wasted_votes_a = sum(votes_a)\n            wasted_votes_b = sum(votes_b) - (votes_b[0] + 1)\n\n        efficiency_gap = abs(wasted_votes_a - wasted_votes_b) / (sum(votes_a) + sum(votes_b))\n        return efficiency_gap\n\n    lines = stdin.split(\"\\n\")\n    P, D = map(int, lines[0].split())\n    votes_a = [0] * D\n    votes_b = [0] * D\n\n    for i in range(1, P + 1):\n        district, a, b = map(int, lines[i].split())\n        votes_a[district - 1] += a\n        votes_b[district - 1] += b\n\n    result = []\n    for i in range(D):\n        winner = get_winner(votes_a[i], votes_b[i])\n        wasted_votes_a = votes_a[i] - (votes_a[i] + 1) if winner == \"A\" else 0\n        wasted_votes_b = votes_b[i] - (votes_b[i] + 1) if winner == \"B\" else 0\n        result.append(f\"{winner} {wasted_votes_a} {wasted_votes_b}\\n\")\n\n    efficiency_gap = get_efficiency_gap(votes_a, votes_b, winner)\n    result.append(f\"{efficiency_gap:.6f}\")\n\n    return \"\".join(result)",
        "test": "",
        "num_ids": 530
    },
    {
        "number": 4779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1:]]\n    a.sort()\n\n    max_sum = 0\n    for i in range(n):\n        sum1 = sum(a[:i])\n        sum2 = sum(a[i:])\n        max_sum = max(max_sum, (sum1 * sum2))\n\n    return str(max_sum)",
        "test": "",
        "num_ids": 114
    },
    {
        "number": 4780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N1, N2, T = map(int, stdin.split('\\n')[:-1])\n    ants1 = stdin.split('\\n')[1]\n    ants2 = stdin.split('\\n')[2]\n\n    for t in range(T):\n        new_ants1 = ants1[-1] + ants1[:-1]\n        new_ants2 = ants2[-1] + ants2[:-1]\n\n        if N1 > 1 and new_ants1[0] != new_ants2[0]:\n            new_ants1 = new_ants1[1] + new_ants1[0] + new_ants1[2:]\n        if N2 > 1 and new_ants2[0] != new_ants1[0]:\n            new_ants2 = new_ants2[1] + new_ants2[0] + new_ants2[2:]\n\n        ants1 = new_ants1\n        ants2 = new_ants2\n\n    return ants1 + ants2",
        "test": "",
        "num_ids": 249
    },
    {
        "number": 4781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    initial_player = int(input_data[0])\n    num_questions = int(input_data[1])\n    question_data = input_data[2:]\n\n    current_player = initial_player\n    time_passed = 0\n\n    for i in range(num_questions):\n        time, answer = question_data[i].split(\" \")\n        time_passed += int(time)\n\n        if answer == \"T\":\n            current_player = (current_player - 1) % 8 + 1\n        elif answer == \"N\" or answer == \"P\":\n            pass\n\n        if time_passed >= 210:\n            break\n\n    return str(current_player)",
        "test": "",
        "num_ids": 184
    },
    {
        "number": 4782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    total_cost = (n * (n - 1) // 2) - m\n    return str(total_cost)",
        "test": "",
        "num_ids": 46
    },
    {
        "number": 4783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.readline().split())\n    vault = [list(map(int, stdin.readline().split())) for _ in range(M)]\n\n    def dfs(x, y, height):\n        if x == M - 1 and y == N - 1:\n            return height\n        for dx, dy in [(-1, 0), (0, -1), (1, 0), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < M and 0 <= ny < N:\n                nh = vault[nx][ny]\n                if nh > height:\n                    vault[nx][ny] = height\n                    ret = dfs(nx, ny, nh)\n                    if ret is not None:\n                        return ret\n\n    ret = dfs(0, 0, vault[0][0])\n    return str(ret - 1) if ret is not None else \"-1\"",
        "test": "",
        "num_ids": 245
    },
    {
        "number": 4784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split('\\n')[:2])\n    spent_megabytes = list(map(int, stdin.split('\\n')[2:]))\n    total_spent = sum(spent_megabytes)\n    total_available = X + total_spent\n    return str(total_available)",
        "test": "",
        "num_ids": 84
    },
    {
        "number": 4785,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    if 'ss' in stdin:\n        return 'hiss'\n    else:\n        return 'no hiss'",
        "test": "",
        "num_ids": 30
    },
    {
        "number": 4786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    keywords = [stdin.readline().strip().lower().replace('-', ' ') for _ in range(n)]\n    unique_keywords = set(keywords)\n    for keyword in keywords:\n        for other_keyword in keywords:\n            if keyword == other_keyword:\n                continue\n            if keyword.replace(' ', '') == other_keyword.replace(' ', ''):\n                unique_keywords.discard(keyword)\n                unique_keywords.discard(other_keyword)\n    return str(len(unique_keywords))",
        "test": "",
        "num_ids": 140
    },
    {
        "number": 4787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    tablet = stdin.count('T')\n    compass = stdin.count('C')\n    gear = stdin.count('G')\n\n    tablet_points = tablet ** 2\n    compass_points = compass ** 2\n    gear_points = gear ** 2\n\n    set_points = 0\n    if tablet >= 3:\n        set_points += 7\n        tablet -= 3\n    if compass >= 3:\n        set_points += 7\n        compass -= 3\n    if gear >= 3:\n        set_points += 7\n        gear -= 3\n\n    remaining_points = tablet_points + compass_points + gear_points\n    total_points = remaining_points + set_points\n\n    return str(total_points)",
        "test": "",
        "num_ids": 199
    },
    {
        "number": 4788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = map(int, stdin.split())\n    diff = n2 - n1\n    if diff < -180:\n        diff += 360\n    elif diff > 180:\n        diff -= 360\n    return str(diff)",
        "test": "",
        "num_ids": 70
    },
    {
        "number": 4789,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    K = input_list[0]\n    desk_numbers = input_list[1:]\n    desk_numbers.sort()\n    count = 0\n    for i in range(K):\n        count += desk_numbers[i] - i - 1\n    return str(count)",
        "test": "",
        "num_ids": 88
    },
    {
        "number": 4790,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    black_count = stdin.count('B')\n    white_count = n - black_count\n\n    if abs(black_count - white_count) > 1:\n        return '0'\n\n    if black_count == 1 or white_count == 1:\n        return '1'\n\n    if black_count == 0 or white_count == 0:\n        return '1'\n\n    if stdin.count('WB') == 1 or stdin.count('BW') == 1:\n        return '1'\n\n    return '0'",
        "test": "",
        "num_ids": 147
    },
    {
        "number": 4791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3, s4 = map(int, stdin.split())\n    p1 = (s1 + s2 + s3) / 2\n    p2 = (s1 + s2 + s4) / 2\n    p3 = (s1 + s3 + s4) / 2\n    p4 = (s2 + s3 + s4) / 2\n    area = 0.25 * (p1 * p2 * p3 * p4) ** 0.5\n    return f\"{area:.10f}\"",
        "test": "",
        "num_ids": 137
    },
    {
        "number": 4792,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    name = list(stdin)\n    i = 0\n    while i < len(name) - 1:\n        if name[i] == name[i + 1]:\n            j = i + 1\n            while j < len(name) and name[j] == name[i]:\n                j += 1\n            del name[i + 1:j]\n        else:\n            i += 1\n    return ''.join(name)",
        "test": "",
        "num_ids": 108
    },
    {
        "number": 4793,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, v1, v2 = map(int, stdin.split())\n\n    if s % (v1 - v2) != 0:\n        return \"Impossible\"\n\n    bottles_v1 = s // (v1 - v2)\n    bottles_v2 = s // v2\n\n    return f\"{bottles_v1} {bottles_v2}\"",
        "test": "",
        "num_ids": 96
    },
    {
        "number": 4794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.readline().split())\n    parking_map = [list(stdin.readline().strip()) for _ in range(R)]\n\n    def is_valid_parking(x, y):\n        for i in range(x, x + 2):\n            for j in range(y, y + 2):\n                if parking_map[i][j] == '#':\n                    return False\n        return True\n\n    def count_squashed_cars(x, y):\n        count = 0\n        for i in range(x, x + 2):\n            for j in range(y, y + 2):\n                if parking_map[i][j] == 'X':\n                    count += 1\n        return count\n\n    parking_spaces = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0}\n\n    for i in range(R):\n        for j in range(C):\n            if is_valid_parking(i, j):\n                parking_spaces[count_squashed_cars(i, j)] += 1\n\n    return '\\n'.join(map(str, [parking_spaces[i] for i in range(5)]))",
        "test": "",
        "num_ids": 310
    },
    {
        "number": 4795,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    P = [int(line) for line in lines[1:]]\n    X = 0\n    for i in range(N):\n        number = int(str(P[i])[:-1])\n        power = int(str(P[i])[-1])\n        X += number ** power\n    return str(X)",
        "test": "",
        "num_ids": 99
    },
    {
        "number": 4796,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, I, J, K = map(int, stdin.split())\n    cocktail = min(A / I, B / J, C / K)\n    leftover_A = A - cocktail * I\n    leftover_B = B - cocktail * J\n    leftover_C = C - cocktail * K\n    return f\"{leftover_A:.6f} {leftover_B:.6f} {leftover_C:.6f}\"",
        "test": "",
        "num_ids": 130
    },
    {
        "number": 4797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for char in stdin:\n        if char == '<':\n            if stack:\n                stack.pop()\n        else:\n            stack.append(char)\n    return ''.join(stack)",
        "test": "",
        "num_ids": 53
    },
    {
        "number": 4798,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    names = stdin.split('-')\n    short_names = [name[0] for name in names]\n    return ''.join(short_names)",
        "test": "",
        "num_ids": 39
    },
    {
        "number": 4799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    g, s, c = map(int, stdin.split())\n    total_buying_power = g * 3 + s * 2 + c\n    best_treasure = \"Copper\"\n    best_victory = \"\"\n\n    if total_buying_power >= 8:\n        best_victory = \"Province\"\n    elif total_buying_power >= 5:\n        best_victory = \"Duchy\"\n    elif total_buying_power >= 2:\n        best_victory = \"Estate\"\n\n    if g >= 1:\n        best_treasure = \"Gold\"\n    elif s >= 1:\n        best_treasure = \"Silver\"\n\n    if best_victory == \"\" or best_treasure == \"Copper\":\n        return best_treasure\n    else:\n        return best_victory + \" or \" + best_treasure ",
        "test": "",
        "num_ids": 225
    },
    {
        "number": 4800,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    d, s = map(int, stdin.split()[1].split())\n\n    if k == 0:\n        return \"impossible\"\n\n    total_difficulty = k * s\n    remaining_problems = n - k\n    average_difficulty = (total_difficulty + (remaining_problems * d)) / n\n\n    return f\"{average_difficulty:.6f}\"",
        "test": "",
        "num_ids": 123
    },
    {
        "number": 4801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n\n    gis = [A[0]]\n    for i in range(1, N):\n        if A[i] > gis[-1]:\n            gis.append(A[i])\n\n    output = [len(gis)] + gis\n    return '\\n'.join(map(str, output))",
        "test": "",
        "num_ids": 111
    },
    {
        "number": 4802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    hours, minutes = map(int, stdin.split())\n    minutes -= 45\n    if minutes < 0:\n        minutes += 60\n        hours -= 1\n    if hours < 0:\n        hours += 24\n    return f\"{hours} {minutes}\"",
        "test": "",
        "num_ids": 72
    },
    {
        "number": 4803,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = float(stdin)\n    if 0.36788 <= N <= 2.718281:\n        if N == 1:\n            return \"1.000000\"\n        elif N < 1:\n            return \"0.000000\"\n        else:\n            return \"{:.6f}\".format(N ** (1 / N))\n    else:\n        return \"Invalid input\"",
        "test": "",
        "num_ids": 110
    },
    {
        "number": 4804,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin)\n    result = []\n\n    for i in range(1, S // 2 + 1):\n        j = S - i\n        if j % 2 == 0 and i <= j // 2:\n            result.append(f\"{i},{j//2}\")\n\n    return f\"{S}:\\n\" + \"\\n\".join(result) + \"\\n\"",
        "test": "",
        "num_ids": 97
    },
    {
        "number": 4805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    if len(words) != len(set(words)):\n        return \"no\"\n    return \"yes\"",
        "test": "",
        "num_ids": 36
    },
    {
        "number": 4806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    mech_moves = []\n    combo = []\n    for move in stdin:\n        if move == 'R':\n            combo.append('R')\n        elif move == 'B':\n            combo.append('B')\n        elif move == 'L':\n            combo.append('L')\n        \n        if len(combo) == 3:\n            mech_moves.append('C')\n            combo = []\n        elif len(combo) == 1:\n            if combo[0] == 'R':\n                mech_moves.append('S')\n            elif combo[0] == 'B':\n                mech_moves.append('K')\n            elif combo[0] == 'L':\n                mech_moves.append('H')\n            combo = []\n    \n    if combo:\n        for move in combo:\n            if move == 'R':\n                mech_moves.append('S')\n            elif move == 'B':\n                mech_moves.append('K')\n            elif move == 'L':\n                mech_moves.append('H')\n    \n    return ''.join(mech_moves)",
        "test": "",
        "num_ids": 288
    },
    {
        "number": 4807,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    result = []\n    for i in range(1, n + 1):\n        if i % x == 0 and i % y == 0:\n            result.append(\"FizzBuzz\")\n        elif i % x == 0:\n            result.append(\"Fizz\")\n        elif i % y == 0:\n            result.append(\"Buzz\")\n        else:\n            result.append(str(i))\n    return \"\\n\".join(result)",
        "test": "",
        "num_ids": 127
    },
    {
        "number": 4808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d_m = map(int, stdin.split()[0:2])\n    d = list(map(int, stdin.split()[2:]))\n    d.reverse()\n\n    k = 0\n    for i in range(1, n):\n        if d[i] > d[i - 1]:\n            k = i\n            break\n\n    if k == 0:\n        return \"It had never snowed this early!\"\n    else:\n        return f\"It hadn't snowed this early in {k} years!\"",
        "test": "",
        "num_ids": 133
    },
    {
        "number": 4809,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, n = map(int, stdin.split())\n    players = [True] * n\n    p = 1\n    while sum(players) > 1:\n        for _ in range(s):\n            if players[p - 1]:\n                if p == n:\n                    p = 1\n                else:\n                    p += 1\n            else:\n                if p == n:\n                    p = 1\n                else:\n                    p += 1\n        if players[p - 1]:\n            players[p - 1] = False\n        else:\n            if p == n:\n                p = 1\n            else:\n                p += 1\n    return str(p)",
        "test": "",
        "num_ids": 171
    },
    {
        "number": 4810,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    message = stdin\n    n = len(message)\n    r = 1\n    c = 1\n\n    while r * c < n:\n        if r <= c:\n            r += 1\n        else:\n            c += 1\n\n    matrix = [[''] * c for _ in range(r)]\n\n    for i in range(r):\n        for j in range(c):\n            if (i * c + j) < n:\n                matrix[i][j] = message[i * c + j]\n\n    decrypted_message = ''\n    for j in range(c):\n        for i in range(r):\n            if matrix[i][j]:\n                decrypted_message += matrix[i][j]\n\n    return decrypted_message",
        "test": "",
        "num_ids": 183
    },
    {
        "number": 4811,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    bar_size = 1\n    breaks = 0\n\n    while bar_size < k:\n        bar_size *= 2\n        breaks += 1\n\n    return f\"{bar_size} {breaks}\"",
        "test": "",
        "num_ids": 64
    },
    {
        "number": 4812,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def check_rhyme(common_word, word_endings, phrase):\n        for ending in word_endings:\n            if common_word.endswith(ending) and phrase.split()[-1].endswith(ending):\n                return True\n        return False\n\n    lines = stdin.split('\\n')\n    common_word = lines[0]\n    num_lists = int(lines[1])\n    word_endings = [line.split() for line in lines[2:2 + num_lists]]\n    num_phrases = int(lines[2 + num_lists])\n    phrases = lines[3 + num_lists:]\n\n    output = []\n    for phrase in phrases:\n        for ending_list in word_endings:\n            if check_rhyme(common_word, ending_list, phrase):\n                output.append('YES')\n                break\n        else:\n            output.append('NO')\n\n    return '\\n'.join(output)",
        "test": "",
        "num_ids": 230
    },
    {
        "number": 4813,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    word, alphabet = stdin.split('\\n')\n    dashes = ['-'] * len(word)\n    components = 0\n    for letter in alphabet:\n        if letter in word and letter not in dashes:\n            for i in range(len(word)):\n                if word[i] == letter:\n                    dashes[i] = letter\n        elif components < 10:\n            components += 1\n        else:\n            break\n        if dashes == list(word):\n            return \"WIN\"\n    return \"LOSE\"",
        "test": "",
        "num_ids": 129
    },
    {
        "number": 4814,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into a list of names\n    names = stdin.split('\\n')[1:]\n\n    # Check if the list is in increasing alphabetical order\n    if names == sorted(names):\n        return \"INCREASING\"\n\n    # Check if the list is in decreasing alphabetical order\n    elif names == sorted(names, reverse=True):\n        return \"DECREASING\"\n\n    # If the list is not in either order, return \"NEITHER\"\n    else:\n        return \"NEITHER\"",
        "test": "",
        "num_ids": 125
    },
    {
        "number": 4815,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    input_lines = stdin.split(\"\\n\")\n    n, p, m = map(int, input_lines[0].split())\n    players = input_lines[1:n+1]\n    scores = {player: 0 for player in players}\n    for i in range(n+1, n+m+1):\n        name, score = input_lines[i].split()\n        scores[name] += int(score)\n    \n    # Find winners\n    winners = [player for player, score in scores.items() if score >= p]\n    winners.sort(key=lambda x: scores[x], reverse=True)\n    \n    # Output\n    if not winners:\n        return \"No winner!\"\n    else:\n        return \"\\n\".join([f\"{winner} wins!\" for winner in winners])",
        "test": "",
        "num_ids": 204
    },
    {
        "number": 4816,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, x1, y1, x2, y2 = map(int, stdin.split())\n\n    # Calculate the minimum distance from the fence post to the house\n    min_distance = min(\n        abs(x - x1) + abs(y - y1),\n        abs(x - x2) + abs(y - y2),\n        abs(x - x1) + abs(y - y2),\n        abs(x - x2) + abs(y - y1)\n    )\n\n    return f\"{min_distance:.1f}\"",
        "test": "",
        "num_ids": 139
    },
    {
        "number": 4817,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    x_str = str(x)\n    digits = sorted(x_str)\n    max_digit = '9' * len(digits)\n\n    if digits == list(max_digit):\n        return '0'\n\n    for i in range(len(digits) - 1, -1, -1):\n        if digits[i] < digits[i - 1]:\n            break\n\n    j = i + 1\n    while j < len(digits) and digits[j] > digits[i - 1]:\n        j += 1\n\n    digits[i], digits[j - 1] = digits[j - 1], digits[i]\n    digits[i + 1:] = sorted(digits[i + 1:])\n\n    result = int(''.join(digits))\n    return str(result)",
        "test": "",
        "num_ids": 209
    },
    {
        "number": 4818,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    tasks = list(map(int, stdin.readline().split()))\n    intervals = list(map(int, stdin.readline().split()))\n\n    tasks.sort()\n    intervals.sort()\n\n    task_pointer = 0\n    interval_pointer = 0\n    completed_tasks = 0\n\n    while task_pointer < n and interval_pointer < m:\n        if tasks[task_pointer] <= intervals[interval_pointer]:\n            completed_tasks += 1\n            task_pointer += 1\n        interval_pointer += 1\n\n    return str(completed_tasks)",
        "test": "",
        "num_ids": 160
    },
    {
        "number": 4819,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(x) % 42 for x in stdin.split('\\n')[:-1]]\n    distinct_numbers = set(numbers)\n    return str(len(distinct_numbers))",
        "test": "",
        "num_ids": 50
    },
    {
        "number": 4820,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, b = map(int, stdin.split())\n    if N == 1:\n        return \"yes\"\n    if b == 0:\n        return \"yes\"\n    return \"yes\" if math.ceil(math.log2((N * 1000) / b)) <= 1000 else \"no\" ",
        "test": "",
        "num_ids": 82
    },
    {
        "number": 4821,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    suits = {'P': 13, 'K': 13, 'H': 13, 'T': 13}\n    for card in stdin.split():\n        suit, number = card[0], int(card[1:])\n        if suits[suit] == 0:\n            return \"GRESKA\"\n        suits[suit] -= 1\n        if suits[suit] == 0:\n            del suits[suit]\n    return \" \".join(str(13 - len(suits.get(suit, []))) for suit in \"PKHT\")",
        "test": "",
        "num_ids": 142
    },
    {
        "number": 4822,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, S, K = map(int, stdin.readline().split())\n    picture = [list(stdin.readline().strip()) for _ in range(R)]\n    max_flies = 0\n    max_position = None\n\n    for i in range(R):\n        for j in range(S):\n            if picture[i][j] == '*':\n                top = max(i - K, 0)\n                bottom = min(i + K, R - 1)\n                left = max(j - K, 0)\n                right = min(j + K, S - 1)\n\n                flies_inside_racket = 0\n                for x in range(top, bottom + 1):\n                    for y in range(left, right + 1):\n                        if picture[x][y] == '*':\n                            flies_inside_racket += 1\n\n                if flies_inside_racket > max_flies:\n                    max_flies = flies_inside_racket\n                    max_position = (i, j)\n\n    output = [['.' for _ in range(S)] for _ in range(R)]\n    output[max_position[0]][max_position[1]] = '*'\n\n    for i in range(max(max_position[0] - K, 0), min(max_position[0] + K, R - 1) + 1):\n        for j in range(max(max_position[1] - K, 0), min(max_position[1] + K, S - 1) + 1):\n            if i == max_position[0] and j == max_position[1]:\n                output[i][j] = '*'\n            elif i == max_position[0] or j == max_position[1]:\n                output[i][j] = '|'\n            else:\n                output[i][j] = '-'\n\n    return f\"{max_flies}\\n{''.join(output[i])}\\n\"",
        "test": "",
        "num_ids": 489
    },
    {
        "number": 4823,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    cards = stdin.split()\n    ranks = [card[0] for card in cards]\n    suits = [card[1] for card in cards]\n\n    max_strength = 1\n    for i in range(len(ranks)):\n        strength = 1\n        for j in range(i + 1, len(ranks)):\n            if ranks[i] == ranks[j]:\n                strength += 1\n            else:\n                break\n        max_strength = max(max_strength, strength)\n\n    return str(max_strength)",
        "test": "",
        "num_ids": 136
    },
    {
        "number": 4824,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    C, P = map(int, stdin.split('\\n')[0].split())\n    heights = list(map(int, stdin.split('\\n')[1].split()))\n    pieces = [\n        [[1, 1, 1, 1]],\n        [[1, 1, 1], [0, 1, 0]],\n        [[1, 0, 0], [1, 1, 1]],\n        [[0, 1, 1], [1, 1, 0]],\n        [[1, 1], [1, 1]],\n        [[1, 1, 1], [1, 0, 0]],\n        [[1, 1, 1], [0, 0, 1]]\n    ]\n\n    def is_valid(board: list, piece: list, x: int, y: int) -> bool:\n        for i in range(len(piece)):\n            for j in range(len(piece[0])):\n                if i + y >= len(board) or j + x >= len(board[0]) or \\\n                        board[i + y][j + x] + piece[i][j] > 1:\n                    return False\n        return True\n\n    def place_piece(board: list, piece: list, x: int, y: int) -> None:\n        for i in range(len(piece)):\n            for j in range(len(piece[0])):\n                board[i + y][j + x] += piece[i][j]\n\n    def remove_full_rows(board: list) -> int:\n        count = 0\n        for row in board:\n            if all(cell > 0 for cell in row):\n                count += 1\n        for _ in range(count):\n            board.pop(0)\n            board.append([0] * C)\n        return count\n\n    def count_ways(board: list, piece: list) -> int:\n        ways = 0\n        for x in range(C - len(piece[0]) + 1):\n            for y in range(len(board) - len(piece) + 1):\n                if is_valid(board, piece, x, y):\n                    place_piece(board, piece, x, y)\n                    ways += 1\n                    while remove_full_rows(board) > 0:\n                        ways += 1\n                    board = [[0] * C for _ in range(max(heights) + len(piece))]\n        return ways\n\n    return str(count_ways([[0] * C for _ in range(max(heights) + 1)], pieces[P - 1]))",
        "test": "",
        "num_ids": 641
    },
    {
        "number": 4825,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = {\n        'a': '@', 'n': '[]\\\\[]', 'b': '8', 'o': '0', 'c': '(', 'p': '|D', 'd': '|)', 'q': '(,)', 'e': '3', 'r': '|Z', 'f': '#', 's': '$', 'g': '6', 't': '][', 'h': '(-]', 'u': '|_|', 'i': '|', 'j': ']['\n    }\n\n    result = ''\n    for char in stdin:\n        if char.lower() in alphabet:\n            result += alphabet[char.lower()]\n        else:\n            result += char\n\n    return result",
        "test": "",
        "num_ids": 173
    },
    {
        "number": 4826,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N % 2 == 0:\n        return \"Bob\"\n    else:\n        return \"Alice\"",
        "test": "",
        "num_ids": 40
    },
    {
        "number": 4827,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def name_number(n: int) -> str:\n        ones = [\"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]\n        tens = [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]\n        hundreds = [\"\", \"onehundred\", \"twohundred\", \"threehundred\", \"fourhundred\", \"fivehundred\", \"sixhundred\", \"sevenhundred\", \"eighthundred\", \"ninehundred\"]\n\n        if n < 20:\n            return ones[n]\n        elif n < 100:\n            return tens[n // 10] + ones[n % 10]\n        elif n < 1000:\n            return ones[n // 100] + \"hundred\" + (name_number(n % 100) if n % 100 else \"\")\n\n    words = stdin.split(\"\\n\")\n    sentence = \" \".join(words[:-1])\n    number = int(words[-1])\n    number_name = name_number(number)\n    return sentence.replace(\"$\", number_name)",
        "test": "",
        "num_ids": 347
    },
    {
        "number": 4828,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    instructions = stdin.upper()\n    nops_needed = 0\n    current_address = 0\n\n    for i, instruction in enumerate(instructions):\n        if i % 4 == 0 and instruction.islower():\n            nops_needed += 1\n        elif i % 4 != 0 and instruction.isupper():\n            nops_needed += 4 - (i % 4)\n            current_address += 4 - (i % 4)\n        else:\n            current_address += 1\n\n    return str(nops_needed)",
        "test": "",
        "num_ids": 140
    },
    {
        "number": 4829,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    left, right = map(int, stdin.split())\n    \n    if left == 0 and right == 0:\n        return \"Not a moose\"\n    \n    points = max(left, right) * 2\n    \n    if left == right:\n        return f\"Even {points}\"\n    else:\n        return f\"Odd {points}\"",
        "test": "",
        "num_ids": 88
    },
    {
        "number": 4830,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_key_mapping(word):\n        key_mapping = {}\n        for i, char in enumerate(word):\n            if char not in key_mapping:\n                key_mapping[char] = i + 1\n        return key_mapping\n\n    def can_construct(word, key_mapping, key_presses):\n        for char in word:\n            if char not in key_mapping:\n                return False\n            key_press = key_mapping[char]\n            for i, press in enumerate(str(key_press)):\n                if i >= len(key_presses) or press != key_presses[i]:\n                    return False\n        return True\n\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    words = lines[1:N + 1]\n    key_presses = lines[N + 1]\n\n    key_mappings = [get_key_mapping(word) for word in words]\n    count = sum(1 for key_mapping in key_mappings if can_construct(word, key_mapping, key_presses))\n\n    return str(count)",
        "test": "",
        "num_ids": 268
    },
    {
        "number": 4831,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    peter_pan_frame = [\n        \"..#..\",\n        \".#.#.\",\n        \"#.X.#\",\n        \".#.#.\",\n        \"..#..\"\n    ]\n\n    wendy_frame = [\n        \"..*..\",\n        \".*.*.\",\n        \"*.X.*\",\n        \".*.*.\",\n        \"..*..\"\n    ]\n\n    output = \"\"\n    for i, char in enumerate(stdin):\n        if (i + 1) % 3 == 0:\n            output += \"\\n\".join(wendy_frame).replace(\"X\", char) + \"\\n\"\n        else:\n            output += \"\\n\".join(peter_pan_frame).replace(\"X\", char) + \"\\n\"\n\n    return output",
        "test": "",
        "num_ids": 189
    },
    {
        "number": 4832,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin.strip())\n    \n    # Calculate area of circle in normal geometry\n    area_normal = 3.14159 * R * R\n    \n    # Calculate area of circle in taxicab geometry\n    area_taxicab = 2 * R * (R + 1)\n    \n    return f\"{area_normal:.6f}\\n{area_taxicab:.6f}\"",
        "test": "",
        "num_ids": 105
    },
    {
        "number": 4833,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    expenses = [int(x) for x in stdin.split('\\n')[1].split()]\n    total_expenses = sum(filter(lambda x: x < 0, expenses))\n    return str(total_expenses)",
        "test": "",
        "num_ids": 73
    },
    {
        "number": 4834,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    times = list(map(int, stdin.split('\\n')[1].split()))\n    times.sort()\n\n    if n == 1:\n        return str(times[0])\n\n    max_time = 0\n    for i in range(n):\n        max_time += times[i]\n\n    return str(max_time)",
        "test": "",
        "num_ids": 99
    },
    {
        "number": 4835,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(x, y):\n        return 0 <= x < N and 0 <= y < M and not grid[x][y]\n\n    def bfs(start_x, start_y):\n        queue = [(start_x, start_y)]\n        visited = set()\n        while queue:\n            x, y = queue.pop(0)\n            if (x, y) in visited:\n                continue\n            visited.add((x, y))\n            if x == 0 or x == N - 1 or y == 0 or y == M - 1:\n                return True\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nx, ny = x + dx, y + dy\n                if is_valid(nx, ny) and (nx, ny) not in visited:\n                    queue.append((nx, ny))\n        return False\n\n    t, N, M = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(N)]\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'S':\n                start_x, start_y = i, j\n                break\n\n    if bfs(start_x, start_y):\n        return \"NOT POSSIBLE\"\n    else:\n        return \"2\"",
        "test": "",
        "num_ids": 350
    },
    {
        "number": 4836,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, C = map(int, stdin.readline().split())\n    fruits = list(map(int, stdin.readline().split()))\n    fruits.sort()\n\n    total_fruits = 0\n    current_weight = 0\n\n    for i in range(N):\n        if current_weight + fruits[i] <= C:\n            current_weight += fruits[i]\n            total_fruits += 1\n        else:\n            continue\n\n    return str(total_fruits)",
        "test": "",
        "num_ids": 126
    },
    {
        "number": 4837,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, Sven_symbols, N = stdin.split('\\n')\n    R = int(R)\n    N = int(N)\n    Sven_symbols = list(Sven_symbols)\n    friends_symbols = [list(input()) for _ in range(N)]\n\n    def score(s1, s2):\n        if s1 == s2:\n            return 1\n        elif (s1 == 'S' and s2 == 'R') or (s1 == 'R' and s2 == 'P') or (s1 == 'P' and s2 == 'S'):\n            return 2\n        else:\n            return 0\n\n    actual_score = sum(score(Sven_symbols[i], friends_symbols[j][i]) for j in range(N) for i in range(R))\n\n    max_score = sum(score(Sven_symbols[i], Sven_symbols[i]) for i in range(R)) * N\n\n    return f\"{actual_score}\\n{max_score}\"",
        "test": "",
        "num_ids": 253
    },
    {
        "number": 4838,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    times = list(map(int, stdin.split('\\n')[1:]))\n    timer = 0\n    is_running = False\n\n    for t in times:\n        if not is_running:\n            timer = t\n            is_running = True\n        else:\n            timer = t - timer\n            is_running = False\n\n    if is_running:\n        return \"still running\"\n    else:\n        return timer ",
        "test": "",
        "num_ids": 120
    },
    {
        "number": 4839,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *canisters = list(map(int, stdin.split()))\n    canisters.sort()\n    balloons = list(range(1, n + 1))\n\n    if canisters[-1] == 0:\n        return \"impossible\"\n\n    max_fraction = 0\n    for i in range(n):\n        balloon_capacity = balloons[i]\n        canister_amount = canisters[i]\n\n        if canister_amount == 0:\n            return \"impossible\"\n\n        fraction = min(1, canister_amount / balloon_capacity)\n        max_fraction = max(max_fraction, fraction)\n\n    return f\"{max_fraction:.6f}\"",
        "test": "",
        "num_ids": 186
    },
    {
        "number": 4840,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    gunnar_dice, emma_dice = stdin.split('\\n')\n    gunnar_dice = list(map(int, gunnar_dice.split()))\n    emma_dice = list(map(int, emma_dice.split()))\n\n    gunnar_max_sum = sum([max(i, j) for i, j in zip(gunnar_dice, emma_dice)])\n    emma_max_sum = sum([max(i, j) for i, j in zip(emma_dice, gunnar_dice)])\n\n    if gunnar_max_sum > emma_max_sum:\n        return \"Gunnar\"\n    elif gunnar_max_sum < emma_max_sum:\n        return \"Emma\"\n    else:\n        return \"Tie\"",
        "test": "",
        "num_ids": 210
    },
    {
        "number": 4841,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = stdin.readline().strip().split()\n\n    count = 0\n    for i in range(n):\n        if words[i] == \"mumble\":\n            continue\n        else:\n            count += 1\n            if count != int(words[i]):\n                return \"something is fishy\"\n\n    return \"makes sense\"",
        "test": "",
        "num_ids": 100
    },
    {
        "number": 4842,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *v = list(map(int, stdin.split()))\n    d = 0\n    while d < n and all(v[i] - v[i - 1] == v[1] - v[0] for i in range(1, n - d + 1)):\n        d += 1\n    v_n_plus_1 = v[0] + (n + 1) * (v[1] - v[0])\n    return f\"{d} {v_n_plus_1}\"",
        "test": "",
        "num_ids": 125
    },
    {
        "number": 4843,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(x1, y1, x2, y2):\n        return x1 != x2 and y1 != y2 and abs(x1 - x2) != abs(y1 - y2)\n\n    def is_solution_valid(positions):\n        for i in range(len(positions)):\n            for j in range(i + 1, len(positions)):\n                if not is_valid(*positions[i], *positions[j]):\n                    return False\n        return True\n\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    positions = []\n    for i in range(1, N + 1):\n        x, y = map(int, lines[i].split())\n        positions.append((x, y))\n\n    if is_solution_valid(positions):\n        return 'CORRECT'\n    else:\n        return 'INCORRECT'",
        "test": "",
        "num_ids": 226
    },
    {
        "number": 4844,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.readline().strip().split())))\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                matrix[i][j] = matrix[i][j] ^ matrix[i][i] ^ matrix[j][j]\n            else:\n                matrix[i][j] = 0\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = 1\n            else:\n                matrix[i][j] = matrix[i][j] ^ matrix[i][i] ^ matrix[j][j]\n\n    return \" \".join(str(x) for x in matrix[0])",
        "test": "",
        "num_ids": 211
    },
    {
        "number": 4845,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n    D, M = map(int, stdin.split())\n    if M < 3:\n        Y = 2008\n        M += 12\n    else:\n        Y = 2009\n    day_of_week = (D + (13 * (M + 1) // 5) + Y + (Y // 4) - (Y // 100) + (Y // 400) + 6) % 7\n    return days[day_of_week]",
        "test": "",
        "num_ids": 162
    },
    {
        "number": 4846,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, D, X = map(int, stdin.split())\n    N = X\n    while sum(int(digit) for digit in str(N)) != X:\n        N += 1\n    M = D\n    while sum(int(digit) for digit in str(M)) != X:\n        M -= 1\n    return f\"{N}\\n{M}\"",
        "test": "",
        "num_ids": 90
    },
    {
        "number": 4847,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    vertices = []\n    for i in range(3):\n        x, y = map(int, stdin.readline().split())\n        vertices.append((x, y))\n    N = int(stdin.readline())\n    apple_trees = []\n    for i in range(N):\n        x, y = map(int, stdin.readline().split())\n        apple_trees.append((x, y))\n\n    # Calculate area of triangle\n    def triangle_area(a, b, c):\n        return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\n    area = triangle_area(vertices[0], vertices[1], vertices[2])\n\n    # Count trees in triangle\n    def is_inside(tree, vertices):\n        a = (vertices[1][0] - vertices[0][0]) * (tree[1] - vertices[0][1]) - (tree[0] - vertices[0][0]) * (vertices[1][1] - vertices[0][1])\n        b = (vertices[2][0] - vertices[1][0]) * (tree[1] - vertices[1][1]) - (tree[0] - vertices[1][0]) * (vertices[2][1] - vertices[1][1])\n        c = (vertices[0][0] - vertices[2][0]) * (tree[1] - vertices[2][1]) - (tree[0] - vertices[2][0]) * (vertices[0][1] - vertices[2][1])\n        return (a > 0 and b > 0 and c > 0) or (a < 0 and b < 0 and c < 0)\n\n    trees_inside = [tree for tree in apple_trees if is_inside(tree, vertices)]\n\n    # Output\n    return f\"{area:.1f}\\n{len(trees_inside)}\"",
        "test": "",
        "num_ids": 494
    },
    {
        "number": 4848,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(2, n):\n        if all(n % (i * i) != 0 for i in range(2, int(n ** 0.5) + 1)):\n            if all(m * n % (i * i) != 0 for i in range(2, int(n ** 0.5) + 1)):\n                return str(m)\n    return \"No solution found\"",
        "test": "",
        "num_ids": 108
    },
    {
        "number": 4849,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    blimps = stdin.split('\\n')\n    cia_blimps = []\n\n    for i, blimp in enumerate(blimps):\n        if 'FBI' in blimp:\n            cia_blimps.append(i + 1)\n\n    if len(cia_blimps) == 0:\n        return \"HE GOT AWAY!\"\n    else:\n        return ' '.join(map(str, cia_blimps))",
        "test": "",
        "num_ids": 115
    },
    {
        "number": 4850,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_length(a, b, c):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        height = 2 * area / (a + b)\n        return a + b + height\n\n    def get_min_rod_length(triangles):\n        max_lengths = [get_max_length(a, b, c) for a, b, c in triangles]\n        return max(max_lengths)\n\n    N = int(stdin.readline().strip())\n    triangles = [list(map(int, stdin.readline().strip().split())) for _ in range(N)]\n\n    return f\"{get_min_rod_length(triangles):.4f}\"",
        "test": "",
        "num_ids": 202
    },
    {
        "number": 4851,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits_sum = lambda x: sum(int(d) for d in str(x))\n\n    while True:\n        n += 1\n        if n % digits_sum(n) == 0:\n            return str(n)",
        "test": "",
        "num_ids": 66
    },
    {
        "number": 4852,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into a list of integers and plus symbols\n    input_list = [int(x) if x.isdigit() else x for x in stdin.split('+')]\n\n    # Initialize a set to store the distinct integers\n    distinct_integers = set()\n\n    # Generate all possible interpretations of the plus symbols\n    for i in range(2 ** (len(input_list) // 2)):\n        # Convert the binary representation of i to a list of 0s and 1s\n        binary_representation = [int(x) for x in format(i, f'0{len(input_list)//2}b')]\n\n        # Interpret the plus symbols based on the current binary representation\n        expression = input_list[0]\n        for j in range(1, len(input_list), 2):\n            if binary_representation[j // 2]:\n                expression = str(expression) + input_list[j]\n            else:\n                expression += input_list[j]\n\n        # Evaluate the expression and add the result to the set of distinct integers\n        distinct_integers.add(eval(expression))\n\n    # Return the number of distinct integers\n    return str(len(distinct_integers))",
        "test": "",
        "num_ids": 296
    },
    {
        "number": 4853,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *coefficients = list(map(int, stdin.split()))\n    constants = [coefficients[n-1]]\n    for i in range(n-1, 0, -1):\n        constants.append(constants[-1] + coefficients[i-1])\n    return ' '.join(map(str, constants[::-1]))",
        "test": "",
        "num_ids": 86
    },
    {
        "number": 4854,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, C = map(int, stdin.split())\n    message = list(map(int, input().split()))\n    frequency = [0] * (C + 1)\n    \n    for num in message:\n        frequency[num] += 1\n    \n    sorted_message = []\n    for i in range(1, C + 1):\n        sorted_message += [i] * frequency[i]\n    \n    return \" \".join(map(str, sorted_message))",
        "test": "",
        "num_ids": 116
    },
    {
        "number": 4855,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, I = map(int, stdin.split())\n    citations = A * I\n    return str(citations)",
        "test": "",
        "num_ids": 32
    },
    {
        "number": 4856,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a_rev = int(str(a)[::-1])\n    b_rev = int(str(b)[::-1])\n    if a_rev > b_rev:\n        return str(a_rev)\n    else:\n        return str(b_rev)",
        "test": "",
        "num_ids": 81
    },
    {
        "number": 4857,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, w = map(int, stdin.split())\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    words = []\n\n    def backtrack(curr_word, curr_weight, curr_length):\n        if curr_length == l and curr_weight == w:\n            words.append(curr_word)\n            return\n        if curr_length == l or curr_weight > w or curr_length > l:\n            return\n        for i in range(len(letters)):\n            new_word = curr_word + letters[i]\n            new_weight = curr_weight + i + 1\n            new_length = curr_length + 1\n            backtrack(new_word, new_weight, new_length)\n\n    backtrack(\"\", 0, 0)\n\n    if words:\n        return words[0]\n    else:\n        return \"impossible\"",
        "test": "",
        "num_ids": 217
    },
    {
        "number": 4858,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    frame1 = [line.strip() for line in lines[1:M + 1]]\n    frame2 = [line.strip() for line in lines[M + 2:M * 2 + 2]]\n\n    # Find the position of the falcon in both frames\n    falcon1_position = None\n    falcon2_position = None\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1_position = (i, j)\n            if frame2[i][j] == C:\n                falcon2_position = (i, j)\n\n    # Calculate the shift in position\n    shift_x = falcon2_position[1] - falcon1_position[1]\n    shift_y = falcon2_position[0] - falcon1_position[0]\n\n    # Shift the falcon in the second frame\n    shifted_frame = []\n    for i in range(M):\n        row = ''\n        for j in range(N):\n            if frame2[i][j] == C:\n                new_x = (j + shift_x) % N\n                if frame2[(i + shift_y) % M][new_x] != C:\n                    row += C\n                else:\n                    row += '.'\n            else:\n                row += '.'\n        shifted_frame.append(row)\n\n    return '\\n'.join(shifted_frame) + '\\n'",
        "test": "",
        "num_ids": 398
    },
    {
        "number": 4859,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, d, c, l = map(int, stdin.split())\n    answers = []\n    for i in range(l // b + 1):\n        for j in range(l // d + 1):\n            for k in range(l // c + 1):\n                if i + j + k == l // 2:\n                    answers.append(f\"{i} {j} {k}\")\n    if not answers:\n        return \"impossible\"\n    else:\n        return \"\\n\".join(sorted(answers))",
        "test": "",
        "num_ids": 129
    },
    {
        "number": 4860,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    numbers = list(map(int, stdin.split('\\n')[1:]))\n    missing_numbers = []\n    for i in range(1, numbers[-1]):\n        if i not in numbers:\n            missing_numbers.append(i)\n    if len(missing_numbers) == 0:\n        return \"good job\"\n    else:\n        return \"\\n\".join(map(str, missing_numbers))",
        "test": "",
        "num_ids": 115
    },
    {
        "number": 4861,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s, v = map(float, stdin.split())\n\n    def time_to_run_algorithm(c):\n        return n * (log2(n)) ** (c * sqrt(2)) / (p * 10**9)\n\n    def tour_length(c):\n        return s * (1 + 1 / c)\n\n    def time_to_distribute_keys(c):\n        return tour_length(c) / v\n\n    def find_optimal_c():\n        c = 1\n        while time_to_run_algorithm(c) + time_to_distribute_keys(c) < time_to_run_algorithm(c + 1) + time_to_distribute_keys(c + 1):\n            c += 1\n        return c\n\n    optimal_c = find_optimal_c()\n    t = time_to_run_algorithm(optimal_c) + time_to_distribute_keys(optimal_c)\n\n    return f\"{t:.6f} {optimal_c:.6f}\"",
        "test": "",
        "num_ids": 263
    },
    {
        "number": 4862,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 2:\n        return \"0\"\n    return str((n * (n - 1)) // 2)",
        "test": "",
        "num_ids": 43
    },
    {
        "number": 4863,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    answers = stdin.split('\\n')[1:]\n    correct_answers = ['A'] * n\n    score = 0\n\n    for i in range(n):\n        if answers[i] == correct_answers[i]:\n            score += 1\n\n    return str(score)",
        "test": "",
        "num_ids": 86
    },
    {
        "number": 4864,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C, Z_R, Z_C = map(int, stdin.split()[0:4])\n    article = [list(input()) for _ in range(R)]\n\n    enlarged_article = []\n    for row in article:\n        enlarged_row = []\n        for char in row:\n            enlarged_char = [char] * Z_C\n            enlarged_row.append(enlarged_char)\n        enlarged_article.append(enlarged_row)\n\n    result = []\n    for i in range(R * Z_R):\n        result_row = []\n        for j in range(C * Z_C):\n            result_row.append(enlarged_article[i // Z_R][j // Z_C][j % Z_C])\n        result.append(result_row)\n\n    return '\\n'.join([''.join(row) for row in result])",
        "test": "",
        "num_ids": 225
    },
    {
        "number": 4865,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def adjust_time(operation, minutes, hours, mins):\n        if operation == \"F\":\n            hours += minutes // 60\n            mins += minutes % 60\n            if mins >= 60:\n                hours += 1\n                mins -= 60\n        else:\n            hours -= minutes // 60\n            mins -= minutes % 60\n            if mins < 0:\n                hours -= 1\n                mins += 60\n        return hours, mins\n\n    def format_output(hours, mins):\n        return f\"{hours} {mins}\"\n\n    lines = stdin.split(\"\\n\")\n    num_tests = int(lines[0])\n    outputs = []\n\n    for i in range(1, num_tests + 1):\n        operation, minutes, hours, mins = lines[i].split()\n        minutes = int(minutes)\n        hours = int(hours)\n        mins = int(mins)\n\n        new_hours, new_mins = adjust_time(operation, minutes, hours, mins)\n        outputs.append(format_output(new_hours, new_mins))\n\n    return \"\\n\".join(outputs)",
        "test": "",
        "num_ids": 297
    },
    {
        "number": 4866,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    month, day = stdin.split()\n    if month == \"OCT\" and day == \"31\" or month == \"DEC\" and day == \"25\":\n        return \"yup\"\n    else:\n        return \"nope\"",
        "test": "",
        "num_ids": 60
    },
    {
        "number": 4867,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.readline().split())\n    U, L, R, D = map(int, stdin.readline().split())\n    crossword = [stdin.readline().strip() for _ in range(M)]\n\n    framed_crossword = ['.' * (L + U + 1) + '#' + '.' * (R + D + 1)]\n    for row in crossword:\n        framed_row = '.' * L + '#' + '.' * R + '#'\n        framed_crossword.append(framed_row)\n        framed_crossword.append('.' * (L + U + 1) + '#' + '.' * (R + D + 1))\n\n    return '\\n'.join(framed_crossword)",
        "test": "",
        "num_ids": 193
    },
    {
        "number": 4868,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    white, black = stdin.split('\\n')\n    white_pieces = white.split(',')\n    black_pieces = black.split(',')\n\n    board = [[' ' for _ in range(8)] for _ in range(8)]\n\n    def place_piece(piece, row, col):\n        if piece.islower():\n            board[row][col] = piece.upper()\n        else:\n            board[row][col] = piece\n\n    for piece in white_pieces:\n        col = ord(piece[0].lower()) - ord('a')\n        row = int(piece[1]) - 1\n        place_piece(piece[2], row, col)\n\n    for piece in black_pieces:\n        col = ord(piece[0].lower()) - ord('a')\n        row = int(piece[1]) - 1\n        place_piece(piece[2], row, col)\n\n    def print_board():\n        print('+---+---+---+---+---+---+---+---+')\n        for row in board:\n            print('|', end='')\n            for col in row:\n                print(col if col != ' ' else '.', end='|')\n            print('\\n+---+---+---+---+---+---+---+---+')\n\n    print_board()\n\n    return '\\n'.join([''.join(row) for row in board])",
        "test": "",
        "num_ids": 332
    },
    {
        "number": 4869,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, N = map(float, stdin.split())\n    if N >= A:\n        return \"Diablo is happy!\"\n    else:\n        return \"Need more materials!\"",
        "test": "",
        "num_ids": 45
    },
    {
        "number": 4870,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    f, s, g, u, d = map(int, stdin.split())\n\n    if s == g:\n        return \"0\"\n\n    if s > g and d == 0:\n        return \"use the stairs\"\n\n    if g - s > u + d * f:\n        return \"use the stairs\"\n\n    if s > g:\n        return \"use the stairs\"\n\n    if s + u >= g:\n        return str(g - s)\n\n    if s + u + d * f >= g:\n        return str(u + d * f - (s - g) % (u + d * f))\n\n    return \"use the stairs\"",
        "test": "",
        "num_ids": 165
    },
    {
        "number": 4871,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    scores = [int(x) for x in stdin.readlines()]\n    scores.sort(reverse=True)\n\n    group_score = 0\n    new_group_scores = []\n\n    for i in range(n):\n        group_score += scores[i] * (4 / 5) ** i\n        new_group_score = (group_score - scores[i] * (4 / 5) ** i) / 4\n        new_group_scores.append(new_group_score)\n\n    group_score = group_score / 5\n    avg_new_group_score = sum(new_group_scores) / n\n\n    return f\"{group_score:.1f}\\n{avg_new_group_score:.6f}\"",
        "test": "",
        "num_ids": 204
    },
    {
        "number": 4872,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    dirty_pushes = list(map(int, stdin.readline().strip().split()))\n\n    dirtiness = 0\n    cleanup_phases = 0\n    last_cleanup = 0\n\n    for day in range(1, 366):\n        if dirty_pushes and dirty_pushes[0] == day:\n            dirtiness += day - last_cleanup\n            dirty_pushes.pop(0)\n\n        if dirtiness >= 20:\n            cleanup_phases += 1\n            dirtiness = 0\n            last_cleanup = day\n\n    return str(cleanup_phases)",
        "test": "",
        "num_ids": 172
    },
    {
        "number": 4873,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, H = map(int, stdin.readline().split())\n    map_data = []\n    for _ in range(H):\n        map_data.append(stdin.readline().strip())\n\n    def is_safe(x, y):\n        if 0 <= x < W and 0 <= y < H and map_data[y][x] != 'T':\n            return True\n        return False\n\n    def dfs(x, y):\n        if not is_safe(x, y):\n            return 0\n        if map_data[y][x] == 'G':\n            return 1\n        if map_data[y][x] == 'P':\n            return 0\n        map_data[y][x] = 'P'\n        return dfs(x + 1, y) + dfs(x - 1, y) + dfs(x, y + 1) + dfs(x, y - 1)\n\n    player_x, player_y = None, None\n    for y in range(H):\n        for x in range(W):\n            if map_data[y][x] == 'P':\n                player_x, player_y = x, y\n                break\n\n    return str(dfs(player_x, player_y))",
        "test": "",
        "num_ids": 307
    },
    {
        "number": 4874,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    dance_recording = [list(stdin.readline().strip()) for _ in range(N)]\n\n    dance_moves = 0\n    for i in range(1, M - 1):\n        if all(dance_recording[j][i] == '_' for j in range(N)):\n            dance_moves += 1\n\n    return str(dance_moves)",
        "test": "",
        "num_ids": 114
    },
    {
        "number": 4875,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = \"aeiouy\"\n    words = stdin.split()\n    pig_latin_words = []\n\n    for word in words:\n        if word[0].lower() in vowels:\n            pig_latin_word = word + \"yay\"\n        else:\n            first_vowel_index = next((i for i, c in enumerate(word) if c.lower() in vowels), None)\n            if first_vowel_index is None:\n                pig_latin_word = word + \"ay\"\n            else:\n                pig_latin_word = word[first_vowel_index:] + word[:first_vowel_index] + \"ay\"\n\n        pig_latin_words.append(pig_latin_word)\n\n    return \" \".join(pig_latin_words)",
        "test": "",
        "num_ids": 209
    },
    {
        "number": 4876,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        k = int(stdin.readline().strip())\n        restaurant_name = stdin.readline().strip()\n        menu_items = [stdin.readline().strip() for _ in range(k)]\n        if \"pea soup\" in menu_items and \"pancakes\" in menu_items:\n            return restaurant_name\n    return \"Anywhere is fine I guess\"",
        "test": "",
        "num_ids": 114
    },
    {
        "number": 4877,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    count = 0\n    while h > 0:\n        h -= a\n        if h <= 0:\n            count += 1\n            break\n        h += b\n        count += 1\n    return str(count)",
        "test": "",
        "num_ids": 72
    },
    {
        "number": 4878,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    R1, S = map(int, stdin.split())\n    R2 = 2 * S - R1\n    return str(R2)",
        "test": "",
        "num_ids": 37
    },
    {
        "number": 4879,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    \n    if a == \"South\" and b == \"West\" and c == \"East\":\n        return \"Yes\"\n    elif a == \"East\" and b == \"North\" and c == \"South\":\n        return \"Yes\"\n    elif a == \"North\" and b == \"East\" and c == \"South\":\n        return \"Yes\"\n    elif a == \"West\" and b == \"South\" and c == \"East\":\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "",
        "num_ids": 140
    },
    {
        "number": 4880,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    keyword = stdin.split()[1]\n    ciphertext = stdin.split()[2]\n\n    key = keyword + ciphertext[:n]\n    plaintext = \"\"\n\n    for i in range(m):\n        shift = ord(key[i]) - ord('a')\n        plaintext += chr(((ord(ciphertext[i]) - shift - ord('a')) % 26) + ord('a'))\n\n    return plaintext",
        "test": "",
        "num_ids": 125
    },
    {
        "number": 4881,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "test": "",
        "num_ids": 39
    },
    {
        "number": 4882,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    estimates = stdin.split('\\n')[1:]\n    result = []\n    for estimate in estimates:\n        result.append(len(estimate))\n    return '\\n'.join(map(str, result))",
        "test": "",
        "num_ids": 66
    },
    {
        "number": 4883,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    translations = {}\n    m, n = map(int, stdin.readline().split())\n    for _ in range(m):\n        a, b = stdin.readline().split()\n        if a not in translations:\n            translations[a] = [b]\n        else:\n            translations[a].append(b)\n\n    def translate(word: str) -> str:\n        result = []\n        for letter in word:\n            if letter in translations:\n                result.append(translations[letter])\n            else:\n                result.append([letter])\n        return [''.join(p) for p in product(*result)]\n\n    def match(word1: str, word2: str) -> bool:\n        if len(word1) != len(word2):\n            return False\n        for i in range(len(word1)):\n            if word1[i] not in translations or word2[i] not in translations[word1[i]]:\n                return False\n        return True\n\n    for _ in range(n):\n        word1, word2 = stdin.readline().strip().split()\n        if any(match(word1, t_word2) for t_word2 in translate(word2)):\n            print(\"yes\")\n        else:\n            print(\"no\")\n",
        "test": "",
        "num_ids": 313
    },
    {
        "number": 4884,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, P = map(int, lines[0].split())\n    carrots = 0\n    for i in range(1, N+1):\n        if 'carrots' in lines[i]:\n            carrots += 1\n    return str(carrots)",
        "test": "",
        "num_ids": 79
    },
    {
        "number": 4885,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def parse_chessboard(stdin: str) -> dict:\n        chessboard = {}\n        rows = stdin.split(\"\\n\")\n        for i, row in enumerate(rows):\n            for j, cell in enumerate(row):\n                if cell.isalpha():\n                    chessboard[(i, j)] = cell\n        return chessboard\n\n    def describe_pieces(pieces: dict) -> str:\n        description = []\n        for piece_type in [\"K\", \"Q\", \"R\", \"B\", \"N\", \"P\"]:\n            for piece in pieces[piece_type]:\n                description.append(f\"{piece_type}{piece}\")\n        return \",\".join(description)\n\n    def sort_pieces(pieces: dict) -> dict:\n        sorted_pieces = {}\n        for piece_type in pieces:\n            sorted_pieces[piece_type] = sorted(pieces[piece_type], key=lambda x: (x[0], x[1]))\n        return sorted_pieces\n\n    def white_black_pieces(chessboard: dict) -> tuple:\n        white_pieces = {\"K\": [], \"Q\": [], \"R\": [], \"B\": [], \"N\": [], \"P\": []}\n        black_pieces = {\"K\": [], \"Q\": [], \"R\": [], \"B\": [], \"N\": [], \"P\": []}\n        for position, piece in chessboard.items():\n            if piece.isupper():\n                white_pieces[piece.upper()].append(chr(position[1] + 97) + str(8 - position[0]))\n            else:\n                black_pieces[piece.upper()].append(chr(position[1] + 97) + str(8 - position[0]))\n        return white_pieces, black_pieces\n\n    chessboard = parse_chessboard(stdin)\n    white_pieces, black_pieces = white_black_pieces(chessboard)\n    sorted_white_pieces = sort_pieces(white_pieces)\n    sorted_black_pieces = sort_pieces(black_pieces)\n    white_description = describe_pieces(sorted_white_pieces)\n    black_description = describe_pieces(sorted_black_pieces)\n\n    return f\"White: {white_description}\\nBlack: {black_description}\"",
        "test": "",
        "num_ids": 574
    },
    {
        "number": 4886,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n\n    # If K is 0, we cannot ask any questions and we will lose\n    if K == 0:\n        return \"You will become a flying monkey!\"\n\n    # If N is 1, we don't need to ask any questions, and we will win\n    if N == 1:\n        return \"Your wish is granted!\"\n\n    # If K is 1, we can only ask one question, which must be \"Is the number even?\"\n    # If the answer is \"true\", the secret number is even and we can guess any even number\n    # If the answer is \"false\", the secret number is odd and we can guess any odd number\n    if K == 1:\n        return \"Your wish is granted!\"\n\n    # If K is 2, we can ask two questions, such as \"Is the number even?\" and \"Is the number greater than N/2?\"\n    # If the answers are \"true\" and \"false\", the secret number is in the range [N/2+1, N] and we can guess any number in that range\n    # Otherwise, we can guess any number not in that range\n    if K == 2:\n        return \"Your wish is granted!\"\n\n    # If K is 3, we can ask three questions, such as \"Is the number even?\", \"Is the number greater than N/2?\", and \"Is the number a multiple of 3?\"\n    # If the answers are \"true\", \"false\", and \"true\", the secret number is in the range [N/2+1, N] and is a multiple of 3, and we can guess any number in that range that is not a multiple of 3\n    # Otherwise, we can guess any number not in that range\n    if K == 3:\n        return \"Your wish is granted!\"\n\n    # If K is N-1, we can ask N-1 questions, such as \"Is the number 1?\", \"Is the number 2?\", ..., \"Is the number N?\"\n    # If the answers are all \"false\", the secret number is N, and we can guess N\n    # Otherwise, we can guess any number other than the one corresponding to the \"true\" answer\n    if K == N - 1:\n        return \"Your wish is granted!\"\n\n    # If K is N, we can ask N questions, such as \"Is the number 1?\", \"Is the number 2?\", ..., \"Is the number N?\"\n    # If the answers are all \"true\", the secret number is 1, and we can guess 1\n    # Otherwise, we can guess any number other than the one corresponding to the \"false\" answer\n    if K == N:\n        return \"Your wish is granted!\"\n\n    # If K is greater than N, we can ask N questions and then guess the secret number with certainty\n    if K > N:\n        return \"Your wish is granted!\"\n\n    # If none of the above conditions are met, we cannot guarantee victory\n    return \"You will become a flying monkey!\"",
        "test": "",
        "num_ids": 703
    },
    {
        "number": 4887,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    area = int(stdin.strip())\n    perimeter = 4 * area\n    return str(perimeter)",
        "test": "",
        "num_ids": 29
    },
    {
        "number": 4888,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    tasks = list(map(int, stdin.split()))\n    time_spent = 0\n    tasks_completed = 0\n\n    for task in tasks:\n        if time_spent + task <= T:\n            time_spent += task\n            tasks_completed += 1\n        else:\n            break\n\n    return str(tasks_completed)",
        "test": "",
        "num_ids": 104
    },
    {
        "number": 4889,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    lengths = [int(stdin.readline().strip()) for _ in range(N)]\n\n    javelin_length = sum(lengths) - (N - 1)\n\n    return str(javelin_length)",
        "test": "",
        "num_ids": 70
    },
    {
        "number": 4890,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split()[0:4])\n    c = list(map(int, stdin.split()[4:]))\n\n    # Initialize the fridge with the new bottles\n    fridge = [n] * s\n\n    # Calculate the total number of bottles in the fridge\n    total_bottles = sum(fridge)\n\n    # Calculate the probability of getting a cold bottle for each slot\n    probabilities = [(1 - (total_bottles - c[i]) / (d - c[i])) for i in range(s)]\n\n    # Calculate the probability of getting a cold bottle for all the next m students\n    probability = 1\n    for i in range(m):\n        probability *= sum(probabilities) / s\n        probabilities = [p * (total_bottles - 1) / (d - c[i]) for i, p in enumerate(probabilities)]\n\n    # Check if it is possible to get a cold bottle for all the next m students\n    if probability == 0:\n        return \"impossible\"\n\n    # Calculate the number of new bottles to add to each slot\n    refill_scheme = [0] * s\n    for i in range(m):\n        max_probability = 0\n        max_slot = -1\n        for j in range(s):\n            if c[j] < d and probabilities[j] > max_probability:\n                max_probability = probabilities[j]\n                max_slot = j\n        if max_slot == -1:\n            break\n        refill_scheme[max_slot] += 1\n        total_bottles += 1\n        probabilities = [(1 - (total_bottles - c[i]) / (d - c[i])) for i in range(s)]\n\n    # Convert the refill scheme to a string\n    return \" \".join(map(str, refill_scheme))",
        "test": "",
        "num_ids": 476
    },
    {
        "number": 4891,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    pieces = list(map(int, stdin.split()))\n    diff = [1 - pieces[0], 1 - pieces[1], 2 - pieces[2], 2 - pieces[3], 2 - pieces[4], 8 - pieces[5]]\n    return ' '.join(map(str, diff))",
        "test": "",
        "num_ids": 75
    },
    {
        "number": 4892,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    passwords = []\n    probabilities = []\n    for i in range(1, N+1):\n        password, probability = lines[i].split(' ')\n        passwords.append(password)\n        probabilities.append(float(probability))\n\n    expected_attempts = sum([i * probabilities[i-1] for i in range(1, N+1)])\n    return f\"{expected_attempts:.4f}\"",
        "test": "",
        "num_ids": 127
    },
    {
        "number": 4893,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    distances = list(map(int, stdin.split()))\n    distances.sort()\n    min_distance = float('inf')\n\n    for i in range(n):\n        distance = distances[i]\n        cars_between = n - i - 1\n        required_distance = p * (cars_between + 1)\n        min_distance = min(min_distance, required_distance - distance)\n\n    return str(min_distance)",
        "test": "",
        "num_ids": 122
    },
    {
        "number": 4894,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    notes = lines[1]\n\n    # Create the staff\n    staff = [\n        \"G:                                                            \",\n        \"F: ----------------------------------------------------------\",\n        \"E:                                                            \",\n        \"D: ----------------------------------------------------------\",\n        \"C:                                                            \",\n        \"B: ----------------------------------------------------------\",\n        \"A:                                                            \",\n        \"g: ----------------------------------------------------------\",\n        \"f:                                                            \",\n        \"e: ----------------------------------------------------------\",\n        \"d:                                                            \",\n        \"c:                                                            \",\n        \"b:                                                            \",\n        \"a: ----------------------------------------------------------\"\n    ]\n\n    # Add the notes to the staff\n    current_note = 0\n    for i in range(len(staff)):\n        if i % 2 == 0:\n            staff[i] += '*' * int(notes[current_note][1:]) if notes[current_note][1:] else '*'\n            current_note += 1\n        else:\n            staff[i] += ' '\n\n    return '\\n'.join(staff)",
        "test": "",
        "num_ids": 306
    },
    {
        "number": 4895,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sticks = list(map(int, stdin.readline().strip().split()))\n\n    sticks.sort()\n\n    if sticks[0] + sticks[1] > sticks[2]:\n        return \"possible\"\n    else:\n        return \"impossible\"",
        "test": "",
        "num_ids": 82
    },
    {
        "number": 4896,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    bricks = [int(x) for x in stdin.split('\\n')[1].split()]\n    towers = 1\n    current_width = bricks[0]\n\n    for i in range(1, N):\n        if bricks[i] > current_width:\n            towers += 1\n            current_width = bricks[i]\n\n    return str(towers)",
        "test": "",
        "num_ids": 112
    },
    {
        "number": 4897,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def time_to_run(a, b, leg):\n        if leg == 1:\n            return a\n        else:\n            return b\n\n    def calculate_team_time(team):\n        team_time = 0\n        for i, runner in enumerate(team):\n            leg = i + 1\n            team_time += time_to_run(runner[1], runner[2], leg)\n        return team_time\n\n    def find_best_team(runners):\n        best_team = None\n        best_team_time = float('inf')\n        for i in range(len(runners)):\n            for j in range(len(runners)):\n                if i == j:\n                    continue\n                for k in range(len(runners)):\n                    if k in [i, j]:\n                        continue\n                    for l in range(len(runners)):\n                        if l in [i, j, k]:\n                            continue\n                        team = [runners[i], runners[j], runners[k], runners[l]]\n                        team_time = calculate_team_time(team)\n                        if team_time < best_team_time:\n                            best_team = team\n                            best_team_time = team_time\n        return best_team, best_team_time\n\n    n = int(stdin.readline().strip())\n    runners = []\n    for i in range(n):\n        name, a, b = stdin.readline().strip().split()\n        a, b = float(a), float(b)\n        runners.append((name, a, b))\n\n    best_team, best_team_time = find_best_team(runners)\n\n    output = f\"{best_team_time:.2f}\\n\"\n    for runner in best_team:\n        output += runner[0] + \"\\n\"\n\n    return output",
        "test": "",
        "num_ids": 457
    },
    {
        "number": 4898,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(arr, target):\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == target:\n                return True\n            elif arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n\n    def find_min_rooms(preferences):\n        preferences.sort(key=lambda x: x[0])\n        max_temp = 0\n        min_rooms = 0\n\n        for pref in preferences:\n            if pref[0] > max_temp:\n                min_rooms += 1\n                max_temp = pref[1]\n            elif pref[1] > max_temp:\n                max_temp = pref[1]\n\n        return min_rooms\n\n    N = int(stdin.readline().strip())\n    preferences = []\n\n    for _ in range(N):\n        L, U = map(int, stdin.readline().strip().split())\n        preferences.append((L, U))\n\n    return str(find_min_rooms(preferences))",
        "test": "",
        "num_ids": 290
    },
    {
        "number": 4899,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s.startswith(\"he\") and s.endswith(\"ey\"):\n        return \"he\" + \"e\" * (len(s) - 2) + \"ey\"\n    else:\n        return \"Invalid input\"\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "",
        "num_ids": 81
    },
    {
        "number": 4900,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    distance_matrix = []\n    for i in range(n):\n        distance_matrix.append(list(map(int, stdin.readline().split())))\n\n    def find_min_distance_node(visited, distance_matrix):\n        min_distance = float('inf')\n        min_node = -1\n        for i in range(n):\n            if i not in visited:\n                distance = sum(distance_matrix[i])\n                if distance < min_distance:\n                    min_distance = distance\n                    min_node = i\n        return min_node\n\n    def prims_algorithm(distance_matrix):\n        visited = [0]\n        edges = []\n        total_cost = 0\n\n        while len(visited) < n:\n            min_distance_node = find_min_distance_node(visited, distance_matrix)\n            visited.append(min_distance_node)\n\n            for i in range(len(visited) - 1):\n                start, end = visited[i], min_distance_node\n                if distance_matrix[start][end] != 0:\n                    edges.append((start, end))\n                    total_cost += distance_matrix[start][end]\n                    distance_matrix[start][end] = 0\n                    distance_matrix[end][start] = 0\n\n        return edges, total_cost\n\n    edges, total_cost = prims_algorithm(distance_matrix)\n    return '\\n'.join([' '.join(map(str, edge)) for edge in edges])",
        "test": "",
        "num_ids": 379
    },
    {
        "number": 4901,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def rotate_string(s: str, rotation: int) -> str:\n        return ''.join([chr(((ord(c) - ord('A') + rotation) % 26) + ord('A')) for c in s])\n\n    def merge_strings(s1: str, s2: str) -> str:\n        return ''.join([rotate_string(s1[i], ord(s2[i]) - ord('A')) for i in range(len(s1))])\n\n    def drm_decrypt(s: str) -> str:\n        n = len(s) // 2\n        s1, s2 = s[:n], s[n:]\n        s1_rotation = sum([ord(c) - ord('A') for c in s1])\n        s2_rotation = sum([ord(c) - ord('A') for c in s2])\n        s1_decrypted = rotate_string(s1, s1_rotation)\n        s2_decrypted = rotate_string(s2, s2_rotation)\n        return merge_strings(s1_decrypted, s2_decrypted)\n\n    return drm_decrypt(stdin)",
        "test": "",
        "num_ids": 284
    },
    {
        "number": 4902,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    from itertools import permutations\n\n    def is_palindrome(word: str) -> bool:\n        return word == word[::-1]\n\n    def is_peragram(word: str) -> bool:\n        for perm in permutations(word):\n            if is_palindrome(\"\".join(perm)):\n                return True\n        return False\n\n    stdin_counter = Counter(stdin)\n    peragrams = 0\n\n    for letter, count in stdin_counter.items():\n        if not is_peragram(letter * count):\n            peragrams += count\n\n    return peragrams // 2",
        "test": "",
        "num_ids": 159
    },
    {
        "number": 4903,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    jon_marius, doctor = stdin.split('\\n')\n    jon_marius_len = len(jon_marius)\n    doctor_len = len(doctor)\n\n    if jon_marius_len < doctor_len:\n        return \"no\"\n    else:\n        return \"go\"",
        "test": "",
        "num_ids": 78
    },
    {
        "number": 4904,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    alice_score = 0\n    barbara_score = 0\n    alice_turn = True\n\n    for i in range(0, len(stdin), 2):\n        if stdin[i] == \"A\":\n            alice_score += int(stdin[i + 1])\n        else:\n            barbara_score += int(stdin[i + 1])\n\n        if alice_score == 11 or barbara_score == 11:\n            break\n\n        if alice_score - barbara_score == 10:\n            break\n\n        if alice_score - barbara_score == -10:\n            break\n\n        alice_turn = not alice_turn\n\n    if alice_score == 11:\n        return \"A\"\n    elif barbara_score == 11:\n        return \"B\"\n    elif alice_score - barbara_score == 10:\n        return \"B\"\n    elif alice_score - barbara_score == -10:\n        return \"A\"\n    elif alice_turn:\n        return \"A\"\n    else:\n        return \"B\"",
        "test": "",
        "num_ids": 282
    },
    {
        "number": 4905,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_street_blocked(street, blocked_streets):\n        for blocked_street in blocked_streets:\n            if street[0] == blocked_street[0] and street[1] == blocked_street[1]:\n                return True\n        return False\n\n    def find_intersection_streets(intersection, streets):\n        intersection_streets = []\n        for street in streets:\n            if intersection in street:\n                intersection_streets.append(street)\n        return intersection_streets\n\n    def find_blocked_streets(mister_george_route, streets):\n        blocked_streets = []\n        for i in range(len(mister_george_route) - 1):\n            street = (mister_george_route[i], mister_george_route[i + 1])\n            if street not in blocked_streets:\n                blocked_streets.append(street)\n        return blocked_streets\n\n    def find_luka_route(start, end, streets):\n        visited = set()\n        queue = [(start, 0)]\n        while queue:\n            current, time = queue.pop(0)\n            if current == end:\n                return time\n            if current not in visited:\n                visited.add(current)\n                for street in find_intersection_streets(current, streets):\n                    if not is_street_blocked(street, blocked_streets):\n                        queue.append((street[1], time + street_lengths[street]))\n\n    stdin_list = stdin.split('\\n')\n    N, M = map(int, stdin_list[0].split())\n    A, B, K, G = map(int, stdin_list[1].split())\n    mister_george_route = list(map(int, stdin_list[2].split()))\n    street_lengths = {}\n    for i in range(3, 3 + M):\n        street = tuple(map(int, stdin_list[i].split()[:2]))\n        length = int(stdin_list[i].split()[2])\n        street_lengths[street] = length\n\n    blocked_streets = find_blocked_streets(mister_george_route, street_lengths.keys())\n    return find_luka_route(A, B, street_lengths) + K",
        "test": "",
        "num_ids": 569
    },
    {
        "number": 4906,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    action, message = stdin.split(\" \", 1)\n\n    if action == \"E\":\n        encoded_message = \"\"\n        count = 1\n\n        for i in range(1, len(message)):\n            if message[i] == message[i - 1]:\n                count += 1\n            else:\n                encoded_message += message[i - 1] + str(count)\n                count = 1\n\n        encoded_message += message[-1] + str(count)\n        return encoded_message\n\n    elif action == \"D\":\n        decoded_message = \"\"\n        i = 0\n\n        while i < len(message):\n            char = message[i]\n            count = int(message[i + 1])\n            decoded_message += char * count\n            i += 2\n\n        return decoded_message\n\n    else:\n        raise ValueError(\"Invalid action. Use 'E' for encode or 'D' for decode.\")",
        "test": "",
        "num_ids": 228
    },
    {
        "number": 4907,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return \"Bob\\n\" + str(n // 2)\n    else:\n        return \"Alice\\n\" + str(n // 2)",
        "test": "",
        "num_ids": 60
    },
    {
        "number": 4908,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    operations = ['+', '-', '*', '/']\n    for op in operations:\n        if op == '+':\n            if a + b == c:\n                return f\"{a} {op} {b} = {c}\"\n        elif op == '-':\n            if a - b == c:\n                return f\"{a} {op} {b} = {c}\"\n        elif op == '*':\n            if a * b == c:\n                return f\"{a} {op} {b} = {c}\"\n        elif op == '/':\n            if a // b == c:\n                return f\"{a} {op} {b} = {c}\"",
        "test": "",
        "num_ids": 177
    },
    {
        "number": 4909,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    D = list(map(int, stdin.readline().strip().split()))\n\n    for i in range(1, N):\n        if D[i] == 0:\n            return \"NO\"\n\n    for i in range(1, N - 1):\n        if D[i] != 2:\n            return \"NO\"\n\n    if D[N - 1] != 1:\n        return \"NO\"\n\n    return \"YES\"",
        "test": "",
        "num_ids": 124
    },
    {
        "number": 4910,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    costumes = {}\n    for _ in range(N):\n        costume = stdin.readline().strip()\n        if costume in costumes:\n            costumes[costume] += 1\n        else:\n            costumes[costume] = 1\n\n    max_count = 0\n    max_costumes = []\n    for costume, count in costumes.items():\n        if count > max_count:\n            max_count = count\n            max_costumes = [costume]\n        elif count == max_count:\n            max_costumes.append(costume)\n\n    return '\\n'.join(sorted(max_costumes))",
        "test": "",
        "num_ids": 172
    },
    {
        "number": 4911,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    attributes, songs, n, sort_commands = parse_input(stdin)\n    sorted_songs = sort_songs(songs, attributes, sort_commands)\n    output = create_output(attributes, sorted_songs)\n    return output\n\ndef",
        "test": "",
        "num_ids": 63
    },
    {
        "number": 4912,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w, n = map(int, stdin.split('\\n')[0].split())\n    bricks = list(map(int, stdin.split('\\n')[1].split()))\n\n    layers = 0\n    current_width = 0\n    for brick in bricks:\n        if current_width + brick <= w:\n            current_width += brick\n        else:\n            layers += 1\n            current_width = brick\n\n    if layers + 1 <= h:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "",
        "num_ids": 131
    },
    {
        "number": 4913,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_efficacy(vaccinated, control, strain):\n        vaccinated_infection = sum([1 for x in vaccinated if x[strain] == 'Y'])\n        control_infection = sum([1 for x in control if x[strain] == 'Y'])\n        if vaccinated_infection == 0:\n            return \"Not Effective\"\n        else:\n            return (1 - vaccinated_infection / len(vaccinated)) / (1 - control_infection / len(control)) * 100\n\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    participants = lines[1:]\n\n    vaccinated = [x for x in participants if x[0] == 'Y']\n    control = [x for x in participants if x[0] == 'N']\n\n    efficacy_A = calculate_efficacy(vaccinated, control, 1)\n    efficacy_B = calculate_efficacy(vaccinated, control, 2)\n    efficacy_C = calculate_efficacy(vaccinated, control, 3)\n\n    return f\"{efficacy_A}\\n{efficacy_B}\\n{efficacy_C}\"",
        "test": "",
        "num_ids": 310
    },
    {
        "number": 4914,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    correct_answers = stdin.readline().strip()\n\n    adrian_count = 0\n    bruno_count = 0\n    goran_count = 0\n\n    for i in range(N):\n        if i % 3 == 0:\n            if correct_answers[i] == 'A':\n                adrian_count += 1\n        elif i % 3 == 1:\n            if correct_answers[i] == 'B':\n                bruno_count += 1\n        else:\n            if correct_answers[i] == 'C':\n                goran_count += 1\n\n    max_count = max(adrian_count, bruno_count, goran_count)\n\n    result = []\n    if adrian_count == max_count:\n        result.append(\"Adrian\")\n    if bruno_count == max_count:\n        result.append(\"Bruno\")\n    if goran_count == max_count:\n        result.append(\"Goran\")\n\n    return f\"{max_count}\\n\" + \"\\n\".join(sorted(result))",
        "test": "",
        "num_ids": 285
    },
    {
        "number": 4915,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    log = [line.strip().split() for line in stdin.split('\\n')[:-1]]\n    solved_problems = set()\n    time_score = 0\n    wrong_submissions = {}\n\n    for entry in log:\n        time, problem, result = entry\n        time = int(time)\n\n        if problem not in solved_problems:\n            if result == 'right':\n                solved_problems.add(problem)\n                time_score += time\n            elif result == 'wrong':\n                if problem not in wrong_submissions:\n                    wrong_submissions[problem] = [time]\n                else:\n                    wrong_submissions[problem].append(time)\n\n    for problem, times in wrong_submissions.items():\n        if problem not in solved_problems:\n            continue\n\n        times.sort()\n        last_time = times[-1]\n        time_score += last_time\n        time_score += 20 * (len(times) - 1)\n\n    return f\"{len(solved_problems)} {time_score}\"",
        "test": "",
        "num_ids": 265
    },
    {
        "number": 4916,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.readline().split())))\n\n    def bfs(start, end):\n        visited = [[False for _ in range(n)] for _ in range(n)]\n        queue = [(start, 0)]\n        visited[start[0]][start[1]] = True\n\n        while queue:\n            x, y, dist = queue.pop(0)\n            if matrix[x][y] == end:\n                return dist\n\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                    visited[nx][ny] = True\n                    queue.append((nx, ny, dist + 1))\n\n        return -1\n\n    start = None\n    end = None\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                start = (i, j)\n            elif matrix[i][j] == k:\n                end = (i, j)\n\n    return bfs(start, end)",
        "test": "",
        "num_ids": 335
    },
    {
        "number": 4917,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    intervals = []\n    for i in range(1, N+1):\n        a, b = map(int, stdin.split('\\n')[i].split())\n        intervals.append((a, b))\n    \n    # Check if all pots start boiling at the same time\n    start_times = set()\n    for a, b in intervals:\n        start_times.add(a)\n    \n    if len(start_times) == 1:\n        return \"edward is right\"\n    else:\n        return \"gunilla has a point\"",
        "test": "",
        "num_ids": 147
    },
    {
        "number": 4918,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find(parent, x):\n        if parent[x] == x:\n            return x\n        parent[x] = find(parent, parent[x])\n        return parent[x]\n\n    def union(parent, rank, x, y):\n        xroot = find(parent, x)\n        yroot = find(parent, y)\n\n        if xroot == yroot:\n            return\n\n        if rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n\n    lines = stdin.split('\\n')\n    n, q = map(int, lines[0].split())\n    parent = list(range(n + 1))\n    rank = [0] * (n + 1)\n\n    for i in range(1, q + 1):\n        query = lines[i].split()\n        if query[0] == 't':\n            a, b = map(int, query[1:])\n            union(parent, rank, a, b)\n        elif query[0] == 's':\n            a = int(query[1])\n            print(find(parent, a), end=' ')\n\n    return \"\"",
        "test": "",
        "num_ids": 325
    },
    {
        "number": 4919,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    trips = {}\n    for _ in range(n):\n        country, year = stdin.readline().strip().split()\n        year = int(year)\n        if country not in trips:\n            trips[country] = [year]\n        else:\n            trips[country].append(year)\n    \n    q = int(stdin.readline().strip())\n    output = []\n    for _ in range(q):\n        country, k = stdin.readline().strip().split()\n        k = int(k)\n        output.append(trips[country][k-1])\n    \n    # Output\n    return '\\n'.join(map(str, output))",
        "test": "",
        "num_ids": 183
    },
    {
        "number": 4920,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    event_types = set(stdin)\n    total_itineraries = 0\n\n    for i in range(len(stdin) - 1):\n        first_event = stdin[i]\n        last_event = stdin[len(stdin) - i - 1]\n\n        if first_event != last_event:\n            unique_first = stdin.count(first_event) == 1\n            unique_last = stdin.count(last_event) == 1\n\n            if unique_first and unique_last:\n                total_itineraries += len(event_types) * len(event_types)\n            elif unique_first:\n                total_itineraries += len(event_types)\n            elif unique_last:\n                total_itineraries += len(event_types)\n\n    return str(total_itineraries)",
        "test": "",
        "num_ids": 205
    },
    {
        "number": 4921,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    seen_words = set()\n    result = []\n\n    for word in words:\n        if word.lower() not in seen_words:\n            seen_words.add(word.lower())\n            result.append(word)\n        else:\n            result.append('.')\n\n    return ' '.join(result)",
        "test": "",
        "num_ids": 85
    },
    {
        "number": 4922,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split()[:2])\n    clauses = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    \n    satisfactory = True\n    for clause in clauses:\n        if len(clause) != 3:\n            raise ValueError(\"Invalid clause length\")\n        if all(abs(x) > n for x in clause):\n            raise ValueError(\"Invalid variable index\")\n        if len(set(clause)) != 3:\n            raise ValueError(\"Duplicate literal in clause\")\n        \n        if m < 8:\n            satisfactory = False\n            break\n    \n    return \"satisfactory\" if satisfactory else \"unsatisfactory\" ",
        "test": "",
        "num_ids": 178
    },
    {
        "number": 4923,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    outcomes = list(map(int, stdin.split('\\n')[1].split()))\n\n    unique_outcomes = set(outcomes)\n    if len(unique_outcomes) == 1:\n        return \"none\"\n\n    max_outcome = max(unique_outcomes)\n    max_index = outcomes.index(max_outcome)\n\n    return str(max_index + 1)",
        "test": "",
        "num_ids": 115
    },
    {
        "number": 4924,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    current_time, desired_time = stdin.split('\\n')\n    current_hour, current_minute, current_second = map(int, current_time.split(':'))\n    desired_hour, desired_minute, desired_second = map(int, desired_time.split(':'))\n\n    current_total_seconds = current_hour * 3600 + current_minute * 60 + current_second\n    desired_total_seconds = desired_hour * 3600 + desired_minute * 60 + desired_second\n\n    if desired_total_seconds <= current_total_seconds:\n        desired_total_seconds += 24 * 3600\n\n    time_to_explosion = desired_total_seconds - current_total_seconds\n\n    hours = time_to_explosion // 3600\n    minutes = (time_to_explosion % 3600) // 60\n    seconds = time_to_explosion % 60\n\n    return f\"{hours:02d}:{minutes:02d}:{seconds:02d}\"",
        "test": "",
        "num_ids": 273
    },
    {
        "number": 4925,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, n = map(int, stdin.split())\n    k = 1\n    while (n * k) <= l:\n        k += 1\n    return str(k)",
        "test": "",
        "num_ids": 46
    },
    {
        "number": 4926,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    e = 1\n    for i in range(1, n + 1):\n        e += 1 / (i * factorial(i))\n    return format(e, \".12f\")\n\ndef",
        "test": "",
        "num_ids": 60
    },
    {
        "number": 4927,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = map(int, stdin.split())\n    if P % (2 * N) < Q % (2 * N):\n        return \"paul\"\n    else:\n        return \"opponent\"",
        "test": "",
        "num_ids": 55
    },
    {
        "number": 4928,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    return str(N * 2)",
        "test": "",
        "num_ids": 26
    },
    {
        "number": 4929,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, P = stdin.split('\\n')\n    if S == P:\n        return 'Yes'\n    elif len(S) == len(P) + 1 and S[1:] == P and S[0].isdigit():\n        return 'Yes'\n    elif len(S) == len(P) + 1 and S[:-1] == P and S[-1].isdigit():\n        return 'Yes'\n    elif S.lower() == P.lower():\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "",
        "num_ids": 128
    },
    {
        "number": 4930,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = \"aeiou\"\n    words = stdin.split(\" \")\n    decoded_words = []\n\n    for word in words:\n        decoded_word = \"\"\n        i = 0\n        while i < len(word):\n            if word[i] in vowels:\n                decoded_word += word[i] + \"p\" + word[i]\n                i += 2\n            else:\n                decoded_word += word[i]\n                i += 1\n        decoded_words.append(decoded_word)\n\n    return \" \".join(decoded_words)",
        "test": "",
        "num_ids": 147
    },
    {
        "number": 4931,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n\n    def f(temp):\n        return Y * (temp - X)\n\n    def binary_search(low, high):\n        if high - low < 10**-6:\n            return (low + high) / 2\n\n        mid = (low + high) / 2\n        if f(mid) == 0:\n            return mid\n        elif f(mid) > 0:\n            return binary_search(low, mid)\n        else:\n            return binary_search(mid, high)\n\n    result = binary_search(-100, 100)\n\n    if abs(result - X) < 10**-6:\n        return str(result)\n    else:\n        return \"IMPOSSIBLE\"",
        "test": "",
        "num_ids": 194
    },
    {
        "number": 4932,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, P, M, G = map(int, stdin.split())\n\n    def get_attack_count(arrival_time, A, B, C, D):\n        attack_count = 0\n        time = 0\n        while time < arrival_time:\n            time += A\n            if time > arrival_time:\n                break\n            attack_count += 1\n            time += B\n\n            time += C\n            if time > arrival_time:\n                break\n            attack_count += 1\n            time += D\n\n        return attack_count % 2\n\n    postman_attack = get_attack_count(P, A, B, C, D)\n    milkman_attack = get_attack_count(M, A, B, C, D)\n    garbage_man_attack = get_attack_count(G, A, B, C, D)\n\n    return (\n        \"both\" if postman_attack == 1 and milkman_attack == 1 and garbage_man_attack == 1 else\n        \"one\" if postman_attack == 1 or milkman_attack == 1 or garbage_man_attack == 1 else\n        \"none\"\n    )",
        "test": "",
        "num_ids": 302
    },
    {
        "number": 4933,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    d = (a + c - b) // 2\n    return str(d)",
        "test": "",
        "num_ids": 39
    },
    {
        "number": 4934,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, v = map(int, stdin.split())\n    ladder_len = h / (90 - v)\n    return str(ceil(ladder_len))",
        "test": "",
        "num_ids": 43
    },
    {
        "number": 4935,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_velocity(distance, angle, g):\n        return distance / (1 + (g / 9.81) * (1 - math.cos(math.radians(angle))))\n\n    def read_input(stdin: str) -> tuple:\n        lines = stdin.split(\"\\n\")\n        N, g = map(float, lines[0].split())\n        N = int(N)\n        slopes = []\n        for i in range(1, N + 1):\n            D, theta = map(float, lines[i].split())\n            slopes.append((D, theta))\n        return N, g, slopes\n\n    N, g, slopes = read_input(stdin)\n    velocities = []\n    for i in range(N):\n        D, theta = slopes[i]\n        velocity = calculate_velocity(D, theta, g)\n        velocities.append(velocity)\n\n    return \"\\n\".join(f\"{v:.1f}\" for v in velocities)",
        "test": "",
        "num_ids": 255
    },
    {
        "number": 4936,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    temperatures = list(map(int, stdin.readline().strip().split()))\n\n    min_temp = float('inf')\n    min_day = -1\n\n    for i in range(n - 2):\n        max_temp = max(temperatures[i:i+2])\n        total_temp = sum(temperatures[i:i+2])\n        if total_temp < min_temp:\n            min_temp = total_temp\n            min_day = i + 1\n\n    return f\"{min_day} {min_temp}\"",
        "test": "",
        "num_ids": 148
    },
    {
        "number": 4937,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    e = list(map(int, stdin.split()))\n    e.sort(reverse=True)\n    count = 0\n    for i in range(n):\n        if a >= e[i]:\n            a -= e[i]\n            count += 1\n        else:\n            break\n    return str(count)",
        "test": "",
        "num_ids": 93
    },
    {
        "number": 4938,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.readline().strip())\n    line = stdin.readline().strip()\n    men = line.count('M')\n    women = line.count('W')\n    count = 0\n    while abs(men - women) <= x:\n        if line[count] == 'M':\n            men -= 1\n        else:\n            women -= 1\n        count += 1\n    return str(count)",
        "test": "",
        "num_ids": 105
    },
    {
        "number": 4939,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    commands = stdin.split()[1:]\n\n    egg_holder = 0\n    egg_positions = [0]\n\n    for command in commands:\n        if command.isdigit():\n            throw_pos = int(command)\n            if throw_pos >= n:\n                throw_pos = throw_pos % n\n            elif throw_pos < -n:\n                throw_pos = throw_pos % n\n            elif throw_pos < 0:\n                throw_pos = n + throw_pos\n\n            egg_holder = (egg_holder + throw_pos) % n\n            egg_positions.append(egg_holder)\n        elif command.startswith(\"undo\"):\n            m = int(command.split()[1])\n            for _ in range(m):\n                if len(egg_positions) > 1:\n                    egg_positions.pop()\n                    egg_holder = egg_positions[-1]\n\n    return str(egg_holder)",
        "test": "",
        "num_ids": 256
    },
    {
        "number": 4940,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    P = [list(map(int, stdin.readline().split())) for _ in range(N)]\n\n    T = [0] * N\n    for j in range(M):\n        for i in range(N):\n            T[i] += P[i][j]\n\n    return \" \".join(map(str, T))",
        "test": "",
        "num_ids": 100
    },
    {
        "number": 4941,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_translations(word):\n        translations = []\n        for entry in dictionary:\n            if entry[0] == word:\n                translations.append(entry[1])\n        return translations\n\n    def is_correct_translation(sentence):\n        words = sentence.split()\n        for word in words:\n            translations = find_translations(word)\n            if \"correct\" not in translations:\n                return False\n        return True\n\n    def count_possible_translations(sentence):\n        words = sentence.split()\n        total_correct = 1\n        total_incorrect = 1\n\n        for word in words:\n            translations = find_translations(word)\n            correct_translations = [t for t in translations if t == \"correct\"]\n            incorrect_translations = [t for t in translations if t == \"incorrect\"]\n\n            total_correct *= len(correct_translations)\n            total_incorrect *= len(correct_translations) + len(incorrect_translations)\n\n        return total_correct, total_incorrect\n\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    dutch_sentence = lines[1]\n    m = int(lines[2])\n    dictionary = [line.split() for line in lines[3:]]\n\n    if is_correct_translation(dutch_sentence):\n        return f\"{dutch_sentence} correct\"\n    else:\n        total_correct, total_incorrect = count_possible_translations(dutch_sentence)\n        return f\"{total_correct} correct\\n{total_incorrect} incorrect\"",
        "test": "",
        "num_ids": 412
    },
    {
        "number": 4942,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    t = list(map(int, stdin.split('\\n')[1].split()))\n    t.sort()\n    return str(sum(t[:n-1]) + t[n-1])",
        "test": "",
        "num_ids": 63
    },
    {
        "number": 4943,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_inside_polygon(x, y, polygon):\n        n = len(polygon)\n        inside = False\n        p1_x, p1_y = polygon[0]\n        for i in range(1, n + 1):\n            p2_x, p2_y = polygon[i % n]\n            if min(p1_y, p2_y) < y <= max(p1_y, p2_y) and x <= max(p1_x, p2_x):\n                if p1_y != p2_y:\n                    x_intersect = (y - p1_y) * (p2_x - p1_x) / (p2_y - p1_y) + p1_x\n                    if x_intersect == x:\n                        return True\n                    if p1_x == p2_x or x < x_intersect:\n                        inside = not inside\n                else:\n                    inside = not inside\n            p1_x, p1_y = p2_x, p2_y\n        return inside\n\n    def find_area(polygon):\n        n = len(polygon)\n        area = 0\n        for i in range(n):\n            x1, y1 = polygon[i]\n            x2, y2 = polygon[(i + 1) % n]\n            area += (x1 * y2) - (x2 * y1)\n        return abs(area) / 2\n\n    def find_centroid(polygon):\n        n = len(polygon)\n        cx, cy = 0, 0\n        area = find_area(polygon)\n        for i in range(n):\n            x1, y1 = polygon[i]\n            x2, y2 = polygon[(i + 1) % n]\n            cx += (x1 + x2) * ((x1 * y2) - (x2 * y1))\n            cy += (y1 + y2) * ((x1 * y2) - (x2 * y1))\n        cx /= (6 * area)\n        cy /= (6 * area)\n        return cx, cy\n\n    def find_max_distance(polygon):\n        n = len(polygon)\n        max_distance = 0\n        for i in range(n):\n            x1, y1 = polygon[i]\n            x2, y2 = polygon[(i + 1) % n]\n            distance = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n            max_distance = max(max_distance, distance)\n        return max_distance\n\n    def expand_polygon(polygon, area):\n        cx, cy = find_centroid(polygon)\n        max_distance = find_max_distance(polygon)\n        polygon_area = find_area(polygon)\n        scale_factor = (area / polygon_area) ** 0.5\n        new_polygon = []\n        for x, y in polygon:\n            new_x = cx + scale_factor * (x - cx)\n            new_y = cy + scale_factor * (y - cy)\n            new_polygon.append((new_x, new_y))\n        return new_polygon\n\n    def shrink_polygon(polygon, area):\n        cx, cy = find_centroid(polygon)\n        max_distance = find_max_distance(polygon)\n        polygon_area = find_area(polygon)\n        scale_factor = (area / polygon_area) ** 0.5\n        new_polygon = []\n        for x, y in polygon:\n            new_x = cx + scale_factor * (x - cx)\n            new_y = cy + scale_factor * (y - cy)\n            new_polygon.append((new_x, new_y))\n        return new_polygon\n\n    def move_polygon(polygon):\n        min_x = min(x for x, y in polygon)\n        min_y = min(y for x, y in polygon)\n        new_polygon = []\n        for x, y in polygon:\n            new_x = x - min_x\n            new_y = y - min_y\n            new_pol",
        "test": "",
        "num_ids": 1025
    },
    {
        "number": 4944,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    days = 0\n    printers = 1\n\n    while n > 0:\n        days += 1\n        n -= printers\n        printers += 1\n\n    return str(days)",
        "test": "",
        "num_ids": 61
    },
    {
        "number": 4945,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, m, sigma = map(int, stdin.split())\n\n    def is_valid(x, y):\n        return x >= 1 and y >= 1 and x + y <= m and 2 * x + y >= sigma\n\n    max_rent = 0\n    for x in range(1, m + 1):\n        for y in range(1, m + 1):\n            if is_valid(x, y):\n                rent = x * a + y * b\n                max_rent = max(max_rent, rent)\n\n    return str(max_rent)",
        "test": "",
        "num_ids": 144
    },
    {
        "number": 4946,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    languages = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    awkwardness = n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n\n    return str(awkwardness)",
        "test": "",
        "num_ids": 109
    },
    {
        "number": 4947,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    roman_paces = round(1000 * x * (5280 / 4854))\n    return str(roman_paces)",
        "test": "",
        "num_ids": 47
    },
    {
        "number": 4948,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    holes = []\n    for _ in range(n):\n        r, x, y, z = map(int, input().split())\n        holes.append((r, x, y, z))\n\n    def is_inside(x, y, z):\n        for r, hx, hy, hz in holes:\n            if (x - hx) ** 2 + (y - hy) ** 2 + (z - hz) ** 2 <= r ** 2:\n                return True\n        return False\n\n    def get_weight(z):\n        weight = 0\n        for x in range(100001):\n            for y in range(100001):\n                if not is_inside(x, y, z):\n                    weight += 1\n        return weight\n\n    total_weight = get_weight(100000)\n    slice_weight = total_weight / s\n\n    current_weight = 0\n    current_z = 100000\n    slice_thicknesses = []\n\n    while len(slice_thicknesses) < s:\n        current_z -= 1\n        current_weight = get_weight(current_z)\n        if current_weight >= slice_weight:\n            slice_thicknesses.append((100000 - current_z) / 1000)\n\n    return '\\n'.join(f'{t:.10f}' for t in slice_thicknesses[::-1])",
        "test": "",
        "num_ids": 373
    },
    {
        "number": 4949,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, W, H, matches = map(int, stdin.split())\n    result = []\n    for match in matches:\n        if match <= W and match <= H:\n            result.append(\"DA\")\n        else:\n            result.append(\"NE\")\n    return \"\\n\".join(result)",
        "test": "",
        "num_ids": 73
    },
    {
        "number": 4950,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    data = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    max_speed = 0\n    for i in range(1, n):\n        time_diff = data[i][0] - data[i - 1][0]\n        dist_diff = data[i][1] - data[i - 1][1]\n        speed = dist_diff / time_diff\n        max_speed = max(max_speed, speed)\n\n    return str(int(max_speed))",
        "test": "",
        "num_ids": 145
    },
    {
        "number": 4951,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    assumptions = {}\n    conclusions = set()\n\n    for i in range(1, n + 1):\n        line = lines[i].split(' ')\n        arrow_index = line.index('->')\n        assumptions_list = line[:arrow_index]\n        conclusion = line[arrow_index + 1]\n\n        if not assumptions_list:\n            if conclusion not in conclusions:\n                conclusions.add(conclusion)\n            else:\n                return i\n        else:\n            for assumption in assumptions_list:\n                if assumption not in conclusions:\n                    break\n            else:\n                if conclusion not in conclusions:\n                    conclusions.add(conclusion)\n                else:\n                    return i\n                for assumption in assumptions_list:\n                    if assumption in assumptions:\n                        assumptions[assumption].add(conclusion)\n                    else:\n                        assumptions[assumption] = {conclusion}\n            else:\n                return i\n\n    return 'correct'",
        "test": "",
        "num_ids": 255
    },
    {
        "number": 4952,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    votes = {}\n    for line in stdin.split('\\n')[:-1]:\n        if line not in votes:\n            votes[line] = 1\n        else:\n            votes[line] += 1\n    \n    max_votes = max(votes.values())\n    max_voted = [name for name, count in votes.items() if count == max_votes]\n    \n    if len(max_voted) == 1:\n        return max_voted[0]\n    else:\n        return \"Runoff!\"",
        "test": "",
        "num_ids": 131
    },
    {
        "number": 4953,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def can_converse(char1, char2, languages):\n        if char1[1] == char2[1]:\n            return True\n        for lang in char1[2:]:\n            if lang in char2[2:]:\n                return True\n        return False\n\n    def find_min_set(characters, languages):\n        min_set = set()\n        for char1 in characters:\n            can_converse_with_all = True\n            for char2 in characters:\n                if char1 != char2 and not can_converse(char1, char2, languages):\n                    can_converse_with_all = False\n                    break\n            if can_converse_with_all:\n                min_set.add(char1[0])\n        return min_set\n\n    lines = stdin.split('\\n')\n    num_chars = int(lines[0])\n    characters = []\n    languages = set()\n\n    for i in range(1, num_chars + 1):\n        line = lines[i].split()\n        char_name = line[0]\n        char_lang = line[1]\n        char_understands = line[2:]\n        characters.append((char_name, char_lang, *char_understands))\n        languages.add(char_lang)\n        for lang in char_understands:\n            languages.add(lang)\n\n    min_set = find_min_set(characters, languages)\n    return str(len(min_set))",
        "test": "",
        "num_ids": 362
    },
    {
        "number": 4954,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    input_list = list(map(int, stdin.split()))\n    N, B, H, W = input_list[0:4]\n    hotels = []\n    for i in range(H):\n        p, a = input_list[4 + i * (W + 1)], input_list[4 + i * (W + 1) + 1:4 + i * (W + 1) + 1 + W]\n        hotels.append((p, a))\n\n    # Find the minimum cost\n    min_cost = float('inf')\n    for p, a in hotels:\n        total_cost = p * N\n        for w in range(W):\n            if a[w] >= N:\n                total_cost += w * p\n                break\n        if total_cost <= B:\n            min_cost = min(min_cost, total_cost)\n\n    # Output\n    if min_cost == float('inf'):\n        return \"stay home\"\n    else:\n        return str(min_cost)",
        "test": "",
        "num_ids": 252
    },
    {
        "number": 4955,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    notes = stdin.split('\\n')[1].split()\n\n    scales = []\n    for note in notes:\n        if note not in scales:\n            scales.append(note)\n\n    for i in range(1, n):\n        if notes[i] == notes[0]:\n            break\n        elif notes[i] == notes[(i + 1) % n]:\n            break\n        elif notes[i] == notes[(i + 3) % n]:\n            break\n        elif notes[i] == notes[(i + 4) % n]:\n            break\n        elif notes[i] == notes[(i + 6) % n]:\n            break\n        elif notes[i] == notes[(i + 7) % n]:\n            break\n        elif notes[i] == notes[(i + 9) % n]:\n            break\n        else:\n            scales.append(notes[i])\n\n    if not scales:\n        return \"none\"\n    else:\n        return \" \".join(sorted(scales))",
        "test": "",
        "num_ids": 256
    },
    {
        "number": 4956,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    count = 0\n    for word in words:\n        if 'ae' in word:\n            count += 1\n    if count >= 0.4 * len(words):\n        return \"dae ae ju traeligt va\"\n    else:\n        return \"haer talar vi rikssvenska\"",
        "test": "",
        "num_ids": 85
    },
    {
        "number": 4957,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(n)]\n\n    def is_valid(x: int, y: int) -> bool:\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == '.':\n                return True\n        return False\n\n    def place_shops(x: int, y: int) -> bool:\n        if not (0 <= x < n and 0 <= y < m):\n            return True\n        if grid[x][y] != '.':\n            return place_shops(x + 1, y) or place_shops(x - 1, y) or place_shops(x, y + 1) or place_shops(x, y - 1)\n\n        if not is_valid(x, y):\n            return False\n\n        grid[x][y] = 'E'\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == '.':\n                if not place_shops(nx, ny):\n                    grid[x][y] = '.'\n                    return False\n        return True\n\n    if not place_shops(0, 0):\n        return \"No solution found\"\n\n    return '\\n'.join([''.join(row) for row in grid])",
        "test": "",
        "num_ids": 430
    },
    {
        "number": 4958,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    heights = list(map(int, stdin.split()))\n    tower1_height, tower2_height = heights[-2:]\n    boxes = sorted(heights[:-2], reverse=True)\n\n    # Find the two towers\n    tower1 = []\n    tower2 = []\n    for box in boxes:\n        if sum(tower1) + box <= tower1_height:\n            tower1.append(box)\n        else:\n            tower2.append(box)\n\n    # Output the result\n    return \" \".join(map(str, tower1 + tower2))",
        "test": "",
        "num_ids": 146
    },
    {
        "number": 4959,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    e, f, c = map(int, stdin.split())\n    total_bottles = e + f\n    sodas = total_bottles // c\n    return str(sodas)",
        "test": "",
        "num_ids": 50
    },
    {
        "number": 4960,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    binary = stdin.strip()\n    while len(binary) % 3 != 0:\n        binary = \"0\" + binary\n\n    octal = \"\"\n    for i in range(0, len(binary), 3):\n        group = binary[i:i+3]\n        octal_digit = str(int(group, 2))\n        octal += octal_digit\n\n    return octal",
        "test": "",
        "num_ids": 99
    },
    {
        "number": 4961,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, S = map(int, stdin.readline().split())\n    seating_order = [list(stdin.readline().strip()) for _ in range(R)]\n\n    def is_valid_neighbour(x: int, y: int) -> bool:\n        return 0 <= x < R and 0 <= y < S and seating_order[x][y] == 'o'\n\n    def count_handshakes(x: int, y: int) -> int:\n        count = 0\n        for dx, dy in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]:\n            nx, ny = x + dx, y + dy\n            if is_valid_neighbour(nx, ny):\n                count += 1\n        return count\n\n    total_handshakes = 0\n    for i in range(R):\n        for j in range(S):\n            if seating_order[i][j] == '.':\n                total_handshakes += count_handshakes(i, j)\n\n    return str(total_handshakes)",
        "test": "",
        "num_ids": 294
    },
    {
        "number": 4962,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_empty_drawer(drawer_pairs, visited_drawers, current_drawer):\n        if current_drawer not in visited_drawers:\n            visited_drawers.add(current_drawer)\n            return current_drawer\n        else:\n            next_drawer = drawer_pairs[current_drawer][0] if drawer_pairs[current_drawer][1] == current_drawer else drawer_pairs[current_drawer][1]\n            return find_empty_drawer(drawer_pairs, visited_drawers, next_drawer)\n\n    def move_item(drawer_pairs, current_drawer, target_drawer):\n        if current_drawer == target_drawer:\n            return True\n        else:\n            next_drawer = drawer_pairs[current_drawer][0] if drawer_pairs[current_drawer][1] == current_drawer else drawer_pairs[current_drawer][1]\n            return move_item(drawer_pairs, next_drawer, target_drawer)\n\n    lines = stdin.split('\\n')\n    N, L = map(int, lines[0].split())\n    drawer_pairs = {(i + 1): tuple(map(int, lines[i + 1].split())) for i in range(N)}\n\n    output = []\n    for i in range(1, N + 1):\n        A_i, B_i = drawer_pairs[i]\n\n        if A_i not in drawer_pairs.values():\n            output.append(\"LADICA\")\n            drawer_pairs[i] = (A_i, B_i)\n        elif B_i not in drawer_pairs.values():\n            output.append(\"LADICA\")\n            drawer_pairs[i] = (B_i, A_i)\n        else:\n            visited_drawers = set()\n            empty_drawer = find_empty_drawer(drawer_pairs, visited_drawers, A_i)\n            if empty_drawer == A_i:\n                output.append(\"LADICA\")\n                drawer_pairs[i] = (A_i, B_i)\n            elif move_item(drawer_pairs, empty_drawer, A_i):\n                output.append(\"LADICA\")\n                drawer_pairs[i] = (A_i, B_i)\n            else:\n                visited_drawers = set()\n                empty_drawer = find_empty_drawer(drawer_pairs, visited_drawers, B_i)\n                if empty_drawer == B_i:\n                    output.append(\"LADICA\")\n                    drawer_pairs[i] = (B_i, A_i)\n                elif move_item(drawer_pairs, empty_drawer, B_i):\n                    output.append(\"LADICA\")\n                    drawer_pairs[i] = (B_i, A_i)\n                else:\n                    output.append(\"SMECE\")\n\n    return '\\n'.join(output)",
        "test": "",
        "num_ids": 770
    },
    {
        "number": 4963,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    d = list(map(int, stdin.split('\\n')[1].split()))\n    order = [1]\n    for i in range(n-1):\n        if d[i] == 0:\n            order.append(i+2)\n        else:\n            order.insert(order.index(i+2)+1, i+2)\n    return ' '.join(map(str, order))",
        "test": "",
        "num_ids": 113
    },
    {
        "number": 4964,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def read_input():\n        N, H, L = map(int, stdin.readline().split())\n        horror_list = list(map(int, stdin.readline().split()))\n        similarities = [list(map(int, stdin.readline().split())) for _ in range(L)]\n        return N, H, L, horror_list, similarities\n\n    def calculate_horror_index(N, H, L, horror_list, similarities):\n        horror_index = [0] * N\n        for i in range(H):\n            horror_index[horror_list[i]] = float('inf')\n\n        for i in range(L):\n            a, b = similarities[i]\n            if a not in horror_list and b not in horror_list:\n                continue\n            if horror_index[a] == 0:\n                horror_index[a] = 1\n            if horror_index[b] == 0:\n                horror_index[b] = 1\n            if horror_index[a] > 0 and horror_index[b] > 0:\n                horror_index[a] = min(horror_index[a], horror_index[b]) + 1\n                horror_index[b] = horror_index[a]\n\n        return horror_index\n\n    def find_movie_with_highest_horror_index(horror_index):\n        max_horror_index = max(horror_index)\n        min_id = min([i for i, hi in enumerate(horror_index) if hi == max_horror_index])\n        return min_id\n\n    N, H, L, horror_list, similarities = read_input()\n    horror_index = calculate_horror_index(N, H, L, horror_list, similarities)\n    movie_id = find_movie_with_highest_horror_index(horror_index)\n    return str(movie_id)",
        "test": "",
        "num_ids": 469
    },
    {
        "number": 4965,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    temps = list(map(int, stdin.split('\\n')[1].split()))\n\n    if n == 2:\n        if abs(temps[0] - temps[1]) == 0:\n            return \"impossible\"\n        elif abs(temps[0] - temps[1]) > 0:\n            return f\"{max(temps)} {min(temps)}\"\n        else:\n            return f\"{min(temps)} {max(temps)}\"\n\n    sorted_temps = sorted(temps)\n    increasing_diff = [sorted_temps[i] - sorted_temps[i - 1] for i in range(1, n)]\n    decreasing_diff = [sorted_temps[i] - sorted_temps[i - 1] for i in range(n - 1, 0, -1)]\n\n    if all(increasing_diff[i] <= increasing_diff[i + 1] for i in range(n - 2)) and all(\n            decreasing_diff[i] <= decreasing_diff[i + 1] for i in range(n - 2)):\n        return \" \".join(map(str, sorted_temps))\n    else:\n        return \"impossible\"",
        "test": "",
        "num_ids": 301
    },
    {
        "number": 4966,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = map(int, stdin.split('\\n')[0].split())\n    t = list(map(int, stdin.split('\\n')[1].split()))\n\n    total_time = 0\n    for i in range(n):\n        if i == 0:\n            total_time += t[i]\n        else:\n            total_time += (t[i] - t[i - 1]) * (1 + p / 100) ** (i)\n\n    original_length = total_time * 100 / (100 + p)\n\n    return f\"{original_length:.3f}\"",
        "test": "",
        "num_ids": 157
    },
    {
        "number": 4967,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, grid = int(stdin.readline().strip()), list(map(list, stdin.readlines()))\n    spies = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == 'S']\n    safe_houses = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == 'H']\n    max_distance = 0\n    for spy in spies:\n        min_distance = float('inf')\n        for safe_house in safe_houses:\n            distance = abs(spy[0] - safe_house[0]) + abs(spy[1] - safe_house[1])\n            min_distance = min(min_distance, distance)\n        max_distance = max(max_distance, min_distance)\n    return str(max_distance)",
        "test": "",
        "num_ids": 212
    },
    {
        "number": 4968,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S, R = map(int, stdin.split())\n    damaged_teams = list(map(int, input().split()))\n    reserve_teams = list(map(int, input().split()))\n\n    unplayable_teams = set(range(1, N + 1)) - set(damaged_teams) - set(reserve_teams)\n\n    for team in damaged_teams:\n        if team - 1 in reserve_teams:\n            unplayable_teams.add(team)\n        if team + 1 in reserve_teams:\n            unplayable_teams.add(team)\n\n    return str(len(unplayable_teams))",
        "test": "",
        "num_ids": 171
    },
    {
        "number": 4969,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    total_area = R ** 2\n    crust_area = C ** 2\n    cheese_area = total_area - crust_area\n    percent_cheese = cheese_area / total_area * 100\n    return f\"{percent_cheese:.10f}\"",
        "test": "",
        "num_ids": 88
    },
    {
        "number": 4970,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    courses = [line.split() for line in stdin.split('\\n')[1:]]\n    combinations = {}\n\n    for i in range(n):\n        combination = tuple(sorted(courses[i]))\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n\n    max_popularity = max(combinations.values())\n    count = sum(1 for comb in combinations if combinations[comb] == max_popularity)\n\n    return str(count)",
        "test": "",
        "num_ids": 147
    },
    {
        "number": 4971,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.strip())\n    bus_numbers = []\n    n = 1\n    while True:\n        bus_number = sum_of_two_cubes(n)\n        if bus_number > m:\n            break\n        if is_bus_number(bus_number):\n            bus_numbers.append(bus_number)\n        n += 1\n    if not bus_numbers:\n        return \"none\"\n    return str(bus_numbers[-1])\n\ndef",
        "test": "",
        "num_ids": 119
    },
    {
        "number": 4972,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    k = 0\n    while X % 2 == 0:\n        X //= 2\n        k += 1\n    while X % 3 == 0:\n        X //= 3\n        k += 1\n    if X == 1:\n        return str(k)\n    return \"0\"",
        "test": "",
        "num_ids": 85
    },
    {
        "number": 4973,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    board = []\n    for i in range(N):\n        board.append(list(stdin.readline().strip()))\n\n    def is_valid(r, c):\n        return 1 <= r <= N and 1 <= c <= N\n\n    def bfs(board, start_r, start_c):\n        queue = [(start_r, start_c, 0)]\n        visited = set()\n        while queue:\n            r, c, dist = queue.pop(0)\n            if (r, c) in visited:\n                continue\n            visited.add((r, c))\n            if r == 1 and c == 1:\n                return dist\n            for dr, dc in [(-2, 1), (-2, -1), (2, 1), (2, -1), (-1, 2), (-1, -2), (1, 2), (1, -2)]:\n                new_r, new_c = r + dr, c + dc\n                if is_valid(new_r, new_c) and board[new_r - 1][new_c - 1] != '#':\n                    queue.append((new_r, new_c, dist + 1))\n        return -1\n\n    for i in range(N):\n        for j in range(N):\n            if board[i][j] == 'K':\n                return bfs(board, i + 1, j + 1)\n\n    return -1",
        "test": "",
        "num_ids": 364
    },
    {
        "number": 4974,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.split())\n    booked_rooms = set(map(int, stdin.split()[1:]))\n    available_rooms = set(range(1, r + 1)) - booked_rooms\n    if available_rooms:\n        return str(available_rooms.pop())\n    else:\n        return \"too late\"",
        "test": "",
        "num_ids": 90
    },
    {
        "number": 4975,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    key_phrase, plaintext = stdin.split('\\n')\n    key_phrase = key_phrase.replace(' ', '')\n    key = ''.join(set(key_phrase.lower()))\n    key = key.replace('q', '')\n    key = key + 'x' * (25 - len(key))\n    key = key.upper()\n\n    table = [key[i:i + 5] for i in range(0, 25, 5)]\n\n    def find_coordinates(char):\n        for i, row in enumerate(table):\n            if char in row:\n                return (i, row.index(char))\n\n    def encrypt_pair(pair):\n        a, b = pair\n        if a == b:\n            return 'X' + a\n        a_x, a_y = find_coordinates(a)\n        b_x, b_y = find_coordinates(b)\n        if a_x == b_x:\n            return table[a_x][(a_y + 1) % 5] + table[b_x][(b_y + 1) % 5]\n        elif a_y == b_y:\n            return table[(a_x + 1) % 5][a_y] + table[(b_x + 1) % 5][b_y]\n        else:\n            return table[a_x][b_y] + table[b_x][a_y]\n\n    encrypted_text = ''.join(encrypt_pair(plaintext[i:i + 2]) for i in range(0, len(plaintext), 2))\n    return encrypted_text.upper()",
        "test": "",
        "num_ids": 402
    },
    {
        "number": 4976,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    input_lines = stdin.split('\\n')\n    gopher_coords, dog_coords = [float(x) for x in input_lines[0].split()]\n    gopher_holes = [(float(x.split()[0]), float(x.split()[1])) for x in input_lines[1:]]\n\n    # Calculate distance between gopher and dog\n    distance_gopher_dog = ((gopher_coords[0] - dog_coords[0]) ** 2 + (gopher_coords[1] - dog_coords[1]) ** 2) ** 0.5\n\n    # Check if gopher can escape through any hole\n    for hole in gopher_holes:\n        distance_gopher_hole = ((gopher_coords[0] - hole[0]) ** 2 + (gopher_coords[1] - hole[1]) ** 2) ** 0.5\n        distance_dog_hole = ((dog_coords[0] - hole[0]) ** 2 + (dog_coords[1] - hole[1]) ** 2) ** 0.5\n\n        # Check if gopher reaches hole before dog\n        if distance_gopher_hole < distance_gopher_dog:\n            return f\"The gopher can escape through the hole at ({hole[0]:.3f},{hole[1]:.3f}).\"\n\n    # Gopher cannot escape\n    return \"The gopher cannot escape.\"",
        "test": "",
        "num_ids": 354
    },
    {
        "number": 4977,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, t = map(int, stdin.split())\n\n    def distance(x1, y1, x2, y2):\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    dist = distance(a, b, c, d)\n\n    if t >= dist and t % 2 == dist % 2:\n        return \"Y\"\n    else:\n        return \"N\"",
        "test": "",
        "num_ids": 109
    },
    {
        "number": 4978,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(N)]\n\n    def spread_water(row, col):\n        if grid[row][col] == \"V\":\n            if row > 0 and grid[row - 1][col] == \".\":\n                grid[row - 1][col] = \"V\"\n            if col > 0 and grid[row][col - 1] == \".\" and grid[row][col - 1] != \"#\":\n                grid[row][col - 1] = \"V\"\n            if col < M - 1 and grid[row][col + 1] == \".\" and grid[row][col + 1] != \"#\":\n                grid[row][col + 1] = \"V\"\n\n    for i in range(N):\n        for j in range(M):\n            spread_water(i, j)\n\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == \".\":\n                grid[i][j] = \"V\"\n\n    return \"\\n\".join([\"\".join(row) for row in grid])\n",
        "test": "",
        "num_ids": 292
    },
    {
        "number": 4979,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    binary_n = bin(n)[2:]\n    reversed_binary_n = binary_n[::-1]\n    result = int(reversed_binary_n, 2)\n    return str(result)",
        "test": "",
        "num_ids": 63
    },
    {
        "number": 4980,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    pink_buttons = []\n    rose_buttons = []\n\n    for i in range(1, N + 1):\n        color = lines[i].lower()\n        if 'pink' in color:\n            pink_buttons.append(color)\n        if 'rose' in color:\n            rose_buttons.append(color)\n\n    if not pink_buttons and not rose_buttons:\n        return \"I must watch Star Wars with my daughter\"\n    else:\n        return min(len(pink_buttons), len(rose_buttons))",
        "test": "",
        "num_ids": 160
    },
    {
        "number": 4981,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    order = input().strip()\n    order_dict = {'A': A, 'B': B, 'C': C}\n    result = [order_dict[char] for char in order]\n    return ' '.join(map(str, result))",
        "test": "",
        "num_ids": 76
    },
    {
        "number": 4982,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def process_event(event: str, shares: int, cost: float, total_cost: float) -> tuple:\n        if event == \"buy\":\n            shares += x\n            total_cost += x * y\n        elif event == \"sell\":\n            profit = (y - cost) * min(x, shares)\n            total_cost -= min(x, shares) * cost\n            shares -= min(x, shares)\n        elif event == \"split\":\n            shares *= x\n            cost /= x\n        elif event == \"merge\":\n            shares -= shares % x\n            cost *= x\n        return shares, cost, total_cost\n\n    events = stdin.split(\"\\n\")\n    shares = 0\n    cost = 0\n    total_cost = 0\n\n    for event in events:\n        if event.startswith(\"die\"):\n            shares, cost, total_cost = process_event(\"sell\", shares, cost, total_cost)\n            profit = (int(event.split()[1]) - cost) * shares\n            total_cost += profit\n            tax = profit * 0.3\n            total_cost -= tax\n            break\n        else:\n            event_type, *params = event.split()\n            shares, cost, total_cost = process_event(event_type, shares, cost, total_cost)\n\n    return f\"{total_cost:.8f}\"",
        "test": "",
        "num_ids": 332
    },
    {
        "number": 4983,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    while x > 9:\n        product = 1\n        for digit in str(x):\n            if digit != '0':\n                product *= int(digit)\n        x = product\n    return str(x)",
        "test": "",
        "num_ids": 62
    },
    {
        "number": 4984,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(grid, visited, row, col):\n        if row < 0 or row >= len(grid) or col < 0 or col >= len(grid[0]) or grid[row][col] != 'L' or visited[row][col]:\n            return\n        visited[row][col] = True\n        dfs(grid, visited, row - 1, col)\n        dfs(grid, visited, row + 1, col)\n        dfs(grid, visited, row, col - 1)\n        dfs(grid, visited, row, col + 1)\n\n    r, c = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(r)]\n    visited = [[False] * c for _ in range(r)]\n    islands = 0\n\n    for i in range(r):\n        for j in range(c):\n            if grid[i][j] == 'L' and not visited[i][j]:\n                dfs(grid, visited, i, j)\n                islands += 1\n\n    return str(islands)",
        "test": "",
        "num_ids": 269
    },
    {
        "number": 4985,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0].split()[0])\n    dominant_suit = lines[0].split()[1]\n    points = 0\n\n    scores = {\n        'A': 11,\n        'K': 4,\n        'Q': 3,\n        'J': 20,\n        'T': 10,\n        '9': 14,\n        '8': 0,\n        '7': 0\n    }\n\n    for i in range(1, len(lines), 2):\n        card1 = lines[i]\n        card2 = lines[i+1]\n        for card in [card1, card2]:\n            if card[1] == dominant_suit:\n                points += scores[card[0]]\n            else:\n                points += 0 if card[0] == '8' or card[0] == '7' else 1\n\n    return str(points)",
        "test": "",
        "num_ids": 234
    },
    {
        "number": 4986,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    result = []\n    i = j = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            result.append(s[i])\n            i += 1\n            j += 2\n    return ''.join(result)",
        "test": "",
        "num_ids": 102
    },
    {
        "number": 4987,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, C, K, D = map(int, stdin.split())\n    D = sorted(D)\n    machines = 1\n    current_machine = [D[0]]\n\n    for i in range(1, S):\n        if abs(D[i] - D[i - 1]) <= K and len(current_machine) < C:\n            current_machine.append(D[i])\n        else:\n            current_machine = [D[i]]\n            machines += 1\n\n    return str(machines)",
        "test": "",
        "num_ids": 129
    },
    {
        "number": 4988,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def factorial_last_digit(n: int) -> int:\n        if n == 1:\n            return 1\n        else:\n            return factorial_last_digit(n - 1) * n % 10\n\n    input_list = list(map(int, stdin.split()))\n    T = input_list[0]\n    output_list = []\n\n    for i in range(1, len(input_list)):\n        N = input_list[i]\n        output_list.append(factorial_last_digit(N))\n\n    return \"\\n\".join(map(str, output_list))",
        "test": "",
        "num_ids": 151
    },
    {
        "number": 4989,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, pieces = map(int, stdin.split())\n    pieces = sorted(pieces, reverse=True)\n    alice_sum = 0\n    bob_sum = 0\n\n    for i in range(n):\n        if i % 2 == 0:\n            alice_sum += pieces[i]\n        else:\n            bob_sum += pieces[i]\n\n    return f\"{alice_sum} {bob_sum}\"",
        "test": "",
        "num_ids": 112
    },
    {
        "number": 4990,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, k, g = map(int, stdin.split())\n    return str(b // g)",
        "test": "",
        "num_ids": 27
    },
    {
        "number": 4991,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    def hailstone(n: int) -> int:\n        if n == 1:\n            return 1\n        elif n % 2 == 0:\n            return n + hailstone(n // 2)\n        else:\n            return n + hailstone(3 * n + 1)\n\n    return str(hailstone(n))",
        "test": "",
        "num_ids": 95
    },
    {
        "number": 4992,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *students = list(map(int, stdin.split()))\n    total_students = sum(students)\n    max_students = max(students)\n\n    if total_students % 2 != 0:\n        return \"impossible\"\n\n    for i in range(1, n):\n        if students[i] % 2 != 0:\n            return \"impossible\"\n\n    safe_order = list(range(1, n + 1))\n    return \" \".join(map(str, safe_order))",
        "test": "",
        "num_ids": 132
    },
    {
        "number": 4993,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    parts, days = map(int, stdin.readline().split())\n    parts_list = [stdin.readline().strip() for _ in range(days)]\n\n    parts_dict = {}\n    for i, part in enumerate(parts_list):\n        if part in parts_dict:\n            parts_dict[part].append(i)\n        else:\n            parts_dict[part] = [i]\n\n    if len(parts_dict) == parts:\n        return \"paradox avoided\"\n\n    for part, days_list in parts_dict.items():\n        if len(days_list) == 1:\n            return days_list[0] + 1\n\n    return \"paradox avoided\"",
        "test": "",
        "num_ids": 172
    },
    {
        "number": 4994,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for line in stdin.split('\\n'):\n        x, y = map(int, line.split())\n        points.append((x, y))\n\n    x1, y1 = points[0]\n    x2, y2 = points[1]\n    x3, y3 = points[2]\n\n    if x1 == x2 == x3:\n        x4 = x1 + (y1 - y3)\n        y4 = y1 + (y3 - y2)\n    elif y1 == y2 == y3:\n        x4 = x1 + (x3 - x2)\n        y4 = y1 + (y2 - y3)\n    else:\n        x4 = x1 + (y1 - y3)\n        y4 = y1 + (y3 - y2)\n\n    return f\"{x4} {y4}\\n\"",
        "test": "",
        "num_ids": 214
    },
    {
        "number": 4995,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    total_wait_time = 0\n    total_displayed_minutes = 0\n\n    for i in range(N):\n        M, S = map(int, stdin.readline().split())\n        total_wait_time += S\n        total_displayed_minutes += M\n\n    avg_sl_minute = total_wait_time / total_displayed_minutes\n\n    if avg_sl_minute <= 1:\n        return \"measurement error\"\n    else:\n        return f\"{avg_sl_minute:.8f}\"",
        "test": "",
        "num_ids": 152
    },
    {
        "number": 4996,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    encrypted_message, key = stdin.split('\\n')\n    decrypted_message = []\n\n    for i in range(len(encrypted_message)):\n        if i % 2 == 0:\n            decrypted_message.append(chr((ord(encrypted_message[i]) - ord(key[i]) + 26) % 26 + 65))\n        else:\n            decrypted_message.append(chr((ord(encrypted_message[i]) + ord(key[i]) + 26) % 26 + 65))\n\n    return ''.join(decrypted_message)",
        "test": "",
        "num_ids": 149
    },
    {
        "number": 4997,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    ball_index = 1\n    for move in stdin:\n        if move == 'A':\n            if ball_index == 1:\n                ball_index = 2\n            elif ball_index == 2:\n                ball_index = 1\n        elif move == 'B':\n            if ball_index == 1:\n                ball_index = 3\n            elif ball_index == 3:\n                ball_index = 1\n        elif move == 'C':\n            if ball_index == 2:\n                ball_index = 3\n            elif ball_index == 3:\n                ball_index = 2\n    return str(ball_index)",
        "test": "",
        "num_ids": 158
    },
    {
        "number": 4998,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    areas = [A * B, A * C, A * D, B * C, B * D, C * D]\n    return str(max(areas))",
        "test": "",
        "num_ids": 59
    },
    {
        "number": 4999,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    count = 0\n    while a != b:\n        if a > b and a % 2 == 0:\n            a //= 2\n        else:\n            a += 1\n        count += 1\n    return str(count)",
        "test": "",
        "num_ids": 74
    }
]