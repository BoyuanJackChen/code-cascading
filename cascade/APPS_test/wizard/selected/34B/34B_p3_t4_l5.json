[
    {
        "number": 4000,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_path(u, v):\n        path = []\n        path.append(u)\n        while u != v:\n            u = L[u]\n            path.append(u)\n        return path\n\n    def lca(u, v):\n        if u == v:\n            return u\n        path1 = find_path(u, root)\n        path2 = find_path(v, root)\n        i = 0\n        while i < len(path1) and i < len(path2) and path1[i] == path2[i]:\n            i += 1\n        return path1[i - 1]\n\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    edges = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    L = [0] * (n + 1)\n    root = 1\n    max_edges = 0\n    a, b, c = 0, 0, 0\n\n    for u, v in edges:\n        L[v] = u\n\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            k = lca(i, j)\n            path_ij = len(find_path(i, j)) - 1\n            path_ik = len(find_path(i, k)) - 1\n            path_kj = len(find_path(k, j)) - 1\n            edges_count = path_ij + path_ik + path_kj - 2\n            if edges_count > max_edges:\n                max_edges = edges_count\n                a, b, c = i, j, k\n\n    return f\"{max_edges}\\n{a} {b} {c}\\n\"",
        "test": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n\") == \"5\\n1 8 6\" ",
        "num_ids": 1474
    },
    {
        "number": 4001,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    divisors = sorted(list(map(int, stdin.split('\\n')[1].split())))\n\n    x_divisors = []\n    y_divisors = []\n\n    for i in range(n):\n        if i % 2 == 0:\n            x_divisors.append(divisors[i])\n        else:\n            y_divisors.append(divisors[i])\n\n    x = 1\n    y = 1\n\n    for d in x_divisors:\n        x *= d\n\n    for d in y_divisors:\n        y *= d\n\n    return f\"{x} {y}\"",
        "test": "assert solution(\"2\\n1 1\\n\") == \"1 1\"",
        "num_ids": 1068
    },
    {
        "number": 4002,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    a = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\n    max_sum = 0\n\n    for row in a:\n        row.sort()\n        row_sum = 0\n\n        for i in range(len(row)):\n            if i > m // 2:\n                break\n\n            row_sum += row[i]\n\n        if row_sum % k == 0:\n            max_sum = max(max_sum, row_sum)\n\n    return str(max_sum)\n",
        "test": "assert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\" ",
        "num_ids": 1171
    },
    {
        "number": 4003,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def is_increasing(sequence: List[int]) -> bool:\n        return all(sequence[i] < sequence[i + 1] for i in range(len(sequence) - 1))\n\n    def find_longest_increasing_sequence(sequence: List[int]) -> Tuple[int, str]:\n        longest_length = 0\n        longest_sequence = \"\"\n\n        for move in [\"L\", \"R\"]:\n            current_sequence = [sequence[0]]\n            if move == \"L\":\n                sequence_copy = sequence.copy()\n            else:\n                sequence_copy = sequence[::-1]\n\n            for _ in range(len(sequence) - 1):\n                if move == \"L\":\n                    current_element = sequence_copy.pop(0)\n                else:\n                    current_element = sequence_copy.pop()\n\n                if current_element > current_sequence[-1]:\n                    current_sequence.append(current_element)\n\n            if is_increasing(current_sequence) and len(current_sequence) > longest_length:\n                longest_length = len(current_sequence)\n                longest_sequence = move * len(current_sequence)\n\n        return longest_length, longest_sequence\n\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n\n    longest_length, longest_sequence = find_longest_increasing_sequence(a)\n\n    return f\"{longest_length}\\n{longest_sequence}\"",
        "test": "assert solution(\"4\\n1 2 4 3\\n\") == \"4\\nLLRR\"",
        "num_ids": 1219
    },
    {
        "number": 4004,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    a.sort()\n    D = 0\n    \n    for i in range(1, n):\n        diff = a[i] - a[i-1]\n        if diff > D:\n            D = diff\n    \n    if a[0] + D > a[-1]:\n        return \"-1\"\n    \n    return str(D)",
        "test": "assert solution(\"6\\n1 4 4 7 4 1\\n\") == \"3\"",
        "num_ids": 642
    },
    {
        "number": 4005,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    coords = [int(x) for x in stdin.split()]\n    x1, y1, x2, y2 = coords[:4]\n    x3, y3, x4, y4 = coords[4:8]\n    x5, y5, x6, y6 = coords[8:]\n\n    if x1 > x3 and x1 > x5:\n        return \"YES\" if x2 < x4 or x2 < x6 else \"NO\"\n    elif x2 < x4 and x2 < x6:\n        return \"YES\"\n    elif x3 > x1 and x3 > x5:\n        return \"YES\" if x4 < x2 or x4 < x6 else \"NO\"\n    elif x4 < x2 and x4 < x6:\n        return \"YES\"\n    elif y1 > y3 and y1 > y5:\n        return \"YES\" if y2 < y4 or y2 < y6 else \"NO\"\n    elif y2 < y4 and y2 < y6:\n        return \"YES\"\n    elif y3 > y1 and y3 > y5:\n        return \"YES\" if y4 < y2 or y4 < y6 else \"NO\"\n    elif y4 < y2 and y4 < y6:\n        return \"YES\"\n    else:\n        return \"NO\" ",
        "test": "assert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\\n\") == \"YES\"",
        "num_ids": 1457
    },
    {
        "number": 4006,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    def f(x: int) -> int:\n        while x % 10 == 0:\n            x //= 10\n        return x\n\n    n = int(stdin)\n    reachable_numbers = {n}\n    current_number = n\n    while True:\n        current_number = f(current_number + 1)\n        if current_number in reachable_numbers:\n            break\n        reachable_numbers.add(current_number)\n\n    return str(len(reachable_numbers) - 1)\n",
        "test": "assert solution(\"7\") == 9",
        "num_ids": 514
    },
    {
        "number": 4007,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def find_cycle(i, friend_list):\n        visited = [False] * n\n        cycle = [0] * n\n        for j in range(n):\n            if not visited[j]:\n                current = j\n                k = 0\n                while not visited[current]:\n                    visited[current] = True\n                    cycle[k] = current\n                    k += 1\n                    current = friend_list[current]\n                if current == j:\n                    return cycle[k - 1::-1] + cycle[:k - 1]\n        return []\n\n    def fill_cycle(cycle, friend_list):\n        for i in range(len(cycle) // 2):\n            f1, f2 = cycle[i], cycle[-i - 1]\n            friend_list[f1] = f2\n            friend_list[f2] = f1\n\n    def assign_unknown_values(friend_list):\n        for i in range(n):\n            if friend_list[i] == 0:\n                for j in range(n):\n                    if j not in friend_list and j != i:\n                        friend_list[i] = j\n                        break\n\n    n = int(stdin.readline().strip())\n    friend_list = list(map(int, stdin.readline().strip().split()))\n\n    assign_unknown_values(friend_list)\n\n    cycle = find_cycle(0, friend_list)\n    while cycle:\n        fill_cycle(cycle, friend_list)\n        cycle = find_cycle(0, friend_list)\n\n    return \" \".join(map(str, friend_list)) + \"\\n\"",
        "test": "assert solution(\"5\\n2 1 0 0 0\") == \"2 1 4 5 3\"",
        "num_ids": 1266
    },
    {
        "number": 4008,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    if k < n:\n        return \"NO\"\n    \n    colors = [0] * k\n    color_map = {}\n    for i in range(n):\n        possible_colors = set(range(1, k + 1))\n        for j in range(i):\n            if a[i] == a[j]:\n                possible_colors.discard(color_map[a[j]])\n        if not possible_colors:\n            return \"NO\"\n        color = min(possible_colors)\n        color_map[a[i]] = color\n        colors[color - 1] += 1\n    \n    output = \"YES\\n\"\n    for i in range(n):\n        output += str(color_map[a[i]]) + \" \"\n    return output",
        "test": "assert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"",
        "num_ids": 1008
    },
    {
        "number": 4009,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    number = list(map(int, input()))\n    modulo = 10 ** x\n\n    def get_remainder(num: List[int]) -> int:\n        remainder = 0\n        for i in range(x):\n            remainder = (remainder * 2 + num[i]) % modulo\n        return remainder\n\n    def set_digit(num: List[int], i: int) -> None:\n        num[i] ^= 1\n\n    def minimize_operations(num: List[int]) -> int:\n        operations = 0\n        for i in range(y):\n            if num[i] == 0:\n                set_digit(num, i)\n                operations += 1\n        return operations\n\n    remainder = get_remainder(number)\n    if remainder == 10 ** y:\n        return str(minimize_operations(number))\n\n    for i in range(y, x):\n        if number[i] == 0:\n            set_digit(number, i)\n            new_remainder = get_remainder(number)\n            if new_remainder == 10 ** y:\n                return str(minimize_operations(number) + i - y + 1)\n            if new_remainder % 2 == 1:\n                set_digit(number, i)\n\n    return \"Impossible\"\n",
        "test": "assert solution(\"11 5 1\\n11010100101\") == 3",
        "num_ids": 880
    },
    {
        "number": 4010,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(seq: List[int]) -> bool:\n        for i in range(len(seq) // 2):\n            if seq[i] != seq[-i - 1]:\n                return False\n        return True\n\n    def subsequence_palindrome(a: List[int]) -> bool:\n        for length in range(3, len(a) + 1):\n            for subseq in itertools.combinations(a, length):\n                if is_palindrome(list(subseq)):\n                    return True\n        return False\n\n    t = int(stdin.readline().strip())\n    result = []\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        if subsequence_palindrome(a):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n    return \"\\n\".join(result)\n",
        "test": "assert solution([4, 1, 2, 2, 1]) == \"YES\"",
        "num_ids": 996
    },
    {
        "number": 4011,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().rstrip()\n    f = [int(i) for i in stdin.readline().split()]\n\n    max_segment = a\n    max_result = int(a)\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            segment = a[i:j]\n            result = int(segment)\n            for digit in segment:\n                result = f[int(digit) - 1] * (result // 10) + f[int(digit) - 1] % 10\n\n            if result > max_result:\n                max_segment = segment\n                max_result = result\n\n    start = a.index(max_segment)\n    end = start + len(max_segment)\n\n    if start == 0:\n        result = str(max_result) + a[end:]\n    elif end == n:\n        result = a[:start] + str(max_result)\n    else:\n        result = a[:start] + str(max_result) + a[end:]\n\n    return str(result)",
        "test": "assert solution(\"2\\n33\\n1 1 1 1 1 1 1 1 1\") == \"33\"",
        "num_ids": 1117
    },
    {
        "number": 4012,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    t = int(stdin.split('\\n')[0])\n    output = []\n    for i in range(t):\n        a, b, c = map(int, stdin.split('\\n')[i + 1].split())\n        A = a\n        B = lcm(a, b)\n        C = lcm(B, c)\n        res = 0\n        if A != a:\n            res += abs(A - a) - 1\n        if B != b:\n            res += abs(B - b) - 1\n        if C != c:\n            res += abs(C - c) - 1\n        output.append(f\"{res}\\n{A} {B} {C}\")\n    return \"\\n\".join(output)",
        "test": "assert solution(\"1\\n100 100 100\") == \"0\\n100 100 100\"",
        "num_ids": 1250
    },
    {
        "number": 4013,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(i) for i in stdin.split('\\n')[1].split()]\n    instability = max(a) - min(a)\n    for i in range(n):\n        new_a = a[:i] + a[i+1:]\n        new_instability = max(new_a) - min(new_a)\n        if new_instability < instability:\n            instability = new_instability\n    return str(instability)",
        "test": "assert solution(\"4\\n1 3 3 7\\n\") == \"2\"",
        "num_ids": 501
    },
    {
        "number": 4014,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def can_schedule(exams, n):\n        schedule = [0] * (n + 1)\n        for exam in exams:\n            s, d, c = exam\n            for i in range(s, d):\n                if schedule[i] == 0:\n                    schedule[i] = 1\n                else:\n                    return False\n            for i in range(d, d + c):\n                if schedule[i] == 1:\n                    schedule[i] = 2\n                else:\n                    return False\n        return True\n\n    def find_exam_day(exams, n):\n        schedule = [0] * (n + 1)\n        for i, exam in enumerate(exams):\n            s, d, c = exam\n            for j in range(s, d):\n                if schedule[j] == 0:\n                    schedule[j] = i + 1\n                    break\n            for j in range(d, d + c):\n                if schedule[j] == 0:\n                    schedule[j] = -(i + 1)\n                    break\n        return schedule\n\n    def find_exam_schedule(exams, n):\n        schedule = [0] * (n + 1)\n        for i, exam in enumerate(exams):\n            s, d, c = exam\n            for j in range(s, d):\n                if schedule[j] == 0:\n                    schedule[j] = i + 1\n                    break\n            for j in range(d, d + c):\n                if schedule[j] == 0:\n                    schedule[j] = -(i + 1)\n                    break\n        return schedule\n\n    n, m = map(int, stdin.split())\n    exams = [list(map(int, input().split())) for _ in range(m)]\n\n    if not can_schedule(exams, n):\n        return \"-1\"\n\n    exam_day_schedule = find_exam_day(exams, n)\n    exam_schedule = find_exam_schedule(exams, n)\n\n    result = []\n    for i in range(1, n + 1):\n        if exam_day_schedule[i] > 0:\n            result.append(exam_day_schedule[i])\n        elif exam_schedule[i] != 0:\n            result.append(abs(exam_schedule[i]))\n        else:\n            result.append(0)\n\n    return \" \".join(map(str, result))",
        "test": "assert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"",
        "num_ids": 1742
    },
    {
        "number": 4015,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    if n == m:\n        return \"0\"\n    moves = 0\n    while n != m:\n        if n > m:\n            return \"-1\"\n        if n * 2 == m or n * 3 == m:\n            moves += 1\n            break\n        elif n * 2 < m:\n            n *= 2\n            moves += 1\n        elif n * 3 < m:\n            n *= 3\n            moves += 1\n        else:\n            return \"-1\"\n    return str(moves)",
        "test": "assert solution(\"42 42\") == \"0\"",
        "num_ids": 634
    },
    {
        "number": 4016,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    t = stdin.readline().strip()\n    s = t * (k // n)\n    s += t[:k % n]\n    return s",
        "test": "assert solution(\"5 3\\nhello\") == \"hellohellohello\"",
        "num_ids": 321
    },
    {
        "number": 4017,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    nice_indices = []\n\n    for j in range(n):\n        temp_sum = sum(a) - a[j]\n        if a[j] == temp_sum:\n            nice_indices.append(j + 1)\n\n    if len(nice_indices) == 0:\n        return \"0\\n\"\n    else:\n        result = str(len(nice_indices)) + \"\\n\"\n        result += \" \".join(map(str, nice_indices))\n        return result + \"\\n\"",
        "test": "assert solution(\"5\\n2 1 2 4 3\\n\") == \"0\\n\" ",
        "num_ids": 753
    },
    {
        "number": 4018,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = input()\n\n    def is_subsequence(t: str, s: str) -> bool:\n        t_idx, s_idx = 0, 0\n        while s_idx < len(s):\n            if s[s_idx] == t[t_idx]:\n                t_idx += 1\n            if t_idx == len(t):\n                return True\n            s_idx += 1\n        return False\n\n    def min_cost(s: str, k: int) -> int:\n        cost = 0\n        for i in range(1, n):\n            for j in range(i):\n                t = s[j:i]\n                if is_subsequence(t, s):\n                    cost += n - i\n        return cost\n\n    if min_cost(s, k) > 10**12:\n        return -1\n    else:\n        return str(min_cost(s, k))\n",
        "test": "assert solution(\"10 100\\najihiushda\") == 233",
        "num_ids": 908
    },
    {
        "number": 4019,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m, D = map(int, stdin.readline().split())\n    edges = []\n    for i in range(m):\n        v, u = map(int, stdin.readline().split())\n        edges.append((v, u))\n    \n    # Check if there is a valid spanning tree\n    if D >= n - 1:\n        print(\"NO\")\n        return\n    \n    # Initialize the graph\n    graph = [[] for _ in range(n + 1)]\n    for v, u in edges:\n        graph[v].append(u)\n        graph[u].append(v)\n    \n    # Perform a Depth-First Search (DFS) to find a spanning tree\n    visited = [False] * (n + 1)\n    stack = [(1, D)]\n    while stack:\n        v, d = stack.pop()\n        if not visited[v]:\n            visited[v] = True\n            if d > 0:\n                for u in graph[v]:\n                    if not visited[u]:\n                        stack.append((u, d - 1))\n    \n    # Check if the DFS found a valid spanning tree\n    if not all(visited[1:]) or D != sum(len(graph[i]) for i in range(1, n + 1)) - n + 1:\n        print(\"NO\")\n        return\n    \n    # Output the edges of the spanning tree\n    print(\"YES\")\n    for v, u in edges:\n        if visited[v] and visited[u] and (len(graph[v]) - 1 == D or len(graph[u]) - 1 == D):\n            print(v, u)",
        "test": "assert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"NO\" ",
        "num_ids": 1810
    },
    {
        "number": 4020,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split()[0].split(':'))\n    h2, m2 = map(int, stdin.split()[1].split(':'))\n    m_diff = (h2 * 60 + m2) - (h1 * 60 + m1)\n    m_mid = m1 + m_diff // 2\n    h_mid = (h1 + (m_mid // 60)) % 24\n    m_mid %= 60\n    return f\"{h_mid:02d}:{m_mid:02d}\"",
        "test": "assert solution(\"10:00\\n11:00\") == \"10:30\"",
        "num_ids": 621
    },
    {
        "number": 4021,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    count = 0\n    while a > 1:\n        a >>= 1\n        count += 1\n    return str(count)",
        "test": "assert solution(\"2\") == \"1\"",
        "num_ids": 273
    },
    {
        "number": 4022,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    segments = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    def find_intersection(a, b):\n        if a[1] < b[0] or b[1] < a[0]:\n            return []\n        return [max(a[0], b[0]), min(a[1], b[1])]\n\n    max_length = 0\n    for i in range(n):\n        remaining_segments = segments[:i] + segments[i+1:]\n        intersection = [segments[i][0], segments[i][1]]\n        for segment in remaining_segments:\n            intersection = find_intersection(intersection, segment)\n            if not intersection:\n                break\n        if intersection:\n            max_length = max(max_length, intersection[1] - intersection[0])\n\n    return str(max_length)",
        "test": "assert solution(",
        "num_ids": 673
    },
    {
        "number": 4023,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    heights = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    max_height = max(heights)\n    min_height = min(heights)\n\n    if max_height - min_height > 1:\n        return \"NO\"\n\n    if len(set(heights)) == 1:\n        return \"YES\"\n\n    for i in range(1, n):\n        if heights[i] - heights[i - 1] > 1:\n            return \"NO\"\n\n    return \"YES\"\n",
        "test": "assert solution(\"3\\n4 5 3\") == \"NO\"",
        "num_ids": 568
    },
    {
        "number": 4024,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = input()\n\n    def is_subsequence(t: str, s: str) -> bool:\n        t = list(t)\n        for c in s:\n            if t and t[0] == c:\n                t.pop(0)\n        return not t\n\n    def dfs(i: int, k: int, cost: int) -> int:\n        if k == 0:\n            return cost\n        if i == n:\n            return -1\n        t = s[i:]\n        if is_subsequence(t, s):\n            new_cost = dfs(i + 1, k, cost + n - len(t))\n            if new_cost != -1:\n                return new_cost\n        return dfs(i + 1, k, cost)\n\n    result = dfs(0, k, 0)\n    return str(result) if result != -1 else \"-1\"",
        "test": "assert solution(\"10 100\\najihiushda\") == 233",
        "num_ids": 931
    },
    {
        "number": 4025,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    total_days = a + b + c\n    max_days = min(a, 7) + min(b, 2) + min(c, 3)\n    return str(min(total_days, max_days))",
        "test": "assert solution(\"2 1 1\") == \"4\"",
        "num_ids": 517
    },
    {
        "number": 4026,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_symmetric(matrix: List[List[int]]) -> bool:\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] != matrix[j][i]:\n                    return False\n        return True\n\n    def can_construct_square(n: int, m: int, tiles: List[List[List[int]]]) -> bool:\n        if m % 2 != 0:\n            return False\n\n        for tile in tiles:\n            if tile[0][0] != tile[1][1] or tile[0][1] != tile[1][0]:\n                return False\n\n        square = [[0] * m for _ in range(m)]\n\n        for i in range(0, m, 2):\n            for j in range(0, m, 2):\n                for k, tile in enumerate(tiles):\n                    if tile[0][0] == square[i][j] and tile[1][1] == square[i][j + 1] and tile[0][1] == square[i + 1][j] and tile[1][0] == square[i + 1][j + 1]:\n                        square[i][j] = square[i][j + 1] = square[i + 1][j] = square[i + 1][j + 1] = k + 1\n                        break\n                else:\n                    return False\n\n        return is_symmetric(square)\n\n    def parse_input(stdin: str) -> Iterator[Tuple[int, int, List[List[List[int]]]]]:\n        n_tests = int(stdin.split('\\n', 1)[0])\n        stdin = stdin.splitlines()[1:]\n\n        for _ in range(n_tests):\n            n, m = map(int, stdin.pop(0).split())\n            tiles = []\n\n            for _ in range(n):\n                top_left, top_right = map(int, stdin.pop(0).split())\n                bottom_left, bottom_right = map(int, stdin.pop(0).split())\n                tiles.append([[top_left, top_right], [bottom_left, bottom_right]])\n\n            yield n, m, tiles\n\n    for n, m, tiles in parse_input(stdin):\n        if can_construct_square(n, m, tiles):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
        "test": "assert solution(\"\"\"6",
        "num_ids": 2402
    },
    {
        "number": 4027,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n\n    if n % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\"",
        "test": "assert solution(\"5\") == \"1\"",
        "num_ids": 218
    },
    {
        "number": 4028,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import product\n    from functools import reduce\n    from operator import mul\n\n    n, s = map(int, stdin.split())\n    MOD = 10**9 + 7\n\n    def count_brackets(s: str) -> int:\n        count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n            elif c == ')':\n                count -= 1\n                if count < 0:\n                    return 0\n        return 1 if count == 0 else 0\n\n    def regular_bracket_sequences(n: int, s: str) -> int:\n        valid_brackets = count_brackets(s)\n        if valid_brackets == 0:\n            return 0\n\n        brackets = [1, 0]\n        for _ in range(n - len(s)):\n            brackets = [sum(t) % MOD for t in zip(brackets, brackets[1:])]\n            brackets.append(reduce(mul, brackets, 1))\n\n        result = 0\n        for i in range(len(s) - 1):\n            if s[i] == '(' and s[i + 1] == ')':\n                result = (result + brackets[i + 1]) % MOD\n\n        return result\n\n    return regular_bracket_sequences(2 * n, s)",
        "test": "assert solution(\"2\\n(((\") == \"0\\n\"",
        "num_ids": 987
    },
    {
        "number": 4029,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    swaps = 0\n    \n    # Check if the number is already divisible by 25\n    if n % 25 == 0:\n        return 0\n\n    # Check if it is possible to obtain a number that is divisible by 25\n    for digit in str(n):\n        if int(digit) % 5 != 0:\n            return -1\n\n    # Perform swaps\n    digits = [int(digit) for digit in str(n)]\n    for i in range(len(digits) - 1):\n        if digits[i] != 0:\n            continue\n        j = i + 1\n        while j < len(digits) and digits[j] == 0:\n            j += 1\n        if j == len(digits):\n            return -1\n        digits[i], digits[j] = digits[j], digits[i]\n        swaps += 1\n\n        # Check if the swapped number is divisible by 25\n        if int(''.join(map(str, digits))) % 25 == 0:\n            return swaps\n\n    return -1",
        "test": "assert solution(\"1241367\") == -1",
        "num_ids": 1287
    },
    {
        "number": 4030,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    def is_sorted(coloring):\n        for i in range(1, len(s)):\n            if coloring[i] == coloring[i - 1]:\n                continue\n            if s[i] < s[i - 1]:\n                return False\n        return True\n\n    def dfs(index, color, coloring):\n        if index == n:\n            return is_sorted(coloring)\n\n        if coloring[index] != 0:\n            return dfs(index + 1, color, coloring)\n\n        for i in range(1, color + 1):\n            coloring[index] = i\n            if dfs(index + 1, max(color, i), coloring):\n                return True\n\n        coloring[index] = 0\n        return False\n\n    coloring = [0] * n\n    for color in range(1, n + 1):\n        if dfs(0, color, coloring):\n            res = color\n            break\n\n    return f\"{res}\\n{' '.join(map(str, coloring))}\"",
        "test": "assert solution('5\\nabcde') == '1\\n1 1 1 1 1\\n' ",
        "num_ids": 1088
    },
    {
        "number": 4031,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(s1: str, s2: str) -> bool:\n        for i in range(len(s2) - len(s1) + 1):\n            if s1 == s2[i:i + len(s1)]:\n                return True\n        return False\n\n    def find_first_position(s: str, strings: list) -> int:\n        for i, string in enumerate(strings):\n            if is_substring(s, string):\n                return i\n        return -1\n\n    def find_next_position(s: str, strings: list, start: int) -> int:\n        for i, string in enumerate(strings[start + 1:], start + 1):\n            if is_substring(s, string):\n                return i\n        return -1\n\n    def can_reorder(n: int, strings: list) -> bool:\n        for i in range(n):\n            if find_first_position(strings[i], strings[:i]) == -1:\n                if find_next_position(strings[i], strings, i) == -1:\n                    return False\n        return True\n\n    def reorder_strings(n: int, strings: list) -> list:\n        reordered_strings = []\n        for i in range(n):\n            if find_first_position(strings[i], reordered_strings) == -1:\n                if find_next_position(strings[i], strings, i) == -1:\n                    reordered_strings.append(strings[i])\n        return reordered_strings\n\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    strings = lines[1:]\n\n    if can_reorder(n, strings):\n        return \"YES\\n\" + \"\\n\".join(reorder_strings(n, strings))\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5\\na\\nabacaba\\nba\\naba\\nabab\\n\") == \"NO\"",
        "num_ids": 1483
    },
    {
        "number": 4032,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    problems = list(map(int, stdin.split()[2:]))\n\n    left = 0\n    right = n - 1\n    count = 0\n\n    while left <= right:\n        if problems[left] <= k:\n            count += 1\n            problems.pop(left)\n            n -= 1\n            right -= 1\n        elif problems[right] <= k:\n            count += 1\n            problems.pop(right)\n            n -= 1\n            right -= 1\n        else:\n            break\n\n    return str(count)",
        "test": "assert solution(\"5 2\\n3 1 2 1 3\") == \"0\"",
        "num_ids": 672
    },
    {
        "number": 4033,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    perimeter = 2 * (a + b)\n    return str(perimeter)",
        "test": "assert solution('3 6\\n') == '12'",
        "num_ids": 400
    },
    {
        "number": 4034,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def is_sorted(s: str) -> bool:\n        return all(s[i] <= s[i + 1] for i in range(len(s) - 1))\n\n    def can_be_sorted(s: str) -> bool:\n        for i in range(len(s) - 1):\n            if s[i] > s[i + 1]:\n                if i == 0 or s[i - 1] <= s[i + 1]:\n                    return True\n        return False\n\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    if is_sorted(s):\n        return \"YES\\n\" + \"0\" * n\n    elif can_be_sorted(s):\n        result = []\n        for i in range(n):\n            if i == 0 or s[i - 1] > s[i]:\n                result.append(\"0\")\n            else:\n                result.append(\"1\")\n        return \"YES\\n\" + \"\".join(result)\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5\\nabcde\\n\") == \"YES\\n00000\"",
        "num_ids": 747
    },
    {
        "number": 4035,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    lowest_price = -1\n\n    for i in range(25, 101):\n        consumption_tax_8 = i * 0.08\n        consumption_tax_10 = i * 0.1\n\n        if int(consumption_tax_8) == A and int(consumption_tax_10) == B:\n            if lowest_price == -1:\n                lowest_price = i\n            else:\n                lowest_price = min(lowest_price, i)\n\n    return str(lowest_price)",
        "test": "assert solution(\"10 10\") == \"-1\"",
        "num_ids": 466
    },
    {
        "number": 4036,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    if n > 2 ** k:\n        return \"NO\"\n\n    a = [1] * k\n    current_sum = k\n\n    if current_sum == n:\n        return f\"YES\\n{' '.join(map(str, a))}\"\n\n    for i in range(k - 1, 0, -1):\n        if a[i] + 1 <= 2 * a[i]:\n            a[i - 1] = a[i] + 1\n            current_sum += 1\n\n        if current_sum == n:\n            return f\"YES\\n{' '.join(map(str, a))}\"\n\n    return \"NO\"",
        "test": "assert solution(\"8 3\\n\") == \"NO\"",
        "num_ids": 645
    },
    {
        "number": 4037,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(a, b):\n        lo, hi = 0, len(a)\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if a[mid] < b:\n                lo = mid + 1\n            else:\n                hi = mid\n        return lo\n\n    n, r = map(int, stdin.split())\n    projects = [list(map(int, input().split())) for _ in range(n)]\n    projects.sort(key=lambda x: x[0])\n\n    selected = []\n    for _, b in projects:\n        r += b\n        if r < 0:\n            break\n        selected.append((r, b))\n\n    max_size = len(selected)\n    for i in range(len(selected) - 1, -1, -1):\n        if selected[i][0] >= selected[i][1]:\n            max_size = i + 1\n            break\n\n    return str(max_size)",
        "test": "assert solution(\"3 2\\n300 -300\\n1 299\\n1 123\") == \"3\\n\"",
        "num_ids": 1223
    },
    {
        "number": 4038,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    numbers = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    def is_palindromic(matrix):\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] != matrix[n - i - 1][j]:\n                    return False\n                if matrix[i][j] != matrix[i][n - j - 1]:\n                    return False\n        return True\n\n    def backtrack(matrix, used):\n        if len(used) == n * n:\n            if is_palindromic(matrix):\n                return \"YES\"\n            return \"NO\"\n\n        row = len(used) // n\n        col = len(used) % n\n\n        for num in numbers:\n            if num not in used:\n                matrix[row][col] = num\n                used.append(num)\n\n                result = backtrack(matrix, used)\n                if result != \"NO\":\n                    return result\n\n                used.pop()\n                matrix[row][col] = 0\n\n        return \"NO\"\n\n    matrix = [[0] * n for _ in range(n)]\n    result = backtrack(matrix, [])\n\n    if result == \"YES\":\n        return \"YES\\n\" + \"\\n\".join(\" \".join(str(matrix[i][j]) for j in range(n)) for i in range(n))\n    return result",
        "test": "assert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\\n\") == \"NO\"",
        "num_ids": 1694
    },
    {
        "number": 4039,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.readline().split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().split())\n        projects.append((a, b))\n\n    projects.sort(key=lambda x: (-x[0], -x[1]))\n\n    for a, b in projects:\n        if r >= a:\n            r += b\n        else:\n            return \"NO\"\n\n    return \"YES\"\n",
        "test": "assert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\" ",
        "num_ids": 733
    },
    {
        "number": 4040,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def can_reach_end(a: List[int], d: int, c: List[int]) -> bool:\n        positions = [i for i, x in enumerate(a) if x != 0]\n        positions.append(len(a))\n\n        for i in range(len(positions) - 1):\n            if positions[i + 1] - positions[i] > d * 2 + c[a[positions[i]] - 1]:\n                return False\n\n        return True\n\n    def generate_sequence(a: List[int], c: List[int]) -> str:\n        sequence = []\n        current_platform = 0\n\n        for i, x in enumerate(a):\n            if x != current_platform:\n                current_platform = x\n                sequence.extend([current_platform] * c[current_platform - 1])\n\n        return ' '.join(map(str, sequence))\n\n    n, m, d = map(int, stdin.split()[0].split())\n    c = list(map(int, stdin.split()[1].split()))\n\n    a = [0] * (n + 2)\n    a[0] = 1\n    a[n + 1] = 1\n\n    for i in range(m):\n        a[c[i]:c[i] + i + 1] = [i + 2] * c[i]\n\n    if can_reach_end(a, d, c):\n        return \"YES\\n\" + generate_sequence(a, c)\n    else:\n        return \"NO\"",
        "test": "assert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\" ",
        "num_ids": 1464
    },
    {
        "number": 4041,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s_len, t_len = len(s), len(t)\n\n    if s == t:\n        return 0\n\n    for i in range(s_len):\n        for j in range(i, s_len):\n            if s[i:j + 1] == t:\n                return j - i + 1\n            if j - i + 1 > t_len:\n                break\n\n    return 0\n",
        "test": "assert solution(\"baaba\\nab\") == 2",
        "num_ids": 652
    },
    {
        "number": 4042,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    int1 = int(x // 1)\n    int2 = int((x - int(x)) * 10)\n    return f\"{int1} {int2}\"",
        "test": "assert solution(\"4.024922\") == \"9 9\\n\"",
        "num_ids": 417
    },
    {
        "number": 4043,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    \n    if d > n - 1:\n        return \"NO\"\n    \n    # create the root node\n    root = 1\n    # create the first level children of the root node\n    children = k - 1\n    # create the remaining nodes\n    remaining_nodes = n - children - 1\n    \n    # calculate the number of nodes in the next level\n    next_level_nodes = children * k\n    \n    # calculate the diameter of the tree\n    diameter = 1\n    while next_level_nodes > 0:\n        diameter += 1\n        remaining_nodes -= next_level_nodes\n        next_level_nodes = next_level_nodes * k\n        if remaining_nodes < 0:\n            return \"NO\"\n    \n    if diameter != d:\n        return \"NO\"\n    \n    # generate the tree\n    tree = []\n    for i in range(2, n + 1):\n        tree.append((i, i - 1))\n        children -= 1\n        if children == 0:\n            children = k - 1\n            tree.append((i, i - k))\n    \n    return \"YES\\n\" + \"\\n\".join(\" \".join(map(str, edge)) for edge in tree)",
        "test": "assert solution(\"6 2 3\") == \"NO\"",
        "num_ids": 1975
    },
    {
        "number": 4044,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = \"\"\n    for _ in range(a):\n        s += \"0\"\n    for _ in range(b):\n        s += \"1\"\n    s_list = list(s)\n    for _ in range(x):\n        index = random.randint(0, len(s_list) - 2)\n        if s_list[index] != s_list[index + 1]:\n            s_list[index], s_list[index + 1] = s_list[index + 1], s_list[index]\n    return \"\".join(s_list)",
        "test": "assert solution(5, 3, 6) == \"01010100\" ",
        "num_ids": 832
    },
    {
        "number": 4045,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    if s in t or t in s:\n        return \"NO\"\n\n    if s[0] == s[1]:\n        s = s[0] + t[0] + s[1] + t[1]\n    elif t[0] == t[1]:\n        t = s[0] + t[0] + s[1] + t[1]\n\n    if s[0] == t[0]:\n        res = s[0] + s[1] + t[1]\n    elif s[0] == t[1]:\n        res = s[0] + t[0] + s[1]\n    elif s[1] == t[0]:\n        res = t[0] + s[0] + s[1]\n    else:\n        res = t[1] + s[0] + s[1]\n\n    return \"YES\\n\" + res * n",
        "test": "assert solution(\"100000\\naa\\nbb\") == \"YES\\n\"",
        "num_ids": 937
    },
    {
        "number": 4046,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, *q = list(map(int, stdin.split()))\n    p = [0] * n\n    used = set()\n\n    for i in range(n - 1):\n        if not (1 <= q[i] + p[i] <= n) or (q[i] + p[i] in used):\n            return \"-1\"\n        p[i + 1] = q[i] + p[i]\n        used.add(p[i + 1])\n\n    if p[-1] != 0:\n        p[0] = 1\n        for i in range(1, n):\n            p[i] = p[i - 1] + q[i - 1]\n\n    return \" \".join(map(str, p))",
        "test": "assert solution(\"4\\n-1 2 2\\n\") == \"-1\"",
        "num_ids": 673
    },
    {
        "number": 4047,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    x = list(map(int, stdin.split('\\n')[1].split()))\n    x.sort()\n    count = 0\n    for i in range(1, n):\n        count += abs(x[i] - x[i-1])\n    return str(count)",
        "test": "assert solution(\"5\\n2 2 2 3 3\\n\") == \"2\"",
        "num_ids": 589
    },
    {
        "number": 4048,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    # Initialize the minimum number of moves needed to reach a square containing N\n    min_moves = float('inf')\n    \n    # Iterate through all possible squares (i,j)\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            # Calculate the value of the current square (i,j)\n            square_value = i * j\n            \n            # Check if the current square contains N\n            if square_value == N:\n                # Calculate the minimum number of moves needed to reach the square (i,j)\n                moves = i + j - 2\n                \n                # Update the minimum number of moves if necessary\n                if moves < min_moves:\n                    min_moves = moves\n                    \n    return str(min_moves)",
        "test": "assert solution(\"1000\") == 16",
        "num_ids": 547
    },
    {
        "number": 4049,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def count_wins(alice, bob):\n        wins = 0\n        for i in range(n):\n            if (alice[i] == \"R\" and bob[i] == \"S\") or (alice[i] == \"S\" and bob[i] == \"P\") or (alice[i] == \"P\" and bob[i] == \"R\"):\n                wins += 1\n        return wins\n\n    n, a, b = map(int, stdin.split())\n    alice = [\"R\"] * a[0] + [\"S\"] * a[1] + [\"P\"] * a[2]\n    bob = [\"R\"] * b[0] + [\"S\"] * b[1] + [\"P\"] * b[2]\n\n    min_wins = count_wins(alice, bob)\n    max_wins = min_wins + len(alice) - count_wins(bob, alice)\n\n    return f\"{min_wins} {max_wins}\"",
        "test": "assert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"",
        "num_ids": 945
    },
    {
        "number": 4050,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    blocks = []\n    max_sum = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            block_sum = sum(a[i:j + 1])\n            if block_sum > max_sum:\n                max_sum = block_sum\n                blocks = [(i, j)]\n            elif block_sum == max_sum:\n                blocks.append((i, j))\n\n    output = [str(len(blocks))]\n    for block in blocks:\n        output.append(' '.join(map(str, block)))\n\n    return '\\n'.join(output)",
        "test": "assert solution(\"4\\n1 1 1 1\\n\") == \"4\\n4 4\\n1 1\\n2 2\\n3 3\\n\"",
        "num_ids": 1274
    },
    {
        "number": 4051,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    for i in range(n):\n        if i < n - 1 and a[i] > a[i + 1] and a[i] - a[i + 1] >= 2:\n            return \"NO\"\n        elif i > 0 and a[i] < a[i - 1] and a[i - 1] - a[i] >= 2:\n            return \"NO\"\n\n    return \"YES\"",
        "test": "assert solution(\"3\\n1 2 3\") == \"YES\"",
        "num_ids": 602
    },
    {
        "number": 4052,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    t = stdin.split(\"\\n\")[2]\n\n    moves = []\n    for i in range(n - 1, 0, -1):\n        if s[i] != t[i]:\n            for j in range(i, 0, -1):\n                if s[j] == t[i]:\n                    moves.append(j)\n                    temp = list(s)\n                    temp[j], temp[j - 1] = temp[j - 1], temp[j]\n                    s = \"\".join(temp)\n                    break\n\n    if s != t:\n        return \"-1\"\n\n    output = [len(moves)] + moves[::-1]\n    return \"\\n\".join(map(str, output))",
        "test": "assert solution(\"4\\nabcd\\naccd\") == \"-1\\n\"",
        "num_ids": 975
    },
    {
        "number": 4053,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def is_prefix(s1: str, s2: str) -> bool:\n        return s1 == s2[:len(s1)]\n\n    def is_suffix(s1: str, s2: str) -> bool:\n        return s1 == s2[-len(s1):]\n\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(2 * n - 2)]\n\n    prefixes = [set() for _ in range(n)]\n    suffixes = [set() for _ in range(n)]\n\n    for s in strings:\n        for i in range(1, n):\n            if is_prefix(s, strings[i]):\n                prefixes[len(s)].add(s)\n            if is_suffix(s, strings[i]):\n                suffixes[len(s)].add(s)\n\n    result = []\n    for i in range(1, n):\n        if len(prefixes[i]) == 1 and len(suffixes[i]) == 1:\n            result.append('P')\n        else:\n            result.append('S')\n\n    return ''.join(result)",
        "test": "assert solution(\"2\\na\\nc\\n\") == \"PS\"",
        "num_ids": 943
    },
    {
        "number": 4054,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    line1 = list(map(int, stdin.split()))\n    output = 0\n    for i in range(len(line1)):\n        if line1[i] != 0 and line1[i] % 2 == 0:\n            output += 1\n    return str(output)",
        "test": "assert solution('1 2 3 4 5 6 7 8 9 10') == '5'",
        "num_ids": 408
    },
    {
        "number": 4055,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    flats = list(map(int, stdin.split('\\n')[1].split()))\n\n    disturbed_flats = []\n    for i in range(1, n - 1):\n        if flats[i - 1] == flats[i + 1] == 1 and flats[i] == 0:\n            disturbed_flats.append(i)\n\n    return str(len(disturbed_flats))",
        "test": "assert solution(\"5\\n1 1 0 0 0\\n\") == \"0\"",
        "num_ids": 666
    },
    {
        "number": 4056,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n\n    lcm = a[0]\n    for i in range(1, n):\n        lcm = (lcm * a[i]) // gcd(lcm, a[i])\n\n    return str(lcm)\n\ndef",
        "test": "assert solution(\"2\\n1 1\") == \"1\\n\"",
        "num_ids": 710
    },
    {
        "number": 4057,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    coins = list(map(int, stdin.split('\\n')[1].split()))\n    pockets = []\n\n    for coin in coins:\n        if coin not in [pocket[0] for pocket in pockets]:\n            pockets.append([coin])\n        else:\n            index = [pocket[0] for pocket in pockets].index(coin)\n            pockets[index].append(coin)\n\n    return str(len(pockets))",
        "test": "assert solution(\"1\\n100\") == \"1\"",
        "num_ids": 450
    },
    {
        "number": 4058,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0:2])\n    house = list(map(int, stdin.split()[2:]))\n\n    # Initialize the number of heaters needed and the current position of the heater\n    heaters_needed = 0\n    current_heater = 0\n\n    # Iterate through the house\n    for i in range(n):\n        # If there is a heater at the current position, move to the next position\n        if house[i] == 1:\n            current_heater = i\n\n        # If there is no heater at the current position and the position is not warmed up\n        if house[i] == 0 and i - current_heater > r:\n            # Check if there is a heater within the range of the current position\n            heater_found = False\n            for j in range(current_heater + 1, i - r + 1):\n                if house[j] == 1:\n                    current_heater = j\n                    heater_found = True\n                    break\n\n            # If there is no heater within the range, switch on a new heater\n            if not heater_found:\n                current_heater = i\n                heaters_needed += 1\n\n    # Check if all positions are warmed up\n    if all(house):\n        return str(heaters_needed)\n    else:\n        return \"-1\"",
        "test": "assert solution(\"5 10\\n0 0 0 0 0\") == \"-1\"",
        "num_ids": 1173
    },
    {
        "number": 4059,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            c = n - a * b\n            if c > 0:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"3\") == \"3\"",
        "num_ids": 386
    },
    {
        "number": 4060,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    regular_count = 0\n\n    for i in range(n):\n        if s[i] == '(':\n            if i + 1 < n and s[i + 1] == ')':\n                regular_count += 1\n        elif s[i] == ')':\n            if i > 0 and s[i - 1] == '(':\n                regular_count += 1\n\n    return regular_count",
        "test": "assert solution(\"1\\n)\") == 0",
        "num_ids": 550
    },
    {
        "number": 4061,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    s_len, t_len = len(s), len(t)\n\n    for i in range(s_len - t_len + 1):\n        if s[i:i + t_len] == t:\n            return i\n\n    return \"0\"",
        "test": "assert solution(\"baaba\\nab\") == 2",
        "num_ids": 682
    },
    {
        "number": 4062,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    max_product = max(a * d, b * d, a * c, b * c)\n    return str(max_product)",
        "test": "assert solution(\"1 2 1 1\") == \"2\"",
        "num_ids": 469
    },
    {
        "number": 4063,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    N, difficulties = stdin.split('\\n')\n    N = int(N)\n    difficulties = list(map(int, difficulties.split()))\n    difficulties.sort(reverse=True)\n\n    count = 0\n    for K in range(1, max(difficulties) + 1):\n        arc_count = 0\n        abc_count = 0\n        for difficulty in difficulties:\n            if difficulty >= K:\n                arc_count += 1\n            else:\n                abc_count += 1\n        if arc_count == abc_count:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"4\\n1 2 3 4\") == \"1\"    # Sample Input 3",
        "num_ids": 801
    },
    {
        "number": 4064,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r, a = map(int, stdin.split())\n    a = sorted(a)\n    count = 0\n    prev_end = 0\n\n    for i in range(n):\n        if a[i] - 1 >= l and prev_end < l:\n            count += 1\n            prev_end = a[i] - 1\n        elif a[i] >= l and prev_end < l:\n            count += 1\n            prev_end = a[i]\n        else:\n            prev_end = max(prev_end, a[i])\n\n        if prev_end > r:\n            break\n\n    return str(count)\n",
        "test": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\" ",
        "num_ids": 475
    },
    {
        "number": 4065,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    difficulties = list(map(int, stdin.split('\\n')[1].split()))\n\n    difficulties.sort()\n    max_problems = 0\n    problems = []\n\n    for i in range(n):\n        problems.append([difficulties[i], i])\n\n    for i in range(n):\n        if i > 0 and problems[i][0] == problems[i - 1][0]:\n            continue\n\n        left = i + 1\n        right = n - 1\n\n        while left <= right:\n            mid = (left + right) // 2\n\n            if problems[mid][0] <= problems[i][0] * 2:\n                left = mid + 1\n            else:\n                right = mid - 1\n\n        max_problems = max(max_problems, mid - i)\n\n    return str(max_problems)",
        "test": "assert solution(\"5\\n2 10 50 110 250\") == \"1\"",
        "num_ids": 1046
    },
    {
        "number": 4066,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    lcm = lambda x, y: (x * y) // gcd(x, y)\n    gcd = lambda x, y: x if y == 0 else gcd(y, x % y)\n\n    min_lcm = float('inf')\n    min_i, min_j = -1, -1\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if lcm(a[i], a[j]) < min_lcm:\n                min_lcm = lcm(a[i], a[j])\n                min_i, min_j = i + 1, j + 1\n\n    return f\"{min_i} {min_j}\\n\"",
        "test": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\\n\"",
        "num_ids": 897
    },
    {
        "number": 4067,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    # Count the occurrences of each character\n    count = {'0': 0, '1': 0, '2': 0}\n    for char in s:\n        count[char] += 1\n\n    # Calculate the difference between each character and the target count\n    diff = {'0': count['1'] + count['2'] - count['0'],\n            '1': count['2'] - count['1'] + count['0'] - count['2'],\n            '2': count['0'] - count['2'] + count['1'] - count['0']}\n\n    # Find the minimum difference character\n    min_char = min(diff, key=diff.get)\n\n    # Replace the minimum difference character with the target character\n    if min_char == '0':\n        target_char = '1'\n    elif min_char == '1':\n        target_char = '2'\n    else:\n        target_char = '0'\n\n    # Replace the minimum difference character with the target character\n    for i in range(n):\n        if s[i] == min_char:\n            s = s[:i] + target_char + s[i + 1:]\n\n    return s",
        "test": "assert solution(\"6\\n120110\") == \"120120\" ",
        "num_ids": 1051
    },
    {
        "number": 4068,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()))[2:]\n    \n    dp = [0] * (N + 1)\n    dp[0] = 1\n    dp[1] = 1\n    \n    for i in range(2, N + 1):\n        dp[i] = dp[i - 1]\n        if i not in a:\n            dp[i] += dp[i - 2]\n            dp[i] %= 1000000007\n    \n    return str(dp[N])",
        "test": "assert solution(\"100000 99999\\n99998\\n99997\\n99996\\n99995\\n99994\\n99993\\n99992\\n99991\\n99990\\n\") == \"0\"",
        "num_ids": 909
    },
    {
        "number": 4069,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    if D == 1:\n        return str(abs(X))\n    else:\n        if X % D == 0:\n            return str(abs(X - K * D))\n        else:\n            if X > 0:\n                return str(abs(X - X % D - K * D))\n            else:\n                return str(abs(X + X % D - K * D))",
        "test": "assert solution(\"-1000000000000000000 1000000000000000000 1000000000000000000\") == \"1000000000000000000\"",
        "num_ids": 749
    },
    {
        "number": 4070,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = (n * 3) + 1\n        count += 1\n    return str(count)",
        "test": "assert solution(\"571576\") == 10",
        "num_ids": 368
    },
    {
        "number": 4071,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    result = 1\n    for i in range(1, a + 1):\n        result *= i\n    return str(result)",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 258
    },
    {
        "number": 4072,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 10 == 0:\n        return \"0\"\n    else:\n        return \"1\"",
        "test": "assert solution(\"927\") == \"1\"",
        "num_ids": 286
    },
    {
        "number": 4073,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == 10:\n                    count += 1\n\n    return str(count)",
        "test": "assert solution(\"10\\n10 9 8 7 6 5 4 3 2 1\") == \"10\"",
        "num_ids": 538
    },
    {
        "number": 4074,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    result = []\n    for i in range(1, t + 1):\n        n, k = map(int, lines[i].split())\n        result.append(n // k + (n % k > 0))\n    return '\\n'.join(map(str, result))",
        "test": "assert solution('5\\n8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733') == '2\\n8\\n1\\n999999733\\n1'",
        "num_ids": 560
    },
    {
        "number": 4075,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    def evaluate_bulb(switches: List[int], p: int) -> bool:\n        count = sum(switches)\n        return count % 2 == p\n\n    def count_combinations(switch_counts: List[int], bulb_switches: List[List[int]], bulb_states: List[int]) -> int:\n        if not switch_counts:\n            return int(all(evaluate_bulb(bulb_switches[i], bulb_states[i]) for i in range(len(bulb_switches))))\n\n        count = 0\n        for combination in itertools.product([0, 1], repeat=switch_counts[0]):\n            new_bulb_states = bulb_states.copy()\n            new_bulb_switches = [switches.copy() for switches in bulb_switches]\n            for i in range(switch_counts[0]):\n                if combination[i] == 1:\n                    for j in range(len(new_bulb_switches)):\n                        new_bulb_switches[j][i] = 1\n                else:\n                    for j in range(len(new_bulb_switches)):\n                        new_bulb_switches[j][i] = 0\n\n            count += count_combinations(switch_counts[1:], new_bulb_switches, new_bulb_states)\n\n        return count\n\n    input_lines = stdin.strip().split('\\n')\n    N, M = map(int, input_lines[0].split())\n    bulb_switches = []\n    bulb_states = []\n\n    for i in range(1, M + 1):\n        line = list(map(int, input_lines[i].split()))\n        bulb_switches.append(line[1:])\n        bulb_states.append(line[0])\n\n    switch_counts = [len(switches) for switches in bulb_switches]\n\n    return str(count_combinations(switch_counts, bulb_switches, bulb_states))",
        "test": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\" ",
        "num_ids": 1350
    },
    {
        "number": 4076,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n\n    # Calculate the angle between the hour and minute hands\n    angle = (30 * M) / 60 + (30 * H)\n\n    # Calculate the distance between the two endpoints\n    distance = abs(A * sin(radians(angle)) - B * sin(radians(angle - 90)))\n\n    return f\"{distance:.15f}\"",
        "test": "assert solution(\"1 1 0 30\") == \"1.8000000000000000000\"",
        "num_ids": 935
    },
    {
        "number": 4077,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    a.sort()\n\n    count = 0\n    for l in range(1, n + 1):\n        for r in range(l, n + 1):\n            if a[(l + r) // 2] == m:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == 97",
        "num_ids": 669
    },
    {
        "number": 4078,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n\n    # Initialize the values\n    d = 0\n    q = 0\n    c = []\n\n    # Iterate through all possible subsets of segments\n    for subset in range(2 ** m):\n        # Choose the segments in the current subset\n        chosen_segments = [segments[i] for i in range(m) if (subset >> i) & 1]\n\n        # Update the array\n        b = a.copy()\n        for segment in chosen_segments:\n            for i in range(segment[0] - 1, segment[1]):\n                b[i] -= 1\n\n        # Calculate the difference\n        diff = max(b) - min(b)\n\n        # Update the maximum values\n        if diff > d:\n            d = diff\n            q = len(chosen_segments)\n            c = [i + 1 for i in range(m) if (subset >> i) & 1]\n\n    # Construct the output\n    output = [str(d), str(q)] + [str(x) for x in c]\n    return \"\\n\".join(output) + \"\\n\"",
        "test": "assert solution(\"1 0\\n1000000\") == \"0\\n0\\n\"",
        "num_ids": 1491
    },
    {
        "number": 4079,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    for i in range(1, n+1):\n        s = lines[i]\n        if len(s) == 1:\n            print(\"Yes\")\n            continue\n        s = sorted(s)\n        if len(s) != len(set(s)):\n            print(\"No\")\n            continue\n        for j in range(1, len(s)):\n            if ord(s[j]) - ord(s[j-1]) != 1:\n                print(\"No\")\n                break\n        else:\n            print(\"Yes\")\n\nstdin = \"\"\"8\nfced\nxyz\nr\ndabcef\naz\naa\nbad\nbabc\"\"\"\n\nsolution(stdin) ",
        "test": "assert solution(\"8\\nfced\\nxyz\\nr\\ndabcef\\naz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"",
        "num_ids": 674
    },
    {
        "number": 4080,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    def apply_segments(a, segments):\n        return [max(0, b - 1) for b in a]\n\n    def segment_value(a, segment):\n        return max(a[segment[0] - 1:segment[1]]) - min(a[segment[0] - 1:segment[1]])\n\n    def get_max_segment_value(a, segments):\n        max_value = 0\n        max_segments = []\n        for i, segment in enumerate(segments):\n            value = segment_value(a, segment)\n            if value > max_value:\n                max_value = value\n                max_segments = [i]\n            elif value == max_value:\n                max_segments.append(i)\n        return max_value, max_segments\n\n    def get_output(d, q, c):\n        return (\n            f\"{d}\\n{q}\\n{' '.join(map(str, c))}\"\n        )\n\n    stdin_list = stdin.strip().split('\\n')\n    n, m = map(int, stdin_list[0].split())\n    a = list(map(int, stdin_list[1].split()))\n    segments = [list(map(int, stdin_list[i + 2].split())) for i in range(m)]\n\n    max_value, max_segments = get_max_segment_value(a, segments)\n    chosen_segments = [segments[i] for i in max_segments]\n\n    b = apply_segments(a, chosen_segments)\n    d = max(b) - min(b)\n    q = len(chosen_segments)\n    c = max_segments\n\n    return get_output(d, q, c)",
        "test": "assert solution(\"1 0\\n1000000\\n\") == \"0\\n0\\n\"",
        "num_ids": 1654
    },
    {
        "number": 4081,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort()\n\n    moves = []\n    left = 0\n    right = n - 1\n\n    for i in range(n):\n        if left <= right and a[left] < a[right]:\n            moves.append('L')\n            left += 1\n        else:\n            moves.append('R')\n            right -= 1\n\n    return str(n) + '\\n' + ''.join(moves)",
        "test": "assert solution('4\\n1 2 4 3') == '4\\nLLRL', 'Example 4'",
        "num_ids": 1025
    },
    {
        "number": 4082,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    def increasing_subarray(arr: List[int]) -> int:\n        max_length = 0\n        current_length = 1\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i - 1]:\n                current_length += 1\n            else:\n                max_length = max(max_length, current_length)\n                current_length = 1\n        max_length = max(max_length, current_length)\n        return max_length\n\n    max_length = increasing_subarray(a)\n\n    for i in range(n):\n        removed_element = a.pop(i)\n        max_length = max(max_length, increasing_subarray(a))\n        a.insert(i, removed_element)\n\n    return str(max_length)",
        "test": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"",
        "num_ids": 944
    },
    {
        "number": 4083,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    if a.count(max(a)) >= k:\n        return \"0\"\n\n    a.sort()\n    count = 0\n\n    for i in range(n - 1, -1, -1):\n        if a[i] == 0:\n            continue\n\n        if n - i >= k - count:\n            count += n - i\n            break\n        else:\n            count += 1\n            a[i] //= 2\n\n    return str(count)",
        "test": "assert solution(\"5 3\\n1 2 3 3 3\") == 0",
        "num_ids": 727
    },
    {
        "number": 4084,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    blue_count = N // (A + B) * A\n    remaining_balls = N % (A + B)\n    if remaining_balls <= A:\n        blue_count += remaining_balls\n    else:\n        blue_count += A\n    return str(blue_count)",
        "test": "assert solution(\"8 3 4\") == \"4\"",
        "num_ids": 802
    },
    {
        "number": 4085,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_x(divisors):\n        divisors = sorted(divisors)\n        n = len(divisors)\n        for i in range(n - 1):\n            if divisors[i] * divisors[i + 1] > sum(divisors):\n                return -1\n        x = 1\n        for d in divisors:\n            x *= d\n        return x\n\n    queries = stdin.strip().split('\\n')[1:]\n    result = []\n    for query in queries:\n        n, divisors = map(int, query.strip().split())\n        if n == 1:\n            result.append(2)\n        else:\n            result.append(find_min_x(divisors))\n\n    return '\\n'.join(map(str, result))\n",
        "test": "assert solution(\"2\\n8\\n8 2 12 6 4 24 16 3\\n1\\n2\\n\") == \"48\\n4\\n\" ",
        "num_ids": 928
    },
    {
        "number": 4086,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    unique_elements = []\n    for i in range(n - 1, -1, -1):\n        if a[i] not in unique_elements:\n            unique_elements.append(a[i])\n\n    output = [str(len(unique_elements))]\n    output.append(' '.join(map(str, unique_elements)))\n\n    return '\\n'.join(output)",
        "test": "assert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"",
        "num_ids": 735
    },
    {
        "number": 4087,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def is_interesting(n: int) -> bool:\n        return sum(map(int, str(n))) % 4 == 0\n\n    a = int(stdin)\n    if is_interesting(a):\n        return str(a)\n\n    n = a + 1\n    while not is_interesting(n):\n        n += 1\n\n    return str(n)",
        "test": "assert solution(\"432\") == \"435\"",
        "num_ids": 542
    },
    {
        "number": 4088,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    result = []\n\n    for _ in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline())\n        b = [int(x) for x in stdin.readline().split()]\n\n        t = []\n        for i in range(m):\n            if b[i] == 0:\n                t.append(s[i])\n            else:\n                for j in range(i + 1, m):\n                    if b[i] == j - i:\n                        t.append(s[j])\n                        break\n\n        result.append(\"\".join(t))\n\n    return \"\\n\".join(result)\n",
        "test": "assert solution(\"ecoosdcefr\\n10\\n38 13 24 14 11 5 3 24 17 0\") == \"codeforces\" ",
        "num_ids": 1136
    },
    {
        "number": 4089,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    names = []\n    for i in range(1, 27):\n        names.append(chr(96 + i))\n    for i in range(27, 703):\n        names.append(chr(96 + i // 26) + chr(96 + i % 26))\n    for i in range(703, 18278):\n        names.append(chr(96 + i // 676) + chr(96 + (i % 676) // 26) + chr(96 + i % 26))\n    for i in range(18278, 475255):\n        names.append(chr(96 + i // 17576) + chr(96 + (i % 17576) // 676) + chr(96 + (i % 676) // 26) + chr(96 + i % 26))\n    for i in range(475255, N + 1):\n        k = i - 475254\n        name = \"\"\n        while k > 0:\n            name += chr(96 + k % 26)\n            k //= 26\n        names.append(name)\n    return names[N - 1]",
        "test": "assert solution(1) == \"a\"",
        "num_ids": 1017
    },
    {
        "number": 4090,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = stdin.readline().strip().split()\n\n    # Function to check if two segments of words are equal\n    def is_equal(i1, j1, i2, j2):\n        if j1 - i1 != j2 - i2:\n            return False\n        for t in range(j1 - i1):\n            if words[i1 + t] != words[i2 + t]:\n                return False\n        return True\n\n    # Function to find all non-intersecting equal segments\n    def find_segments(n):\n        segments = []\n        for i1 in range(n):\n            for j1 in range(i1 + 1, n + 1):\n                for i2 in range(j1, n):\n                    for j2 in range(i2 + 1, n + 1):\n                        if is_equal(i1, j1, i2, j2):\n                            segments.append((i1, j1, i2, j2))\n        return segments\n\n    # Find all non-intersecting equal segments\n    segments = find_segments(n)\n\n    # Function to calculate the length of the text after abbreviation\n    def abbreviation_length(segments):\n        length = 0\n        i = 0\n        while i < n:\n            found = False\n            for j1, j2, k1, k2 in segments:\n                if i == j1:\n                    length += 1\n                    i = j2\n                    found = True\n                    break\n            if not found:\n                length += len(words[i])\n                i += 1\n        return length\n\n    # Calculate the minimum length of the text after at most one abbreviation\n    min_length = len(\"\".join(words))\n    for i1, j1, i2, j2 in segments:\n        new_words = words[:i1] + [words[i1].upper()] + words[j1:i2] + [words[i2].upper()] + words[j2:]\n        min_length = min(min_length, abbreviation_length([(i1, j1, i2, j2)]))\n\n    return min_length",
        "test": "assert solution(6, \"aa bb aa aa bb bb\") == 11 ",
        "num_ids": 1437
    },
    {
        "number": 4091,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_profit(n: int, k: int, difficulties: List[int]) -> Tuple[int, List[int]]:\n        max_profit = 0\n        max_profit_distribution = []\n        for i in range(1, n - k + 2):\n            profit = sum(difficulties[:i])\n            remaining_profit = sum(difficulties[i:])\n            remaining_days = k - 1\n            if profit > max_profit:\n                max_profit = profit\n                max_profit_distribution = [i] + [1] * remaining_days\n            for j in range(i + 1, n - remaining_days + 1):\n                profit += sum(difficulties[i:j]) + remaining_profit\n                remaining_profit -= sum(difficulties[i:j])\n                if profit > max_profit:\n                    max_profit = profit\n                    max_profit_distribution = [i] + [j - i] * remaining_days\n        return max_profit, max_profit_distribution\n\n    n, k = map(int, stdin.split()[0:2])\n    difficulties = list(map(int, stdin.split()[2:]))\n    max_profit, max_profit_distribution = find_max_profit(n, k, difficulties)\n    return f\"{max_profit}\\n\" + \" \".join(map(str, max_profit_distribution)) + \"\\n\"",
        "test": "assert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\"",
        "num_ids": 1570
    },
    {
        "number": 4092,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    def has_zero_sum(a: List[int]) -> bool:\n        s = 0\n        seen = {0: -1}\n        for i, num in enumerate(a):\n            s += num\n            if s in seen:\n                return True\n            seen[s] = i\n        return False\n\n    count = 0\n    i = 0\n    while i < n:\n        if has_zero_sum(a[i:]):\n            count += 1\n            i += 2\n        else:\n            i += 1\n\n    return str(count)",
        "test": "assert solution(\"5\\n4 -2 3 -9 2\\n\") == \"0\"",
        "num_ids": 1062
    },
    {
        "number": 4093,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def max_sum_diff(n, m):\n        if n == 1:\n            return 0\n        min_value = m // n\n        max_value = min_value + 1\n        max_diff = 0\n        for i in range(n):\n            if i < n - 1:\n                max_diff += max_value - min_value\n            else:\n                max_diff += m - (n - 1) * max_value\n        return max_diff\n\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    outputs = []\n    for i in range(1, t + 1):\n        n, m = map(int, lines[i].split())\n        outputs.append(max_sum_diff(n, m))\n    return '\\n'.join(map(str, outputs))",
        "test": "assert solution(\"5\\n1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"",
        "num_ids": 857
    },
    {
        "number": 4094,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    i = 1\n    while True:\n        if K * i % 7 == 0:\n            return str(i)\n        i += 1\n    return \"-1\" ",
        "test": "assert solution(25) == 3",
        "num_ids": 416
    },
    {
        "number": 4095,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    p = list(map(int, stdin.split('\\n')[1].split()))\n    count = 0\n\n    for l in range(n):\n        for r in range(l, n):\n            p_sorted = sorted(p[l:r + 1])\n            median = p_sorted[(r - l) // 2] if (r - l) % 2 == 0 else p_sorted[(r - l) // 2 + 1]\n            if median == m:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\" ",
        "num_ids": 791
    },
    {
        "number": 4096,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    \n    a.sort(reverse=True)\n    \n    total_pages = 0\n    days = 0\n    \n    for i in range(n):\n        if total_pages >= m:\n            break\n        \n        if i > 0:\n            days += 1\n        \n        pages = a[i] - i + 1\n        total_pages += pages\n        \n        if total_pages > m:\n            total_pages -= pages\n            break\n    \n    if total_pages < m:\n        return -1\n    \n    return str(days + 1)",
        "test": "assert solution(\"5 16\\n5 5 5 5 5\") == \"2\"",
        "num_ids": 902
    },
    {
        "number": 4097,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    b = list(map(int, stdin.split('\\n')[1].split()))\n\n    if n == 1 or n == 2:\n        return \"0\"\n\n    diff = set()\n    for i in range(1, n):\n        diff.add(b[i] - b[i - 1])\n\n    if len(diff) == 1:\n        return \"0\"\n\n    min_diff = min(diff)\n    max_diff = max(diff)\n\n    if max_diff - min_diff > 1:\n        return \"-1\"\n\n    if max_diff - min_diff == 1:\n        count = 0\n        for i in range(1, n):\n            if b[i] - b[i - 1] == min_diff:\n                count += 1\n            elif b[i] - b[i - 1] == max_diff:\n                count += 1\n        return str(count)\n\n    return \"0\"",
        "test": "assert solution(\"3\\n14 5 1\\n\") == \"-1\"",
        "num_ids": 964
    },
    {
        "number": 4098,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def is_balanced(team):\n        for i in range(len(team)):\n            for j in range(i + 1, len(team)):\n                if abs(team[i] - team[j]) > 5:\n                    return False\n        return True\n\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    a.sort(reverse=True)\n    teams = []\n    total_students = 0\n\n    for i in range(k):\n        team = []\n        for j in range(n - total_students):\n            if is_balanced(team + [a[j]]):\n                team.append(a[j])\n                total_students += 1\n            else:\n                break\n        if team:\n            teams.append(team)\n        else:\n            break\n\n    return total_students ",
        "test": "assert solution(\"4 4\\n1 10 100 1000\") == \"4\"",
        "num_ids": 870
    },
    {
        "number": 4099,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    input_list = list(map(int, stdin.split()))\n    N, K, M = input_list[0], input_list[1], input_list[2]\n    A = input_list[3:]\n\n    # Calculate current average score\n    current_avg = sum(A) / (N - 1)\n\n    # Check if goal is achievable\n    if current_avg >= M:\n        return \"-1\"\n\n    # Calculate minimum points required for final subject\n    min_points = (N * M - sum(A)) / N\n\n    # Check if minimum points required is within the given range\n    if min_points <= K:\n        return str(int(min_points))\n    else:\n        return \"-1\"",
        "test": "assert solution(\"3 10 7\\n8 8 7\") == \"-1\"",
        "num_ids": 677
    },
    {
        "number": 4100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q, *A_i = list(map(int, stdin.split()))\n    scores = [K] * N\n\n    for i in range(Q):\n        player = A_i[i]\n        scores[player - 1] -= 1\n        for j in range(N):\n            if j != player - 1:\n                scores[j] += 1\n\n    survived = [\"No\"] * N\n    for i in range(N):\n        if scores[i] > 0:\n            survived[i] = \"Yes\"\n\n    return \"\\n\".join(survived)",
        "test": "assert solution(\"5 0 5\\n2\\n4\\n1\\n3\\n2\") == \"Yes\\nYes\\nNo\\nYes\\nYes\"",
        "num_ids": 750
    },
    {
        "number": 4101,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    matrix = [[int(x) for x in stdin.split()[2 + i * m:2 + (i + 1) * m]] for i in range(n)]\n\n    def is_sorted(matrix):\n        return all(matrix[i][j] <= matrix[i][j + 1] for i in range(n) for j in range(m - 1))\n\n    def sort(matrix):\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == 1:\n                    invert_row(matrix, i)\n                    invert_column(matrix, j)\n\n    def invert_row(matrix, i):\n        for j in range(m):\n            matrix[i][j] = 1 - matrix[i][j]\n\n    def invert_column(matrix, j):\n        for i in range(n):\n            matrix[i][j] = 1 - matrix[i][j]\n\n    if is_sorted(matrix):\n        return \"YES\\n0\" * n + \"\\n0\" * m\n\n    sort(matrix)\n    row_operations = \"\".join(str(int(not all(matrix[i]))) for i in range(n))\n    column_operations = \"\".join(str(int(not all(matrix[i][j] for i in range(n)))) for j in range(m))\n\n    if is_sorted(matrix):\n        return \"YES\\n\" + row_operations + \"\\n\" + column_operations\n    else:\n        return \"NO\"",
        "test": "assert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"",
        "num_ids": 1452
    },
    {
        "number": 4102,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    digits = [int(x) for x in str(num)]\n    for i in range(len(digits)):\n        if i == len(digits) - i - 1:\n            break\n        if digits[i] != digits[len(digits) - i - 1]:\n            return \"No\"\n    return \"Yes\"",
        "test": "assert solution(\"373\") == \"Yes\"",
        "num_ids": 387
    },
    {
        "number": 4103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split()[0].split())\n    s = list(map(int, stdin.split()[1].split()))\n\n    battery_usage = 0\n    accumulator_usage = 0\n    current_battery = b\n    current_accumulator = a\n\n    for i in range(n):\n        if s[i] == 1:\n            if current_battery > 0:\n                current_battery -= 1\n                battery_usage += 1\n            elif current_accumulator > 0:\n                current_accumulator -= 1\n                accumulator_usage += 1\n            else:\n                break\n        else:\n            if current_battery > 0:\n                current_battery -= 1\n                battery_usage += 1\n            elif current_accumulator > 0:\n                current_accumulator -= 1\n                accumulator_usage += 1\n                current_battery = min(b, current_battery + 1)\n            else:\n                break\n\n    return str(battery_usage + accumulator_usage)",
        "test": "assert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\" ",
        "num_ids": 876
    },
    {
        "number": 4104,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # split the input string into a list of operands and operators\n    tokens = [token for token in stdin]\n\n    # initialize the result variable to the first operand\n    result = int(tokens[0])\n\n    # iterate through the tokens, updating the result based on the operator\n    for i in range(1, len(tokens), 2):\n        if tokens[i] == '+':\n            result += int(tokens[i + 1])\n        elif tokens[i] == '-':\n            result -= int(tokens[i + 1])\n\n    # return the result as a string\n    return str(result)\n",
        "test": "assert solution('8-7+6-5+4-3+2-1-0') == '4'",
        "num_ids": 712
    },
    {
        "number": 4105,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    if n % 2 == 1:\n        return \"NO\"\n\n    valid_colors = [i for i in range(1, k + 1)]\n    for i in range(1, n, 2):\n        valid_colors_m = valid_colors.copy()\n        valid_colors_w = valid_colors.copy()\n        if i > 1:\n            valid_colors_m.remove(b[i - 2])\n            valid_colors_w.remove(g[i - 2])\n        b[i - 1] = valid_colors_m[0]\n        g[i - 1] = valid_colors_w[0]\n        b[i] = valid_colors_w[1]\n        g[i] = valid_colors_m[1]\n\n    output = [\"YES\"]\n    for i in range(n):\n        output.append(f\"{b[i]} {g[i]}\")\n\n    return \"\\n\".join(output)\n",
        "test": "assert solution(\"13 4\\n\") == \"NO\" ",
        "num_ids": 1237
    },
    {
        "number": 4106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    input_list = list(map(int, stdin.split()))\n    n, k, x = input_list[0:3]\n    beauty_values = input_list[3:]\n\n    # calculate total sum of beauty values\n    total_sum = sum(beauty_values)\n\n    # calculate maximum sum that can be obtained\n    max_sum = 0\n    for i in range(n - k + 1):\n        segment_sum = sum(beauty_values[i:i + k])\n        max_sum = max(max_sum, segment_sum)\n\n    # check if it is possible to repost pictures\n    if max_sum * x <= total_sum:\n        return max_sum * x\n    else:\n        return -1",
        "test": "assert solution(\"4 3 1\\n1 100 1 1\") == \"100\"",
        "num_ids": 865
    },
    {
        "number": 4107,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[2]\n\n    total_cost = 0\n    connected_rooms = set()\n    for i in range(n):\n        if s[i] == '1':\n            for j in range(max(1, i - k), min(n, i + k) + 1):\n                connected_rooms.add(j)\n            total_cost += i\n\n    unconnected_rooms = set(range(1, n + 1)) - connected_rooms\n    total_cost += sum(unconnected_rooms)\n\n    return str(total_cost) ",
        "test": "assert solution(\"6 1\\n000000\") == \"21\"",
        "num_ids": 775
    },
    {
        "number": 4108,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    if len(s) != len(t):\n        return \"No\"\n\n    s_freq = [0] * 26\n    t_freq = [0] * 26\n\n    for char in s:\n        s_freq[ord(char) - ord('a')] += 1\n\n    for char in t:\n        t_freq[ord(char) - ord('a')] += 1\n\n    s_freq.sort()\n    t_freq.sort()\n\n    if s_freq == t_freq:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution(\"hello\\nworld\") == \"No\"",
        "num_ids": 619
    },
    {
        "number": 4109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = map(int, stdin.split())\n    A = [list(map(int, input().split())) for _ in range(N)]\n    C = [int(input()) for _ in range(N)]\n    dp = [[float('inf')] * (X + 1) for _ in range(N + 1)]\n    dp[0][0] = 0\n    for i in range(N):\n        for j in range(X + 1):\n            for k in range(M):\n                if j + A[i][k] <= X:\n                    dp[i + 1][j + A[i][k]] = min(dp[i + 1][j + A[i][k]], dp[i][j] + C[i])\n    return \"No\" if dp[N][X] == float('inf') else dp[N][X]",
        "test": "assert solution(\"1 1\\n10 1 2\\n\") == \"No\"",
        "num_ids": 1675
    },
    {
        "number": 4110,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    input_list = list(map(int, stdin.strip().split()))\n    D, G = input_list[0], input_list[1]\n    input_list = input_list[2:]\n    p_list = [input_list[i] for i in range(0, len(input_list), 2)]\n    c_list = [input_list[i] for i in range(1, len(input_list), 2)]\n\n    # Calculate minimum number of problems to solve\n    total_score = 0\n    num_problems = 0\n    for i in range(D):\n        while p_list[i] > 0:\n            total_score += 100 * (i + 1)\n            p_list[i] -= 1\n            num_problems += 1\n            if total_score >= G:\n                return str(num_problems)\n\n    # If the objective is not achievable with the given constraints\n    return \"Impossible\"",
        "test": "assert solution(\"2 700\\n3 500\\n5 800\") == 3",
        "num_ids": 837
    },
    {
        "number": 4111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    weights = list(map(int, stdin.split('\\n')[1].split()))\n\n    good_candies = 0\n\n    for i in range(1, n):\n        even_sum = sum(weights[:i:2])\n        odd_sum = sum(weights[1:i:2])\n\n        if even_sum == odd_sum:\n            good_candies += 1\n\n    return str(good_candies)",
        "test": "assert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"",
        "num_ids": 621
    },
    {
        "number": 4112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    if k > n:\n        return \"-1\"\n\n    a.sort(reverse=True)\n\n    max_sum = 0\n    for i in range(0, n - k + 1):\n        max_sum += a[i]\n\n    return str(max_sum) ",
        "test": "assert solution(\"4 3 1\\n1 100 1 1\") == \"100\" ",
        "num_ids": 693
    },
    {
        "number": 4113,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    # Check if the number is divisible by 4 or 7\n    if N % 4 == 0 or N % 7 == 0:\n        return \"Yes\"\n    \n    # Check if the number is a multiple of 4 plus a multiple of 7\n    for i in range(1, N // 4 + 1):\n        if N == 4 * i + 7 * ((N - 4 * i) // 7):\n            return \"Yes\"\n    \n    return \"No\"",
        "test": "assert solution(\"20\") == \"Yes\"",
        "num_ids": 390
    },
    {
        "number": 4114,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def get_altitude(x, y, cx, cy, h):\n        return max(h - abs(x - cx) - abs(y - cy), 0)\n\n    def find_pyramid(points):\n        cx, cy, h = 0, 0, 0\n        for x, y, h_i in points:\n            cx += x\n            cy += y\n            h += h_i\n        cx //= len(points)\n        cy //= len(points)\n        h //= len(points)\n\n        for x, y, h_i in points:\n            altitude = get_altitude(x, y, cx, cy, h)\n            if altitude != h_i:\n                if altitude > h_i:\n                    h += 1\n                else:\n                    h = h_i - altitude\n        return cx, cy, h\n\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    points = [list(map(int, stdin[i + 1].split())) for i in range(N)]\n\n    cx, cy, h = find_pyramid(points)\n    return f\"{cx} {cy} {h}\" ",
        "test": "assert solution(\"1\\n50 50 1\\n50 50 0\") == \"50 50 1\"",
        "num_ids": 977
    },
    {
        "number": 4115,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1\n\n    return dp[0][n - 1]\n",
        "test": "assert solution('abcba') == 0",
        "num_ids": 519
    },
    {
        "number": 4116,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        if n % i == 0 and n // i >= 1 and n // i <= 9:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"10\") == \"Yes\" # product of 2 and 5",
        "num_ids": 421
    },
    {
        "number": 4117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    N, L = stdin.split('\\n')\n    N = int(N)\n    L = list(map(int, L.split()))\n\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                if L[i] + L[j] > L[k] and L[i] + L[k] > L[j] and L[j] + L[k] > L[i]:\n                    count += 1\n\n    return str(count)",
        "test": "assert solution(\"5\\n4 4 9 7 5\") == 5 ",
        "num_ids": 1562
    },
    {
        "number": 4118,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if 1 <= a <= 9 and 1 <= b <= 9:\n        return str(a * b)\n    else:\n        return \"-1\"",
        "test": "assert solution(\"2 5\") == \"10\"",
        "num_ids": 327
    },
    {
        "number": 4119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    N, M = map(int, stdin.readline().split())\n    X = list(map(int, stdin.readline().split()))\n\n    min_moves = 0\n\n    for i in range(1, N + 1):\n        min_moves += lcm(i, N)\n\n    for i in range(M):\n        min_moves += X[i] // N\n\n    return str(min_moves)",
        "test": "assert solution(\"10 10\\n-100 100 -50 0 50 150 -150\") == 0",
        "num_ids": 617
    },
    {
        "number": 4120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def is_connected(roads, visited, city):\n        visited[city] = True\n        for neighbor in roads[city]:\n            if not visited[neighbor]:\n                is_connected(roads, visited, neighbor)\n\n    def dfs(roads, visited, current, target, depth, distance, result):\n        if current == target:\n            result.append(distance)\n            return\n        for neighbor in roads[current]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                dfs(roads, visited, neighbor, target, depth + 1, distance + 1, result)\n                visited[neighbor] = False\n\n    def find_options(roads, k):\n        options = set()\n        for i in range(k):\n            option = []\n            for j in range(m):\n                if random.randint(0, 1):\n                    option.append(1)\n                else:\n                    option.append(0)\n            options.add(tuple(option))\n        return options\n\n    def find_min_distance(roads, option):\n        min_distance = float('inf')\n        for i in range(1, n + 1):\n            visited = [False] * (n + 1)\n            dfs(roads, visited, 1, i, 0, 0, [])\n            distance = min(d for d in result if d != 0)\n            min_distance = min(min_distance, distance)\n        return min_distance\n\n    def find_min_options(roads, k):\n        min_distance = float('inf')\n        min_options = set()\n        for option in find_options(roads, k):\n            distance = find_min_distance(roads, option)\n            if distance < min_distance:\n                min_distance = distance\n                min_options = {tuple(option)}\n            elif distance == min_distance:\n                min_options.add(tuple(option))\n        return min_options\n\n    n, m, k = map(int, stdin.split()[:3])\n    roads = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        a, b = map(int, stdin.split()[3 + i].split())\n        roads[a].append(b)\n        roads[b].append(a)\n\n    is_connected(roads, [False] * (n + 1), 1)\n    min_options = find_min_options(roads, k)\n    return str(len(min_options)) + '\\n' + '\\n'.join([''.join(map(str, option)) for option in min_options]) + '\\n'",
        "test": "assert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\\n111100\\n110110\" ",
        "num_ids": 2015
    },
    {
        "number": 4121,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    # Check if the wall is already completed\n    if all(a[i] == a[0] for i in range(n)) and a[0] == max(a):\n        return \"YES\"\n\n    # Check if the wall can be completed using vertical bricks\n    for i in range(n):\n        if a[i] < max(a):\n            if i == 0 or i == n - 1:\n                return \"YES\"\n            if a[i - 1] == a[i + 1]:\n                return \"YES\"\n\n    return \"NO\"",
        "test": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"",
        "num_ids": 583
    },
    {
        "number": 4122,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split('\\n')[0].split())\n    d = list(map(int, stdin.split('\\n')[1].split()))\n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return str(i)\n    return '-1'",
        "test": "assert solution(\"10 4\\n-3 -6 5 4\") == \"-1\"",
        "num_ids": 591
    },
    {
        "number": 4123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    freq = {}\n    max_freq = 0\n    max_gram = ''\n    \n    for i in range(n - 1):\n        gram = s[i:i+2]\n        if gram in freq:\n            freq[gram] += 1\n        else:\n            freq[gram] = 1\n        \n        if freq[gram] > max_freq:\n            max_freq = freq[gram]\n            max_gram = gram\n            \n    return max_gram",
        "test": "assert solution(\"ZZZAA\") == \"ZZ\"",
        "num_ids": 563
    },
    {
        "number": 4124,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    if s == t:\n        return sum(len(s), len(t))\n\n    lcs = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                lcs[i][j] = lcs[i - 1][j - 1] + 1\n            else:\n                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1])\n\n    return len(s) + len(t) - 2 * lcs[len(s)][len(t)]",
        "test": "assert solution(\"test\\nwest\") == 2",
        "num_ids": 601
    },
    {
        "number": 4125,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split()[0:2])\n    x = sorted(map(int, stdin.split()[2:]))\n\n    if X <= x[0]:\n        return str(x[0] - X)\n    if X >= x[-1]:\n        return str(X - x[-2])\n\n    for i in range(N - 1):\n        if x[i + 1] - x[i] > 2 * (X - x[i]):\n            return str(x[i + 1] - X)\n\n    return \"0\"",
        "test": "assert solution(\"4 0\\n2 4 8 10\") == \"2\"",
        "num_ids": 918
    },
    {
        "number": 4126,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    \n    if n % 2 == 0 or n < 3 or n > 99:\n        return \"No\"\n    \n    if s != s[::-1]:\n        return \"No\"\n    \n    if s[:n//2] != s[:n//2][::-1] or s[n//2+1:] != s[n//2+1:][::-1]:\n        return \"No\"\n    \n    return \"Yes\"",
        "test": "assert solution(\"akasaka\") == \"Yes\"",
        "num_ids": 545
    },
    {
        "number": 4127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    result = int(A * B)\n    return str(result)",
        "test": "assert solution('198 1.10') == '217'",
        "num_ids": 468
    },
    {
        "number": 4128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def count_ways(n: int, a: int, b: int) -> int:\n        if a < 1 or b < 1:\n            return 0\n        if a > n or b > n:\n            return 0\n        if n == a + b:\n            return 1\n        return count_ways(n, a + 1, b) + count_ways(n, a, b + 1)\n\n    def count_ways_dp(n: int) -> int:\n        dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n        for i in range(n + 1):\n            for j in range(n + 1):\n                if i == j or (i == 0 and j == 0):\n                    dp[i][j] = 1\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i != j:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[n][n]\n\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    outputs = []\n    for it in range(1, t + 1):\n        n = int(lines[it])\n        if n == 1:\n            outputs.append('0')\n        else:\n            #outputs.append(str(count_ways(n, 1, 1)))\n            outputs.append(str(count_ways_dp(n)))\n\n    return '\\n'.join(outputs)",
        "test": "assert solution(\"6\\n7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"",
        "num_ids": 1034
    },
    {
        "number": 4129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def is_reachable(n, edges, start):\n        visited = [False] * (n + 1)\n        stack = [start]\n        visited[start] = True\n\n        while stack:\n            vertex = stack.pop()\n            for neighbor in edges[vertex]:\n                if not visited[neighbor]:\n                    stack.append(neighbor)\n                    visited[neighbor] = True\n\n        return all(visited[1:])\n\n    def min_new_roads(n, edges, start):\n        if is_reachable(n, edges, start):\n            return 0\n\n        new_edges = [set() for _ in range(n + 1)]\n        for u, v in edges:\n            new_edges[u].add(v)\n            new_edges[v].add(u)\n\n        visited = [False] * (n + 1)\n        stack = [start]\n        visited[start] = True\n\n        while stack:\n            vertex = stack.pop()\n            for neighbor in new_edges[vertex]:\n                if not visited[neighbor]:\n                    stack.append(neighbor)\n                    visited[neighbor] = True\n\n        unreachable = [i for i in range(1, n + 1) if not visited[i]]\n        min_roads = len(unreachable) - 1\n\n        for i in range(len(unreachable) - 1):\n            for j in range(i + 1, len(unreachable)):\n                if unreachable[i] not in new_edges[unreachable[j]]:\n                    min_roads += 1\n                    new_edges[unreachable[i]].add(unreachable[j])\n                    new_edges[unreachable[j]].add(unreachable[i])\n\n        return min_roads\n\n    n, m, start = map(int, stdin.split()[:3])\n    edges = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges[u].append(v)\n\n    return str(min_new_roads(n, edges, start))",
        "test": "assert solution(\"\"\"9 9 1",
        "num_ids": 1538
    },
    {
        "number": 4130,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    weights = sorted([int(x) for x in stdin.split('\\n')[1].split()])\n\n    unique_weights = []\n    for weight in weights:\n        if weight not in unique_weights:\n            unique_weights.append(weight)\n\n    return str(min(n, len(unique_weights)))",
        "test": "assert solution(\"4\\n3 2 4 1\") == \"4\"",
        "num_ids": 523
    },
    {
        "number": 4131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    prefectures = [[] for _ in range(N + 1)]\n    for i in range(M):\n        P, Y = map(int, stdin.readline().split())\n        prefectures[P].append(Y)\n\n    result = []\n    for i, prefecture in enumerate(prefectures):\n        prefecture.sort()\n        for j, year in enumerate(prefecture, start=1):\n            id_number = f\"{i:06d}{j:06d}\"\n            result.append(id_number)\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"",
        "num_ids": 815
    },
    {
        "number": 4132,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    A.sort()\n    min_health = A[0]\n\n    for i in range(1, N):\n        min_health = min(min_health + A[i], A[i])\n\n    return str(min_health)",
        "test": "assert solution(\"3\\n1 1 1\\n\") == \"1\"  # Sample Input 2",
        "num_ids": 885
    },
    {
        "number": 4133,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    jaws = [jaw for jaw in stdin.split(\":\")[0].split(\"-\") if jaw]\n    stomach = stdin.split(\":\")[1].split(\">\")[0].split(\",\")\n\n    def is_valid(sequence: str) -> bool:\n        jaws_iter = iter(jaws)\n        stomach_iter = iter(stomach)\n        sequence_iter = iter(sequence)\n\n        try:\n            for jaw in jaws_iter:\n                for variable in sequence_iter:\n                    if variable not in jaw:\n                        break\n                else:\n                    continue\n                break\n\n            for _ in stomach_iter:\n                next(sequence_iter)\n\n            return True\n        except StopIteration:\n            return False\n\n    def lexicographically_smallest_sequence(jaws: list, stomach: list) -> str:\n        if not jaws:\n            return \"\".join(stomach)\n\n        jaw = jaws.pop(0)\n        for i in range(10):\n            if str(i) in jaw:\n                sequence = lexicographically_smallest_sequence(jaws.copy(), stomach.copy())\n                if sequence and is_valid(str(i) + sequence):\n                    return str(i) + sequence\n        return None\n\n    smallest_sequence = lexicographically_smallest_sequence(jaws, stomach)\n\n    if smallest_sequence:\n        return smallest_sequence\n    else:\n        return \"false\"",
        "test": "assert solution(\"?(__-_+_/_____):-__>__,_____<__.\") == \"false\"",
        "num_ids": 920
    },
    {
        "number": 4134,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    grid = [list(map(int, line.split())) for line in stdin.split('\\n')[1:n+1]]\n    \n    def xor(a, b):\n        return a ^ b\n\n    def dfs(i, j, k, seen):\n        if i == n-1 and j == m-1:\n            if k == 0:\n                return 1\n            else:\n                return 0\n\n        if i < 0 or i >= n or j < 0 or j >= m:\n            return 0\n\n        if (i, j) in seen:\n            return 0\n\n        seen.add((i, j))\n\n        xor_sum = xor(k, grid[i][j])\n        right = dfs(i, j+1, xor_sum, set(seen))\n        down = dfs(i+1, j, xor_sum, set(seen))\n\n        seen.remove((i, j))\n\n        return right + down\n\n    return str(dfs(0, 0, k, set()))",
        "test": "assert solution(\"3 4 100000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"0\" ",
        "num_ids": 1138
    },
    {
        "number": 4135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s = t\n    for d in range(1, n + 1):\n        if n % d == 0:\n            s = s[:d][::-1] + s[d:]\n    return s\n\nn, t = map(int, input().split())\ns = t\nfor d in range(1, n + 1):\n    if n % d == 0:\n        s = s[:d][::-1] + s[d:]\nprint(s) ",
        "test": "assert solution(\"1\\nz\") == \"z\" ",
        "num_ids": 476
    },
    {
        "number": 4136,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)",
        "test": "assert solution(\"5 14\") == \"19\"",
        "num_ids": 285
    },
    {
        "number": 4137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into operands and operators\n    operands = [int(x) for x in stdin.split(\"+\") if x.isdigit()]\n    operators = [x for x in stdin.split(\"+\") if not x.isdigit()]\n\n    # Initialize the Brainfuck program with the necessary memory cells\n    program = \"+\" * 30000\n\n    # Add the necessary instructions for each operand and operator\n    index = 2\n    for i in range(len(operands)):\n        if i > 0 and operators[i - 1] == \"-\":\n            operands[i] = 256 - operands[i]\n        program += \">\" * (operands[i] - index)\n        index = operands[i]\n\n    # Add the loop to calculate the result\n    program += \"<[<->-]<\"\n\n    # Print the result\n    program += \"+\" * index + \".\"\n\n    return program",
        "test": "assert solution(\"9-7\") == \"+++++++++>++++++++[<->-]<++++++++++++++++++++++++++++++++++++++++++++++++.\" ",
        "num_ids": 2778
    },
    {
        "number": 4138,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split(\"\\n\")[0])\n    k_list = list(map(int, stdin.split(\"\\n\")[1:]))\n    \n    sequence = \"\"\n    for i in range(1, 10**18):\n        sequence += str(i)\n        if len(sequence) > 10**18:\n            break\n    \n    result = []\n    for k in k_list:\n        result.append(int(sequence[k-1]))\n    \n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"4\\n2132\\n506\\n99999999999999999\\n100000000000000000\") == \"8\\n2\\n4\\n1\" ",
        "num_ids": 956
    },
    {
        "number": 4139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n\n    for i in range(1, n + 1):\n        digits = set(str(i))\n        if digits.issubset({'3', '5', '7'}):\n            count += 1\n\n    return str(count)\n",
        "test": "assert solution(\"1000000000000\") == 825800",
        "num_ids": 495
    },
    {
        "number": 4140,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            count += 1\n    return count",
        "test": "assert solution('010101') == 0",
        "num_ids": 600
    },
    {
        "number": 4141,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, *numbers = list(map(int, stdin.split()))\n    for number in numbers:\n        if number % 2 == 0 and number % 3 != 0 and number % 5 != 0:\n            return \"DENIED\"\n    return \"APPROVED\"",
        "test": "assert solution('5\\n6 7 9 10 31') == 'APPROVED'",
        "num_ids": 558
    },
    {
        "number": 4142,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, len(stdin), 2):\n        if stdin[i] not in \"LRUD\":\n            return \"No\"\n    for i in range(0, len(stdin), 2):\n        if stdin[i] not in \"RUD\":\n            return \"No\"\n    return \"Yes\"",
        "test": "assert solution(\"LULLDRR\") == \"No\" # Character in even position is R.",
        "num_ids": 997
    },
    {
        "number": 4143,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n\n    time = 0\n    while N > 0:\n        time += 1\n        people_at_city1 = N\n        people_at_city2 = (A - people_at_city1) * time\n        people_at_city3 = (B - max(people_at_city2 - A, 0)) * time\n        people_at_city4 = (C - max(people_at_city3 - B, 0)) * time\n        people_at_city5 = (D - max(people_at_city4 - C, 0)) * time\n        people_at_city6 = (E - max(people_at_city5 - D, 0)) * time\n\n        N -= people_at_city1 + people_at_city2 + people_at_city3 + people_at_city4\n\n    return str(time)",
        "test": "assert solution(\"1\\n1000000000000000\\n1000000000000000\\n1000000000000000\\n1000000000000000\\n1000000000000000\") == \"1\"",
        "num_ids": 1220
    },
    {
        "number": 4144,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    mod = 10**9 + 7\n\n    if n == 1:\n        return 10 % mod\n\n    # The number of sequences that start with 0 is equal to the number of sequences that start with any number other than 0\n    # Similarly, the number of sequences that end with 9 is equal to the number of sequences that end with any number other than 9\n    # Therefore, we can consider only the sequences that start with 0 and end with 9\n\n    # The number of such sequences is the number of permutations of the remaining n-2 elements,\n    # which is (n-2)!/2! because half of the permutations would result in sequences that start with 0 and end with 9,\n    # and half would result in sequences that start with 9 and end with 0\n\n    result = factorial(n - 2) // factorial(2)\n\n    return result % mod\n\ndef",
        "test": "assert solution(\"1000000\") == \"0\"",
        "num_ids": 669
    },
    {
        "number": 4145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    is_prime = [True] * (X + 1)\n    is_prime[0] = is_prime[1] = False\n\n    for i in range(2, int(X ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, X + 1, i):\n                is_prime[j] = False\n\n    for i in range(X, X + 1000001):\n        if is_prime[i]:\n            return str(i)",
        "test": "assert solution(7) == 7",
        "num_ids": 465
    },
    {
        "number": 4146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, v = map(int, stdin.split())\n    v = list(map(int, v))\n    count = 0\n    for i in range(1, n - 1):\n        if v[i] != v[i - 1] and v[i] != v[i + 1]:\n            if i == 1 or v[i] != v[i - 2]:\n                count += 1\n            v[i] = v[i - 1]\n    print(count)\n",
        "test": "assert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == 5",
        "num_ids": 548
    },
    {
        "number": 4147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split()[0:4])\n    bamboos = sorted(map(int, stdin.split()[4:]), reverse=True)\n\n    if A == sum(bamboos[:3]):\n        return \"0\"\n\n    def magic_composition(bamboos: List[int], i: int, j: int) -> int:\n        return i + j\n\n    def magic_extension(bamboos: List[int], i: int) -> int:\n        return bamboos[i] + 1\n\n    def magic_shortening(bamboos: List[int], i: int) -> int:\n        return bamboos[i] - 1\n\n    def find_min_magic_points(bamboos: List[int], A: int, B: int, C: int) -> int:\n        min_magic_points = float(\"inf\")\n        for i in range(len(bamboos) - 2):\n            for j in range(i + 1, len(bamboos) - 1):\n                for k in range(j + 1, len(bamboos)):\n                    new_bamboos = [magic_composition(bamboos, i, j), magic_composition(bamboos, j, k), magic_composition(bamboos, i, k)]\n                    new_bamboos.sort(reverse=True)\n                    if sum(new_bamboos) == A + B + C:\n                        return 10 * 3\n                    elif sum(new_bamboos) < A + B + C:\n                        mp = 10 * 3 + find_min_magic_points(new_bamboos, A, B, C)\n                        min_magic_points = min(min_magic_points, mp)\n                    for x in range(i + 1, k + 1):\n                        new_bamboos = bamboos.copy()\n                        new_bamboos[x] = magic_extension(bamboos, x)\n                        mp = 1 + find_min_magic_points(new_bamboos, A, B, C)\n                        min_magic_points = min(min_magic_points, mp)\n                    for x in range(i, k):\n                        if bamboos[x] >= 2:\n                            new_bamboos = bamboos.copy()\n                            new_bamboos[x] = magic_shortening(bamboos, x)\n                            mp = 1 + find_min_magic_points(new_bamboos, A, B, C)\n                            min_magic_points = min(min_magic_points, mp)\n        return min_magic_points\n\n    return str(find_min_magic_points(bamboos, A, B, C))\n\nsample_input = \"5 100 90 80\\n98\\n40\\n30\\n21\\n80\"\nprint(solution(sample_input)) ",
        "test": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\" ",
        "num_ids": 1440
    },
    {
        "number": 4148,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split(\"\\n\")\n    N = int(N)\n\n    result = \"\"\n    for char in S:\n        if char.isupper():\n            shifted_char = chr(((ord(char) - 65 + N) % 26) + 65)\n        else:\n            shifted_char = char\n        result += shifted_char\n\n    return result",
        "test": "assert solution(\"2\\nABCXYZ\") == \"CDEZAB\" ",
        "num_ids": 590
    },
    {
        "number": 4149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    def prime_divisors(x):\n        divisors = []\n        for i in range(2, x + 1):\n            if x % i == 0:\n                divisors.append(i)\n        return divisors\n\n    def prime_sequence(limit):\n        primes = []\n        num = 2\n        while len(primes) < limit:\n            if is_prime(num):\n                primes.append(num)\n            num += 1\n        return primes\n\n    n, *b = [int(x) for x in stdin.split()]\n    p = prime_sequence(n)\n\n    a = []\n    for num in b:\n        if num in p:\n            a.append(p.index(num) + 2)\n        else:\n            divisors = prime_divisors(num)\n            if not divisors or divisors[-1] == num:\n                a.append(num)\n            else:\n                a.append(divisors[-1])\n\n    return \" \".join(str(x) for x in a)",
        "test": "assert solution(\"1\\n3 6\\n\") == \"6\\n\" ",
        "num_ids": 1244
    },
    {
        "number": 4150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    a = sorted(enumerate(a), key=lambda x: x[1], reverse=True)\n\n    first_team = []\n    second_team = []\n    i = 0\n    while i < n:\n        if i + 2 * k + 1 > n:\n            break\n        if a[i][0] not in first_team and a[i][0] not in second_team:\n            first_team.append(a[i][0])\n            for j in range(i - k, i + k + 1):\n                if j >= 0 and j < n and j not in first_team and j not in second_team:\n                    second_team.append(j)\n        i += 1\n\n    i = n - 1\n    while i >= 0:\n        if i - 2 * k - 1 < 0:\n            break\n        if a[i][0] not in first_team and a[i][0] not in second_team:\n            second_team.append(a[i][0])\n            for j in range(i - k, i + k + 1):\n                if j >= 0 and j < n and j not in first_team and j not in second_team:\n                    first_team.append(j)\n        i -= 1\n\n    result = []\n    for i in range(n):\n        if i in first_team:\n            result.append('1')\n        elif i in second_team:\n            result.append('2')\n        else:\n            raise ValueError(\"Error: student not assigned to any team.\")\n\n    return ''.join(result) ",
        "test": "assert solution(\"5 1\\n2 4 5 3 1\") == \"21112\"",
        "num_ids": 1644
    },
    {
        "number": 4151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    b = [0] * n\n    cnt = 1\n    for i in range(1, n):\n        if a[i] != a[i - 1]:\n            b[i] = cnt\n            cnt += 1\n        else:\n            b[i] = b[i - 1]\n\n    ans = 1\n    for i in range(1, n - 1):\n        if b[i] == b[i + 1] or b[i] == b[i + 1] + 1:\n            ans += 1\n\n    return str(ans % 998244353)\n\ndef",
        "test": "assert solution(\"4\\n1 3 3 7\\n\") == 4",
        "num_ids": 665
    },
    {
        "number": 4152,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    count = 0\n    for i in range(n):\n        found = False\n        for j in range(n):\n            if i != j:\n                if (a[i] + a[j]) & (a[i] + a[j] - 1) == 0:\n                    found = True\n                    break\n        if not found:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"1\\n16\") == \"1\"",
        "num_ids": 1052
    },
    {
        "number": 4153,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    count = 0\n    i = 0\n\n    while i < n:\n        if stdin[i] == '0' and i < n - 1 and stdin[i + 1] == '1':\n            count += 2\n            i += 2\n        elif stdin[i] == '1' and i < n - 1 and stdin[i + 1] == '0':\n            count += 2\n            i += 2\n        else:\n            i += 1\n\n    return count",
        "test": "assert solution(\"0101010101\") == 10",
        "num_ids": 498
    },
    {
        "number": 4154,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def passes_all_gates(id_card: int, gates: List[Tuple[int, int]]) -> bool:\n        return all(id_card >= L and id_card <= R for L, R in gates)\n\n    stdin_data = list(map(int, stdin.split()))\n    N, M = stdin_data[0], stdin_data[1]\n    gates = [tuple(stdin_data[2*i+1:2*i+3]) for i in range(M)]\n\n    passing_cards = 0\n    for id_card in range(1, N+1):\n        if passes_all_gates(id_card, gates):\n            passing_cards += 1\n\n    return str(passing_cards)",
        "test": "assert solution(\"10 1\\n1 10\") == \"1\"",
        "num_ids": 829
    },
    {
        "number": 4155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n, *h = list(map(int, stdin.split()))\n    h.sort(reverse=True)\n    count = 0\n    for i in range(n):\n        if h[i] == 0:\n            break\n        count += 1\n        for j in range(i, n):\n            h[j] -= 1\n    return str(count)\n\nn = int(input())\nh = input()\nprint(solution(h)) ",
        "test": "assert solution(\"7\\n1 2 3 4 5 6 7\") == \"6\"",
        "num_ids": 598
    },
    {
        "number": 4156,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    possible_combinations = []\n    for i in range(w + 1):\n        current_combination = [i]\n        for j in range(n):\n            current_combination.append(current_combination[-1] + a[j])\n        possible_combinations.append(current_combination)\n\n    valid_combinations = []\n    for combination in possible_combinations:\n        if all(0 <= x <= w for x in combination):\n            valid_combinations.append(combination)\n\n    if not valid_combinations:\n        return \"0\"\n    return str(len(valid_combinations))",
        "test": "assert solution(\"3 5\\n2 1 -3\") == \"3\"",
        "num_ids": 696
    },
    {
        "number": 4157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    sequence = list(map(int, stdin.split('\\n')[1].split()))\n\n    def is_valid_sequence(seq: list) -> bool:\n        for i in range(1, len(seq)):\n            if seq[i] == seq[i - 1] * 2 or seq[i] == seq[i - 1] // 3:\n                continue\n            else:\n                return False\n        return True\n\n    def helper(seq: list, path: list) -> list:\n        if len(path) == n:\n            return path\n\n        for i in range(len(seq)):\n            if is_valid_sequence(path + seq[:i + 1]):\n                result = helper(seq[:i + 1] + seq[i + 1:], path + seq[:i + 1])\n                if result:\n                    return result\n\n    return ' '.join(map(str, helper(sequence, [])))",
        "test": "assert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"",
        "num_ids": 1384
    },
    {
        "number": 4158,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    def is_power_of_two(x):\n        return x != 0 and (x & (x - 1)) == 0\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    x = list(map(int, lines[1].split()))\n    m = 1\n    subset = [x[0]]\n\n    for i in range(1, n):\n        for j in range(i):\n            if is_power_of_two(abs(x[i] - x[j])) and gcd(abs(x[i] - x[j]), 2 ** m) == 2 ** m:\n                subset.append(x[i])\n                m += 1\n                break\n\n    return f\"{m}\\n{' '.join(map(str, subset))}\"",
        "test": "assert solution(\"2\\n1 2\") == \"1\\n1\" ",
        "num_ids": 984
    },
    {
        "number": 4159,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    for _ in range(K):\n        if A > 0:\n            A -= 1\n        elif B > 0:\n            B -= 1\n    return f\"{A} {B}\"",
        "test": "assert solution(\"10 10 10\") == \"0 10\"",
        "num_ids": 544
    },
    {
        "number": 4160,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    balance = 100\n    years = 0\n\n    while balance < X:\n        balance = int(balance * 1.01)\n        years += 1\n\n    return str(years)\n",
        "test": "assert solution(\"103\") == \"3\"",
        "num_ids": 394
    },
    {
        "number": 4161,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    total_gcd = 0\n\n    for a in range(1, K + 1):\n        for b in range(1, K + 1):\n            for c in range(1, K + 1):\n                total_gcd += math.gcd(a, math.gcd(b, c))\n\n    return str(total_gcd)",
        "test": "assert solution(\"2\\n\") == \"9\"",
        "num_ids": 420
    },
    {
        "number": 4162,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = [int(x) for x in stdin.split()]\n    max_f = sum(a)\n    lcm = a[0]\n    for i in range(1, N):\n        lcm = (lcm * a[i]) // math.gcd(lcm, a[i])\n        max_f += (lcm - 1) // a[i] * a[i]\n    return str(max_f) ",
        "test": "assert solution(\"1\\n100\") == \"100\"",
        "num_ids": 530
    },
    {
        "number": 4163,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def check_doublets(rolls: List[List[int]]) -> bool:\n        for i in range(len(rolls) - 2):\n            if rolls[i][0] == rolls[i][1] and rolls[i + 1][0] == rolls[i + 1][1] and rolls[i + 2][0] == rolls[i + 2][1]:\n                return True\n        return False\n\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    rolls = []\n    for i in range(1, N + 1):\n        D1, D2 = map(int, lines[i].split())\n        rolls.append([D1, D2])\n\n    if check_doublets(rolls):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"",
        "num_ids": 934
    },
    {
        "number": 4164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(int(math.pi * r**2))",
        "test": "assert solution(5) == 25",
        "num_ids": 200
    },
    {
        "number": 4165,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, *L = list(map(int, stdin.split()))\n    longest_side = max(L)\n    total_length = sum(L) - longest_side\n\n    if longest_side < total_length:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution(\"4\\n3 8 5 1\\n\") == \"Yes\"",
        "num_ids": 551
    },
    {
        "number": 4166,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    c_list = [(int(s), int(c)) for s, c in map(lambda x: x.split(), lines[1:M + 1])]\n\n    for i in range(1, 10 ** N):\n        if len(str(i)) != N:\n            continue\n        valid = True\n        for s, c in c_list:\n            if int(str(i)[s - 1]) != c:\n                valid = False\n                break\n        if valid:\n            return str(i)\n    return '-1'",
        "test": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"",
        "num_ids": 1127
    },
    {
        "number": 4167,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n\n    for i in range(1, N + 1):\n        for j in range(i, N + 1):\n            if (K - i) % j == 0:\n                count += N - j + 1\n\n    return str(count)\n",
        "test": "assert solution('10 5') == '27'",
        "num_ids": 507
    },
    {
        "number": 4168,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    result = ''\n    while n != 0:\n        if n % 2 == 0:\n            result = '0' + result\n        else:\n            result = '1' + result\n        n = -(n // 2)\n    return result",
        "test": "assert solution(0) == \"0\"",
        "num_ids": 436
    },
    {
        "number": 4169,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    items = sorted([list(map(int, line.split())) for line in stdin.split('\\n')[1:]], key=lambda x: x[0], reverse=True)\n    total_money = 0\n    remaining_cans = M\n    for i in range(N):\n        if remaining_cans == 0:\n            break\n        cans_to_buy = min(items[i][1], remaining_cans)\n        total_money += cans_to_buy * items[i][0]\n        remaining_cans -= cans_to_buy\n    return str(total_money)",
        "test": "assert solution(\"2 5\\n4 9\\n2 4\\n\") == \"12\" ",
        "num_ids": 789
    },
    {
        "number": 4170,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, H = map(int, stdin.split())\n    H = list(map(int, stdin.split()))\n    count = 0\n    i = 0\n    while i < N - 1:\n        while i < N - 1 and H[i] >= H[i + 1]:\n            i += 1\n        count += 1\n        i += 1\n    return str(count)",
        "test": "assert solution(\"1\\n10\") == \"0\"",
        "num_ids": 674
    },
    {
        "number": 4171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort()\n    count = 0\n\n    for i in range(n - k):\n        if a[i] == a[i + k]:\n            break\n        count += a[i + k] - a[i]\n\n    return str(count)",
        "test": "assert solution(\"5 3\\n1 2 3 3 3\") == 0",
        "num_ids": 577
    },
    {
        "number": 4172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    min_val = min(a)\n    max_val = max(a)\n    min_count = 0\n    max_count = 0\n\n    for num in a:\n        if num == min_val:\n            min_count += 1\n        elif num == max_val:\n            max_count += 1\n\n    if min_count >= k:\n        return 0\n    elif max_count >= k - min_count:\n        return min_count + k - min_count - max_count\n    else:\n        return \"IMPOSSIBLE\"",
        "test": "assert solution(\"7 5\\n3 3 2 1 1 1 3\") == 4",
        "num_ids": 672
    },
    {
        "number": 4173,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    queries = [list(map(int, stdin.split()[1:])) for i in range(1, n + 1)]\n    result = []\n\n    for query in queries:\n        n, a, b = query\n        liters = n\n        liters_1 = liters // 1\n        liters_2 = (liters - liters_1) // 2\n        burles = liters_1 * a + liters_2 * b\n        result.append(burles)\n\n    return \"\\n\".join(map(str, result))\n\nstdin = \"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"",
        "num_ids": 726
    },
    {
        "number": 4174,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Split input into N and X, and split L values\n    input_array = stdin.split(\"\\n\")\n    N, X = map(int, input_array[0].split())\n    L_values = list(map(int, input_array[1].split()))\n\n    # Initialize D_values and count\n    D_values = [0] * (N + 1)\n    count = 0\n\n    # Calculate D values\n    for i in range(1, N + 1):\n        D_values[i] = D_values[i - 1] + L_values[i - 1]\n\n    # Count the number of D values less than or equal to X\n    for i in range(1, N + 1):\n        if D_values[i] <= X:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"1 3\\n2\") == \"1\"",
        "num_ids": 1060
    },
    {
        "number": 4175,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    words = stdin.split('\\n')[1:]\n    used_words = set()\n    for i in range(n):\n        if words[i] in used_words:\n            return 'No'\n        used_words.add(words[i])\n        if i > 0 and words[i][0] != words[i - 1][-1]:\n            return 'No'\n    return 'Yes'\n\nstdin = '''4\nhoge\nenglish\nhoge\nenigma'''\nprint(solution(stdin)) ",
        "test": "assert solution(\"4\\nabc\\ndef\\nghi\\ndef\") == \"No\"",
        "num_ids": 733
    },
    {
        "number": 4176,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(A + B - 1, A * B))",
        "test": "assert solution(\"100000 1\") == \"100000\"",
        "num_ids": 327
    },
    {
        "number": 4177,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = \"x\" * len(s)\n    return result",
        "test": "assert solution(\"sardine\") == \"xxxxxxx\"",
        "num_ids": 252
    },
    {
        "number": 4178,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = list(map(int, stdin.split()))\n    decreased = False\n    \n    for i in range(1, N):\n        if H[i] < H[i-1]:\n            if decreased:\n                return \"No\"\n            else:\n                decreased = True\n                \n    return \"Yes\"",
        "test": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"",
        "num_ids": 560
    },
    {
        "number": 4179,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M, C = map(int, lines[0].split())\n    B = list(map(int, lines[1].split()))\n    A = [list(map(int, lines[i + 2].split())) for i in range(N)]\n\n    count = 0\n    for i in range(N):\n        if sum(A[i][j] * B[j] for j in range(M)) + C > 0:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"",
        "num_ids": 604
    },
    {
        "number": 4180,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    change = N % 1000\n    return str(change)",
        "test": "assert solution(\"1000\") == \"0\"",
        "num_ids": 311
    },
    {
        "number": 4181,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    b = list(map(int, input().split()))\n\n    total_monsters = sum(a)\n    max_defeated = 0\n\n    for i in range(n):\n        max_defeated += min(b[i], a[i] + a[i + 1])\n\n    return str(total_monsters - max_defeated)",
        "test": "assert solution(\"1\\n100\\n100\\n\") == \"200\"",
        "num_ids": 1003
    },
    {
        "number": 4182,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M, X, Y = map(int, stdin.split()[:4])\n    x_coords = sorted(map(int, stdin.split()[4:4+N]))\n    y_coords = sorted(map(int, stdin.split()[4+N:]))\n\n    # Check if war will break out\n    for Z in range(X+1, Y):\n        if all(x < Z for x in x_coords) and all(y >= Z for y in y_coords):\n            return \"No War\"\n    return \"War\"",
        "test": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"",
        "num_ids": 773
    },
    {
        "number": 4183,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N, *T = map(int, stdin.split())\n    lcm = T[0]\n    for t in T[1:]:\n        lcm = lcm * t // gcd(lcm, t)\n    return str(lcm)\n\ndef",
        "test": "assert solution(\"5\\n1\\n2\\n3\\n4\\n5\\n\") == \"5\"",
        "num_ids": 1383
    },
    {
        "number": 4184,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, weights = int(stdin.split(\"\\n\")[0]), list(map(int, stdin.split(\"\\n\")[1].split()))\n    weights.sort()\n    min_diff = float(\"inf\")\n    for T in range(1, N):\n        S_1 = sum(weights[:T])\n        S_2 = sum(weights[T:])\n        diff = abs(S_1 - S_2)\n        min_diff = min(min_diff, diff)\n    return str(min_diff)",
        "test": "assert solution(\"3\\n1 2 3\") == \"0\"",
        "num_ids": 620
    },
    {
        "number": 4185,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    matrix = [[int(x) for x in stdin.readline().split()] for _ in range(n)]\n\n    def is_good_matrix(matrix: List[List[int]]) -> bool:\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] != (i * m + j + 1):\n                    return False\n        return True\n\n    def count_moves(matrix: List[List[int]]) -> int:\n        moves = 0\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] != (i * m + j + 1):\n                    moves += 1\n        return moves // m\n\n    if is_good_matrix(matrix):\n        return \"0\"\n\n    moves = count_moves(matrix)\n    for j in range(m):\n        for i in range(1, n):\n            matrix[i][j] = matrix[i - 1][j]\n        moves -= 1\n        if is_good_matrix(matrix):\n            return str(moves)\n\n    return str(moves)",
        "test": "assert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\" ",
        "num_ids": 1120
    },
    {
        "number": 4186,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    skills = list(map(int, stdin.split('\\n')[1].split()))\n\n    skills.sort()\n    teams = []\n\n    for i in range(n // 2):\n        team = []\n        for j in range(2):\n            team.append(skills.pop(0))\n        teams.append(team)\n\n    total_problems = 0\n    for team in teams:\n        skill_diff = team[1] - team[0]\n        if skill_diff > 0:\n            total_problems += skill_diff\n\n    return str(total_problems)",
        "test": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"",
        "num_ids": 634
    },
    {
        "number": 4187,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, arr = list(map(int, stdin.split()))\n    current_rest = []\n    max_rest = []\n\n    for i in range(n):\n        if arr[i] == 1:\n            current_rest.append(i)\n        else:\n            if len(current_rest) > 0:\n                current_rest.append(i)\n                max_rest.append(current_rest)\n                current_rest = []\n\n    if len(current_rest) > 0:\n        current_rest.append(n)\n        max_rest.append(current_rest)\n\n    max_length = 0\n    for rest in max_rest:\n        if rest[-1] - rest[0] > max_length:\n            max_length = rest[-1] - rest[0]\n\n    return str(max_length)\n",
        "test": "assert solution(\"3\\n0 0 0\") == 0 ",
        "num_ids": 1099
    },
    {
        "number": 4188,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    facts = {\n        1: \"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\",\n        2: \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n        3: \"The largest online maths competition consisted of 12766 participants.\",\n        4: \"The Nile is credited as the longest river in the world. From its farthest stream in Burundi, it extends 6695 km in length.\",\n        5: \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        6: \"Angel Falls is the highest waterfall. Its greatest single drop measures 807 m.\",\n        7: \"Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2013 is at a record height of 31962 m.\",\n        8: \"Uranium is the heaviest of all the naturally occurring elements. Its most common isotope has a nucleus containing 146 neutrons.\",\n        9: \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        10: \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\",\n        11: \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n        12: \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\",\n        13: \"The largest state of USA is Alaska; its area is 663268 square miles.\",\n        14: \"Alaska has a longer coastline than all of the other 49 U.S. States put together: it is 154103 miles long.\",\n        15: \"Lake Baikal is the largest freshwater lake in the world. It reaches 1642 meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.\",\n        16: \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\"\n    }\n\n    input_number = int(stdin.strip())\n\n    if input_number in facts:\n        return 1\n    else:\n        return 0",
        "test": "assert solution(12) == 0",
        "num_ids": 1844
    },
    {
        "number": 4189,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    num_cheeses = int(lines[0])\n    cheeses = {}\n    \n    for i in range(1, num_cheeses + 1):\n        name, cheese_type = lines[i].split()\n        if cheese_type == 'soft':\n            cheeses[name] = 'soft'\n    \n    count = 0\n    for name, cheese_type in cheeses.items():\n        if 's' in name:\n            count += 1\n        elif 'e' in name:\n            count += 1\n        elif 'l' in name:\n            count += 1\n    \n    return str(count)",
        "test": "assert solution(\"\"\"",
        "num_ids": 535
    },
    {
        "number": 4190,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n\n    # Reorder elements of array b\n    b.sort()\n\n    # Calculate array c\n    c = [(a[i] + b[i]) % n for i in range(n)]\n\n    # Return lexicographically minimum possible array c\n    return ' '.join(map(str, c))",
        "test": "assert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"",
        "num_ids": 667
    },
    {
        "number": 4191,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    count = 0\n    for i in input_list:\n        if int(i) == 1:\n            count += 1\n    if count % 2 == 0:\n        return '0'\n    else:\n        return '1'\n\nstdin = '0\\n1\\n1\\n0'\nprint(solution(stdin)) ",
        "test": "assert solution(\"0\\n1\\n1\\n0\") == \"0\"",
        "num_ids": 435
    },
    {
        "number": 4192,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    time_taken = D / S\n    if time_taken <= T:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1000 15 80\") == \"Yes\"  # sample input 1",
        "num_ids": 462
    },
    {
        "number": 4193,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_bingo(matrix, row, col):\n        return all(matrix[row][j] for j in range(3)) or all(matrix[i][col] for i in range(3)) or \\\n               (row == col and all(matrix[i][i] for i in range(3))) or \\\n               (row + col == 2 and all(matrix[i][2 - i] for i in range(3)))\n\n    def update_matrix(matrix, number):\n        for i in range(3):\n            for j in range(3):\n                if matrix[i][j] == number:\n                    matrix[i][j] = True\n\n    def has_bingo(matrix):\n        for i in range(3):\n            for j in range(3):\n                if is_bingo(matrix, i, j):\n                    return True\n        return False\n\n    lines = stdin.split('\\n')\n    numbers = list(map(int, lines[-1].split()))\n    matrix = [[int(x) for x in line.split()] for line in lines[:-1]]\n\n    for number in numbers:\n        update_matrix(matrix, number)\n        if has_bingo(matrix):\n            return 'Yes'\n    return 'No'",
        "test": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\" ",
        "num_ids": 970
    },
    {
        "number": 4194,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    assignments = sorted(map(int, stdin.split()[2:]), reverse=True)\n\n    if assignments and sum(assignments) > N:\n        return '-1'\n\n    days_left = N\n    for assignment in assignments:\n        if days_left >= assignment:\n            days_left -= assignment\n        else:\n            return '-1'\n\n    return str(days_left)",
        "test": "assert solution(\"10 1\\n100\") == \"-1\"",
        "num_ids": 720
    },
    {
        "number": 4195,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    count = 0\n    result = 0\n    \n    while count < n:\n        result += 1\n        if d == 0:\n            count += 1\n        elif d == 1:\n            if result % 100 == 0:\n                count += 1\n        elif d == 2:\n            if result % 10000 == 0:\n                count += 1\n                \n    return str(result)",
        "test": "assert solution(\"0 5\") == \"5\"",
        "num_ids": 561
    },
    {
        "number": 4196,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    A.sort()\n    max_gcd = gcd(A[0], A[1])\n    for i in range(2, N):\n        max_gcd = gcd(max_gcd, A[i])\n    return max_gcd\n\ndef",
        "test": "assert solution(\"2\\n1000000000 1000000000\") == 1000000000",
        "num_ids": 664
    },
    {
        "number": 4197,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    students = [i for i in range(1, N + 1)]\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            if A[i] > A[j]:\n                students[i], students[j] = students[j], students[i]\n\n    return ' '.join(map(str, students))",
        "test": "assert solution(\"3\\n2 3 1\") == \"3 1 2\" # Sample Input 1",
        "num_ids": 1538
    },
    {
        "number": 4198,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_digits = len(str(X // (A + B)))\n    if max_digits == 0:\n        return \"0\"\n    else:\n        max_price = A * int(\"9\" * max_digits) + B * max_digits\n        if max_price <= X:\n            return str(int(\"9\" * max_digits))\n        else:\n            return \"0\"",
        "test": "assert solution(\"10 7 100\\n\") == \"9\"",
        "num_ids": 628
    },
    {
        "number": 4199,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N, K, *heights = list(map(int, stdin.split()))\n    count = 0\n    for height in heights:\n        if height >= K:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"",
        "num_ids": 476
    },
    {
        "number": 4200,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    A = list(map(int, stdin.split()[2:]))\n    total_votes = sum(A)\n    A.sort(reverse=True)\n    count = 0\n    for i in range(M):\n        if A[i] >= total_votes / (4 * M):\n            count += 1\n        else:\n            break\n    return \"Yes\" if count == M else \"No\"",
        "test": "assert solution(\"5 3\\n100 50 25 10 5\") == \"Yes\"",
        "num_ids": 700
    },
    {
        "number": 4201,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split()[:3])\n    grid = [list(stdin.split()[i]) for i in range(3, 3 + H)]\n    total_black = sum(row.count('#') for row in grid)\n\n    if K > total_black:\n        return \"0\"\n\n    count = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                for k in range(H):\n                    if k != i:\n                        grid[k][j] = '.'\n                for l in range(W):\n                    if l != j:\n                        grid[i][l] = '.'\n                count += 1\n                if count >= K:\n                    return str(count)\n    return str(count)",
        "test": "assert solution(\"2 3 2\\n..#\\n###\") == 5",
        "num_ids": 682
    },
    {
        "number": 4202,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    min_product = float('inf')\n\n    for i in range(L, R):\n        for j in range(i + 1, R + 1):\n            product = (i * j) % 2019\n            min_product = min(min_product, product)\n\n    return str(min_product)",
        "test": "assert solution(\"0 100\") == \"0\"",
        "num_ids": 478
    },
    {
        "number": 4203,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    \n    if len(s) < 4 or len(s) > 10:\n        return \"WA\"\n    \n    if s[0] != \"A\":\n        return \"WA\"\n    \n    if not all(c.isupper() or c.islower() for c in s):\n        return \"WA\"\n    \n    if s[2:].count(\"C\") != 1:\n        return \"WA\"\n    \n    if not all(c.islower() for c in s[1:2] + s[3:-2] + s[-1:]):\n        return \"WA\"\n    \n    return \"AC\"",
        "test": "assert solution(\"AtCoder\") == \"AC\"",
        "num_ids": 627
    },
    {
        "number": 4204,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split('\\n')\n    k = int(k)\n\n    def replace_digits(s: str) -> str:\n        result = ''\n        for digit in s:\n            if digit == '1':\n                result += '1'\n            elif digit == '2':\n                result += '22'\n            elif digit == '3':\n                result += '333'\n            elif digit == '4':\n                result += '4444'\n            elif digit == '5':\n                result += '55555'\n            elif digit == '6':\n                result += '666666'\n            elif digit == '7':\n                result += '7777777'\n            elif digit == '8':\n                result += '88888888'\n            elif digit == '9':\n                result += '999999999'\n        return result\n\n    for _ in range(5 * 10**15):\n        s = replace_digits(s)\n\n    return s[k-1]",
        "test": "assert solution('1\\n1') == '1'",
        "num_ids": 1076
    },
    {
        "number": 4205,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1:]))\n\n    # Check if the sequence is already sorted\n    if p == list(range(1, N+1)):\n        return \"YES\"\n\n    # Check if it's possible to sort the sequence by swapping two elements\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n                if p == list(range(1, N+1)):\n                    return \"YES\"\n                p[i], p[j] = p[j], p[i]\n\n    return \"NO\"",
        "test": "assert solution(\"5\\n5 2 3 4 1\") == \"YES\"",
        "num_ids": 678
    },
    {
        "number": 4206,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if s[0] == '3' or s[0] == '6' or s[0] == '9':\n        return str(n)\n    elif s[0] == '1':\n        return str(n - 1)\n    elif s[0] == '2':\n        if n == 1:\n            return str(n)\n        else:\n            return str(n - 2)\n    elif s[0] == '4':\n        if n == 1:\n            return str(n)\n        else:\n            return str(n - 3)\n    elif s[0] == '5' or s[0] == '7' or s[0] == '8':\n        return str(n - 1)\n    elif s[0] == '0':\n        if n == 1:\n            return str(n)\n        else:\n            return str(n - 2)\n    else:\n        return \"Invalid input\"",
        "test": "assert solution(\"6\") == \"1\"",
        "num_ids": 732
    },
    {
        "number": 4207,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n\n    max_zeroes = 0\n\n    for d in range(-1000000000, 1000000001):\n        zeroes = 0\n        for i in range(n):\n            if abs(d * a[i] + b[i]) < 1e-9:\n                zeroes += 1\n        max_zeroes = max(max_zeroes, zeroes)\n\n    return str(max_zeroes)",
        "test": "assert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == \"3\\n\" ",
        "num_ids": 891
    },
    {
        "number": 4208,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    l = stdin.split('\\n')[1]\n    r = stdin.split('\\n')[2]\n\n    pairs = []\n    for i in range(n):\n        if l[i] == r[i] or l[i] == '?' or r[i] == '?':\n            pairs.append((i, i))\n\n    output = str(len(pairs)) + '\\n'\n    for pair in pairs:\n        output += str(pair[0] + 1) + ' ' + str(pair[1] + 1) + '\\n'\n\n    return output.strip()",
        "test": "assert solution(\"9\\nbambarbia\\nhellocode\") == \"0\"",
        "num_ids": 1329
    },
    {
        "number": 4209,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_blocks(arr):\n        n = len(arr)\n        blocks = []\n        for i in range(n):\n            for j in range(i, n):\n                if arr[i:j+1] == arr[i] * (j - i + 1):\n                    blocks.append((i, j))\n        return blocks\n\n    def is_valid(blocks):\n        for i in range(len(blocks)):\n            for j in range(i + 1, len(blocks)):\n                if blocks[i][1] < blocks[j][0] or blocks[j][1] < blocks[i][0]:\n                    continue\n                else:\n                    return False\n        return True\n\n    def max_blocks(blocks):\n        max_k = 0\n        max_blocks = []\n        for k in range(1, len(blocks) + 1):\n            for comb in itertools.combinations(blocks, k):\n                if is_valid(comb):\n                    max_k = k\n                    max_blocks = comb\n        return max_k, max_blocks\n\n    n, arr = stdin.split('\\n')\n    n = int(n)\n    arr = list(map(int, arr.split()))\n    blocks = find_max_blocks(arr)\n    k, max_blocks = max_blocks(blocks)\n\n    output = str(k) + '\\n'\n    for block in max_blocks:\n        output += f\"{block[0]} {block[1]}\\n\"\n\n    return output.strip()",
        "test": "assert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\\n2 2\\n3 3\\n\"",
        "num_ids": 1543
    },
    {
        "number": 4210,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    \n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if (int(str(a[i]) + str(a[j])) % k) == 0:\n                    count += 1\n                    \n    return str(count)",
        "test": "assert solution(\"5 2\\n3 7 19 3 3\\n\") == \"0\"",
        "num_ids": 619
    },
    {
        "number": 4211,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, B = map(int, stdin.split())\n    A = [0] * N\n\n    for i in range(N - 1):\n        A[i] = max(A[i], B[i] - max(A[i], A[i + 1]))\n        A[i + 1] = max(A[i + 1], B[i] - max(A[i], A[i + 1]))\n\n    A[0] = max(A[0], B[0])\n    A[-1] = max(A[-1], B[-1])\n\n    return sum(A)",
        "test": "assert solution(\"6\\n1 2 3 4 5\") == 20  # (2, 3, 4, 5, 6, 7)",
        "num_ids": 684
    },
    {
        "number": 4212,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split()[:3])\n    quadruples = [list(map(int, stdin.split()))[i:i + 4] for i in range(3, 3 + 4 * Q, 4)]\n    A = [1] * N\n    score = 0\n\n    for quadruple in quadruples:\n        a_i, b_i, c_i, d_i = quadruple\n        if A[a_i - 1] - A[b_i - 1] == c_i:\n            score += d_i\n\n    for i in range(N - 1):\n        A[i + 1] = A[i] + 1\n        for j in range(i + 2, N + 1):\n            A[j - 1] = A[i] + (j - i)\n            for quadruple in quadruples:\n                a_i, b_i, c_i, d_i = quadruple\n                if A[a_i - 1] - A[b_i - 1] == c_i:\n                    score += d_i\n            A[j - 1] = M\n        A[i + 1] = M\n\n    return str(score)\n",
        "test": "assert solution(\"2 4 2\\n1 2 1 10\\n2 2 3 10\") == \"0\"",
        "num_ids": 1301
    },
    {
        "number": 4213,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    N = input_list[0]\n    A = input_list[1:]\n    max_diff = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            diff = abs(A[i] - A[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return str(max_diff)\n",
        "test": "assert solution(\"4\\n1 4 6 3\") == \"5\" # Sample Input 1",
        "num_ids": 502
    },
    {
        "number": 4214,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def distance(x1, y1, x2, y2):\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n    def factorial(n):\n        if n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    N = int(stdin.split('\\n')[0])\n    coords = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    total_distance = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            total_distance += distance(coords[i][0], coords[i][1], coords[j][0], coords[j][1])\n\n    return str(total_distance / factorial(N))",
        "test": "assert solution(\"8\\n0 0\\n1 0\\n0 1\\n1 1\\n0 2\\n1 2\\n0 3\\n1 3\") == \"2.2761423749\"",
        "num_ids": 922
    },
    {
        "number": 4215,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(A, B))",
        "test": "assert solution('12 4') == '4'",
        "num_ids": 272
    },
    {
        "number": 4216,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    # If N is a perfect square, the minimum value of F(A,B) is 1\n    import math\n    if math.sqrt(N).is_integer():\n        return \"1\\nF(A,B) has a minimum value of 1 at (A,B)=(\u221aN, \u221aN).\"\n    \n    # If N has only one digit, the minimum value of F(A,B) is 1\n    if N < 10:\n        return \"1\\nF(A,B) has a minimum value of 1 at (A,B)=(N, 1).\"\n    \n    # Find the minimum value of F(A,B) for N with two or more digits\n    A = 1\n    B = N\n    while A < B:\n        mid = (A + B) // 2\n        if mid * mid < N:\n            A = mid + 1\n        else:\n            B = mid\n            \n    F = max(len(str(A)), len(str(B)))\n    \n    return str(F) + \"\\nF(A,B) has a minimum value of \" + str(F) + \" at (A,B)=(\" + str(A) + \",\" + str(B) + \").\" ",
        "test": "assert solution(\"1000000000\") == \"9\"",
        "num_ids": 868
    },
    {
        "number": 4217,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    foods = [set() for _ in range(M)]\n\n    for i in range(1, N + 1):\n        K_i, *A = map(int, lines[i].split())\n        for j in range(K_i):\n            foods[A[j] - 1].add(i)\n\n    result = 0\n    for food in foods:\n        if len(food) == N:\n            result += 1\n\n    return str(result)\n",
        "test": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\\n2 3 2\") == \"1\"",
        "num_ids": 708
    },
    {
        "number": 4218,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    total_numbers = n\n    odd_numbers = n // 2 + n % 2\n    probability = odd_numbers / total_numbers\n    return f\"{probability:.10f}\"",
        "test": "assert solution(\"4\") == \"0.5000000000\"",
        "num_ids": 444
    },
    {
        "number": 4219,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    def is_inconsistent(honest_set, new_person):\n        for person in honest_set:\n            if person != new_person and person not in honest_set:\n                return True\n        return False\n\n    def find_max_honest_persons(N, A, testimonies):\n        max_honest = 0\n        honest_set = set()\n\n        for i in range(1, N + 1):\n            if i not in honest_set:\n                is_honest = True\n                for j in range(A[i - 1]):\n                    testimony = testimonies[i - 1][j]\n                    if testimony[1] == 1 and testimony[0] not in honest_set:\n                        is_honest = False\n                        break\n                if is_honest:\n                    honest_set.add(i)\n                    if not is_inconsistent(honest_set, i):\n                        max_honest = max(max_honest, len(honest_set))\n\n        return max_honest\n\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    A = [int(a) for a in lines[1:N + 1]]\n    testimonies = []\n    for i in range(N):\n        testimony = []\n        for j in range((i + 1) * N, (i + 1) * N + A[i]):\n            x, y = [int(a) for a in lines[j].split()]\n            testimony.append((x, y))\n        testimonies.append(testimony)\n\n    max_honest = find_max_honest_persons(N, A, testimonies)\n    return str(max_honest)",
        "test": "assert solution(\"6\\n4\\n5 1\\n3 1\\n1 1\\n2 1\\n6\\n2 1\\n4 1\\n1 1\\n5 1\\n3 1\\n6\\n1 1\\n3 1\\n5 1\\n4 1\\n2 1\\n6\\n5 1\\n4 1\\n2 1\\n3 1\\n1 1\\n2 0\\n3 0\\n4 0\\n5 0\\n6\\n3 1\\n2 1\\n4 1\\n5 1\\n6 1\\n1 1\\n6\\n1 0\\n2 0\\n3 0\\n4 0\\n5 0\\n6 0\") == 3",
        "num_ids": 2418
    },
    {
        "number": 4220,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split(\"\\n\")\n    K = int(K)\n\n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + \"...\"",
        "test": "assert solution(\"10\\nhello\") == \"hello\"",
        "num_ids": 364
    },
    {
        "number": 4221,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[-1] == 's':\n        return stdin + 'es'\n    else:\n        return stdin + 's'",
        "test": "assert solution('apple') == 'apples'",
        "num_ids": 327
    },
    {
        "number": 4222,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    snuckes = [[] for _ in range(N)]\n\n    for i in range(K):\n        d_i, *snack_list = map(int, stdin.split())\n        for snack in snack_list:\n            snuckes[snack - 1].append(i + 1)\n\n    victim_count = 0\n    for snucke in snuckes:\n        if not snucke:\n            victim_count += 1\n\n    return str(victim_count)",
        "test": "assert solution(\"2 1\\n2\\n1 2\\n2\\n2 1\\n\") == \"0\"",
        "num_ids": 702
    },
    {
        "number": 4223,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(str, stdin.split())\n    slimes = []\n    i = 0\n    while i < len(S):\n        color = S[i]\n        j = i + 1\n        while j < len(S) and S[j] == color:\n            j += 1\n        slimes.append(color * (j - i))\n        i = j\n    return len(slimes)",
        "test": "assert solution('10\\naabbbbaaca') == 5",
        "num_ids": 539
    },
    {
        "number": 4224,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = list(map(int, stdin.split()))\n    count = 0\n\n    for i in range(N):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n            count += 1\n        elif a[i] % 3 == 0:\n            a[i] //= 3\n            count += 1\n\n    for i in range(N):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n            count += 1\n        elif a[i] % 3 == 0:\n            a[i] //= 3\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"3\\n5 2 4\") == \"3\"",
        "num_ids": 845
    },
    {
        "number": 4225,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    \n    # Calculate the maximum possible sum\n    max_sum = K * 1\n    if A + B + C > K:\n        if A > 0 and B > 0:\n            max_sum = max(max_sum, A + B - 1)\n        elif A > 0 and C > 0:\n            max_sum = max(max_sum, A + C)\n        elif B > 0 and C > 0:\n            max_sum = max(max_sum, B + C)\n            \n    return str(max_sum)",
        "test": "assert solution(\"0 1 0 1\") == 0",
        "num_ids": 577
    },
    {
        "number": 4226,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    \n    for i in range(X + 1):\n        j = X - i\n        if i * 2 + j * 4 == Y:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert solution('3 8') == 'Yes'",
        "num_ids": 362
    },
    {
        "number": 4227,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(node, visited):\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                dfs(neighbor, visited)\n\n    N, M = map(int, stdin.readline().split())\n    graph = [[] for _ in range(N + 1)]\n\n    for _ in range(M):\n        a, b = map(int, stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n\n    visited = [False] * (N + 1)\n    dfs(1, visited)\n\n    return sum(visited[1:]) - 1",
        "test": "assert solution(\"8 12\\n1 2\\n1 3\\n2 4\\n3 5\\n4 5\\n5 6\\n6 8\\n7 8\\n1 7\\n1 8\\n2 6\\n1 6\") == \"28\"",
        "num_ids": 1210
    },
    {
        "number": 4228,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = [L + i - 1 for i in range(1, N + 1)]\n    apples.sort()\n    remaining_flavor = sum(apples[1:])\n    return str(remaining_flavor)",
        "test": "assert solution('5 2') == '18'",
        "num_ids": 506
    },
    {
        "number": 4229,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    fizzbuzz_sequence = []\n    for i in range(1, N + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            fizzbuzz_sequence.append(\"FizzBuzz\")\n        elif i % 3 == 0:\n            fizzbuzz_sequence.append(\"Fizz\")\n        elif i % 5 == 0:\n            fizzbuzz_sequence.append(\"Buzz\")\n        else:\n            fizzbuzz_sequence.append(str(i))\n\n    numbers_sum = sum(int(x) for x in fizzbuzz_sequence if x.isdigit())\n    return str(numbers_sum)",
        "test": "assert solution(\"15\") == \"60\"",
        "num_ids": 486
    },
    {
        "number": 4230,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    X, N = map(int, stdin.split()[:2])\n    p = list(map(int, stdin.split()[2:]))\n\n    # Find the nearest integer not in the sequence\n    min_diff = float('inf')\n    nearest_int = X\n    for i in range(X - 100, X + 101):\n        if i not in p and abs(i - X) < min_diff:\n            min_diff = abs(i - X)\n            nearest_int = i\n\n    return str(nearest_int)",
        "test": "assert solution(\"5 4\\n1 3 2 4\") == \"5\"",
        "num_ids": 767
    },
    {
        "number": 4231,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    H, W, h, w = map(int, stdin.split())\n    return str((H - h) * (W - w))",
        "test": "assert solution(\"3 2\\n2 1\") == \"1\"",
        "num_ids": 277
    },
    {
        "number": 4232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sequence = list(map(int, input().split()))\n\n    def count_less_or_equal(x: int, sequence: list, k: int) -> int:\n        return sum(1 for i in sequence if i <= x) >= k\n\n    left, right = 1, 10**9\n    while left < right:\n        mid = (left + right) // 2\n        if count_less_or_equal(mid, sequence, k):\n            left = mid + 1\n        else:\n            right = mid\n\n    if count_less_or_equal(left, sequence, k):\n        return str(left)\n    else:\n        return \"-1\"\n\nn, k = map(int, input().split())\nsequence = list(map(int, input().split()))\nprint(solution(f\"{n} {k}\")) ",
        "test": "assert solution(\"10 0\\n2 2 2 2 2 2 2 2 2 2 2\") == \"-1\"",
        "num_ids": 803
    },
    {
        "number": 4233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_star(x, y, size, grid):\n        for i in range(x - size, x + size + 1):\n            for j in range(y - size, y + size + 1):\n                if 0 <= i < len(grid) and 0 <= j < len(grid[0]) and (i != x or j != y) and grid[i][j] != '.':\n                    return False\n        return True\n\n    n, m = map(int, stdin.split()[0].split())\n    grid = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n    stars = []\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                for size in range(1, min(n - i, m - j) + 1):\n                    if is_valid_star(i, j, size, grid):\n                        stars.append((i, j, size))\n\n    if len(stars) <= n * m:\n        output = [str(len(stars))] + [' '.join(map(str, star)) for star in stars]\n        return '\\n'.join(output)\n    else:\n        return \"-1\"",
        "test": "assert solution(\"3 3\\n*.*\\n***\\n*.*\\n.....\") == \"-1\" ",
        "num_ids": 1287
    },
    {
        "number": 4234,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    def is_good(s: str) -> bool:\n        if len(s) % 2 != 0:\n            return False\n        for i in range(1, len(s), 2):\n            if s[i - 1] == s[i]:\n                return False\n        return True\n\n    if is_good(s):\n        return f\"0\\n{s}\"\n\n    for i in range(n):\n        new_s = s[:i] + s[i + 1:]\n        if is_good(new_s):\n            return f\"{n - len(new_s)}\\n{new_s}\"\n\n    return f\"{n}\\n\"\n",
        "test": "assert solution(\"3\\naaa\") == \"3\\ndef\"",
        "num_ids": 768
    },
    {
        "number": 4235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def is_cyclic(graph, visited, rec_stack, edge, start):\n        visited[start] = True\n        rec_stack[start] = True\n\n        for neighbor in graph[start]:\n            if not visited[neighbor]:\n                if is_cyclic(graph, visited, rec_stack, edge, neighbor):\n                    return True\n            elif rec_stack[neighbor]:\n                if edge[0] != start or edge[1] != neighbor:\n                    return True\n\n        rec_stack[start] = False\n        return False\n\n    def create_graph(n, edges):\n        graph = [[] for _ in range(n + 1)]\n        for edge in edges:\n            graph[edge[0]].append(edge[1])\n            graph[edge[1]].append(edge[0])\n        return graph\n\n    n, m = map(int, stdin.readline().split())\n    edges = [list(map(int, stdin.readline().split())) for _ in range(m)]\n\n    graph = create_graph(n, edges)\n    visited = [False] * (n + 1)\n    rec_stack = [False] * (n + 1)\n\n    for i in range(1, n + 1):\n        if not visited[i]:\n            if is_cyclic(graph, visited, rec_stack, edges[0], i):\n                return \"NO\"\n\n    return \"YES\\n\" + \"\".join(str(1 - edge[2]) for edge in edges)\n",
        "test": "assert solution(\"2 1\\n1 2\") == \"YES\\n0\"",
        "num_ids": 1398
    },
    {
        "number": 4236,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n\n    points = set(range(1, m + 1))\n    for segment in segments:\n        l, r = segment\n        points -= set(range(l, r + 1))\n\n    if not points:\n        return \"0\"\n\n    return f\"{len(points)}\\n{' '.join(map(str, sorted(points)))}\"",
        "test": "assert solution(\"1 7\\n1 7\\n\") == \"0\"",
        "num_ids": 543
    },
    {
        "number": 4237,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n\n    for i in range(A, B + 1):\n        if i % C != 0 and i % D != 0:\n            count += 1\n\n    return str(count)\n",
        "test": "assert solution(\"4 9 2 3\") == \"2\"",
        "num_ids": 477
    },
    {
        "number": 4238,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits_sum = sum(map(int, str(n)))\n    return \"Yes\" if digits_sum % 9 == 0 else \"No\"",
        "test": "assert solution(\"123456789\") == \"Yes\"",
        "num_ids": 386
    },
    {
        "number": 4239,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n <= 9:\n        return \"1\"\n    if n == 10:\n        return \"2\"\n    if n % 6 == 0:\n        return str(n // 6 + 1)\n    if n % 9 == 0:\n        return str(n // 9 + 1)\n    if n % 6 == 1 and n // 6 % 2 == 0:\n        return str(n // 6 + 2)\n    if n % 9 == 1 and n // 9 % 2 == 0:\n        return str(n // 9 + 2)\n    if n % 6 == 1 and n // 6 % 2 == 1:\n        return str(n // 6 + 3)\n    if n % 9 == 1 and n // 9 % 2 == 1:\n        return str(n // 9 + 3)\n    return str(n // 6 + 1)",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 797
    },
    {
        "number": 4240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    \n    # Check if S and T are equal\n    if S == T:\n        return \"Yes\"\n    \n    # Check if S and T are the same after rotation\n    S = S + S\n    if T in S:\n        return \"Yes\"\n    \n    return \"No\"",
        "test": "assert solution(\"zabcd\") == \"Yes\"",
        "num_ids": 333
    },
    {
        "number": 4241,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    len_s, len_t = len(s), len(t)\n    min_changes = float('inf')\n\n    for i in range(len_s - len_t + 1):\n        changes = 0\n        for j in range(len_t):\n            if s[i + j] != t[j]:\n                changes += 1\n        min_changes = min(min_changes, changes)\n\n    return min_changes\n",
        "test": "assert solution(\"world\\nworl\") == 0",
        "num_ids": 425
    },
    {
        "number": 4242,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    factors = []\n\n    for i in range(1, min(A, B) + 1):\n        if A % i == 0 and B % i == 0:\n            factors.append(i)\n\n    return str(factors[-K])",
        "test": "assert solution(\"8 12 2\") == \"2\"",
        "num_ids": 590
    },
    {
        "number": 4243,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n\n    # Calculate the number of 500-yen coins that can be exchanged\n    num_500_yen_coins = X // 500\n\n    # Calculate the remaining amount after exchanging the 500-yen coins\n    remaining_amount = X % 500\n\n    # Calculate the number of 100-yen coins that can be exchanged\n    num_100_yen_coins = remaining_amount // 100\n\n    # Calculate the remaining amount after exchanging the 100-yen coins\n    remaining_amount = remaining_amount % 100\n\n    # Calculate the number of 50-yen coins that can be exchanged\n    num_50_yen_coins = remaining_amount // 50\n\n    # Calculate the remaining amount after exchanging the 50-yen coins\n    remaining_amount = remaining_amount % 50\n\n    # Calculate the number of 10-yen coins that can be exchanged\n    num_10_yen_coins = remaining_amount // 10\n\n    # Calculate the remaining amount after exchanging the 10-yen coins\n    remaining_amount = remaining_amount % 10\n\n    # Calculate the number of 5-yen coins that can be exchanged\n    num_5_yen_coins = remaining_amount // 5\n\n    # Calculate the remaining amount after exchanging the 5-yen coins\n    remaining_amount = remaining_amount % 5\n\n    # Calculate the number of 1-yen coins that can be exchanged\n    num_1_yen_coins = remaining_amount\n\n    # Calculate the total number of happiness points earned\n    total_happiness_points = (num_500_yen_coins * 1000) + (num_5_yen_coins * 5)\n\n    return str(total_happiness_points)",
        "test": "assert solution(1) == 1",
        "num_ids": 847
    },
    {
        "number": 4244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    X = sorted(list(map(int, X.split())))\n    min_stamina = float('inf')\n\n    for i in range(X[0], X[-1] + 1):\n        stamina = sum([(x - i) ** 2 for x in X])\n        min_stamina = min(min_stamina, stamina)\n\n    return str(min_stamina)",
        "test": "assert solution(\"5\\n10 20 30 40 50\") == 2900",
        "num_ids": 683
    },
    {
        "number": 4245,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_power_strips = (B - 1) // A + 1\n    return str(min_power_strips)",
        "test": "assert solution(\"4 10\") == \"3\"",
        "num_ids": 426
    },
    {
        "number": 4246,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    count = 0\n    for i in range(len(S)):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)",
        "test": "assert solution('CSS\\nCSR') == '2'",
        "num_ids": 363
    },
    {
        "number": 4247,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, *p = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, n - 1):\n        if p[i] < p[i - 1] and p[i] < p[i + 1]:\n            count += 1\n    return str(count)",
        "test": "assert solution('4\\n4 3 2 1') == '0'",
        "num_ids": 580
    },
    {
        "number": 4248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    def distance(a, b):\n        return ((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2) ** 0.5\n\n    def min_distance(points):\n        points.sort(key=lambda x: x[0])\n        min_dist = float('inf')\n        for i in range(len(points) - 1):\n            j = i + 1\n            while j < len(points) and points[j][0] - points[i][0] < min_dist:\n                min_dist = distance(points[i], points[j])\n                j += 1\n        return min_dist\n\n    n = int(stdin.readline().strip())\n    points = [tuple(map(float, line.strip().split())) for line in stdin]\n    result = min_distance(points)\n    return f'{result:.3f}'",
        "test": "assert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.040\"",
        "num_ids": 1912
    },
    {
        "number": 4249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def drink_coffee(caffeine_list: List[int]) -> int:\n        total_caffeine = sum(caffeine_list)\n        pages_written = 0\n        for i, caffeine in enumerate(caffeine_list, start=1):\n            pages_written += max(0, caffeine - i + 1)\n        return pages_written\n\n    def binary_search(n: int, m: int, caffeine_list: List[int]) -> int:\n        left, right = 1, n\n        while left <= right:\n            mid = (left + right) // 2\n            if drink_coffee(caffeine_list[:mid]) >= m:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n\n    n, m = map(int, stdin.readline().split())\n    caffeine_list = list(map(int, stdin.readline().split()))\n\n    result = binary_search(n, m, caffeine_list)\n    return str(result) if result <= n else \"-1\"",
        "test": "assert solution('5 16\\n5 5 5 5 5') == '2'",
        "num_ids": 982
    },
    {
        "number": 4250,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = list(map(int, stdin.readline().split()))\n\n    from collections import Counter\n    c = Counter(s)\n\n    t = []\n    for i in range(k):\n        if not c:\n            break\n        most_common = c.most_common()\n        t.append(most_common[0][0])\n        c[most_common[0][0]] -= 1\n        if c[most_common[0][0]] == 0:\n            del c[most_common[0][0]]\n\n    return ' '.join(map(str, t))",
        "test": "assert solution([\"15 2\", \"1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\"]) == \"1 1\"",
        "num_ids": 1014
    },
    {
        "number": 4251,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = [list(map(int, stdin.split()[i * m + 2:i * m + m + 2])) for i in range(n)]\n\n    def is_k_acceptable(k: int) -> bool:\n        for i in range(1, nm):\n            if abs(s[i] - s[i - 1]) < k:\n                return False\n        return True\n\n    s = []\n    for j in range(m):\n        for i in range(n):\n            s.append(a[i][j])\n\n    nm = n * m\n    left, right = 0, nm - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if is_k_acceptable(mid):\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return str(right)",
        "test": "assert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"",
        "num_ids": 1018
    },
    {
        "number": 4252,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, filename = stdin.split('\\n')\n    n = int(n)\n\n    def count_xxx(s: str) -> int:\n        count = 0\n        for i in range(len(s) - 2):\n            if s[i:i + 3] == 'xxx':\n                count += 1\n        return count\n\n    if count_xxx(filename) == 0:\n        return 0\n\n    min_count = float('inf')\n    for i in range(n):\n        new_filename = filename[:i] + filename[i + 1:]\n        count = count_xxx(new_filename)\n        if count == 0:\n            min_count = min(min_count, 1)\n        else:\n            min_count = min(min_count, count)\n\n    return str(min_count)",
        "test": "assert solution(\"6\\nxxxiii\") == \"1\"",
        "num_ids": 523
    },
    {
        "number": 4253,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r**2\n    return str(area)",
        "test": "assert solution(1) == 3",
        "num_ids": 230
    },
    {
        "number": 4254,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    \n    if W >= S:\n        return \"unsafe\"\n    else:\n        return \"safe\"",
        "test": "assert solution(\"4 5\") == \"unsafe\"",
        "num_ids": 398
    },
    {
        "number": 4255,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    ab, bc, ca = map(int, stdin.split())\n    area = 0.5 * ab * bc\n    return str(int(area))",
        "test": "assert solution('3 4 5') == '6'",
        "num_ids": 410
    },
    {
        "number": 4256,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    count = b // a\n    if count > c:\n        count = c\n        \n    return str(count)",
        "test": "assert solution(\"2 11 4\") == \"4\"",
        "num_ids": 334
    },
    {
        "number": 4257,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = A * B\n    return str(result)",
        "test": "assert solution(\"2 5\") == \"10\"",
        "num_ids": 277
    },
    {
        "number": 4258,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n\n    count = 0\n    for i in range(1, T+1):\n        if i % A == 0:\n            count += B\n\n    return str(count)",
        "test": "assert solution(\"3 5 7\") == \"10\"",
        "num_ids": 381
    },
    {
        "number": 4259,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n\n    for i in range(A, B + 1):\n        if i % K == 0:\n            return \"OK\"\n    return \"NG\"\n",
        "test": "assert solution('7\\n500 600') == 'OK'",
        "num_ids": 417
    },
    {
        "number": 4260,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    return \"{:.10f}\".format(T / X)",
        "test": "assert solution('1 1') == '1.0000000000'",
        "num_ids": 401
    },
    {
        "number": 4261,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    transfer_amount = min(B, A - B)\n    return str(C - transfer_amount)",
        "test": "assert solution('20 20 0') == '0'",
        "num_ids": 337
    },
    {
        "number": 4262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = map(lambda x: list(map(int, x.strip().split())), stdin.split('\\n'))\n    a, b = sorted([P, Q], key=lambda x: [str(x).zfill(N)]).index(P) + 1, sorted([P, Q], key=lambda x: [str(x).zfill(N)]).index(Q) + 1\n    return abs(a - b)",
        "test": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\" ",
        "num_ids": 804
    },
    {
        "number": 4263,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    max_len = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            sub_str = s[i:j]\n            if all(c in \"ACGT\" for c in sub_str):\n                max_len = max(max_len, len(sub_str))\n    return max_len",
        "test": "assert solution(\"ATCODER\") == 3, \"ATCODER\"",
        "num_ids": 502
    },
    {
        "number": 4264,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N + 1):\n        if len(str(i)) % 2 != 0:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"11\") == \"9\"",
        "num_ids": 382
    },
    {
        "number": 4265,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    count = 0\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            count += 1\n    return count ",
        "test": "assert solution('abcdefghijklmnopqrstuvwxyz\\nabcdefghijklmnopqrstuvwxyz') == 0",
        "num_ids": 428
    },
    {
        "number": 4266,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    start = max(1, X - K)\n    end = min(1000000, X + K)\n    result = [str(i) for i in range(start, end + 1)]\n    return \" \".join(result)",
        "test": "assert solution(\"2 1000000\") == \"999998 999999 1000000\"",
        "num_ids": 635
    },
    {
        "number": 4267,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"25\") == \"No\"",
        "num_ids": 260
    },
    {
        "number": 4268,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    def distance(x, y):\n        return round(sum((x[i] - y[i]) ** 2 for i in range(len(x))) ** 0.5)\n\n    def is_integer(x):\n        return round(x) == x\n\n    data = list(map(int, stdin.split()))\n    N, D = data[0], data[1]\n    points = [tuple(data[2 + i * D: 2 + (i + 1) * D]) for i in range(N)]\n\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if is_integer(distance(points[i], points[j])):\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n\") == \"6\" ",
        "num_ids": 971
    },
    {
        "number": 4269,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    code = stdin.strip()\n    if len(code) != 4:\n        raise ValueError(\"The security code should be a 4-digit number.\")\n    if any(code[i] == code[i + 1] for i in range(3)):\n        return \"Bad\"\n    else:\n        return \"Good\"",
        "test": "assert solution(\"3776\") == \"Bad\"",
        "num_ids": 352
    },
    {
        "number": 4270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, *v = list(map(int, stdin.split()))\n    v.sort()\n    max_value = (v[0] + v[-1]) / 2\n    for i in range(n - 2):\n        max_value = (max_value + v[i + 1]) / 2\n    return f\"{max_value:.5f}\"\n\nstdin = \"2\\n3 4\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"1\\n5\\n\") == \"5\"",
        "num_ids": 523
    },
    {
        "number": 4271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    C = list(map(int, lines[3].split()))\n\n    # Calculate satisfaction points\n    points = 0\n    for i in range(N):\n        points += B[A[i] - 1]\n        if i > 0:\n            points += C[A[i - 1] - 1]\n\n    return str(points)",
        "test": "assert solution(\"5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4\") == 50  # Sample Input 3",
        "num_ids": 631
    },
    {
        "number": 4272,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split('\\n')\n    N = int(N)\n    count = 0\n    for i in range(N-2):\n        if S[i:i+3] == \"ABC\":\n            count += 1\n    return str(count)",
        "test": "assert solution(\"10\\nZABCDBABCQ\") == \"2\"",
        "num_ids": 333
    },
    {
        "number": 4273,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, *names = stdin.split(\"\\n\")\n    n = int(n)\n\n    name_count = {\"M\": 0, \"A\": 0, \"R\": 0, \"C\": 0, \"H\": 0}\n\n    for name in names:\n        if name[0] in name_count:\n            name_count[name[0]] += 1\n\n    total_count = 0\n\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (\n                    names[i - 1][0] != names[j - 1][0]\n                    and names[i - 1][0] != names[k - 1][0]\n                    and names[j - 1][0] != names[k - 1][0]\n                ):\n                    total_count += 1\n\n    return str(total_count)",
        "test": "assert solution(\"3\\nAMOS\\nMAKOTO\\nHOKAGE\") == \"1\"",
        "num_ids": 1212
    },
    {
        "number": 4274,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if M == N:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"3 3\") == \"Yes\"",
        "num_ids": 278
    },
    {
        "number": 4275,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(S) != 6:\n        return \"No\"\n    if S[2] == S[3] and S[4] == S[5]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"sippuu\") == \"Yes\"",
        "num_ids": 328
    },
    {
        "number": 4276,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, T = map(int, lines[0].split())\n    routes = []\n    for i in range(1, N + 1):\n        c, t = map(int, lines[i].split())\n        if t <= T:\n            routes.append((c, t))\n    if not routes:\n        return \"TLE\"\n    routes.sort(key=lambda x: x[0])\n    return str(routes[0][0])",
        "test": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"",
        "num_ids": 909
    },
    {
        "number": 4277,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    train_cost = N * A\n    total_cost = train_cost + B\n    return str(min(train_cost, total_cost))",
        "test": "assert solution(\"4 2 9\") == \"8\"",
        "num_ids": 488
    },
    {
        "number": 4278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    strings = stdin.split('\\n')[1:]\n    anagram_count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if sorted(strings[i]) == sorted(strings[j]):\n                anagram_count += 1\n    return str(anagram_count)",
        "test": "assert solution(\"6\\nklm\\nqwe\\nnbv\\nert\\nasd\\nzxc\") == 0, \"Test case failed\"",
        "num_ids": 671
    },
    {
        "number": 4279,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    def get_number(k):\n        if k < 1:\n            return 0\n        i = 1\n        while k > i * (i + 1) // 2:\n            k -= i * (i + 1) // 2\n            i += 1\n        return i - 1 + k\n\n    def get_digit(k):\n        n = get_number(k)\n        if n == 0:\n            return 0\n        x = 10 ** (int(n * (n + 1) / 2) - n + 1)\n        return int(str(x * (n + 1))[-n])\n\n    q = int(stdin.split(\"\\n\")[0])\n    k_list = [int(x) for x in stdin.split(\"\\n\")[1:]]\n    return \"\\n\".join([str(get_digit(k)) for k in k_list])",
        "test": "assert solution(\"1\\n10\") == \"0\"",
        "num_ids": 942
    },
    {
        "number": 4280,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_city(city, r, adj_list):\n        companies = set()\n        for road in adj_list[city]:\n            companies.add(road[1])\n        return len(companies) <= r\n\n    def bfs(start, visited, adj_list):\n        queue = [(start, 0)]\n        visited[start] = True\n\n        while queue:\n            current, level = queue.pop(0)\n            for road in adj_list[current]:\n                if not visited[road[0]]:\n                    queue.append((road[0], level + 1))\n                    visited[road[0]] = True\n                    if level + 1 > k:\n                        return False\n        return True\n\n    n, k = map(int, stdin.readline().strip().split())\n    roads = [list(map(int, stdin.readline().strip().split())) for _ in range(n - 1)]\n\n    adj_list = [[] for _ in range(n + 1)]\n    for i, road in enumerate(roads):\n        adj_list[road[0]].append((road[1], i % 2 + 1))\n        adj_list[road[1]].append((road[0], i % 2 + 1))\n\n    r = 1\n    while True:\n        if all(is_good_city(city, r, adj_list) for city in range(1, n + 1)):\n            break\n        r += 1\n\n    output = [0] * (n - 1)\n    for i, road in enumerate(roads):\n        output[i] = min(road) * r + (i % 2 + 1)\n\n    return f\"{r}\\n{' '.join(map(str, output))}\\n\" ",
        "test": "assert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\\n1 1 2 3 2 3 1 3 1\" ",
        "num_ids": 1891
    },
    {
        "number": 4281,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    x = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    min_houses = max(max(x) - min(x) + 1, len(set(x)))\n    max_houses = max(max(x) - min(x) + 3, len(set(x)))\n\n    return f\"{min_houses} {max_houses}\"",
        "test": "assert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"",
        "num_ids": 616
    },
    {
        "number": 4282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    adj_list = [[] for _ in range(n)]\n    kids_info = []\n    for _ in range(n):\n        a1, a2 = map(int, stdin.readline().strip().split())\n        adj_list[a1 - 1].append(a2 - 1)\n        adj_list[a2 - 1].append(a1 - 1)\n        kids_info.append((a1, a2))\n\n    def dfs(node, visited, order):\n        if node not in visited:\n            visited.add(node)\n            for neighbor in adj_list[node]:\n                if neighbor not in visited:\n                    dfs(neighbor, visited, order)\n            order.append(node)\n\n    order = []\n    dfs(0, set(), order)\n    order = order[::-1]\n\n    kid_to_index = {}\n    for i, kid in enumerate(order):\n        kid_to_index[kid] = i\n\n    for i in range(n):\n        a1, a2 = kids_info[i]\n        a1_index = kid_to_index[a1 - 1]\n        a2_index = kid_to_index[a2 - 1]\n        if a1_index > a2_index:\n            a1, a2 = a2, a1\n        kids_info[i] = (a1, a2)\n\n    for i in range(n):\n        a1, a2 = kids_info[i]\n        a1_index = kid_to_index[a1 - 1]\n        a2_index = kid_to_index[a2 - 1]\n        if a1_index > a2_index:\n            a1, a2 = a2, a1\n        kids_info[i] = (a1, a2)\n\n    def find_cycle(node, visited, cycle):\n        visited.add(node)\n        cycle.append(node)\n        for neighbor in adj_list[node]:\n            if neighbor not in visited:\n                find_cycle(neighbor, visited, cycle)\n        return cycle\n\n    visited = set()\n    for node in range(n):\n        if node not in visited:\n            cycle = find_cycle(node, visited, [])\n            if len(cycle) != n:\n                adj_list = [[] for _ in range(n)]\n                for i in range(n):\n                    a1, a2 = kids_info[i]\n                    adj_list[a1 - 1].append(a2 - 1)\n                    adj_list[a2 - 1].append(a1 - 1)\n                order = []\n                dfs(cycle[0], set(), order)\n                order = order[::-1]\n                order = cycle + order\n                return ' '.join(map(str, order))\n\n    return ' '.join(map(str, order))\n\ndef",
        "test": "assert solution(\"3\\n2 3\\n3 1\\n1 2\") == \"3 1 2\"",
        "num_ids": 1471
    },
    {
        "number": 4283,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n\n    a.sort()\n\n    max_students = 0\n\n    for i in range(n):\n        j = i + 1\n        k = n - 1\n\n        while j < k:\n            if abs(a[i] - a[j]) <= 5 and abs(a[i] - a[k]) <= 5:\n                max_students = max(max_students, k - i + 1)\n                break\n            elif abs(a[i] - a[j]) > 5:\n                k -= 1\n            else:\n                j += 1\n\n    return str(max_students)",
        "test": "assert solution(\"6\\n1 10 17 12 15 2\\n\") == \"3\"",
        "num_ids": 846
    },
    {
        "number": 4284,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n_queries = int(lines[0])\n\n    def can_complete_game(k, n, a, b):\n        total_turns = 0\n        for _ in range(n):\n            if k > a:\n                k -= a\n                total_turns += 1\n            elif k > b:\n                k -= b\n            else:\n                return -1, total_turns\n        return k, total_turns\n\n    results = []\n    for i in range(1, n_queries + 1):\n        k, n, a, b = map(int, lines[i].split())\n        result, turns = can_complete_game(k, n, a, b)\n        results.append(turns if result != -1 else -1)\n\n    return \"\\n\".join(map(str, results))",
        "test": "assert solution(\"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\" ",
        "num_ids": 838
    },
    {
        "number": 4285,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    MOD = 10**9 + 7\n\n    def count_subsequences(s):\n        dp = [0] * 3\n        for c in s:\n            dp = [dp[1], dp[2], dp[0] + dp[1] + dp[2]]\n            if c == 'a':\n                dp[0] += 1\n            elif c == 'b':\n                dp[1] += 1\n            elif c == 'c':\n                dp[2] += 1\n        return dp[0] + dp[1] + dp[2]\n\n    total = 0\n    for i in range(n):\n        if s[i] == '?':\n            total *= 3\n            total %= MOD\n        else:\n            total *= count_subsequences(s[i:])\n            total %= MOD\n\n    return total",
        "test": "assert solution(\"5\\n?????c\") == \"46\"",
        "num_ids": 822
    },
    {
        "number": 4286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def kruskal(parent, rank, edges):\n        mst, i = [], 0\n        edges.sort(key=lambda x: x[2])\n        for edge in edges:\n            if find(parent, edge[0]) != find(parent, edge[1]):\n                mst.append(edge)\n                union(parent, rank, edge[0], edge[1])\n                i += 1\n                if i == n - 1:\n                    break\n        return mst\n\n    def find(parent, i):\n        if parent[i] == i:\n            return i\n        return find(parent, parent[i])\n\n    def union(parent, rank, x, y):\n        xroot = find(parent, x)\n        yroot = find(parent, y)\n        if xroot == yroot:\n            return\n        if rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    edges = []\n    for i in range(2, 2 + m):\n        x, y, w = map(int, lines[i].split())\n        edges.append((x - 1, y - 1, w))\n\n    parent = [i for i in range(n)]\n    rank = [0] * n\n    mst = kruskal(parent, rank, edges)\n    return sum(mst[i][2] for i in range(n - 1))",
        "test": "assert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\\n\") == 18 ",
        "num_ids": 1773
    },
    {
        "number": 4287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m, rain, umbrellas = parse_input(stdin)\n    fatigue = [0] * (a + 1)\n    for i in range(1, a + 1):\n        umbrella_fatigue = sum(p for x, p in umbrellas if x <= i)\n        if any(l <= i <= r for l, r in rain):\n            if umbrella_fatigue == 0:\n                return \"-1\"\n            fatigue[i] = umbrella_fatigue\n        else:\n            fatigue[i] = umbrella_fatigue\n    return str(sum(fatigue))\n\ndef",
        "test": "assert solution(\"\"\"10 2 4",
        "num_ids": 1114
    },
    {
        "number": 4288,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n\n    if (A == B and A != C) or (A == C and A != B) or (B == C and B != A):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"5 7 5\") == \"Yes\"  # A = 5, B = 7, C = 5 -> poor",
        "num_ids": 487
    },
    {
        "number": 4289,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, T, A, H = map(int, stdin.split())\n    closest_diff = float('inf')\n    closest_index = -1\n\n    for i in range(N):\n        avg_temp = T - H[i] * 0.006\n        diff = abs(avg_temp - A)\n\n        if diff < closest_diff:\n            closest_diff = diff\n            closest_index = i\n\n    return str(closest_index + 1)\n",
        "test": "assert solution(\"5\\n12 5\\n1000 2000 5000 2500 3000\\n\") == \"3\\n\"",
        "num_ids": 759
    },
    {
        "number": 4290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str((n * (n - 1)) // 2)",
        "test": "assert solution(\"100 100\") == 4950",
        "num_ids": 436
    },
    {
        "number": 4291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    def count_substring(s: str, l: int, r: int) -> int:\n        return s.count(\"AC\")\n\n    lines = stdin.split(\"\\n\")\n    N, Q = map(int, lines[0].split())\n    S = lines[1]\n    queries = [list(map(int, line.split())) for line in lines[2:]]\n\n    result = []\n    for l, r in queries:\n        result.append(count_substring(S[l - 1:r], l, r))\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"8 3\\nACACTACG\\n3 7\\n2 3\\n1 8\") == \"2\\n0\\n3\"",
        "num_ids": 746
    },
    {
        "number": 4292,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    prices = list(map(int, stdin.split()[2:]))\n    prices.sort()\n    total_price = sum(prices[:K])\n    return str(total_price)",
        "test": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"",
        "num_ids": 619
    },
    {
        "number": 4293,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    p, q, r = list(map(int, stdin.split()))\n\n    a_b_c = p + q\n    a_c_c = p + r\n    b_a_c = q + r\n    b_c_a = q + p\n    c_a_b = r + p\n    c_b_a = r + q\n\n    min_sum = min(a_b_c, a_c_c, b_a_c, b_c_a, c_a_b, c_b_a)\n\n    return str(min_sum)\n",
        "test": "assert solution('1 3 4') == '4'",
        "num_ids": 609
    },
    {
        "number": 4294,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x < a:\n        return '0'\n    return '10'",
        "test": "assert solution(\"3 5\") == \"0\"",
        "num_ids": 273
    },
    {
        "number": 4295,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n\n    while N != 0:\n        N = abs(N - K)\n\n    return str(N)",
        "test": "assert solution('10000000000000000 10000000000000000') == '0'",
        "num_ids": 425
    },
    {
        "number": 4296,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    total = A_1 + A_2 + A_3\n    if total >= 22:\n        return \"bust\"\n    else:\n        return \"win\"",
        "test": "assert solution(\"5 7 9\") == \"win\"",
        "num_ids": 377
    },
    {
        "number": 4297,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lcm = n * 2\n    while True:\n        if lcm % n == 0:\n            break\n        lcm += 2\n    return str(lcm)",
        "test": "assert solution(\"3\") == \"6\"",
        "num_ids": 258
    },
    {
        "number": 4298,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    inspectors = 0\n\n    for i in range(1, N):\n        if i + D > N:\n            break\n        inspectors += 1\n        D += 1\n\n    return str(inspectors)",
        "test": "assert solution(\"6 2\") == \"2\"",
        "num_ids": 353
    },
    {
        "number": 4299,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    last_digit = n % 10\n    if last_digit in [2, 4, 5, 7, 9]:\n        return \"hon\"\n    elif last_digit in [0, 1, 6, 8]:\n        return \"pon\"\n    elif last_digit == 3:\n        return \"bon\"",
        "test": "assert solution(\"2\") == \"hon\"",
        "num_ids": 422
    },
    {
        "number": 4300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    N, *deliciousness = list(map(int, stdin.split()))\n    total_health_points = 0\n    \n    for i in range(N):\n        for j in range(i + 1, N):\n            total_health_points += deliciousness[i] * deliciousness[j]\n            \n    return str(total_health_points)",
        "test": "assert solution(\"2\\n1 1\") == 1",
        "num_ids": 501
    },
    {
        "number": 4301,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    res = []\n\n    for i in range(N):\n        max_val = 0\n        for j in range(N):\n            if j != i:\n                max_val = max(max_val, A[j])\n        res.append(max_val)\n\n    return \"\\n\".join(map(str, res)) + \"\\n\"\n",
        "test": "assert solution(\"3\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\\n\"",
        "num_ids": 565
    },
    {
        "number": 4302,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = max(A, B) + max(A - 1, B)\n    return str(coins)",
        "test": "assert solution(\"5 3\") == \"9\"",
        "num_ids": 296
    },
    {
        "number": 4303,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, K, *x = map(int, stdin.split())\n    x.sort()\n    time = 0\n    lit = 0\n    current = 0\n\n    for i in range(N):\n        if lit == K:\n            break\n        time += abs(current - x[i])\n        current = x[i]\n        lit += 1\n\n    return str(time)",
        "test": "assert solution(\"1 1\\n0\") == \"0\"",
        "num_ids": 677
    },
    {
        "number": 4304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    total_height = sum(range(1, 1000))\n    depth = total_height - a - b\n    return str(depth)",
        "test": "assert solution(\"998 999\") == \"1\"",
        "num_ids": 443
    },
    {
        "number": 4305,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    return str((H + A - 1) // A)",
        "test": "assert solution('10 4\\n') == '3'",
        "num_ids": 318
    },
    {
        "number": 4306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    start = max(A, C)\n    end = min(B, D)\n\n    if start <= end:\n        return str(end - start)\n    else:\n        return str(0)\n",
        "test": "assert solution(\"0 50 0 100\") == \"50\\n\"",
        "num_ids": 483
    },
    {
        "number": 4307,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n\n    for i in range(1, n + 1):\n        divisors = 0\n        for j in range(1, i + 1):\n            if i % j == 0:\n                divisors += 1\n        if divisors == 8 and i % 2 != 0:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"105\") == \"1\"",
        "num_ids": 461
    },
    {
        "number": 4308,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n\n    if N % K == 0:\n        min_diff = 0\n    else:\n        min_diff = 1\n\n    return str(min_diff)",
        "test": "assert solution(\"7 3\") == \"1\"",
        "num_ids": 454
    },
    {
        "number": 4309,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 100:\n        return \"111\"\n    if n < 111:\n        return \"111\"\n    if n % 111 == 0:\n        return str(n)\n    if n % 111 > 10:\n        return str(n + (111 - (n % 111)))\n    else:\n        return str(n + (111 - (n % 111) + 100)) ",
        "test": "assert solution(\"100\") == \"111\" # smallest possible solution",
        "num_ids": 450
    },
    {
        "number": 4310,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = list(map(int, stdin.split()))\n    \n    # Calculate the cost for completing the tasks in different orders\n    cost_123 = abs(A_2 - A_1) + abs(A_3 - A_2)\n    cost_132 = abs(A_3 - A_1) + abs(A_2 - A_3)\n    cost_213 = abs(A_1 - A_2) + abs(A_3 - A_1)\n    cost_231 = abs(A_3 - A_2) + abs(A_1 - A_3)\n    cost_312 = abs(A_1 - A_3) + abs(A_2 - A_1)\n    cost_321 = abs(A_2 - A_3) + abs(A_1 - A_2)\n    \n    # Return the minimum total cost\n    return min(cost_123, cost_132, cost_213, cost_231, cost_312, cost_321)",
        "test": "assert solution(\"1 6 3\") == 5",
        "num_ids": 702
    },
    {
        "number": 4311,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    i = 1\n    while True:\n        if a[i - 1] % 2 == 0:\n            a.append(a[i - 1] // 2)\n        else:\n            a.append((3 * a[i - 1]) + 1)\n        if a[i] in a[:i]:\n            return str(i + 1)\n        i += 1\n",
        "test": "assert solution(\"8\") == \"5\"",
        "num_ids": 492
    },
    {
        "number": 4312,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    t_health, a_health = A, C\n    t_strength, a_strength = B, D\n\n    while t_health > 0 and a_health > 0:\n        a_health -= t_strength\n        if a_health <= 0:\n            break\n        t_health -= a_strength\n\n    if a_health > 0:\n        return \"No\"\n    else:\n        return \"Yes\"",
        "test": "assert solution(\"10 9 10 10\") == \"No\"",
        "num_ids": 544
    },
    {
        "number": 4313,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    V = list(map(int, lines[1].split()))\n    C = list(map(int, lines[2].split()))\n\n    # Sort gems by their value per unit cost\n    gems = sorted(zip(V, C), key=lambda x: x[0] / x[1], reverse=True)\n\n    # Choose gems with the highest value per unit cost until we can't afford them anymore\n    X = 0\n    Y = 0\n    for i in range(N):\n        if Y + gems[i][1] > 50:\n            break\n        X += gems[i][0]\n        Y += gems[i][1]\n\n    # Calculate and return the result\n    return str(X - Y)",
        "test": "assert solution(\"1\\n10\\n1\") == \"9\"",
        "num_ids": 899
    },
    {
        "number": 4314,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    matrix = []\n    for _ in range(H):\n        matrix.append(list(stdin.readline().strip()))\n\n    # remove rows and columns with only white squares\n    while any(all(c == '.' for c in row) for row in matrix) or any(all(matrix[i][j] == '.' for i in range(H)) for j in range(W)):\n        for i in range(H):\n            if all(c == '.' for c in matrix[i]):\n                matrix.pop(i)\n                H -= 1\n                break\n        for j in range(W):\n            if all(matrix[i][j] == '.' for i in range(H)):\n                for i in range(H):\n                    matrix[i].pop(j)\n                W -= 1\n                break\n\n    # print the final state of the grid\n    output = ''\n    for row in matrix:\n        output += ''.join(row) + '\\n'\n    return output.strip()",
        "test": "assert solution(\"3 3\\n#..\\n#..\\n...\") == \"#..\\n#..\"",
        "num_ids": 1193
    },
    {
        "number": 4315,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return str(circumference)\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "assert solution(\"50\") == \"314.159265358979323846\"",
        "num_ids": 532
    },
    {
        "number": 4316,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.upper()\n    if len(s) != 4:\n        return \"No\"\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    count_chars = list(char_count.values())\n    if count_chars.count(2) == 2:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"ABCD\") == \"No\"",
        "num_ids": 464
    },
    {
        "number": 4317,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    options = [A + B, A - B, A * B]\n    largest = max(options)\n    return str(largest)",
        "test": "assert solution(\"-13 3\") == \"-10\"",
        "num_ids": 339
    },
    {
        "number": 4318,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = map(int, stdin.split())\n    count = 0\n    \n    for i in range(1, N):\n        if H[0] <= H[i]:\n            count += 1\n            break\n    \n    for i in range(2, N):\n        if H[i - 1] > H[i]:\n            count += 1\n    \n    return str(count)",
        "test": "assert solution(\"2\\n1 2\") == \"1\"",
        "num_ids": 543
    },
    {
        "number": 4319,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    sequence = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    stairways = []\n    current_stairway = []\n\n    for i in range(n):\n        if i == 0:\n            current_stairway.append(sequence[i])\n        else:\n            if sequence[i] == 1:\n                stairways.append(current_stairway)\n                current_stairway = [sequence[i]]\n            else:\n                current_stairway.append(sequence[i])\n\n    stairways.append(current_stairway)\n\n    t = len(stairways)\n    steps = [len(stairway) for stairway in stairways]\n\n    return f\"{t}\\n{' '.join(map(str, steps))}\"",
        "test": "assert solution(\"5\\n1 2 3 4 5\") == \"1\\n5\"",
        "num_ids": 962
    },
    {
        "number": 4320,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def find_k(n, x):\n        k = 1\n        while x * (2 ** k - 1) < n:\n            k += 1\n        return k\n\n    def sum_sequence(n, x, k):\n        return x * (2 ** k - 1)\n\n    t = int(stdin.split('\\n')[0])\n    test_cases = [int(x) for x in stdin.split('\\n')[1:]]\n    output = []\n\n    for n in test_cases:\n        x = 1\n        while sum_sequence(n, x, find_k(n, x)) <= n:\n            if sum_sequence(n, x, find_k(n, x)) == n:\n                output.append(str(x))\n                break\n            x += 1\n\n    return '\\n'.join(output)",
        "test": "assert solution(21) == 7",
        "num_ids": 621
    },
    {
        "number": 4321,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    for i in range(k):\n        if n % 10 != 0:\n            n -= 1\n        else:\n            n //= 10\n            \n    return str(n)",
        "test": "assert solution(\"512 4\") == \"50\"",
        "num_ids": 406
    },
    {
        "number": 4322,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    heights = [int(x) for x in stdin.split('\\n')[1].split()]\n    heights.sort()\n\n    max_people = 1\n    max_people_heights = [heights[0]]\n\n    for i in range(1, n):\n        if abs(heights[i] - heights[i - 1]) <= 1:\n            if len(max_people_heights) == max_people:\n                max_people_heights.append(heights[i])\n            else:\n                max_people_heights[-1] = heights[i]\n        else:\n            if len(max_people_heights) > max_people:\n                max_people = len(max_people_heights)\n            max_people_heights = [heights[i]]\n\n    if len(max_people_heights) > max_people:\n        max_people = len(max_people_heights)\n\n    return f\"{max_people}\\n{' '.join(str(x) for x in max_people_heights)}\"\n",
        "test": "assert solution(\"3\\n5 1 4\") == \"2\\n4 5\"",
        "num_ids": 1289
    },
    {
        "number": 4323,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    songs = []\n\n    for i in range(n):\n        a, b = map(int, stdin.readline().split())\n        songs.append((a, b))\n\n    songs.sort(key=lambda x: x[0] - x[1], reverse=True)\n    compressed_size = 0\n    min_songs_to_compress = 0\n\n    for a, b in songs:\n        if compressed_size + b > m:\n            break\n        compressed_size += b\n        min_songs_to_compress += 1\n\n    if compressed_size + sum(a for a, b in songs[min_songs_to_compress:]) <= m:\n        return str(min_songs_to_compress)\n    else:\n        return \"-1\"",
        "test": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"-1\"",
        "num_ids": 752
    },
    {
        "number": 4324,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def generate_string(n: int, a: int, b: int) -> str:\n        if b == 1:\n            return 'a' * n\n        elif a == 1:\n            return 'a' * n\n        else:\n            string = ''\n            for i in range(b):\n                if len(string) + a <= n:\n                    string += chr(97 + i) * a\n                else:\n                    string += chr(97 + i) * (n - len(string))\n            return string\n\n    t = int(stdin.split('\\n', 1)[0])\n    test_cases = stdin.split('\\n')[1:]\n    result = []\n\n    for test_case in test_cases:\n        n, a, b = map(int, test_case.split())\n        result.append(generate_string(n, a, b))\n\n    return '\\n'.join(result)\n",
        "test": "assert solution(\"5 2 2\") == \"abcde\"",
        "num_ids": 672
    },
    {
        "number": 4325,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = map(int, stdin.split())\n    return str((N + X - 1) // X * T)",
        "test": "assert solution(\"100 50 5\") == \"10\"  # Example 2",
        "num_ids": 384
    },
    {
        "number": 4326,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N < 3:\n        return \"0\"\n    return str((N - 1) // 2)",
        "test": "assert solution(\"4\") == \"1\"",
        "num_ids": 231
    },
    {
        "number": 4327,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    return str((P + A - 1) // A)",
        "test": "assert solution(\"1 3\") == \"3\"",
        "num_ids": 366
    },
    {
        "number": 4328,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b % a == 0:\n        return str(a + b)\n    else:\n        return str(b - a)",
        "test": "assert solution(\"4 12\") == \"16\"",
        "num_ids": 374
    },
    {
        "number": 4329,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split('\\n')\n    if len(S) == len(T) and T == S + T[-1]:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(\"abcdefghijk\") == \"No\"",
        "num_ids": 337
    },
    {
        "number": 4330,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    for i in range(A + 1, B):\n        if abs(A - i) == abs(B - i):\n            return str(i)\n    \n    return \"IMPOSSIBLE\"",
        "test": "assert solution(\"1 2\") == \"IMPOSSIBLE\"",
        "num_ids": 508
    },
    {
        "number": 4331,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if '7' in str(n):\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(\"117\") == \"Yes\"",
        "num_ids": 276
    },
    {
        "number": 4332,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digit_sum = 0\n    n_copy = n\n    while n_copy > 0:\n        digit_sum += n_copy % 10\n        n_copy //= 10\n    \n    if digit_sum == 0:\n        digit_sum = 9\n    if n % digit_sum == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"12\") == \"Yes\"",
        "num_ids": 380
    },
    {
        "number": 4333,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n\n    # Calculate the length of the side of the square\n    side = abs(x1 - x2) + abs(y1 - y2)\n\n    # Calculate the coordinates of the missing vertices\n    x3 = x2 + (y2 - y1)\n    y3 = y2 - (x2 - x1)\n    x4 = x2 - (y2 - y1)\n    y4 = y2 + (x2 - x1)\n\n    return f\"{x3} {y3} {x4} {y4}\"",
        "test": "assert solution(\"-1 1 1 1\") == \"-1 2 0 2\"",
        "num_ids": 713
    },
    {
        "number": 4334,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    S, T, A, B, U = stdin.split()\n    A, B = int(A), int(B)\n\n    # Check if the string U is equal to S or T\n    if U == S:\n        num_S = A - 1\n        num_T = B\n    elif U == T:\n        num_S = A\n        num_T = B - 1\n\n    # Print the result\n    return f\"{num_S} {num_T}\"",
        "test": "assert solution(\"red blue\\n3 4\\nred\") == \"2 4\" # Test case 1: 3 red balls and 4 blue balls, Takahashi throws a red ball.",
        "num_ids": 811
    },
    {
        "number": 4335,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split(\"\\n\")\n    n = int(n)\n    if n % 2 == 0:\n        mid = n // 2\n        if s[:mid] == s[mid:]:\n            return \"Yes\"\n    return \"No\"\n",
        "test": "assert solution(\"6\\nabcabc\") == \"Yes\"",
        "num_ids": 391
    },
    {
        "number": 4336,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    if W == 0 or H == 0:\n        return \"0.000000 0\"\n    if x == 0:\n        area = y * W\n    elif y == 0:\n        area = x * H\n    else:\n        area = min(x * H, y * W)\n    return f\"{area:.6f} 0\"",
        "test": "assert solution(\"2 3 1 2\") == \"3.000000 0\"",
        "num_ids": 967
    },
    {
        "number": 4337,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    N, colors = int(stdin.split('\\n')[0]), stdin.split('\\n')[1].split(' ')\n    color_set = set(colors)\n    if len(color_set) == 3:\n        return \"Three\"\n    elif len(color_set) == 4:\n        return \"Four\"",
        "test": "assert solution(\"4\\nP W G Y\") == \"Four\"",
        "num_ids": 532
    },
    {
        "number": 4338,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, a = map(int, stdin.split()[0:4])\n    a = list(map(int, stdin.split()[4:]))\n    counter = 0\n\n    for i in range(n):\n        if a[i] <= x:\n            counter += 1\n\n    for i in range(n):\n        if a[i] <= x:\n            a[i] = 0\n        else:\n            a[i] -= x\n\n    for i in range(n):\n        if a[i] == 0:\n            counter += 1\n\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = y\n\n    for i in range(n):\n        if a[i] >= y:\n            a[i] -= y\n\n    for i in range(n):\n        if a[i] == 0:\n            counter += 1\n\n    return str(counter)",
        "test": "assert solution(\"5 5 6\\n1 2 6 10 3\\n\") == \"2\" ",
        "num_ids": 758
    },
    {
        "number": 4339,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == \"7\"",
        "num_ids": 721
    },
    {
        "number": 4340,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    for i in range(1, 6 * 10**8, 2):\n        a = [2 * i - 1 if x == 2 * i else x for x in a]\n        a = [2 * i if x == 2 * i - 1 else x for x in a]\n        a = [4 * i - 3 if x == 2 * i + 1 else x for x in a]\n        a = [4 * i - 2 if x == 2 * i - 1 else x for x in a]\n        a = [4 * i - 1 if x == 2 * i else x for x in a]\n        a = [4 * i if x == 2 * i + 1 else x for x in a]\n        a = [6 * i - 5 if x == 2 * i + 2 else x for x in a]\n        a = [6 * i - 4 if x == 2 * i + 1 else x for x in a]\n        a = [6 * i - 3 if x == 2 * i else x for x in a]\n        a = [6 * i - 2 if x == 2 * i - 1 else x for x in a]\n        a = [6 * i - 1 if x == 2 * i - 2 else x for x in a]\n\n    return ' '.join(str(x) for x in a)",
        "test": "assert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\\n\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\" ",
        "num_ids": 1421
    },
    {
        "number": 4341,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    edges = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n    \n    adj_list = {i: [] for i in range(1, n + 1)}\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    def dfs(vertex, parent, visited, cycle):\n        visited[vertex] = True\n        cycle[vertex] = True\n        for neighbor in adj_list[vertex]:\n            if not visited[neighbor]:\n                if dfs(neighbor, vertex, visited, cycle):\n                    return True\n            elif neighbor != parent:\n                return True\n        cycle[vertex] = False\n        return False\n    \n    def is_cycle(vertex, parent, visited, cycle):\n        if cycle[vertex]:\n            return True\n        visited[vertex] = True\n        for neighbor in adj_list[vertex]:\n            if not visited[neighbor]:\n                if is_cycle(neighbor, vertex, visited, cycle):\n                    return True\n            elif neighbor != parent:\n                return True\n        return False\n    \n    visited = [False] * (n + 1)\n    cycle = [False] * (n + 1)\n    count = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            if dfs(i, -1, visited, cycle):\n                count += 1\n    \n    cycles = []\n    for i in range(1, n + 1):\n        if not visited[i]:\n            if is_cycle(i, -1, visited, cycle):\n                cycles.append(i)\n    \n    result = 0\n    for i in range(len(cycles)):\n        for j in range(i + 1, len(cycles)):\n            if cycles[i] in adj_list[cycles[j]]:\n                result += 1\n                break\n    \n    return str(result)",
        "test": "assert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\\n\") == \"2\" ",
        "num_ids": 1636
    },
    {
        "number": 4342,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(v, p):\n        for u in tree[v]:\n            if u != p:\n                color[v] |= color[u]\n                dfs(u, v)\n\n    def is_nice(v, p, red_size, blue_size):\n        return red_size != 0 and blue_size != 0\n\n    def count_nice_edges(v, p):\n        res = 0\n        for u in tree[v]:\n            if u != p:\n                res += count_nice_edges(u, v)\n        if is_nice(v, p, red_size[v], blue_size[v]):\n            res += len(tree[v]) - 1\n        return res\n\n    n = int(stdin.readline())\n    color = [0] * n\n    red_size = [0] * n\n    blue_size = [0] * n\n    tree = [[] for _ in range(n)]\n\n    color_input = list(map(int, stdin.readline().split()))\n    for i, c in enumerate(color_input):\n        color[i] = c\n        if c == 1:\n            red_size[i] = 1\n        elif c == 2:\n            blue_size[i] = 1\n\n    for _ in range(n - 1):\n        v, u = map(int, stdin.readline().split())\n        v -= 1\n        u -= 1\n        tree[v].append(u)\n        tree[u].append(v)\n\n    dfs(0, -1)\n\n    return count_nice_edges(0, -1)",
        "test": "assert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\" ",
        "num_ids": 1090
    },
    {
        "number": 4343,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    t = stdin.split(\"\\n\")[2]\n\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\n    s_index = alphabet.index(s[k - 1])\n    t_index = alphabet.index(t[k - 1])\n\n    if s_index + 1 < t_index:\n        return s[:k - 1] + alphabet[(s_index + t_index) // 2]\n    else:\n        return s",
        "test": "assert solution(\"6\\nnijfvj\\ntvqhwp\") == \"qoztvz\"",
        "num_ids": 868
    },
    {
        "number": 4344,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    ratings = list(map(int, stdin.split()[2:]))\n\n    if k > n:\n        return \"NO\"\n\n    ratings_set = set(ratings)\n    if len(ratings_set) < k:\n        return \"NO\"\n\n    return \"YES\\n\" + \" \".join(map(str, list(ratings_set)[:k]))",
        "test": "assert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"",
        "num_ids": 702
    },
    {
        "number": 4345,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    \n    increasing_sequence = []\n    decreasing_sequence = []\n    \n    if n == 1:\n        return \"YES\\n1\"\n    \n    for i in range(n):\n        if not increasing_sequence or a[i] > increasing_sequence[-1]:\n            increasing_sequence.append(a[i])\n        elif not decreasing_sequence or a[i] < decreasing_sequence[-1]:\n            decreasing_sequence.append(a[i])\n        else:\n            return \"NO\"\n    \n    res = []\n    for x in a:\n        if x in increasing_sequence:\n            res.append(0)\n        else:\n            res.append(1)\n    \n    return \"YES\\n\" + \" \".join(str(x) for x in res)",
        "test": "assert solution(\"5\\n1 2 4 0 2\") == \"NO\" ",
        "num_ids": 1104
    },
    {
        "number": 4346,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def count_lanterns(L, v, l, r):\n        lanterns_count = L // v\n        for i in range(1, lanterns_count + 1):\n            if l <= i * v <= r:\n                lanterns_count -= 1\n        return lanterns_count\n\n    t = int(stdin.split('\\n')[0])\n    queries = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    results = []\n    for query in queries:\n        results.append(count_lanterns(*query))\n\n    return '\\n'.join(map(str, results)) + '\\n'\n",
        "test": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\" ",
        "num_ids": 795
    },
    {
        "number": 4347,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    total_ways = n // 2\n    numerator = 1\n    denominator = 1\n    for i in range(1, total_ways + 1):\n        numerator *= total_ways - i + 1\n        denominator *= i\n    return str(numerator // denominator)",
        "test": "assert solution(\"2\") == \"1\"",
        "num_ids": 366
    },
    {
        "number": 4348,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n\n    for _ in range(k):\n        for letter in 'abcdefghijklmnopqrstuvwxyz':\n            if letter in s:\n                s = s.replace(letter, '', 1)\n                break\n\n    return s if s else None\n",
        "test": "assert solution(1, 1, 'u') == '' ",
        "num_ids": 576
    },
    {
        "number": 4349,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def read_line() -> List[str]:\n        return list(map(str, stdin.readline().strip().split()))\n\n    def parse_special_offers(n: int, m: int) -> Dict[int, int]:\n        on_sale = {}\n        for _ in range(m):\n            day, type_ = map(int, read_line())\n            on_sale[day] = type_\n        return on_sale\n\n    n, m = map(int, read_line())\n    k = list(map(int, read_line()))\n    on_sale = parse_special_offers(n, m)\n\n    def days_required(type_: int, burles: int) -> int:\n        if type_ in on_sale:\n            return burles // 2 + 1\n        return burles // 2 + burles % 2\n\n    max_days = 0\n    for i in range(n):\n        if k[i] > 0:\n            max_days = max(max_days, days_required(i + 1, k[i]))\n\n    return str(max_days)",
        "test": "assert solution(\"\"\"5 6",
        "num_ids": 877
    },
    {
        "number": 4350,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(n)]\n    \n    def is_valid(x: int, y: int, size: int) -> bool:\n        if not (0 <= x <= n - 1 and 0 <= y <= m - 1):\n            return False\n        for i in range(max(0, x - size), min(n, x + size + 1)):\n            for j in range(max(0, y - size), min(m, y + size + 1)):\n                if grid[i][j] != '*':\n                    return False\n        return True\n    \n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                for size in range(1, min(n - i, m - j) + 1):\n                    if is_valid(i, j, size):\n                        stars.append((i, j, size))\n    \n    if not stars:\n        return \"-1\"\n    \n    result = [str(len(stars))] + [\" \".join(map(str, star)) for star in stars]\n    return \"\\n\".join(result)",
        "test": "assert solution(\"3 3\\n*.*\\n.*.\\n*.*\\n.*.\") == \"-1\"",
        "num_ids": 1447
    },
    {
        "number": 4351,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if str(n) == str(n)[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"575\") == \"Yes\"",
        "num_ids": 299
    },
    {
        "number": 4352,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    alice, bob = map(int, stdin.split())\n    if alice < bob:\n        return \"Bob\"\n    elif bob < alice:\n        return \"Alice\"\n    else:\n        return \"Draw\"",
        "test": "assert solution(\"8 6\") == \"Alice\"",
        "num_ids": 329
    },
    {
        "number": 4353,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(',', ' ')\n    return s",
        "test": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'",
        "num_ids": 319
    },
    {
        "number": 4354,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def manhattan_distance(x1, y1, x2, y2):\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    def nearest_checkpoint(student_coords, checkpoints):\n        min_distance = float('inf')\n        nearest_checkpoint_index = None\n        for i, checkpoint in enumerate(checkpoints, start=1):\n            distance = manhattan_distance(student_coords[0], student_coords[1], checkpoint[0], checkpoint[1])\n            if distance < min_distance:\n                min_distance = distance\n                nearest_checkpoint_index = i\n        return nearest_checkpoint_index\n\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    students = [tuple(map(int, line.split())) for line in lines[1:N + 1]]\n    checkpoints = [tuple(map(int, line.split())) for line in lines[N + 1:]]\n\n    output = [str(nearest_checkpoint(student, checkpoints)) for student in students]\n    return '\\n'.join(output)",
        "test": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"",
        "num_ids": 945
    },
    {
        "number": 4355,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = a + a**2 + a**3\n    return str(result)",
        "test": "assert solution('2') == '14'",
        "num_ids": 246
    },
    {
        "number": 4356,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    lines = stdin.splitlines()\n    N, M = map(int, lines[0].split())\n    A = [list(line) for line in lines[1:N + 1]]\n    B = [list(line) for line in lines[N + 2:N + M + 2]]\n\n    # Check if the template image is contained in the given image\n    for i in range(N - M + 1):\n        for j in range(N - M + 1):\n            is_contained = True\n            for k in range(M):\n                if A[i + k][j:j + M] != B[k]:\n                    is_contained = False\n                    break\n            if is_contained:\n                return \"Yes\"\n\n    return \"No\"",
        "test": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.#\\n##\") == \"No\"",
        "num_ids": 962
    },
    {
        "number": 4357,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    max_allowance = 0\n    for x in range(1, 10):\n        for y in range(1, 10):\n            if x != y:\n                for op in ['+', '-', '*', '/']:\n                    formula = f\"{x}{op}{y}\"\n                    try:\n                        result = eval(formula)\n                    except ZeroDivisionError:\n                        continue\n                    if 1 <= result <= 9 and isinstance(result, int):\n                        if op == '+':\n                            allowance = a * 10 + b + c\n                        elif op == '-':\n                            allowance = a * 10 + b - c\n                        elif op == '*':\n                            allowance = a * b * 10 + c\n                        else:\n                            allowance = a * 10 + b // c\n                        max_allowance = max(max_allowance, allowance)\n    \n    return str(max_allowance)",
        "test": "assert solution(\"8 7 6\") == \"40\"",
        "num_ids": 734
    },
    {
        "number": 4358,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, *p = list(map(int, stdin.split()))\n    p.sort(reverse=True)\n    total = 0\n    \n    for i in range(N):\n        if i == 0:\n            total += p[i] // 2\n        else:\n            total += p[i]\n    \n    return str(total)",
        "test": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"",
        "num_ids": 655
    },
    {
        "number": 4359,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    times = list(map(int, stdin.split()))\n    times.sort()\n    t = 0\n    for i in range(len(times)):\n        t = (t // 10 + 1) * 10\n        if i == len(times) - 1:\n            return str(t + times[i])\n        t += times[i]\n    return \"0\"",
        "test": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\" ",
        "num_ids": 655
    },
    {
        "number": 4360,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n\n    sum_of_inverses = sum(map(lambda x: 1/x, A))\n    inverse = 1 / sum_of_inverses\n\n    return str(inverse)",
        "test": "assert solution(\"2\\n10 30\") == \"7.5\"",
        "num_ids": 479
    },
    {
        "number": 4361,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, K = map(int, lines[0].split())\n    heights = list(map(int, lines[1:]))\n    heights.sort()\n\n    max_diff = float('inf')\n    for i in range(N - K + 1):\n        diff = heights[i + K - 1] - heights[i]\n        if diff < max_diff:\n            max_diff = diff\n\n    return str(max_diff)",
        "test": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"",
        "num_ids": 649
    },
    {
        "number": 4362,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isupper():\n        return \"A\"\n    elif stdin.islower():\n        return \"a\"",
        "test": "assert solution(\"A\") == \"A\"",
        "num_ids": 248
    },
    {
        "number": 4363,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    result = 0\n\n    for X in range(0, K + 1):\n        for Y in range(0, K + 1):\n            Z = S - X - Y\n            if 0 <= Z <= K:\n                result += 1\n\n    return str(result)",
        "test": "assert solution(\"2 2\") == \"6\"",
        "num_ids": 466
    },
    {
        "number": 4364,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    \n    if len(s) != 4 or not s.isdigit():\n        return \"NA\"\n    \n    yymm = True\n    mmyy = True\n    \n    # Check YYMM format\n    if int(s[2:]) < 1 or int(s[2:]) > 12:\n        yymm = False\n    \n    # Check MMYY format\n    if int(s[:2]) < 1 or int(s[:2]) > 12:\n        mmyy = False\n    \n    if yymm and mmyy:\n        return \"AMBIGUOUS\"\n    elif yymm:\n        return \"YYMM\"\n    elif mmyy:\n        return \"MMYY\"\n    else:\n        return \"NA\"",
        "test": "assert solution(\"1905\") == \"YYMM\"",
        "num_ids": 875
    },
    {
        "number": 4365,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    even_numbers = k // 2\n    odd_numbers = k // 2\n    if k % 2 != 0:\n        odd_numbers += 1\n    return str(even_numbers * odd_numbers)",
        "test": "assert solution(\"6\") == 14",
        "num_ids": 318
    },
    {
        "number": 4366,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    start_hour = (A + B) % 24\n    return str(start_hour)",
        "test": "assert solution(\"9 12\") == \"21\"",
        "num_ids": 287
    },
    {
        "number": 4367,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    if N >= 10:\n        return str(R)\n    else:\n        return str(R + 100 * (10 - N))",
        "test": "assert solution(\"2 2919\") == \"3719\"",
        "num_ids": 387
    },
    {
        "number": 4368,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    digits = len(str(n))\n    base_k_digits = len(format(n, f'0{digits}_b'))\n    return str(base_k_digits)",
        "test": "assert solution(\"11 2\") == \"4\"  # Binary representation of 11 is 1011, which has 4 digits in base 2",
        "num_ids": 506
    },
    {
        "number": 4369,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str((n + 1) // 2)",
        "test": "assert solution(\"5\") == \"3\"",
        "num_ids": 247
    },
    {
        "number": 4370,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1 and b == 15 or b == 1 and a == 15:\n        return \":\"\n    else:\n        return \"Yay!\"",
        "test": "assert solution(\"1 14\") == \"Yay!\"",
        "num_ids": 471
    },
    {
        "number": 4371,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s_len = len(s)\n\n    # minimum possible difference\n    min_diff = float('inf')\n\n    # iterate through all possible triplets\n    for i in range(s_len - 2):\n        # extract triplet\n        triplet = s[i:i+3]\n        # convert to integer\n        x = int(triplet)\n        # calculate difference\n        diff = abs(x - 753)\n        # update minimum difference\n        min_diff = min(min_diff, diff)\n\n    return min_diff",
        "test": "assert solution(\"1234567876\") == 34",
        "num_ids": 559
    },
    {
        "number": 4372,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(a, x):\n        left, right = 0, 10**9\n        while left < right:\n            mid = (left + right) // 2\n            if mid * x <= a:\n                left = mid + 1\n            else:\n                right = mid\n        return left - 1\n\n    n, *a = list(map(int, stdin.strip().split()))\n    y = 1\n    z = binary_search(a[0], n)\n    while sum(a) > y * z * n:\n        y += 1\n    return f\"{y} {z}\\n\"",
        "test": "assert solution(\"6\\n13 52 0 13 26 52\\n\") == \"12 13\\n\" ",
        "num_ids": 743
    },
    {
        "number": 4373,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split(' ')))\n    max_days = 0\n    for i in range(n):\n        if a[i] >= i + 1:\n            max_days += 1\n        else:\n            break\n    return str(max_days)",
        "test": "assert solution(\"3\\n1 1 1\") == \"1\"",
        "num_ids": 480
    },
    {
        "number": 4374,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def find_set(parent, x):\n        if parent[x] == x:\n            return x\n        parent[x] = find_set(parent, parent[x])\n        return parent[x]\n\n    def union_set(parent, rank, x, y):\n        x_root = find_set(parent, x)\n        y_root = find_set(parent, y)\n\n        if x_root == y_root:\n            return False\n\n        if rank[x_root] > rank[y_root]:\n            parent[y_root] = x_root\n        elif rank[x_root] < rank[y_root]:\n            parent[x_root] = y_root\n        else:\n            parent[y_root] = x_root\n            rank[x_root] += 1\n\n        return True\n\n    n, m = map(int, stdin.readline().split())\n    parent = [i for i in range(n + 1)]\n    rank = [0] * (n + 1)\n    edges = []\n\n    for _ in range(m):\n        v, u = map(int, stdin.readline().split())\n        edges.append((v, u))\n\n    for v, u in edges:\n        union_set(parent, rank, v, u)\n\n    diameter = 0\n    for v in range(1, n + 1):\n        diameter = max(diameter, max(rank[find_set(parent, x)] for x in range(1, n + 1) if x != v))\n\n    added_edges = []\n    if m < n - 1:\n        for v in range(1, n + 1):\n            for u in range(1, n + 1):\n                if v != u and find_set(parent, v) != find_set(parent, u):\n                    added_edges.append((v, u))\n                    union_set(parent, rank, v, u)\n                    break\n\n    return f\"{diameter}\\n\" + \"\\n\".join(f\"{v} {u}\" for v, u in added_edges) + \"\\n\"",
        "test": "assert solution(\"3 2\\n1 3\\n2 3\\n\") == \"2\\n\"",
        "num_ids": 1496
    },
    {
        "number": 4375,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find(parent, u):\n        if parent[u] == u:\n            return u\n        parent[u] = find(parent, parent[u])\n        return parent[u]\n\n    def union(parent, rank, x, y):\n        xroot = find(parent, x)\n        yroot = find(parent, y)\n\n        if xroot == yroot:\n            return False\n\n        if rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n        return True\n\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    parent = [i for i in range(n + 1)]\n    rank = [0] * (n + 1)\n\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        union(parent, rank, u, v)\n\n    dp = [0] * (n + 1)\n    for i in range(n, 0, -1):\n        dp[find(parent, i)] += a[i - 1]\n\n    for i in range(1, n + 1):\n        if find(parent, i) != find(parent, 1):\n            dp[find(parent, i)] = 0\n\n    return str(max(dp))",
        "test": "assert solution(\"\"\"5 1",
        "num_ids": 1105
    },
    {
        "number": 4376,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    total_rooms = sum(a)\n    for i in range(m):\n        room = b[i]\n        dormitory = 1\n        rooms_count = a[0]\n\n        while room > rooms_count:\n            room -= rooms_count\n            dormitory += 1\n            rooms_count += a[dormitory - 1]\n\n        print(dormitory, room)\n\n    return \"\" ",
        "test": "assert solution(\"2 3\\n5 1000000000\\n5 6 9999999999\\n\") == \"1 5\\n2 1\\n2 9999999994\\n\" ",
        "num_ids": 1023
    },
    {
        "number": 4377,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4 = map(int, stdin.split())\n\n    a = (x4 - x2 - x3) // 2\n    b = (x4 - x1 - x3) // 2\n    c = (x4 - x1 - x2) // 2\n\n    return f\"{a} {b} {c}\"\n",
        "test": "assert solution(\"201 101 101 200\") == \"1 100 100\"",
        "num_ids": 646
    },
    {
        "number": 4378,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    def is_diverse(s: str) -> bool:\n        for i in range(1, len(s)):\n            if s[i] == s[i - 1]:\n                return False\n        return True\n\n    def min_recolor(s: str) -> int:\n        n = len(s)\n        dp = [0] * n\n        for i in range(1, n):\n            if s[i] == s[i - 1]:\n                dp[i] = dp[i - 1] + 1\n            else:\n                dp[i] = dp[i - 1]\n        return min(dp)\n\n    def recolored_garland(s: str, r: int) -> str:\n        n = len(s)\n        dp = [0] * n\n        for i in range(1, n):\n            if s[i] == s[i - 1]:\n                dp[i] = dp[i - 1] + 1\n            else:\n                dp[i] = dp[i - 1]\n\n        i = n - 1\n        while r > 0:\n            if dp[i] <= r:\n                r -= dp[i]\n                i -= 1\n            else:\n                while dp[i] > r:\n                    i -= 1\n                s[i] = 'B' if s[i] != 'B' else 'R' if s[i] != 'R' else 'G'\n                r -= dp[i]\n                i -= 1\n        return s\n\n    if is_diverse(s):\n        return f\"0\\n{s}\"\n    else:\n        r = min_recolor(s)\n        t = recolored_garland(s, r)\n        return f\"{r}\\n{''.join(t)}\"",
        "test": "assert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRBRBGBGBGRG'",
        "num_ids": 1205
    },
    {
        "number": 4379,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    arr = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    max_len = 1\n    max_seq = [0]\n    current_len = 1\n    current_seq = [0]\n\n    for i in range(1, n):\n        if arr[i] == arr[i - 1] + 1:\n            current_len += 1\n            current_seq.append(i)\n        else:\n            if current_len > max_len:\n                max_len = current_len\n                max_seq = current_seq[:]\n            current_len = 1\n            current_seq = [i]\n\n    if current_len > max_len:\n        max_len = current_len\n        max_seq = current_seq[:]\n\n    return f\"{max_len}\\n{' '.join(map(str, max_seq))}\"",
        "test": "assert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\\n\"",
        "num_ids": 1011
    },
    {
        "number": 4380,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    for C in range(1, 4):\n        if (A * B * C) % 2 != 0:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"3 1\") == \"Yes\"",
        "num_ids": 321
    },
    {
        "number": 4381,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    discounted_bus_fare = Y // 2\n    total_cost = X + discounted_bus_fare\n    return str(total_cost) ",
        "test": "assert solution('81 58') == '110' ",
        "num_ids": 379
    },
    {
        "number": 4382,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                count += 1\n    return count ",
        "test": "assert solution(2) == 8",
        "num_ids": 310
    },
    {
        "number": 4383,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 3 or x == 5 or x == 7:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5\") == \"YES\", \"Test case 1 failed\"",
        "num_ids": 315
    },
    {
        "number": 4384,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1000:\n        return \"ABC\"\n    else:\n        return \"ABD\"\n",
        "test": "assert solution(999) == \"ABC\"",
        "num_ids": 350
    },
    {
        "number": 4385,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    distances = [b - a, c - b, d - c, e - d]\n    if max(distances) <= k:\n        return \"Yay!\"\n    else:\n        return \":( \"",
        "test": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"",
        "num_ids": 674
    },
    {
        "number": 4386,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, s = stdin.split(\"\\n\")\n    a = int(a)\n    if a >= 3200:\n        return s\n    else:\n        return \"red\"",
        "test": "assert solution(\"3200\\npink\") == \"pink\"",
        "num_ids": 340
    },
    {
        "number": 4387,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    \n    if R < 1200:\n        return \"ABC\"\n    elif R < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"",
        "test": "assert solution(\"1199\") == \"ABC\"",
        "num_ids": 340
    },
    {
        "number": 4388,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    n = str(n)\n    digits = list(n)\n    for i in range(len(digits)):\n        if digits[i] == '1':\n            digits[i] = '9'\n        elif digits[i] == '9':\n            digits[i] = '1'\n    return ''.join(digits)",
        "test": "assert solution(\"119\") == \"991\"",
        "num_ids": 444
    },
    {
        "number": 4389,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(t):\n        b = stdin.readline().strip()\n        substrings = set()\n\n        for i in range(len(b) - 1):\n            substrings.add(b[i:i + 2])\n\n        a = ''.join(substrings)\n        result.append(a)\n\n    return '\\n'.join(result)",
        "test": "assert solution(\"zzzzzzzzzz\") == \"zzzzzz\"",
        "num_ids": 626
    },
    {
        "number": 4390,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % b == 0:\n        return str(0)\n    else:\n        return str(b - a % b)",
        "test": "assert solution(\"10 4\\n\") == \"2\"",
        "num_ids": 534
    },
    {
        "number": 4391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    temperatures = list(map(int, stdin.split()[2:n + 2]))\n\n    def calculate_average_temperature(start, end):\n        return sum(temperatures[start:end + 1]) / (end - start + 1)\n\n    max_average_temperature = 0\n    for i in range(n - k + 1):\n        segment_average_temperature = calculate_average_temperature(i, i + k - 1)\n        if segment_average_temperature > max_average_temperature:\n            max_average_temperature = segment_average_temperature\n\n    return '{:.10f}'.format(max_average_temperature)",
        "test": "assert solution(\"6 4\\n10 20 30 40 50 60\") == \"45.0\"",
        "num_ids": 888
    },
    {
        "number": 4392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def can_sort(a: List[int], p: List[int]) -> bool:\n        for i in p:\n            if i + 1 < len(a) and a[i] > a[i + 1]:\n                a[i], a[i + 1] = a[i + 1], a[i]\n        return all(a[i] <= a[i + 1] for i in range(len(a) - 1))\n\n    t = int(stdin.split('\\n', 1)[0])\n    s = stdin.split('\\n', 1)[1]\n\n    for _ in range(t):\n        n, m = map(int, s.split('\\n', 1)[0].split())\n        a = list(map(int, s.split('\\n', 2)[1].split()))\n        p = list(map(int, s.split('\\n', 2)[2].split()))\n        s = s.split('\\n', 2)[2]\n\n        if can_sort(a, p):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
        "test": "assert solution(\"6\\n3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\") == \"YES\\nNO\\nYES\\nYES\\nNO\\nYES\" ",
        "num_ids": 1408
    },
    {
        "number": 4393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = stdin.readline().strip()\n\n    s = \"\"\n    i = 0\n    while i < n:\n        count = 1\n        while i + 1 < n and t[i] == t[i + 1]:\n            count += 1\n            i += 1\n        s += t[i] * count\n        i += 1\n\n    return s\n",
        "test": "assert solution(\"1\\nz\") == \"z\"",
        "num_ids": 443
    },
    {
        "number": 4394,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find(parent, i):\n        if parent[i] == i:\n            return i\n        return find(parent, parent[i])\n\n    def union(parent, rank, x, y):\n        xroot = find(parent, x)\n        yroot = find(parent, y)\n\n        if xroot == yroot:\n            return False\n\n        if rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n        return True\n\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    edges = [list(map(int, line.split())) for line in lines[1:]]\n    edges.sort(key=lambda e: e[2])\n\n    parent = list(range(n + 1))\n    rank = [0] * (n + 1)\n    mst_cost = 0\n    mst_edges = []\n\n    for u, v, w in edges:\n        if union(parent, rank, u, v):\n            mst_cost += w\n            mst_edges.append((u, v, w))\n\n    result = 0\n    for i in range(len(mst_edges) - 1, -1, -1):\n        u, v, w = mst_edges[i]\n        new_mst_cost = mst_cost - w\n        for j in range(i):\n            u2, v2, w2 = mst_edges[j]\n            if find(parent, u) == find(parent, u2) and find(parent, v) == find(parent, v2):\n                new_mst_cost += w2\n        if new_mst_cost == mst_cost:\n            result = i + 1\n            break\n\n    return str(result)",
        "test": "assert solution(\"\"\"8 10",
        "num_ids": 1793
    },
    {
        "number": 4395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    def is_nice(s: str) -> bool:\n        for i in range(len(s)):\n            for j in range(i + 1, len(s)):\n                if s[i] == s[j] and (j - i) % 3 != 0:\n                    return False\n        return True\n\n    def recolor(s: str, i: int) -> str:\n        if i == len(s):\n            if is_nice(s):\n                return s\n            else:\n                return None\n\n        for c in \"RGB\":\n            if c != s[i]:\n                new_s = s[:i] + c + s[i + 1:]\n                result = recolor(new_s, i + 1)\n                if result is not None:\n                    return result\n\n        return recolor(s, i + 1)\n\n    n, s = stdin.split('\\n')\n    n = int(n)\n\n    result = recolor(s, 0)\n    if result is None:\n        return \"0\\n\"\n\n    recolors = 0\n    for i in range(len(result)):\n        if result[i] != s[i]:\n            recolors += 1\n\n    return f\"{recolors}\\n{result}\\n\" ",
        "test": "assert solution(\"7\\nRGBGRBB\\n\") == \"3\\nRGBRGBR\\n\"",
        "num_ids": 1151
    },
    {
        "number": 4396,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    total = 0\n\n    for i in range(1, N + 1):\n        x, u = lines[i].split()\n        x = float(x)\n        if u == 'BTC':\n            total += x * 380000.0\n        else:\n            total += x\n\n    return f\"{total:.1f}\"",
        "test": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"",
        "num_ids": 896
    },
    {
        "number": 4397,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, i = map(int, stdin.split())\n    return str(n - i + 1)",
        "test": "assert solution(\"4 2\") == \"3\"",
        "num_ids": 264
    },
    {
        "number": 4398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split('\\n')\n    n = int(n)\n    new_string = ''\n    for i in range(n):\n        new_string += s[i] + t[i]\n    return new_string",
        "test": "assert solution(\"5\\nprogramming is fun\") == \"prfoagrnimnufs\"",
        "num_ids": 460
    },
    {
        "number": 4399,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0] != s[1] and s[1] != s[2]:\n        return 'Yes'\n    return 'No'",
        "test": "assert solution(\"ABA\") == \"Yes\"",
        "num_ids": 312
    },
    {
        "number": 4400,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    max_count = 0\n    current_count = 0\n    for char in s:\n        if char == 'R':\n            current_count += 1\n        else:\n            current_count = 0\n        max_count = max(max_count, current_count)\n    return str(max_count)",
        "test": "assert solution('RRS') == '2'",
        "num_ids": 393
    },
    {
        "number": 4401,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = list(map(int, stdin.strip().split()))\n    \n    # Swap the contents of the boxes A and B\n    X, Y = Y, X\n    \n    # Swap the contents of the boxes A and C\n    X, Z = Z, X\n    \n    return f\"{X} {Y} {Z}\"",
        "test": "assert solution(\"1 2 3\") == \"3 1 2\"",
        "num_ids": 546
    },
    {
        "number": 4402,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A >= 13:\n        return str(B)\n    elif 6 <= A <= 12:\n        return str(B // 2)\n    else:\n        return str(0)",
        "test": "assert solution('30 100') == '100'",
        "num_ids": 471
    },
    {
        "number": 4403,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    integer_in_mind = 0\n    \n    for symbol in s:\n        if symbol == '+':\n            integer_in_mind += 1\n        elif symbol == '-':\n            integer_in_mind -= 1\n    \n    return str(integer_in_mind)",
        "test": "assert solution(\"+-++\") == \"2\"",
        "num_ids": 349
    },
    {
        "number": 4404,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into year, month, and day\n    year, month, day = map(int, stdin.split(\"/\"))\n    \n    # Check if the date is not later than April 30, 2019\n    if year == 2019 and month == 4 and day <= 30:\n        return \"Heisei\"\n    else:\n        return \"TBD\"",
        "test": "assert solution(\"2019/04/30\") == \"Heisei\"",
        "num_ids": 535
    },
    {
        "number": 4405,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    topics = sorted(list(map(int, stdin.split(\"\\n\")[1].split())))\n    unique_topics = sorted(list(set(topics)))\n\n    max_problems = 0\n    for i in range(len(unique_topics)):\n        current_topic = unique_topics[i]\n        current_topic_count = topics.count(current_topic)\n\n        if i == 0:\n            max_problems += current_topic_count\n        else:\n            max_problems += current_topic_count * 2\n\n    return str(max_problems)",
        "test": "assert solution(\"3\\n1337 1337 1337\") == \"3\" ",
        "num_ids": 935
    },
    {
        "number": 4406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    ids = list(map(int, stdin.split('\\n')[1].split()))\n\n    conversations = []\n    for i in range(n):\n        id_i = ids[i]\n        if id_i not in conversations:\n            if len(conversations) < k:\n                conversations.append(id_i)\n            else:\n                conversations.pop(0)\n                conversations.append(id_i)\n\n    output = f\"{len(conversations)}\\n\"\n    output += \" \".join(str(conversation) for conversation in conversations)\n\n    return output",
        "test": "assert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\" ",
        "num_ids": 717
    },
    {
        "number": 4407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2:]))\n\n    def binary_search(arr, x):\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == x:\n                return mid\n            elif arr[mid] < x:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return -1\n\n    a.sort(reverse=True)\n    result = []\n    for b_val in b:\n        index = binary_search(a, b_val)\n        if index != -1:\n            result.append(1)\n        else:\n            count = 0\n            for coin in a:\n                b_val -= coin\n                if b_val >= 0:\n                    count += 1\n                if b_val == 0:\n                    result.append(count)\n                    break\n            else:\n                result.append(-1)\n\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"1\\n-1\\n3\\n2\\n\" ",
        "num_ids": 872
    },
    {
        "number": 4408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def count_favorite_numbers(cards, favorite_number):\n        return sum(1 for card in cards if card == favorite_number)\n\n    def max_joy_levels(n, k, cards, favorite_numbers, h):\n        max_joy_level = 0\n        for distribution in itertools.permutations(cards, n * k):\n            joy_level = 0\n            for i in range(n):\n                player_cards = distribution[i * k:(i + 1) * k]\n                favorite_number = favorite_numbers[i]\n                count = count_favorite_numbers(player_cards, favorite_number)\n                joy_level += h[count]\n            max_joy_level = max(max_joy_level, joy_level)\n        return max_joy_level\n\n    n, k = map(int, stdin.readline().split())\n    cards = list(map(int, stdin.readline().split()))\n    favorite_numbers = list(map(int, stdin.readline().split()))\n    h = list(map(int, stdin.readline().split()))\n\n    return str(max_joy_levels(n, k, cards, favorite_numbers, h))",
        "test": "assert solution(\"3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\" ",
        "num_ids": 1031
    },
    {
        "number": 4409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    if len(set(a)) == 1:\n        return f\"0\\n\"\n\n    a.sort()\n    k = 0\n    operations = []\n\n    for i in range(n - 1):\n        if abs(a[i] - a[i + 1]) <= 1:\n            continue\n\n        k += 1\n        if a[i] > a[i + 1]:\n            operations.append((1, i + 1, i + 2))\n            a[i] -= abs(a[i] - a[i + 1])\n        else:\n            operations.append((2, i + 1, i + 2))\n            a[i] += abs(a[i] - a[i + 1])\n\n    if a[n - 2] == a[n - 1]:\n        k += 1\n        if a[n - 2] > a[n - 1]:\n            operations.append((1, n - 1, n))\n        else:\n            operations.append((2, n - 1, n))\n\n    output = [str(k)] + [\" \".join(map(str, op)) for op in operations]\n    return \"\\n\".join(output) + \"\\n\"",
        "test": "assert solution(\"4\\n1 1 1 1\\n\") == \"0\\n\"",
        "num_ids": 1280
    },
    {
        "number": 4410,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(table_status: str, k: int) -> bool:\n        occupied_tables = [i for i, status in enumerate(table_status) if status == '1']\n        for i in range(len(occupied_tables)):\n            for j in range(i + 1, len(occupied_tables)):\n                if abs(occupied_tables[i] - occupied_tables[j]) <= k:\n                    return False\n        return True\n\n    def max_free_tables(table_status: str, k: int) -> int:\n        max_count = 0\n        for i in range(len(table_status)):\n            if table_status[i] == '0':\n                new_status = table_status[:i] + '1' + table_status[i + 1:]\n                if is_valid(new_status, k):\n                    max_count += 1\n        return max_count\n\n    t = int(stdin.readline().strip())\n    result = []\n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        table_status = stdin.readline().strip()\n        result.append(max_free_tables(table_status, k))\n\n    return '\\n'.join(map(str, result))\n",
        "test": "assert solution(\"6 1\\n100010\\n6 2\\n000000\\n5 1\\n10101\\n3 1\\n001\\n2 2\\n00\\n1 1\\n0\") == \"1\\n2\\n0\\n1\\n1\\n1\" ",
        "num_ids": 1159
    },
    {
        "number": 4411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = map(int, lines[0].split())\n    segments = []\n    for i in range(1, n + 1):\n        l, r = map(int, lines[i].split())\n        segments.append((l, r))\n\n    def has_bad_point(candidate):\n        counts = [0] * (2 * 10**5 + 1)\n        for i, segment in enumerate(segments):\n            if i not in candidate:\n                for j in range(segment[0], segment[1] + 1):\n                    counts[j] += 1\n\n        bad_points = 0\n        for count in counts:\n            if count > k:\n                bad_points += 1\n\n        return bad_points > 0\n\n    def binary_search():\n        left, right = 0, n\n        while left < right:\n            mid = (left + right) // 2\n            if has_bad_point(set(range(mid + 1))):\n                right = mid\n            else:\n                left = mid + 1\n\n        return left\n\n    m = binary_search()\n    result = '\\n'.join([str(m), ' '.join(map(str, set(range(m + 1))))])\n\n    return result",
        "test": "assert solution(\"\"\"7 2",
        "num_ids": 1338
    },
    {
        "number": 4412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible(x: int, y: int) -> bool:\n        return x % y == 0\n\n    def is_valid_contest(contest: list) -> bool:\n        for i in range(len(contest)):\n            for j in range(i + 1, len(contest)):\n                if is_divisible(contest[i], contest[j]):\n                    return False\n        return True\n\n    def max_prettiness(n: int, a: list, memo: dict, index: int, contest: list) -> int:\n        if index == n:\n            if is_valid_contest(contest):\n                memo[tuple(contest)] = sum(contest)\n            return memo.get(tuple(contest), 0)\n\n        max_prettiness(n, a, memo, index + 1, contest)\n        contest.append(a[index])\n        max_prettiness(n, a, memo, index + 1, contest)\n\n        contest.pop()\n        return max(memo.get(tuple(contest), 0), memo.get(tuple(contest + [a[index]]), 0))\n\n    queries = stdin.strip().split(\"\\n\")[1:]\n    result = []\n\n    for query in queries:\n        n = int(query.strip().split(\"\\n\")[0])\n        a = list(map(int, query.strip().split(\"\\n\")[1].split()))\n        memo = {}\n        result.append(max_prettiness(n, a, memo, 0, []))\n\n    return \"\\n\".join(map(str, result)) + \"\\n\"",
        "test": "assert solution(\"3\\n4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n\") == \"30\\n31\\n10\\n\" ",
        "num_ids": 1408
    },
    {
        "number": 4413,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def can_be_teammates(a, b):\n        return abs(a - b) > 1\n\n    def min_teams(n, skills):\n        skills = sorted(skills)\n        teams = []\n        for skill in skills:\n            is_teammable_with_some_team = any(can_be_teammates(skill, team_mate) for team in teams for team_mate in team)\n            if not is_teammable_with_some_team:\n                teams.append([skill])\n            else:\n                for team in teams:\n                    if can_be_teammates(skill, team[0]):\n                        team.append(skill)\n                        break\n        return len(teams)\n\n    queries = stdin.split(\"\\n\")\n    q = int(queries[0])\n    output = []\n    for i in range(1, q + 1):\n        n = int(queries[2 * i - 1])\n        skills = list(map(int, queries[2 * i].split()))\n        min_teams_for_query = min_teams(n, skills)\n        output.append(str(min_teams_for_query))\n    return \"\\n\".join(output)",
        "test": "assert solution(\"4\\n4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"",
        "num_ids": 897
    },
    {
        "number": 4414,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def check_condition(a, b, n, S):\n        total = a * n + b\n        if total < S:\n            return False\n        for x in range(a + 1):\n            y = (S - x * n) // 1\n            if y >= 0 and y <= b:\n                return True\n        return False\n\n    q = int(stdin.split('\\n')[0])\n    test_cases = [list(map(int, case.split())) for case in stdin.split('\\n')[1:]]\n    results = []\n\n    for a, b, n, S in test_cases:\n        if check_condition(a, b, n, S):\n            results.append('YES')\n        else:\n            results.append('NO')\n\n    return '\\n'.join(results)",
        "test": "assert solution(\"4\\n1 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18\") == \"YES\\nNO\\nNO\\nYES\" ",
        "num_ids": 807
    },
    {
        "number": 4415,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def find_increasing_sequence(a):\n        increasing_sequence = []\n        for i in range(len(a)):\n            if i == 0 or a[i] > a[i - 1]:\n                increasing_sequence.append(a[i])\n            else:\n                return increasing_sequence\n        return increasing_sequence\n\n    def find_decreasing_sequence(a):\n        decreasing_sequence = []\n        for i in range(len(a)):\n            if i == 0 or a[i] < a[i - 1]:\n                decreasing_sequence.append(a[i])\n            else:\n                return decreasing_sequence\n        return decreasing_sequence\n\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].strip().split(' ')))\n\n    increasing_sequence = find_increasing_sequence(a)\n    decreasing_sequence = find_decreasing_sequence(a)\n\n    if increasing_sequence + decreasing_sequence != a:\n        return \"NO\"\n\n    n_i = len(increasing_sequence)\n    n_d = len(decreasing_sequence)\n\n    if n_i == 0:\n        increasing_sequence_str = \"\"\n    else:\n        increasing_sequence_str = \" \".join(map(str, increasing_sequence))\n\n    if n_d == 0:\n        decreasing_sequence_str = \"\"\n    else:\n        decreasing_sequence_str = \" \".join(map(str, decreasing_sequence))\n\n    return \"YES\\n{}\\n{}\\n{}\\n{}\".format(n_i, increasing_sequence_str, n_d, decreasing_sequence_str)",
        "test": "assert solution(\"5\\n1 1 2 1 2\") == \"NO\"",
        "num_ids": 1510
    },
    {
        "number": 4416,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    books = [list(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    \n    books.sort(key=lambda x: x[0])\n    \n    alice_books = []\n    bob_books = []\n    \n    for book in books:\n        if book[1] == 1 and len(alice_books) < k:\n            alice_books.append(book)\n        if book[2] == 1 and len(bob_books) < k:\n            bob_books.append(book)\n            \n        if len(alice_books) == k and len(bob_books) == k:\n            break\n            \n    if len(alice_books) < k or len(bob_books) < k:\n        return \"-1\"\n    \n    total_time = sum(book[0] for book in alice_books)\n    total_time += sum(book[0] for book in bob_books)\n    \n    return str(total_time) ",
        "test": "assert solution(\"\"\"8 4",
        "num_ids": 796
    },
    {
        "number": 4417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_equal_price(n: int, k: int, prices: List[int]) -> int:\n        prices.sort()\n        min_price = prices[0]\n        max_price = prices[-1]\n        max_equal_price = -1\n\n        for price in range(min_price, max_price + 1):\n            if all(abs(old_price - price) <= k for old_price in prices):\n                max_equal_price = max(max_equal_price, price)\n\n        return max_equal_price\n\n    queries = []\n    for line in stdin.split('\\n'):\n        if not line:\n            continue\n        n, k = map(int, line.split())\n        prices = list(map(int, input().split()))\n        queries.append((n, k, prices))\n\n    result = []\n    for n, k, prices in queries:\n        result.append(find_max_equal_price(n, k, prices))\n\n    return '\\n'.join(map(str, result))\n",
        "test": "assert solution(\"\"\"4",
        "num_ids": 957
    },
    {
        "number": 4418,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    count = 0\n    for i in range(0, len(a), 6):\n        if not set(a[i:i + 6]) == {4, 8, 15, 16, 23, 42}:\n            count += 1\n\n    return count",
        "test": "assert solution(\"15\\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42\") == 3 ",
        "num_ids": 791
    },
    {
        "number": 4419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_moves(a: int, b: int) -> int:\n        if a == b:\n            return 0\n        elif b > a:\n            k = (b - a) // 10\n            if k == 0:\n                return b - a\n            else:\n                if a + k * 10 + 10 - b <= k:\n                    return k + 1\n                else:\n                    return k + 2\n        else:\n            k = (a - b) // 10\n            if k == 0:\n                return a - b\n            else:\n                if b + k * 10 + 10 - a <= k:\n                    return k + 1\n                else:\n                    return k + 2\n\n    t = int(stdin.split(\"\\n\", 1)[0])\n    lines = stdin.split(\"\\n\", 1)[1].split(\"\\n\")\n\n    result = []\n    for i in range(t):\n        a, b = map(int, lines[i].split())\n        result.append(find_min_moves(a, b))\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"5 5\\n13 42\\n18 4\\n1337 420\\n123456789 1000000000\\n100500 9000\") == \"0\\n3\\n2\\n92\\n87654322\\n9150\" ",
        "num_ids": 806
    },
    {
        "number": 4420,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_k(x, y, n):\n        return x * ((n - y) // x) + y\n\n    t = int(stdin.split('\\n', 1)[0])\n    test_cases = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    output = []\n\n    for x, y, n in test_cases:\n        output.append(find_max_k(x, y, n))\n\n    return '\\n'.join(map(str, output))\n",
        "test": "assert solution(\"7\\n7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"",
        "num_ids": 799
    },
    {
        "number": 4421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    d = list(map(int, stdin.readline().split()))\n    \n    d.sort()\n    pairs = 0\n    i = 0\n    j = n - 1\n    \n    while i < j:\n        if (d[i] + d[j]) % k == 0:\n            pairs += 1\n            i += 1\n            j -= 1\n        elif (d[i] + d[j]) % k < k / 2:\n            i += 1\n        else:\n            j -= 1\n            \n    return str(pairs)\n\nn, k = map(int, input().split())\nd = list(map(int, input().split()))\n\nprint(solution(d)) ",
        "test": "assert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"",
        "num_ids": 692
    },
    {
        "number": 4422,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, K, S = stdin.split()\n    N, K = int(N), int(K)\n    S = list(S)\n    S[K-1] = S[K-1].lower()\n    S = \"\".join(S)\n    return S",
        "test": "assert solution(\"3 1\\nABC\") == \"aBC\"",
        "num_ids": 453
    },
    {
        "number": 4423,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input by newline characters\n    lines = stdin.strip().split('\\n')\n    \n    # The first line contains the number of restaurants\n    n = int(lines[0])\n    \n    # The rest of the lines contain the city and score\n    # We can split each line by space to get the city and score\n    # We also convert the score to an integer\n    restaurants = [tuple(line.split()) + (int(line.split()[1]),) for line in lines[1:]]\n    \n    # We can sort the restaurants using the specified criteria\n    sorted_restaurants = sorted(restaurants, key=lambda x: (-x[2], x[0]))\n    \n    # We can then print the indices of the restaurants in the sorted order\n    for i, restaurant in enumerate(sorted_restaurants, 1):\n        print(i)",
        "test": "assert solution('''6",
        "num_ids": 635
    },
    {
        "number": 4424,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    total = K * 500\n    if total >= X:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"2 900\") == \"Yes\"",
        "num_ids": 341
    },
    {
        "number": 4425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    p = 0\n    for i in range(1, K):\n        if i > N:\n            break\n        p += 1 / (3**i * (2**(i-1)))\n    return \"{:.10f}\".format(p)",
        "test": "assert solution(\"6 10\") == \"0.5714285714\"",
        "num_ids": 528
    },
    {
        "number": 4426,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    days = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"]\n    today = days.index(stdin)\n    days_until_sunday = 7 - today\n    if days_until_sunday == 0:\n        days_until_sunday = 7\n    return str(days_until_sunday) ",
        "test": "assert solution(\"SAT\") == \"1\" # Saturday, next Sunday is on Sunday",
        "num_ids": 466
    },
    {
        "number": 4427,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x2000 = map(int, stdin.split())\n    result = []\n    for i in range(10):\n        x = r * x2000 - D\n        result.append(str(x))\n        x2000 = x\n    return '\\n'.join(result)",
        "test": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\", \"Test case failed\" ",
        "num_ids": 718
    },
    {
        "number": 4428,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    d = list(map(int, stdin.split(\"\\n\")[1].split()))\n    max_sum = float('-inf')\n    \n    for i in range(n + 1):\n        for j in range(i + 1, n + 1):\n            if (i + j) % 2 == 0:\n                left_sum = sum(d[:i])\n                mid_sum = sum(d[i:j])\n                right_sum = sum(d[j:])\n                if left_sum == right_sum and left_sum > max_sum:\n                    max_sum = left_sum\n    \n    return str(max_sum)",
        "test": "assert solution(\"5\\n1 3 2 1 4\\n\") == \"4\"",
        "num_ids": 727
    },
    {
        "number": 4429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def find_triple(x: int, y: int, z: int) -> str:\n        for a in range(1, x + 1):\n            b = max(a, x)\n            c = max(a, y)\n            if b == max(b, z) and c == max(b, z):\n                return f\"YES\\n{a} {b} {c}\\n\"\n        return \"NO\\n\"\n\n    t = int(stdin.readline())\n    result = \"\"\n    for _ in range(t):\n        x, y, z = map(int, stdin.readline().split())\n        result += find_triple(x, y, z)\n    return result.rstrip()",
        "test": "assert solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\" ",
        "num_ids": 1120
    },
    {
        "number": 4430,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    a.sort(reverse=True)\n\n    boxes = [0] * m\n    total_objects_packed = 0\n\n    for obj in a:\n        if obj > k:\n            continue\n        for i in range(m):\n            if boxes[i] + obj <= k:\n                boxes[i] += obj\n                total_objects_packed += 1\n                break\n            elif boxes[i] == 0:\n                boxes[i] = obj\n                total_objects_packed += 1\n                break\n\n    return str(total_objects_packed)",
        "test": "assert solution('5 2 6\\n5 2 1 4 2\\n') == '4'",
        "num_ids": 702
    },
    {
        "number": 4431,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    available_letters = stdin.readline().split()\n\n    valid_substrings = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if all(letter in available_letters for letter in substring):\n                valid_substrings += 1\n\n    return str(valid_substrings)",
        "test": "assert solution(\"7 1\\naaaaaaa\\nb\") == 0",
        "num_ids": 550
    },
    {
        "number": 4432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_alternating(subsequence):\n        for i in range(len(subsequence) - 1):\n            if subsequence[i] * subsequence[i + 1] > 0:\n                return False\n        return True\n\n    def max_alternating_subsequence(a):\n        max_sum = float('-inf')\n        max_length = 0\n        current_sum = 0\n        current_length = 0\n\n        for i in range(len(a)):\n            if current_length == 0 or (a[i] * a[i - 1] < 0):\n                current_sum += a[i]\n                current_length += 1\n            else:\n                if current_length > max_length or (current_length == max_length and current_sum > max_sum):\n                    max_sum = current_sum\n                    max_length = current_length\n                current_sum = a[i]\n                current_length = 1\n\n        if current_length > max_length or (current_length == max_length and current_sum > max_sum):\n            max_sum = current_sum\n            max_length = current_length\n\n        return max_sum\n\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    result = []\n\n    for i in range(1, t + 1):\n        n = int(lines[2 * i - 1])\n        a = [int(x) for x in lines[2 * i].split()]\n        max_sum = max_alternating_subsequence(a)\n        result.append(str(max_sum))\n\n    return '\\n'.join(result)",
        "test": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"",
        "num_ids": 1396
    },
    {
        "number": 4433,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def kruskal(n, edges):\n        parent = list(range(n))\n        rank = [0] * n\n        def find(x):\n            if parent[x] != x:\n                parent[x] = find(parent[x])\n            return parent[x]\n        def union(x, y):\n            x = find(x)\n            y = find(y)\n            if x == y:\n                return False\n            if rank[x] < rank[y]:\n                parent[x] = y\n            else:\n                parent[y] = x\n                if rank[x] == rank[y]:\n                    rank[x] += 1\n            return True\n        mst = []\n        edges.sort(key=lambda e: e[2])\n        for e in edges:\n            if union(e[0]-1, e[1]-1):\n                mst.append(e)\n        return mst\n\n    def max_degree(mst):\n        degrees = [0] * n\n        for e in mst:\n            degrees[e[0]-1] += 1\n            degrees[e[1]-1] += 1\n        return max(degrees)\n\n    def find_tree(n, m, edges, max_d):\n        result = []\n        for e in edges:\n            if e[2] == max_d:\n                result.append(e)\n        return result\n\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    edges = []\n    for i in range(1, m+1):\n        v, u = map(int, lines[i].split())\n        edges.append((v, u, i))\n\n    mst = kruskal(n, edges)\n    max_d = max_degree(mst)\n    result = find_tree(n, m, mst, max_d)\n    output = []\n    for e in result:\n        output.append(f'{e[0]} {e[1]}')\n    return '\\n'.join(output) ",
        "test": "assert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\\n\"",
        "num_ids": 1640
    },
    {
        "number": 4434,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split(\"\\n\")[0])\n    results = []\n\n    for i in range(1, test_cases + 1):\n        n = int(stdin.split(\"\\n\")[i])\n        total_moves = (n - 1) * ((n // 2) + 1)\n        results.append(str(total_moves))\n\n    return \"\\n\".join(results)",
        "test": "assert solution(\"1\\n1\\n5\\n499993\") == \"0\"",
        "num_ids": 1007
    },
    {
        "number": 4435,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    d = [0] * n\n    q = []\n\n    for i in range(n):\n        if a[i] % 2 != i % 2:\n            q.append(i)\n\n    while q:\n        i = q.pop(0)\n        for j in [max(1, i - a[i]), min(n, i + a[i])]:\n            if a[j] % 2 != a[i] % 2:\n                d[i] = 1\n                break\n        else:\n            if d[i] == 0:\n                d[i] = -1\n                continue\n            for j in [max(1, i - a[i]), min(n, i + a[i])]:\n                if a[j] % 2 != a[i] % 2:\n                    if d[i] + 1 < d[j] or d[j] == 0:\n                        d[j] = d[i] + 1\n                        q.append(j)\n\n    return ' '.join(map(str, d))\n\ninput_data = \"10\\n4 5 7 6 7 5 4 4 6 4\"\noutput = solution(input_data)\nprint(output) ",
        "test": "assert solution(\"10\\n4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"",
        "num_ids": 1237
    },
    {
        "number": 4436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def find_a_b_c(n: int) -> str:\n        if n % 8 == 0:\n            a, b, c = 2, 2, n // 8\n        elif n % 4 == 0:\n            a, b, c = 2, n // 4, 2\n        else:\n            return \"NO\"\n        return f\"{a} {b} {c}\"\n\n    t = int(stdin.split('\\n')[0])\n    lines = stdin.split('\\n')[1:]\n    result = []\n    for n in map(int, lines):\n        if n <= 1:\n            result.append(\"NO\")\n        else:\n            result.append(find_a_b_c(n))\n    return \"\\n\".join(result)\n\nstdin = \"\"\"5\n64\n32\n97\n2\n12345\"\"\"\n\nprint(solution(stdin)) ",
        "test": "assert solution(\"5\\n64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8 \\nNO\\nNO\\nYES\\n3 5 823\" ",
        "num_ids": 1069
    },
    {
        "number": 4437,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n\n    def count_a_b(s: str, l: int) -> int:\n        return s[:l].count(\"a\"), s[:l].count(\"b\")\n\n    def is_valid(s: str) -> bool:\n        for i in range(2, n + 1, 2):\n            a, b = count_a_b(s, i)\n            if a != b:\n                return False\n        return True\n\n    if is_valid(s):\n        return \"0\\n\" + s\n\n    min_operations = float(\"inf\")\n    result = \"\"\n\n    for i in range(n):\n        for j in range(i, n):\n            new_s = s[:i] + (\"a\" if s[i] == \"b\" else \"b\") + s[i + 1:j + 1] + (\"a\" if s[j] == \"b\" else \"b\") + s[j + 1:]\n            operations = i + j + 2\n            if is_valid(new_s) and operations < min_operations:\n                min_operations = operations\n                result = new_s\n\n    return f\"{min_operations}\\n{result}\"\n",
        "test": "assert solution(\"6\\nababab\") == \"0\\nababab\"",
        "num_ids": 907
    },
    {
        "number": 4438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def is_visited(visited, x, y):\n        return visited[x + 5][y + 5]\n\n    def visit(visited, x, y):\n        visited[x + 5][y + 5] = True\n\n    def distance(x1, y1, x2, y2):\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    def find_min_distance(key_points, visited):\n        min_distance = 0\n        for i in range(len(key_points)):\n            min_level = max(key_points[i])\n            min_distance += distance(0, 0, key_points[i][0], key_points[i][1])\n            for j in range(i + 1, len(key_points)):\n                if max(key_points[j]) == min_level + 1:\n                    min_distance += distance(key_points[i][0], key_points[i][1], key_points[j][0], key_points[j][1])\n                    visit(visited, key_points[i][0], key_points[i][1])\n                    visit(visited, key_points[j][0], key_points[j][1])\n            if not is_visited(visited, key_points[i][0], key_points[i][1]):\n                return float('inf')\n        return min_distance\n\n    n = int(stdin.readline().strip())\n    key_points = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        key_points.append((x, y))\n\n    visited = [[False for _ in range(11)] for _ in range(11)]\n    min_distance = find_min_distance(key_points, visited)\n    return str(min_distance)",
        "test": "assert solution(\"\"\"8",
        "num_ids": 1249
    },
    {
        "number": 4439,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    correct_choice = [1, 2, 3]\n    correct_choice.remove(a)\n    correct_choice.remove(b)\n    return str(correct_choice[0])",
        "test": "assert solution(\"3\\n1\") == \"2\"  # Test case 1",
        "num_ids": 359
    },
    {
        "number": 4440,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin.strip())\n    max_volume = 0\n\n    for a in range(1, L // 3 + 1):\n        for b in range(1, L // 2 + 1):\n            c = L - a - b\n            if c > 0:\n                volume = a * b * c\n                if volume > max_volume:\n                    max_volume = volume\n\n    return f\"{max_volume:.12f}\"",
        "test": "assert solution(\"3\") == \"1.000000000000\"",
        "num_ids": 617
    },
    {
        "number": 4441,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    \n    if N == 1:\n        return \"Hello World\"\n    else:\n        A, B = map(int, stdin.split(\"\\n\")[1:])\n        return str(A + B)",
        "test": "assert solution(\"1\\n\") == \"Hello World\"  # N=1, Hello World",
        "num_ids": 457
    },
    {
        "number": 4442,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    string_a = str(a) * b\n    string_b = str(b) * a\n    return min(string_a, string_b)",
        "test": "assert solution(\"4 3\") == \"3333\"",
        "num_ids": 355
    },
    {
        "number": 4443,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.lower()\n    if c == 'y':\n        return 'z'\n    elif c == 'z':\n        return 'a'\n    else:\n        return chr(ord(c)+1)",
        "test": "assert solution('a') == 'b'",
        "num_ids": 255
    },
    {
        "number": 4444,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return t + s",
        "test": "assert solution(\"oder atc\") == \"atcoder\"",
        "num_ids": 226
    },
    {
        "number": 4445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = list(map(int, stdin.split()))\n    arr.sort()\n\n    parity = None\n    sum_of_non_deleted = 0\n    for i in range(n):\n        if parity == None:\n            parity = arr[i] % 2\n            continue\n\n        if (arr[i] % 2) != parity:\n            sum_of_non_deleted += arr[i]\n            parity = (arr[i] % 2)\n        else:\n            break\n\n    return str(sum_of_non_deleted)",
        "test": "assert solution(\"2\\n1000000 1000000\\n\") == \"1000000\"",
        "num_ids": 726
    },
    {
        "number": 4446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k, hp = map(int, stdin.split()[0:5])\n    h = list(map(int, stdin.split()[5:]))\n\n    points = 0\n    skip_turns = 0\n\n    for i in range(n):\n        if skip_turns < k and h[i] <= a:\n            points += 1\n            skip_turns += 1\n        else:\n            h[i] -= a\n\n        if h[i] > 0:\n            h[i] -= b\n            if h[i] <= a:\n                skip_turns = 0\n\n    return str(points)",
        "test": "assert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\\n\") == \"6\"",
        "num_ids": 887
    },
    {
        "number": 4447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    remainder_count = [0] * m\n    for num in a:\n        remainder_count[num % m] += 1\n\n    moves = 0\n    for i in range(m):\n        moves += abs(remainder_count[i] - n // m)\n\n    target_remainder_count = [n // m] * m\n\n    def find_move(remainder_count, target_remainder_count):\n        min_moves = float('inf')\n        for i in range(m):\n            if remainder_count[i] > target_remainder_count[i]:\n                diff = remainder_count[i] - target_remainder_count[i]\n                moves = diff + (i + 1) * (diff - 1) // 2\n                if moves < min_moves:\n                    min_moves = moves\n            elif target_remainder_count[i] > remainder_count[i]:\n                diff = target_remainder_count[i] - remainder_count[i]\n                moves = diff + (i + 1) * (diff - 1) // 2\n                if moves < min_moves:\n                    min_moves = moves\n        return min_moves\n\n    moves += find_move(remainder_count, target_remainder_count)\n\n    for i in range(m):\n        diff = target_remainder_count[i] - remainder_count[i]\n        for _ in range(diff):\n            for j in range(n):\n                if a[j] % m == i:\n                    a[j] += 1\n                    break\n\n    return f\"{moves}\\n{' '.join(map(str, a))}\"",
        "test": "assert solution(\"4 2\\n0 1 2 3\\n\") == \"0\\n0 1 2 3\"",
        "num_ids": 1268
    },
    {
        "number": 4448,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def parse_input(stdin: str) -> tuple:\n        lines = stdin.split(\"\\n\")\n        n, m = map(int, lines[0].split())\n        k = list(map(int, lines[1].split()))\n        specials = [(int(line.split()[0]), int(line.split()[1])) for line in lines[2:]]\n        return n, m, k, specials\n\n    def min_days(n: int, m: int, k: list, specials: list) -> int:\n        days = 0\n        burles = 0\n        on_sale = [False] * n\n\n        for i in range(1, 1001):\n            days += 1\n            burles += 1\n\n            for j in range(m):\n                if specials[j][0] == i:\n                    on_sale[specials[j][1] - 1] = True\n\n            for j in range(n):\n                if k[j] > 0:\n                    if not on_sale[j]:\n                        if burles >= 2:\n                            burles -= 2\n                            k[j] -= 1\n                    else:\n                        if burles >= 1:\n                            burles -= 1\n                            k[j] -= 1\n\n            if all(x == 0 for x in k):\n                return days\n\n        return -1\n\n    n, m, k, specials = parse_input(stdin)\n    result = min_days(n, m, k, specials)\n    return str(result)",
        "test": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\" ",
        "num_ids": 1261
    },
    {
        "number": 4449,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def equal_rectangles(n, sticks):\n        total_area = sum(sticks)\n        if total_area % (4 * n) != 0:\n            return False\n        side = total_area // (4 * n)\n        for i in range(0, len(sticks), 4):\n            a, b, c, d = sticks[i], sticks[i + 1], sticks[i + 2], sticks[i + 3]\n            if a + b != c + d or a * b != side:\n                return False\n        return True\n\n    def process_query(query):\n        n, sticks = query\n        return \"YES\" if equal_rectangles(n, sticks) else \"NO\"\n\n    queries = [list(map(int, line.split())) for line in stdin.split(\"\\n\") if line]\n    q = queries[0][0]\n    queries = queries[1:]\n    results = [process_query(queries[i:i + 2]) for i in range(0, len(queries), 2)]\n    return \"\\n\".join(results)\n",
        "test": "assert solution(\"5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\\nYES\\nNO\\nYES\\nYES\" ",
        "num_ids": 851
    },
    {
        "number": 4450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def dijkstra(graph, start, end):\n        shortest_paths = {vertex: float('inf') for vertex in graph}\n        shortest_paths[start] = 0\n        visited = set()\n        queue = [(0, start)]\n\n        while queue:\n            (cost, current_vertex) = heapq.heappop(queue)\n            if current_vertex not in visited:\n                visited.add(current_vertex)\n                for neighbor, weight in graph[current_vertex].items():\n                    new_cost = cost + weight\n                    if new_cost < shortest_paths[neighbor]:\n                        shortest_paths[neighbor] = new_cost\n                        heapq.heappush(queue, (new_cost, neighbor))\n        return shortest_paths[end]\n\n    def kth_smallest_path(graph, n, m, k):\n        distances = []\n        for i in range(1, n):\n            for j in range(i + 1, n + 1):\n                if (i, j) not in graph and (j, i) not in graph:\n                    continue\n                distance = dijkstra(graph, i, j)\n                distances.append(distance)\n        distances.sort()\n        return distances[k - 1]\n\n    lines = stdin.split('\\n')\n    n, m, k = map(int, lines[0].split())\n    graph = {i: {} for i in range(1, n + 1)}\n\n    for line in lines[1:m + 1]:\n        x, y, w = map(int, line.split())\n        graph[x][y] = w\n        graph[y][x] = w\n\n    result = kth_smallest_path(graph, n, m, k)\n    return str(result) ",
        "test": "assert solution(\"\"\"6 10 5",
        "num_ids": 1430
    },
    {
        "number": 4451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def diversity(team):\n        return max(team) - min(team)\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    a.sort()\n\n    teams = []\n    res = 0\n    k = 0\n\n    for i in range(n - 2):\n        if a[i] != a[i + 1] != a[i + 2]:\n            team = [a[i], a[i + 1], a[i + 2]]\n            teams.append(team)\n            res += diversity(team)\n            k += 1\n\n    i = n - 3\n    while i >= 0:\n        if a[i] != a[i + 1] != a[i + 2]:\n            team = [a[i], a[i + 1], a[i + 2]]\n            teams.append(team)\n            res += diversity(team)\n            k += 1\n        i -= 1\n\n    teams.sort(key=lambda x: (-diversity(x), x[0], x[1], x[2]))\n\n    team_assignments = [0] * n\n    for i in range(n):\n        if a[i] in teams[0]:\n            team_assignments[i] = 1\n            teams.pop(0)\n        elif a[i] in teams[-1]:\n            team_assignments[i] = k\n            teams.pop()\n        else:\n            for j in range(1, k - 1):\n                if a[i] in teams[j]:\n                    team_assignments[i] = j + 1\n                    teams.pop(j)\n                    break\n\n    return f\"{res} {k}\\n{' '.join(map(str, team_assignments))}\\n\"\n",
        "test": "assert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\\n\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\\n\" ",
        "num_ids": 1770
    },
    {
        "number": 4452,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_round(n: int) -> bool:\n        while n > 9:\n            digit = n % 10\n            if digit != 0:\n                return False\n            n //= 10\n        return True\n\n    def find_min_summands(n: int) -> str:\n        if n <= 9:\n            return f\"1\\n{n}\"\n\n        result = []\n        i = 1\n        while True:\n            if is_round(i):\n                if i <= n:\n                    result.append(i)\n                    n -= i\n                else:\n                    if n == 0:\n                        break\n                    n += i - n\n                    result.append(n)\n                    n -= n\n                    break\n            i += 1\n\n        return f\"{len(result)}\\n{' '.join(map(str, result))}\"\n\n    t = int(stdin.split('\\n', 1)[0])\n    lines = stdin.split('\\n', 1)[1].split('\\n')\n\n    return '\\n'.join(find_min_summands(int(n)) for n in lines[:t])",
        "test": "assert solution(\"5\\n5009\\n7\\n9876\\n10000\\n10\") == \"\"\"2",
        "num_ids": 1062
    },
    {
        "number": 4453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_cycle_length(n: int, p: List[int]) -> List[int]:\n        vis = [False] * n\n        dist = [0] * n\n        for i in range(n):\n            if not vis[i]:\n                j = i\n                while not vis[j]:\n                    vis[j] = True\n                    j = p[j] - 1\n                if j != i:\n                    k = p[j] - 1\n                    while k != j:\n                        dist[k] = dist[j] + 1\n                        k = p[k] - 1\n                    dist[k] = dist[j] + 1\n        return dist\n\n    def find_first_return_day(n: int, p: List[int]) -> List[int]:\n        cycle_length = find_cycle_length(n, p)\n        first_return_day = [0] * n\n        for i in range(n):\n            for j in range(i, n, len(cycle_length)):\n                if cycle_length[j] == 1:\n                    first_return_day[j] = 1\n                else:\n                    first_return_day[j] = cycle_length[j] - (cycle_length[j] - i + j) % cycle_length[j]\n                    break\n        return first_return_day\n\n    q = int(stdin.readline())\n    output = []\n    for i in range(q):\n        n = int(stdin.readline())\n        p = list(map(int, stdin.readline().strip().split()))\n        first_return_day = find_first_return_day(n, p)\n        output.append(\" \".join(map(str, first_return_day)))\n\n    return \"\\n\".join(output)",
        "test": "assert solution(\"\"\"6",
        "num_ids": 1354
    },
    {
        "number": 4454,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    queries = int(lines[0])\n    result = []\n\n    for i in range(1, queries * 2, 2):\n        n = int(lines[i])\n        prices = list(map(int, lines[i + 1].split()))\n        min_price = min(prices)\n        total_price = sum(prices)\n\n        if total_price % n != 0:\n            new_price = total_price // n + 1\n        else:\n            new_price = total_price // n\n\n        if new_price < min_price:\n            result.append(min_price)\n        else:\n            result.append(new_price)\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"3\\n5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1\") == \"3\\n2\\n1\"",
        "num_ids": 702
    },
    {
        "number": 4455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def can_mentor(x: int, y: int) -> bool:\n        return (x, y) not in quarrels and r[x] > r[y]\n\n    def count_mentors(i: int) -> int:\n        return sum(can_mentor(i, j) for j in range(n) if j != i)\n\n    # Read input\n    n, k = map(int, stdin.readline().split())\n    r = list(map(int, stdin.readline().split()))\n    quarrels = set()\n    for _ in range(k):\n        x, y = map(int, stdin.readline().split())\n        quarrels.add((min(x, y), max(x, y)))\n\n    # Calculate mentors for each programmer\n    mentors = [count_mentors(i) for i in range(n)]\n\n    # Return output\n    return \" \".join(map(str, mentors)) + \"\\n\"",
        "test": "assert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\"",
        "num_ids": 848
    },
    {
        "number": 4456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    def generate_permutation(p):\n        p_dict = {}\n        for i, num in enumerate(p, start=1):\n            p_dict[num] = i\n        \n        perm = [0] * n\n        for i in range(n):\n            perm[i] = p_dict[i + 1]\n        \n        return perm\n    \n    def find_next_permutation(perm):\n        i = n - 2\n        while i >= 0 and perm[i] > perm[i + 1]:\n            i -= 1\n        \n        if i == -1:\n            return False\n        \n        j = n - 1\n        while perm[j] < perm[i]:\n            j -= 1\n        \n        perm[i], perm[j] = perm[j], perm[i]\n        \n        left = i + 1\n        right = n - 1\n        while left < right:\n            perm[left], perm[right] = perm[right], perm[left]\n            left += 1\n            right -= 1\n        \n        return True\n    \n    def check_conditions(p, q):\n        for i in range(n - 1):\n            if s[p[i] - 1] > s[p[i + 1] - 1] or s[q[i] - 1] > s[q[i + 1] - 1]:\n                return False\n        return True\n    \n    n, k = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    q = list(map(int, stdin.readline().split()))\n    \n    if n < k:\n        return \"NO\"\n    \n    p_perm = generate_permutation(p)\n    q_perm = generate_permutation(q)\n    \n    s = [\"a\"] * n\n    for i in range(n):\n        if i < k:\n            s[p_perm[i] - 1] = chr(ord(\"a\") + i)\n            s[q_perm[i] - 1] = chr(ord(\"a\") + i)\n        else:\n            s[p_perm[i] - 1] = chr(ord(\"a\") + k - 1)\n            s[q_perm[i] - 1] = chr(ord(\"a\") + k - 1)\n    \n    while not check_conditions(p_perm, q_perm):\n        if not find_next_permutation(p_perm) or not find_next_permutation(q_perm):\n            return \"NO\"\n        \n        for i in range(n):\n            if i < k:\n                s[p_perm[i] - 1] = chr(ord(\"a\") + i)\n                s[q_perm[i] - 1] = chr(ord(\"a\") + i)\n            else:\n                s[p_perm[i] - 1] = chr(ord(\"a\") + k - 1)\n                s[q_perm[i] - 1] = chr(ord(\"a\") + k - 1)\n    \n    return \"YES\\n\" + \"\".join(s) ",
        "test": "assert solution(\"10 5\\n1 5 3 2 9 8 7 6 4 10\\n1 4 7 2 5 8 3 10 9 6\") == \"YES\\nabcdeffghij\"",
        "num_ids": 1709
    },
    {
        "number": 4457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def sort_cans(a):\n        a.sort(key=lambda x: x[1])\n        return [i[0] for i in a]\n\n    def min_shots(a):\n        shots = 0\n        x = 0\n        for i in range(n):\n            shots += (a[i] * x + 1)\n            x += 1\n        return shots\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    cans = sorted(enumerate(a), key=lambda x: x[1])\n    order = sort_cans(cans)\n    min_shots_count = min_shots(a)\n\n    return f\"{min_shots_count}\\n{' '.join(map(str, order))}\" ",
        "test": "assert solution(\"2\\n1 4\") == \"3\\n2 1\" ",
        "num_ids": 821
    },
    {
        "number": 4458,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N, *P = map(int, stdin.split())\n    count = 0\n\n    for i in range(1, N + 1):\n        is_valid = True\n        for j in range(1, i):\n            if P[i - 1] < P[j - 1]:\n                is_valid = False\n                break\n        if is_valid:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"1\\n1\") == \"1\"",
        "num_ids": 489
    },
    {
        "number": 4459,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    counts = {}\n    for num in a:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    removals = 0\n    for num in counts:\n        if counts[num] > num:\n            removals += counts[num] - num\n\n    return str(removals)",
        "test": "assert solution(\"7\\n1 2 3 4 5 6 7\") == \"0\"",
        "num_ids": 609
    },
    {
        "number": 4460,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    \n    for i in range(1, 6):\n        if eval(f\"x_{i}\") == 0:\n            return str(i)",
        "test": "assert solution(\"0 2 3 4 5\") == \"1\"",
        "num_ids": 443
    },
    {
        "number": 4461,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    S_min = (H * W) // 3\n    S_max = (H * W) // 2\n    return S_max - S_min",
        "test": "assert solution(\"5 2\\n\") == 2",
        "num_ids": 328
    },
    {
        "number": 4462,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, *a = list(map(int, stdin.split()))\n    \n    # Check if it's possible to permute the sequence\n    for i in range(N - 1):\n        if a[i] * a[i + 1] % 4 != 0:\n            return \"No\"\n    \n    return \"Yes\"",
        "test": "assert solution(\"3\\n1 10 11\") == \"No\"",
        "num_ids": 523
    },
    {
        "number": 4463,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    s_dict = {}\n    for char in s:\n        s_dict[char] = s_dict.get(char, 0) + 1\n\n    for char in t:\n        if char not in s_dict or s_dict[char] == 0:\n            return \"No\"\n        s_dict[char] -= 1\n\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] < t[0]:\n            return \"Yes\"\n        elif s[i] == t[0]:\n            s = s[:i] + s[i + 1:]\n            t = t[1:]\n            if s < t:\n                return \"Yes\"\n\n    return \"No\"",
        "test": "assert solution(\"atcoder\\nxyz\") == \"No\"",
        "num_ids": 656
    },
    {
        "number": 4464,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    total = 0\n    count = 0\n\n    for i in range(A, B + 1):\n        if total + i >= C and total + i < B:\n            total += i\n            count += 1\n        elif total + i == B:\n            count += 1\n            break\n        elif total + i > B:\n            break\n\n    if total == C:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert solution(\"7 5 2\") == \"NO\"",
        "num_ids": 471
    },
    {
        "number": 4465,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    area = a * b\n    road_area = (a + b) - 2\n    total_area = area - road_area\n    return str(total_area)",
        "test": "assert solution(\"100 100\") == \"9801\\n\"",
        "num_ids": 327
    },
    {
        "number": 4466,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    return str((X - 2 * Z) // Y)",
        "test": "assert solution(\"1000 1 0\") == \"1000\"",
        "num_ids": 341
    },
    {
        "number": 4467,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    red_points = [tuple(map(int, lines[i+1].split())) for i in range(N)]\n    blue_points = [tuple(map(int, lines[i+N+1].split())) for i in range(N)]\n\n    count = 0\n    for red_point in red_points:\n        for blue_point in blue_points:\n            if red_point[0] < blue_point[0] and red_point[1] < blue_point[1]:\n                count += 1\n                blue_points.remove(blue_point)\n                break\n\n    return str(count)",
        "test": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\") == \"2\"",
        "num_ids": 855
    },
    {
        "number": 4468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, T, *times = list(map(int, stdin.split()))\n    times.sort()\n\n    total_time = 0\n    start_time = 0\n    for time in times:\n        if time > start_time:\n            total_time += time - start_time\n            start_time = time\n\n    total_time += T\n\n    return str(total_time)",
        "test": "assert solution(\"4 3\\n0 2 4 6\") == 6",
        "num_ids": 602
    },
    {
        "number": 4469,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def get_position(book_id: int) -> int:\n        for i, book in enumerate(books):\n            if book == book_id:\n                return i\n        return -1\n\n    queries = stdin.split('\\n')[1:]\n    books = []\n    result = []\n\n    for query in queries:\n        q_type, book_id = query.split()\n        book_id = int(book_id)\n\n        if q_type == 'L':\n            books.insert(0, book_id)\n        elif q_type == 'R':\n            books.append(book_id)\n        else:\n            pos = get_position(book_id)\n            if pos == -1:\n                result.append(-1)\n            elif pos == 0:\n                result.append(0)\n            elif pos == len(books) - 1:\n                result.append(0)\n            else:\n                result.append(min(pos, len(books) - pos - 1))\n\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"",
        "num_ids": 1118
    },
    {
        "number": 4470,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = [int(line) for line in stdin.splitlines()[1:]]\n    result = []\n\n    for n in queries:\n        if n == 1:\n            result.append(0)\n            continue\n\n        moves = 0\n        while n > 1:\n            if n % 2 == 0:\n                n //= 2\n            elif n % 3 == 0:\n                n = n * 2 // 3\n            elif n % 5 == 0:\n                n = n * 4 // 5\n            else:\n                break\n            moves += 1\n\n        if n == 1:\n            result.append(moves)\n        else:\n            result.append(-1)\n\n    return \"\\n\".join(str(r) for r in result)",
        "test": "assert solution(\"1\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\\n\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\"",
        "num_ids": 757
    },
    {
        "number": 4471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def clear_field(n: int, a: List[int]) -> str:\n        while any(a):\n            for i in range(n):\n                if a[i] > 0:\n                    a[i] += 2\n                    break\n            for i in range(n):\n                a[i] = max(a[i] - 1, 0)\n        return \"YES\" if not any(a) else \"NO\"\n\n    t = int(stdin.split(\"\\n\")[0])\n    for i in range(1, t + 1):\n        n, a = list(map(int, stdin.split(\"\\n\")[2 * i - 1].split()))\n        a = list(map(int, stdin.split(\"\\n\")[2 * i].split()))\n        print(clear_field(n, a))\n",
        "test": "assert solution(\"4\\n3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\\nNO\\nYES\\nYES\"",
        "num_ids": 848
    },
    {
        "number": 4472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n\n    count = 0\n\n    for i in range(n):\n        if a[i] != b[i]:\n            count += 1\n\n    return str(count // 2)",
        "test": "assert solution(\"5\\nzcabd\\ndbacz\\n\") == 0",
        "num_ids": 634
    },
    {
        "number": 4473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def frog_position(a: int, b: int, k: int) -> int:\n        position = 0\n        for i in range(1, k + 1):\n            if i % 2 == 0:\n                position += a\n            else:\n                position -= b\n        return position\n\n    t = int(stdin.split(\"\\n\")[0])\n    queries = [list(map(int, query.split())) for query in stdin.split(\"\\n\")[1:t + 1]]\n    result = []\n\n    for query in queries:\n        a, b, k = query\n        result.append(frog_position(a, b, k))\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"",
        "num_ids": 792
    },
    {
        "number": 4474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(x: int) -> bool:\n        powers = []\n        for i in range(19):\n            if x >= 3**i:\n                x -= 3**i\n                powers.append(i)\n                if x == 0:\n                    return len(powers) == len(set(powers))\n        return False\n\n    def find_smallest_good(n: int) -> int:\n        m = n\n        while not is_good(m):\n            m += 1\n        return m\n\n    q = int(stdin.readline())\n    result = []\n    for _ in range(q):\n        n = int(stdin.readline())\n        result.append(str(find_smallest_good(n)))\n    return \"\\n\".join(result)",
        "test": "assert solution(\"8\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n100000000000000000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089\"",
        "num_ids": 922
    },
    {
        "number": 4475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    t = int(lines[0])\n    products = []\n\n    for i in range(1, t + 1):\n        a, b, x, y, n = map(int, lines[i].split())\n        a_diff, b_diff = a - x, b - y\n        if a_diff <= n:\n            products.append((a - n) * (b - min(n - a_diff, b_diff)))\n        else:\n            products.append(a * b)\n\n    return \"\\n\".join(map(str, products))",
        "test": "assert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n177177\\n999999999000000000\\n999999999\\n55\\n10\\n\" ",
        "num_ids": 1152
    },
    {
        "number": 4476,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def min_moves(a: int, b: int) -> int:\n        if a == b:\n            return 0\n        elif a > b:\n            return min_moves(a - 2, b) + 1\n        else:\n            return min_moves(a + 1, b) + 1\n\n    t = int(stdin.split('\\n')[0])\n    test_cases = [list(map(int, case.split())) for case in stdin.split('\\n')[1:]]\n    results = [min_moves(a, b) for a, b in test_cases]\n    return '\\n'.join(map(str, results))",
        "test": "assert solution(\"1\\n1 1\") == \"0\"",
        "num_ids": 947
    },
    {
        "number": 4477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    total_presses = []\n    for i in range(1, t + 1):\n        x = int(stdin.split('\\n')[i])\n        digit = str(x)[0]\n        num_presses = 0\n        for j in range(1, len(str(x)) + 1):\n            num_presses += int(digit) * j\n        total_presses.append(str(num_presses))\n    return '\\n'.join(total_presses)\n",
        "test": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\" ",
        "num_ids": 584
    },
    {
        "number": 4478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def read_line() -> str:\n        return stdin.readline().strip()\n\n    def read_int() -> int:\n        return int(read_line())\n\n    def read_ints() -> List[int]:\n        return list(map(int, read_line().split()))\n\n    k = read_int()\n    sequences = []\n    for _ in range(k):\n        n = read_int()\n        sequence = read_ints()\n        sequences.append((n, sequence))\n\n    for i in range(k):\n        n1, sequence1 = sequences[i]\n        for j in range(k):\n            if i == j:\n                continue\n            n2, sequence2 = sequences[j]\n            for x in range(n1):\n                for y in range(n2):\n                    if sum(sequence1[:x] + sequence1[x + 1:]) == sum(sequence2[:y] + sequence2[y + 1:]):\n                        return \"YES\\n\" + f\"{i + 1} {x + 1}\\n{j + 1} {y + 1}\"\n    return \"NO\"",
        "test": "assert solution(\"\"\"",
        "num_ids": 1156
    },
    {
        "number": 4479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    A, K = map(int, stdin.split())\n    A.sort()\n    for i in range(K):\n        A[i] = -A[i]\n    return sum(A)",
        "test": "assert solution([2,-3,-1,5,-4], 2) == 13",
        "num_ids": 362
    },
    {
        "number": 4480,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.strip().split()))\n    total_sum = sum(A)\n    if total_sum % 3 != 0:\n        return \"false\"\n    target = total_sum // 3\n    for i in range(1, len(A) - 1):\n        if sum(A[:i]) == target and sum(A[i:2 * i]) == target:\n            return \"true\"\n    return \"false\"",
        "test": "assert solution([0,0,0,0,0,0,0,0]) == True",
        "num_ids": 899
    },
    {
        "number": 4481,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    voting_papers = stdin.split('\\n')[1:]\n    voting_count = {}\n    \n    for i in range(N):\n        if voting_papers[i] in voting_count:\n            voting_count[voting_papers[i]] += 1\n        else:\n            voting_count[voting_papers[i]] = 1\n            \n    max_votes = max(voting_count.values())\n    most_voted = [key for key, value in voting_count.items() if value == max_votes]\n    most_voted.sort()\n    \n    return '\\n'.join(most_voted)",
        "test": "assert solution(\"4\\nabc\\ndef\\nabc\\nghi\") == \"abc\"",
        "num_ids": 782
    },
    {
        "number": 4482,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    a.sort()\n\n    if n % 2 == 0:\n        median = (a[n // 2 - 1] + a[n // 2]) // 2\n    else:\n        median = a[n // 2]\n\n    cost = sum((x - median) ** 2 for x in a)\n    return str(cost)",
        "test": "assert solution(\"4\\n10 10 10 10\\n\") == \"0\"",
        "num_ids": 575
    },
    {
        "number": 4483,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    cake_price = A\n    donut_price = B\n    total_money = X\n    \n    money_left = total_money - cake_price\n    max_donuts = money_left // donut_price\n    money_left -= max_donuts * donut_price\n    \n    return str(money_left)",
        "test": "assert solution(\"1000\\n500\\n500\") == \"0\"",
        "num_ids": 598
    },
    {
        "number": 4484,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    mod = 10**9 + 7\n    return str(((2**n * 2**m) - (2**(n+m) - 2**n - 2**m)) % mod)",
        "test": "assert solution('2 2') == '8'",
        "num_ids": 1067
    },
    {
        "number": 4485,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    services = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n\n    reachable_islands = set()\n    for service in services:\n        if 1 in service:\n            reachable_islands.add(service[0])\n            reachable_islands.add(service[1])\n\n    for i in range(1, n):\n        if i not in reachable_islands:\n            break\n    else:\n        return \"POSSIBLE\"\n\n    for service1, service2 in combinations(services, 2):\n        if service1[0] == service2[0] and service1[1] == service2[1]:\n            continue\n        if service1[0] in service2 and service1[1] in service2:\n            continue\n        if service2[0] in service1 and service2[1] in service1:\n            continue\n\n        reachable_islands1 = set()\n        reachable_islands2 = set()\n\n        for service in [service1, service2]:\n            if service[0] == 1:\n                reachable_islands1.add(service[1])\n            if service[1] == 1:\n                reachable_islands1.add(service[0])\n            if service[0] == n:\n                reachable_islands2.add(service[1])\n            if service[1] == n:\n                reachable_islands2.add(service[0])\n\n        if 1 in reachable_islands1 and n in reachable_islands2:\n            return \"POSSIBLE\"\n\n    return \"IMPOSSIBLE\"\n",
        "test": "assert solution(\"5 3\\n1 3\\n2 4\\n3 5\") == \"POSSIBLE\"",
        "num_ids": 1072
    },
    {
        "number": 4486,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    odd_indexed_chars = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            odd_indexed_chars += s[i]\n    return odd_indexed_chars",
        "test": "assert solution(\"\") == \"\"",
        "num_ids": 271
    },
    {
        "number": 4487,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if A[-1] == B[0] and B[-1] == C[0]:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"rng gorilla apple\") == \"YES\"",
        "num_ids": 329
    },
    {
        "number": 4488,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return \"GREATER\"\n    elif a < b:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"",
        "test": "assert solution(\"36\\n24\") == \"GREATER\"",
        "num_ids": 553
    },
    {
        "number": 4489,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split('\\n')[:2])\n    s = stdin.split('\\n')[2:2 + N]\n    t = stdin.split('\\n')[2 + N:]\n\n    blue_cards = [0] * 26\n    red_cards = [0] * 26\n\n    for card in s:\n        for char in card:\n            blue_cards[ord(char) - ord('a')] += 1\n\n    for card in t:\n        for char in card:\n            red_cards[ord(char) - ord('a')] += 1\n\n    max_profit = 0\n    for i in range(26):\n        max_profit += blue_cards[i] * (blue_cards[i] - red_cards[i])\n\n    return str(max_profit)\n\ndef",
        "test": "assert solution(\"3\\napple\\norange\\napple\\n1\\napple\\n\") == \"2\"",
        "num_ids": 781
    },
    {
        "number": 4490,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    bond = {\n        'A': 'T',\n        'C': 'G',\n        'G': 'C',\n        'T': 'A'\n    }\n    return bond[stdin]",
        "test": "assert solution(\"A\") == \"T\"",
        "num_ids": 302
    },
    {
        "number": 4491,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    A = [A[i:i + N] for i in range(0, len(A), N)]\n    dp = [[0] * (N + 1) for _ in range(2)]\n    dp[0][1] = A[0][0]\n    for j in range(2, N + 1):\n        dp[0][j] = dp[0][j - 1] + A[0][j - 1]\n    for i in range(1, 2):\n        dp[i][1] = dp[i - 1][1] + A[i][0]\n        for j in range(2, N + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + A[i][j - 1]\n    return str(dp[1][N])",
        "test": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == \"14\"",
        "num_ids": 1935
    },
    {
        "number": 4492,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    operations = 0\n\n    for i in range(N):\n        if a[i] > x:\n            operations += a[i] // x\n            a[i] = a[i] % x\n\n    for i in range(1, N):\n        if a[i - 1] + a[i] > x:\n            return \"-1\"\n\n    for i in range(N - 1):\n        if a[i] + a[i + 1] <= x:\n            continue\n        else:\n            operations += a[i + 1]\n            a[i + 1] = 0\n\n    return str(operations)",
        "test": "assert solution(\"7 7\\n1 2 3 4 5 6 7\") == 6",
        "num_ids": 846
    },
    {
        "number": 4493,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    grid = [list(map(int, row.split())) for row in stdin.split('\\n')]\n    a = [grid[i][0] - grid[i][1] for i in range(3)]\n    b = [grid[0][i] - grid[1][i] for i in range(3)]\n\n    for i in range(3):\n        for j in range(3):\n            if grid[i][j] != a[i] + b[j]:\n                return \"No\"\n    return \"Yes\"",
        "test": "assert solution(\"1 0 1\\n2 1 2\\n1 0 3\") == \"No\"",
        "num_ids": 791
    },
    {
        "number": 4494,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"ABC\"",
        "test": "assert solution(\"ABC\") == \"ARC\"",
        "num_ids": 257
    },
    {
        "number": 4495,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b + 1):\n        if i % x == 0:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"4 8 2\") == \"3\"",
        "num_ids": 524
    },
    {
        "number": 4496,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    \n    if D == 25:\n        return \"Christmas\"\n    elif D == 24:\n        return \"Christmas Eve\"\n    elif D == 23:\n        return \"Christmas Eve Eve\"\n    elif D == 22:\n        return \"Christmas Eve Eve Eve\"",
        "test": "assert solution(25) == \"Christmas\"",
        "num_ids": 473
    },
    {
        "number": 4497,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_divisible = 0\n    max_num = 0\n\n    for i in range(1, n + 1):\n        divisible_count = 0\n        temp = i\n        while temp % 2 == 0:\n            divisible_count += 1\n            temp //= 2\n        if divisible_count > max_divisible:\n            max_divisible = divisible_count\n            max_num = i\n\n    return str(max_num)",
        "test": "assert solution(20) == 16, \"Failed for N=20\"",
        "num_ids": 563
    },
    {
        "number": 4498,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n\n    if a <= d:\n        if b - a <= 2 * d:\n            if c - b <= d:\n                return \"Yes\"\n    if b <= d:\n        if a - b <= 2 * d:\n            if c - a <= 2 * d:\n                return \"Yes\"\n    if c - b <= d:\n        if a - c <= 2 * d:\n            if b - a <= d:\n                return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"1 2 3 2\") == \"Yes\"",
        "num_ids": 489
    },
    {
        "number": 4499,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    result = \"\"\n    for word in words:\n        result += word[0].upper()\n    return result",
        "test": "assert solution(\"atcoder beginner contest\") == \"ABC\"",
        "num_ids": 315
    },
    {
        "number": 4500,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A + B >= C:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"50 100 120\\n\") == \"Yes\"",
        "num_ids": 384
    },
    {
        "number": 4501,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, A, x_list = list(map(int, stdin.split()))\n    count = 0\n\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if i == j:\n                continue\n            for k in range(1, N + 1):\n                if i == k or j == k:\n                    continue\n                if (x_list[i - 1] + x_list[j - 1] + x_list[k - 1]) / 3 == A:\n                    count += 1\n\n    return str(count)",
        "test": "assert solution(\"10 15\\n1 2 3 4 5 6 7 8 9 10 11 12\") == \"45\"",
        "num_ids": 723
    },
    {
        "number": 4502,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.strip().split()))\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        b = b[::-1]\n    return ' '.join(map(str, b))",
        "test": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"",
        "num_ids": 573
    },
    {
        "number": 4503,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    for i in range(N):\n        if A[i] >= H:\n            return \"Yes\"\n\n    moves = []\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            if A[i] + A[j] >= H:\n                moves.append((A[i], A[j]))\n\n    for move1 in moves:\n        for move2 in moves:\n            if move1 == move2 or move1 > move2:\n                continue\n            if move1[0] + move2[0] >= H and move1[1] + move2[1] >= H:\n                return \"Yes\"\n\n    return \"No\"",
        "test": "assert solution(\"10000000000 100000\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\") == \"Yes\"",
        "num_ids": 2668
    },
    {
        "number": 4504,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    longest_even = 0\n\n    for i in range(n - 1, -1, -1):\n        if s[i] == s[-1]:\n            even_length = i + 1\n            if even_length % 2 == 0 and even_length > longest_even:\n                longest_even = even_length\n        else:\n            break\n\n    return longest_even",
        "test": "assert solution(\"xyzxyz\") == 6",
        "num_ids": 457
    },
    {
        "number": 4505,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = sorted(stdin)\n    return \"Yes\" if s == [\"a\", \"b\", \"c\"] else \"No\"",
        "test": "assert solution('bac') == 'Yes'",
        "num_ids": 292
    },
    {
        "number": 4506,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def get_f_sum(a, b):\n        return sum([a[i] * b[i] for i in range(len(a))])\n\n    def reorder_b(b):\n        b.sort()\n        return b\n\n    def get_min_sum(a, b):\n        b = reorder_b(b)\n        f_sum = 0\n        for l in range(len(a)):\n            for r in range(l, len(a)):\n                f_sum += get_f_sum(a[l:r + 1], b[l:r + 1])\n        return f_sum % 998244353\n\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    b = [int(x) for x in stdin.split('\\n')[2].split()]\n\n    return str(get_min_sum(a, b))",
        "test": "assert solution(\"1\\n1000000\\n1000000\\n\") == \"757402647\"",
        "num_ids": 1009
    },
    {
        "number": 4507,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    offers = [list(map(int, stdin.split('\\n')[i+2].split())) for i in range(m)]\n\n    a.sort()\n\n    total_cost = 0\n    bought = 0\n    free_shovels = 0\n\n    for i in range(len(offers)):\n        x, y = offers[i]\n        while bought + x <= n and bought + x <= k and a[bought+x-1] * (x - y) + total_cost <= (bought + x) * a[bought+x-1]:\n            total_cost += (bought + x) * a[bought+x-1] - a[bought+x-1] * (x - y)\n            bought += x\n            free_shovels += y\n\n    while bought + 1 <= n and bought + 1 <= k:\n        total_cost += a[bought]\n        bought += 1\n\n    return str(total_cost)",
        "test": "assert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"",
        "num_ids": 1104
    },
    {
        "number": 4508,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def find_path(vertex, parent, distance):\n        visited[vertex] = True\n        for neighbor in tree[vertex]:\n            if not visited[neighbor]:\n                if find_path(neighbor, vertex, distance + 1):\n                    return True\n                if distance + 1 + dist[neighbor] <= 2:\n                    return True\n        dist[vertex] = distance\n        return False\n\n    def find_min_edges(start):\n        visited = [False] * (n + 1)\n        dist = [0] * (n + 1)\n        find_path(start, -1, 0)\n        return sum(dist[i] > 2 for i in range(1, n + 1))\n\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    tree = [[] for _ in range(n + 1)]\n    for i in range(1, n):\n        u, v = map(int, lines[i].split())\n        tree[u].append(v)\n        tree[v].append(u)\n\n    start = 1\n    return str(find_min_edges(start))",
        "test": "assert solution(\"\"\"7",
        "num_ids": 1164
    },
    {
        "number": 4509,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def get_kth_non_divisible(n: int, k: int) -> int:\n        count = 0\n        i = 1\n        while count < k:\n            if i % n != 0:\n                count += 1\n                if count == k:\n                    return i\n            i += 1\n\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    result = []\n    for i in range(1, t + 1):\n        n, k = map(int, lines[i].split())\n        result.append(get_kth_non_divisible(n, k))\n\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(7, 97) == 113",
        "num_ids": 619
    },
    {
        "number": 4510,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    messages = list(map(int, stdin.readline().split()))\n\n    conversations = []\n    for message in messages:\n        if message in conversations:\n            continue\n        if len(conversations) == k:\n            conversations.pop()\n        conversations.insert(0, message)\n\n    output = [str(len(conversations))]\n    output.extend(list(map(str, conversations)))\n    return \"\\n\".join(output)",
        "test": "assert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"",
        "num_ids": 705
    },
    {
        "number": 4511,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n\n    n = int(lines[0])\n    damage = 0\n\n    for i in range(n):\n        k = int(lines[i * 2 + 1])\n        cards = [tuple(map(int, line.split())) for line in lines[i * 2 + 2:i * 2 + 2 + k]]\n        cards.sort(key=lambda x: x[1], reverse=True)\n\n        cards_played = 0\n        for j, card in enumerate(cards):\n            if cards_played + card[0] <= 3:\n                cards_played += card[0]\n                damage += card[1]\n            else:\n                break\n\n        if (i + 1) % 10 == 0:\n            damage += card[1]\n\n    return str(damage)",
        "test": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\" ",
        "num_ids": 843
    },
    {
        "number": 4512,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    s, q = stdin.split('\\n')\n    q = int(q)\n    s = list(s)\n    result = []\n\n    for _ in range(q):\n        query = input().split()\n        if query[0] == '1':\n            pos, c = int(query[1]), query[2]\n            s[pos - 1] = c\n        else:\n            l, r = int(query[1]), int(query[2])\n            sub_s = s[l - 1:r]\n            distinct_chars = len(set(sub_s))\n            result.append(str(distinct_chars))\n\n    return '\\n'.join(result)",
        "test": "assert solution(\"dfcbbcfeeedbaea\\n15\\n1 6 e\\n1 4 b\\n2 6 14\\n1 7 b\\n1 12 c\\n2 6 8\\n2 1 6\\n1 7 c\\n1 2 f\\n1 10 a\\n2 7 9\\n1 10 a\\n1 14 b\\n1 1 f\\n2 1 11\") == \"5\\n2\\n5\\n2\\n6\" ",
        "num_ids": 1105
    },
    {
        "number": 4513,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_anti_sudoku(board: List[List[int]]) -> bool:\n        for i in range(9):\n            row = set()\n            col = set()\n            block = set()\n            for j in range(9):\n                if board[i][j] in row or board[j][i] in col or board[3 * (i // 3) + j // 3][3 * (i % 3) + j % 3] in block:\n                    return False\n                row.add(board[i][j])\n                col.add(board[j][i])\n                block.add(board[3 * (i // 3) + j // 3][3 * (i % 3) + j % 3])\n        return True\n\n    def change_elements(board: List[List[int]], changes: int) -> List[List[int]]:\n        if changes == 0:\n            return board\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] != 0:\n                    continue\n                for k in range(1, 10):\n                    board[i][j] = k\n                    if is_anti_sudoku(board):\n                        if changes - 1 == 0:\n                            return board\n                        else:\n                            result = change_elements(board, changes - 1)\n                            if result:\n                                return result\n                board[i][j] = 0\n        return None\n\n    t = int(stdin.readline())\n    result = []\n    for _ in range(t):\n        board = []\n        for _ in range(9):\n            row = [int(x) for x in stdin.readline().strip()]\n            board.append(row)\n        changes = sum(row.count(0) for row in board)\n        anti_sudoku = change_elements(board, changes)\n        if anti_sudoku:\n            result.append('\\n'.join(''.join(str(x) for x in row) for row in anti_sudoku))\n        else:\n            result.append('Impossible')\n\n    return '\\n\\n'.join(result) ",
        "test": "assert solution(\"\"\"1",
        "num_ids": 1142
    },
    {
        "number": 4514,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(u: int) -> List[int]:\n        if u not in visited:\n            visited.add(u)\n            for v in tree[u]:\n                dfs(v)\n            res.append(u)\n\n    n, q = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    tree = defaultdict(list)\n    for i in range(2, n + 1):\n        tree[p[i - 2]].append(i)\n\n    res = []\n    visited = set()\n    dfs(1)\n\n    ans = []\n    for _ in range(q):\n        u, k = map(int, stdin.readline().split())\n        if k > len(res):\n            ans.append(-1)\n        else:\n            ans.append(res[k - 1])\n\n    return \"\\n\".join(map(str, ans))",
        "test": "assert solution(\"\"\"9 6",
        "num_ids": 855
    },
    {
        "number": 4515,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_possible(a: int, b: int, c: int, n: int) -> str:\n        for A in range(n - c + 1):\n            for B in range(n - a - A + 1):\n                C = n - a - b - A - B\n                if C >= 0:\n                    return \"YES\"\n        return \"NO\"\n\n    t = int(stdin.split('\\n', 1)[0])\n    test_cases = [list(map(int, case.split())) for case in stdin.split('\\n')[1:]]\n\n    results = [is_possible(a, b, c, n) for a, b, c, n in test_cases]\n    return \"\\n\".join(results)",
        "test": "assert solution(\"5\\n5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\\n\") == \"YES\\nYES\\nNO\\nNO\\nYES\\n\" ",
        "num_ids": 780
    },
    {
        "number": 4516,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n    ans = []\n\n    for i in range(1, n + 1):\n        p = [i] + list(range(1, i)) + list(range(i + 1, n + 1))\n        f = 0\n        for j in range(m - 1):\n            f += abs(pos(p, x[j]) - pos(p, x[j + 1]))\n        ans.append(f)\n\n    return \" \".join(map(str, ans))\n\ndef",
        "test": "assert solution(\"2 10\\n1 2 1 1 2 2 2 2 2\\n\") == \"3 3 \"",
        "num_ids": 828
    },
    {
        "number": 4517,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find(parent, u):\n        while parent[u] != u:\n            u = parent[u]\n        return u\n\n    def union(parent, rank, u, v):\n        u = find(parent, u)\n        v = find(parent, v)\n        if u == v:\n            return False\n        if rank[u] > rank[v]:\n            parent[v] = u\n        elif rank[u] < rank[v]:\n            parent[u] = v\n        else:\n            parent[v] = u\n            rank[u] += 1\n        return True\n\n    def is_ancestor(parent, u, v):\n        while v != parent[v]:\n            v = parent[v]\n        return u == v\n\n    input_list = stdin.split('\\n')\n    n, m = map(int, input_list[0].split())\n    parent = [i for i in range(n + 1)]\n    rank = [0] * (n + 1)\n\n    for i in range(1, n):\n        u, v = map(int, input_list[i].split())\n        union(parent, rank, u, v)\n\n    output = []\n    for i in range(n, n + m):\n        k, *v = map(int, input_list[i].split())\n        answer = False\n        for u in v:\n            if is_ancestor(parent, 1, u):\n                answer = True\n                break\n        if answer:\n            output.append('YES')\n        else:\n            output.append('NO')\n\n    return '\\n'.join(output)",
        "test": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\" ",
        "num_ids": 1425
    },
    {
        "number": 4518,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(a, x, y):\n        return a[x] != a[y]\n\n    def dfs(graph, start, visited):\n        visited[start] = True\n        for neighbor in graph[start]:\n            if not visited[neighbor]:\n                dfs(graph, neighbor, visited)\n\n    def build_graph(roads, n):\n        graph = [[] for _ in range(n)]\n        for road in roads:\n            x, y = road\n            graph[x - 1].append(y - 1)\n            graph[y - 1].append(x - 1)\n        return graph\n\n    def find_roads(a, n):\n        roads = []\n        for i in range(n):\n            for j in range(i + 1, n):\n                if is_valid(a, i, j):\n                    roads.append((i + 1, j + 1))\n                    break\n        return roads\n\n    def can_reach_all(graph, n):\n        visited = [False] * n\n        dfs(graph, 0, visited)\n        return all(visited)\n\n    test_cases = int(stdin.readline().strip())\n    output = []\n\n    for _ in range(test_cases):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        roads = find_roads(a, n)\n\n        if len(roads) == n - 1:\n            graph = build_graph(roads, n)\n            if can_reach_all(graph, n):\n                output.append(\"YES\")\n                for road in roads:\n                    output.append(f\"{road[0]} {road[1]}\")\n            else:\n                output.append(\"NO\")\n        else:\n            output.append(\"NO\")\n\n    return \"\\n\".join(output)",
        "test": "assert solution(\"5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\\nYES\\n1 2\\n2 3\\n3 4\\nYES\\n1 2\\n1 3\\n1 4\" ",
        "num_ids": 1562
    },
    {
        "number": 4519,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def swap(s: str, i: int) -> str:\n        return s[:i] + s[i + 1] + s[i] + s[i + 2 :]\n\n    def is_sorted(s: str) -> bool:\n        return all(s[i] <= s[i + 1] for i in range(len(s) - 1))\n\n    def min_string(s: str, k: int) -> str:\n        if k == 0 or is_sorted(s):\n            return s\n\n        min_len = float(\"inf\")\n        for i in range(len(s) - 1):\n            if s[i] > s[i + 1]:\n                new_s = swap(s, i)\n                min_len = min(min_len, len(min_string(new_s, k - 1)))\n        return s[:-1] + min(s[-1], s[-2]) * min_len\n\n    q = int(stdin.readline().strip())\n    result = []\n    for _ in range(q):\n        n, k = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        result.append(min_string(s, k))\n    return \"\\n\".join(result)\n",
        "test": "assert solution(\"3\\n8 5\\n11011010\\n7 9\\n1111100\\n7 11\\n1111100\") == \"01011110\\n0101111\\n0011111\" ",
        "num_ids": 1015
    },
    {
        "number": 4520,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k = map(int, lines[0].split())\n    segments = [list(map(int, lines[i].split())) for i in range(1, n + 1)]\n\n    # Create a set to store unique points covered by segments\n    points_covered = set()\n    for l, r in segments:\n        for j in range(l, r + 1):\n            points_covered.add(j)\n\n    # Find all the bad points\n    bad_points = set()\n    for point in points_covered:\n        count = sum(1 for l, r in segments if l <= point <= r)\n        if count > k:\n            bad_points.add(point)\n\n    # Remove the bad segments one by one\n    removed_segments = []\n    for i, segment in enumerate(segments):\n        l, r = segment\n        if any(l <= p <= r for p in bad_points):\n            removed_segments.append(i)\n            points_covered -= set(range(l, r + 1))\n\n            # Check if there are any new bad points after removing the segment\n            new_bad_points = set()\n            for point in points_covered:\n                count = sum(1 for x, y in segments if x <= point <= y)\n                if count > k:\n                    new_bad_points.add(point)\n\n            # If there are no new bad points, remove the segment\n            if not new_bad_points:\n                bad_points -= set(range(l, r + 1))\n\n        if not bad_points:\n            break\n\n    return f\"{len(removed_segments)}\\n{' '.join(map(str, removed_segments))}\"",
        "test": "assert solution(\"\"\"7 2",
        "num_ids": 1553
    },
    {
        "number": 4521,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    x = list(map(int, stdin.split('\\n')[1].split()))\n    v = list(map(int, stdin.split('\\n')[2].split()))\n\n    d = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            d += abs(x[i] - x[j])\n\n    return str(d)",
        "test": "assert solution(\"2\\n2 1\\n-3 0\\n\") == \"0\"",
        "num_ids": 794
    },
    {
        "number": 4522,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    tree = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u, v, w = map(int, stdin.readline().split())\n        tree[u].append((v, w))\n        tree[v].append((u, w))\n\n    def dfs(node, parent):\n        subtree = [(node, 0)]\n        for child, weight in tree[node]:\n            if child != parent:\n                subtree.extend(dfs(child, node))\n        subtree.sort(key=lambda x: x[1])\n        return [(node, weight) for child, weight in subtree]\n\n    def count_pairs(node, parent, q):\n        result = 0\n        for child, weight in tree[node]:\n            if child != parent:\n                result += count_pairs(child, node, q)\n        return result + sum(weight <= q for _, weight in tree[node])\n\n    queries = list(map(int, stdin.readline().split()))\n    subtrees = [sorted(dfs(1, 0), key=lambda x: x[1])]\n    for i in range(2, n + 1):\n        subtrees.append(sorted(dfs(i, 0), key=lambda x: x[1]))\n\n    result = []\n    for q in queries:\n        total = 0\n        for subtree in subtrees:\n            total += count_pairs(subtree[0][0], 0, q)\n        result.append(total)\n\n    return \" \".join(map(str, result))",
        "test": "assert solution(\"\"\"7 5",
        "num_ids": 1222
    },
    {
        "number": 4523,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def can_be_reduced(a: List[int]) -> bool:\n        a.sort()\n        for i in range(len(a) - 1):\n            if abs(a[i] - a[i + 1]) > 1:\n                return False\n        return True\n\n    t = int(stdin.split('\\n', 1)[0])\n    input_data = stdin.split('\\n', 1)[1].strip()\n\n    for _ in range(t):\n        n = int(input_data.split('\\n', 1)[0])\n        a = list(map(int, input_data.split('\\n', 1)[1].strip().split()))\n        input_data = input_data.split('\\n', 1)[1].strip()\n\n        if can_be_reduced(a):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
        "test": "assert solution(\"5\\n3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\\n\") == \"YES\\nYES\\nNO\\nNO\\nYES\\n\" ",
        "num_ids": 721
    },
    {
        "number": 4524,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\"\\n\")[0].split())\n    a = int(stdin.split(\"\\n\")[1], 2)\n    b = int(stdin.split(\"\\n\")[2], 2)\n    answer = 0\n    MOD = 998244353\n\n    while b > 0:\n        answer += a & b\n        b //= 2\n\n    return str(answer % MOD)\n",
        "test": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"",
        "num_ids": 488
    },
    {
        "number": 4525,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(a: List[int]) -> bool:\n        return (\n            all(x % 2 == 0 for x in a[:n // 2])\n            and all(x % 2 != 0 for x in a[n // 2:])\n            and len(set(a)) == n\n            and sum(a[:n // 2]) == sum(a[n // 2:])\n        )\n\n    def helper(a: List[int], idx: int) -> Optional[List[int]]:\n        if idx == n:\n            return a if is_valid(a) else None\n\n        a[idx] = (idx + 1) * 2\n        if a[idx] > 10**9:\n            return None\n\n        res = helper(a, idx + 1)\n        if res is not None:\n            return res\n\n        a[idx] = (idx + 1) * 2 - 1\n        if a[idx] > 10**9:\n            return None\n\n        return helper(a, idx + 1)\n\n    t = int(stdin.split(\"\\n\", 1)[0])\n    it = iter(map(int, stdin.split(\"\\n\")))\n    next(it)  # skip t\n\n    output = []\n    for _ in range(t):\n        n = next(it)\n        if n % 2 == 0:\n            a = [0] * n\n            res = helper(a, 0)\n            if res is not None:\n                output.append(\"YES\")\n                output.append(\" \".join(map(str, res)))\n            else:\n                output.append(\"NO\")\n        else:\n            output.append(\"NO\")\n\n    return \"\\n\".join(output)",
        "test": "assert solution(\"5\\n2\\n4\\n6\\n8\\n10\") == \"NO\\nYES\\n2 4 1 5\\nNO\\nYES\\n2 4 6 8 1 3 5 11\\nNO\" ",
        "num_ids": 1112
    },
    {
        "number": 4526,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_special(arr: list, n: int, index: int) -> bool:\n        if index == 0:\n            return False\n        for i in range(index):\n            if arr[i] + arr[index] == n:\n                return True\n        return False\n\n    def count_special_elements(arr: list, n: int) -> int:\n        special_count = 0\n        for i in range(n):\n            if is_special(arr, n, i):\n                special_count += 1\n        return special_count\n\n    test_cases = int(stdin.split('\\n')[0])\n    result = []\n    for _ in range(test_cases):\n        n = int(stdin.split('\\n')[1])\n        arr = list(map(int, stdin.split('\\n')[2].split()))\n        result.append(count_special_elements(arr, n))\n        stdin = stdin[stdin.find('\\n') + 1:]\n\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\\n8\\n8 7 6 5 4 3 2 1\\n1\\n1\\n\") == \"5\\n1\\n0\\n4\\n0\" ",
        "num_ids": 1013
    },
    {
        "number": 4527,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_intersecting(seg1: tuple, seg2: tuple) -> bool:\n        return not (seg1[1] < seg2[0] or seg1[0] > seg2[1])\n\n    def is_inside(seg1: tuple, seg2: tuple) -> bool:\n        return seg1[0] >= seg2[0] and seg1[1] <= seg2[1]\n\n    def find_max_subset(segments: list) -> int:\n        segments.sort(key=lambda x: x[1])\n        max_subset = []\n\n        for segment in segments:\n            if not max_subset or all(not is_intersecting(segment, s) for s in max_subset):\n                max_subset = [s for s in max_subset if not is_inside(segment, s)] + [segment]\n\n        return len(max_subset)\n\n    test_cases = int(stdin.readline().strip())\n    results = []\n\n    for _ in range(test_cases):\n        n = int(stdin.readline().strip())\n        segments = [tuple(map(int, stdin.readline().strip().split())) for _ in range(n)]\n        results.append(find_max_subset(segments))\n\n    return \"\\n\".join(map(str, results))\n",
        "test": "assert solution(\"4\\n4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == \"3\\n4\\n2\\n7\" ",
        "num_ids": 1451
    },
    {
        "number": 4528,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def minutes_remaining(h: int, m: int) -> int:\n        return (24 * 60 - (h * 60 + m)) % (24 * 60)\n\n    t = int(stdin.split(\"\\n\")[0])\n    cases = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n\n    return \"\\n\".join(str(minutes_remaining(*case)) for case in cases)\n",
        "test": "assert solution(\"5\\n23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"",
        "num_ids": 668
    },
    {
        "number": 4529,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def can_optimize(s, l, r):\n        x, y = 0, 0\n        for i in range(l - 1):\n            if s[i] == 'L':\n                x -= 1\n            elif s[i] == 'R':\n                x += 1\n            elif s[i] == 'U':\n                y += 1\n            elif s[i] == 'D':\n                y -= 1\n        for i in range(r, n):\n            if s[i] == 'L':\n                x -= 1\n            elif s[i] == 'R':\n                x += 1\n            elif s[i] == 'U':\n                y += 1\n            elif s[i] == 'D':\n                y -= 1\n        return x == 0 and y == 0\n\n    n_tests = int(stdin.readline())\n    result = []\n\n    for _ in range(n_tests):\n        n = int(stdin.readline())\n        s = stdin.readline().strip()\n        l, r = 1, n - 1\n\n        while l <= r:\n            if can_optimize(s, l, r):\n                result.append(f\"{l} {r}\")\n                break\n            m = (l + r) // 2\n            if can_optimize(s, l, m):\n                r = m\n            else:\n                l = m + 1\n        else:\n            result.append(\"-1\")\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"4\\n4\\nLRUD\\n4\\nLURD\\n5\\nRRUDU\\n5\\nLLDDR\\n\") == \"1 2\\n1 4\\n3 4\\n-1\\n\" ",
        "num_ids": 1073
    },
    {
        "number": 4530,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n_tests = int(stdin.split('\\n')[0])\n    tests = stdin.split('\\n')[1:]\n\n    def is_valid(team1, team2, skills):\n        if len(team1) != len(team2):\n            return False\n        if len(set(skills[i] for i in team1)) != len(team1) or len(set(skills[i] for i in team2)) != 1:\n            return False\n        return True\n\n    def find_max_size(n, skills):\n        skills = sorted(skills)\n        max_size = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if skills[i] != skills[j]:\n                    team1 = [i]\n                    team2 = [j]\n                    for k in range(j + 1, n):\n                        if skills[k] == skills[i]:\n                            team1.append(k)\n                        elif skills[k] == skills[j]:\n                            team2.append(k)\n                    if is_valid(team1, team2, skills):\n                        max_size = max(max_size, len(team1))\n        return max_size\n\n    result = []\n    for test in tests:\n        n, skills = test.split(' ')\n        n = int(n)\n        skills = list(map(int, skills))\n        result.append(find_max_size(n, skills))\n\n    return '\\n'.join(map(str, result))",
        "test": "assert solution([4, 1, 1, 1, 3]) == 2",
        "num_ids": 1050
    },
    {
        "number": 4531,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(node):\n        vis.add(node)\n        for neighbor in tree[node]:\n            if neighbor not in vis:\n                dist[node][neighbor] = 1\n                dfs(neighbor)\n                for i in tree[node]:\n                    if i != neighbor:\n                        dist[node][i] = dist[node][neighbor] + dist[neighbor][i]\n\n    n, *a, edges = [list(map(int, line.split())) for line in stdin.split('\\n')]\n    tree = {i: set() for i in range(1, n + 1)}\n    for u, v in zip(edges[::2], edges[1::2]):\n        tree[u].add(v)\n        tree[v].add(u)\n\n    vis = set()\n    dist = {i: {j: 0 for j in tree} for i in tree}\n    dfs(1)\n\n    return str(max(sum(dist[node][i] * a[i - 1] for i in tree) for node in tree))",
        "test": "assert solution(\"\"\"8",
        "num_ids": 944
    },
    {
        "number": 4532,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible(a, k):\n        return all(x % k == 0 for x in a)\n\n    def min_moves(n, k, a):\n        a.sort()\n        x = 0\n        moves = 0\n\n        for i in range(n):\n            if a[i] % k != 0:\n                if x == 0:\n                    a[i] += x\n                    x += 1\n                    moves += 1\n                else:\n                    a[i] += x\n                    moves += 1\n\n        return moves\n\n    test_cases = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(test_cases):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n\n        if is_divisible(a, k):\n            result.append(0)\n        else:\n            result.append(min_moves(n, k, a))\n\n    return \"\\n\".join(map(str, result))\n",
        "test": "assert solution(\"5\\n4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8\\n1 2 3 4 5 6 7 8\") == \"6\\n18\\n0\\n227\\n8\"",
        "num_ids": 1236
    },
    {
        "number": 4533,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    children, cookies = map(int, stdin.split())\n    greed_factors = list(map(int, input().split()))\n    cookie_sizes = list(map(int, input().split()))\n\n    greed_factors.sort(reverse=True)\n    cookie_sizes.sort(reverse=True)\n\n    count = 0\n    for size in cookie_sizes:\n        if greed_factors and greed_factors[-1] <= size:\n            greed_factors.pop()\n            count += 1\n\n    return str(count)",
        "test": "assert solution([1, 2, 3], [3, 4, 5]) == 1",
        "num_ids": 712
    },
    {
        "number": 4534,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    if k == 0:\n        return \"1\"\n    elif k <= 33:\n        row = [1]\n        for i in range(k):\n            new_row = [1]\n            for j in range(len(row) - 1):\n                new_row.append(row[j] + row[j + 1])\n            new_row.append(1)\n            row = new_row\n        return \" \".join(map(str, row))\n    else:\n        return \"Invalid input. Please enter a value between 0 and 33.\"",
        "test": "assert solution(3) == [1, 3, 3, 1]",
        "num_ids": 629
    },
    {
        "number": 4535,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # Count the number of '1' bits in the binary representation of the unsigned integer\n    n = int(stdin, 2)\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert solution(\"00000000000000000000000000001011\") == 3",
        "num_ids": 521
    },
    {
        "number": 4536,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    digits = list(map(int, stdin.strip().split()))\n    carry = 1\n    for i in range(len(digits) - 1, -1, -1):\n        digits[i] += carry\n        carry = digits[i] // 10\n        digits[i] %= 10\n    if carry:\n        digits.insert(0, carry)\n    return ' '.join(map(str, digits))",
        "test": "assert solution([9,9,9]) == [1,0,0,0]",
        "num_ids": 566
    },
    {
        "number": 4537,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    values = [A + B, A - B, A * B]\n    largest_value = max(values)\n    return str(largest_value)",
        "test": "assert solution(\"3 1\") == \"4\"",
        "num_ids": 340
    },
    {
        "number": 4538,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    def distance_from_origin(x: int, y: int) -> float:\n        return (x ** 2 + y ** 2) ** 0.5\n\n    lines = stdin.split(\"\\n\")\n    N, D = map(int, lines[0].split())\n    points = [list(map(int, line.split())) for line in lines[1:]]\n\n    count = 0\n    for point in points:\n        if distance_from_origin(point[0], point[1]) <= D:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"",
        "num_ids": 673
    },
    {
        "number": 4539,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(n))\n    if n % digits_sum == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"12\") == \"Yes\"  # f(12) = 3, 12 is divisible by 3, so it's a Harshad number",
        "num_ids": 446
    },
    {
        "number": 4540,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def cost(x1, x2):\n        return abs(x1 - x2)\n\n    n, *a = list(map(int, stdin.strip().split()))\n    res = []\n    total_cost = cost(0, a[0])\n\n    for i in range(1, n):\n        total_cost += cost(a[i - 1], a[i])\n\n    for i in range(n):\n        cancel_spot = a[i]\n        new_total_cost = total_cost - cost(a[i - 1], cancel_spot) - cost(cancel_spot, a[i + 1])\n        new_total_cost += cost(0, a[i - 1]) + cost(a[i - 1], 0)\n        if i > 0:\n            new_total_cost += cost(a[i - 1], a[i])\n        if i < n - 1:\n            new_total_cost += cost(a[i], a[i + 1])\n        res.append(new_total_cost)\n\n    return \"\\n\".join(map(str, res))",
        "test": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"",
        "num_ids": 860
    },
    {
        "number": 4541,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if stdin in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'",
        "test": "assert solution(\"a\") == \"vowel\"",
        "num_ids": 292
    },
    {
        "number": 4542,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin.strip())\n    n = len(s)\n\n    left = 0\n    right = n - 1\n\n    left_count = 0\n    right_count = 0\n\n    while left < right:\n        if s[left] == \"B\":\n            left_count += 1\n        if s[right] == \"W\":\n            right_count += 1\n        left += 1\n        right -= 1\n\n    return min(left_count, right_count)\n",
        "test": "assert solution('WWWW') == 0",
        "num_ids": 497
    },
    {
        "number": 4543,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    concatenated = int(str(a) + str(b))\n    sqrt_concatenated = int(concatenated ** 0.5)\n    if sqrt_concatenated ** 2 == concatenated:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution('1 21') == 'Yes'",
        "num_ids": 474
    },
    {
        "number": 4544,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    arr = list(map(int, lines[1].split()))\n    max_count = 0\n    for i in range(N):\n        count = arr.count(arr[i])\n        max_count = max(max_count, count)\n        if arr[i] - 1 >= 0:\n            count = arr.count(arr[i] - 1)\n            max_count = max(max_count, count)\n        if arr[i] + 1 < 10**5:\n            count = arr.count(arr[i] + 1)\n            max_count = max(max_count, count)\n    return str(max_count)",
        "test": "assert solution(\"5\\n2 2 3 2 6\") == \"3\"",
        "num_ids": 606
    },
    {
        "number": 4545,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    total_squares = N * N\n    white_squares = A\n    black_squares = total_squares - white_squares\n    return str(black_squares)",
        "test": "assert solution(\"3\\n4\") == \"5\"",
        "num_ids": 364
    },
    {
        "number": 4546,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b - a == c - b:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"2 4 6\") == \"YES\"",
        "num_ids": 319
    },
    {
        "number": 4547,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if '9' in str(n):\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(\"29\") == \"Yes\"",
        "num_ids": 282
    },
    {
        "number": 4548,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Split input by newlines\n    input_list = stdin.split(\"\\n\")\n    \n    # Parse the first line to get N, M, and X\n    N, M, X = map(int, input_list[0].split())\n    \n    # Parse the second line to get the toll gate locations\n    A = list(map(int, input_list[1].split()))\n    \n    # Initialize the cost and the current square\n    cost = 0\n    current_square = X\n    \n    # Move to the left until we reach Square 0 or a toll gate\n    while current_square > 0:\n        current_square -= 1\n        if current_square in A:\n            cost += 1\n            A.remove(current_square)\n            continue\n    \n    # Move to the right until we reach Square N or a toll gate\n    current_square = X\n    while current_square < N:\n        current_square += 1\n        if current_square in A:\n            cost += 1\n            A.remove(current_square)\n            continue\n    \n    return str(cost)",
        "test": "assert solution(\"100 1 1\\n100\\n\") == \"0\"",
        "num_ids": 862
    },
    {
        "number": 4549,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.readline().split())\n    canvas = [list(stdin.readline().strip()) for _ in range(h)]\n    \n    for i in range(h):\n        for j in range(w):\n            if canvas[i][j] == '#':\n                canvas[i][j] = '*'\n                if i > 0 and canvas[i - 1][j] == '.':\n                    canvas[i - 1][j] = '*'\n                if j > 0 and canvas[i][j - 1] == '.':\n                    canvas[i][j - 1] = '*'\n                if i < h - 1 and canvas[i + 1][j] == '.':\n                    canvas[i + 1][j] = '*'\n                if j < w - 1 and canvas[i][j + 1] == '.':\n                    canvas[i][j + 1] = '*'\n    \n    for i in range(h):\n        for j in range(w):\n            if canvas[i][j] == '#' and not (i > 0 and canvas[i - 1][j] == '*') and not (j > 0 and canvas[i][j - 1] == '*') \\\n               and not (i < h - 1 and canvas[i + 1][j] == '*') and not (j < w - 1 and canvas[i][j + 1] == '*'):\n                return \"No\"\n    \n    return \"Yes\"",
        "test": "assert solution(\"2 2\\n..\\n..\") == \"Yes\"",
        "num_ids": 1308
    },
    {
        "number": 4550,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    total_candies = a + b + c\n    if total_candies % 2 == 1:\n        return \"No\"\n    \n    target_candies = total_candies // 2\n    \n    if a == target_candies:\n        return \"Yes\"\n    if b == target_candies:\n        return \"Yes\"\n    if c == target_candies:\n        return \"Yes\"\n    \n    return \"No\"",
        "test": "assert solution(\"100 1 1\") == \"No\"",
        "num_ids": 630
    },
    {
        "number": 4551,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    L = A + B\n    R = C + D\n    \n    if L > R:\n        return \"Left\"\n    elif L == R:\n        return \"Balanced\"\n    else:\n        return \"Right\"",
        "test": "assert solution(\"3 8 7 1\") == \"Left\"",
        "num_ids": 424
    },
    {
        "number": 4552,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *shops, *profit = map(int, stdin.split())\n    shops = [shops[i:i+10] for i in range(0, len(shops), 10)]\n    profit = [profit[i:i+11] for i in range(0, len(profit), 11)]\n\n    def is_open(periods: List[int]) -> bool:\n        return any(periods)\n\n    def count_open_periods(shop1: List[int], shop2: List[int]) -> int:\n        return sum(shop1[i] & shop2[i] for i in range(10))\n\n    max_profit = float('-inf')\n    for open_periods in range(11):\n        for shop1_periods in range(1 << 10):\n            if bin(shop1_periods).count('1') != open_periods:\n                continue\n            shop1 = [int(bit) for bit in bin(shop1_periods)[2:]]\n            shop1 = [0] * (10 - len(shop1)) + shop1\n            if not is_open(shop1):\n                continue\n            for shop2 in shops:\n                if not is_open(shop2):\n                    continue\n                c_i = count_open_periods(shop1, shop2)\n                profit_shop = sum(profit[i][c_i] for i in range(N))\n                max_profit = max(max_profit, profit_shop)\n    return str(max_profit)",
        "test": "assert solution(\"1\\n1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\") == \"8\"",
        "num_ids": 977
    },
    {
        "number": 4553,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, S = stdin.split()\n    A = int(A)\n    B = int(B)\n    \n    if len(S) != A + B + 1:\n        return \"No\"\n    \n    if S[A] != \"-\":\n        return \"No\"\n    \n    for i in range(A + B + 1):\n        if i == A:\n            continue\n        if not S[i].isdigit():\n            return \"No\"\n    \n    return \"Yes\"",
        "test": "assert solution(\"3 4\\n269-6650\") == \"Yes\"",
        "num_ids": 630
    },
    {
        "number": 4554,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    return str(min(abs(a - b), abs(a - (b + W))))",
        "test": "assert solution(\"1 1 1\") == \"0\"",
        "num_ids": 328
    },
    {
        "number": 4555,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    sorted_range = sorted(range(A, B + 1))\n    output = []\n\n    for num in sorted_range[:K]:\n        output.append(num)\n\n    for num in sorted_range[-K:]:\n        if num not in output:\n            output.append(num)\n\n    return \"\\n\".join(map(str, sorted(output)))",
        "test": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"",
        "num_ids": 772
    },
    {
        "number": 4556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[1]\n    x = s[0]\n    return x + s[1:].upper()",
        "test": "assert solution(\"AtCoder Smallest Contest\") == \"SCC\"",
        "num_ids": 315
    },
    {
        "number": 4557,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    total_animals = A + B\n    if X > total_animals or X < A:\n        return \"NO\"\n    else:\n        return \"YES\"",
        "test": "assert solution(\"1 1 1\") == \"YES\"",
        "num_ids": 353
    },
    {
        "number": 4558,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    return str(X - t)",
        "test": "assert solution(\"100 17\") == \"83\"",
        "num_ids": 349
    },
    {
        "number": 4559,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = list(map(int, stdin.split()))\n    result = 1\n\n    for num in arr:\n        result *= num\n\n        if result > 10**18:\n            return -1\n\n    return str(result)",
        "test": "assert solution(\"2\\n1000000000 1000000000\") == \"1000000000000000000\"",
        "num_ids": 627
    },
    {
        "number": 4560,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if a >= n:\n        return \"Yes\"\n    if n % 500 <= a % 500:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"500\\n0\") == \"Yes\"",
        "num_ids": 456
    },
    {
        "number": 4561,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    \n    if B <= X:\n        return \"delicious\"\n    elif B <= X + A:\n        return \"safe\"\n    else:\n        return \"dangerous\"\n    \n    # Read input\n    input_str = input().strip()\n    \n    # Solve the problem\n    result = solution(input_str)\n    \n    # Output the result\n    print(result) ",
        "test": "assert solution(\"2 5 8\") == \"dangerous\"",
        "num_ids": 510
    },
    {
        "number": 4562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while i**2 <= n:\n        i += 1\n    return (i-1)**2\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "assert solution(\"25\") == 25",
        "num_ids": 291
    },
    {
        "number": 4563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    votes = [(int(line.split()[0]), int(line.split()[1])) for line in lines[1:]]\n\n    total_votes = 0\n    for i in range(N):\n        takahashi_votes, aoki_votes = votes[i]\n        if i == 0:\n            total_votes = takahashi_votes + aoki_votes\n        else:\n            lcm = (takahashi_votes * aoki_votes) // gcd(takahashi_votes, aoki_votes)\n            total_votes = min(total_votes, lcm)\n\n    return str(total_votes)\n\ndef",
        "test": "assert solution(\"7\\n1 1\\n2 1\\n3 2\\n2 3\\n3 5\\n4 7\\n5 11\\n\") == \"38\" ",
        "num_ids": 980
    },
    {
        "number": 4564,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == len(set(stdin)):\n        return \"yes\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"uncopyrightable\") == \"yes\"",
        "num_ids": 262
    },
    {
        "number": 4565,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split('\\n')\n    N = int(N)\n    east = S.count('E')\n    west = N - east\n    if east >= west:\n        return str(west)\n    else:\n        return str(east)",
        "test": "assert solution('6\\nWEEEEE') == '1'",
        "num_ids": 450
    },
    {
        "number": 4566,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    input_data = stdin.split(\"\\n\")\n    N, M = map(int, input_data[0].split())\n    roads = [list(map(int, road.split())) for road in input_data[1:]]\n\n    # Create a dictionary to store the connected roads for each city\n    connected_roads = {city: [] for city in range(1, N + 1)}\n\n    # Update the dictionary with the connected roads\n    for road in roads:\n        connected_roads[road[0]].append(road[1])\n        connected_roads[road[1]].append(road[0])\n\n    # Calculate the number of connected roads for each city\n    result = [len(connected_roads[city]) for city in range(1, N + 1)]\n\n    # Return the result as a string\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"",
        "num_ids": 765
    },
    {
        "number": 4567,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    input_data = list(map(int, stdin.split()))\n    N = input_data[0]\n    scores = input_data[1:]\n\n    # Calculate total points possible\n    total_points_possible = sum(scores)\n\n    # Calculate maximum grade that can be displayed\n    max_grade = 0\n    for i in range(len(scores)):\n        for j in range(i + 1, len(scores) + 1):\n            max_grade = max(max_grade, sum(scores[i:j]))\n\n    # Check if the maximum grade is a multiple of 10\n    if max_grade % 10 == 0:\n        max_grade -= 1\n\n    return str(max_grade)",
        "test": "assert solution(\"5\\n1\\n2\\n3\\n4\\n5\") == \"15\"  # Sample Input 4",
        "num_ids": 664
    },
    {
        "number": 4568,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(str, stdin.split())\n    N = int(N)\n    X = set()\n    Y = set()\n\n    for i in range(N - 1):\n        X.add(S[i])\n        Y.add(S[i + 1])\n\n    return str(len(X.intersection(Y)))",
        "test": "assert solution(\"5\\nabaab\") == \"2\" # All characters are the same",
        "num_ids": 607
    },
    {
        "number": 4569,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    tomorrow = {\"Sunny\": \"Cloudy\", \"Cloudy\": \"Rainy\", \"Rainy\": \"Sunny\"}\n    return tomorrow[stdin]",
        "test": "assert solution(\"Sunny\") == \"Cloudy\"",
        "num_ids": 291
    },
    {
        "number": 4570,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    plan1 = A * N\n    plan2 = B\n    if plan1 < plan2:\n        return str(plan1)\n    else:\n        return str(plan2)",
        "test": "assert solution(\"7 17 120\") == \"119\"  # Sample Input 1",
        "num_ids": 456
    },
    {
        "number": 4571,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    expected_time = 0\n    probability = 1\n\n    while probability > 0:\n        expected_time += probability * (1900 * (M - N + M) + 100 * (N - M))\n        probability /= 2\n\n    return str(expected_time)",
        "test": "assert solution(\"10 5\") == \"4160\"",
        "num_ids": 434
    },
    {
        "number": 4572,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.lower()\n    found = [False] * 26\n    for char in s:\n        if char.islower():\n            found[ord(char) - ord('a')] = True\n\n    for char in 'abcdefghijklmnopqrstuvwxyz':\n        if not found[ord(char) - ord('a')]:\n            return char\n    return None",
        "test": "assert solution(\"atcoderregularcontest\") == \"b\"",
        "num_ids": 473
    },
    {
        "number": 4573,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    x = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    def find_median(arr: list) -> int:\n        arr.sort()\n        l = len(arr)\n        if l % 2 == 0:\n            return (arr[l // 2 - 1] + arr[l // 2]) // 2\n        else:\n            return arr[l // 2]\n\n    b = []\n    for i in range(n):\n        b.append(find_median(x[:i] + x[i + 1:]))\n\n    return \"\\n\".join(map(str, b))",
        "test": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\" ",
        "num_ids": 523
    },
    {
        "number": 4574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    A.sort(reverse=True)\n    max_area = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                for l in range(k + 1, N):\n                    if A[i] == A[j] or A[i] == A[k] or A[i] == A[l] or A[j] == A[k] or A[j] == A[l] or A[k] == A[l]:\n                        continue\n                    area = (A[i] + A[j]) * (A[k] + A[l]) - A[i] * A[j] - A[k] * A[l]\n                    max_area = max(max_area, area)\n    return str(max_area)\n\nN, A = map(int, input().split())\nA = list(map(int, input().split()))\nprint(solution(stdin)) ",
        "test": "assert solution(\"5\\n3 1 2 4 1\\n\") == \"3\"  # another input with extra newline",
        "num_ids": 975
    },
    {
        "number": 4575,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, D, X = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    total_pieces_eaten = sum(i * (D // (i + 1)) for i in A)\n    return str(X + total_pieces_eaten)",
        "test": "assert solution(\"4\\n6 2\\n1\\n3\\n2\\n10\\n\") == \"13\"",
        "num_ids": 537
    },
    {
        "number": 4576,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n\n    def count_ways(a, b, c, x):\n        if x == 0:\n            return 1\n        if a == 0 and b == 0 and c == 0:\n            return 0\n        if x < 0:\n            return 0\n        return count_ways(a - 1, b, c, x - 500) + count_ways(a, b - 1, c, x - 100) + count_ways(a, b, c - 1, x - 50)\n\n    return str(count_ways(A, B, C, X))",
        "test": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"",
        "num_ids": 968
    },
    {
        "number": 4577,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A <= C <= B:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1 3 2\") == \"Yes\" ",
        "num_ids": 308
    },
    {
        "number": 4578,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.split('\\n')\n    N, X = map(int, lines[0].split())\n    Moto_needed = list(map(int, lines[1:]))\n\n    # Calculate the maximum number of doughnuts that can be made\n    total_doughnuts = 0\n    for i in range(N):\n        total_doughnuts += X // Moto_needed[i]\n        X %= Moto_needed[i]\n        if X == 0:\n            break\n\n    # Make at least one doughnut of each kind\n    for i in range(N):\n        if total_doughnuts % N == 0:\n            break\n        if i == N - 1:\n            total_doughnuts += 1\n            break\n        if Moto_needed[i] <= X:\n            total_doughnuts += 1\n            X -= Moto_needed[i]\n\n    return str(total_doughnuts)",
        "test": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"",
        "num_ids": 949
    },
    {
        "number": 4579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    S = stdin.split('\\n')[1:]\n    kinds = set(S)\n    return str(len(kinds))",
        "test": "assert solution(\"1\\nhello\") == 1, \"Test failed\"",
        "num_ids": 540
    },
    {
        "number": 4580,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    color_count = [0] * 8\n\n    for rating in a:\n        if rating >= 1 and rating <= 399:\n            color_count[0] += 1\n        elif rating >= 400 and rating <= 799:\n            color_count[1] += 1\n        elif rating >= 800 and rating <= 1199:\n            color_count[2] += 1\n        elif rating >= 1200 and rating <= 1599:\n            color_count[3] += 1\n        elif rating >= 1600 and rating <= 1999:\n            color_count[4] += 1\n        elif rating >= 2000 and rating <= 2399:\n            color_count[5] += 1\n        elif rating >= 2400 and rating <= 2799:\n            color_count[6] += 1\n        elif rating >= 2800 and rating <= 3199:\n            color_count[7] += 1\n        else:\n            color_count = [float('inf')] * 8\n            break\n\n    min_colors = sum(1 for x in color_count if x > 0)\n    max_colors = sum(1 for x in color_count if x == max(color_count))\n\n    return f\"{min_colors} {max_colors}\"",
        "test": "assert solution(\"1\\n1000\") == \"1 1\"",
        "num_ids": 1262
    },
    {
        "number": 4581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    toppings = {\"o\": 1, \"x\": 0}\n    price = 700\n    for i in range(3):\n        price += toppings[stdin[i]] * 100\n    return str(price)",
        "test": "assert solution(\"xxo\") == 700",
        "num_ids": 391
    },
    {
        "number": 4582,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == 'H':\n        if b == 'H':\n            return 'H'\n        else:\n            return 'D'\n    else:\n        if b == 'H':\n            return 'D'\n        else:\n            return 'H'",
        "test": "assert solution(\"H H\") == \"H\" # AtCoDeer is honest, so TopCoDeer is honest. ",
        "num_ids": 372
    },
    {
        "number": 4583,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = stdin\n    operators = ['+', '-']\n    for op1 in operators:\n        for op2 in operators:\n            for op3 in operators:\n                if eval(a + op1 + b + op2 + c + op3 + d) == 7:\n                    return f\"{a}{op1}{b}{op2}{c}{op3}{d}=7\"",
        "test": "assert solution(\"1222\") == \"1+2+2+2=7\"",
        "num_ids": 592
    },
    {
        "number": 4584,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    subordinates = [0] * (N + 1)\n    \n    for i in range(2, N + 1):\n        boss_id = A[i - 2]\n        subordinates[boss_id] += 1\n    \n    return \"\\n\".join(map(str, subordinates[1:]))",
        "test": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"",
        "num_ids": 788
    },
    {
        "number": 4585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    if X == 0:\n        return \"0\"\n    elif X > 0:\n        time = 0\n        pos = 0\n        while pos < X:\n            time += 1\n            pos += time\n        return str(time)\n    else:\n        time = 0\n        pos = 0\n        while pos > X:\n            time += 1\n            pos -= time\n        return str(time) ",
        "test": "assert solution(1000) == 169",
        "num_ids": 422
    },
    {
        "number": 4586,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    num_str = str(num)\n    for i in range(3):\n        if num_str[i] == num_str[i + 1] == num_str[i + 2]:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert solution('1118') == 'Yes'",
        "num_ids": 375
    },
    {
        "number": 4587,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_altar(upper_size, middle_size, lower_size) -> bool:\n        return upper_size < middle_size < lower_size\n\n    N, A, B, C = map(int, stdin.split())\n    A.sort()\n    B.sort()\n    C.sort()\n\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if is_valid_altar(A[i], B[j], C[k]):\n                    count += 1\n\n    return str(count)\n",
        "test": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\" ",
        "num_ids": 785
    },
    {
        "number": 4588,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = stdin.split()\n    hex_dict = {'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    hex_value_X = hex_dict[X] if X in hex_dict else int(X)\n    hex_value_Y = hex_dict[Y] if Y in hex_dict else int(Y)\n\n    if hex_value_X < hex_value_Y:\n        return '<'\n    elif hex_value_X > hex_value_Y:\n        return '>'\n    else:\n        return '='",
        "test": "assert solution(\"A B\") == \"<\"",
        "num_ids": 509
    },
    {
        "number": 4589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def count_bombs(grid, row, col):\n        directions = [(-1, 0), (-1, -1), (0, -1), (1, -1), (1, 0), (1, 1), (0, 1), (-1, 1)]\n        count = 0\n        for dr, dc in directions:\n            r, c = row + dr, col + dc\n            if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and grid[r][c] == '#':\n                count += 1\n        return count\n\n    H, W = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(H)]\n\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '.':\n                grid[i][j] = str(count_bombs(grid, i, j))\n\n    return '\\n'.join([''.join(row) for row in grid])",
        "test": "assert solution(\"2 3\\n..#\\n.#.\") == \"110\\n101\"",
        "num_ids": 1084
    },
    {
        "number": 4590,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    input_data = list(map(int, stdin.split()))\n    N, M, K = input_data[0], input_data[1], input_data[2]\n    A_books = input_data[3:3 + N]\n    B_books = input_data[3 + N:]\n\n    # Initialize variables\n    books_read = 0\n    time_spent = 0\n    desk_A_books = A_books.copy()\n    desk_B_books = B_books.copy()\n\n    # Repeat the action until there are no books left or time runs out\n    while desk_A_books or desk_B_books:\n        # Choose the desk with the shortest reading time for the topmost book\n        if desk_A_books and desk_B_books:\n            if desk_A_books[0] < desk_B_books[0]:\n                time_to_read = desk_A_books.pop(0)\n            else:\n                time_to_read = desk_B_books.pop(0)\n        elif desk_A_books:\n            time_to_read = desk_A_books.pop(0)\n        else:\n            time_to_read = desk_B_books.pop(0)\n\n        # Update the time spent and number of books read\n        time_spent += time_to_read\n        books_read += 1\n\n        # Check if the time limit has been exceeded\n        if time_spent > K:\n            books_read -= 1\n            break\n\n    return str(books_read)",
        "test": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\" ",
        "num_ids": 970
    },
    {
        "number": 4591,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n\n    # Calculate the cost of rearranging AB-pizzas\n    ab_pizzas = min(X, Y, 2)\n    remaining_pizzas = X + Y - 2 * ab_pizzas\n    total_cost = ab_pizzas * 2 * C + remaining_pizzas * A + (Y - ab_pizzas) * B\n\n    # Calculate the cost of buying A-pizzas and B-pizzas directly\n    total_cost_direct = X * A + Y * B\n\n    return min(total_cost, total_cost_direct)",
        "test": "assert solution(\"1500 2000 1600 3 2\") == 7900",
        "num_ids": 849
    },
    {
        "number": 4592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    mod = 10**9 + 7\n    result = 1\n\n    for i in range(1, n + 1):\n        result = (result * i) % mod\n\n    return str(result)",
        "test": "assert solution(10) == 167",
        "num_ids": 449
    },
    {
        "number": 4593,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    max_power = 0\n    \n    for b in range(2, x + 1):\n        p = 2\n        while b ** p <= x:\n            p += 1\n        max_power = max(max_power, b ** (p - 1))\n        \n    return str(max_power)",
        "test": "assert solution(999) == 997021",
        "num_ids": 405
    },
    {
        "number": 4594,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = list(map(int, stdin.split()))\n    d.sort(reverse=True)\n    layers = 0\n    for i in range(N):\n        if i == 0 or d[i] < d[i-1]:\n            layers += 1\n    return str(layers)",
        "test": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"",
        "num_ids": 737
    },
    {
        "number": 4595,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    start, end = -1, -1\n\n    for i in range(n):\n        if s[i] == 'A':\n            start = i\n            break\n\n    for i in range(n - 1, -1, -1):\n        if s[i] == 'Z':\n            end = i\n            break\n\n    return end - start + 1",
        "test": "assert solution(\"QWERTYASDFZXCV\") == 5",
        "num_ids": 541
    },
    {
        "number": 4596,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, *numbers = list(map(int, stdin.split()))\n    operations = 0\n\n    while all(x % 2 == 0 for x in numbers):\n        numbers = [x // 2 for x in numbers]\n        operations += 1\n\n    return str(operations)",
        "test": "assert solution(\"3\\n8 12 40\") == \"2\"",
        "num_ids": 564
    },
    {
        "number": 4597,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    power = 1\n    mod = 10**9 + 7\n\n    for i in range(1, n + 1):\n        power = (power * i) % mod\n\n    return str(power)",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 409
    },
    {
        "number": 4598,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    total_candies = sum(range(1, N+1))\n    return str(total_candies)",
        "test": "assert solution(\"3\") == \"6\"",
        "num_ids": 265
    },
    {
        "number": 4599,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    cards = sorted([int(x) for x in stdin.split(\"\\n\")[1].split()], reverse=True)\n\n    alice_score = sum(cards[::2])\n    bob_score = sum(cards[1::2])\n\n    return str(alice_score - bob_score)",
        "test": "assert solution(\"2\\n3 1\\n\") == \"2\"",
        "num_ids": 622
    },
    {
        "number": 4600,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    p_list = []\n    s_list = []\n    for _ in range(M):\n        p, s = input().split()\n        p_list.append(int(p))\n        s_list.append(s)\n\n    correct_answers = 0\n    penalties = 0\n\n    for i in range(1, N + 1):\n        wa_count = 0\n        for j in range(M):\n            if p_list[j] == i:\n                if s_list[j] == \"AC\":\n                    correct_answers += 1\n                    if wa_count > 0:\n                        penalties += wa_count\n                    break\n                else:\n                    wa_count += 1\n\n    return f\"{correct_answers} {penalties}\"",
        "test": "assert solution(\"1 1\\n1 AC\") == \"1 0\"",
        "num_ids": 1179
    },
    {
        "number": 4601,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, K, *H = map(int, stdin.split())\n    H.sort(reverse=True)\n    \n    attack_count = 0\n    special_move_count = 0\n    \n    for i in range(N):\n        if H[i] <= attack_count:\n            break\n        \n        if special_move_count < K:\n            attack_count += H[i] - attack_count\n            special_move_count += 1\n        else:\n            attack_count += 1\n    \n    return str(attack_count)",
        "test": "assert solution(\"2 0\\n1 1\\n\") == \"1\"",
        "num_ids": 720
    },
    {
        "number": 4602,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    N, K, *x = list(map(int, stdin.strip().split()))\n    total_distance = 0\n\n    for i, x_i in enumerate(x, start=1):\n        distance_A = abs(x_i - 0) + abs(i - i) + abs(0 - x_i)\n        distance_B = abs(x_i - K) + abs(i - i) + abs(K - x_i)\n        total_distance += min(distance_A, distance_B)\n\n    return str(total_distance)",
        "test": "assert solution(\"1\\n10\\n2\") == \"4\" ",
        "num_ids": 496
    },
    {
        "number": 4603,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    min_fare = min(A, B) + min(C, D)\n    return str(min_fare)",
        "test": "assert solution(\"600\\n300\\n220\\n420\") == \"520\"",
        "num_ids": 443
    },
    {
        "number": 4604,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    mod = 10**9 + 7\n    total = 1\n\n    for i in range(n):\n        left, right = 0, 0\n        for j in range(i):\n            if abs(i - j) - 1 == a[i]:\n                left += 1\n        for j in range(i + 1, n):\n            if abs(i - j) - 1 == a[i]:\n                right += 1\n        total *= left + right\n        total %= mod\n\n        if total == 0:\n            return \"0\"\n\n    return str(total)",
        "test": "assert solution(\"2\\n1 0\") == \"0\"",
        "num_ids": 667
    },
    {
        "number": 4605,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    result = 0\n\n    for i in range(1, N + 1):\n        digits_sum = sum(int(digit) for digit in str(i))\n        if A <= digits_sum <= B:\n            result += i\n\n    return str(result)",
        "test": "assert solution(\"20 2 5\") == \"84\" # Sample Input 1",
        "num_ids": 566
    },
    {
        "number": 4606,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f\"ABC{n}\"",
        "test": "assert solution(\"100\") == \"ABC100\"",
        "num_ids": 238
    },
    {
        "number": 4607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    count = 0\n    \n    for i in range(1, b + 1):\n        if i == a:\n            count += 1\n            \n    return str(count)",
        "test": "assert solution(\"11 30\") == 1",
        "num_ids": 355
    },
    {
        "number": 4608,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = list(map(int, stdin.split()))\n    if a[1] == 2:\n        return \"0\"\n    visited = {1}\n    count = 0\n    current_button = 1\n    while current_button != 2:\n        if a[current_button - 1] not in visited:\n            visited.add(a[current_button - 1])\n            current_button = a[current_button - 1]\n            count += 1\n        else:\n            return \"-1\"\n    return str(count)",
        "test": "assert solution(\"3\\n3\\n1\\n2\") == \"2\"",
        "num_ids": 656
    },
    {
        "number": 4609,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    N, A = int(stdin.split('\\n')[0]), list(map(int, stdin.split('\\n')[1:]))\n    sheet = set()\n    \n    for i in range(N):\n        if A[i] in sheet:\n            sheet.remove(A[i])\n        else:\n            sheet.add(A[i])\n    \n    return str(len(sheet))",
        "test": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"",
        "num_ids": 573
    },
    {
        "number": 4610,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, K, *A = list(map(int, stdin.split()))\n    count = 0\n    num_set = set()\n    \n    for i in range(N):\n        num_set.add(A[i])\n    \n    while len(num_set) > K:\n        count += 1\n        num_set.clear()\n        for i in range(count, N):\n            num_set.add(A[i])\n    \n    return count ",
        "test": "assert solution(\"5 3\\n1 1 2 2 3\") == 0",
        "num_ids": 738
    },
    {
        "number": 4611,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(t_i, x_i, y_i, t_j, x_j, y_j):\n        if t_i + 1 == t_j:\n            return (x_i, y_i) in [(x_j + 1, y_j), (x_j - 1, y_j), (x_j, y_j + 1), (x_j, y_j - 1)]\n        else:\n            return False\n\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    points = [(int(line.split()[0]), int(line.split()[1]), int(line.split()[2])) for line in lines[1:]]\n\n    for i in range(N - 1):\n        t_i, x_i, y_i = points[i]\n        t_j, x_j, y_j = points[i + 1]\n        if not is_valid(t_i, x_i, y_i, t_j, x_j, y_j):\n            return \"No\"\n\n    return \"Yes\"",
        "test": "assert solution(\"2\\n3 1 2\\n6 1 0\") == \"No\"",
        "num_ids": 992
    },
    {
        "number": 4612,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = (a + b) / 2\n    return str(int(x + 0.5))",
        "test": "assert solution(\"1 3\") == \"2\"",
        "num_ids": 301
    },
    {
        "number": 4613,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def find(parent, i):\n        if parent[i] == i:\n            return i\n        return find(parent, parent[i])\n\n    def union(parent, rank, x, y):\n        xroot = find(parent, x)\n        yroot = find(parent, y)\n\n        if xroot == yroot:\n            return False\n\n        if rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n        return True\n\n    input_list = list(map(int, stdin.split()))\n    N, M = input_list[0], input_list[1]\n    edges = input_list[2:]\n\n    parent = [i for i in range(N + 1)]\n    rank = [0] * (N + 1)\n    bridges = 0\n\n    for i in range(0, M, 2):\n        u, v = edges[i], edges[i + 1]\n        if union(parent, rank, u, v):\n            bridges += 1\n\n    return str(bridges)\n\nstdin = \"7 7 1 3 2 7 3 4 4 5 4 6 5 6 6 7\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n\") == \"4\"",
        "num_ids": 1461
    },
    {
        "number": 4614,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b:\n        return str(c)\n    elif a == c:\n        return str(b)\n    else:\n        return str(a)",
        "test": "assert solution(\"5 7 5\") == \"7\"",
        "num_ids": 403
    },
    {
        "number": 4615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n\n    # Initialize the maximum sugar water mass and the mass of sugar dissolved in it\n    max_sugar_water_mass = 0\n    max_dissolved_sugar_mass = 0\n\n    # Perform all possible operations and find the maximum sugar water mass and the mass of sugar dissolved in it\n    for i in range(F // 100 + 1):\n        for j in range(F // 100 + 1):\n            for k in range(1, D + 1):\n                for l in range(1, C + 1):\n                    sugar_water_mass = 100 * (i + j)\n                    dissolved_sugar_mass = min(E * (i * A + j * B + l * C + k * D), 100 * sugar_water_mass)\n\n                    if sugar_water_mass <= F and dissolved_sugar_mass == sugar_water_mass * C * D // (A + B + C + D):\n                        if sugar_water_mass > max_sugar_water_mass:\n                            max_sugar_water_mass = sugar_water_mass\n                            max_dissolved_sugar_mass = dissolved_sugar_mass\n\n    return f\"{max_sugar_water_mass} {max_dissolved_sugar_mass}\"",
        "test": "assert solution(\"1 2 10 20 15 200\\n1 2 10 20 15 200\\n1 2 10 20 15 200\") == \"110 10\\n110 10\\n110 10\"",
        "num_ids": 1310
    },
    {
        "number": 4616,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    first_i = s.find('i')\n    last_n = s.rfind('n')\n    if first_i != -1 and last_n != -1:\n        abbreviation = s[0:first_i] + 'i' + str(last_n - first_i - 1) + 'n'\n        return abbreviation\n    else:\n        return s\n",
        "test": "assert solution(\"internationalization\") == \"i18n\"",
        "num_ids": 526
    },
    {
        "number": 4617,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    grid = [list(line) for line in stdin.split('\\n')]\n    \n    # Rotate the grid 180 degrees\n    rotated_grid = [[grid[1][2], grid[1][1], grid[1][0]], \n                      [grid[0][2], grid[0][1], grid[0][0]]]\n    \n    # Check if the rotated grid is the same as the original grid\n    if rotated_grid == grid:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"pot\\ntop\") == \"YES\"",
        "num_ids": 461
    },
    {
        "number": 4618,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.strip().split()\n    s = s.strip()\n    k = int(k.strip())\n\n    substrings = set()\n    n = len(s)\n\n    # Generate all unique substrings\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substrings.add(s[i:j])\n\n    sorted_substrings = sorted(list(substrings))\n    return sorted_substrings[k - 1]",
        "test": "assert solution(\"aba\\n4\") == \"b\"",
        "num_ids": 372
    },
    {
        "number": 4619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    W, H, N = map(int, stdin.split())\n    points = []\n    for _ in range(N):\n        x, y, a = map(int, input().split())\n        points.append((x, y, a))\n    \n    def count_black_area(x1: int, y1: int, x2: int, y2: int, points: list) -> int:\n        area = (x2 - x1) * (y2 - y1)\n        for x, y, a in points:\n            if a == 1 and x < x1:\n                area -= (x2 - x1) * (y2 - y1)\n            elif a == 2 and x > x1:\n                area -= (x2 - x1) * (y2 - y1)\n            elif a == 3 and y < y1:\n                area -= (x2 - x1) * (y2 - y1)\n            elif a == 4 and y > y1:\n                area -= (x2 - x1) * (y2 - y1)\n        return area\n    \n    total_area = W * H\n    for i in range(N):\n        x, y, a = points[i]\n        if a == 1:\n            total_area -= count_black_area(0, 0, x, H, points[:i])\n        elif a == 2:\n            total_area -= count_black_area(x, 0, W, H, points[:i])\n        elif a == 3:\n            total_area -= count_black_area(0, 0, W, y, points[:i])\n        elif a == 4:\n            total_area -= count_black_area(0, y, W, H, points[:i])\n    \n    return total_area",
        "test": "assert solution(\"100 100 100\\n50 50 1\\n40 60 2\\n70 30 3\\n20 80 4\\n90 10 1\\n30 70 2\\n60 10 3\\n10 40 4\\n\") == \"2401\" ",
        "num_ids": 1368
    },
    {
        "number": 4620,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    def lcm(x, y):\n        return (x * y) // gcd(x, y)\n\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    N, lines = int(stdin.split(\"\\n\")[0]), stdin.split(\"\\n\")[1:]\n    C, S, F = [], [], []\n\n    for line in lines:\n        c, s, f = list(map(int, line.split()))\n        C.append(c)\n        S.append(s)\n        F.append(f)\n\n    result = []\n    for i in range(N):\n        if i == N - 1:\n            result.append(0)\n            continue\n\n        time = S[i]\n        for j in range(i, N - 1):\n            time += lcm(C[j], F[j])\n\n        result.append(time)\n\n    return \"\\n\".join(list(map(str, result)))",
        "test": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\"",
        "num_ids": 1040
    },
    {
        "number": 4621,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    image = [list(stdin.readline().strip()) for _ in range(H)]\n    \n    extended_image = []\n    for i in range(0, 2*H, 2):\n        row = []\n        for j in range(W):\n            row.append(image[i//2][j])\n        extended_image.append(row)\n    \n    return \"\\n\".join([\"\".join(row) for row in extended_image])\n\nstdin = sys.stdin\nstdout = sys.stdout\ninput_str = stdin.read()\noutput_str = solution(input_str)\nstdout.write(output_str) ",
        "test": "assert solution(\"100 100\\n\" + \"*\\n\"*100) == \"*\\n\"*200",
        "num_ids": 939
    },
    {
        "number": 4622,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n\n    if len(A) == len(set(A)):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\", \"Test case 1 failed\"",
        "num_ids": 529
    },
    {
        "number": 4623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def max_teams(weights: list[int]) -> int:\n        weights.sort()\n        max_weight = max(weights)\n        min_weight = min(weights)\n        if max_weight == min_weight:\n            return len(weights) // 2\n\n        gcd_value = gcd(max_weight, min_weight)\n        while gcd_value > 1:\n            max_weight //= gcd_value\n            min_weight //= gcd_value\n            gcd_value = gcd(max_weight, min_weight)\n\n        max_weight = max(max_weight, min_weight)\n        min_weight = max_weight * 2\n\n        max_count = 0\n        for weight in weights:\n            if weight <= max_weight:\n                max_count += 1\n            elif weight >= min_weight:\n                max_count += 1\n\n        return max_count // 2\n\n    test_cases = [case.strip() for case in stdin.split(\"\\n\") if case.strip()]\n    results = []\n\n    for case in test_cases:\n        case_data = case.split(\"\\n\")\n        n = int(case_data[0])\n        weights = [int(w) for w in case_data[1].split()]\n        results.append(str(max_teams(weights)))\n\n    return \"\\n\".join(results) + \"\\n\"",
        "test": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\\n3\\n4\\n1\\n2\" ",
        "num_ids": 1196
    },
    {
        "number": 4624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    test_cases = [list(map(int, i.split())) for i in stdin.split('\\n')[1:t+1]]\n    result = []\n\n    for n, x in test_cases:\n        if n <= 2:\n            result.append(1)\n        else:\n            floor = 2\n            while (x + 2) * floor < n:\n                floor += 1\n            result.append(floor)\n\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(987, 13) == 77",
        "num_ids": 545
    },
    {
        "number": 4625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_presses(n: int, m: int, s: str, p: list) -> list:\n        presses = [0] * 26\n        for i in range(n):\n            presses[ord(s[i]) - ord('a')] += 1\n        for i in range(m):\n            for j in range(p[i]):\n                presses[ord(s[j]) - ord('a')] += 1\n            s = s[p[i]:] + s[:p[i]]\n        return presses\n\n    def print_presses(presses: list) -> None:\n        for i in range(26):\n            print(presses[i], end=\" \")\n        print()\n\n    t = int(stdin.readline().strip())\n    output = []\n    for _ in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        p = list(map(int, stdin.readline().strip().split()))\n        presses = calculate_presses(n, m, s, p)\n        output.append(presses)\n\n    for presses in output:\n        print_presses(presses)",
        "test": "assert solution(\"3\\n4 2\\nabca\\n1 3\\n10 5\\ncodeforces\\n2 8 3 2 9\\n26 10\\nqwertyuioplkjhgfdsazxcvbnm\\n20 10 1 2 3 5 10 5 9 4\\n\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 9 4 5 3 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 0\\n2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\\n\" ",
        "num_ids": 1657
    },
    {
        "number": 4626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def distance(a, b, c):\n        return abs(a - b) + abs(a - c) + abs(b - c)\n\n    q = int(stdin.readline())\n    result = []\n\n    for _ in range(q):\n        a, b, c = map(int, stdin.readline().split())\n        result.append(distance(a, b, c))\n\n    return \"\\n\".join(map(str, result))\n",
        "test": "assert solution(\"8\\n3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\") == \"0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4\" ",
        "num_ids": 1021
    },
    {
        "number": 4627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def is_similar(x: int, y: int) -> bool:\n        return x % 2 == y % 2 or abs(x - y) == 1\n\n    def can_partition(a: List[int]) -> bool:\n        n = len(a)\n        a.sort()\n        for i in range(0, n, 2):\n            if not is_similar(a[i], a[i + 1]):\n                return False\n        return True\n\n    it = map(str.strip, stdin.split('\\n'))\n    it = iter(it)\n    next(it)  # skip first line\n\n    for _ in range(int(next(it))):\n        n = int(next(it))\n        a = list(map(int, next(it).split()))\n        if n % 2 == 0 and can_partition(a):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n",
        "test": "assert solution(\"4\\n1 2 5 6\\n\") == \"YES\"",
        "num_ids": 1074
    },
    {
        "number": 4628,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m, k = map(int, lines[0].split())\n    roads = []\n    couriers = []\n\n    for i in range(1, m + 1):\n        x, y, w = map(int, lines[i].split())\n        roads.append((x - 1, y - 1, w))\n\n    for i in range(m + 1, m + k + 1):\n        a, b = map(int, lines[i].split())\n        couriers.append((a - 1, b - 1))\n\n    import sys\n    sys.setrecursionlimit(10000)\n\n    graph = [[0] * n for _ in range(n)]\n    for x, y, w in roads:\n        graph[x][y] = w\n        graph[y][x] = w\n\n    visited = [False] * n\n    distances = [float('inf')] * n\n    distances[0] = 0\n\n    def dijkstra(start):\n        visited[start] = True\n        for i in range(n):\n            if graph[start][i] != 0 and not visited[i]:\n                if distances[i] > distances[start] + graph[start][i]:\n                    distances[i] = distances[start] + graph[start][i]\n                    dijkstra(i)\n\n    dijkstra(0)\n\n    total_cost = sum(distances[a] + distances[b] for a, b in couriers)\n\n    for x, y, w in roads:\n        saved_cost = graph[x][y] + graph[y][x]\n        graph[x][y] = 0\n        graph[y][x] = 0\n        dijkstra(0)\n        new_total_cost = sum(distances[a] + distances[b] for a, b in couriers)\n        if new_total_cost < total_cost:\n            total_cost = new_total_cost\n        graph[x][y] = saved_cost\n        graph[y][x] = saved_cost\n\n    return str(total_cost)",
        "test": "assert solution(\"\"\"6 5 2",
        "num_ids": 1571
    },
    {
        "number": 4629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(num):\n        if num == 0:\n            return True\n        for i in range(20):\n            if num >= 3 ** i:\n                if is_good(num - 3 ** i):\n                    return True\n        return False\n\n    def smallest_good(n):\n        while not is_good(n):\n            n += 1\n        return n\n\n    q = int(stdin.split('\\n')[0])\n    numbers = [int(x) for x in stdin.split('\\n')[1:]]\n    result = []\n\n    for number in numbers:\n        result.append(smallest_good(number))\n\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"7\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\"",
        "num_ids": 833
    },
    {
        "number": 4630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_cycle_length(n: int, p: List[int]) -> int:\n        visited = [False] * n\n        for i in range(n):\n            j = i\n            while not visited[j]:\n                visited[j] = True\n                j = p[j] - 1\n            if not visited[j]:\n                visited[j] = True\n                return i + 1\n        return 1\n\n    def process_query(n: int, p: List[int]) -> List[int]:\n        cycle_length = find_cycle_length(n, p)\n        result = []\n        for i in range(n):\n            result.append((p[i] - 1 + cycle_length) % cycle_length + 1)\n        return result\n\n    def parse_input(stdin: str) -> Iterator[Tuple[int, List[int]]]:\n        q = int(stdin.readline().strip())\n        for _ in range(q):\n            n = int(stdin.readline().strip())\n            p = list(map(int, stdin.readline().strip().split()))\n            yield n, p\n\n    result = []\n    for n, p in parse_input(io.StringIO(stdin)):\n        result.extend(process_query(n, p))\n        result.append(\"\")\n    return \"\\n\".join(map(str, result[:-1])) + \"\\n\" ",
        "test": "assert solution(\"6\\n5 1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1 \\n3 3 3 \\n2 3 3 2 1 3 \\n1 \\n2 2 2 2 \\n4 4 4 1 4\" ",
        "num_ids": 1661
    },
    {
        "number": 4631,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    x = sorted(map(int, stdin.readline().split()))\n\n    res = float('inf')\n    ans = []\n\n    for i in range(-2 * 10**9, 2 * 10**9 + 1):\n        dist = sum(min(abs(x_i - i) for x_i in x) for j in range(m))\n        if dist < res:\n            res = dist\n            ans = [i] * m\n\n    return str(res) + '\\n' + ' '.join(map(str, ans))",
        "test": "assert solution(\"3 5\\n0 3 1\") == \"7\\n5 -2 4 -1 2\" ",
        "num_ids": 831
    },
    {
        "number": 4632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(x: int, y: int) -> bool:\n        return 0 <= x <= 1000 and 0 <= y <= 1000\n\n    def find_path(x: int, y: int) -> str:\n        if x == 0 and y == 0:\n            return ''\n        if (x, y) in visited:\n            return 'NO'\n        visited.add((x, y))\n\n        if x > 0 and is_valid(x - 1, y) and (x - 1, y) not in visited:\n            path = find_path(x - 1, y)\n            if path != 'NO':\n                return 'U' + path\n\n        if y > 0 and is_valid(x, y - 1) and (x, y - 1) not in visited:\n            path = find_path(x, y - 1)\n            if path != 'NO':\n                return 'R' + path\n\n        visited.remove((x, y))\n        return 'NO'\n\n    test_cases = stdin.strip().split('\\n')\n    total_test_cases = int(test_cases[0])\n    test_cases = test_cases[1:]\n\n    i = 0\n    result = []\n    while i < total_test_cases:\n        n = int(test_cases[i])\n        packages = []\n        for j in range(n):\n            x, y = map(int, test_cases[i + 1 + j].split())\n            packages.append((x, y))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n\n        visited = set()\n        path = find_path(packages[0][0], packages[0][1])\n        if path == 'NO':\n            result.append('NO')\n        else:\n            result.append('YES')\n            result.append(path)\n\n        i += n + 1\n\n    return '\\n'.join(result)",
        "test": "assert solution(\"3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\\n2\\n1 0\\n0 1\\n1\\n4 3\\n\") == \"YES\\nRUUURRRRUU\\nNO\\nYES\\nRRRRUUU\"",
        "num_ids": 1361
    },
    {
        "number": 4633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def sum_of_digits(n: int) -> int:\n        return sum(int(digit) for digit in str(n))\n\n    def moves_to_make_sum_of_digits_less_than_s(n: int, s: int) -> int:\n        moves = 0\n        while sum_of_digits(n) > s:\n            n += 1\n            moves += 1\n        return moves\n\n    test_cases = [list(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    results = [moves_to_make_sum_of_digits_less_than_s(n, s) for n, s in test_cases]\n    return \"\\n\".join(map(str, results))",
        "test": "assert solution(\"5\\n2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\") == \"8\\n0\\n500\\n2128012501878\\n89999999999999999\" ",
        "num_ids": 872
    },
    {
        "number": 4634,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # read the input\n    test_cases = int(stdin.split('\\n')[0])\n    stdin = stdin.split('\\n')[1:]\n\n    def count_gaps(arr):\n        gaps = 0\n        for i in range(len(arr) - 1):\n            if arr[i] == 1 and arr[i + 1] == 0:\n                gaps += 1\n        return gaps\n\n    def collect_books(arr):\n        moves = 0\n        i = 0\n        while i < len(arr) and arr[i] == 0:\n            i += 1\n        start = i\n        while i < len(arr) and arr[i] == 1:\n            i += 1\n        end = i - 1\n\n        gaps = count_gaps(arr[start:end + 1])\n        moves += gaps\n\n        if start > 0 and arr[start - 1] == 0:\n            moves += 1\n        if end < len(arr) - 1 and arr[end + 1] == 0:\n            moves += 1\n\n        return moves\n\n    output = []\n    for i in range(test_cases):\n        n = int(stdin[i * 2])\n        arr = list(map(int, stdin[i * 2 + 1].split()))\n        output.append(collect_books(arr))\n\n    return '\\n'.join(map(str, output))",
        "test": "assert solution([6, 1, 0, 0, 0, 0, 1]) == 4",
        "num_ids": 1667
    },
    {
        "number": 4635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    queries = [list(map(int, query.split())) for query in stdin.split('\\n')[1:t+1]]\n\n    for i, query in enumerate(queries):\n        n, k = query\n        if n == k:\n            queries[i] = [''.join(chr(i + 97) for i in range(n))]\n        else:\n            min_freq = n // k\n            rest = n % k\n            s = ''\n            for i in range(k):\n                if i < rest:\n                    s += chr(i + 97) * (min_freq + 1)\n                else:\n                    s += chr(i + 97) * min_freq\n            queries[i] = [s]\n\n    return '\\n'.join([''.join(query) for query in queries])\n",
        "test": "assert solution(6, 2, 2) == \"baabab\"",
        "num_ids": 698
    },
    {
        "number": 4636,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def game(a: list[int]) -> tuple[int, int, int]:\n        n = len(a)\n        alice = 0\n        bob = 0\n        moves = 0\n        while a:\n            moves += 1\n            alice_sum = sum(a[:n - bob % 2])\n            bob_sum = sum(a[bob % 2:])\n            if alice_sum <= bob_sum:\n                alice += alice_sum\n                a = a[n - bob % 2:]\n                bob %= 2\n            else:\n                bob += bob_sum\n                a = a[bob % 2:]\n                alice %= 2\n        return moves, alice, bob\n\n    t = int(stdin.readline().strip())\n    output = []\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        moves, alice, bob = game(a)\n        output.append(f\"{moves} {alice} {bob}\\n\")\n    return \"\".join(output)",
        "test": "assert solution(\"\"\"7",
        "num_ids": 1302
    },
    {
        "number": 4637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_sum(a: List[int], b: List[int], k: int) -> int:\n        a.sort(reverse=True)\n        b.sort(reverse=True)\n        return sum(a[:k] + b[:k])\n\n    t = int(stdin.split(\"\\n\")[0])\n    lines = stdin.split(\"\\n\")[1:]\n    result = []\n\n    for i in range(t):\n        n, k = map(int, lines[i * 3].split())\n        a = list(map(int, lines[i * 3 + 1].split()))\n        b = list(map(int, lines[i * 3 + 2].split()))\n        result.append(get_max_sum(a, b, k))\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution([\"2 1\", \"1 2\", \"3 4\", \"5 5\", \"5 5 6 6 5\", \"1 2 5 4 3\", \"5 3\", \"1 2 3 4 5\", \"10 9 10 10 9\", \"4 0\", \"2 2 4 3\", \"2 4 2 3\", \"4 4\", \"1 2 2 1\", \"4 4 5 4\"]) == \"6\\n27\\n39\\n11\\n17\\n\" ",
        "num_ids": 947
    },
    {
        "number": 4638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:n]))\n    b = list(map(int, stdin.split()[n+1:]))\n\n    dp = [0] * (n+1)\n\n    for i in range(1, n+1):\n        dp[i] = min(dp[i-1] + a[i-2] + c + b[i-2], dp[i-1] + c + b[i-2])\n\n    return ' '.join(str(x) for x in dp[1:])",
        "test": "assert solution(\"10 1\\n3 2 3 1 3 3 1 4 1\\n1 2 3 4 4 1 2 1 3\\n\") == \"0 2 4 7 8 11 13 14 16 17\" ",
        "num_ids": 996
    },
    {
        "number": 4639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def generate_strings(n):\n        if n == 1:\n            return ['a']\n        if n == 2:\n            return ['aa', 'ab']\n\n        strings = []\n        for string in generate_strings(n - 1):\n            strings.append(string + 'a')\n            if string.endswith('a'):\n                strings.append(string[:-1] + 'b')\n        return strings\n\n    def kth_string(strings, k):\n        return strings[k - 1]\n\n    t = int(stdin.split()[0])\n    result = []\n    for _ in range(t):\n        n, k = map(int, stdin.split())\n        strings = generate_strings(n)\n        result.append(kth_string(strings, k))\n        stdin = stdin.split('\\n')[1:]\n\n    return '\\n'.join(result)",
        "test": "assert solution(5, 10) == \"bbaaa\"",
        "num_ids": 834
    },
    {
        "number": 4640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def can_save(x: int, y: int, platform1: tuple, platform2: tuple) -> bool:\n        if platform1[0] <= x <= platform1[1] and y <= 0:\n            return True\n        if platform2[0] <= x <= platform2[1] and y <= 0:\n            return True\n        return False\n\n    def process_test_case(n: int, k: int, x: list, y: list) -> int:\n        x.sort()\n        y.sort()\n\n        platform1 = (x[0], x[0] + k)\n        platform2 = (x[-1] - k, x[-1])\n\n        saved_points = [i for i in range(n) if can_save(x[i], y[i], platform1, platform2)]\n\n        return len(saved_points)\n\n    def main():\n        t = int(stdin.readline().strip())\n        result = []\n\n        while t > 0:\n            n, k = map(int, stdin.readline().strip().split())\n            x = list(map(int, stdin.readline().strip().split()))\n            y = list(map(int, stdin.readline().strip().split()))\n\n            result.append(process_test_case(n, k, x, y))\n\n            t -= 1\n\n        return \"\\n\".join(map(str, result))\n\n    return main()",
        "test": "assert solution(\"\"\"4",
        "num_ids": 1861
    },
    {
        "number": 4641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def find_mex(a):\n        mex = 0\n        while mex in a:\n            mex += 1\n        return mex\n\n    q, x = map(int, stdin.readline().split())\n    a = []\n    result = []\n\n    for i in range(q):\n        y_i = int(stdin.readline())\n        a.append(y_i)\n        mex = find_mex(a)\n        result.append(mex)\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"",
        "num_ids": 816
    },
    {
        "number": 4642,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def find_array(n, x, y):\n        a = [1] * n\n        d = (y - x) // (n - 1)\n        a[0] = x\n        for i in range(1, n):\n            a[i] = a[i - 1] + d\n        return a\n\n    t = int(stdin.split('\\n')[0])\n    output = []\n    for i in range(1, t + 1):\n        n, x, y = map(int, stdin.split('\\n')[i].split())\n        array = find_array(n, x, y)\n        output.append(' '.join(map(str, array)))\n\n    return '\\n'.join(output)\n",
        "test": "assert solution(\"5\\n2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7\" ",
        "num_ids": 1040
    },
    {
        "number": 4643,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, *tickets = map(int, stdin.split())\n    tickets.sort()\n    return \" \".join(map(str, tickets))",
        "test": "assert solution('3 3 1 2') == '1 2 3'",
        "num_ids": 535
    },
    {
        "number": 4644,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_odd_sum(a):\n        return sum(a) % 2\n\n    def check_odd_sum(n, a):\n        odd_sum = get_odd_sum(a)\n        if odd_sum == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    lines = stdin.splitlines()\n    t = int(lines[0])\n    test_cases = []\n\n    for i in range(1, len(lines), 2):\n        n = int(lines[i])\n        a = list(map(int, lines[i + 1].split()))\n        test_cases.append((n, a))\n\n    results = []\n    for n, a in test_cases:\n        results.append(check_odd_sum(n, a))\n\n    return \"\\n\".join(results)\n",
        "test": "assert solution(\"5\\n2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1\") == \"YES\\nNO\\nYES\\nNO\\nNO\" ",
        "num_ids": 942
    },
    {
        "number": 4645,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_permutation(n: int) -> str:\n        if n == 2:\n            return \"2 1\"\n        if n == 3:\n            return \"-1\"\n        if n % 2 == 0:\n            return \" \".join(map(str, range(n, 0, -1)))\n        permutation = [1]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                permutation.append(i - 1)\n                permutation.append(i)\n            else:\n                permutation.append(i)\n                permutation.append(i - 1)\n        return \" \".join(map(str, permutation))\n\n    def main():\n        test_cases = int(stdin.readline().strip())\n        for _ in range(test_cases):\n            n = int(stdin.readline().strip())\n            permutation = find_permutation(n)\n            print(permutation)\n\n    main()\n",
        "test": "assert solution(\"6\\n10\\n2\\n4\\n6\\n7\\n13\") == \"9 6 10 8 4 7 3 1 5 2 \\n-1\\n3 1 4 2 \\n5 3 6 2 4 1 \\n5 1 3 6 2 4 7 \\n13 9 7 11 8 4 1 3 5 2 6 10 12\" ",
        "num_ids": 1139
    },
    {
        "number": 4646,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(arr: list) -> bool:\n        for i, x in enumerate(arr):\n            if i % 2 != x % 2:\n                return False\n        return True\n\n    def min_moves(arr: list) -> int:\n        moves = 0\n        for i in range(len(arr)):\n            if i % 2 != arr[i] % 2:\n                for j in range(i + 1, len(arr)):\n                    if arr[i] % 2 == arr[j] % 2:\n                        arr[i], arr[j] = arr[j], arr[i]\n                        moves += 1\n                        break\n        return moves if is_good(arr) else -1\n\n    tests = int(stdin.readline())\n    output = []\n    for _ in range(tests):\n        n = int(stdin.readline())\n        arr = [int(x) for x in stdin.readline().split()]\n        output.append(min_moves(arr))\n\n    return \"\\n\".join(map(str, output))",
        "test": "assert solution(\"4\\n4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n\") == \"2\\n1\\n-1\\n0\" ",
        "num_ids": 1190
    },
    {
        "number": 4647,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    colors = list(map(int, stdin.split('\\n')[1].split()))\n    edges = [(int(x) - 1, int(y) - 1) for x, y in map(lambda x: x.split(), stdin.split('\\n')[2:])]\n\n    tree = [[] for _ in range(n)]\n    for u, v in edges:\n        tree[u].append(v)\n        tree[v].append(u)\n\n    def dfs(node, parent):\n        subtree_white = colors[node]\n        subtree_black = 1 - colors[node]\n        for child in tree[node]:\n            if child != parent:\n                w, b = dfs(child, node)\n                subtree_white += w\n                subtree_black += b\n        return subtree_white, subtree_black\n\n    def find_max_diff(node, parent):\n        subtree_white, subtree_black = dfs(node, parent)\n        return max(subtree_white, subtree_black) - min(subtree_white, subtree_black)\n\n    result = [find_max_diff(i, -1) for i in range(n)]\n    return ' '.join(map(str, result))",
        "test": "assert solution(\"\"\"",
        "num_ids": 926
    },
    {
        "number": 4648,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for i in range(t):\n        n = int(stdin.split('\\n')[i+1])\n        moves = 0\n        while n > 1:\n            if n % 6 == 0:\n                n //= 6\n                moves += 1\n            elif n % 2 == 0:\n                n //= 2\n                moves += 1\n            else:\n                break\n        if n == 1:\n            print(moves)\n        else:\n            print(-1)",
        "test": "assert solution(12345) == -1",
        "num_ids": 701
    },
    {
        "number": 4649,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    q = int(stdin.readline())\n    queries = []\n    for i in range(q):\n        n, k = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n        queries.append((n, k, s))\n\n    # Solve each query\n    result = []\n    for n, k, s in queries:\n        if k > n:\n            result.append(0)\n            continue\n\n        changes = float('inf')\n        for i in range(n - k + 1):\n            sub_s = s[i:i + k]\n            sub_changes = float('inf')\n            for color in ['R', 'G', 'B']:\n                sub_changes = min(sub_changes, sub_s.count(color))\n            changes = min(changes, sub_changes)\n\n        result.append(changes)\n\n    # Format output\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"3\\n5 2\\nBGGGG\\n5 3\\nRBRGR\\n5 5\\nBBBRR\\n\") == \"1\\n0\\n3\\n\" ",
        "num_ids": 776
    },
    {
        "number": 4650,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = []\n    for line in stdin.split('\\n'):\n        if not line:\n            continue\n        queries.append(list(map(int, line.split())))\n\n    def max_divisible_by_3(n: int, a: list) -> int:\n        a.sort()\n        count = 0\n        for i in range(n - 1):\n            if a[i] % 3 == 0:\n                count += 1\n            if a[i] % 3 == 1 and a[i + 1] % 3 == 2:\n                a[i], a[i + 1] = a[i] + a[i + 1], a[i] + a[i + 1]\n                count += 1\n        if a[-1] % 3 == 0:\n            count += 1\n        return count\n\n    result = []\n    for query in queries:\n        n, a = query[0], query[1:]\n        result.append(max_divisible_by_3(n, a))\n\n    return '\\n'.join(map(str, result))\n\nt = int(input())\nstdin = []\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    stdin.append(f\"{n} {' '.join(map(str, a))}\")\n\nstdin = '\\n'.join(stdin)\nprint(solution(stdin)) ",
        "test": "assert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n\") == \"3\\n3\\n\"",
        "num_ids": 1074
    },
    {
        "number": 4651,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_lexicographically_less(p: List[int], q: List[int]) -> bool:\n        n = len(p)\n        for i in range(n):\n            if p[i] != q[i]:\n                return p[i] < q[i]\n        return False\n\n    def min_permutation(permutation: List[int]) -> List[int]:\n        n = len(permutation)\n        for i in range(n - 1):\n            j = i + 1\n            if permutation[i] > permutation[j]:\n                permutation[i], permutation[j] = permutation[j], permutation[i]\n                return permutation\n        return permutation\n\n    def process_case(permutation: List[int]) -> List[int]:\n        n = len(permutation)\n        for i in range(n - 1):\n            j = i + 1\n            if permutation[i] > permutation[j]:\n                permutation[i], permutation[j] = permutation[j], permutation[i]\n                return permutation\n        return permutation\n\n    def read_input() -> Iterator[Tuple[int, List[int]]]:\n        q = int(stdin.readline().strip())\n        for _ in range(q):\n            n = int(stdin.readline().strip())\n            permutation = [int(x) for x in stdin.readline().strip().split()]\n            yield (n, permutation)\n\n    result = []\n    for n, permutation in read_input():\n        min_perm = min_permutation(permutation)\n        result.append(\" \".join(str(x) for x in min_perm))\n\n    return \"\\n\".join(result) ",
        "test": "assert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 5 2 4 3\\n1 2 3 4\\n1\\n1 4 3 2\"",
        "num_ids": 1554
    },
    {
        "number": 4652,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(perm: list) -> bool:\n        for i in range(1, len(perm)):\n            if perm[i] != perm[i - 1] + 1:\n                return False\n        return True\n\n    q = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        perm = list(map(int, stdin.readline().strip().split()))\n\n        if is_valid(perm):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n",
        "test": "assert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\" ",
        "num_ids": 739
    },
    {
        "number": 4653,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    result = []\n    for i in range(1, t + 1):\n        n, k = map(int, stdin.split('\\n')[i].split())\n        max_candies = min(n // k, (n - k) // (k - 1))\n        if max_candies < 1:\n            result.append(0)\n        else:\n            a = max_candies\n            b = max_candies + 1\n            while a <= b:\n                m = (a + b) // 2\n                count_a_plus_one = sum([1 for j in range(1, k) if m * j <= n])\n                if m * k <= n and count_a_plus_one <= k // 2:\n                    max_candies = m\n                    a = m + 1\n                else:\n                    b = m - 1\n            result.append(max_candies)\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"5\\n5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"",
        "num_ids": 985
    },
    {
        "number": 4654,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def find_representation(n, k):\n        if k == 1:\n            return [n]\n        if n % 2 == 0:\n            if k % 2 == 0:\n                return [2] * (k // 2) + [n - 2 * (k // 2)]\n            else:\n                for i in range(1, k // 2 + 1):\n                    if (n - 2 * i) % 2 == 0 and (n - 2 * i) // 2 >= k - 2 * i:\n                        return [2] * i + [n - 2 * i] + [2] * (k - i - 1)\n                return []\n        else:\n            if k % 2 == 0:\n                for i in range(1, k // 2 + 1):\n                    if (n - 2 * i - 1) % 2 == 1 and (n - 2 * i - 1) // 2 >= k - 2 * i:\n                        return [2] * i + [n - 2 * i - 1] + [2] * (k - i - 1)\n                return []\n            else:\n                if k % 4 == 1:\n                    if n % 4 == 1:\n                        return [1] + [3] * (k - 1)\n                    else:\n                        return []\n                else:\n                    for i in range(1, k // 2 + 1):\n                        if (n - 2 * i - 2) % 2 == 0 and (n - 2 * i - 2) // 2 >= k - 2 * i:\n                            return [2] * i + [n - 2 * i - 2] + [2] * (k - i - 1)\n                    return []\n\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    outputs = []\n    for i in range(1, t + 1):\n        n, k = list(map(int, lines[i].split()))\n        representation = find_representation(n, k)\n        if representation:\n            outputs.append(f\"YES\\n{' '.join(map(str, representation))}\")\n        else:\n            outputs.append(\"NO\")\n    return '\\n\\n'.join(outputs)",
        "test": "assert solution(\"97 2\\n\") == \"NO\"",
        "num_ids": 1378
    },
    {
        "number": 4655,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_alice_max_candies(a, b, c):\n        alice_candies = b\n        bob_candies = a\n\n        if a == b and b == c:\n            return a\n        elif a == b:\n            return a + c // 2\n        elif b == c:\n            return b + a // 2\n        elif a == c:\n            return a + b // 2\n        else:\n            if a <= b <= c or c <= b <= a:\n                alice_candies = b + c // 2\n                bob_candies = a\n            elif b <= a <= c or c <= a <= b:\n                alice_candies = a + c // 2\n                bob_candies = b\n            elif a <= c <= b or b <= c <= a:\n                alice_candies = a + b // 2\n                bob_candies = c\n\n        if alice_candies > bob_candies:\n            return alice_candies - 1\n        else:\n            return alice_candies\n\n    queries = [list(map(int, line.split())) for line in stdin.strip().split('\\n')[1:]]\n    results = [get_alice_max_candies(*query) for query in queries]\n    return '\\n'.join(map(str, results))\n\nstdin = '''4\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n'''\n\nprint(solution(stdin))",
        "test": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"",
        "num_ids": 1164
    },
    {
        "number": 4656,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    t = int(stdin.split(\"\\n\")[0])\n    start = 1\n    output = []\n\n    for _ in range(t):\n        n, k = map(int, stdin.split(\"\\n\")[start].split())\n        s = stdin.split(\"\\n\")[start + 1]\n\n        # Count the occurrences of each letter in the string\n        letter_count = [0] * 26\n        for letter in s:\n            letter_count[ord(letter) - ord(\"a\")] += 1\n\n        # Find the maximum length of a k-beautiful necklace\n        max_length = 0\n        for i in range(n):\n            for j in range(i, n):\n                length = (j - i + 1) * k\n                if length > n:\n                    continue\n                beads = s[i:j + 1]\n                if all(letter_count[ord(letter) - ord(\"a\")] >= length // len(beads) for letter in beads):\n                    max_length = max(max_length, length)\n\n        output.append(str(max_length))\n        start += 2\n\n    return \"\\n\".join(output)",
        "test": "assert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\") == \"6\\n3\\n5\\n4\\n15\\n10\" ",
        "num_ids": 1099
    },
    {
        "number": 4657,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def check_segment(arr, n, k):\n        for i in range(k):\n            segment_sum = sum(arr[r_segments[i]:r_segments[i+1]])\n            if segment_sum % 2 == 0:\n                return False\n        return True\n\n    def dfs(arr, n, k, idx, r_segments):\n        if idx == n:\n            if k == 0:\n                return check_segment(arr, n, len(r_segments) - 1)\n            else:\n                return False\n\n        r_segments.append(idx)\n        if dfs(arr, n, k - 1, idx + 1, r_segments):\n            return True\n        r_segments.pop()\n\n        if dfs(arr, n, k, idx + 1, r_segments):\n            return True\n\n        return False\n\n    queries = stdin.split(\"\\n\")\n    result = []\n    for i in range(1, len(queries), 2):\n        n, k = map(int, queries[i].split())\n        arr = list(map(int, queries[i+1].split()))\n\n        r_segments = []\n        if dfs(arr, n, k, 0, r_segments):\n            result.append(\"YES\")\n            result.append(\" \".join(map(str, r_segments)))\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"3\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"YES\\n1 3 5\\nNO\\nNO\" ",
        "num_ids": 1717
    },
    {
        "number": 4658,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the binary string to an integer\n    n = int(stdin, 2)\n\n    # Reverse the bits of the integer\n    reversed_bits = 0\n    for i in range(32):\n        if (n >> i) & 1:\n            reversed_bits |= 1 << (31 - i)\n\n    # Convert the reversed bits back to a binary string\n    return format(reversed_bits, '032b')",
        "test": "assert solution(\"11111111111111111111111111111101\") == \"3221225471\" ",
        "num_ids": 571
    },
    {
        "number": 4659,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    numRows = int(stdin.strip())\n    result = []\n    \n    for i in range(numRows):\n        row = [1] * (i + 1)\n        if i > 1:\n            for j in range(1, i):\n                row[j] = result[-1][j - 1] + result[-1][j]\n        result.append(row)\n    \n    return str(result)",
        "test": "assert solution(5) == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]], \"Test failed for numRows = 5\" ",
        "num_ids": 566
    },
    {
        "number": 4660,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    import re\n\n    def is_valid_email(email: str) -> bool:\n        pattern = r\"^[a-zA-Z0-9_-]+@[a-zA-Z0-9]+\\.[a-zA-Z]{1,3}$\"\n        return bool(re.match(pattern, email))\n\n    stdin_list = stdin.split('\\n')\n    N = int(stdin_list[0])\n    email_list = stdin_list[1:]\n    valid_emails = list(filter(is_valid_email, email_list))\n    valid_emails.sort()\n\n    return str(valid_emails)",
        "test": "assert solution(\"3\\n2w3e#\\na.b-c_d@ef.gh.ij\\nAa_12b@3u.v\\n\") == \"['Aa_12b@3u.v']\"",
        "num_ids": 725
    },
    {
        "number": 4661,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    fibonacci = [0]\n    a, b = 0, 1\n    for i in range(N):\n        fibonacci.append(b)\n        a, b = b, a + b\n    result = list(map(lambda x: x ** 3, fibonacci))\n    return ' '.join(str(x) for x in result)",
        "test": "assert solution(\"4\") == \"0, 1, 1, 4\"",
        "num_ids": 507
    },
    {
        "number": 4662,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    xml = stdin.split('\\n')\n    depth = 0\n    max_depth = 0\n    for line in xml:\n        for char in line:\n            if char == '<':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == '>':\n                depth -= 1\n    return str(max_depth)\n",
        "test": "assert solution(\"<root><child>2</child></root>\") == \"1\"",
        "num_ids": 597
    },
    {
        "number": 4663,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    numbers = stdin.split(\"\\n\")[1:]\n    result = []\n    for number in numbers:\n        if len(number) == 10 and number[0] in ['7', '8', '9']:\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n    return \"\\n\".join(result)\n\nstdin = \"{}\\n{}\".format(2, \"9587489215\\n8657419287\")\nprint(solution(stdin)) ",
        "test": "assert solution(\"1\\n7123456789\") == \"YES\"",
        "num_ids": 827
    },
    {
        "number": 4664,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    M, m_set, N, n_set = None, set(), None, set()\n    input_list = stdin.split(\"\\n\")\n    M, m_set, N, n_set = int(input_list[0]), set(map(int, input_list[1].split())), int(input_list[2]), set(map(int, input_list[3].split()))\n    \n    sym_diff = m_set.symmetric_difference(n_set)\n    sym_diff = list(sym_diff)\n    sym_diff.sort()\n    \n    return \"\\n\".join(map(str, sym_diff))",
        "test": "assert solution(\"4\\n1 2 3 4\\n3\\n5 6 7\\n\") == \"1\\n2\\n3\\n4\\n5\\n6\\n7\"",
        "num_ids": 913
    },
    {
        "number": 4665,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    cols = stdin.split(\"\\n\")[1].split()\n    ind_marks = cols.index(\"MARKS\")\n    marks = []\n    for i in range(2, n+2):\n        line = stdin.split(\"\\n\")[i]\n        data = line.split()\n        marks.append(int(data[ind_marks]))\n    avg_marks = sum(marks)/len(marks)\n    return \"{:.2f}\".format(avg_marks)",
        "test": "assert solution(\"4\\nID MARKS CLASS NAME\\n1 95 A physics\\n2 80 B maths\\n3 90 A chemistry\\n4 75 C biology\") == \"85.00\"",
        "num_ids": 1016
    },
    {
        "number": 4666,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 != 0:\n        return \"Weird\"\n    elif n in range(2, 6):\n        return \"Not Weird\"\n    elif n in range(6, 21):\n        return \"Weird\"\n    else:\n        return \"Not Weird\"",
        "test": "assert solution(\"3\") == \"Weird\"",
        "num_ids": 423
    },
    {
        "number": 4667,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    xml_doc = stdin.split(\"\\n\")\n    score = 0\n    for line in xml_doc:\n        if \">\" in line:\n            start_tag_end = line.index(\">\")\n            start_tag = line[:start_tag_end]\n            if \" \" in start_tag:\n                attributes = start_tag.split(\" \")[1:]\n                score += len(attributes)\n    return score",
        "test": "assert solution(\"<root a='1'></root>\") == 1",
        "num_ids": 669
    },
    {
        "number": 4668,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = (map(float, input().split()))\n    \n    def dot_product(X, Y):\n        return X[0] * Y[0] + X[1] * Y[1] + X[2] * Y[2]\n    \n    def cross_product(X, Y):\n        return [X[1] * Y[2] - X[2] * Y[1], X[2] * Y[0] - X[0] * Y[2], X[0] * Y[1] - X[1] * Y[0]]\n    \n    def magnitude(X):\n        return (X[0] ** 2 + X[1] ** 2 + X[2] ** 2) ** 0.5\n    \n    AB = [B[0] - A[0], B[1] - A[1], B[2] - A[2]]\n    BC = [C[0] - B[0], C[1] - B[1], C[2] - B[2]]\n    CD = [D[0] - C[0], D[1] - C[1], D[2] - C[2]]\n    \n    X = cross_product(AB, BC)\n    Y = cross_product(BC, CD)\n    \n    cos_phi = dot_product(X, Y) / (magnitude(X) * magnitude(Y))\n    \n    return \"{:.2f}\".format(math.degrees(math.acos(cos_phi)))",
        "test": "assert solution(\"1 1 1 2 2 2 3 3 3 4 4 4\") != \"90.00\"",
        "num_ids": 1325
    },
    {
        "number": 4669,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def score_words(words):\n        vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n        total_score = 0\n        for word in words:\n            num_vowels = sum([1 for letter in word if letter in vowels])\n            if num_vowels % 2 == 0:\n                total_score += 2\n            else:\n                total_score += 1\n        return total_score\n\n    lines = stdin.split('\\n')\n    num_words = int(lines[0])\n    words = lines[1].split()\n    if len(words) != num_words:\n        raise ValueError(\"Incorrect number of words\")\n    return str(score_words(words)) ",
        "test": "assert solution(\"1\\namarvolo\") == \"2\"",
        "num_ids": 830
    },
    {
        "number": 4670,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    roman_numeral = \"IVXLCDM\"\n    valid_numeral = True\n\n    for i in range(len(stdin)):\n        if roman_numeral.find(stdin[i]) < roman_numeral.find(stdin[i - 1]):\n            valid_numeral = False\n            break\n\n    if valid_numeral:\n        return \"True\"\n    else:\n        return \"False\"\n",
        "test": "assert solution('ABC') == False",
        "num_ids": 444
    },
    {
        "number": 4671,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    numbers = stdin.split('\\n')[1:]\n    sorted_numbers = sorted(numbers)\n    for number in sorted_numbers:\n        if number.startswith('0') or number.startswith('+91') or number.startswith('91'):\n            number = number.replace('+91', '').replace('0', '').replace('91', '')\n        number = \"+91 \" + \" \".join(number[i:i+5] for i in range(0, len(number), 5))\n        print(number)\n",
        "test": "assert solution(\"5\\n+91 12345 67890\\n911234567890\\n09876543210\\n+919876543210\\n12345 67890\") == \"+91 12345 67890\\n+91 12345 67890\\n+91 98765 43210\\n+91 98765 43210\\n+91 12345 67890\" ",
        "num_ids": 978
    },
    {
        "number": 4672,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    student_marks = {}\n    for i in range(1, n+1):\n        line = stdin.split(\"\\n\")[i].split()\n        name = line[0]\n        marks = list(map(int, line[1:]))\n        student_marks[name] = marks\n    \n    query_name = stdin.split(\"\\n\")[-1]\n    avg = sum(student_marks[query_name])/len(student_marks[query_name])\n    return \"{:.2f}\".format(avg)",
        "test": "assert solution('4\\nalpha 20 30 40\\nbeta 30 50 70\\ngamma 20 40 60\\ndelta 50 60 70\\nbeta') == '50.00' ",
        "num_ids": 1029
    },
    {
        "number": 4673,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def title(sex):\n        return \"Mr.\" if sex == \"M\" else \"Ms.\"\n\n    def name_format(first_name, last_name, age, sex):\n        return f\"{title(sex)} {first_name} {last_name}\"\n\n    def sort_key(person):\n        return person[2]\n\n    people = []\n    n = int(stdin.split(\"\\n\")[0])\n    for i in range(1, n + 1):\n        first_name, last_name, age, sex = stdin.split(\"\\n\")[i].split(\" \")\n        people.append((first_name, last_name, int(age), sex))\n\n    people.sort(key=sort_key)\n\n    result = []\n    for person in people:\n        result.append(name_format(person[0], person[1], person[2], person[3]))\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"2\\nEmily Female 22 F\\nAlexander Male 25 M\") == \"Ms. Emily Female\\nMr. Alexander Male\"",
        "num_ids": 1176
    },
    {
        "number": 4674,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, n = map(int, stdin.split('\\n'))\n    coordinates = [[i, j, k] for i in range(x + 1) for j in range(y + 1) for k in range(z + 1)]\n    filtered_coordinates = [coord for coord in coordinates if sum(coord) != n]\n    return '\\n'.join([' '.join(map(str, coord)) for coord in sorted(filtered_coordinates)])",
        "test": "assert solution(\"2\\n2\\n2\\n6\\n\") == \"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\"",
        "num_ids": 2417
    },
    {
        "number": 4675,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    complex_nums = [complex(*map(float, line.split())) for line in stdin.split('\\n')]\n    c, d = complex_nums\n\n    addition = c + d\n    subtraction = c - d\n    multiplication = c * d\n    division = c / d if d != 0 else \"Error: Division by zero\"\n    mod_c = abs(c)\n    mod_d = abs(d)\n\n    def format_complex(num: complex) -> str:\n        real, imag = num.real, num.imag\n        sign = '-' if imag < 0 else '+'\n        return f\"{real:.2f}{sign}{abs(imag):.2f}i\"\n\n    return '\\n'.join([\n        format_complex(addition),\n        format_complex(subtraction),\n        format_complex(multiplication),\n        str(division),\n        f\"{mod_c:.2f}\",\n        f\"{mod_d:.2f}\"\n    ])",
        "test": "assert solution(\"0 0\\n0 0\") == \"0.00+0.00i\\n0.00+0.00i\\n0.00+0.00i\\n0.00+0.00i\\n0.00+0.00i\"",
        "num_ids": 1689
    },
    {
        "number": 4676,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    O, E = stdin.split('\\n')\n    password = ''\n    for i in range(max(len(O), len(E))):\n        if i < len(O):\n            password += O[i]\n        if i < len(E):\n            password += E[i]\n    return password",
        "test": "assert solution('xyz\\nabc') == 'xaybzc'",
        "num_ids": 421
    },
    {
        "number": 4677,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    editor = \"\"\n    for key in stdin:\n        if key == \"0\":\n            editor += \"0\"\n        elif key == \"1\":\n            editor += \"1\"\n        elif key == \"B\":\n            if editor:\n                editor = editor[:-1]\n    return editor\n\ns = input()\nprint(solution(s)) ",
        "test": "assert solution(\"01B11B1B\") == \"\"",
        "num_ids": 491
    },
    {
        "number": 4678,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, A = list(map(int, stdin.split()))\n    A.sort(reverse=True)\n    heights = [0] * N\n    total_height = 0\n    for i in range(N):\n        heights[i] = max(heights[i:]) + A[i]\n        total_height += heights[i]\n    return str(total_height)",
        "test": "assert solution(\"3\\n100 101 102\") == \"202\"",
        "num_ids": 614
    },
    {
        "number": 4679,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    S_A, S_B, S_C = stdin.split('\\n')\n    \n    def next_player(current, deck):\n        next_player = current\n        while True:\n            next_player = {'A': 'B', 'B': 'C', 'C': 'A'}[next_player]\n            if deck[next_player]:\n                return next_player\n    \n    def play_game(S_A, S_B, S_C):\n        decks = {'A': list(S_A), 'B': list(S_B), 'C': list(S_C)}\n        current_player = 'A'\n        while decks['A'] and decks['B'] and decks['C']:\n            if not decks[current_player]:\n                return current_player\n            card = decks[current_player].pop(0)\n            current_player = next_player(current_player, decks)\n        \n        for player in 'ABC':\n            if decks[player]:\n                return player\n    \n    return play_game(S_A, S_B, S_C)",
        "test": "assert solution(\"aca\\naccc\\nca\") == \"A\"",
        "num_ids": 967
    },
    {
        "number": 4680,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c == 17 and a % 2 == 1 and b % 2 == 1 and c % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution('10 0 1') == 'NO'",
        "num_ids": 363
    },
    {
        "number": 4681,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lucas_numbers = [2, 1]\n\n    for i in range(2, n + 1):\n        lucas_numbers.append(lucas_numbers[-1] + lucas_numbers[-2])\n\n    return str(lucas_numbers[n - 1])",
        "test": "assert solution(30) == 5358",
        "num_ids": 455
    },
    {
        "number": 4682,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    area = (a + b) * h // 2\n    return str(area)",
        "test": "assert solution(\"3\\n4\\n2\") == \"7\"",
        "num_ids": 376
    },
    {
        "number": 4683,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n    modulo = 10**9 + 7\n    result = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            result += A[i] * A[j]\n            result %= modulo\n\n    return str(result)",
        "test": "assert solution(\"3\\n1 2 3\") == \"11\"",
        "num_ids": 565
    },
    {
        "number": 4684,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    number = r * 100 + g * 10 + b\n    if number % 4 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"4 3 2\") == \"YES\"",
        "num_ids": 364
    },
    {
        "number": 4685,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n\n    max_sum = max(2 * A + B + C, 2 * B + A + C, 2 * C + A + B)\n\n    for _ in range(K - 1):\n        max_sum = max(2 * max_sum - A - B - C, max_sum)\n\n    return str(max_sum)",
        "test": "assert solution(\"5 3 11\\n1\") == \"30\"",
        "num_ids": 515
    },
    {
        "number": 4686,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    w = stdin\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    counter = {letter: 0 for letter in alphabet}\n    \n    for char in w:\n        counter[char] += 1\n        \n    for count in counter.values():\n        if count % 2 != 0:\n            return \"No\"\n            \n    return \"Yes\"",
        "test": "assert solution('abaccaba') == 'Yes'  # Sample Input 1",
        "num_ids": 584
    },
    {
        "number": 4687,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def find_kth_smallest(arr: list, k: int) -> int:\n        arr.sort()\n        return arr[k - 1]\n\n    lines = stdin.splitlines()\n    N, K = map(int, lines[0].split())\n    arr = []\n\n    for i in range(1, N + 1):\n        a, b = map(int, lines[i].split())\n        arr.extend([a] * b)\n\n    return str(find_kth_smallest(arr, K))",
        "test": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == \"3\"",
        "num_ids": 701
    },
    {
        "number": 4688,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    dp = [0] * (N + 1)\n    dp[1] = K\n    for i in range(2, N + 1):\n        dp[i] = dp[i - 1] * (K - 1) + dp[i - 1]\n    return str(dp[N] % (10**9 + 7))",
        "test": "assert solution(\"5 5\\n\") == \"65\\n\"",
        "num_ids": 501
    },
    {
        "number": 4689,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    K, N = map(int, stdin.split()[0:2])\n    A = list(map(int, stdin.split()[2:]))\n\n    # Calculate the distance from the last house to the first house\n    last_to_first = K - A[-1] + A[0]\n\n    # Calculate the minimum distance\n    min_distance = min(A[i] - A[i - 1] for i in range(1, N))\n\n    # Check if it's possible to travel all the houses in one direction\n    if min_distance > last_to_first:\n        min_distance = min(min_distance, sum(A) + last_to_first)\n\n    return str(min_distance)",
        "test": "assert solution(\"10 2\\n5 10\\n\") == \"5\"",
        "num_ids": 942
    },
    {
        "number": 4690,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    area1 = A * B\n    area2 = C * D\n    if area1 > area2:\n        return str(area1)\n    elif area2 > area1:\n        return str(area2)\n    else:\n        return str(area1)\n",
        "test": "assert solution(\"3 5 2 7\") == \"15\"",
        "num_ids": 526
    },
    {
        "number": 4691,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input by newline\n    input_data = stdin.split('\\n')\n\n    # Parse the input and initialize the counters\n    N = int(input_data[0])\n    AC_count = 0\n    WA_count = 0\n    TLE_count = 0\n    RE_count = 0\n\n    for i in range(1, N + 1):\n        verdict = input_data[i]\n        if verdict == \"AC\":\n            AC_count += 1\n        elif verdict == \"WA\":\n            WA_count += 1\n        elif verdict == \"TLE\":\n            TLE_count += 1\n        elif verdict == \"RE\":\n            RE_count += 1\n\n    # Format and print the output\n    output = f\"AC x {AC_count}\\nWA x {WA_count}\\nTLE x {TLE_count}\\nRE x {RE_count}\"\n    return output\n",
        "test": "assert solution(\"6\\nAC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"",
        "num_ids": 984
    },
    {
        "number": 4692,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    M = int(stdin)\n    hours_to_new_year = (24 - M) % 24\n    return hours_to_new_year\n\ndef",
        "test": "assert solution(\"0\") == \"24\"",
        "num_ids": 550
    },
    {
        "number": 4693,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a + b >= 10:\n        return \"error\"\n    else:\n        return str(a + b)",
        "test": "assert solution(\"6 3\") == \"9\"",
        "num_ids": 289
    },
    {
        "number": 4694,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, coordinates = int(stdin.split()[0]), list(map(int, stdin.split()[1:]))\n    coordinates.sort()\n    distance = 0\n    for i in range(1, N):\n        distance += abs(coordinates[i] - coordinates[i-1])\n    return str(distance)",
        "test": "assert solution(\"4\\n2 3 7 9\") == \"7\"",
        "num_ids": 510
    },
    {
        "number": 4695,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    group = {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 2, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3}\n\n    if group[x] == group[y]:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution('1 12') == 'No'",
        "num_ids": 467
    },
    {
        "number": 4696,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if (a * b) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "test": "assert solution(\"3 4\") == \"Even\"",
        "num_ids": 351
    },
    {
        "number": 4697,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return str(min(N, M))",
        "test": "assert solution('10000000000000 100000000000000') == '500000000000000'",
        "num_ids": 298
    },
    {
        "number": 4698,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    T = list(map(int, lines[1].split()))\n    M = int(lines[2])\n    P = []\n    X = []\n    for i in range(M):\n        P_i, X_i = list(map(int, lines[3+i].split()))\n        P.append(P_i)\n        X.append(X_i)\n\n    result = []\n    for i in range(M):\n        time_sum = sum([T[P_i-1] if P_i != i+1 else X[i] for P_i in range(1, N+1)])\n        result.append(time_sum)\n\n    return \"\\n\".join(list(map(str, result)))",
        "test": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"",
        "num_ids": 845
    },
    {
        "number": 4699,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N, K, *D = map(int, stdin.split())\n    D = set(D)\n    result = N\n    while any(str(d) in str(result) for d in D):\n        result += 1\n    return str(result)",
        "test": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"  # Testcase 1: 1000 -> 2000 ",
        "num_ids": 903
    },
    {
        "number": 4700,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_obs(obs: int) -> bool:\n        if not graph[obs]:  # No outgoing roads from this observatory\n            return True\n        max_elevation = 0\n        for dst in graph[obs]:\n            if dst == obs:  # Prevent self-loop\n                continue\n            if elevations[dst] > max_elevation:\n                max_elevation = elevations[dst]\n        return elevations[obs] > max_elevation\n\n    stdin_list = stdin.split('\\n')\n    N, M = map(int, stdin_list[0].split())\n    elevations = list(map(int, stdin_list[1].split()))\n    graph = [[] for _ in range(N)]\n    for i in range(2, M + 2):\n        A, B = map(int, stdin_list[i].split())\n        graph[A - 1].append(B - 1)\n        graph[B - 1].append(A - 1)\n\n    good_observatories = sum(is_good_obs(obs) for obs in range(N))\n    return str(good_observatories)\n\nsample_input = '4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4'\nprint(solution(sample_input))  # Output: 2 ",
        "test": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"",
        "num_ids": 1025
    },
    {
        "number": 4701,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N % 2 == 0:\n        return str(K * (N // 2))\n    else:\n        return str(2 * K * ((N - 1) // 2) + 1)",
        "test": "assert solution(\"10\\n5\") == \"25\"",
        "num_ids": 447
    },
    {
        "number": 4702,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0:\n        return str(1)\n    elif x == 1:\n        return str(0)\n    else:\n        raise ValueError(\"x should be an integer between 0 and 1\")",
        "test": "assert solution(\"0\") == \"1\"",
        "num_ids": 292
    },
    {
        "number": 4703,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    total_sum = 0\n\n    # Calculate the sum of the original expression\n    expression = \"\".join(s)\n    total_sum += eval(expression)\n\n    # Insert + between each pair of digits and evaluate the expression\n    for i in range(n - 1):\n        new_expression = s[:i+1] + ['+'] + s[i+1:]\n        total_sum += eval(\"\".join(new_expression))\n\n    return str(total_sum)",
        "test": "assert solution(\"5\") == 5",
        "num_ids": 522
    },
    {
        "number": 4704,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = sorted(list(map(int, a.split())))\n\n    snuke = []\n    raccoon = []\n\n    for i in range(n):\n        if i % 2 == 0:\n            snuke.append(a[i])\n        else:\n            raccoon.append(a[i])\n\n    x = sum(snuke)\n    y = sum(raccoon)\n\n    return str(abs(x - y))\n",
        "test": "assert solution(\"4\\n1 2 3 4\") == \"1\"",
        "num_ids": 737
    },
    {
        "number": 4705,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    total_meals = n + 2\n    total_price = total_meals * 800\n    rebate = (n // 15) * 200\n    return str(total_price - rebate)\n",
        "test": "assert solution(\"75\") == \"51800\"",
        "num_ids": 461
    },
    {
        "number": 4706,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    result = \"\"\n    for i in range(3):\n        result += lines[i][i]\n    return result",
        "test": "assert solution(\"ant\\nobe\\nrec\") == \"abc\"",
        "num_ids": 390
    },
    {
        "number": 4707,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = map(int, list(stdin))\n    count = 0\n    if s1 == 1:\n        count += 1\n    if s2 == 1:\n        count += 1\n    if s3 == 1:\n        count += 1\n    return str(count)",
        "test": "assert solution(\"111\") == 3",
        "num_ids": 315
    },
    {
        "number": 4708,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    N, K, X, Y = map(int, stdin.split())\n    total_fee = 0\n\n    for i in range(N):\n        if i < K:\n            total_fee += X\n        else:\n            total_fee += Y\n\n    return str(total_fee)",
        "test": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"",
        "num_ids": 487
    },
    {
        "number": 4709,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, op, B = stdin.split()\n    A = int(A)\n    B = int(B)\n\n    if op == '+':\n        result = A + B\n    else:\n        result = A - B\n\n    return str(result)\n",
        "test": "assert solution('1 + 2') == '3'",
        "num_ids": 444
    },
    {
        "number": 4710,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 1200:\n        return \"ABC\"\n    else:\n        return \"ARC\"",
        "test": "assert solution(\"1000\") == \"ABC\"",
        "num_ids": 284
    },
    {
        "number": 4711,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(min(a + b, a + c, b + c))",
        "test": "assert solution('700 600 780') == '1300'",
        "num_ids": 458
    },
    {
        "number": 4712,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    matrix = [list(stdin.readline().strip()) for _ in range(H)]\n    box = ['#' * (W + 2)]\n    for row in matrix:\n        box.append('#' + ''.join(row) + '#')\n    box.append('#' * (W + 2))\n    return '\\n'.join(box)",
        "test": "assert solution(\"1 100\\n\" + \"a\" * 100) == \"#\" * 102 + \"\\n\" + \"#\" + \"a\" * 99 + \"#\\n\" + \"#\" * 102",
        "num_ids": 804
    },
    {
        "number": 4713,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(str, stdin.split())\n    x = 0\n    max_x = 0\n    \n    for i in range(int(N)):\n        if S[i] == 'I':\n            x += 1\n        else:\n            x -= 1\n        max_x = max(max_x, x)\n    \n    return str(max_x)\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "assert solution(7, 'IIIDDII') == 3",
        "num_ids": 485
    },
    {
        "number": 4714,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    count = 0\n\n    for num in range(A, B + 1):\n        str_num = str(num)\n        if str_num == str_num[::-1]:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"11009 11332\") == \"4\"",
        "num_ids": 517
    },
    {
        "number": 4715,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    colors = set([a, b, c])\n    return len(colors)",
        "test": "assert solution(\"3 1 4\") == 3",
        "num_ids": 275
    },
    {
        "number": 4716,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    lengths = sorted(list(map(int, stdin.split()[2:])), reverse=True)\n\n    max_length = sum(lengths[:K])\n\n    return str(max_length)",
        "test": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\" ",
        "num_ids": 618
    },
    {
        "number": 4717,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    distance_a = abs(x - a)\n    distance_b = abs(x - b)\n    if distance_a < distance_b:\n        return \"A\"\n    else:\n        return \"B\"",
        "test": "assert solution(\"5 2 7\") == \"B\"",
        "num_ids": 444
    },
    {
        "number": 4718,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.split('/')\n    date[0] = '2018'\n    return '/'.join(date)",
        "test": "assert solution(\"2017/01/07\") == \"2018/01/07\"",
        "num_ids": 532
    },
    {
        "number": 4719,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    S = [stdin.readline().strip() for _ in range(n)]\n    letters = set(''.join(S))\n    result = ''\n\n    for letter in sorted(letters):\n        count = min(s.count(letter) for s in S)\n        result += letter * count\n\n    return result",
        "test": "assert solution(\"5\\nhello\\nworld\\npython\\nprogramming\\nlanguage\") == \"nalpog\"",
        "num_ids": 740
    },
    {
        "number": 4720,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.strip().split()))\n    n = stdin[0]\n    seats = set()\n    for i in range(1, len(stdin), 2):\n        for j in range(stdin[i], stdin[i+1] + 1):\n            seats.add(j)\n    return str(len(seats))",
        "test": "assert solution(\"1\\n24 30\") == \"7\"",
        "num_ids": 726
    },
    {
        "number": 4721,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str((n - 1) * (m - 1))",
        "test": "assert solution(\"3 4\") == \"6\"",
        "num_ids": 275
    },
    {
        "number": 4722,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return \"Possible\"\n    if A % 3 == 0 and B % 3 == 0:\n        return \"Possible\"\n    if A % 2 == 0 and B % 2 == 0 and (A // 2) + (B // 2) >= 6:\n        return \"Possible\"\n    if A % 3 != 0 and B % 3 != 0 and (A % 3) + (B % 3) == 3:\n        return \"Possible\"\n    if A % 2 == 0 and B % 2 == 0 and A // 2 + B // 2 >= 6:\n        return \"Possible\"\n    return \"Impossible\"",
        "test": "assert solution(\"4 5\") == \"Possible\"",
        "num_ids": 657
    },
    {
        "number": 4723,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s = s.replace('?', '{}')\n    t = t.replace('?', '{}')\n\n    if t not in s:\n        return 'UNRESTORABLE'\n\n    for i in range(26):\n        new_s = s.format(*[chr(c) for c in range(ord('a'), ord('z') + 1) if chr(c) != t[i]])\n        if new_s < s:\n            s = new_s\n\n    return s\n\nstdin = '''\n?tc????\ncoder\n'''\nprint(solution(stdin.strip())) # Output: atcoder ",
        "test": "assert solution(\"????????\\ncoder\") == \"UNRESTORABLE\"",
        "num_ids": 751
    },
    {
        "number": 4724,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    R, G = map(int, stdin.strip().split())\n    return f\"{round((R + G) / 2)}\"",
        "test": "assert solution(\"4500\\n4500\\n\") == \"4500\"",
        "num_ids": 470
    },
    {
        "number": 4725,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    distinct_letters = set(stdin)\n    simplicity = len(distinct_letters)\n    \n    if simplicity <= 2:\n        return 0\n    \n    min_erase = simplicity - 2\n    \n    for char in distinct_letters:\n        if stdin.count(char) > 1:\n            min_erase -= 1\n            break\n    \n    return min_erase",
        "test": "assert solution(\"string\") == 4",
        "num_ids": 350
    },
    {
        "number": 4726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    m, n, t = map(int, stdin.split())\n    \n    time_complexity = [1, 2, 4, 8, 16, 32, 64]\n    if t > 7 or t < 1:\n        return \"Invalid Input\"\n    \n    if n ** time_complexity[t - 1] <= m:\n        return \"AC\"\n    else:\n        return \"TLE\"",
        "test": "assert solution(100000000, 10000, 5) == \"AC\"",
        "num_ids": 847
    },
    {
        "number": 4727,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def move(board: list, direction: int) -> tuple:\n        if direction == 0: # left\n            for i in range(4):\n                board[i] = move_left(board[i])\n        elif direction == 1: # up\n            for i in range(4):\n                board[i] = move_up(board[i])\n        elif direction == 2: # right\n            for i in range(4):\n                board[i] = move_right(board[i])\n        elif direction == 3: # down\n            for i in range(4):\n                board[i] = move_down(board[i])\n        return board\n\n    def move_left(row: list) -> list:\n        row = [num for num in row if num != 0]\n        for i in range(len(row) - 1):\n            if row[i] == row[i + 1]:\n                row[i] *= 2\n                row[i + 1] = 0\n        row = [num for num in row if num != 0]\n        row += [0] * (4 - len(row))\n        return row\n\n    def move_up(row: list) -> list:\n        return move_left([row[i] for i in [0, 1, 2, 3]])\n\n    def move_right(row: list) -> list:\n        return move_left(row[::-1])[::-1]\n\n    def move_down(row: list) -> list:\n        return move_up(row[::-1])[::-1]\n\n    def print_board(board: list) -> str:\n        output = ''\n        for row in board:\n            output += ' '.join(map(str, row)) + '\\n'\n        return output.strip()\n\n    lines = stdin.strip().split('\\n')\n    board = [[int(num) for num in line.split()] for line in lines[:-1]]\n    direction = int(lines[-1])\n\n    board = move(board, direction)\n    return print_board(board)",
        "test": "assert solution(\"\"\"",
        "num_ids": 1629
    },
    {
        "number": 4728,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def parse_molecule(molecule: str):\n        n = len(molecule)\n        i = 0\n        atoms = {}\n        while i < n:\n            if molecule[i].isupper():\n                atom = molecule[i]\n                i += 1\n                if i < n and molecule[i].isdigit():\n                    count = int(molecule[i])\n                    i += 1\n                else:\n                    count = 1\n                if atom in atoms:\n                    atoms[atom] += count\n                else:\n                    atoms[atom] = count\n            else:\n                i += 1\n        return atoms\n\n    input_line, output_line = stdin.split('\\n')\n    input_molecule, input_count = input_line.split(' ')\n    input_count = int(input_count)\n    input_atoms = parse_molecule(input_molecule)\n    output_atoms = parse_molecule(output_line)\n\n    output_count = min(input_count, 1000 // input_atoms.get('C', 0))\n    for atom, count in output_atoms.items():\n        if atom not in input_atoms or input_atoms[atom] < count * output_count:\n            output_count = 0\n            break\n\n    return str(output_count) ",
        "test": "assert solution(\"CH3OH 1\\nCH4\") == \"1\"",
        "num_ids": 1454
    },
    {
        "number": 4729,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    password, message = stdin.split()\n    i = 0\n    for p in password:\n        found = message.find(p, i)\n        if found == -1 or found != i:\n            return \"FAIL\"\n        i = found + 1\n    return \"PASS\"",
        "test": "assert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"",
        "num_ids": 603
    },
    {
        "number": 4730,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    opening_delimiters = {'(': ')', '[': ']', '{': '}'}\n    closing_delimiters = {')': '(', ']': '[', '}': '{'}\n    stack = []\n\n    for i, char in enumerate(stdin):\n        if char in opening_delimiters:\n            stack.append(char)\n        elif char in closing_delimiters:\n            if not stack or stack[-1] != closing_delimiters[char]:\n                return f\"{char} {i}\"\n            stack.pop()\n\n    return 'ok so far'",
        "test": "assert solution(\"27\\n[ { [[()]] (({})) } ] () {}\") == \"ok so far\"",
        "num_ids": 785
    },
    {
        "number": 4731,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    words = lines[1:]\n    last_letters = [words[i][-1] for i in range(N) if i % 2 == 0]\n    for i in range(1, N):\n        if i % 2 == 0:\n            if words[i][0] != words[i - 1][-1]:\n                return f\"Player {i // 2 + 1} lost\"\n        else:\n            if words[i] in words[:i] or words[i][0] != last_letters[i // 2]:\n                return f\"Player {i // 2 + 2} lost\"\n    return \"Fair Game\"",
        "test": "assert solution(\"2\\napple\\nneat\\n\") == \"Player 2 lost\"",
        "num_ids": 823
    },
    {
        "number": 4732,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a, op, b = stdin.split('\\n')\n    a = int(a)\n    b = int(b)\n    if op == '+':\n        result = a + b\n    elif op == '*':\n        result = a * b\n    else:\n        raise ValueError(\"Invalid operation\")\n    return str(result)",
        "test": "assert solution(\"1000\\n*\\n100\") == \"100000\"",
        "num_ids": 439
    },
    {
        "number": 4733,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, shuffle_type = map(str.strip, stdin.split())\n    n = int(n)\n    if shuffle_type == \"out\":\n        if n % 2 == 0:\n            return str((n // 2) - 1)\n        else:\n            return str((n // 2) - 2)\n    elif shuffle_type == \"in\":\n        if n % 2 == 0:\n            return str(n // 2)\n        else:\n            return str((n // 2) + 1)",
        "test": "assert solution(\"8 out\") == \"3\"",
        "num_ids": 625
    },
    {
        "number": 4734,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    y, p = stdin.split()\n\n    if y.endswith('ex'):\n        return y + p\n    elif y.endswith(('a', 'i', 'o', 'u')):\n        return y[:-1] + 'ex' + p\n    elif y.endswith('e'):\n        return y + 'x' + p\n    else:\n        return y + 'ex' + p",
        "test": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"",
        "num_ids": 539
    },
    {
        "number": 4735,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    y = int(stdin.strip())\n    if y % 2 == 0:\n        if (y - 2018) % 26 == 0:\n            return \"yes\"\n        else:\n            return \"no\"\n    else:\n        if (y - 2017) % 26 == 0:\n            return \"yes\"\n        else:\n            return \"no\"",
        "test": "assert solution(\"2019\") == \"no\"",
        "num_ids": 324
    },
    {
        "number": 4736,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, K = map(int, stdin.split())\n    if K == 1:\n        return \"1\"\n\n    dp = [1] * (K + 1)\n    for i in range(1, K + 1):\n        dp[i] = (dp[i - 1] * i) % 1000000007\n\n    ans = 1\n    for i in range(1, K):\n        ans = (ans * dp[i]) % 1000000007\n\n    return str(ans)",
        "test": "assert solution(\"10 10 10 20 0 10 10 10 10 10\\n4\") == \"1820000\" ",
        "num_ids": 761
    },
    {
        "number": 4737,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def get_solution(estimates, penalty_time):\n        total_time = 0\n        num_ac = 0\n        for estimate in estimates:\n            if total_time + estimate <= penalty_time:\n                total_time += estimate\n                num_ac += 1\n            else:\n                break\n        return num_ac, total_time\n\n    params = list(map(int, stdin.split()))\n    n, p = params[0], params[1]\n    estimates = params[2:]\n    penalty_time = 300\n\n    num_ac, total_time = get_solution(estimates[p:] + estimates[:p], penalty_time)\n\n    if num_ac == 0:\n        return \"0 0\"\n    else:\n        return f\"{num_ac} {total_time}\" ",
        "test": "assert solution(\"7 2\\n30 270 995 996 997 998 999\\n\") == \"0 0\" ",
        "num_ids": 1197
    },
    {
        "number": 4738,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    for k in range(1, n + 1):\n        if n % k != 0:\n            continue\n        period = stdin[:k]\n        for i in range(k, n, k):\n            if stdin[i:i + k] != period:\n                break\n        else:\n            return k\n    return -1",
        "test": "assert solution('aaaaaaaa') == 1",
        "num_ids": 475
    },
    {
        "number": 4739,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    M, N = map(int, lines[0].split())\n    T = list(map(int, lines[1].split()))\n    X = list(map(int, lines[2].split()))\n\n    if M == 0:\n        return \"0\\n\"\n\n    speeds = set()\n    distances = []\n\n    for i in range(M - 1):\n        d = X[i + 1] - X[i]\n        t = T[i + 1] - T[i]\n        speed = d / t\n        speeds.add(speed)\n        distances.append(d)\n\n    return f\"{len(speeds)}\\n{' '.join(map(str, sorted(set(distances))))}\\n\"",
        "test": "assert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n\") == \"1\\n1\\n\"",
        "num_ids": 1130
    },
    {
        "number": 4740,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    prefix = number // 1000\n    if prefix == 555:\n        return \"1\"\n    else:\n        return \"0\"",
        "test": "assert solution(\"5519876\") == \"0\"",
        "num_ids": 328
    },
    {
        "number": 4741,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    fahrenheit_str = stdin.split()[0]\n    fahrenheit = float(fahrenheit_str)\n    celsius = (fahrenheit - 32) * 5/9\n    numerator, denominator = celsius.as_integer_ratio()\n    numerator = int(numerator)\n    denominator = int(denominator)\n    gcd = math.gcd(numerator, denominator)\n    numerator //= gcd\n    denominator //= gcd\n    result = f\"{numerator}/{denominator}\"\n    return result",
        "test": "assert solution(\"-40/1\") == \"-40/1\"",
        "num_ids": 524
    },
    {
        "number": 4742,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    length = int(lines[0])\n    melody1 = lines[1].split()\n    melody2 = lines[2].split()\n\n    # Check if the second melody is a transposition of the first\n    for i in range(1, 12):\n        if melody2 == [NOTES[(NOTES.index(note) + i) % 12] for note in melody1]:\n            return \"Transposition\"\n\n    # Check if the second melody is the first melody reversed\n    if melody2 == melody1[::-1]:\n        return \"Retrograde\"\n\n    # Check if the second melody is an inversion of the first\n    if melody2[0] == melody1[0]:\n        for i in range(1, length):\n            if abs(NOTES.index(melody2[i]) - NOTES.index(melody1[i])) != length - i:\n                break\n        else:\n            return \"Inversion\"\n\n    return \"Nonsense\"\n\nNOTES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']",
        "test": "assert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"",
        "num_ids": 1221
    },
    {
        "number": 4743,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    vowels = \"aeiou\"\n    words = stdin.split()\n    for i, word in enumerate(words):\n        new_word = \"\"\n        for j, char in enumerate(word):\n            if j == 0:\n                if char in \"aeiou\":\n                    new_word += \"g\"\n                else:\n                    new_word += char\n            elif char == \"-\":\n                continue\n            elif char in \"aeiou\":\n                new_word += char\n            elif char in \"ptk\":\n                new_word += char.replace(char, \"p\")\n            elif char in \"dg\":\n                new_word += char.replace(char, \"b\")\n            elif char in \"nb\":\n                new_word += char.replace(char, \"m\")\n            else:\n                new_word += char\n        if new_word[-1] in \"ptkdg\":\n            new_word += \"uh\" if new_word[-1] in \"ptk\" else \"oh\"\n        words[i] = new_word\n    return \" \".join(words)",
        "test": "assert solution(\"Dach\") == \"Dach\"",
        "num_ids": 1292
    },
    {
        "number": 4744,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    V = int(stdin.strip())\n    V_root = int(V ** (1 / 2))\n\n    if V_root ** 2 == V:\n        return str(4 * V_root ** 2)\n    else:\n        return str(4 * (V_root + 1) ** 2)",
        "test": "assert solution(3) == 14",
        "num_ids": 345
    },
    {
        "number": 4745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, X = map(int, stdin.readline().split())\n    prices = list(map(int, stdin.readline().split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if prices[i] + prices[j] > X:\n                count += 1\n\n    return str(count // 2)\n",
        "test": "assert solution(\"4 10\\n1 3 1 7\\n\") == \"4\"",
        "num_ids": 537
    },
    {
        "number": 4746,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    C, n = map(int, stdin.split('\\n')[0].split())\n    data = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    \n    # Check if the input is consistent\n    current_passengers = 0\n    for i in range(n):\n        left, entered, waited = data[i]\n        current_passengers += entered - left\n        \n        if current_passengers > C:\n            return \"impossible\"\n        \n        if i == n - 1 and current_passengers != 0:\n            return \"impossible\"\n    \n    return \"possible\"",
        "test": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"",
        "num_ids": 679
    },
    {
        "number": 4747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    def expected_score(n, k):\n        if k == 0:\n            return 0\n        expected = 0\n        for i in range(1, n+1):\n            if k == 1:\n                expected += i/n\n            else:\n                expected += (i/n) * expected_score(n, k-1)\n        return expected\n    \n    return f\"{expected_score(n, k):.7f}\"",
        "test": "assert solution(\"6 2\") == \"4.25\"",
        "num_ids": 513
    },
    {
        "number": 4748,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    H, N, M = map(int, stdin.split())\n    extra_2x2 = 0\n    extra_4x2 = 0\n    for k in range(1, H + 1):\n        if k == 1:\n            if N >= 1:\n                N -= 1\n            else:\n                extra_2x2 += 1\n        else:\n            if M >= k:\n                M -= k\n            else:\n                diff = k - M\n                if N >= 2 * diff:\n                    N -= 2 * diff\n                else:\n                    extra_2x2 += 2 * diff - N\n                    N = 0\n                extra_4x2 += diff\n    return f\"{extra_2x2} {extra_4x2}\"",
        "test": "assert solution(\"1 1 0\") == \"0 0\"",
        "num_ids": 694
    },
    {
        "number": 4749,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    grid = [list(row) for row in stdin.split('\\n')[1:]]\n    for i in range(n):\n        if len(grid[i]) != n:\n            return '0'\n        for j in range(n):\n            if grid[i][j] not in ['B', 'W']:\n                return '0'\n    for i in range(n):\n        black_count = 0\n        white_count = 0\n        for j in range(n):\n            if grid[i][j] == 'B':\n                black_count += 1\n            else:\n                white_count += 1\n            if black_count == 3 or white_count == 3:\n                return '0'\n            if j == n - 1 and (black_count != white_count):\n                return '0'\n    for i in range(n):\n        black_count = 0\n        white_count = 0\n        for j in range(n):\n            if grid[j][i] == 'B':\n                black_count += 1\n            else:\n                white_count += 1\n            if black_count == 3 or white_count == 3:\n                return '0'\n            if j == n - 1 and (black_count != white_count):\n                return '0'\n    return '1'",
        "test": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == \"1\"",
        "num_ids": 1453
    },
    {
        "number": 4750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_points(l1, r1, l2, r2):\n        if l1 == r1:\n            return l1, l2\n        elif l2 == r2:\n            return l1, l2\n        else:\n            return l1, r2\n\n    queries = [list(map(int, line.split())) for line in stdin.split('\\n') if line]\n    q = queries[0][0]\n    queries = queries[1:]\n\n    output = []\n    for l1, r1, l2, r2 in queries:\n        a, b = find_points(l1, r1, l2, r2)\n        output.append(str(a))\n        output.append(str(b))\n\n    return '\\n'.join(output)",
        "test": "assert solution(\"5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\" ",
        "num_ids": 886
    },
    {
        "number": 4751,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    input_list = list(map(int, stdin.strip().split()))\n    head = input_list[:-1]\n    pos = input_list[-1]\n\n    # Create a linked list\n    class ListNode:\n        def __init__(self, val=0, next=None):\n            self.val = val\n            self.next = next\n\n    dummy = ListNode(0)\n    curr = dummy\n    for val in head:\n        curr.next = ListNode(val)\n        curr = curr.next\n\n    # Check for cycle\n    has_cycle = False\n    slow = dummy.next\n    fast = dummy.next\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            has_cycle = True\n            break\n\n    # If cycle exists, check if pos is part of the cycle\n    if has_cycle:\n        cycle_start = slow\n        while True:\n            if cycle_start == fast:\n                break\n            cycle_start = cycle_start.next\n            fast = fast.next\n        if pos == -1:\n            return \"true\"\n        curr = dummy.next\n        for _ in range(pos):\n            curr = curr.next\n        if curr in cycle_start:\n            return \"true\"\n        else:\n            return \"false\"\n    else:\n        return \"false\"",
        "test": "assert solution(\"1\") == \"false\"",
        "num_ids": 960
    },
    {
        "number": 4752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    nums, target = map(int, stdin.split())\n    nums = list(map(int, input().split()))\n    indices = []\n    for i in range(len(nums)):\n        if target - nums[i] in nums[i+1:]:\n            indices.append(i)\n            indices.append(nums[i+1:].index(target - nums[i]) + i + 1)\n            break\n    return \" \".join(map(str, indices)) ",
        "test": "assert solution([2, 7, 11, 15], 13) == [0, 2]",
        "num_ids": 648
    },
    {
        "number": 4753,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 3:\n        return \"0\"\n    elif n == 3:\n        return \"0\"\n    elif n == 4:\n        return \"1\"\n    else:\n        return str((n - 3) * (n - 4) // 2)",
        "test": "assert solution(\"3\") == \"0\"",
        "num_ids": 300
    },
    {
        "number": 4754,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    socks = list(map(int, stdin.split('\\n')[1].split()))\n\n    pairs = {}\n    for sock in socks:\n        if sock in pairs:\n            pairs[sock] += 1\n        else:\n            pairs[sock] = 1\n\n    moves = 0\n    while pairs:\n        sock_type, count = pairs.popitem()\n        if count % 2 == 1:\n            return \"impossible\"\n        moves += count // 2\n\n    return str(moves)",
        "test": "assert solution(\"1\\n3 7\") == \"impossible\"",
        "num_ids": 598
    },
    {
        "number": 4755,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Get the price and the smallest bill's exponent from input\n    price, smallest_bill_exponent = map(int, stdin.split())\n\n    # Calculate the smallest bill's value\n    smallest_bill_value = 10 ** smallest_bill_exponent\n\n    # Round the price to the nearest smallest bill's value\n    rounded_price = smallest_bill_value * round(price / smallest_bill_value)\n\n    # Return the rounded price as output\n    return str(rounded_price)",
        "test": "assert solution(\"184 1\") == \"180\"",
        "num_ids": 511
    },
    {
        "number": 4756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def distance(point, line_slope):\n        return abs((line_slope[1] - point[1]) / (line_slope[0] - point[0]))\n\n    def total_unusefulness(points, line_slope):\n        total = 0\n        for point in points:\n            total += distance(point, line_slope) ** 2\n        return total\n\n    def minimize_unusefulness(points):\n        points = [(x, y) for x, y in points]\n        min_a = -10**6\n        max_a = 10**6\n        best_a = None\n        best_unusefulness = float('inf')\n\n        while max_a - min_a > 1e-3:\n            mid_a = (min_a + max_a) / 2\n            line_slope = (1, mid_a)\n            unusefulness = total_unusefulness(points, line_slope)\n\n            if unusefulness < best_unusefulness:\n                best_unusefulness = unusefulness\n                best_a = mid_a\n\n            if total_unusefulness(points, (1, mid_a + 1e-3)) < unusefulness:\n                min_a = mid_a\n            else:\n                max_a = mid_a\n\n        return best_a\n\n    stdin_list = stdin.split('\\n')\n    N = int(stdin_list[0])\n    points = [(int(x), int(y)) for x, y in [line.split() for line in stdin_list[1:N + 1]]]\n    a = minimize_unusefulness(points)\n    return '{:.6f}'.format(a)",
        "test": "assert solution(\"3\\n0 1\\n1 0\\n1 1\") == \"0.000000\"",
        "num_ids": 1169
    },
    {
        "number": 4757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def read_input() -> tuple:\n        N = int(stdin.readline().strip())\n        E = int(stdin.readline().strip())\n        evenings = []\n        for i in range(E):\n            evening = list(map(int, stdin.readline().strip().split()))\n            K = evening[0]\n            evening = evening[1:]\n            evenings.append(evening)\n        return N, E, evenings\n\n    def find_villagers_who_know_all_songs(N: int, E: int, evenings: list) -> list:\n        villagers = {i: set() for i in range(1, N + 1)}\n        bard = 1\n        songs = set()\n        for evening in evenings:\n            if bard in evening:\n                new_song = len(songs) + 1\n                songs.add(new_song)\n                villagers[bard].add(new_song)\n            else:\n                for villager in evening:\n                    villagers[villager].update(songs)\n        return [villager for villager, s in villagers.items() if s == songs]\n\n    N, E, evenings = read_input()\n    villagers_who_know_all_songs = find_villagers_who_know_all_songs(N, E, evenings)\n    return '\\n'.join(map(str, sorted(villagers_who_know_all_songs))) + '\\n' ",
        "test": "assert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\\n\") == \"1\\n2\\n6\\n8\\n\" ",
        "num_ids": 1470
    },
    {
        "number": 4758,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, t, m = map(int, stdin.split())\n    return str(n * t * m)",
        "test": "assert solution(\"3 4 5\") == \"60\"",
        "num_ids": 277
    },
    {
        "number": 4759,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    at_bats = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    official_at_bats = [at_bat for at_bat in at_bats if at_bat != -1]\n    total_bases = sum(official_at_bats)\n    total_at_bats = len(official_at_bats)\n\n    slugging_percentage = total_bases / total_at_bats\n\n    return f\"{slugging_percentage:.3f}\"",
        "test": "assert solution(\"3\\n1 -1 4\\n\") == \"2.5\"",
        "num_ids": 585
    },
    {
        "number": 4760,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    \n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n    \n    crossed_out = [i for i in range(2, n + 1) if primes[i]]\n    \n    return str(crossed_out[k - 1])",
        "test": "assert solution(\"10 1\") == \"2\"",
        "num_ids": 633
    },
    {
        "number": 4761,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    L, H = map(int, stdin.split())\n    count = 0\n\n    for i in range(L, H + 1):\n        digits = set(str(i))\n        if len(digits) == 6 and all(i % int(d) == 0 for d in digits if d != '0'):\n            count += 1\n\n    return str(count)",
        "test": "assert solution('123864 123865') == '1'",
        "num_ids": 462
    },
    {
        "number": 4762,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    prob = 1 / N\n    total_prob = 0\n    for i in range(1, N):\n        total_prob += prob * (1 - (i - 1) / N)\n    return f\"{1 - total_prob:.6f}\"",
        "test": "assert solution(\"3\") == \"0.66666667\"",
        "num_ids": 370
    },
    {
        "number": 4763,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    target = int(stdin.strip())\n    \n    if target < 1 or target > 180:\n        return \"impossible\"\n    \n    triple_20 = 60\n    if target >= triple_20:\n        return \"triple 20\\n\" * (target // triple_20)\n    \n    double_15 = 30\n    if target >= double_15:\n        return \"triple 19\\ndouble 15\\n\"\n    \n    single_9 = 9\n    if target >= single_9:\n        return \"triple 19\\nsingle 9\\n\"\n    \n    return \"impossible\"",
        "test": "assert solution(\"190\") == \"impossible\"",
        "num_ids": 960
    },
    {
        "number": 4764,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, h, v = map(int, stdin.split())\n\n    # Calculate the area of each piece\n    piece1 = (n - h) * (n - v)\n    piece2 = (h) * (n - v)\n    piece3 = (n - h) * (v)\n    piece4 = (h) * (v)\n\n    # Find the largest piece\n    largest_piece = max(piece1, piece2, piece3, piece4)\n\n    # Calculate the volume of the largest piece\n    volume = largest_piece * 4\n\n    return str(volume)",
        "test": "assert solution(\"10 4 7\") == \"168\"",
        "num_ids": 640
    },
    {
        "number": 4765,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    ingredients = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    sourness = 1\n    bitterness = 0\n    for s, b in ingredients:\n        sourness *= s\n        bitterness += b\n    return str(abs(sourness - bitterness))",
        "test": "assert solution(\"1\\n3 10\") == \"7\"",
        "num_ids": 702
    },
    {
        "number": 4766,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    commands = stdin.split('\\n')\n    output = []\n\n    for command in commands[1:]:\n        if command.startswith(\"Simon says \"):\n            output.append(command[11:])\n\n    return '\\n'.join(output)",
        "test": "assert solution(\"3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n\") == \" raise your right hand.\\n raise your left hand.\"",
        "num_ids": 409
    },
    {
        "number": 4767,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def get_next_value(value, prime):\n        return (value + 1) % prime\n\n    def get_next_register(register, prime):\n        if register == prime - 1:\n            return 0\n        return register + 1\n\n    def count_safe_operations(registers):\n        safe_operations = 0\n        for _ in range(19):\n            if registers[0] == 1:\n                registers[0] = 0\n                registers[1] = get_next_register(registers[1], 3)\n                if registers[1] == 0:\n                    registers[2] = get_next_register(registers[2], 5)\n                    if registers[2] == 0:\n                        registers[3] = get_next_register(registers[3], 7)\n                        if registers[3] == 0:\n                            registers[4] = get_next_register(registers[4], 11)\n                            if registers[4] == 0:\n                                registers[5] = get_next_register(registers[5], 13)\n                                if registers[5] == 0:\n                                    registers[6] = get_next_register(registers[6], 17)\n                                    if registers[6] == 0:\n                                        registers[7] = get_next_register(registers[7], 19)\n                                        if registers[7] == 0:\n                                            return safe_operations + 1\n                                        else:\n                                            safe_operations += 1\n                                    else:\n                                        safe_operations += 1\n                                else:\n                                    safe_operations += 1\n                            else:\n                                safe_operations += 1\n                        else:\n                            safe_operations += 1\n                    else:\n                        safe_operations += 1\n                else:\n                    safe_operations += 1\n            else:\n                registers[0] = get_next_register(registers[0], 2)\n                safe_operations += 1\n        return safe_operations\n\n    registers = list(map(int, stdin.strip().split()))\n    return str(count_safe_operations(registers))",
        "test": "assert solution(\"0 0 0 0 0 0 0 0\") == \"19\"",
        "num_ids": 1159
    },
    {
        "number": 4768,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def get_unlikeliness(s1, s2):\n        return sum([1 for c1, c2 in zip(s1, s2) if c1 != c2])\n\n    def get_minimal_unlikeliness(dna_samples):\n        minimal_unlikeliness = float('inf')\n        optimal_tree = []\n        for i in range(len(dna_samples)):\n            for j in range(i + 1, len(dna_samples)):\n                unlikeliness = get_unlikeliness(dna_samples[i], dna_samples[j])\n                if unlikeliness < minimal_unlikeliness:\n                    minimal_unlikeliness = unlikeliness\n                    optimal_tree = [(i, j)]\n                elif unlikeliness == minimal_unlikeliness:\n                    optimal_tree.append((i, j))\n        return minimal_unlikeliness, optimal_tree\n\n    lines = stdin.strip().split('\\n')\n    n, k = map(int, lines[0].split())\n    dna_samples = lines[1:]\n\n    minimal_unlikeliness, optimal_tree = get_minimal_unlikeliness(dna_samples)\n    output = [str(minimal_unlikeliness)]\n    for edge in optimal_tree:\n        output.append('{} {}'.format(edge[0], edge[1]))\n    return '\\n'.join(output)",
        "test": "assert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\\n0 1\\n0 2\\n0 3\"",
        "num_ids": 1543
    },
    {
        "number": 4769,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import permutations\n\n    def is_anagram(s1: str, s2: str) -> bool:\n        return sorted(s1) == sorted(s2)\n\n    def find_shortest_root(word: str) -> str:\n        min_len = float('inf')\n        shortest_root = ''\n        for i in range(1, len(word) + 1):\n            if len(word) % i == 0:\n                root = word[:i]\n                if all(any(is_anagram(root, perm) for perm in permutations(word[j:j + i])) for j in range(0, len(word), i)):\n                    if i < min_len:\n                        min_len = i\n                        shortest_root = root\n        return shortest_root\n\n    word = stdin.strip()\n    if any(is_anagram(word, perm) for perm in permutations(word)):\n        return '-1'\n    else:\n        return find_shortest_root(word)",
        "test": "assert solution(\"ab\") == \"-1\"",
        "num_ids": 735
    },
    {
        "number": 4770,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    leftovers = M - N\n    if leftovers >= 0:\n        return f\"Dr. Chaz will have {leftovers} piece{'s' if leftovers > 1 else ''} of chicken left over!\"\n    else:\n        return f\"Dr. Chaz needs {abs(leftovers)} more piece{'s' if abs(leftovers) > 1 else ''} of chicken!\" ",
        "test": "assert solution(\"20 100\\n\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"",
        "num_ids": 576
    },
    {
        "number": 4771,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, volume = map(int, lines[0].split())\n    volumes = []\n    for i in range(1, n + 1):\n        l, w, h = map(int, lines[i].split())\n        volumes.append(l * w * h)\n    largest_volume = max(volumes)\n    difference = largest_volume - volume\n    return str(difference)",
        "test": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"-2\"",
        "num_ids": 709
    },
    {
        "number": 4772,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split()[:2])\n    crossword = [list(line) for line in stdin.split('\\n')[1:]]\n    words = set()\n\n    # Find words in rows\n    for row in crossword:\n        word = ''\n        for col in row:\n            if col != '#':\n                word += col\n            else:\n                if len(word) >= 2:\n                    words.add(word)\n                word = ''\n        if len(word) >= 2:\n            words.add(word)\n\n    # Find words in columns\n    for col_index in range(C):\n        word = ''\n        for row_index in range(R):\n            col = crossword[row_index][col_index]\n            if col != '#':\n                word += col\n            else:\n                if len(word) >= 2:\n                    words.add(word)\n                word = ''\n        if len(word) >= 2:\n            words.add(word)\n\n    return min(words)",
        "test": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"",
        "num_ids": 1262
    },
    {
        "number": 4773,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    def encode_macro(s: str) -> str:\n        macro = s[0]\n        count = 1\n        encoded = \"\"\n        for i in range(1, len(s)):\n            if s[i] == s[i - 1]:\n                count += 1\n            else:\n                encoded += f\"{count}{macro}\" if count > 1 else macro\n                macro = s[i]\n                count = 1\n        encoded += f\"{count}{macro}\" if count > 1 else macro\n        return encoded\n\n    def find_macro(s: str) -> str:\n        for i in range(len(s) - 1, 0, -1):\n            if s[:i] in s[i:]:\n                return s[:i], s[i:]\n        return \"\", s\n\n    def min_encoding(s: str) -> int:\n        macro, encoded = find_macro(s)\n        if not macro:\n            return len(s)\n        macro_encoded = encode_macro(macro)\n        return min_encoding(encoded.replace(macro, macro_encoded)) + len(macro_encoded)\n\n    return min_encoding(stdin)",
        "test": "assert solution(\"NSEW\") == 4",
        "num_ids": 796
    },
    {
        "number": 4774,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    valid_expressions = []\n    operators = ['*', '+', '-', '/']\n\n    for op1 in operators:\n        for op2 in operators:\n            if op2 == '/' and d == 0:\n                continue\n            expression = f\"{a} {op1} {b} = {c} {op2} {d}\"\n            if eval(expression):\n                valid_expressions.append(expression)\n\n    if not valid_expressions:\n        return \"problems ahead\"\n\n    return \"\\n\".join(sorted(valid_expressions))\n",
        "test": "assert solution(\"1 1 1 1\") == \"problems ahead\\n\"",
        "num_ids": 1076
    },
    {
        "number": 4775,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    N, M = len(A), len(B)\n    first_letter = None\n    for letter in A:\n        if letter in B:\n            first_letter = letter\n            break\n    A_index = B_index = None\n    for i in range(N):\n        if A[i] == first_letter:\n            A_index = i\n            break\n    for i in range(M):\n        if B[i] == first_letter:\n            B_index = i\n            break\n    output = []\n    for i in range(M):\n        row = [\".\"] * N\n        if i == B_index:\n            for j in range(N):\n                if j == A_index:\n                    row[j] = first_letter\n        output.append(row)\n    output.append(list(A))\n    for i in range(M):\n        row = [\".\"] * N\n        if i == B_index:\n            for j in range(N):\n                if j == A_index:\n                    row[j] = first_letter\n        output.append(row)\n    output_str = \"\"\n    for row in output:\n        output_str += \"\".join(row) + \"\\n\"\n    return output_str[:-1]",
        "test": "assert solution('MAMA TATA') == '.T..\\nMAMA\\n.T..\\n.A..' ",
        "num_ids": 881
    },
    {
        "number": 4776,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    days = set()\n    for i in range(1, N + 1):\n        s, t = map(int, stdin.split('\\n')[i].split())\n        for j in range(s, t + 1):\n            days.add(j)\n    return str(len(days))",
        "test": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"",
        "num_ids": 502
    },
    {
        "number": 4777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    A_count = 0\n    B_count = 1\n\n    for _ in range(K):\n        A_count, B_count = B_count, A_count + B_count\n\n    return f\"{A_count} {B_count}\"",
        "test": "assert solution(\"10\") == \"8 13\\n\"",
        "num_ids": 410
    },
    {
        "number": 4778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def efficiency_gap(V: int, w_A: int, w_B: int) -> float:\n        return abs(w_A - w_B) / V\n\n    def find_winners(districts: dict) -> dict:\n        winners = {}\n        for district, votes in districts.items():\n            A_votes = sum([precinct[1] for precinct in votes])\n            B_votes = sum([precinct[2] for precinct in votes])\n            A_wasted_votes = max(0, A_votes - (B_votes + 1) // 2)\n            B_wasted_votes = max(0, B_votes - (A_votes + 1) // 2)\n            if A_votes > B_votes:\n                winners[district] = ('A', A_wasted_votes, B_wasted_votes)\n            else:\n                winners[district] = ('B', B_wasted_votes, A_wasted_votes)\n        return winners\n\n    def main(stdin: str) -> str:\n        lines = stdin.split('\\n')\n        P, D = map(int, lines[0].split())\n        districts = {i: [] for i in range(1, D + 1)}\n\n        for i in range(1, P + 1):\n            district, A_votes, B_votes = map(int, lines[i].split())\n            districts[district].append((i, A_votes, B_votes))\n\n        winners = find_winners(districts)\n        efficiency_gap_sum = 0\n\n        for district, (winner, A_wasted_votes, B_wasted_votes) in winners.items():\n            print(winner, A_wasted_votes, B_wasted_votes)\n            efficiency_gap_sum += efficiency_gap(len(districts[district]), A_wasted_votes, B_wasted_votes)\n\n        efficiency_gap_value = efficiency_gap_sum / D\n        return f\"{efficiency_gap_value:.6f}\"\n\n    return main(stdin) ",
        "test": "assert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\" ",
        "num_ids": 2189
    },
    {
        "number": 4779,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1:]))\n\n    a.sort(reverse=True)\n    left_sum = sum(a[0:n-1])\n    right_sum = sum(a[n-1:])\n    max_value = left_sum * right_sum\n\n    for i in range(n-1):\n        left_sum -= a[i]\n        right_sum -= a[n-2+i]\n        max_value = max(max_value, left_sum * right_sum)\n\n    return str(max_value)",
        "test": "assert solution(\"2\\n1\\n1\") == \"1\"",
        "num_ids": 830
    },
    {
        "number": 4780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    N1, N2, T = map(int, stdin.split('\\n')[:-2])\n    row1 = stdin.split('\\n')[1]\n    row2 = stdin.split('\\n')[2]\n\n    for t in range(T):\n        new_row1 = \"\"\n        new_row2 = \"\"\n        for i in range(N1):\n            if i == 0:\n                new_row1 += row1[i]\n            else:\n                if row1[i] < row2[N2 - i]:\n                    new_row1 += row1[i]\n                else:\n                    new_row1 += row2[N2 - i]\n        for i in range(N2):\n            if i == 0:\n                new_row2 += row2[i]\n            else:\n                if row2[i] > new_row1[N1 - i]:\n                    new_row2 += row2[i]\n                else:\n                    new_row2 += new_row1[N1 - i]\n        row1 = new_row1\n        row2 = new_row2\n\n    return row1 + row2",
        "test": "assert solution(\"3 3\\nABC\\nDEF\\n2\\n\") == \"CDBEAF\"",
        "num_ids": 983
    },
    {
        "number": 4781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def find_player_with_box(players, start_player, question_number):\n        current_player = start_player\n        for i in range(question_number):\n            current_player = players[current_player]\n        return current_player\n\n    def get_next_player(players, current_player):\n        return players[current_player]\n\n    def update_players(players, start_player):\n        current_player = start_player\n        for i in range(len(players)):\n            players[current_player] = get_next_player(players, current_player)\n            current_player = players[current_player]\n\n    lines = stdin.split('\\n')\n    start_player = int(lines[0])\n    num_questions = int(lines[1])\n    players = {i + 1: (i + 2) % 8 for i in range(7)}\n    players[8] = start_player\n    current_player = start_player\n\n    for i in range(2, 2 + num_questions):\n        time, answer = lines[i].split()\n        time = int(time)\n        if answer == 'T' or answer == 'N':\n            current_player = get_next_player(players, current_player)\n\n    final_player = find_player_with_box(players, start_player, num_questions)\n    update_players(players, final_player)\n    return str(players[start_player])",
        "test": "assert solution(\"\"\"1",
        "num_ids": 860
    },
    {
        "number": 4782,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(m*(m-1))",
        "test": "assert solution(\"4 3\") == \"6\"",
        "num_ids": 263
    },
    {
        "number": 4783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.readline().split())\n    vault = [list(map(int, stdin.readline().split())) for _ in range(M)]\n    min_len = float('inf')\n    for i in range(M):\n        for j in range(N):\n            if vault[i][j] == vault[-1][-1]:\n                min_len = min(min_len, vault[i][j] + max(i, M - 1 - i) + max(j, N - 1 - j))\n    return str(min_len)",
        "test": "assert solution(\"1 4\\n4 3 2 1\") == 0",
        "num_ids": 886
    },
    {
        "number": 4784,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n    X, N = input_data[0], input_data[1]\n    P = input_data[2:]\n    spent_megabytes = sum(P)\n    remaining_megabytes = X - spent_megabytes\n    for i in range(N - 1):\n        remaining_megabytes += P[i]\n        if remaining_megabytes > X:\n            remaining_megabytes = X\n    return str(remaining_megabytes)",
        "test": "assert solution(\"10\\n1\\n0\\n\") == \"10\"",
        "num_ids": 1073
    },
    {
        "number": 4785,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    if 'ss' in stdin:\n        return 'hiss'\n    else:\n        return 'no hiss'",
        "test": "assert solution(\"amiss\") == \"hiss\"",
        "num_ids": 246
    },
    {
        "number": 4786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    keywords = [stdin.readline().strip() for _ in range(n)]\n\n    def normalize(keyword: str) -> str:\n        return keyword.replace('-', ' ').lower()\n\n    def is_similar(k1: str, k2: str) -> bool:\n        return normalize(k1) == normalize(k2)\n\n    unique_keywords = set(keywords)\n    for k1 in keywords:\n        for k2 in keywords:\n            if k1 != k2 and is_similar(k1, k2):\n                unique_keywords.discard(k1)\n                unique_keywords.discard(k2)\n                unique_keywords.add(k1)\n\n    return str(len(unique_keywords))",
        "test": "assert solution(\"5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux\") == \"5\"",
        "num_ids": 659
    },
    {
        "number": 4787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    points = 0\n    cards = {'T': 0, 'C': 0, 'G': 0}\n    \n    for card in stdin:\n        cards[card] += 1\n        \n    for card in cards:\n        points += cards[card] ** 2\n        \n    triplets = len(stdin) // 3\n    points += triplets * 7\n    \n    return str(points)",
        "test": "assert solution(\"GGG\") == 9",
        "num_ids": 606
    },
    {
        "number": 4788,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = map(int, stdin.split())\n    diff = n2 - n1\n    if diff < -180:\n        diff += 360\n    elif diff > 180:\n        diff -= 360\n    return str(diff)",
        "test": "assert solution(\"315\\n45\") == \"90\"",
        "num_ids": 479
    },
    {
        "number": 4789,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    k, *desk_numbers = map(int, stdin.split())\n    desk_numbers.sort()\n    passes = 0\n    current_desk = 1\n    for desk in desk_numbers:\n        passes += desk - current_desk\n        current_desk = desk + 1\n    return str(passes)",
        "test": "assert solution(\"5\\n11\\n20\\n33\\n40\\n55\\n\") == \"1\"",
        "num_ids": 502
    },
    {
        "number": 4790,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    # count the number of black and white stones\n    black_count = stdin.count('B')\n    white_count = stdin.count('W')\n\n    # check if it's possible to balance the stones\n    if abs(black_count - white_count) > 2:\n        return \"0\"\n    else:\n        return \"1\"",
        "test": "assert solution(\"WWBWBB\") == \"1\"",
        "num_ids": 2671
    },
    {
        "number": 4791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3, s4 = map(int, stdin.split())\n\n    def heron_area(a, b, c):\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    area1 = heron_area(s1, s2, s3)\n    area2 = heron_area(s1, s2, s4)\n    area3 = heron_area(s1, s3, s4)\n    area4 = heron_area(s2, s3, s4)\n\n    max_area = max(area1, area2, area3, area4)\n\n    return f\"{max_area:.10f}\"",
        "test": "assert solution(\"1 2 1 1\") == \"1.299038\"",
        "num_ids": 680
    },
    {
        "number": 4792,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    name = list(stdin)\n    i = 0\n    while i < len(name) - 1:\n        if name[i] == name[i + 1]:\n            j = i + 1\n            while j < len(name) and name[j] == name[i]:\n                j += 1\n            name = name[:i + 1] + name[j:]\n        else:\n            i += 1\n    return ''.join(name)",
        "test": "assert solution(\"robert\") == \"robert\"",
        "num_ids": 491
    },
    {
        "number": 4793,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s, v1, v2 = map(int, stdin.split())\n    \n    # Check if the conditions can be met\n    if s % (v1 - v2) != 0:\n        return \"Impossible\"\n    \n    # Calculate the number of bottles of each type\n    num_b1 = s // (v1 - v2)\n    num_b2 = s // v2\n    \n    return f\"{num_b1} {num_b2}\"",
        "test": "assert solution('1000 900 7') == 'Impossible'",
        "num_ids": 653
    },
    {
        "number": 4794,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split()[:2])\n    parking_map = [list(line) for line in stdin.split('\\n')[1:]]\n\n    def is_valid(row, col):\n        for i in range(row, row + 2):\n            for j in range(col, col + 2):\n                if parking_map[i][j] == '#':\n                    return False\n        return True\n\n    def count_squashable_cars(row, col):\n        count = 0\n        for i in range(row, row + 2):\n            for j in range(col, col + 2):\n                if parking_map[i][j] == 'X':\n                    count += 1\n        return count\n\n    parking_spaces = [0, 0, 0, 0, 0]\n\n    for row in range(R - 1):\n        for col in range(C - 1):\n            if is_valid(row, col):\n                num_squashed = count_squashable_cars(row, col)\n                parking_spaces[num_squashed] += 1\n\n    return '\\n'.join(map(str, parking_spaces))",
        "test": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"",
        "num_ids": 1061
    },
    {
        "number": 4795,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    X = 0\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    for i in range(1, N + 1):\n        P_i = int(lines[i])\n        number = P_i // 100\n        pow_i = P_i % 10\n        X += number ** pow_i\n    return str(X)",
        "test": "assert solution(\"5\\n23\\n17\\n43\\n52\\n22\") == \"102\"",
        "num_ids": 540
    },
    {
        "number": 4796,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, I, J, K = map(int, stdin.split())\n\n    cocktail_ratio = I + J + K\n    orange_ratio = I\n    apple_ratio = J\n    pineapple_ratio = K\n\n    cocktail_quantity = min(A / orange_ratio, B / apple_ratio, C / pineapple_ratio)\n\n    leftover_orange = A - (cocktail_quantity * orange_ratio)\n    leftover_apple = B - (cocktail_quantity * apple_ratio)\n    leftover_pineapple = C - (cocktail_quantity * pineapple_ratio)\n\n    return \"{:.6f} {:.6f} {:.6f}\".format(leftover_orange, leftover_apple, leftover_pineapple)",
        "test": "assert solution('9 9 9\\n3 2 1') == '0.000000 3.000000 6.000000'",
        "num_ids": 902
    },
    {
        "number": 4797,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for char in stdin:\n        if char == '<':\n            if stack:\n                stack.pop()\n        else:\n            stack.append(char)\n    return ''.join(stack)",
        "test": "assert solution(\"a<bc<\") == \"b\"",
        "num_ids": 390
    },
    {
        "number": 4798,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    names = stdin.split(\"-\")\n    short_names = [name[0] for name in names]\n    return \"\".join(short_names)",
        "test": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"",
        "num_ids": 384
    },
    {
        "number": 4799,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    G, S, C = map(int, stdin.split())\n    total_buying_power = G * 3 + S * 2 + C\n\n    # Calculate the best treasure card\n    if total_buying_power >= 6:\n        best_treasure = \"Gold\"\n    elif total_buying_power >= 3:\n        best_treasure = \"Silver\"\n    else:\n        best_treasure = \"Copper\"\n\n    # Calculate the best victory card\n    if total_buying_power >= 8:\n        best_victory = \"Province\"\n    elif total_buying_power >= 5:\n        best_victory = \"Duchy\"\n    elif total_buying_power >= 2:\n        best_victory = \"Estate\"\n    else:\n        best_victory = \"None\"\n\n    # Combine the output\n    if best_victory == \"None\":\n        output = best_treasure\n    else:\n        output = best_victory + \" or \" + best_treasure\n\n    return output",
        "test": "assert solution(\"0 1 0\") == \"Estate or Copper\"",
        "num_ids": 1181
    },
    {
        "number": 4800,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    d, s = map(int, stdin.split()[2:4])\n\n    if k == 0:\n        return \"impossible\"\n\n    # Calculate the total difficulty of the solved problems\n    total_difficulty = k * s\n\n    # Calculate the remaining number of problems\n    remaining_problems = n - k\n\n    # Calculate the remaining difficulty\n    remaining_difficulty = (d * total_difficulty + remaining_problems * d) / n\n\n    return \"{:.6f}\".format(remaining_difficulty)",
        "test": "assert solution(\"1000000 0\\n0 0\\n\") == \"impossible\"",
        "num_ids": 767
    },
    {
        "number": 4801,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.split('\\n')[0])\n    A = [int(x) for x in stdin.split('\\n')[1].split()]\n    \n    # Compute GIS\n    gis = [A[0]]\n    for i in range(1, N):\n        if A[i] > gis[-1]:\n            gis.append(A[i])\n    \n    # Output result\n    output = f\"{len(gis)}\\n\"\n    output += \" \".join([str(x) for x in gis])\n    \n    return output",
        "test": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"",
        "num_ids": 639
    },
    {
        "number": 4802,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    m -= 45\n    if m < 0:\n        m += 60\n        h -= 1\n    if h < 0:\n        h += 24\n    return f\"{h} {m}\"",
        "test": "assert solution('10 10') == '9 25'",
        "num_ids": 422
    },
    {
        "number": 4803,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    def tetration(a, n):\n        if n == 1:\n            return a\n        else:\n            return tetration(a, n - 1) ** a\n\n    def iterative_tetration(a, n):\n        result = a\n        for _ in range(n - 1):\n            result = result ** a\n        return result\n\n    N = float(stdin)\n    e = 2.718281\n    a = (N / e) ** (1 / e)\n\n    if N < e:\n        a = iterative_tetration(a, e)\n\n    return str(round(a, 6))\n",
        "test": "assert solution(1.000000) == \"1.000000\"",
        "num_ids": 656
    },
    {
        "number": 4804,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin.strip())\n    output = []\n\n    for i in range(2, S + 1):\n        if S % i == 0:\n            j = S // i\n            if (i % 2 == 1 and j % 2 == 1) or (i % 2 == 0 and j % 2 == 0):\n                output.append(f\"{i},{j}\")\n\n    return f\"{S}:\\n\" + \"\\n\".join(output) + \"\\n\"",
        "test": "assert solution(\"50\") == \"50:\\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\" ",
        "num_ids": 1651
    },
    {
        "number": 4805,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    word_set = set(words)\n    \n    if len(word_set) == len(words):\n        return \"yes\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"",
        "num_ids": 338
    },
    {
        "number": 4806,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    mech_moves = []\n    combo_move = None\n    for i, move in enumerate(stdin):\n        if combo_move is None:\n            if move == 'R':\n                mech_moves.append('S')\n            elif move == 'B':\n                mech_moves.append('K')\n            elif move == 'L':\n                mech_moves.append('H')\n        else:\n            if move == 'R':\n                combo_move += 'S'\n            elif move == 'B':\n                combo_move += 'K'\n            elif move == 'L':\n                combo_move += 'H'\n        \n        if i > 1 and stdin[i-2:i+1] in ['RBL', 'RLB', 'LBR', 'LBR', 'BRL']:\n            combo_move = 'C'\n        elif combo_move is not None and len(combo_move) == 3:\n            mech_moves.append(combo_move)\n            combo_move = None\n    \n    if combo_move is not None:\n        mech_moves.append(combo_move)\n    \n    return ''.join(mech_moves)",
        "test": "assert solution(\"R\") == \"S\"",
        "num_ids": 820
    },
    {
        "number": 4807,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, N = map(int, stdin.split())\n    result = []\n    for i in range(1, N+1):\n        if i % X == 0 and i % Y == 0:\n            result.append(\"FizzBuzz\")\n        elif i % X == 0:\n            result.append(\"Fizz\")\n        elif i % Y == 0:\n            result.append(\"Buzz\")\n        else:\n            result.append(str(i))\n    return \"\\n\".join(result)",
        "test": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\", \"Testcase failed\" ",
        "num_ids": 793
    },
    {
        "number": 4808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n, d_m = map(int, stdin.split('\\n')[0].split())\n    d = list(map(int, stdin.split('\\n')[1].split()))\n\n    max_gap = float('inf')\n    max_k = 0\n\n    for k in range(1, n + 1):\n        if d[n - k] > d_m and d[n - k] - d_m < max_gap:\n            max_gap = d[n - k] - d_m\n            max_k = k\n\n    if max_k == 0:\n        return \"It had never snowed this early!\"\n    else:\n        return f\"It hadn't snowed this early in {max_k} years!\"",
        "test": "assert solution(\"5 1\\n1 1 1 1 1\\n\") == \"It hadn't snowed this early in 4 years!\"",
        "num_ids": 732
    },
    {
        "number": 4809,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    s, n = map(int, stdin.split())\n    players = [i for i in range(1, n+1)]\n    turn = 1\n    while len(players) > 1:\n        total_touches = 0\n        for i in range(s):\n            if total_touches >= len(players):\n                total_touches = 1\n            current_player = players[turn-1]\n            if current_player in players:\n                if i == s-1:\n                    players.remove(current_player)\n                else:\n                    turn += total_touches\n                    if turn > len(players):\n                        turn = 1\n        turn += 1\n        if turn > len(players):\n            turn = 1\n    return str(players[0])",
        "test": "assert solution(\"10 2\") == \"2\"",
        "num_ids": 547
    },
    {
        "number": 4810,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    message = stdin\n    n = len(message)\n    r = 1\n    c = n\n    while r * c != n:\n        if r * c < n:\n            if n % r == 0:\n                c = n // r\n            else:\n                r += 1\n        else:\n            c -= 1\n    matrix = [[''] * c for _ in range(r)]\n    for i in range(r):\n        for j in range(c):\n            matrix[i][j] = message[i + j * r]\n    decrypted_message = ''.join([matrix[j][i] for i in range(c) for j in range(r)])\n    return decrypted_message",
        "test": "assert solution(\"bok\") == \"bok\"",
        "num_ids": 794
    },
    {
        "number": 4811,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    bar_size = 1\n    breaks = 0\n\n    while bar_size < k:\n        bar_size *= 2\n        breaks += 1\n\n    extra_squares = bar_size - k\n    min_breaks = breaks\n\n    for i in range(1, k):\n        current_breaks = breaks + (i // bar_size)\n        current_extra_squares = bar_size - k - i\n\n        if current_extra_squares >= 0 and current_extra_squares < extra_squares:\n            min_breaks = current_breaks\n            extra_squares = current_extra_squares\n\n    return f\"{bar_size} {min_breaks}\"",
        "test": "assert solution(\"7\") == \"8 3\"",
        "num_ids": 482
    },
    {
        "number": 4812,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def check_rhyme(common_word, endings_lists, phrase):\n        for endings in endings_lists:\n            for ending in endings:\n                if common_word.endswith(ending):\n                    for word in phrase.split():\n                        if word.endswith(ending):\n                            return True\n        return False\n\n    input_list = stdin.split('\\n')\n    common_word = input_list[0]\n    endings_list_count = int(input_list[1])\n    endings_lists = [input_list[2 + i].split() for i in range(endings_list_count)]\n    phrase_count = int(input_list[2 + endings_list_count])\n    phrases = input_list[3 + endings_list_count:]\n\n    result = []\n    for phrase in phrases:\n        if check_rhyme(common_word, endings_lists, phrase):\n            result.append('YES')\n        else:\n            result.append('NO')\n\n    return '\\n'.join(result)",
        "test": "assert solution(\"drought\\n2\\naucht ought aut acht\\nought oubt outte out oute\\n5\\ntasty sprout\\ndifficult route\\nworried and fraught\\nforever in doubt\\napples and pears\") == \"YES\\nYES\\nYES\\nYES\\nNO\"",
        "num_ids": 1211
    },
    {
        "number": 4813,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    word, alphabet = stdin.split('\\n')\n    letters = set(word)\n    dashes = ['-'] * len(word)\n    guessed = set()\n    components = 0\n\n    for letter in alphabet:\n        if components >= 10:\n            break\n        if letter in letters and letter not in guessed:\n            guessed.add(letter)\n            for i in range(len(word)):\n                if word[i] == letter:\n                    dashes[i] = letter\n            if dashes == list(word):\n                return \"WIN\"\n        else:\n            components += 1\n\n    return \"LOSE\"",
        "test": "assert solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"LOSE\"",
        "num_ids": 791
    },
    {
        "number": 4814,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    names = sorted(stdin.split('\\n')[1:])\n    \n    if names == sorted(stdin.split('\\n')[1:], reverse=True):\n        return \"DECREASING\"\n    elif names == sorted(stdin.split('\\n')[1:]):\n        return \"INCREASING\"\n    else:\n        return \"NEITHER\"\n    \n    # Read input\n    N = int(input())\n    names = []\n    for i in range(N):\n        name = input()\n        names.append(name)\n    \n    # Check if list is in increasing or decreasing order\n    if names == sorted(names):\n        print(\"INCREASING\")\n    elif names == sorted(names, reverse=True):\n        print(\"DECREASING\")\n    else:\n        print(\"NEITHER\") ",
        "test": "assert solution(\"10\\nAPPLE\\nBANANA\\nCHERRY\\nDATE\\nELDERBERRY\\nFIG\\nGRAPE\\nHIWI\\nICEBERRY\") == \"INCREASING\"",
        "num_ids": 955
    },
    {
        "number": 4815,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    def find_winner(scores: dict, minimum_score: int) -> str:\n        winners = []\n        for player, points in scores.items():\n            if points >= minimum_score:\n                winners.append(player)\n        return winners\n\n    def output_winners(winners: list) -> str:\n        output = \"\"\n        for winner in winners:\n            output += f\"{winner} wins!\\n\"\n        return output.strip()\n\n    lines = stdin.split(\"\\n\")\n    n, p, m = map(int, lines[0].split())\n    participants = lines[1:n + 1]\n    scores = {player: 0 for player in participants}\n\n    for i in range(n + 1, n + 1 + m):\n        player, points = lines[i].split()\n        scores[player] += int(points)\n\n    winners = find_winner(scores, p)\n    if not winners:\n        return \"No winner!\"\n    else:\n        return output_winners(winners)",
        "test": "assert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 3\\nBob 2\\nNina 3\\nBob 2\\nJess 3\") == \"Nina wins!\\nJess wins!\\n\"",
        "num_ids": 1071
    },
    {
        "number": 4816,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    x, y, x1, y1, x2, y2 = map(int, stdin.split())\n    # Calculate the equation of the line passing through the fence post and perpendicular to the house\n    m = (x2 - x1) / (y2 - y1)\n    b = (x1 * y2 - x2 * y1) / (y2 - y1)\n    # Calculate the distance between the fence post and the line\n    d = abs(b - y) / (1 + m ** 2) ** 0.5\n    # Calculate the minimum distance from the fence post to the house\n    min_dist = (d ** 2 + (x1 - x) ** 2 + (y1 - y) ** 2) ** 0.5\n    # Return the result rounded to 3 decimal places\n    return f\"{min_dist:.3f}\"",
        "test": "assert solution(\"6 0 0 2 7 6\") == \"2.0\"",
        "num_ids": 945
    },
    {
        "number": 4817,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    x_str = str(x)\n    digits = sorted(set(x_str))\n    min_num = None\n\n    for i in range(len(digits)):\n        for j in range(i + 1, len(digits)):\n            for k in range(len(digits)):\n                if k == i or k == j:\n                    continue\n                num = digits[i] + digits[j] + digits[k]\n                if num > x_str and (min_num is None or num < min_num):\n                    min_num = num\n\n    return min_num if min_num else \"0\"",
        "test": "assert solution(\"999\") == \"0\"",
        "num_ids": 800
    },
    {
        "number": 4818,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    tasks = sorted(map(int, stdin.split('\\n')[1].split()))\n    intervals = sorted(map(int, stdin.split('\\n')[2].split()))\n\n    i = 0\n    count = 0\n    for interval in intervals:\n        while i < n and tasks[i] <= interval:\n            i += 1\n            count += 1\n        if i == n:\n            break\n        i += 1\n\n    return str(count)",
        "test": "assert solution(\"4 4\\n180000 185000 199999 100000\\n19999 180000 170000 120000\") == \"3\"",
        "num_ids": 876
    },
    {
        "number": 4819,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(x) % 42 for x in stdin.split('\\n')]\n    distinct_numbers = set(numbers)\n    return str(len(distinct_numbers))",
        "test": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"",
        "num_ids": 329
    },
    {
        "number": 4820,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, b = list(map(int, stdin.split()))\n\n    if N == 1:\n        return \"yes\"\n\n    bits_per_file = 1000\n    total_bits = N * bits_per_file\n\n    if b >= total_bits // N:\n        return \"yes\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"100000000000000 199\") == \"no\"",
        "num_ids": 431
    },
    {
        "number": 4821,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    cards = [0] * 4  # Number of cards missing for each suit\n    card_set = set()\n\n    for i in range(0, len(stdin), 3):\n        suit = stdin[i]\n        number = int(stdin[i + 1:i + 3])\n\n        if (suit, number) in card_set:\n            return \"GRESKA\"\n\n        card_set.add((suit, number))\n        if suit == \"P\":\n            cards[0] += 1\n        elif suit == \"K\":\n            cards[1] += 1\n        elif suit == \"H\":\n            cards[2] += 1\n        elif suit == \"T\":\n            cards[3] += 1\n\n    total_cards = sum(cards)\n    if total_cards == 52:\n        return \"0 0 0 0\"\n    else:\n        missing_cards = [13 - c for c in cards]\n        return \" \".join(str(c) for c in missing_cards) ",
        "test": "assert solution(\"H02H10P11H02\") == \"GRESKA\"",
        "num_ids": 980
    },
    {
        "number": 4822,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R, S, K = map(int, stdin.split()[0].split())\n    picture = [list(line.strip()) for line in stdin.split('\\n')[1:R + 1]]\n    max_flies = 0\n    best_shot = None\n\n    for i in range(R - K + 1):\n        for j in range(S - K + 1):\n            racket = ['+' + '-' * (K - 1) + '+']\n            for k in range(K):\n                row = '|' + ''.join(['*' if picture[i + k][j + l] == '*' else '.' for l in range(K)]) + '|'\n                racket.append(row)\n            racket.append('+' + '-' * (K - 1) + '+')\n\n            flies_killed = sum([row.count('*') for row in racket[1:-1]])\n            if flies_killed > max_flies:\n                max_flies = flies_killed\n                best_shot = racket\n\n    output = [str(max_flies)] + best_shot\n    return '\\n'.join(output)",
        "test": "assert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == \"2\\n......\\n.*.*.*\\n+--+..\\n|*.|..\\n|.*|..\\n+--+..\\n*....*\"",
        "num_ids": 1602
    },
    {
        "number": 4823,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    cards = stdin.split()\n    ranks = [card[0] for card in cards]\n    max_rank = max(ranks, key=ranks.count)\n    return str(ranks.count(max_rank))",
        "test": "assert solution(\"AC AD AH AS KD\") == \"4\"",
        "num_ids": 616
    },
    {
        "number": 4824,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    C, P = map(int, stdin.split('\\n')[0].split())\n    heights = list(map(int, stdin.split('\\n')[1].split()))\n    # Initializing the pieces\n    pieces = {\n        1: [\n            [0, 0, 1, 0],\n            [0, 0, 1, 0],\n            [0, 0, 1, 0],\n            [0, 0, 1, 0]\n        ],\n        2: [\n            [0, 1, 1],\n            [1, 1, 0],\n            [0, 0, 1]\n        ],\n        3: [\n            [1, 1, 1, 0],\n            [0, 0, 1, 1]\n        ],\n        4: [\n            [0, 1, 1],\n            [1, 1, 0],\n            [1, 0, 0]\n        ],\n        5: [\n            [0, 1, 1, 0],\n            [1, 1, 0, 0],\n            [0, 0, 1, 1]\n        ],\n        6: [\n            [0, 1, 1, 0],\n            [1, 1, 1, 0],\n            [0, 0, 1, 1]\n        ],\n        7: [\n            [0, 1, 1],\n            [1, 1, 1],\n            [0, 1, 0]\n        ]\n    }\n    # Initialize the result variable\n    result = 0\n    # Loop through all possible rotations\n    for rotation in pieces[P]:\n        # Calculate the width of the piece\n        width = len(rotation)\n        # Loop through all possible positions\n        for i in range(C - width + 1):\n            # Check if the piece fits in the current position\n            if all(heights[i + j] + rotation[j] <= C for j in range(width)):\n                result += 1\n    return str(result)",
        "test": "assert solution(\"5 1\\n0 0 0 0 0\") == \"7\"",
        "num_ids": 2236
    },
    {
        "number": 4825,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = {\n        'a': '@', 'b': '8', 'c': '(', 'd': '|)', 'e': '3', 'f': '#', 'g': '6', 'h': '(,)',\n        'i': '|', 'j': '_|', 'k': '|<', 'l': '1', 'm': '[]\\\\/[]', 'n': '[]\\\\[]',\n        'o': '0', 'p': '|D', 'q': '(,)', 'r': '|Z', 's': '$', 't': '[]][',\n        'u': '|_|', 'v': '\\\\/', 'w': '\\\\/\\\\/', 'x': '}{', 'y': '_|', 'z': '2'\n    }\n    \n    output = ''\n    for char in stdin:\n        if char.lower() in alphabet:\n            output += alphabet[char.lower()]\n        else:\n            output += char\n            \n    return output",
        "test": "assert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"",
        "num_ids": 1109
    },
    {
        "number": 4826,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N % 2 == 0:\n        return \"Bob\"\n    else:\n        return \"Alice\"",
        "test": "assert solution(\"1\") == \"Alice\"",
        "num_ids": 251
    },
    {
        "number": 4827,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    num_words = int(stdin.readline().strip())\n    words = [stdin.readline().strip() for _ in range(num_words)]\n\n    def name_number(num: int) -> str:\n        ones = [\"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n        tens = [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]\n        teens = [\"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]\n\n        if 1 <= num < 10:\n            return ones[num]\n        elif 10 <= num < 20:\n            return teens[num % 10]\n        elif 20 <= num < 100:\n            return tens[num // 10] + (ones[num % 10] if num % 10 != 0 else \"\")\n        elif 100 <= num < 1000:\n            return ones[num // 100] + \"hundred\" + ((\"and\" + name_number(num % 100)) if num % 100 != 0 else \"\")\n\n    for i, word in enumerate(words):\n        if \"$\" in word:\n            num = sum(len(w) for w in words[:i] + words[i + 1:]) + 1\n            number_words = name_number(num)\n            words[i] = words[i].replace(\"$\", number_words)\n            break\n\n    return \" \".join(words)",
        "test": "assert solution(",
        "num_ids": 2187
    },
    {
        "number": 4828,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    instructions = [i for i in stdin]\n    nops = 0\n    \n    for i in range(len(instructions)):\n        if instructions[i].islower():\n            continue\n        if i % 4 != 0:\n            nops += (i % 4)\n            instructions.insert(i, 'NOP')\n            nops += 1\n            \n    return str(nops)",
        "test": "assert solution(\"AbbbBcccCddddeeefffgggNOP\") == 1",
        "num_ids": 491
    },
    {
        "number": 4829,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    left, right = map(int, stdin.split())\n    \n    if left == 0 and right == 0:\n        return \"Not a moose\"\n    \n    points = max(left, right) * 2\n    if left == right:\n        return f\"Even {points}\"\n    else:\n        return f\"Odd {points}\"",
        "test": "assert solution(\"3 3\") == \"Even 6\"",
        "num_ids": 451
    },
    {
        "number": 4830,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    N = int(input_list[0])\n    words = input_list[1:N + 1]\n    S = input_list[N + 1]\n\n    def get_key(char):\n        for i in range(1, 10):\n            if char in keyboard[str(i)]:\n                return str(i)\n        return \"0\"\n\n    keyboard = {\n        \"1\": \"\",\n        \"2\": \"abc\",\n        \"3\": \"def\",\n        \"4\": \"ghi\",\n        \"5\": \"jkl\",\n        \"6\": \"mno\",\n        \"7\": \"pqrs\",\n        \"8\": \"tuv\",\n        \"9\": \"wxyz\"\n    }\n\n    def check_word(word):\n        for char in word:\n            if get_key(char) == \"0\":\n                return False\n        return True\n\n    count = 0\n    for word in words:\n        if check_word(word):\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"2\\nja\\nla\\n52\") == \"2\"",
        "num_ids": 943
    },
    {
        "number": 4831,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    peter_pan_frame = \"..#..\\n.#.#.\\n#.X.#\\n.#.#.\\n..#..\"\n    wendy_frame = \"..*..\\n.*.*.\\n*.X.*\\n.*.*.\\n..*..\"\n    output = \"\"\n\n    for i in range(len(stdin)):\n        if i % 3 == 0:\n            output += peter_pan_frame.replace(\"X\", stdin[i])\n        else:\n            output += wendy_frame.replace(\"X\", stdin[i])\n\n    return output\n",
        "test": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"",
        "num_ids": 1897
    },
    {
        "number": 4832,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n\n    # Calculate the area of a circle in normal (Euclidian) geometry\n    euclidian_area = 3.14159 * R ** 2\n\n    # Calculate the area of a circle in taxicab geometry\n    taxicab_area = 2 * (R ** 2 - (R - 1) ** 2)\n\n    return f\"{euclidian_area:.6f}\\n{taxicab_area:.6f}\"",
        "test": "assert solution('21') == '1385.442360\\n882.000000'",
        "num_ids": 549
    },
    {
        "number": 4833,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    expenses = [int(x) for x in stdin.split('\\n')[1].split()]\n    total_expenses = sum([expense for expense in expenses if expense < 0])\n    return str(total_expenses)",
        "test": "assert solution(\"5\\n129 44 394 253 147\") == \"0\"",
        "num_ids": 380
    },
    {
        "number": 4834,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.split('\\n')[0])\n    times = list(map(int, stdin.split('\\n')[1].split()))\n\n    # Sort the times in ascending order\n    times.sort()\n\n    # Find the maximum time among the first n-1 elements\n    max_time = max(times[:n-1])\n\n    # Calculate the total time required\n    total_time = sum(times[:n-1]) + max_time\n\n    return str(total_time)",
        "test": "assert solution(\"3\\n2 2 2\\n\") == \"6\"",
        "num_ids": 461
    },
    {
        "number": 4835,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    def find_safe_path(matrix, sr, sc, tr, tc, visited, escape_path):\n        if sr == tr and sc == tc:\n            return True\n\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        for di in range(4):\n            dr, dc = directions[di]\n            if di == 0:\n                if matrix[sr][sc] == 'U' and sc - 1 >= 0 and matrix[sr][sc - 1] != '1' and not visited[sr][sc - 1]:\n                    escape_path.append((sr, sc))\n                    if find_safe_path(matrix, sr, sc - 1, tr, tc, visited, escape_path):\n                        return True\n                    escape_path.pop()\n                    visited[sr][sc - 1] = True\n            elif di == 1:\n                if matrix[sr][sc] == 'D' and sc + 1 < M and matrix[sr][sc + 1] != '1' and not visited[sr][sc + 1]:\n                    escape_path.append((sr, sc))\n                    if find_safe_path(matrix, sr, sc + 1, tr, tc, visited, escape_path):\n                        return True\n                    escape_path.pop()\n                    visited[sr][sc + 1] = True\n            elif di == 2:\n                if matrix[sr][sc] == 'L' and sr - 1 >= 0 and matrix[sr - 1][sc] != '1' and not visited[sr - 1][sc]:\n                    escape_path.append((sr, sc))\n                    if find_safe_path(matrix, sr - 1, sc, tr, tc, visited, escape_path):\n                        return True\n                    escape_path.pop()\n                    visited[sr - 1][sc] = True\n            else:\n                if matrix[sr][sc] == 'R' and sr + 1 < N and matrix[sr + 1][sc] != '1' and not visited[sr + 1][sc]:\n                    escape_path.append((sr, sc))\n                    if find_safe_path(matrix, sr + 1, sc, tr, tc, visited, escape_path):\n                        return True\n                    escape_path.pop()\n                    visited[sr + 1][sc] = True\n        return False\n\n    lines = stdin.split('\\n')\n    t, N, M = map(int, lines[0].split())\n    matrix = [list(line.strip()) for line in lines[1:N + 1]]\n    start_row, start_col = None, None\n    for i in range(N):\n        for j in range(M):\n            if matrix[i][j] == 'S':\n                start_row, start_col = i, j\n                break\n\n    visited = [[False for _ in range(M)] for _ in range(N)]\n    escape_path = [(start_row, start_col)]\n    if find_safe_path(matrix, start_row, start_col, N - 1, M - 1, visited, escape_path):\n        return str(len(escape_path) - 1)\n    else:\n        return \"NOT POSSIBLE\"",
        "test": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"",
        "num_ids": 2205
    },
    {
        "number": 4836,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, C = map(int, stdin.split()[0:2])\n    fruits = sorted(list(map(int, stdin.split()[2:])))\n\n    current_weight = 0\n    distinct_fruits = 0\n\n    for fruit in fruits:\n        if current_weight + fruit <= C:\n            current_weight += fruit\n            distinct_fruits += 1\n        else:\n            continue\n\n    return str(distinct_fruits)",
        "test": "assert solution(\"5 5\\n3 1 2 1 1\") == \"4\"",
        "num_ids": 538
    },
    {
        "number": 4837,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    rounds, sven_symbols, friends_count, friends_symbols = parse_input(stdin)\n    actual_score = calculate_actual_score(sven_symbols, friends_symbols, friends_count)\n    max_score = calculate_max_score(sven_symbols, friends_symbols)\n    return f\"{actual_score}\\n{max_score}\"\n\ndef",
        "test": "assert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\\n15\"",
        "num_ids": 1032
    },
    {
        "number": 4838,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n', 1)[0])\n    times = list(map(int, stdin.split('\\n', 1)[1].split()))\n    \n    timer = 0\n    running = False\n    \n    for t in times:\n        if running:\n            timer += t - prev_t\n        prev_t = t\n        running = not running\n    \n    if running:\n        return \"still running\"\n    else:\n        return str(timer)",
        "test": "assert solution(\"2\\n7\\n11\\n\") == \"4\"",
        "num_ids": 614
    },
    {
        "number": 4839,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    n, *canisters = map(int, stdin.split())\n    canisters.sort(reverse=True)\n    balloons = list(range(1, n + 1))\n\n    def fill_balloons(canisters: List[int], balloons: List[int]) -> bool:\n        for canister in canisters:\n            for i, balloon in enumerate(balloons):\n                if balloon <= canister:\n                    balloons[i] -= canister\n                    break\n            else:\n                return False\n        return True\n\n    def binary_search(canisters: List[int], balloons: List[int]) -> float:\n        lo, hi = 0.0, 1.0\n        while abs(hi - lo) > 1e-6:\n            mid = (lo + hi) / 2\n            if fill_balloons([int(canister * mid) for canister in canisters], balloons.copy()):\n                lo = mid\n            else:\n                hi = mid\n        return lo\n\n    if fill_balloons(canisters, balloons):\n        return str(binary_search(canisters, balloons))\n    else:\n        return \"impossible\"",
        "test": "assert solution(\"5\\n1 2 3 4 5\") == \"0.8\"",
        "num_ids": 893
    },
    {
        "number": 4840,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_probability(a: int, b: int) -> float:\n        total_sum = (a + b) * (b - a + 1) // 2\n        probability = sum([1 / (total_sum - i + 1) for i in range(a, b + 1)])\n        return probability\n\n    def find_winner(player1: tuple, player2: tuple) -> str:\n        p1_probability = calculate_probability(player1[0], player1[1])\n        p2_probability = calculate_probability(player2[0], player2[1])\n\n        if p1_probability > p2_probability:\n            return \"Gunnar\"\n        elif p1_probability < p2_probability:\n            return \"Emma\"\n        else:\n            return \"Tie\"\n\n    input_data = list(map(int, stdin.split()))\n    gunnar_dice = (input_data[0], input_data[1])\n    emma_dice = (input_data[2], input_data[3])\n\n    winner = find_winner(gunnar_dice, emma_dice)\n    return winner ",
        "test": "assert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"",
        "num_ids": 1019
    },
    {
        "number": 4841,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    counts = stdin.split('\\n')[1].split()\n    \n    if n != len(counts):\n        return \"something is fishy\"\n    \n    count = 0\n    for i in range(n):\n        if counts[i].isdigit():\n            count += int(counts[i])\n        elif counts[i] == \"mumble\":\n            pass\n        else:\n            return \"something is fishy\"\n    \n    if count == n:\n        return \"makes sense\"\n    else:\n        return \"something is fishy\"",
        "test": "assert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"",
        "num_ids": 650
    },
    {
        "number": 4842,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, *v = [int(x) for x in stdin.split()]\n    d = 1\n    while d < n and all(v[i] - v[i - 1] == v[1] - v[0] for i in range(1, n - d + 1)):\n        d += 1\n    v_n_plus_1 = v[0] + (n + 1) * (v[1] - v[0])\n    return f\"{d} {v_n_plus_1}\\n\"",
        "test": "assert solution(\"4 9 25 49 81\") == \"2 121\\n\"",
        "num_ids": 622
    },
    {
        "number": 4843,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_position(x1: int, y1: int, x2: int, y2: int) -> bool:\n        if x1 == x2:\n            return False\n        if y1 == y2:\n            return False\n        if abs(x1 - x2) == abs(y1 - y2):\n            return False\n        return True\n\n    def is_valid_solution(positions: list) -> bool:\n        for i in range(len(positions)):\n            for j in range(i + 1, len(positions)):\n                if not is_valid_position(positions[i][0], positions[i][1], positions[j][0], positions[j][1]):\n                    return False\n        return True\n\n    def parse_input(stdin: str) -> list:\n        lines = stdin.split('\\n')\n        N = int(lines[0])\n        positions = []\n        for i in range(1, N + 1):\n            x, y = map(int, lines[i].split(' '))\n            positions.append((x, y))\n        return positions\n\n    positions = parse_input(stdin)\n    if is_valid_solution(positions):\n        return 'CORRECT'\n    else:\n        return 'INCORRECT'",
        "test": "assert solution(\"4\\n1 3\\n3 1\\n2 2\\n0 0\") == \"INCORRECT\"",
        "num_ids": 1237
    },
    {
        "number": 4844,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.readline().split())))\n    \n    bits = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                bits[i] |= matrix[i][j]\n    \n    return \" \".join(map(str, bits))",
        "test": "assert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\\n\") == \"1 2 3 1 11\\n\" ",
        "num_ids": 651
    },
    {
        "number": 4845,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    day, month = map(int, stdin.split())\n    days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n    if month < 3:\n        month += 12\n        year = 2008\n    else:\n        year = 2009\n    day_of_week = (day + (13 * (month + 1) // 5) + year + (year // 4) - (year // 100) + (year // 400) + 6) % 7\n    return days[day_of_week]",
        "test": "assert solution(\"1 1\") == \"Thursday\"",
        "num_ids": 809
    },
    {
        "number": 4846,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def digit_sum(num: int) -> int:\n        return sum(int(digit) for digit in str(num))\n\n    def find_N(L: int, D: int, X: int) -> int:\n        N = L\n        while digit_sum(N) != X or N > D:\n            N += 1\n        return N\n\n    def find_M(L: int, D: int, X: int) -> int:\n        M = D\n        while digit_sum(M) != X or M < L:\n            M -= 1\n        return M\n\n    L, D, X = map(int, stdin.split('\\n'))\n    N = find_N(L, D, X)\n    M = find_M(L, D, X)\n    return f\"{N}\\n{M}\\n\"",
        "test": "assert solution(\"100\\n500\\n12\\n\") == \"129\\n480\\n\"",
        "num_ids": 577
    },
    {
        "number": 4847,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    points = []\n    for i in range(3):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n    n = int(stdin.readline())\n    trees = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        trees.append((x, y))\n\n    # Calculate area of triangle\n    def triangle_area(p1, p2, p3):\n        return abs((p1[0] * (p2[1] - p3[1]) + p2[0] * (p3[1] - p1[1]) + p3[0] * (p1[1] - p2[1])) / 2)\n\n    area = triangle_area(points[0], points[1], points[2])\n\n    # Count trees belonging to Ante\n    trees_belonging_to_ante = 0\n    for tree in trees:\n        # Check if tree is inside or on the border of Ante's land\n        if (points[0][0] - tree[0]) * (points[1][0] - tree[0]) <= 0 and (points[0][1] - tree[1]) * (points[1][1] - tree[1]) <= 0 and (points[1][0] - tree[0]) * (points[2][0] - tree[0]) <= 0 and (points[1][1] - tree[1]) * (points[2][1] - tree[1]) <= 0:\n            trees_belonging_to_ante += 1\n\n    # Output\n    return f\"{area:.1f}\\n{trees_belonging_to_ante}\"",
        "test": "assert solution(\"\"\"1 1",
        "num_ids": 1298
    },
    {
        "number": 4848,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(2, n):\n        if all(n % i != 0 for i in range(2, int(n ** 0.5) + 1)):\n            if all(m * n % i != 0 for i in range(2, int(m * n ** 0.5) + 1)):\n                return str(m)\n    return \"No solution found\"",
        "test": "assert solution(30) == 7",
        "num_ids": 298
    },
    {
        "number": 4849,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    cia_blimps = []\n    for i, line in enumerate(stdin.split('\\n'), start=1):\n        if 'FBI' in line:\n            cia_blimps.append(i)\n    if not cia_blimps:\n        return \"HE GOT AWAY!\"\n    return ' '.join(map(str, sorted(cia_blimps)))",
        "test": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"",
        "num_ids": 607
    },
    {
        "number": 4850,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    triangles = []\n    for _ in range(N):\n        A, B, C = map(int, stdin.readline().split())\n        triangles.append((A, B, C))\n\n    def get_height(triangle):\n        A, B, C = sorted(triangle)\n        return (2 * C**2 - A**2 - B**2) ** 0.5\n\n    def get_radius(triangle):\n        A, B, C = triangle\n        h = get_height(triangle)\n        return (A**2 + (B + C)**2 - 4 * h**2) ** 0.5 / 2\n\n    max_radius = max(get_radius(triangle) for triangle in triangles)\n    min_length = 2 * max_radius\n\n    return f\"{min_length:.4f}\"",
        "test": "assert solution(\"2\\n3 3 3\\n4 5 4\\n\") == \"6.843530573929037\"",
        "num_ids": 863
    },
    {
        "number": 4851,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num = n\n    while True:\n        digits_sum = sum(int(digit) for digit in str(num))\n        if num % digits_sum == 0:\n            return str(num)\n        else:\n            num += 1\n",
        "test": "assert solution(\"24\") == \"24\"",
        "num_ids": 444
    },
    {
        "number": 4852,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into a list of integers and plus symbols\n    input_list = [int(x) if x.isdigit() else x for x in stdin.split('+')]\n\n    # Initialize a set to store the distinct integers\n    distinct_integers = set()\n\n    # Iterate through all possible interpretations of the plus symbols\n    for i in range(2 ** (len(input_list) // 2)):\n        # Interpret each plus symbol as either addition or string concatenation\n        for j in range(2 ** (len(input_list) // 2)):\n            # Initialize a list to store the current interpretation\n            interpretation = []\n\n            # Iterate through the input list\n            for k in range(len(input_list)):\n                # Add the current integer to the interpretation list\n                interpretation.append(input_list[k])\n\n                # If the current plus symbol is interpreted as concatenation, convert the preceding two elements to strings\n                if (i >> k) & 1 == 1:\n                    interpretation[-1] = str(interpretation[-1])\n                    if k >= 2 and (i >> (k - 2)) & 1 == 0:\n                        interpretation[-2] = str(interpretation[-2])\n\n            # Evaluate the current interpretation\n            result = eval(''.join(map(str, interpretation)))\n\n            # Add the result to the set of distinct integers\n            distinct_integers.add(result)\n\n    # Return the number of distinct integers\n    return len(distinct_integers)",
        "test": "assert solution(\"10+20+30+40+50\") == 1",
        "num_ids": 1037
    },
    {
        "number": 4853,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, *coefficients = list(map(int, stdin.split()))\n    C = [0] * (n + 1)\n    C[0] = coefficients[-1]\n    for i in range(1, n + 1):\n        C[i] = (n - i + 1) * coefficients[n - i]\n    return ' '.join(map(str, C))",
        "test": "assert solution(\"1 5 2\") == \"2 5\"",
        "num_ids": 518
    },
    {
        "number": 4854,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, C = map(int, stdin.readline().split())\n    nums = list(map(int, stdin.readline().split()))\n    freq = [0] * (C + 1)\n\n    for num in nums:\n        freq[num] += 1\n\n    sorted_nums = []\n    for i in range(1, C + 1):\n        for j in range(freq[i]):\n            sorted_nums.append(i)\n\n    return \" \".join(map(str, sorted_nums))",
        "test": "assert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"",
        "num_ids": 669
    },
    {
        "number": 4855,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    A, I = map(int, stdin.split())\n    total_citations = I * A\n    return str(total_citations)",
        "test": "assert solution(\"1 100\") == \"100\"",
        "num_ids": 333
    },
    {
        "number": 4856,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a[::-1])\n    b = int(b[::-1])\n    if a > b:\n        return str(a)[::-1]\n    else:\n        return str(b)[::-1]\n    \n",
        "test": "assert solution(\"999 100\") == \"001\"",
        "num_ids": 410
    },
    {
        "number": 4857,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    l, w = map(int, stdin.split())\n    if w > (26 * l) or w < l:\n        return \"impossible\"\n\n    def find_word(length: int, weight: int) -> str:\n        if weight == length:\n            return 'z' * length\n        elif weight < length:\n            return \"impossible\"\n        else:\n            for i in range(1, weight // length + 1):\n                rest_weight = weight - i * length\n                rest_length = weight - length\n                rest = find_word(rest_length, rest_weight)\n                if rest != \"impossible\":\n                    return 'a' * i + rest\n            return \"impossible\"\n\n    return find_word(l, w)",
        "test": "assert solution(\"25 651\") == \"impossible\"",
        "num_ids": 823
    },
    {
        "number": 4858,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into lines and read the parameters\n    lines = stdin.split('\\n')\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    \n    # Read the two frames and find the falcon's position in each frame\n    frame1, frame2 = [], []\n    for i in range(M):\n        frame1.append(lines[i + 1])\n        frame2.append(lines[i + 1 + M + 1])\n    pos1 = [(i, j) for i in range(M) for j in range(N) if frame1[i][j] == C]\n    pos2 = [(i, j) for i in range(M) for j in range(N) if frame2[i][j] == C]\n    \n    # Calculate the shift in position and apply it to the second frame\n    shift_x = pos2[0][1] - pos1[0][1]\n    shift_y = pos2[0][0] - pos1[0][0]\n    frame2_shifted = [[' '] * N for _ in range(M)]\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                frame2_shifted[i + shift_y][j + shift_x] = C\n    \n    # Create the output frame\n    output = '\\n'.join([''.join(row) for row in frame2_shifted])\n    return output + '\\n'",
        "test": "assert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABA\\nBBABABABABAB\\nBABABABABABA\") == \"BBABABABABAC\\nBBBABABABABA\\nBBABABABABAB\" ",
        "num_ids": 2060
    },
    {
        "number": 4859,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    b, d, c, l = map(int, stdin.split())\n    solutions = []\n\n    for i in range(l // b + 1):\n        for j in range(l // d + 1):\n            for k in range(l // c + 1):\n                if i + j + k == l // 2:\n                    solutions.append([i, j, k])\n\n    solutions.sort()\n\n    if not solutions:\n        return \"impossible\"\n\n    return \"\\n\".join(\" \".join(map(str, solution)) for solution in solutions)",
        "test": "assert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\"",
        "num_ids": 847
    },
    {
        "number": 4860,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    numbers = list(map(int, stdin.split('\\n')[1:]))\n    \n    if numbers == list(range(1, numbers[-1]+1)):\n        return \"good job\"\n    else:\n        missing_numbers = [str(i) for i in range(1, numbers[-1]+1) if i not in numbers]\n        return \"\\n\".join(missing_numbers)",
        "test": "assert solution(\"10\\n1\\n3\\n5\\n7\\n9\\n11\\n13\\n15\\n17\\n19\") == \"2\\n4\\n6\\n8\\n10\\n12\\n14\\n16\\n18\"",
        "num_ids": 822
    },
    {
        "number": 4861,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s, v = map(float, stdin.split())\n    p *= 1e9\n\n    def euclidean_tsp_approx(c):\n        return n * (log2(n))**(c * sqrt(2)) / p\n\n    def time_to_distribute_keys(c):\n        return s * (1 + 1 / c) / v\n\n    c = 1\n    t = euclidean_tsp_approx(c) + time_to_distribute_keys(c)\n    while time_to_distribute_keys(c) < t:\n        c += 0.000001\n        t = euclidean_tsp_approx(c) + time_to_distribute_keys(c)\n\n    return f\"{t:.6f} {c:.6f}\"",
        "test": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"",
        "num_ids": 940
    },
    {
        "number": 4862,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return \"0\"\n    else:\n        return str((n * (n - 1)) // 2)",
        "test": "assert solution(\"0\") == \"0\"",
        "num_ids": 278
    },
    {
        "number": 4863,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    answer_key = stdin.split('\\n')[1:]\n    \n    correct_answers = []\n    for i in range(n):\n        if i % 2 == 0:\n            correct_answers.append(answer_key[i])\n        else:\n            correct_answers.append(answer_key[i-1])\n    \n    correct_count = 0\n    for i in range(n):\n        if correct_answers[i] == answer_key[i]:\n            correct_count += 1\n    \n    return str(correct_count) ",
        "test": "assert solution(\"3\\nB\\nA\\nC\") == \"2\"",
        "num_ids": 581
    },
    {
        "number": 4864,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    R, C, Z_R, Z_C = map(int, stdin.split()[0:4])\n    article = []\n    for i in range(R):\n        row = []\n        for j in range(C):\n            row.append(stdin.split()[4 + i*C + j])\n        article.append(row)\n\n    enlarged_article = []\n    for i in range(R * Z_R):\n        enlarged_row = []\n        for j in range(C * Z_C):\n            enlarged_row.append(article[i//Z_R][j//Z_C])\n        enlarged_article.append(enlarged_row)\n\n    return enlarged_article ",
        "test": "assert solution(\"50 50 1 1\\n\" + \"x\" * 50 + \"\\n\" * 49 + \"x\" * 50) == \"x\" * 50 + \"\\n\" * 49 + \"x\" * 50",
        "num_ids": 1246
    },
    {
        "number": 4865,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    time_list = stdin.split('\\n')[1:]\n    \n    for i in range(n):\n        direction, change, hour, minute = time_list[i].split()\n        change = int(change)\n        hour = int(hour)\n        minute = int(minute)\n        \n        if direction == 'F':\n            if change == 60:\n                hour = (hour + 1) % 24\n            elif change == 120:\n                hour = (hour + 2) % 24\n            else:\n                minute = (minute + change) % 60\n                hour = (hour + (minute // 60)) % 24\n        else:\n            if change == 60:\n                hour = (hour - 1) % 24\n            elif change == 120:\n                hour = (hour - 2) % 24\n            else:\n                minute = (minute - change) % 60\n                hour = (hour - (minute // 60)) % 24\n                \n        time_list[i] = f\"{hour} {minute}\"\n    \n    return '\\n'.join(time_list)",
        "test": "assert solution(\"1\\nF 60 13 20\\n\") == \"14 20\\n\"",
        "num_ids": 1316
    },
    {
        "number": 4866,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    month, date = stdin.strip().split()\n    if month == \"OCT\" and date == \"31\" or month == \"DEC\" and date == \"25\":\n        return \"yup\"\n    return \"nope\"",
        "test": "assert solution(\"OCT 31\") == \"yup\"",
        "num_ids": 364
    },
    {
        "number": 4867,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    input_lines = stdin.splitlines()\n    M, N = map(int, input_lines[0].split())\n    U, L, R, D = map(int, input_lines[1].split())\n    crossword = [list(input_lines[2+i]) for i in range(M)]\n\n    # Create frame\n    frame = [['#'] * (N + L + R) for _ in range(M + U + D)]\n    for i in range(M):\n        for j in range(N):\n            frame[i+U][j+L] = crossword[i][j]\n\n    # Print frame\n    output = '\\n'.join([''.join(row) for row in frame])\n    return output",
        "test": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#\" ",
        "num_ids": 1381
    },
    {
        "number": 4868,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    white_pieces = lines[0].split(\",\")\n    black_pieces = lines[1].split(\",\")\n    \n    board = [[\".\" for _ in range(8)] for _ in range(8)]\n    \n    for piece in white_pieces:\n        row = 7 - (int(piece[1]) - 1)\n        col = ord(piece[0]) - ord(\"a\")\n        board[row][col] = \"O\"\n    \n    for piece in black_pieces:\n        row = 7 - (int(piece[1]) - 1)\n        col = ord(piece[0]) - ord(\"a\")\n        board[row][col] = \"X\"\n    \n    output = \"\"\n    for i in range(8):\n        for j in range(8):\n            output += board[i][j]\n        output += \"\\n\"\n    \n    return output",
        "test": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|.P.|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\" ",
        "num_ids": 2217
    },
    {
        "number": 4869,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, N = map(float, stdin.split())\n    if A <= N:\n        return \"Diablo is happy!\"\n    else:\n        return \"Need more materials!\"",
        "test": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"",
        "num_ids": 595
    },
    {
        "number": 4870,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    f, s, g, u, d = map(int, stdin.split())\n    \n    if s == g:\n        return \"0\"\n    \n    if s > g:\n        if s - g > d:\n            return \"use the stairs\"\n        else:\n            return str((s - g) * 2)\n    \n    if g - s > u:\n        return \"use the stairs\"\n    \n    return str((g - s) * 2 - 1)",
        "test": "assert solution('10 1 10 2 2') == 'use the stairs'",
        "num_ids": 685
    },
    {
        "number": 4871,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def kattis_score(scores):\n        n = len(scores)\n        return sum(scores[i] * (0.8 ** i) for i in range(n)) / 5\n\n    def group_score_without_student(scores, i):\n        return kattis_score(scores[:i] + scores[i + 1 :])\n\n    n, *scores = [int(x) for x in stdin.split('\\n')]\n    sorted_scores = sorted(scores, reverse=True)\n\n    group_score = kattis_score(sorted_scores)\n    new_group_scores = [group_score_without_student(sorted_scores, i) for i in range(n)]\n    average_new_group_score = sum(new_group_scores) / n\n\n    return f\"{group_score:.1f}\\n{average_new_group_score:.6f}\"",
        "test": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\\n89.0666666666666\"",
        "num_ids": 803
    },
    {
        "number": 4872,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    def days_since_push(day, push_day):\n        return max(0, day - push_day)\n\n    def dirtiness(push_days, day):\n        return sum(days_since_push(day, push) for push in push_days)\n\n    def cleanup_phases(push_days, target_dirtiness=20):\n        day = 1\n        cleanups = 0\n        while day <= 365:\n            if dirtiness(push_days, day) >= target_dirtiness:\n                cleanups += 1\n                day = min(d for d in push_days if days_since_push(day, d) < target_dirtiness)\n            day += 1\n        return cleanups\n\n    n = int(stdin.split('\\n')[0])\n    push_days = list(map(int, stdin.split('\\n')[1].split()))\n\n    return str(cleanup_phases(push_days))",
        "test": "assert solution(\"1\\n365\\n\") == \"0\"",
        "num_ids": 754
    },
    {
        "number": 4873,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    W, H = map(int, stdin.readline().split())\n    map_data = []\n    for i in range(H):\n        map_data.append(list(stdin.readline().strip()))\n\n    # Initialize variables\n    player_pos = None\n    gold_count = 0\n\n    # Find player position\n    for i in range(H):\n        for j in range(W):\n            if map_data[i][j] == 'P':\n                player_pos = (i, j)\n                break\n        if player_pos is not None:\n            break\n\n    # Move up\n    i, j = player_pos\n    while i > 0 and map_data[i - 1][j] != '#':\n        i -= 1\n        if map_data[i][j] == 'G':\n            gold_count += 1\n            map_data[i][j] = '.'\n\n    # Move down\n    i, j = player_pos\n    while i < H - 1 and map_data[i + 1][j] != '#':\n        i += 1\n        if map_data[i][j] == 'G':\n            gold_count += 1\n            map_data[i][j] = '.'\n\n    # Move left\n    i, j = player_pos\n    while j > 0 and map_data[i][j - 1] != '#':\n        j -= 1\n        if map_data[i][j] == 'G':\n            gold_count += 1\n            map_data[i][j] = '.'\n\n    # Move right\n    i, j = player_pos\n    while j < W - 1 and map_data[i][j + 1] != '#':\n        j += 1\n        if map_data[i][j] == 'G':\n            gold_count += 1\n            map_data[i][j] = '.'\n\n    return str(gold_count)",
        "test": "assert solution(\"5 4\\n#####\\n#PG.#\\n#..T#\\n#####\") == 1",
        "num_ids": 1623
    },
    {
        "number": 4874,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    dance_grid = [list(stdin.readline().strip()) for _ in range(N)]\n\n    dance_moves = 0\n    for i in range(M - 1):\n        if all(dance_grid[j][i] == '_' for j in range(N)) and any(dance_grid[j][i + 1] == '$' for j in range(N)):\n            dance_moves += 1\n\n    return str(dance_moves)",
        "test": "assert solution(\"\"\"13 50",
        "num_ids": 761
    },
    {
        "number": 4875,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def pig_latin(word: str) -> str:\n        vowels = \"aeiouy\"\n        if word[0] in vowels:\n            return word + \"yay\"\n        else:\n            for i, char in enumerate(word):\n                if char in vowels:\n                    return word[i:] + word[:i] + \"ay\"\n\n    return \" \".join(pig_latin(word) for word in stdin.split())",
        "test": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"",
        "num_ids": 710
    },
    {
        "number": 4876,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    menu = stdin.split('\\n')[1:]\n    pea_soup = 'pea soup'\n    pancakes = 'pancakes'\n    for i in range(0, n*n+1, n+1):\n        if pea_soup in menu[i:i+n] and pancakes in menu[i:i+n]:\n            return menu[i].strip()\n    return 'Anywhere is fine I guess'",
        "test": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnybble\\npancakes\\npea soup\\npunsch\") == \"Anywhere is fine I guess\"",
        "num_ids": 761
    },
    {
        "number": 4877,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    if a <= b or h < a:\n        return \"0\"\n    count = 1\n    while a * count - b * (count - 1) < h:\n        count += 1\n    return str(count)",
        "test": "assert solution(\"5 0 15\") == \"3\"",
        "num_ids": 408
    },
    {
        "number": 4878,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    R1, S = map(int, stdin.split())\n    R2 = 2 * S - R1\n    return str(R2)",
        "test": "assert solution(\"11 15\") == \"19\"",
        "num_ids": 332
    },
    {
        "number": 4879,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.strip().split()\n    \n    if a == \"South\" and b == \"West\" and c in [\"East\", \"North\"]:\n        return \"Yes\"\n    elif a == \"West\" and b == \"North\" and c in [\"South\", \"East\"]:\n        return \"Yes\"\n    elif a == \"North\" and b == \"East\" and c in [\"West\", \"South\"]:\n        return \"Yes\"\n    elif a == \"East\" and b == \"South\" and c in [\"North\", \"West\"]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"East North South\") == \"No\"",
        "num_ids": 575
    },
    {
        "number": 4880,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    keyword = stdin.readline().strip()\n    ciphertext = stdin.readline().strip()\n    \n    plaintext = ['_'] * m\n    for i in range(n):\n        plaintext[i] = keyword[i]\n    for i in range(n, m):\n        plaintext[i] = chr((ord(ciphertext[i]) - ord(plaintext[i-n])) % 26 + ord('a'))\n    \n    return ''.join(plaintext)",
        "test": "assert solution(\"10 30\\nencyclopedia\\nhjklqwertyuimbcpvnfdsaxzg\") == \"wikipediaalreadyexists\"",
        "num_ids": 888
    },
    {
        "number": 4881,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n == 1:\n        return 'Either'\n    elif n % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'",
        "test": "assert solution(1) == \"Either\"",
        "num_ids": 324
    },
    {
        "number": 4882,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    estimates = stdin.split('\\n')[1:]\n\n    output = []\n    for estimate in estimates:\n        output.append(len(estimate))\n\n    return '\\n'.join(str(o) for o in output)",
        "test": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"",
        "num_ids": 446
    },
    {
        "number": 4883,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    translations = {}\n    pairs = []\n\n    m, n = map(int, stdin.readline().split())\n\n    for _ in range(m):\n        a, b = stdin.readline().strip().split()\n        if a not in translations:\n            translations[a] = []\n        translations[a].append(b)\n\n    for _ in range(n):\n        word1, word2 = stdin.readline().strip().split()\n        pairs.append((word1, word2))\n\n    def can_transform(word1, word2):\n        if len(word1) != len(word2):\n            return False\n\n        for i in range(len(word1)):\n            if word1[i] not in translations or word2[i] not in translations[word1[i]]:\n                return False\n\n        return True\n\n    results = []\n    for pair in pairs:\n        word1, word2 = pair\n        if can_transform(word1, word2):\n            results.append('yes')\n        else:\n            results.append('no')\n\n    return '\\n'.join(results)",
        "test": "assert solution(\"\"\"9 5",
        "num_ids": 680
    },
    {
        "number": 4884,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, P = map(int, lines[0].split())\n    carrots = 0\n    for i in range(1, N + 1):\n        if 'carrots' in lines[i]:\n            carrots += 1\n    return str(carrots)",
        "test": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"",
        "num_ids": 1012
    },
    {
        "number": 4885,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def process_cell(cell: str) -> str:\n        if cell == '.':\n            return '.'\n        elif cell == ':':\n            return 'P'\n        elif cell.isalpha():\n            return cell.upper()\n        else:\n            raise ValueError(\"Invalid input cell\")\n\n    def get_positions(board: list, player: str) -> str:\n        pieces = {'K': [], 'Q': [], 'R': [], 'B': [], 'N': [], 'P': []}\n        for i, row in enumerate(board):\n            for j, cell in enumerate(row):\n                if cell.isalpha() and cell.isupper() == (player == 'White'):\n                    pieces[cell].append((chr(ord('a') + j), str(i + 1)))\n        result = []\n        for piece_type in pieces:\n            if piece_type == 'P':\n                result.extend([f\"{player.lower()}{pos}\" for pos in pieces[piece_type]])\n            else:\n                result.extend([f\"{piece_type}{pos}\" for pos in pieces[piece_type]])\n        return ','.join(result)\n\n    board = [list(row) for row in stdin.strip().split('\\n')[1:-1]]\n    board = [[process_cell(cell) for cell in row] for row in board]\n    white_positions = get_positions(board, 'White')\n    black_positions = get_positions(board, 'Black')\n    return f\"White: {white_positions}\\nBlack: {black_positions}\"",
        "test": "assert solution(\"\"\"+---+---+---+---+---+---+---+---+",
        "num_ids": 1509
    },
    {
        "number": 4886,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if K == 0:\n        return \"You will become a flying monkey!\"\n    if N <= K:\n        return \"Your wish is granted!\"\n    return \"You will become a flying monkey!\"",
        "test": "assert solution(\"1000000000 1000000000\") == \"Your wish is granted!\"",
        "num_ids": 800
    },
    {
        "number": 4887,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    area = int(stdin.strip())\n    perimeter = 4 * area\n    return str(perimeter)",
        "test": "assert solution(1000) == 1344, \"Test 4 failed\"",
        "num_ids": 277
    },
    {
        "number": 4888,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    T, tasks = list(map(int, stdin.split()))\n    tasks.sort()\n    time = 0\n    count = 0\n    for task in tasks:\n        if time + task <= T:\n            time += task\n            count += 1\n        else:\n            break\n    return str(count)",
        "test": "assert solution(\"7 240\\n120 120 60 60 60 60 60\") == \"2\"",
        "num_ids": 704
    },
    {
        "number": 4889,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    lengths = []\n    for i in range(N):\n        lengths.append(int(stdin.readline().strip()))\n    \n    total_length = sum(lengths)\n    for i in range(N):\n        total_length -= i\n    \n    return str(total_length)",
        "test": "assert solution(\"100\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50",
        "num_ids": 2609
    },
    {
        "number": 4890,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split()[0:4])\n    c = list(map(int, stdin.split()[4:]))\n\n    # If the number of students is greater than the total number of slots, it's impossible\n    if m > s:\n        return \"impossible\"\n\n    # Calculate the probability of getting a cold bottle for each slot\n    probabilities = []\n    for i in range(s):\n        free_space = d - c[i]\n        probabilities.append(min(n, free_space) / (n + s - m))\n\n    # Determine the maximum probability of getting a cold bottle\n    max_probability = max(probabilities)\n\n    # Check if it's possible to get a cold bottle for the next m students\n    if max_probability == 0:\n        return \"impossible\"\n\n    # Calculate the refill scheme for the maximum probability\n    refill_scheme = [0] * s\n    for i in range(s):\n        if probabilities[i] == max_probability:\n            refill_scheme[i] = min(n, d - c[i])\n            n -= refill_scheme[i]\n            if n == 0:\n                break\n\n    return \" \".join(map(str, refill_scheme))",
        "test": "assert solution(\"10 5 4 3\\n2 1 2 3\\n3 2 1\") == \"impossible\"",
        "num_ids": 1462
    },
    {
        "number": 4891,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    expected = [1, 1, 2, 2, 2, 8]\n    found = list(map(int, stdin.split()))\n    result = [expected[i] - found[i] for i in range(6)]\n    return ' '.join(map(str, result))",
        "test": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"",
        "num_ids": 582
    },
    {
        "number": 4892,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    passwords = []\n    probabilities = []\n\n    for i in range(1, N + 1):\n        password, probability = lines[i].split(' ')\n        passwords.append(password)\n        probabilities.append(float(probability))\n\n    expected_attempts = sum([i * probabilities[i - 1] for i in range(1, N + 1)])\n\n    return f\"{expected_attempts:.4f}\"",
        "test": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"",
        "num_ids": 662
    },
    {
        "number": 4893,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n    n, p = input_data[0], input_data[1]\n    distances = input_data[2:]\n    distances.sort()\n    \n    min_distance = distances[0]\n    for i in range(1, n):\n        min_distance = max(min_distance, distances[i] - p * (i + 1))\n    \n    return str(min_distance)",
        "test": "assert solution(\"3 1\\n1 2 4\") == \"1\"",
        "num_ids": 1184
    },
    {
        "number": 4894,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    notes = input_lines[1].split()\n    staff = \"\"\"\nG:           \nF: ----------------------------------------------------------\nE:           \nD: ----------------------------------------------------------\nC:           \nB: ----------------------------------------------------------\nA:           \ng: ----------------------------------------------------------\nf:           \ne: ----------------------------------------------------------\nd:           \nc:           \nb:           \na: ----------------------------------------------------------\n\"\"\"\n    staff_lines = staff.split('\\n')\n    current_line = 0\n    current_column = 0\n    for note in notes:\n        pitch = note[0]\n        duration = 1\n        if len(note) > 1:\n            duration = int(note[1:])\n        if pitch in 'gabcdef':\n            pitch_index = ord(pitch) - ord('a')\n        else:\n            pitch_index = ord(pitch) - ord('A') + 7\n        if pitch_index < 3:\n            current_line = 3 - pitch_index\n            current_column = (current_column + 1) % 5\n        else:\n            current_line = 8 - pitch_index\n            current_column = (current_column + 1) % 3\n        staff_lines[current_line] = staff_lines[current_line][:current_column * 10] + '*' * duration + staff_lines[current_line][current_column * 10 + duration:]\n    return '\\n'.join(staff_lines)",
        "test": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"G:\\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                   \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                              *        \\ng: -----------------------------------------------*----------\\nf:                                                    \\ne: ----------------------------------------------------------\\nd:                                                    \\nc:                                                    \\nb:                                                    \\na: ----------------------------------------------------------\\n\" ",
        "num_ids": 1739
    },
    {
        "number": 4895,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    sticks = list(map(int, stdin.split('\\n')[1].split()))\n    sticks.sort()\n\n    if sticks[0] + sticks[1] > sticks[2]:\n        return \"possible\"\n    else:\n        return \"impossible\"",
        "test": "assert solution(\"3\\n1 1 1\") == \"possible\"",
        "num_ids": 1524
    },
    {
        "number": 4896,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, widths = int(stdin.split(\"\\n\")[0]), [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    \n    # initialize variables\n    towers = 1\n    current_width = widths[0]\n    \n    # loop through the bricks and build towers\n    for i in range(1, N):\n        if widths[i] > current_width:\n            towers += 1\n            current_width = widths[i]\n        else:\n            current_width = max(current_width, widths[i])\n            \n    return str(towers)",
        "test": "assert solution(\"10\\n1 1 1 1 1 1 1 1 1 1\") == \"1\"",
        "num_ids": 734
    },
    {
        "number": 4897,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def time_to_run(a, b, leg):\n        if leg == 1:\n            return a\n        else:\n            return b\n\n    def fastest_team(runners):\n        best_time = 100\n        best_team = []\n        for i in range(len(runners)):\n            for j in range(len(runners)):\n                if j == i:\n                    continue\n                for k in range(len(runners)):\n                    if k == i or k == j:\n                        continue\n                    for l in range(len(runners)):\n                        if l == i or l == j or l == k:\n                            continue\n                        time = time_to_run(runners[i][1], runners[j][2], 1) + \\\n                                time_to_run(runners[j][1], runners[k][2], 2) + \\\n                                time_to_run(runners[k][1], runners[l][2], 3) + \\\n                                time_to_run(runners[l][1], runners[i][2], 4)\n                        if time < best_time:\n                            best_time = time\n                            best_team = [runners[i][0], runners[j][0], runners[k][0], runners[l][0]]\n        return best_time, best_team\n\n    n = int(stdin.readline())\n    runners = []\n    for i in range(n):\n        name, a, b = stdin.readline().split()\n        a = float(a)\n        b = float(b)\n        runners.append((name, a, b))\n\n    best_time, best_team = fastest_team(runners)\n    output = f\"{best_time:.2f}\\n\"\n    for name in best_team:\n        output += f\"{name}\\n\"\n    return output",
        "test": "assert solution(\"\"\"6",
        "num_ids": 1294
    },
    {
        "number": 4898,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    N, intervals = int(stdin.split('\\n')[0]), [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    # Create a set of unique temperature preferences\n    temperatures = set()\n    for interval in intervals:\n        for i in range(interval[0], interval[1] + 1):\n            temperatures.add(i)\n\n    min_rooms = 0\n    while temperatures:\n        # Assign the first minion to the room with the first preferred temperature\n        room_temp = min(temperatures)\n        temperatures.remove(room_temp)\n\n        # Check if there are any minions that can be assigned to this room\n        assigned = False\n        for i, interval in enumerate(intervals):\n            if interval[0] <= room_temp <= interval[1]:\n                assigned = True\n                intervals.pop(i)\n                break\n\n        if not assigned:\n            min_rooms += 1\n\n    return str(min_rooms)",
        "test": "assert solution(\"5\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\") == \"5\"",
        "num_ids": 1149
    },
    {
        "number": 4899,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into two parts: the \"he\" part and the \"ey\" part\n    he, ey = stdin[:-2], stdin[-2:]\n    \n    # Create the response string by repeating the \"e\" in \"ey\" twice\n    response = he + ey[0] * 2 + ey[1]\n    \n    return response",
        "test": "assert solution(\"hey\") == \"heey\"",
        "num_ids": 423
    },
    {
        "number": 4900,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_path(start, end, visited):\n        if start == end:\n            return []\n        for i in range(n):\n            if i not in visited and dist[start][i] != 0:\n                path = find_path(i, end, visited | {i})\n                if path:\n                    return [i] + path\n        return None\n\n    def get_path(path):\n        result = []\n        for i in range(len(path) - 1):\n            result.append(path[i] + 1)\n            result.append(path[i + 1] + 1)\n        return result\n\n    n = int(stdin.readline())\n    dist = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\n    paths = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if dist[i][j] != 0:\n                path = find_path(i, j, {i})\n                paths.append(get_path(path))\n\n    return '\\n'.join([' '.join(map(str, path)) for path in paths])",
        "test": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\\n\" ",
        "num_ids": 992
    },
    {
        "number": 4901,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Divide the message in half\n    first_half, second_half = stdin[:len(stdin)//2], stdin[len(stdin)//2:]\n\n    # Calculate rotation value for each half\n    rotation_first_half = sum(ord(c) - ord('A') for c in first_half)\n    rotation_second_half = sum(ord(c) - ord('A') for c in second_half)\n\n    # Rotate characters in each half\n    rotated_first_half = ''.join(chr((ord(c) - ord('A') + rotation_first_half) % 26 + ord('A')) for c in first_half)\n    rotated_second_half = ''.join(chr((ord(c) - ord('A') + rotation_second_half) % 26 + ord('A')) for c in second_half)\n\n    # Merge the rotated halves\n    merged = ''.join(chr((ord(rotated_first_half[i]) - ord('A') + ord(rotated_second_half[i]) - ord('A')) % 26 + ord('A')) for i in range(len(first_half)))\n\n    return merged",
        "test": "assert solution(\"EWPGAJRB\") == \"ABCD\"",
        "num_ids": 1173
    },
    {
        "number": 4902,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n\n    def is_palindrome(word: str) -> bool:\n        return word == word[::-1]\n\n    def is_peragram(word: str) -> bool:\n        for letter in set(word):\n            if is_palindrome(letter * word.count(letter)):\n                return True\n        return False\n\n    stdin_counter = Counter(stdin)\n    peragram_count = sum(is_peragram(letter * count) for letter, count in stdin_counter.items())\n\n    return len(stdin) - peragram_count\n",
        "test": "assert solution(\"add\") == 1",
        "num_ids": 829
    },
    {
        "number": 4903,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    jon_marius, doctor = stdin.split('\\n')\n    if jon_marius.count('a') < doctor.count('a') or jon_marius.count('h') == 0:\n        return \"no\"\n    return \"go\"",
        "test": "assert solution('aaaaah\\naaaaah') == 'go'",
        "num_ids": 486
    },
    {
        "number": 4904,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    alice = 0\n    barbara = 0\n    history = []\n    last_player = None\n    \n    for i in range(0, len(stdin), 2):\n        player = stdin[i]\n        points = int(stdin[i+1])\n        \n        if player == 'A':\n            alice += points\n        else:\n            barbara += points\n        \n        if alice == barbara:\n            history.append((alice, barbara))\n        else:\n            history.clear()\n        \n        if alice >= 11 or barbara >= 11:\n            break\n        \n        last_player = player\n    \n    if alice >= 11 and alice - barbara >= 2:\n        return 'A'\n    elif barbara >= 11 and barbara - alice >= 2:\n        return 'B'\n    else:\n        return last_player",
        "test": "assert solution(\"A2B1A2B2A1A2A2\") == \"A\"",
        "num_ids": 1069
    },
    {
        "number": 4905,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, A, B, K, G = map(int, stdin.split()[:6])\n    visited_intersections = [False] * (N + 1)\n    streets = [0] * (N + 1)\n    for i in range(M):\n        A, B, L = map(int, stdin.split()[6 + 3 * i:9 + 3 * i])\n        streets[A] += L\n        streets[B] -= L\n\n    for i in range(1, N + 1):\n        streets[i] += streets[i - 1]\n\n    for i in range(G):\n        intersection = int(stdin.split()[6 + 3 * M + i])\n        visited_intersections[intersection] = True\n\n    current_time = K\n    current_intersection = A\n    while current_intersection != B:\n        if not visited_intersections[current_intersection]:\n            current_time += streets[current_intersection - 1]\n        current_intersection += 1\n\n    return current_time - K",
        "test": "assert solution(\"\"\"6 5",
        "num_ids": 1260
    },
    {
        "number": 4906,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    command, message = stdin.split()\n    \n    if command == \"E\":\n        encoded = \"\"\n        i = 0\n        while i < len(message):\n            char = message[i]\n            count = 1\n            while i + 1 < len(message) and message[i + 1] == char:\n                count += 1\n                i += 1\n            encoded += char + str(count)\n            i += 1\n        return encoded\n    \n    elif command == \"D\":\n        decoded = \"\"\n        i = 0\n        while i < len(message):\n            char = message[i]\n            count = int(message[i + 1])\n            decoded += char * count\n            i += 2\n        return decoded\n    \n    else:\n        raise ValueError(\"Invalid command. Use E for encoding and D for decoding.\")",
        "test": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"",
        "num_ids": 2113
    },
    {
        "number": 4907,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    if n == 2:\n        return \"Alice\\n1\\n\"\n    elif n % 2 == 0:\n        return \"Bob\\n\" + str(n // 2) + \"\\n\"\n    else:\n        return \"Alice\\n1\\n\"",
        "test": "assert solution(\"2\\n\") == \"Alice\\n1\\n\"",
        "num_ids": 374
    },
    {
        "number": 4908,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    if a + b == c:\n        return f\"{a}+{b}={c}\"\n    elif a - b == c:\n        return f\"{a}-{b}={c}\"\n    elif a * b == c:\n        return f\"{a}*{b}={c}\"\n    elif a / b == c:\n        return f\"{a}/{b}={c}\"\n",
        "test": "assert solution(\"5 3 8\") == \"5+3=8\"",
        "num_ids": 559
    },
    {
        "number": 4909,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    D = list(map(int, stdin.readline().split()))\n\n    # Check if it is possible to have such a network\n    visited = [False] * N\n    stack = [0] * N\n    top = 0\n\n    for i in range(N):\n        if not visited[i]:\n            visited[i] = True\n            top += 1\n            stack[top] = i\n\n            while top > 0 and D[stack[top]] == 0:\n                top -= 1\n\n            if top > 0:\n                j = stack[top]\n                D[j] -= 1\n                for k in range(D[j]):\n                    top += 1\n                    stack[top] = k + 1\n                    visited[k + 1] = True\n\n    # Check if all rooms are visited\n    for i in range(N):\n        if not visited[i]:\n            return \"NO\"\n\n    return \"YES\"",
        "test": "assert solution(\"4\\n2 2 1 1\\n\") == \"YES\"",
        "num_ids": 812
    },
    {
        "number": 4910,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_category(responses):\n        max_cat = \"\"\n        max_count = 0\n        count = {}\n        for response in responses:\n            if response not in count:\n                count[response] = 1\n            else:\n                count[response] += 1\n            if count[response] > max_count:\n                max_count = count[response]\n                max_cat = response\n        return max_cat, max_count\n    \n    def find_categories(responses, category_count):\n        categories = []\n        for cat, count in category_count.items():\n            if count >= len(responses) - category_count[cat]:\n                categories.append(cat)\n        return categories\n    \n    N = int(stdin.readline().strip())\n    responses = [stdin.readline().strip() for _ in range(N)]\n    \n    category_count = {}\n    for response in responses:\n        if response not in category_count:\n            category_count[response] = 1\n        else:\n            category_count[response] += 1\n    \n    max_cat, max_count = get_max_category(responses)\n    categories = find_categories(responses, category_count)\n    \n    if max_count < N // 2:\n        print(\"None\")\n    else:\n        if max_cat in categories:\n            print(max_cat)\n        else:\n            categories.sort()\n            for cat in categories:\n                print(cat)",
        "test": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost mummy witch\" ",
        "num_ids": 770
    },
    {
        "number": 4911,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    attributes, songs, n, sort_commands = parse_input(stdin)\n    songs.sort(key=lambda x: x[attributes.index(sort_commands[0])])\n\n    for i in range(1, n):\n        print_songs(attributes, songs)\n        print()\n        secondary_attribute = attributes.index(sort_commands[i])\n        songs.sort(key=lambda x: (x[attributes.index(sort_commands[i-1])], x[secondary_attribute]))\n\n    print_songs(attributes, songs)\n    return \"\"\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 475
    },
    {
        "number": 4912,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    h, w, n = map(int, stdin.split('\\n')[0].split())\n    bricks = sorted(map(int, stdin.split('\\n')[1].split()))\n    layer_height = 0\n    layers = 0\n\n    for brick in bricks:\n        if layer_height + brick <= h:\n            layer_height += brick\n        else:\n            layers += 1\n            layer_height = brick\n            if layer_height > h:\n                break\n\n    if layers <= w - 1:\n        return 'YES'\n    else:\n        return 'NO'",
        "test": "assert solution(\"4 10 7\\n5 5 5 5 5 5 5\") == \"YES\"",
        "num_ids": 2629
    },
    {
        "number": 4913,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    vaccinated = []\n    control = []\n\n    for i in range(1, N + 1):\n        if lines[i][0] == \"Y\":\n            vaccinated.append(lines[i][1:])\n        else:\n            control.append(lines[i][1:])\n\n    efficacy_A = \"Not Effective\"\n    efficacy_B = \"Not Effective\"\n    efficacy_C = \"Not Effective\"\n\n    # Calculate efficacy against strain A\n    vaccinated_infected = sum(1 for x in vaccinated if x[0] == \"Y\")\n    control_infected = sum(1 for x in control if x[0] == \"Y\")\n\n    if vaccinated_infected < control_infected:\n        efficacy_A = (1 - vaccinated_infected / N) / (1 - control_infected / N) * 100\n\n    # Calculate efficacy against strain B\n    vaccinated_infected = sum(1 for x in vaccinated if x[1] == \"Y\")\n    control_infected = sum(1 for x in control if x[1] == \"Y\")\n\n    if vaccinated_infected < control_infected:\n        efficacy_B = (1 - vaccinated_infected / N) / (1 - control_infected / N) * 100\n\n    # Calculate efficacy against strain C\n    vaccinated_infected = sum(1 for x in vaccinated if x[2] == \"Y\")\n    control_infected = sum(1 for x in control if x[2] == \"Y\")\n\n    if vaccinated_infected < control_infected:\n        efficacy_C = (1 - vaccinated_infected / N) / (1 - control_infected / N) * 100\n\n    return f\"{efficacy_A}\\n{efficacy_B}\\n{efficacy_C}\"",
        "test": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\\nYYNY\") == \"Not Effective 66.666667 50.000000\" ",
        "num_ids": 1591
    },
    {
        "number": 4914,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    def count_correct_answers(sequence):\n        return sum(correct_answers[i % len(correct_answers)] == sequence[i] for i in range(len(correct_answers)))\n\n    N, correct_answers = int(stdin.readline().strip()), stdin.readline().strip()\n\n    sequences = [\n        \"ABCABCABCABC\",\n        \"BABCCBABCCBAB\",\n        \"CCAABBAACC\",\n    ]\n\n    max_correct_answers = 0\n    winners = []\n\n    for sequence in sequences:\n        correct = count_correct_answers(sequence)\n        if correct > max_correct_answers:\n            max_correct_answers = correct\n            winners = [sequence[0]]\n        elif correct == max_correct_answers:\n            winners.append(sequence[0])\n\n    return f\"{max_correct_answers}\\n\" + \"\\n\".join(sorted(winners))",
        "test": "assert solution(\"12\\nACCBACBABBAC\") == \"9\\nGoran\"",
        "num_ids": 1183
    },
    {
        "number": 4915,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    log = {}\n    total_time = 0\n    num_solved = 0\n    wrong_submissions = {}\n\n    for line in lines:\n        if line == '-1':\n            break\n        minute, problem, result = line.split(' ')\n        minute = int(minute)\n\n        if problem not in log and result == 'right':\n            num_solved += 1\n            time_score = minute\n            if problem in wrong_submissions:\n                time_score += 20 * len(wrong_submissions[problem])\n                total_time += 20 * len(wrong_submissions[problem])\n                del wrong_submissions[problem]\n            time_score -= total_time\n            log[problem] = time_score\n            total_time += time_score\n        elif problem not in log and result == 'wrong':\n            if problem not in wrong_submissions:\n                wrong_submissions[problem] = []\n            wrong_submissions[problem].append(minute)\n\n    return f\"{num_solved} {total_time}\"",
        "test": "assert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n-1\") == \"4 502\"",
        "num_ids": 1067
    },
    {
        "number": 4916,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    art_installation = []\n    for _ in range(n):\n        art_installation.append(list(map(int, stdin.readline().split())))\n\n    def find_position(matrix, target):\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == target:\n                    return i, j\n        return None\n\n    def manhattan_distance(pos1, pos2):\n        return abs(pos1[0] - pos2[0]) + abs(pos1[1] - pos2[1])\n\n    total_distance = 0\n    for i in range(1, k + 1):\n        current_pos = find_position(art_installation, i)\n        if current_pos:\n            next_pos = find_position(art_installation, i + 1)\n            if next_pos:\n                total_distance += manhattan_distance(current_pos, next_pos)\n            else:\n                return -1\n        else:\n            return -1\n\n    return total_distance",
        "test": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\") == 5 ",
        "num_ids": 1095
    },
    {
        "number": 4917,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    intervals = stdin.split('\\n')[1:]\n    counts = [0] * 1001\n    for a, b in [list(map(int, i.split())) for i in intervals]:\n        for i in range(a, b + 1):\n            counts[i] += 1\n    max_count = max(counts)\n    if max_count == N:\n        return \"gunilla has a point\"\n    else:\n        return \"edward is right\"",
        "test": "assert solution(\"2\\n1 7\\n5 5\") == \"gunilla has a point\"",
        "num_ids": 728
    },
    {
        "number": 4918,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    input_data = stdin.split(\"\\n\")\n    n, q = map(int, input_data[0].split())\n    guests = [i for i in range(1, n+1)]\n    guests_groups = [(i,) for i in range(1, n+1)]\n    \n    # Process queries\n    output = []\n    for query in input_data[1:]:\n        if query[0] == 't':\n            a, b = map(int, query.split()[1:])\n            # Find the groups of a and b\n            group_a = [i for i, group in enumerate(guests_groups) if a in group][0]\n            group_b = [i for i, group in enumerate(guests_groups) if b in group][0]\n            # Merge the groups\n            if group_a != group_b:\n                guests_groups[group_a] += guests_groups[group_b]\n                guests_groups.pop(group_b)\n        else:\n            a = int(query.split()[1])\n            # Find the group of a\n            group_a = [i for i, group in enumerate(guests_groups) if a in group][0]\n            output.append(len(guests_groups[group_a]))\n    \n    return \"\\n\".join(map(str, output))",
        "test": "assert solution(\"10 11\\nt 1 10\\nt 1 2\\nt 1 3\\ns 1\\ns 2\\ns 3\\ns 4\\nt 5 6\\ns 5\\ns 6\\ns 10\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\" ",
        "num_ids": 1136
    },
    {
        "number": 4919,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    trips = {}\n    for i in range(n):\n        country, year = stdin.readline().strip().split()\n        year = int(year)\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n\n    q = int(stdin.readline().strip())\n    queries = [stdin.readline().strip().split() for _ in range(q)]\n\n    # Process queries\n    results = []\n    for query in queries:\n        country, k = query\n        k = int(k)\n        results.append(trips[country][k - 1])\n\n    # Output results\n    return \"\\n\".join(str(result) for result in results)",
        "test": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1982\\n2016\" ",
        "num_ids": 753
    },
    {
        "number": 4920,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    event_types = set(stdin)\n    total_itineraries = 0\n\n    for i in range(1, len(stdin) - 1):\n        first_event = stdin[i - 1]\n        last_event = stdin[i + 1]\n\n        if first_event != last_event and first_event not in event_types[:i] and last_event not in event_types[i:]:\n            total_itineraries += len(event_types) * (len(event_types) - 1)\n\n    return total_itineraries",
        "test": "assert solution(\"a\") == 0",
        "num_ids": 597
    },
    {
        "number": 4921,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    # Split input into lines\n    lines = stdin.split('\\n')\n    \n    # Create a set to store unique words\n    unique_words = set()\n    \n    # Initialize output string\n    output = \"\"\n    \n    # Iterate through each line\n    for line in lines:\n        # Split line into words\n        words = line.split()\n        \n        # Iterate through each word\n        for word in words:\n            # Convert word to lowercase\n            word = word.lower()\n            \n            # Check if word is not in unique_words\n            if word not in unique_words:\n                # Add word to output string\n                output += word + \" \"\n                \n                # Add word to unique_words set\n                unique_words.add(word)\n            else:\n                # Add period to output string\n                output += \".\" + \" \"\n    \n    # Remove trailing space from output string\n    output = output.rstrip()\n    \n    # Return output string\n    return output ",
        "test": "assert solution(\"\"\"Engineering will save the world from inefficiency",
        "num_ids": 1544
    },
    {
        "number": 4922,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    m, n = map(int, lines[0].split())\n    clauses = [list(map(int, line.split())) for line in lines[1:]]\n\n    satisfactory = False\n    if m >= 8:\n        satisfactory = True\n\n    return \"satisfactory\" if satisfactory else \"unsatisfactory\" ",
        "test": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"",
        "num_ids": 916
    },
    {
        "number": 4923,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    outcomes = list(map(int, stdin.split('\\n')[1].split()))\n\n    unique_outcomes = []\n    for i in range(n):\n        if outcomes.count(outcomes[i]) == 1:\n            unique_outcomes.append(i)\n\n    if len(unique_outcomes) > 0:\n        return str(outcomes.index(max(outcomes[unique_outcomes])))\n    else:\n        return \"none\"",
        "test": "assert solution(\"2\\n6 6\") == \"none\"",
        "num_ids": 607
    },
    {
        "number": 4924,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    current_time, desired_time = stdin.split('\\n')\n    current_time = list(map(int, current_time.split(':')))\n    desired_time = list(map(int, desired_time.split(':')))\n\n    if desired_time[0] < current_time[0]:\n        desired_time[0] += 24\n\n    time_difference = [desired_time[i] - current_time[i] for i in range(3)]\n\n    for i in range(len(time_difference)):\n        if time_difference[i] < 0:\n            time_difference[i] += 60\n            time_difference[i-1] -= 1\n\n    time_difference[0] %= 24\n\n    return f\"{time_difference[0]:02d}:{time_difference[1]:02d}:{time_difference[2]:02d}\"",
        "test": "assert solution(\"20:00:00\\n04:00:00\") == \"08:00:00\"",
        "num_ids": 1159
    },
    {
        "number": 4925,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    l, n = map(int, stdin.split())\n    return str((l + n - 1) // n)",
        "test": "assert solution(\"10 10\") == \"1\"",
        "num_ids": 339
    },
    {
        "number": 4926,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    e = 1\n    for i in range(1, n+1):\n        e += 1/factorial(i)\n    return format(e, '.12f')\n\ndef",
        "test": "assert solution(1000) == 2.7182818284590452353602875",
        "num_ids": 576
    },
    {
        "number": 4927,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = map(int, stdin.split())\n    if P % (2 * N) < Q % (2 * N):\n        return \"paul\"\n    else:\n        return \"opponent\"",
        "test": "assert solution('5 3 7') == 'paul'",
        "num_ids": 400
    },
    {
        "number": 4928,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    \n    # Calculate the maximum number of pieces the chessboard can be divided into\n    # By making N horizontal cuts and N vertical cuts, we can create up to (N+1)^2 pieces\n    max_pieces = (N+1)**2\n    \n    return str(max_pieces)",
        "test": "assert solution(4) == 8",
        "num_ids": 366
    },
    {
        "number": 4929,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s, p = stdin.split('\\n')\n\n    if s == p:\n        return \"Yes\"\n\n    if len(s) == len(p) + 1 and s[1:] == p and s[0].isdigit():\n        return \"Yes\"\n\n    if len(s) == len(p) + 1 and s[:-1] == p and s[-1].isdigit():\n        return \"Yes\"\n\n    if s.lower() == p.lower():\n        return \"Yes\"\n\n    return \"No\"\n\nstdin = \"\"\"\n123\n123a\n\"\"\"\n\nprint(solution(stdin.strip())) ",
        "test": "assert solution(\"123\\n123a\") == \"No\"",
        "num_ids": 686
    },
    {
        "number": 4930,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    words = stdin.split(' ')\n    decoded_words = []\n    \n    for word in words:\n        decoded_word = ''\n        i = 0\n        while i < len(word):\n            if word[i] in vowels:\n                decoded_word += word[i] + 'p' + word[i]\n                i += 1\n            else:\n                decoded_word += word[i]\n                i += 1\n        decoded_words.append(decoded_word)\n    \n    return ' '.join(decoded_words)",
        "test": "assert solution(\"pepikapipino pepipapaya\") == \"kapi kini pepipapaya\"",
        "num_ids": 748
    },
    {
        "number": 4931,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if Y == 1:\n        return str(X)\n    else:\n        # Calculate the temperature where both scales are the same\n        temp = (X * Y) / (Y - 1)\n        # Check if the temperature is within the given limits\n        if abs(temp) <= 100:\n            return str(temp)\n        else:\n            return \"IMPOSSIBLE\"",
        "test": "assert solution(\"0 1\") == \"0\"",
        "num_ids": 825
    },
    {
        "number": 4932,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    a, b, c, d, p, m, g = input_list\n    \n    postman_attack = (p % (a + b) <= a) or (p % (c + d) <= c)\n    milkman_attack = (m % (a + b) <= a) or (m % (c + d) <= c)\n    garbage_man_attack = (g % (a + b) <= a) or (g % (c + d) <= c)\n    \n    if postman_attack and milkman_attack and garbage_man_attack:\n        return \"both\\none\\nnone\"\n    elif postman_attack and milkman_attack:\n        return \"both\\none\\nnone\"\n    elif postman_attack and garbage_man_attack:\n        return \"both\\nnone\\none\"\n    elif milkman_attack and garbage_man_attack:\n        return \"none\\nboth\\none\"\n    elif postman_attack:\n        return \"both\\nnone\\nnone\"\n    elif milkman_attack:\n        return \"none\\nboth\\nnone\"\n    elif garbage_man_attack:\n        return \"none\\nnone\\nboth\"\n    else:\n        return \"none\\nnone\\nnone\"",
        "test": "assert solution(\"2 2 3 3\\n1 3 4\") == \"both\\none\\nnone\"",
        "num_ids": 1138
    },
    {
        "number": 4933,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    nums = list(map(int, stdin.split()))\n\n    # Sort the numbers\n    nums.sort()\n\n    # Calculate the common difference\n    diff = nums[1] - nums[0]\n\n    # Calculate the missing number\n    missing_num = nums[-1] + diff\n\n    return str(missing_num)",
        "test": "assert solution(\"4 6 8\") == \"10\"",
        "num_ids": 365
    },
    {
        "number": 4934,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    h, v = map(int, stdin.split())\n    deg = math.radians(v)\n    ladder_len = h / math.sin(deg)\n    return str(math.ceil(ladder_len))",
        "test": "assert solution(\"1 89\") == \"2\"",
        "num_ids": 377
    },
    {
        "number": 4935,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_velocity(g, D, theta):\n        return D * g * cos(radians(theta)) / (1 + D / 2 * g * sin(radians(theta)) ** 2)\n    \n    N, g = map(float, stdin.split())\n    N = int(N)\n    segments = []\n    for _ in range(N):\n        D, theta = map(float, input().split())\n        segments.append((D, theta))\n    \n    velocities = [calculate_velocity(g, D, theta) for D, theta in segments]\n    return '\\n'.join(str(v) for v in velocities)",
        "test": "assert solution(\"4 9.8\\n10 80\\n20 60\\n30 45\\n40 30\") == \"7.0710678118654755\\n7.0710678118654755\\n7.0710678118654755\\n7.0710678118654755\"",
        "num_ids": 1192
    },
    {
        "number": 4936,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, temps = int(stdin.split('\\n')[0]), list(map(int, stdin.split('\\n')[1].split()))\n    if n % 2 == 0:\n        start_day, max_temp = 1, float('inf')\n        for i in range(n - 1):\n            curr_max_temp = max(temps[i:i + 2])\n            if curr_max_temp < max_temp:\n                max_temp = curr_max_temp\n                start_day = i + 1\n        return f\"{start_day} {max_temp}\"\n    else:\n        start_day, max_temp = 1, float('inf')\n        for i in range(n - 2):\n            curr_max_temp = max(temps[i:i + 3])\n            if curr_max_temp < max_temp:\n                max_temp = curr_max_temp\n                start_day = i + 1\n        return f\"{start_day} {max_temp}\"",
        "test": "assert solution(\"4\\n25 28 30 29\") == \"1 28\"",
        "num_ids": 886
    },
    {
        "number": 4937,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split('\\n')[0].split())\n    e = list(map(int, stdin.split('\\n')[1].split()))\n    e.sort()\n    count = 0\n    while a >= 0:\n        a -= e.pop()\n        count += 1\n    return str(count - 1)",
        "test": "assert solution(\"4 8\\n3 2 5 1\") == \"2\"",
        "num_ids": 593
    },
    {
        "number": 4938,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    max_diff, gender_queue = stdin.split(\"\\n\")\n    max_diff = int(max_diff)\n\n    men = 0\n    women = 0\n    count = 0\n\n    for gender in gender_queue:\n        if gender == \"W\":\n            women += 1\n        else:\n            men += 1\n\n        if abs(women - men) > max_diff:\n            break\n        count += 1\n\n    return str(count)",
        "test": "assert solution(\"1\\nMWWMWMMWM\") == \"9\"",
        "num_ids": 2574
    },
    {
        "number": 4939,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    commands = stdin.split()[2:]\n    egg_holder = 0\n    egg_positions = [0] * n\n    for command in commands:\n        if command == \"undo\":\n            egg_holder = egg_positions[-1]\n            egg_positions.pop()\n        else:\n            if command.startswith(\"undo\"):\n                m = int(command.split()[1])\n                for _ in range(m):\n                    egg_holder = egg_positions[-1]\n                    egg_positions.pop()\n            else:\n                t = int(command)\n                egg_holder = (egg_holder + t) % n\n                egg_positions.append(egg_holder)\n    return str(egg_holder)",
        "test": "assert solution(\"20 20\\n-10000 10000 -10000 10000 undo 20 undo 10 undo 30 undo 40\") == \"19\\n\"",
        "num_ids": 957
    },
    {
        "number": 4940,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, stdin.readline().split())))\n\n    T = []\n    for i in range(N):\n        t = 0\n        for j in range(M):\n            t += P[i][j]\n        T.append(t)\n\n    return \" \".join(map(str, T))",
        "test": "assert solution(\"2 3\\n1 2 3\\n3 2 1\\n\") == \"6 7\" ",
        "num_ids": 585
    },
    {
        "number": 4941,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s, m = map(int, stdin.split('\\n', 2)[:2])\n    s_words = stdin.split('\\n', 2)[-1].split()[:n]\n    translations = stdin.split('\\n')[3:]\n\n    possible_translations = []\n    correct_translations = 0\n    incorrect_translations = 0\n\n    for i in range(0, len(s_words)):\n        word_translations = [t for t in translations if t.startswith(s_words[i])]\n        possible_translations.append(word_translations)\n\n        correct_translations += len([t for t in word_translations if t.split()[-1] == 'correct'])\n        incorrect_translations += len([t for t in word_translations if t.split()[-1] == 'incorrect'])\n\n    if len(possible_translations) == 1:\n        translation = ' '.join(t.split()[1] for t in possible_translations[0])\n        if correct_translations == 1:\n            return f'{translation}\\ncorrect'\n        else:\n            return f'{translation}\\nincorrect'\n\n    return f'{correct_translations} correct\\n{incorrect_translations} incorrect'",
        "test": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\" ",
        "num_ids": 1273
    },
    {
        "number": 4942,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    t = list(map(int, stdin.split('\\n')[1].split()))\n    t.sort()\n    return str(sum(t)) ",
        "test": "assert solution(\"5\\n10 10 10 10 10\\n\") == \"50\"",
        "num_ids": 560
    },
    {
        "number": 4943,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    polygon = []\n    for i in range(1, n + 1):\n        x, y = map(float, lines[i].split())\n        polygon.append((x, y))\n    area = int(lines[n + 1])\n\n    def get_area(x, y):\n        abs_area = abs(x * y)\n        return abs_area / 2\n\n    def get_new_coordinates(x1, y1, x2, y2, k):\n        x = (x1 + x2) / 2\n        y = (y1 + y2) / 2\n        new_x = x + (x1 - x) * k\n        new_y = y + (y1 - y) * k\n        return new_x, new_y\n\n    def get_k(area, polygon):\n        polygon_area = get_area(*polygon[0], *polygon[1])\n        for i in range(1, n):\n            polygon_area += get_area(*polygon[i], *polygon[i + 1])\n        return (area / polygon_area) ** 0.5\n\n    k = get_k(area, polygon)\n\n    new_polygon = []\n    for i in range(n):\n        x1, y1 = polygon[i]\n        x2, y2 = polygon[(i + 1) % n]\n        new_x, new_y = get_new_coordinates(x1, y1, x2, y2, k)\n        new_polygon.append((new_x, new_y))\n\n    for x, y in new_polygon:\n        print(\"{:.6f} {:.6f}\".format(x, y))\n\n    return \"\"\n",
        "test": "assert solution(\"\"\"3",
        "num_ids": 1725
    },
    {
        "number": 4944,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    # If n is 1, only one day is needed\n    if n == 1:\n        return \"1\"\n\n    # Initialize variables\n    days = 0\n    printers = 1\n\n    # Calculate the minimum number of days needed to print n statues\n    while printers * 2 < n:\n        days += 1\n        printers *= 2\n\n    # If there are less than n printers available, an additional day is needed\n    if printers < n:\n        days += 1\n\n    return str(days)",
        "test": "assert solution(\"1\\n\") == \"1\"",
        "num_ids": 518
    },
    {
        "number": 4945,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    a, b, m, sigma = map(int, stdin.split())\n    \n    # Initialize the maximum rent as 0\n    max_rent = 0\n    \n    # Iterate through all possible square footages and smart bulbs\n    for x in range(1, m + 1):\n        for y in range(1, m + 1):\n            # Check if the constraints are satisfied\n            if x >= 1 and y >= 1 and x + y <= m and 2 * x + y >= sigma:\n                # Calculate the rent for the current combination of x and y\n                rent = a * x + b * y\n                \n                # Update the maximum rent if necessary\n                if rent > max_rent:\n                    max_rent = rent\n                    \n    return str(max_rent)",
        "test": "assert solution(\"3 1\\n12 16\\n\") == \"34\" ",
        "num_ids": 592
    },
    {
        "number": 4946,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    langs = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    awkwardness = n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if langs[i] == langs[j]:\n                awkwardness = min(awkwardness, abs(i - j))\n\n    return str(awkwardness)",
        "test": "assert solution(\"5\\n1 2 3 4 5\") == \"5\"",
        "num_ids": 773
    },
    {
        "number": 4947,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    roman_paces = int(round(1000 * x * (5280 / 4854)))\n    return str(roman_paces)",
        "test": "assert solution(\"1.0\") == \"1088\"",
        "num_ids": 318
    },
    {
        "number": 4948,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.readline().split())\n    holes = []\n    for _ in range(n):\n        r, x, y, z = map(int, stdin.readline().split())\n        holes.append((r, x, y, z))\n\n    # Sort the holes by their z-coordinates in ascending order\n    holes.sort(key=lambda x: x[3])\n\n    # Calculate the total weight of the cheese block\n    total_weight = 1000000000000 * 1000000000000 * 1000000000000 - sum(4 / 3 * 3.14159265359 * r**3 for r, x, y, z in holes)\n\n    # Calculate the weight of each slice\n    slice_weight = total_weight / s\n\n    # Initialize the current weight and slice thickness\n    current_weight = 0\n    slice_thickness = 0\n\n    for i in range(s):\n        # Calculate the slice thickness for the current slice\n        while current_weight < slice_weight:\n            slice_thickness += 1\n            for r, x, y, z in holes:\n                if z + r <= slice_thickness:\n                    current_weight += 4 / 3 * 3.14159265359 * r**3\n        current_weight -= slice_weight\n        print(\"{:.10f}\".format(slice_thickness))\n        slice_thickness = 0\n\n    return \"\"",
        "test": "assert solution(\"\"\"1 4",
        "num_ids": 1711
    },
    {
        "number": 4949,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, W, H = map(int, lines[0].split())\n    matches = list(map(int, lines[1:]))\n\n    result = []\n    for match in matches:\n        if match <= min(W, H):\n            result.append(\"DA\")\n        else:\n            result.append(\"NE\")\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"10 100 100\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"DA\\nDA\\nDA\\nDA\\nDA\\nDA\\nDA\\nDA\\nDA\\nDA\"",
        "num_ids": 965
    },
    {
        "number": 4950,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    inputs = list(map(lambda x: tuple(map(int, x.split())), stdin.split('\\n')[1:]))\n    max_speed = 0\n    for i in range(1, n):\n        time_diff = inputs[i][0] - inputs[i - 1][0]\n        distance_diff = inputs[i][1] - inputs[i - 1][1]\n        if time_diff > 0:\n            speed = distance_diff / time_diff\n            max_speed = max(max_speed, speed)\n    return str(int(max_speed))",
        "test": "assert solution(\"2\\n0 0\\n7 42\") == \"6\"",
        "num_ids": 860
    },
    {
        "number": 4951,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(assumptions: list, conclusion: str) -> bool:\n        if not assumptions:\n            return True\n        for assumption in assumptions:\n            if assumption not in known_theorems:\n                return False\n        known_theorems.add(conclusion)\n        return True\n\n    n = int(stdin.split('\\n')[0])\n    stdin = stdin.split('\\n')[1:]\n\n    known_theorems = set()\n    for i in range(n):\n        line = stdin[i].split(' ')\n        assumptions = line[:-2]\n        conclusion = line[-1]\n        if not is_valid(assumptions, conclusion):\n            return str(i + 1)\n    return \"correct\" ",
        "test": "assert solution(\"5\\n-> ALICE\\n-> BOB\\n-> CHARLIE\\n-> DAVE\\n-> EVE\\nEVE DAVE -> FRED\\nDAVE EVE -> FRED\\n\") == \"correct\"",
        "num_ids": 1069
    },
    {
        "number": 4952,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    votes = {}\n    for line in stdin.split('\\n')[:-1]:\n        if line not in votes:\n            votes[line] = 1\n        else:\n            votes[line] += 1\n    \n    max_votes = 0\n    winner = None\n    for candidate, num_votes in votes.items():\n        if num_votes > max_votes:\n            max_votes = num_votes\n            winner = candidate\n            \n    for candidate, num_votes in votes.items():\n        if num_votes == max_votes and candidate != winner:\n            return \"Runoff!\"\n    \n    return winner",
        "test": "assert solution(\"\"\"John Doe\\nJane Smith\\nJohn Doe\\nJohn Doe\\nJohn Doe\\nJane Smith\\nJane Smith\\nJane Smith\\n***\"\"\") == \"Runoff!\"",
        "num_ids": 766
    },
    {
        "number": 4953,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    num_chars = int(lines[0])\n    char_languages = {}\n    language_chars = {}\n\n    for i in range(1, num_chars + 1):\n        name, language, *other_languages = lines[i].split()\n        char_languages[name] = [language] + other_languages\n        for lang in char_languages[name]:\n            if lang not in language_chars:\n                language_chars[lang] = set()\n            language_chars[lang].add(name)\n\n    def can_converse(char1, char2):\n        return any(lang in language_chars and (char2 in language_chars[lang] or can_converse(char2, next_char)) for lang in char_languages[char1] for next_char in language_chars[lang])\n\n    num_removed = 0\n    while True:\n        removed = set()\n        for char1 in char_languages:\n            for char2 in char_languages:\n                if char1 != char2 and not can_converse(char1, char2):\n                    removed.add(char1)\n                    break\n        if not removed:\n            break\n        char_languages = {char: languages for char, languages in char_languages.items() if char not in removed}\n        num_removed += len(removed)\n\n    return num_removed",
        "test": "assert solution(\"\"\"7",
        "num_ids": 1219
    },
    {
        "number": 4954,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, B, H, W = map(int, lines[0].split())\n    min_cost = float(\"inf\")\n\n    for i in range(1, H + 1):\n        p, beds = map(int, lines[i * 2 - 1].split()), lines[i * 2].split()\n        total_cost = sum(p) * N\n\n        if total_cost > B:\n            continue\n\n        beds_available = sum(map(int, beds))\n        if beds_available < N:\n            continue\n\n        min_cost = min(min_cost, total_cost)\n\n    return str(min_cost if min_cost != float(\"inf\") else \"stay home\")",
        "test": "assert solution(\"2 1000 1 1\\n100\\n1\\n100\\n1\") == \"stay home\"",
        "num_ids": 1066
    },
    {
        "number": 4955,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, notes = map(str.strip, stdin.split('\\n'))\n    n = int(n)\n    notes = notes.split()\n\n    scales = [\n        \"A# C D# F\",\n        \"B C# D# F#\",\n        \"C D E F G\",\n        \"C# D# F G#\",\n        \"D E F# A\",\n        \"E F# A B\",\n        \"F G A C\",\n        \"F# G# A# C#\",\n        \"G A B D\",\n        \"A B C# E\",\n        \"A# C D E F\",\n        \"B C# D# F G\"\n    ]\n\n    possible_scales = set()\n\n    for scale in scales:\n        scale_notes = scale.split()\n        matches = 0\n        for note in notes:\n            if note in scale_notes:\n                matches += 1\n            elif note == scale_notes[-1] and matches == n - 1:\n                break\n            else:\n                matches = 0\n                break\n        if matches == n:\n            possible_scales.add(scale)\n\n    if len(possible_scales) == 0:\n        return \"none\"\n    else:\n        return \" \".join(sorted(possible_scales))",
        "test": "assert solution(\"6\\nC D E F G A B\") == \"none\"",
        "num_ids": 1078
    },
    {
        "number": 4956,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    eastgotska_count = 0\n\n    for word in words:\n        if 'ae' in word:\n            eastgotska_count += 1\n\n    percentage = (eastgotska_count / len(words)) * 100\n\n    if percentage >= 40:\n        return 'dae ae ju traeligt va'\n    else:\n        return 'haer talar vi rikssvenska'",
        "test": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"",
        "num_ids": 632
    },
    {
        "number": 4957,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                if (i > 0 and grid[i - 1][j] == 'E') or (j > 0 and grid[i][j - 1] == 'E'):\n                    grid[i][j] = 'E'\n    return '\\n'.join([''.join(row) for row in grid])",
        "test": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"",
        "num_ids": 1167
    },
    {
        "number": 4958,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    input_str = stdin.split()\n    boxes = [int(x) for x in input_str[:6]]\n    tower_heights = [int(x) for x in input_str[6:]]\n\n    # Sort boxes in decreasing order\n    boxes.sort(reverse=True)\n\n    # Find the two towers\n    towers = []\n    for height in tower_heights:\n        tower = []\n        for box in boxes:\n            if sum(tower) + box == height:\n                tower.append(box)\n        towers.append(tower)\n\n    # Sort boxes in each tower in decreasing order\n    towers[0].sort(reverse=True)\n    towers[1].sort(reverse=True)\n\n    # Combine the two towers\n    output = towers[0] + towers[1]\n\n    # Convert output to string\n    output_str = ' '.join([str(x) for x in output])\n\n    return output_str",
        "test": "assert solution(\"10 20 30 40 50 60 70 80\") == \"80 70 60 50 40 30\"",
        "num_ids": 1523
    },
    {
        "number": 4959,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    e, f, c = map(int, stdin.split())\n    soda_count = 0\n\n    while e >= c:\n        soda_count += 1\n        e -= c\n\n    e += f\n\n    while e >= c:\n        soda_count += 1\n        e -= c\n\n    return str(soda_count)",
        "test": "assert solution(\"0 0 10\") == \"0\"  # Example 4",
        "num_ids": 418
    },
    {
        "number": 4960,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    binary_to_octal = {\n        \"000\": \"0\",\n        \"001\": \"1\",\n        \"010\": \"2\",\n        \"011\": \"3\",\n        \"100\": \"4\",\n        \"101\": \"5\",\n        \"110\": \"6\",\n        \"111\": \"7\"\n    }\n\n    binary = stdin.zfill(3 * ((len(stdin) + 2) // 3))\n    octal = \"\"\n\n    for i in range(0, len(binary), 3):\n        group = binary[i:i + 3]\n        octal += binary_to_octal[group]\n\n    return octal",
        "test": "assert solution('1010') == '12'",
        "num_ids": 709
    },
    {
        "number": 4961,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    r, s = map(int, stdin.split())\n    seating = [list(input()) for _ in range(r)]\n    handshakes = 0\n\n    for i in range(r):\n        for j in range(s):\n            if seating[i][j] == \".\":\n                for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1), (i - 1, j - 1), (i - 1, j + 1), (i + 1, j - 1), (i + 1, j + 1)]:\n                    if 0 <= x < r and 0 <= y < s and seating[x][y] == \"o\":\n                        handshakes += 1\n\n    return str(handshakes)",
        "test": "assert solution(\"1 5\\n.....\") == 0",
        "num_ids": 1053
    },
    {
        "number": 4962,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def solution(stdin: str) -> str:\n    def find_drawer(drawer, drawers):\n        while drawer in drawers:\n            drawer = drawers[drawer]\n        return drawer\n\n    def move_item(drawer1, drawer2, drawers):\n        if drawer1 == drawer2:\n            return drawer1\n        if drawer1 in drawers:\n            drawers[drawer1] = find_drawer(drawer2, drawers)\n        else:\n            drawers[drawer2] = find_drawer(drawer1, drawers)\n        return drawer1\n\n    lines = stdin.split('\\n')\n    N, L = map(int, lines[0].split())\n    A = []\n    B = []\n    for i in range(1, N + 1):\n        A.append(int(lines[i].split()[0]))\n        B.append(int(lines[i].split()[1]))\n\n    drawers = {}\n    result = []\n\n    for i in range(N):\n        if A[i] not in drawers and B[i] not in drawers:\n            drawers[A[i]] = B[i]\n            result.append(\"LADICA\")\n        elif A[i] not in drawers:\n            result.append(\"LADICA\")\n        elif B[i] not in drawers:\n            result.append(\"LADICA\")\n        else:\n            drawer1 = A[i]\n            drawer2 = B[i]\n            if drawer1 in drawers and drawer2 in drawers:\n                if drawers[drawer1] == drawer2 and drawers[drawer2] == drawer1:\n                    result.append(\"LADICA\")\n                else:\n                    result.append(\"SMECE\")\n            else:\n                result.append(\"LADICA\")\n\n    return '\\n'.join(result)",
        "test": "assert solution(\"3 3\\n1 2\\n2 3\\n3 1\\n\") == \"LADICA\\nLADICA\\nLADICA\"",
        "num_ids": 1560
    },
    {
        "number": 4963,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, *diff = list(map(int, stdin.split()))\n    order = [1]\n    for i in range(n - 1):\n        idx = order[-1] + diff[i] + 1\n        order.insert(idx, idx)\n    return ' '.join(map(str, order))",
        "test": "assert solution(\"2\\n0\\n\") == \"1 2\"",
        "num_ids": 630
    },
    {
        "number": 4964,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    input_data = stdin.split('\\n')\n    N, H, L = map(int, input_data[0].split())\n    horror_list = set(map(int, input_data[1].split()))\n    similarities = [list(map(int, line.split())) for line in input_data[2:]]\n\n    # Initialize variables\n    horror_index = {i: float('inf') for i in range(N)}\n    for movie in horror_list:\n        horror_index[movie] = 0\n\n    # Update horror index for similar movies\n    for i in range(L):\n        a, b = similarities[i]\n        if a in horror_list:\n            horror_index[b] = min(horror_index[b], 1)\n        elif b in horror_list:\n            horror_index[a] = min(horror_index[a], 1)\n\n    # Find movie with highest horror index\n    max_horror_index = max(horror_index.values())\n    min_id = min([key for key, value in horror_index.items() if value == max_horror_index])\n\n    return str(min_id)",
        "test": "assert solution(\"\"\"6 3 5",
        "num_ids": 1121
    },
    {
        "number": 4965,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    temperatures = list(map(int, stdin.split('\\n')[1].split()))\n\n    if len(temperatures) != n:\n        return \"impossible\"\n\n    for i in range(n - 1):\n        min_index = i\n        for j in range(i + 1, n):\n            if temperatures[j] < temperatures[min_index]:\n                min_index = j\n        temperatures[i], temperatures[min_index] = temperatures[min_index], temperatures[i]\n\n    return ' '.join(map(str, temperatures))",
        "test": "assert solution(\"4\\n1 2 3 4\\n\") == \"4 3 2 1\"",
        "num_ids": 977
    },
    {
        "number": 4966,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = map(int, stdin.split()[0].split())\n    t = list(map(int, stdin.split()[1].split()))\n\n    def original_time(t: List[int], n: int, p: int) -> float:\n        time = 0\n        for i in range(n):\n            time += t[i + 1] - t[i]\n            time *= (100 + i * p) / 100\n        return time\n\n    T = original_time(t, n, p)\n    return f\"{T:.3f}\"",
        "test": "assert solution(\"1 100 10\\n1\") == \"1.000\"",
        "num_ids": 904
    },
    {
        "number": 4967,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    grid = [list(stdin.readline().strip()) for _ in range(n)]\n\n    spy_coords = [(r, c) for r in range(n) for c in range(n) if grid[r][c] == 'S']\n    safe_houses = [(r, c) for r in range(n) for c in range(n) if grid[r][c] == 'H']\n\n    max_distance = 0\n    for spy in spy_coords:\n        min_distance = float('inf')\n        for safe_house in safe_houses:\n            distance = abs(spy[0] - safe_house[0]) + abs(spy[1] - safe_house[1])\n            min_distance = min(min_distance, distance)\n        max_distance = max(max_distance, min_distance)\n\n    return str(max_distance)",
        "test": "assert solution(\"3\\n.H.\\n.S.\\n.H.\") == 0",
        "num_ids": 883
    },
    {
        "number": 4968,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, S, R = map(int, lines[0].split())\n    damaged_teams = set(map(int, lines[1].split()))\n    reserve_teams = set(map(int, lines[2].split()))\n\n    unplayable_teams = damaged_teams.union(reserve_teams)\n\n    for team in unplayable_teams:\n        if team - 1 in unplayable_teams:\n            unplayable_teams.add(team - 1)\n        if team + 1 in unplayable_teams:\n            unplayable_teams.add(team + 1)\n\n    return str(N - len(unplayable_teams))",
        "test": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"",
        "num_ids": 911
    },
    {
        "number": 4969,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    total_area = R ** 2\n    crust_area = C ** 2\n    cheese_area = total_area - crust_area\n    percent_cheese = (cheese_area / total_area) * 100\n    return '{:.12f}'.format(percent_cheese)\n\nstdin = input()\nprint(solution(stdin)) ",
        "test": "assert solution(\"3 1\") == \"78.787878788\"",
        "num_ids": 640
    },
    {
        "number": 4970,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    courses = [line.split() for line in stdin.split('\\n')[1:]]\n    \n    # Count the popularity of each combination\n    popularity = {}\n    for course in courses:\n        course_str = ' '.join(course)\n        popularity[course_str] = popularity.get(course_str, 0) + 1\n    \n    # Find the most popular combination\n    max_popularity = max(popularity.values())\n    \n    # Count the number of frosh taking the most popular combination\n    num_winners = sum(1 for count in popularity.values() if count == max_popularity)\n    \n    return str(num_winners)",
        "test": "assert solution(\"10\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\\n100 101 102 103 488\\n100 101 102 103 488\\n100 101 102 103 488\\n100 101 102 103 488\\n100 101 102 103 488\\n100 101 102 103 488\\n100 101 102 103 488\\n\") == \"1\" ",
        "num_ids": 1703
    },
    {
        "number": 4971,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    num = 0\n    ways = 0\n\n    while ways < 2:\n        num += 1\n        ways = 0\n        for i in range(1, num + 1):\n            cube = i ** 3\n            if num - cube <= 0:\n                break\n            if num == cube + (num - cube):\n                ways += 1\n\n        if num > m:\n            return \"none\"\n\n    return str(num - 1)",
        "test": "assert solution(\"123407\") == \"123406\"",
        "num_ids": 678
    },
    {
        "number": 4972,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    k = 0\n    while x % 2 == 0:\n        k += 1\n        x //= 2\n    for i in range(3, int(x**0.5) + 1, 2):\n        while x % i == 0:\n            k += 1\n            x //= i\n    if x > 2:\n        k += 1\n    return str(k)",
        "test": "assert solution(\"65536\") == \"16\"",
        "num_ids": 468
    },
    {
        "number": 4973,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(r, c):\n        return 1 <= r <= N and 1 <= c <= N\n\n    def bfs(board, start_r, start_c):\n        queue = [(start_r, start_c, 0)]\n        visited = set()\n\n        while queue:\n            r, c, depth = queue.pop(0)\n            visited.add((r, c))\n\n            if r == 1 and c == 1:\n                return depth\n\n            for dr, dc in [(-2, 1), (-2, -1), (2, 1), (2, -1), (-1, 2), (-1, -2), (1, 2), (1, -2)]:\n                new_r, new_c = r + dr, c + dc\n\n                if is_valid(new_r, new_c) and board[new_r - 1][new_c - 1] != '#' and (new_r, new_c) not in visited:\n                    queue.append((new_r, new_c, depth + 1))\n\n        return -1\n\n    N = int(stdin.readline().strip())\n    board = [list(stdin.readline().strip()) for _ in range(N)]\n\n    for r in range(N):\n        for c in range(N):\n            if board[r][c] == 'K':\n                return str(bfs(board, r + 1, c + 1))\n\n    return '-1'",
        "test": "assert solution(\"3\\n...\\n#..\\n.K.\") == -1",
        "num_ids": 1450
    },
    {
        "number": 4974,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.split())\n    booked_rooms = set()\n    \n    for _ in range(n):\n        booked_rooms.add(int(input()))\n    \n    for room in range(1, r + 1):\n        if room not in booked_rooms:\n            return str(room)\n    \n    return \"too late\"",
        "test": "assert solution(\"100 0\\n\") == \"1\"",
        "num_ids": 890
    },
    {
        "number": 4975,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    key_phrase, plaintext = stdin.split('\\n')\n\n    # Create encryption key table\n    key = ''.join(set(key_phrase.replace(' ', '')) - set('qQ'))\n    key = key.lower()\n    table = [key[i:i + 5] for i in range(0, 25, 5)]\n\n    # Replace Q with nothing\n    plaintext = plaintext.replace('q', '').lower()\n\n    # Apply first rule\n    while 'xx' in plaintext:\n        plaintext = plaintext.replace('xx', 'xax')\n\n    if plaintext.endswith('x'):\n        plaintext += 'a'\n\n    # Split plaintext into digraphs\n    digraphs = [plaintext[i:i + 2] for i in range(0, len(plaintext), 2)]\n\n    # Encrypt digraphs\n    encrypted_digraphs = []\n    for digraph in digraphs:\n        x, y = digraph\n        if x == y:\n            encrypted_digraphs.append('XA')\n        else:\n            row_x, col_x = divmod(table.index(x), 5)\n            row_y, col_y = divmod(table.index(y), 5)\n\n            if row_x == row_y:\n                encrypted_digraphs.append(table[row_x][(col_x + 1) % 5] + table[row_y][(col_y + 1) % 5])\n            elif col_x == col_y:\n                encrypted_digraphs.append(table[(row_x + 1) % 5][col_x] + table[(row_y + 1) % 5][col_y])\n            else:\n                encrypted_digraphs.append(table[row_x][col_y] + table[row_y][col_x])\n\n    # Join encrypted digraphs and return result\n    return ''.join(encrypted_digraphs).upper()",
        "test": "assert solution(\"test phrase\\nzebra cat dog fish\") == \"ZNXZFJTGKWFMV\"",
        "num_ids": 2014
    },
    {
        "number": 4976,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    input_list = stdin.split(\"\\n\")\n    dog_coord = list(map(float, input_list[0].split()[-2:]))\n    gopher_coord = list(map(float, input_list[0].split()[:2]))\n    hole_coords = [list(map(float, input_list[i].split())) for i in range(1, len(input_list))]\n\n    # Check if gopher can escape\n    can_escape = False\n    for hole_coord in hole_coords:\n        dog_dist = ((hole_coord[0] - dog_coord[0]) ** 2 + (hole_coord[1] - dog_coord[1]) ** 2) ** 0.5\n        gopher_dist = ((hole_coord[0] - gopher_coord[0]) ** 2 + (hole_coord[1] - gopher_coord[1]) ** 2) ** 0.5\n\n        if dog_dist > gopher_dist:\n            can_escape = True\n            break\n\n    # Return output\n    if can_escape:\n        return f\"The gopher can escape through the hole at ({hole_coord[0]:.3f},{hole_coord[1]:.3f}).\"\n    else:\n        return \"The gopher cannot escape.\"",
        "test": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"",
        "num_ids": 1764
    },
    {
        "number": 4977,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, t = map(int, stdin.split())\n\n    def is_valid(x, y, t):\n        if 0 <= x <= 1000 and 0 <= y <= 1000 and 0 <= t <= 10000:\n            return True\n        return False\n\n    def distance(x1, y1, x2, y2):\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    if not is_valid(a, b, t) or not is_valid(c, d, t):\n        return \"N\"\n\n    dist = distance(a, b, c, d)\n    if dist <= t:\n        return \"Y\"\n    else:\n        return \"N\"",
        "test": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"",
        "num_ids": 522
    },
    {
        "number": 4978,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    def spread_water(matrix):\n        new_matrix = [[cell for cell in row] for row in matrix]\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == \"V\":\n                    if i > 0 and matrix[i - 1][j] == \".\":\n                        new_matrix[i - 1][j] = \"V\"\n                    if i > 0 and j > 0 and matrix[i - 1][j - 1] == \".\" and matrix[i][j - 1] != \"#\":\n                        new_matrix[i - 1][j - 1] = \"V\"\n                    if i > 0 and j + 1 < len(matrix[0]) and matrix[i - 1][j + 1] == \".\" and matrix[i][j + 1] != \"#\":\n                        new_matrix[i - 1][j + 1] = \"V\"\n        return new_matrix\n\n    def print_matrix(matrix):\n        for row in matrix:\n            print(\"\".join(row))\n\n    def main(stdin: str):\n        N, M = map(int, stdin.split())\n        matrix = [list(input()) for _ in range(N)]\n\n        while True:\n            new_matrix = spread_water(matrix)\n            if new_matrix == matrix:\n                break\n            matrix = new_matrix\n\n        print_matrix(matrix)\n\n    main(stdin) ",
        "test": "assert solution(\"6 8\\n..V......\\n.........\\nV....#...\\n......#..\\n...#.....\\n.##..#...\\n..........\") == \"..V......\\n.........\\nVV....#..\\n.VV.....#\\n.V#......\\n.##..#...\\n..........\" ",
        "num_ids": 1581
    },
    {
        "number": 4979,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    binary_representation = bin(n)[2:]\n    reversed_binary_representation = binary_representation[::-1]\n    reversed_number = int(reversed_binary_representation, 2)\n    return str(reversed_number)",
        "test": "assert solution(511) == 11110111",
        "num_ids": 359
    },
    {
        "number": 4980,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    buttons = lines[1:]\n    count = 0\n    for button in buttons:\n        if 'pink' in button.lower() or 'rose' in button.lower():\n            count += 1\n    if count == 0:\n        return \"I must watch Star Wars with my daughter\"\n    else:\n        return count ",
        "test": "assert solution(\"12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == 9, \"Test case 1 failed\"",
        "num_ids": 646
    },
    {
        "number": 4981,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    order = input()\n    numbers = {A: 'A', B: 'B', C: 'C'}\n    sorted_numbers = sorted([A, B, C])\n    result = [numbers[num] for num in sorted_numbers]\n    return ' '.join(result)\n\nstdin = \"1 5 3\"\nprint(solution(stdin)) ",
        "test": "assert solution(\"10 50 25\\nBCA\") == \"25 10 50\"",
        "num_ids": 694
    },
    {
        "number": 4982,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    events = []\n    for line in lines:\n        event = line.split()\n        if event[0] == 'buy':\n            _, x, y = event\n            events.append(('buy', int(x), int(y)))\n        elif event[0] == 'sell':\n            _, x, y = event\n            events.append(('sell', int(x), int(y)))\n        elif event[0] == 'split':\n            _, x = event\n            events.append(('split', int(x)))\n        elif event[0] == 'merge':\n            _, x = event\n            events.append(('merge', int(x)))\n        elif event[0] == 'die':\n            _, y = event\n            events.append(('die', int(y)))\n    \n    # Simulate stock transactions\n    shares = 0\n    cost = 0\n    for event in events:\n        if event[0] == 'buy':\n            x, y = event[1:]\n            shares += x\n            cost += x * y\n        elif event[0] == 'sell':\n            x, y = event[1:]\n            profit = y - cost / shares\n            shares -= x\n            cost -= x * y\n            profit *= shares\n            cost += profit * 0.7\n        elif event[0] == 'split':\n            x = event[1]\n            new_shares = shares * x\n            new_cost = cost / shares * x\n            profit = new_cost - cost\n            shares = new_shares\n            cost = new_cost\n            profit *= shares\n            cost += profit * 0.7\n        elif event[0] == 'merge':\n            x = event[1]\n            new_shares = shares // x\n            new_cost = cost / shares * new_shares\n            profit = new_cost - cost\n            shares = new_shares\n            cost = new_cost\n            profit *= shares\n            cost += profit * 0.7\n        elif event[0] == 'die':\n            y = event[1]\n            profit = y - cost / shares\n            profit *= shares\n            cost += profit * 0.7\n            break\n    \n    # Return result\n    return f\"{cost:.8f}\"",
        "test": "assert solution(\"buy 10 10\\nbuy 30 5\\nsell 31 8\\nsplit 2\\nmerge 8\\ndie 42\") == \"73.80000000\" ",
        "num_ids": 1816
    },
    {
        "number": 4983,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    while x > 9:\n        product = 1\n        for digit in str(x):\n            if digit != '0':\n                product *= int(digit)\n        x = product\n    return str(x)",
        "test": "assert solution(\"808\") == \"8\"",
        "num_ids": 1333
    },
    {
        "number": 4984,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_island(grid: list, row: int, col: int) -> bool:\n        if row < 0 or row >= len(grid) or col < 0 or col >= len(grid[0]):\n            return False\n        if grid[row][col] == \"L\":\n            grid[row][col] = \"X\"\n            for r, c in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                is_valid_island(grid, row + r, col + c)\n            return True\n        return False\n\n    def count_islands(grid: list) -> int:\n        count = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == \"L\":\n                    if is_valid_island(grid, i, j):\n                        count += 1\n        return count\n\n    lines = stdin.split(\"\\n\")\n    r, c = map(int, lines[0].split())\n    grid = [list(line) for line in lines[1:]]\n    return str(count_islands(grid))",
        "test": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == \"0\"",
        "num_ids": 1443
    },
    {
        "number": 4985,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0].split()[0])\n    dominant_suit = lines[0].split()[1]\n\n    points = 0\n    for i in range(1, len(lines), 4):\n        hand = lines[i:i+4]\n        for card in hand:\n            number = card[0]\n            suit = card[1]\n            if suit == dominant_suit:\n                points += scores_dict[number][0]\n            else:\n                points += scores_dict[number][1]\n\n    return str(points)\n\nscores_dict = {\n    'A': (11, 11),\n    'K': (4, 4),\n    'Q': (3, 3),\n    'J': (20, 2),\n    'T': (10, 10),\n    '9': (14, 0),\n    '8': (0, 0),\n    '7': (0, 0)\n}\n\nstdin = '''2 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH'''\n\nprint(solution(stdin)) ",
        "test": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"",
        "num_ids": 1343
    },
    {
        "number": 4986,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i] == t[i]:\n            i += 1\n        else:\n            result.append(s[i])\n            i += 2\n    return ''.join(result)",
        "test": "assert solution(\"let's test this\\nleett's ttess thhis\") == \"t'\"",
        "num_ids": 633
    },
    {
        "number": 4987,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    S, C, K = map(int, stdin.split('\\n')[0].split())\n    D = list(map(int, stdin.split('\\n')[1].split()))\n    machines = 1\n    current_machine = [D[0]]\n    for i in range(1, S):\n        if abs(D[i] - current_machine[-1]) <= K:\n            current_machine.append(D[i])\n        else:\n            if len(current_machine) == C:\n                machines += 1\n                current_machine = [D[i]]\n            else:\n                current_machine.append(D[i])\n    if current_machine and len(current_machine) == C:\n        machines += 1\n    return str(machines)",
        "test": "assert solution(\"10 5 1\\n1 1 1 1 1 1 1 1 1 1\") == \"1\"",
        "num_ids": 906
    },
    {
        "number": 4988,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def solution(stdin: str) -> str:\n    def factorial_last_digit(n: int) -> int:\n        if n == 1:\n            return 1\n        else:\n            return (factorial_last_digit(n - 1) * n) % 10\n\n    input_data = list(map(int, stdin.split()))\n    test_cases = input_data[0]\n    numbers = input_data[1:]\n\n    results = []\n    for number in numbers:\n        results.append(factorial_last_digit(number))\n\n    return \"\\n\".join(map(str, results))\n",
        "test": "assert solution(\"3\\n1\\n2\\n3\") == \"1\\n2\\n6\"",
        "num_ids": 675
    },
    {
        "number": 4989,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    n, *pieces = list(map(int, stdin.split()))\n    pieces.sort(reverse=True)\n\n    alice_total = sum(pieces[0::2])\n    bob_total = sum(pieces[1::2])\n\n    return f\"{alice_total} {bob_total}\"",
        "test": "assert solution(\"3\\n3 1 2\") == \"4 2\"",
        "num_ids": 719
    },
    {
        "number": 4990,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    b, k, g = map(int, stdin.split())\n    days = 0\n    \n    while k // g > 1:\n        k -= g\n        days += 1\n    \n    return str(days + 1)",
        "test": "assert solution(\"5 2 1\") == \"2\"",
        "num_ids": 395
    },
    {
        "number": 4991,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    def hailstone_recursive(n: int, sequence: List[int] = []) -> List[int]:\n        if n == 1:\n            sequence.append(1)\n            return sequence\n        elif n % 2 == 0:\n            sequence.append(n)\n            return hailstone_recursive(n // 2, sequence)\n        else:\n            sequence.append(n)\n            return hailstone_recursive(3 * n + 1, sequence)\n\n    n = int(stdin)\n    hailstone_sequence = hailstone_recursive(n)\n    return str(sum(hailstone_sequence))",
        "test": "assert solution(\"1000000000\") == 48518246671936838775",
        "num_ids": 532
    },
    {
        "number": 4992,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = [int(x) for x in stdin.split('\\n')[1].split()]\n    \n    if n == 1:\n        return \"1\"\n    if n == 2:\n        if s[0] + s[1] <= 100:\n            return \"1 2\"\n        else:\n            return \"impossible\"\n    else:\n        s_sorted = sorted(s, reverse=True)\n        visited = [False] * n\n        safe_order = []\n        pile = s_sorted[0]\n        for i in range(1, n):\n            if pile >= s_sorted[i]:\n                pile += s_sorted[i]\n                safe_order.append(i+1)\n                visited[i] = True\n            else:\n                for j in range(n):\n                    if not visited[j]:\n                        if pile >= s[j]:\n                            pile += s[j]\n                            safe_order.append(j+1)\n                            visited[j] = True\n                            if j == n-1:\n                                safe_order.append(1)\n                                return \" \".join(str(x) for x in safe_order)\n                        else:\n                            return \"impossible\"\n        \n        safe_order.append(1)\n        return \" \".join(str(x) for x in safe_order)",
        "test": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"",
        "num_ids": 897
    },
    {
        "number": 4993,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split(\"\\n\")\n    P, N = map(int, lines[0].split())\n    parts = lines[1:]\n\n    # Create dictionaries to store the parts and their counts\n    part_counts = {}\n    part_days = {}\n\n    # Iterate through the parts and count their occurrences\n    for i, part in enumerate(parts):\n        if part not in part_counts:\n            part_counts[part] = 0\n        part_counts[part] += 1\n        if part not in part_days:\n            part_days[part] = i + 1\n\n    # Find the part with the maximum count and return the day when it was replaced\n    max_count = 0\n    max_part = None\n    for part, count in part_counts.items():\n        if count > max_count:\n            max_count = count\n            max_part = part\n\n    # Check if all the parts have been replaced\n    if len(part_counts) == P:\n        return \"paradox avoided\"\n    else:\n        return str(part_days[max_part]) ",
        "test": "assert solution(\"1 2\\npropeller\\npropeller\") == \"paradox avoided\"",
        "num_ids": 1231
    },
    {
        "number": 4994,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for line in stdin.split(\"\\n\"):\n        x, y = map(int, line.split())\n        points.append((x, y))\n    \n    x1, y1, x2, y2, x3, y3 = points[0][0], points[0][1], points[1][0], points[1][1], points[2][0], points[2][1]\n    \n    x4 = x3 + (x2 - x1)\n    y4 = y3 + (y2 - y1)\n    \n    return f\"{x4} {y4}\"",
        "test": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"",
        "num_ids": 1307
    },
    {
        "number": 4995,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    def mean(numbers):\n        return sum(numbers) / len(numbers)\n\n    def calculate_sl_minutes(minutes, seconds):\n        return seconds / 60 - minutes\n\n    N = int(stdin.readline())\n    observations = [list(map(int, stdin.readline().split())) for _ in range(N)]\n    sl_minutes = [calculate_sl_minutes(minutes, seconds) for minutes, seconds in observations]\n\n    avg_sl_minutes = mean(sl_minutes)\n\n    if avg_sl_minutes <= 1:\n        return \"measurement error\"\n    else:\n        return round(avg_sl_minutes, 8)",
        "test": "assert solution(\"4\\n1 61\\n1 60\\n1 59\\n1 58\") == \"1.0\"",
        "num_ids": 772
    },
    {
        "number": 4996,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    encrypted_message, key = stdin.split('\\n')\n    alphabet = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    decrypted_message = []\n\n    for i in range(len(encrypted_message)):\n        if i % 2 == 0:\n            decrypted_message.append(alphabet[(alphabet.index(encrypted_message[i]) - alphabet.index(key[i])) % 26])\n        else:\n            decrypted_message.append(alphabet[(alphabet.index(encrypted_message[i]) + alphabet.index(key[i])) % 26])\n\n    return ''.join(decrypted_message)",
        "test": "assert solution(\"CPMCRYY\\nALBERTA\") == \"CALGARY\"",
        "num_ids": 1720
    },
    {
        "number": 4997,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    positions = [1, 2, 3]\n    for move in stdin:\n        if move == 'A':\n            positions[0], positions[1], positions[2] = positions[1], positions[0], positions[2]\n        elif move == 'B':\n            positions[0], positions[1], positions[2] = positions[0], positions[2], positions[1]\n        else:\n            positions[0], positions[1], positions[2] = positions[2], positions[1], positions[0]\n    return str(positions.index(1))",
        "test": "assert solution(\"ABCAB\") == \"2\"",
        "num_ids": 1565
    },
    {
        "number": 4998,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    areas = [A * B, A * C, A * D, B * C, B * D, C * D]\n    return str(max(areas))",
        "test": "assert solution(\"13 14 15 16\") == 196",
        "num_ids": 477
    },
    {
        "number": 4999,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    operations = 0\n    while a != b:\n        if a % 2 == 0 and a // 2 >= b:\n            a //= 2\n            operations += 1\n        else:\n            a += 1\n            operations += 1\n    return str(operations)",
        "test": "assert solution(\"1 1\") == \"0\"",
        "num_ids": 452
    }
]