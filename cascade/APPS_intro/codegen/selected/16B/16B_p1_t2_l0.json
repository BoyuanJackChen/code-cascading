[
    {
        "number": 4000,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4001,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10\n   ... 10 2 8 1 2 4 1 20 4 5\n   ... ''')\n    20 8\n    \"\"\"\n    n = int(stdin.readline())\n    divisors = [int(x) for x in stdin.readline().split()]\n    x, y = 1, 1\n    for d in divisors:\n        if d % x == 0:\n            x *= d\n        if d % y == 0:\n            y *= d\n    return str(x) +'' + str(y)\n",
        "test": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"",
        "num_ids": 155,
        "indeed": false
    },
    {
        "number": 4002,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    a = [list(map(int, stdin.split('\\n')[i])) for i in range(n)]\n    a = [x[:m // 2] for x in a]\n    a = [x for x in a if len(x) > 0]\n    a = [sum(x) for x in a]\n    a = [x for x in a if x % k == 0]\n    return str(max(a))\n",
        "test": "assert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 4003,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"",
        "num_ids": 51,
        "indeed": false
    },
    {
        "number": 4004,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    d = 0\n    for i in range(n):\n        if a[i] < 0:\n            d = -1\n            break\n        d = max(d, a[i])\n    if d == 0:\n        return -1\n    for i in range(n):\n        a[i] += d\n    d = 0\n    for i in range(n):\n        if a[i] < 0:\n            d = -1\n            break\n        d = max(d, a[i])\n    if d == 0:\n        return -1\n    for i in range(n):\n        a[i] -= d\n    d = 0\n    for i in range(n):\n        if a[i] < 0:\n            d = -1\n            break\n        d = max(d, a[i])\n    if d == 0:\n        return -1\n    for i in range(n):\n        a[i] += d\n    d = 0\n    for i in range(n):\n        if a[i] < 0:\n            d = -1\n            break\n        d = max(d, a[i])\n    if d == 0:\n        return -1\n    for i in range(n):\n        a[i] -= d\n    d = 0\n    for i in range(n):\n        if a[i] < 0:\n            d = -1\n            break\n        d = max(d, a[i])\n    if d == 0:\n        return -1\n    for i in range(n):\n        a[i] += d\n    d = 0\n    for i in range(n):\n        if a[i] < 0:\n            d = -1\n            break\n        d = max(d, a[i])\n    if d == 0:\n        return -1\n    for i in range(n):\n        a[i] -= d\n    d = 0\n    for i in range(n):\n        if a[i] < 0:\n            d = -1\n            break\n        d = max(d, a[i])\n    if d == 0:\n        return -1\n    for i in range(n):\n        a[i] += d\n    d = 0\n    for i in range(n):\n        if a[i] < 0:\n            d = -1\n            break\n        d = max(d, a[i])\n    if d == 0:\n        return -1\n    for i in range(n):\n        a[i] -= d\n    d = 0\n    for i in range(n):\n        if a[i] < 0:\n            d = -1\n            break\n        d = max(d, a[i])\n    if d == 0:\n        return -1\n    for i in range(n):\n        a[i] += d\n    d = 0\n    for i in range(n):\n        if a[i] < 0:\n            d = -1\n            break\n        d = max(d, a[i])\n    if d == 0:\n        return -1\n    for i in range(n):\n        a[i] -= d\n    d = 0\n    for i in range(n):\n        if a[i] < 0:\n            d = -1\n            break\n        d = max(d, a[i])\n    if d == 0:\n        return -1\n    for i in range(n):\n        a[i] += d\n    d = 0\n    for i in range(n):\n        if a[i] < 0:\n            d = -1\n            break\n        d = max(d, a[i])\n    if d == 0:\n        return -1\n    for i in range(n):\n        a[i] -= d\n    d = 0\n    for i in range(n):\n        if a[i] < 0:\n            d = -1\n            break\n        d = max(d, a[i])\n    if d == 0:\n        return -1\n    for i in range(n):\n        a[i] += d\n    d = 0\n    for i in range(n):\n        if a[i] < 0:\n            d = -1\n            break\n        d = max(d, a[i])\n    if d == 0:\n        return -1\n    for i in range(n):\n        a[i] -= d\n    d = 0\n    for i in range(n):\n        if a[i] < 0:\n            d = -1\n            break\n        d = max(d, a[i])\n    if d == 0:\n        return -1\n    for i in range(n):\n        a[i] += d\n    d = 0\n    for i in range(n):\n        if a[i] < 0:\n            d = -1\n            break\n        d = max(d, a[i])\n    if d == 0:\n        return -1\n    for i in range(n):\n        a[i] -= d\n    d = 0\n    for i in range(n):\n        if a[i] < 0:\n            d = -1\n            break\n        d = max(d, a[i])\n    if d == 0:\n        return -1\n    for i in range(n):\n        a[i] += d\n    d = 0\n    for i in range(n):\n        if a[i] < 0:\n            d = -1\n            break\n        d = max(d, a[i])\n    if d == 0:\n        return -1\n    for i in range(n):\n        a[i] -= d\n    d = 0\n    for i in range(n):\n        if a[i] < 0:\n            d = -1\n            break\n        d = max(d, a[i])\n    if d == 0:\n        return -1\n    for i in range(n):\n        a[i] += d\n    d = 0\n    for i in range(n):\n        if a[i",
        "test": "assert solution(\"5\\n2 2 5 2 5\") == \"3\"",
        "num_ids": 1492,
        "indeed": false
    },
    {
        "number": 4005,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    x1, y1, x2, y2 = sorted([x1, y1, x2, y2])\n    x3, y3, x4, y4 = sorted([x3, y3, x4, y4])\n    x5, y5, x6, y6 = sorted([x5, y5, x6, y6])\n    if x1 < x3 < x2 < x4 < x5 < x6:\n        if y1 < y3 < y2 < y4 < y5 < y6:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n",
        "test": "assert solution(\"2 2 4 4\") == \"NO\"",
        "num_ids": 248,
        "indeed": false
    },
    {
        "number": 4006,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if i % 10 == 0:\n            continue\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert solution(\"10\") == 19",
        "num_ids": 74,
        "indeed": false
    },
    {
        "number": 4007,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    f = list(map(int, stdin.readline().split()))\n    f = [0] + f + [0]\n    ans = [0] * n\n    for i in range(1, n + 1):\n        ans[i - 1] = i\n        for j in range(1, n + 1):\n            if f[i] == 0 or f[j] == 0:\n                continue\n            if f[i] == f[j]:\n                ans[i - 1] = j\n                break\n    return''.join(map(str, ans[:-1]))",
        "test": "assert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 4008,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if k == 1:\n        return \"NO\"\n    if k == n:\n        return \"YES\"\n    if k == 2:\n        if len(set(a)) == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 1:\n        if len(set(a)) == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 2:\n        if len(set(a)) == 2:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 3:\n        if len(set(a)) == 3:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 4:\n        if len(set(a)) == 4:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 5:\n        if len(set(a)) == 5:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 6:\n        if len(set(a)) == 6:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 7:\n        if len(set(a)) == 7:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 8:\n        if len(set(a)) == 8:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 9:\n        if len(set(a)) == 9:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 10:\n        if len(set(a)) == 10:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 11:\n        if len(set(a)) == 11:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 12:\n        if len(set(a)) == 12:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 13:\n        if len(set(a)) == 13:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 14:\n        if len(set(a)) == 14:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 15:\n        if len(set(a)) == 15:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 16:\n        if len(set(a)) == 16:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 17:\n        if len(set(a)) == 17:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 18:\n        if len(set(a)) == 18:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 19:\n        if len(set(a)) == 19:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 20:\n        if len(set(a)) == 20:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 21:\n        if len(set(a)) == 21:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 22:\n        if len(set(a)) == 22:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 23:\n        if len(set(a)) == 23:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 24:\n        if len(set(a)) == 24:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 25:\n        if len(set(a)) == 25:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 26:\n        if len(set(a)) == 26:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 27:\n        if len(set(a)) == 27:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 28:\n        if len(set(a)) == 28:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 29:\n        if len(set(a)) == 29:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 30:\n        if len(set(a)) == 30:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 31:\n        if len(set(a)) == 31:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 32:\n        if len(set(a)) == 32:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 33:\n        if len(set(a)) == 33:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 34:\n        if len(set(a)) == 34:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 35:\n        if len(set(a)) == 35:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 36:\n        if len(set(a)) == 36:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 37:\n        if len(set(a)) == 37:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n - 38:\n        if len(set(a)) == 38:\n            return \"YES\"\n        ",
        "test": "assert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"",
        "num_ids": 1544,
        "indeed": false
    },
    {
        "number": 4009,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split(' ')]\n    number = stdin[0]\n    while len(number) < n:\n        number = '0' + number\n    number = int(number)\n    while number % (10 ** x)!= 10 ** y:\n        number += 1\n    return str(number)",
        "test": "assert solution(\"11 5 1\") == \"3\"",
        "num_ids": 110,
        "indeed": false
    },
    {
        "number": 4010,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4011,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    f = list(map(int, stdin.readline().strip().split()))\n    max_num = 0\n    for i in range(n):\n        for j in range(i, n):\n            num = int(a[i:j + 1])\n            for k in range(9):\n                num = num * 10 + f[k]\n                if num > max_num:\n                    max_num = num\n    return str(max_num)\n",
        "test": "assert solution(\"11111\") == \"99999\"",
        "num_ids": 157,
        "indeed": false
    },
    {
        "number": 4012,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\n1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\")\n    1\n    1 1 3\n    102\n    114 228 456\n    4\n    4 8 16\n    6\n    18 18 18\n    1\n    100 100 100\n    7\n    1 22 22\n    2\n    1 19 38\n    8\n    6 24 48\n    \"\"\"\n    pass\n",
        "test": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\"",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 4013,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(max(a) - min(a))",
        "test": "assert solution(\"2\\n1 100000\") == \"0\"",
        "num_ids": 76,
        "indeed": false
    },
    {
        "number": 4014,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    days = [list(map(int, stdin.split())) for _ in range(m)]\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[0])\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(m):\n        for j in range(days[i][0], days[i][1] + 1):\n            dp[j] = max(dp[j], dp[j - 1] + 1)\n    if dp[-1] < m + 1:\n        return '-1'\n    return''.join(map(str, dp[1:]))\n",
        "test": "assert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"",
        "num_ids": 228,
        "indeed": false
    },
    {
        "number": 4015,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return str(0)\n    if n > m:\n        return str(-1)\n    if n % 3 == 0:\n        return str(n // 3)\n    if m % 3 == 0:\n        return str(m // 3)\n    if m % 3 == 1:\n        return str(m // 3 + n // 3 + 1)\n    if m % 3 == 2:\n        return str(m // 3 + n // 3 + 2)\n",
        "test": "assert solution(\"42 42\") == \"0\"",
        "num_ids": 152,
        "indeed": false
    },
    {
        "number": 4016,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin[:n]\n    s = t * k\n    return s\n",
        "test": "assert solution(\"cat\") == \"catcat\"",
        "num_ids": 60,
        "indeed": false
    },
    {
        "number": 4017,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n2 1 2 2\\n\")\n    3\n    >>> solution(\"4\\n8 3 5 2\\n\")\n    2\n    >>> solution(\"5\\n2 1 2 4 3\\n\")\n    0\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    s = sum(a)\n    good = [i for i in range(n) if a[i] == s - a[i]]\n    if good:\n        print(len(good))\n        print(*good)\n    else:\n        print(0)\n",
        "test": "assert solution(\"4\\n8 3 5 2\\n\") == \"2\\n1 4\"",
        "num_ids": 200,
        "indeed": false
    },
    {
        "number": 4018,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    if k > n:\n        return -1\n    if k == n:\n        return 0\n    if k == 1:\n        return n\n    if k == 2:\n        return n - 1\n    if k == 3:\n        return n - 2\n    if k == 4:\n        return n - 3\n    if k == 5:\n        return n - 4\n    if k == 6:\n        return n - 5\n    if k == 7:\n        return n - 6\n    if k == 8:\n        return n - 7\n    if k == 9:\n        return n - 8\n    if k == 10:\n        return n - 9\n    if k == 11:\n        return n - 10\n    if k == 12:\n        return n - 11\n    if k == 13:\n        return n - 12\n    if k == 14:\n        return n - 13\n    if k == 15:\n        return n - 14\n    if k == 16:\n        return n - 15\n    if k == 17:\n        return n - 16\n    if k == 18:\n        return n - 17\n    if k == 19:\n        return n - 18\n    if k == 20:\n        return n - 19\n    if k == 21:\n        return n - 20\n    if k == 22:\n        return n - 21\n    if k == 23:\n        return n - 22\n    if k == 24:\n        return n - 23\n    if k == 25:\n        return n - 24\n    if k == 26:\n        return n - 25\n    if k == 27:\n        return n - 26\n    if k == 28:\n        return n - 27\n    if k == 29:\n        return n - 28\n    if k == 30:\n        return n - 29\n    if k == 31:\n        return n - 30\n    if k == 32:\n        return n - 31\n    if k == 33:\n        return n - 32\n    if k == 34:\n        return n - 33\n    if k == 35:\n        return n - 34\n    if k == 36:\n        return n - 35\n    if k == 37:\n        return n - 36\n    if k == 38:\n        return n - 37\n    if k == 39:\n        return n - 38\n    if k == 40:\n        return n - 39\n    if k == 41:\n        return n - 40\n    if k == 42:\n        return n - 41\n    if k == 43:\n        return n - 42\n    if k == 44:\n        return n - 43\n    if k == 45:\n        return n - 44\n    if k == 46:\n        return n - 45\n    if k == 47:\n        return n - 46\n    if k == 48:\n        return n - 47\n    if k == 49:\n        return n - 48\n    if k == 50:\n        return n - 49\n    if k == 51:\n        return n - 50\n    if k == 52:\n        return n - 51\n    if k == 53:\n        return n - 52\n    if k == 54:\n        return n - 53\n    if k == 55:\n        return n - 54\n    if k == 56:\n        return n - 55\n    if k == 57:\n        return n - 56\n    if k == 58:\n        return n - 57\n    if k == 59:\n        return n - 58\n    if k == 60:\n        return n - 59\n    if k == 61:\n        return n - 60\n    if k == 62:\n        return n - 61\n    if k == 63:\n        return n - 62\n    if k == 64:\n        return n - 63\n    if k == 65:\n        return n - 64\n    if k == 66:\n        return n - 65\n    if k == 67:\n        return n - 66\n    if k == 68:\n        return n - 67\n    if k == 69:\n        return n - 68\n    if k == 70:\n        return n - 69\n    if k == 71:\n        return n - 70\n    if k == 72:\n        return n - 71\n    if k == 73:\n        return n - 72\n    if k == 74:\n        return n - 73\n    if k == 75:\n        return n - 74\n    if k == 76:\n        return n - 75\n    if k == 77:\n        return n - 76\n    if k == 78:\n        return n - 77\n    if k == 79:\n        return n - 78\n    if k == 80:\n        return n - 79\n    if k == 81:\n        return n - 80\n    if k == 82:\n        return n - 81\n    if k == 83:\n        return n - 82\n    if k == 84:\n        return n - 83\n    if k == 85:\n        return n - 84\n    if k == 86:\n        return n - 85\n    if k == 87:\n        return n - 86\n    if k == 88:\n        return n - 87\n    if k == 89:\n        return n - 88\n    if k == 90:\n        return n - 89\n    if k == 91:\n        return n - 90\n    if k == 92:\n        return n - 91\n    if k == 93:\n        return n - 92\n    if k == 94:\n        return n - 93\n    if k == 95:\n        return n - 94\n    if k == 96:\n        return n - 95\n    if k == 97:\n        return n - 96\n    if k == 98:\n        return n - 97\n    if k == 99:\n        return n - 98\n    if k == 100:\n        return n - 99\n    if k == 101:\n        return n - 100\n    if k == 102:\n        return n - 101\n    if k == 103:\n        return n - 102\n    if k == 104:\n        return n - 103\n    if k == 105:\n        return n - 104\n    if k == 106:\n        return n - 105\n    if k == 107:\n        return n - 106\n    if k == 108:\n        return n - 107\n    if k == 109:\n        return n - 108\n    if k == 110:\n        return n - 109\n    if k == 111:\n        return n - 110\n    if k == 112:\n        return n - 111\n    if k == 113:\n        return n - 112\n",
        "test": "assert solution(\"aaaaa\") == 15",
        "num_ids": 1530,
        "indeed": false
    },
    {
        "number": 4019,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n",
        "test": "assert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\"",
        "num_ids": 95,
        "indeed": false
    },
    {
        "number": 4020,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.split(':')\n    h2, m2 = stdin.split(':')\n    h1, m1, h2, m2 = int(h1), int(m1), int(h2), int(m2)\n    h3 = (h1 + h2) // 2\n    m3 = (m1 + m2) // 2\n    return f'{h3:02d}:{m3:02d}'\n",
        "test": "assert solution(\"11:10\") == \"11:11\"",
        "num_ids": 141,
        "indeed": false
    },
    {
        "number": 4021,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - 1)\n",
        "test": "assert solution('4') == 2",
        "num_ids": 30,
        "indeed": false
    },
    {
        "number": 4022,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 3\n   ... 2 6\n   ... 0 4\n   ... 3 3''')\n    '1'\n    >>> solution('''5\n   ... 2 6\n   ... 1 3\n   ... 0 4\n   ... 1 20\n   ... 0 4''')\n    '2'\n    >>> solution('''3\n   ... 4 5\n   ... 1 2\n   ... 9 20''')\n    '0'\n    >>> solution('''2\n   ... 3 10\n   ... 1 5\n   ... ''')\n    '7'\n    \"\"\"\n    n = int(stdin.readline())\n    segments = [tuple(map(int, line.split())) for line in stdin]\n    segments.sort()\n    intersections = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            intersections.append(segments[j][0] - segments[i][1])\n    intersections.sort()\n    return str(intersections[-1])\n",
        "test": "assert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 4023,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return \"YES\" if a[0] == 1 else \"NO\"\n    if n == 2:\n        return \"YES\" if a[0] == a[1] else \"NO\"\n    if a[0] == a[1] == a[2]:\n        return \"YES\"\n    if a[0] == a[1] and a[1]!= a[2]:\n        return \"YES\"\n    if a[0] == a[2] and a[1]!= a[2]:\n        return \"YES\"\n    if a[1] == a[2] and a[0]!= a[1]:\n        return \"YES\"\n    return \"NO\"",
        "test": "assert solution(\"3\\n4 5 3\") == \"NO\"",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 4024,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    if k > n:\n        return -1\n    if k == n:\n        return 0\n    if k == 1:\n        return n\n    if k == 2:\n        return n - 1\n    if k == 3:\n        return n - 2\n    if k == 4:\n        return n - 3\n    if k == 5:\n        return n - 4\n    if k == 6:\n        return n - 5\n    if k == 7:\n        return n - 6\n    if k == 8:\n        return n - 7\n    if k == 9:\n        return n - 8\n    if k == 10:\n        return n - 9\n    if k == 11:\n        return n - 10\n    if k == 12:\n        return n - 11\n    if k == 13:\n        return n - 12\n    if k == 14:\n        return n - 13\n    if k == 15:\n        return n - 14\n    if k == 16:\n        return n - 15\n    if k == 17:\n        return n - 16\n    if k == 18:\n        return n - 17\n    if k == 19:\n        return n - 18\n    if k == 20:\n        return n - 19\n    if k == 21:\n        return n - 20\n    if k == 22:\n        return n - 21\n    if k == 23:\n        return n - 22\n    if k == 24:\n        return n - 23\n    if k == 25:\n        return n - 24\n    if k == 26:\n        return n - 25\n    if k == 27:\n        return n - 26\n    if k == 28:\n        return n - 27\n    if k == 29:\n        return n - 28\n    if k == 30:\n        return n - 29\n    if k == 31:\n        return n - 30\n    if k == 32:\n        return n - 31\n    if k == 33:\n        return n - 32\n    if k == 34:\n        return n - 33\n    if k == 35:\n        return n - 34\n    if k == 36:\n        return n - 35\n    if k == 37:\n        return n - 36\n    if k == 38:\n        return n - 37\n    if k == 39:\n        return n - 38\n    if k == 40:\n        return n - 39\n    if k == 41:\n        return n - 40\n    if k == 42:\n        return n - 41\n    if k == 43:\n        return n - 42\n    if k == 44:\n        return n - 43\n    if k == 45:\n        return n - 44\n    if k == 46:\n        return n - 45\n    if k == 47:\n        return n - 46\n    if k == 48:\n        return n - 47\n    if k == 49:\n        return n - 48\n    if k == 50:\n        return n - 49\n    if k == 51:\n        return n - 50\n    if k == 52:\n        return n - 51\n    if k == 53:\n        return n - 52\n    if k == 54:\n        return n - 53\n    if k == 55:\n        return n - 54\n    if k == 56:\n        return n - 55\n    if k == 57:\n        return n - 56\n    if k == 58:\n        return n - 57\n    if k == 59:\n        return n - 58\n    if k == 60:\n        return n - 59\n    if k == 61:\n        return n - 60\n    if k == 62:\n        return n - 61\n    if k == 63:\n        return n - 62\n    if k == 64:\n        return n - 63\n    if k == 65:\n        return n - 64\n    if k == 66:\n        return n - 65\n    if k == 67:\n        return n - 66\n    if k == 68:\n        return n - 67\n    if k == 69:\n        return n - 68\n    if k == 70:\n        return n - 69\n    if k == 71:\n        return n - 70\n    if k == 72:\n        return n - 71\n    if k == 73:\n        return n - 72\n    if k == 74:\n        return n - 73\n    if k == 75:\n        return n - 74\n    if k == 76:\n        return n - 75\n    if k == 77:\n        return n - 76\n    if k == 78:\n        return n - 77\n    if k == 79:\n        return n - 78\n    if k == 80:\n        return n - 79\n    if k == 81:\n        return n - 80\n    if k == 82:\n        return n - 81\n    if k == 83:\n        return n - 82\n    if k == 84:\n        return n - 83\n    if k == 85:\n        return n - 84\n    if k == 86:\n        return n - 85\n    if k == 87:\n        return n - 86\n    if k == 88:\n        return n - 87\n    if k == 89:\n        return n - 88\n    if k == 90:\n        return n - 89\n    if k == 91:\n        return n - 90\n    if k == 92:\n        return n - 91\n    if k == 93:\n        return n - 92\n    if k == 94:\n        return n - 93\n    if k == 95:\n        return n - 94\n    if k == 96:\n        return n - 95\n    if k == 97:\n        return n - 96\n    if k == 98:\n        return n - 97\n    if k == 99:\n        return n - 98\n    if k == 100:\n        return n - 99\n    if k == 101:\n        return n - 100\n    if k == 102:\n        return n - 101\n    if k == 103:\n        return n - 102\n    if k == 104:\n        return n - 103\n    if k == 105:\n        return n - 104\n    if k == 106:\n        return n - 105\n    if k == 107:\n        return n - 106\n    if k == 108:\n        return n - 107\n    if k == 109:\n        return n - 108\n    if k == 110:\n        return n - 109\n    if k == 111:\n        return n - 110\n    if k == 112:\n        return n - 111\n    if k == 113:\n        return n - 112\n    if k == 114:\n        return",
        "test": "assert solution(\"aaaaa\") == 15",
        "num_ids": 1539,
        "indeed": false
    },
    {
        "number": 4025,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return max(a // 2, b // 2, c // 2)",
        "test": "assert solution(\"3 2 2\") == \"7\"",
        "num_ids": 58,
        "indeed": false
    },
    {
        "number": 4026,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"NO\"",
        "num_ids": 145,
        "indeed": false
    },
    {
        "number": 4027,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(min(abs(sum(A) - sum(B)), abs(sum(A) - sum(B) - n)))\n",
        "test": "assert solution(\"5\") == \"1\"",
        "num_ids": 62,
        "indeed": false
    },
    {
        "number": 4028,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n()))()\\n\")\n    5\n    >>> solution(\"3\\n(()\\n\")\n    4\n    >>> solution(\"2\\n(((\\n\")\n    0\n    \"\"\"\n    n = int(stdin.readline())\n    s = stdin.readline()\n    return str(sum(1 for i in range(2 * n) if s[i] == \"(\" and s[i + 1] == \")\") % 1000000007)\n",
        "test": "assert solution(\"(()))()\") == 4",
        "num_ids": 139,
        "indeed": false
    },
    {
        "number": 4029,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"705\") == \"1\"",
        "num_ids": 25,
        "indeed": false
    },
    {
        "number": 4030,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    res = 1\n    for i in range(n):\n        if s[i] > s[i + 1]:\n            res += 1\n    return res",
        "test": "assert solution(\"aaabbcbb\") == \"2\"",
        "num_ids": 78,
        "indeed": false
    },
    {
        "number": 4031,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(stdin) == len(set(stdin)) else \"NO\"\n\ndef",
        "test": "assert solution(\"abacaba\") == \"YES\"",
        "num_ids": 49,
        "indeed": false
    },
    {
        "number": 4032,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    left = 0\n    right = n - 1\n    solved = 0\n    while left <= right:\n        if a[left] <= k:\n            solved += 1\n            left += 1\n        if a[right] <= k:\n            solved += 1\n            right -= 1\n    return solved",
        "test": "assert solution(\"5 2\\n3 1 2 1 3\") == \"0\"",
        "num_ids": 141,
        "indeed": false
    },
    {
        "number": 4033,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)\n",
        "test": "assert solution(\"3 9\") == \"14\"",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4034,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    s = list(s)\n    s.sort()\n    if s == list(stdin):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"aaabbcbb\") == \"YES\\n01011011\"",
        "num_ids": 93,
        "indeed": false
    },
    {
        "number": 4035,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return A\n    if A > B:\n        return -1\n    if A < 1 or B < 1:\n        return -1\n    if A == 1:\n        return B\n    if B == 1:\n        return A\n    if A == B - 1:\n        return A\n    if A == B - 2:\n        return A\n    if A == B - 3:\n        return A\n    if A == B - 4:\n        return A\n    if A == B - 5:\n        return A\n    if A == B - 6:\n        return A\n    if A == B - 7:\n        return A\n    if A == B - 8:\n        return A\n    if A == B - 9:\n        return A\n    if A == B - 10:\n        return A\n    if A == B - 11:\n        return A\n    if A == B - 12:\n        return A\n    if A == B - 13:\n        return A\n    if A == B - 14:\n        return A\n    if A == B - 15:\n        return A\n    if A == B - 16:\n        return A\n    if A == B - 17:\n        return A\n    if A == B - 18:\n        return A\n    if A == B - 19:\n        return A\n    if A == B - 20:\n        return A\n    if A == B - 21:\n        return A\n    if A == B - 22:\n        return A\n    if A == B - 23:\n        return A\n    if A == B - 24:\n        return A\n    if A == B - 25:\n        return A\n    if A == B - 26:\n        return A\n    if A == B - 27:\n        return A\n    if A == B - 28:\n        return A\n    if A == B - 29:\n        return A\n    if A == B - 30:\n        return A\n    if A == B - 31:\n        return A\n    if A == B - 32:\n        return A\n    if A == B - 33:\n        return A\n    if A == B - 34:\n        return A\n    if A == B - 35:\n        return A\n    if A == B - 36:\n        return A\n    if A == B - 37:\n        return A\n    if A == B - 38:\n        return A\n    if A == B - 39:\n        return A\n    if A == B - 40:\n        return A\n    if A == B - 41:\n        return A\n    if A == B - 42:\n        return A\n    if A == B - 43:\n        return A\n    if A == B - 44:\n        return A\n    if A == B - 45:\n        return A\n    if A == B - 46:\n        return A\n    if A == B - 47:\n        return A\n    if A == B - 48:\n        return A\n    if A == B - 49:\n        return A\n    if A == B - 50:\n        return A\n    if A == B - 51:\n        return A\n    if A == B - 52:\n        return A\n    if A == B - 53:\n        return A\n    if A == B - 54:\n        return A\n    if A == B - 55:\n        return A\n    if A == B - 56:\n        return A\n    if A == B - 57:\n        return A\n    if A == B - 58:\n        return A\n    if A == B - 59:\n        return A\n    if A == B - 60:\n        return A\n    if A == B - 61:\n        return A\n    if A == B - 62:\n        return A\n    if A == B - 63:\n        return A\n    if A == B - 64:\n        return A\n    if A == B - 65:\n        return A\n    if A == B - 66:\n        return A\n    if A == B - 67:\n        return A\n    if A == B - 68:\n        return A\n    if A == B - 69:\n        return A\n    if A == B - 70:\n        return A\n    if A == B - 71:\n        return A\n    if A == B - 72:\n        return A\n    if A == B - 73:\n        return A\n    if A == B - 74:\n        return A\n    if A == B - 75:\n        return A\n    if A == B - 76:\n        return A\n    if A == B - 77:\n        return A\n    if A == B - 78:\n        return A\n    if A == B - 79:\n        return A\n    if A == B - 80:\n        return A\n    if A == B - 81:\n        return A\n    if A == B - 82:\n        return A\n    if A == B - 83:\n        return A\n    if A == B - 84:\n        return A\n    if A == B - 85:\n        return A\n    if A == B - 86:\n        return A\n    if A == B - 87:\n        return A\n    if A == B - 88:\n        return A\n    if A == B - 89:\n        return A\n    if A == B - 90:\n        return A\n    if A == B - 91:\n        return A\n    if A == B - 92:\n        return A\n    if A == B - 93:\n        return A\n    if A == B - 94:\n        return A\n    if A == B - 95:\n        return A\n    if A == B - 96:\n        return A\n    if A == B - 97:\n        return A\n    if A == B - 98:\n        return A\n    if A == B - 99:\n        return A\n    if A == B - 100:\n        return A\n    if A == B - 101:\n        return A\n    if A == B - 102:\n        return A\n    if A == B - 103:\n        return A\n    if A == B - 104:\n        return A\n    if A == B - 105:\n        return A\n    if A == B - 106:\n        return A\n    if A == B - 107:\n        return A\n    if A == B - 108:\n        return A\n    if A == B - 109:\n        return A\n    if A == B - 110:\n        return A\n    if A == B - 111:\n        return A\n    if A == B - 112:\n        return A\n    if A == B - 113:\n        return A\n    if A == B - 114:\n        return A\n    if A == B - 115:\n        return A\n    if A == B - 116:\n        return A\n    if A == B - 117:\n        return A\n    if A == B - 118:\n        return A\n    if A == B - 119:\n        return A\n    if A == B - 120:\n        return A\n    if A == B - 121:\n        return A\n    if A == B - 122:\n        return A\n    if A == B - 123:\n        return A\n    if A == B - 124:\n        return A\n    if A == B - 125:\n        return A\n    if A",
        "test": "assert solution(\"2 1\") == \"2\"",
        "num_ids": 1727,
        "indeed": false
    },
    {
        "number": 4036,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return \"YES\" if n == 1 else \"NO\"\n    a = [0] * k\n    a[0] = n\n    for i in range(1, k):\n        a[i] = 2 * a[i - 1]\n    return \"YES\" if all(a[i] >= a[i - 1] + 1 for i in range(1, k)) else \"NO\"\n",
        "test": "assert solution(\"8 3\") == \"NO\\n\"",
        "num_ids": 147,
        "indeed": false
    },
    {
        "number": 4037,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n    projects.sort(key=lambda x: x[0])\n    dp = [0] * (r + 1)\n    dp[0] = 1\n    for a, b in projects:\n        for i in range(r, a - 1, -1):\n            dp[i] = max(dp[i], dp[i - a] + 1)\n        for i in range(a, r + 1):\n            dp[i] = max(dp[i], dp[i - a] + 1)\n    return dp[r]\n",
        "test": "assert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 4038,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"",
        "num_ids": 86,
        "indeed": false
    },
    {
        "number": 4039,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split('\\n')[0].split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.split('\\n')[i + 1].split())\n        projects.append((a, b))\n    projects.sort(key=lambda x: x[0])\n    for i in range(n):\n        if r < projects[i][0]:\n            return 'NO'\n        r += projects[i][1]\n    return 'YES'\n",
        "test": "assert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 4040,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split('\\n')[0].split()]\n    c = [int(x) for x in stdin.split('\\n')[1].split()]\n    a = [0] * (n + 2)\n    for i in range(m):\n        a[c[i]] = i + 1\n    a[0] = 1\n    a[n + 1] = m\n    for i in range(n + 2):\n        if a[i] == 0:\n            continue\n        for j in range(i + d, min(i + d * 2, n + 2)):\n            if a[j] == 0:\n                a[j] = a[i]\n    return 'YES\\n' +''.join([str(x) for x in a])\n",
        "test": "assert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"",
        "num_ids": 252,
        "indeed": false
    },
    {
        "number": 4041,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    l = len(s)\n    r = 0\n    for i in range(l):\n        if s[i] == t[0]:\n            for j in range(1, len(t)):\n                if i + j < l and s[i + j] == t[j]:\n                    r += 1\n                else:\n                    break\n    return r",
        "test": "assert solution(\"tst\") == 1",
        "num_ids": 119,
        "indeed": false
    },
    {
        "number": 4042,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(x)\n    b = int(x * 10)\n    return str(a) + \" \" + str(b)",
        "test": "assert solution('2.572479') == '10 3'",
        "num_ids": 70,
        "indeed": false
    },
    {
        "number": 4043,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split()]\n    if n < d + 1 or n < k + 1:\n        return \"NO\"\n    if d == 0 or k == 0:\n        return \"YES\"\n    if d > n - 1 or k > n - 1:\n        return \"NO\"\n    if k > d:\n        return \"NO\"\n    if k == d:\n        return \"YES\"\n    if k == 1:\n        return \"YES\"\n    if k == 2:\n        return \"YES\"\n    if k == 3:\n        return \"YES\"\n    if k == 4:\n        return \"YES\"\n    if k == 5:\n        return \"YES\"\n    if k == 6:\n        return \"YES\"\n    if k == 7:\n        return \"YES\"\n    if k == 8:\n        return \"YES\"\n    if k == 9:\n        return \"YES\"\n    if k == 10:\n        return \"YES\"\n    if k == 11:\n        return \"YES\"\n    if k == 12:\n        return \"YES\"\n    if k == 13:\n        return \"YES\"\n    if k == 14:\n        return \"YES\"\n    if k == 15:\n        return \"YES\"\n    if k == 16:\n        return \"YES\"\n    if k == 17:\n        return \"YES\"\n    if k == 18:\n        return \"YES\"\n    if k == 19:\n        return \"YES\"\n    if k == 20:\n        return \"YES\"\n    if k == 21:\n        return \"YES\"\n    if k == 22:\n        return \"YES\"\n    if k == 23:\n        return \"YES\"\n    if k == 24:\n        return \"YES\"\n    if k == 25:\n        return \"YES\"\n    if k == 26:\n        return \"YES\"\n    if k == 27:\n        return \"YES\"\n    if k == 28:\n        return \"YES\"\n    if k == 29:\n        return \"YES\"\n    if k == 30:\n        return \"YES\"\n    if k == 31:\n        return \"YES\"\n    if k == 32:\n        return \"YES\"\n    if k == 33:\n        return \"YES\"\n    if k == 34:\n        return \"YES\"\n    if k == 35:\n        return \"YES\"\n    if k == 36:\n        return \"YES\"\n    if k == 37:\n        return \"YES\"\n    if k == 38:\n        return \"YES\"\n    if k == 39:\n        return \"YES\"\n    if k == 40:\n        return \"YES\"\n    if k == 41:\n        return \"YES\"\n    if k == 42:\n        return \"YES\"\n    if k == 43:\n        return \"YES\"\n    if k == 44:\n        return \"YES\"\n    if k == 45:\n        return \"YES\"\n    if k == 46:\n        return \"YES\"\n    if k == 47:\n        return \"YES\"\n    if k == 48:\n        return \"YES\"\n    if k == 49:\n        return \"YES\"\n    if k == 50:\n        return \"YES\"\n    if k == 51:\n        return \"YES\"\n    if k == 52:\n        return \"YES\"\n    if k == 53:\n        return \"YES\"\n    if k == 54:\n        return \"YES\"\n    if k == 55:\n        return \"YES\"\n    if k == 56:\n        return \"YES\"\n    if k == 57:\n        return \"YES\"\n    if k == 58:\n        return \"YES\"\n    if k == 59:\n        return \"YES\"\n    if k == 60:\n        return \"YES\"\n    if k == 61:\n        return \"YES\"\n    if k == 62:\n        return \"YES\"\n    if k == 63:\n        return \"YES\"\n    if k == 64:\n        return \"YES\"\n    if k == 65:\n        return \"YES\"\n    if k == 66:\n        return \"YES\"\n    if k == 67:\n        return \"YES\"\n    if k == 68:\n        return \"YES\"\n    if k == 69:\n        return \"YES\"\n    if k == 70:\n        return \"YES\"\n    if k == 71:\n        return \"YES\"\n    if k == 72:\n        return \"YES\"\n    if k == 73:\n        return \"YES\"\n    if k == 74:\n        return \"YES\"\n    if k == 75:\n        return \"YES\"\n    if k == 76:\n        return \"YES\"\n    if k == 77:\n        return \"YES\"\n    if k == 78:\n        return \"YES\"\n    if k == 79:\n        return \"YES\"\n    if k == 80:\n        return \"YES\"\n    if k == 81:\n        return \"YES\"\n    if k == 82:\n        return \"YES\"\n    if k == 83:\n        return \"YES\"\n    if k == 84:\n        return \"YES\"\n    if k == 85:\n        return \"YES\"\n    if k == 86:\n        return \"YES\"\n    if k == 87:\n        return \"YES\"\n    if k == 88:\n        return \"YES\"\n    if k == 89:\n        return \"YES\"\n    if k == 90:\n        return \"YES\"\n    if k == 91:\n        return \"YES\"\n    if k == 92:\n        return \"YES\"\n    if k == 93:\n        return \"YES\"\n    if k == 94:\n        return \"YES\"\n    if k == 95:\n        return \"YES\"\n    if k == 96:\n        return \"YES\"\n    if k == 97:\n        return \"YES\"\n    if k == 98:\n        return \"YES\"\n    if k == 99:\n        return \"YES\"\n    if k == 100:\n        return \"YES\"\n    if k == 101:\n        return \"YES\"\n    if k == 102:\n        return \"YES\"\n    if k == 103:\n        return \"YES\"\n    if k == 104:\n        return \"YES\"\n    if k == 105:\n        return \"YES\"\n    if k == 106:\n        return \"YES\"\n    if k == 107:\n        return \"YES\"\n    if k == 108:\n        return \"YES\"\n    if k == 109:\n        return \"YES\"\n    if k == 110:\n        return \"YES\"\n    if k == 111:\n        return \"YES\"\n    if k == 112:\n        return \"YES\"\n    if k == 113:\n        return \"YES\"\n    if k == 114:\n        return \"YES\"\n    if k == 115:\n        ",
        "test": "assert solution(\"6 2 3\") == \"NO\"",
        "num_ids": 1622,
        "indeed": false
    },
    {
        "number": 4044,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    s = '1' * a + '0' * b\n    for i in range(1, n):\n        s = s[:i] + '1' + s[i + 1:]\n        if s.count('1') == a and s.count('0') == b and s.count('1', i) == x:\n            return s\n    return ''\n",
        "test": "assert solution(\"111010\") == \"1011010\"",
        "num_ids": 137,
        "indeed": false
    },
    {
        "number": 4045,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    res = ''\n    for i in range(n):\n        res += 'a'\n    for i in range(n):\n        res += 'b'\n    for i in range(n):\n        res += 'c'\n    if s in res or t in res:\n        return 'NO'\n    return res\n",
        "test": "assert solution(\"ca\") == \"cb\"",
        "num_ids": 124,
        "indeed": false
    },
    {
        "number": 4046,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = list(map(int, stdin.readline().split()))\n    p = [i for i in range(1, n + 1)]\n    for i in range(n - 1):\n        p[q[i] - 1] = q[i + 1]\n    if p == [i for i in range(1, n + 1)]:\n        return''.join(map(str, p))\n    return '-1'\n",
        "test": "assert solution(\"5 1 1 1\") == \"1 2 3 4 5\"",
        "num_ids": 147,
        "indeed": false
    },
    {
        "number": 4047,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 2 3\")\n    '1'\n    >>> solution(\"5\\n2 2 2 3 3\")\n    '2'\n    \"\"\"\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    x.sort()\n    ans = 0\n    for i in range(n - 1):\n        ans += abs(x[i] - x[i + 1])\n    return str(ans)\n",
        "test": "assert solution(\"5\\n2 2 2 3 3\") == \"2\"",
        "num_ids": 152,
        "indeed": false
    },
    {
        "number": 4048,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n    if n == 131:\n        return 130\n    if n == 132:\n        return 131\n    if n == 133:\n        return 132\n    if n == 134:\n        return 133\n    if n == 135:\n        return 134\n    if n == 136:\n        return 135\n    if n == 137:\n        return 136\n    if n == 138:\n        return 137\n    if n == 139:\n        return 138\n    if n == 140:\n        return 139\n    if n == 141:\n        return 140\n    if n == 142:\n        return 141\n    if n == 143:\n        return 142\n    if n == 144:\n        return 143\n    if n == 145:\n        return 144\n    if n == 146:\n        return 145\n    if n == 147:\n        return 146\n    if n == 148:\n        return 147\n    if n == 149:\n        return 148\n    if n == 150:\n        return 149\n    if n == 151:\n        return 150\n    if n == 152:\n        return 151\n    if n == 153:\n        return 152\n    if n == 154:\n        return 153\n    if n == 155:\n        return 154\n    if n == 156:\n        return 155\n    if n == 157:\n        return 156\n    if n == 158:\n        return 157\n    if n == 159:\n        return 158\n    if n == 160:\n        return 159\n    if n == 161:\n        return 160\n    if n == 162:\n        return 161\n    if n == 163:\n        return 162\n    if n == 164:\n        return 163\n    if n == 165:\n        return 164",
        "test": "assert solution(\"10\") == \"5\"",
        "num_ids": 1834,
        "indeed": false
    },
    {
        "number": 4049,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    if a[0] > b[0]:\n        return str(a[0]) +'' + str(b[0])\n    elif a[0] < b[0]:\n        return str(b[0]) +'' + str(a[0])\n    else:\n        if a[1] > b[1]:\n            return str(a[1]) +'' + str(b[1])\n        elif a[1] < b[1]:\n            return str(b[1]) +'' + str(a[1])\n        else:\n            if a[2] > b[2]:\n                return str(a[2]) +'' + str(b[2])\n            elif a[2] < b[2]:\n                return str(b[2]) +'' + str(a[2])\n            else:\n                return str(a[2]) +'' + str(b[2])",
        "test": "assert solution(\"15\\n5 5 5\\n5 5 5\") == \"0 15\"",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 4050,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 4 1 2 2 1 5 3\n   ... ''')\n    '3'\n    >>> solution('''11\n   ... -5 -4 -3 -2 -1 0 1 2 3 4 5\n   ... ''')\n    '2'\n    >>> solution('''4\n   ... 1 1 1 1\n   ... ''')\n    '4'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] - a[i] > 0:\n                ans += 1\n    return str(ans)\n",
        "test": "assert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 4051,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    stack = []\n    for i in range(n):\n        stack.append(arr[i])\n        while len(stack) > 1 and stack[-1] == stack[-2] + 1:\n            stack.pop()\n            stack.pop()\n            if len(stack) == 0:\n                break\n            stack.append(stack[-1] + 1)\n    if len(stack) == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert solution(\"3 3 1 2\") == \"YES\"",
        "num_ids": 170,
        "indeed": false
    },
    {
        "number": 4052,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n = len(s)\n    m = len(t)\n    if n!= m:\n        return '-1'\n    if s == t:\n        return '0'\n    for i in range(n):\n        if s[i]!= t[i]:\n            return '-1'\n    return '2' +''.join(map(str, [i for i in range(1, n) if s[i]!= t[i - 1]]))\n",
        "test": "assert solution(\"abdfec\") == \"abdcfe\"",
        "num_ids": 155,
        "indeed": false
    },
    {
        "number": 4053,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    prefixes = set()\n    suffixes = set()\n    for i in range(1, n + 1):\n        prefixes.add(stdin[:i])\n        suffixes.add(stdin[-i:])\n    for i in range(1, n + 1):\n        if stdin[:i] in prefixes and stdin[-i:] in suffixes:\n            return \"PS\"\n    return \"SP\"\n",
        "test": "assert solution(\"3\\na\\naa\\na\\n\") == \"PPSS\"",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 4054,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"2 4 6 8 10\") == 1",
        "num_ids": 17,
        "indeed": false
    },
    {
        "number": 4055,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = 0\n    for i in range(1, n - 1):\n        if a[i - 1] == a[i + 1] == 1 and a[i] == 0:\n            k += 1\n    return str(k)\n",
        "test": "assert solution(\"5\\n1 1 0 0 0\") == \"0\"",
        "num_ids": 127,
        "indeed": false
    },
    {
        "number": 4056,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n",
        "test": "assert solution(\"6\\n6 90 12 18 30 18\") == \"4\"",
        "num_ids": 46,
        "indeed": false
    },
    {
        "number": 4057,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        if i == 0:\n            count += 1\n        elif a[i]!= a[i - 1]:\n            count += 1\n    return count",
        "test": "assert solution(\"1 2 4 3 3 2\") == \"2\"",
        "num_ids": 118,
        "indeed": false
    },
    {
        "number": 4058,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    house = [int(x) for x in stdin.split()]\n    heaters = [0] * n\n    for i in range(n):\n        if house[i] == 1:\n            heaters[i] = 1\n    heaters = sorted(heaters)\n    heaters = [0] + heaters + [n + 1]\n    heaters = [heaters[i] - heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] + heaters + [0]\n    heaters = [heaters[i] + heaters[i - 1] for i in range(1, len(heaters))]\n    heaters = [0] +",
        "test": "assert solution(\"5 3\\n0 0 0 0 1\") == \"2\"",
        "num_ids": 1262,
        "indeed": false
    },
    {
        "number": 4059,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(3)\n    3\n    >>> solution(4)\n    3\n    >>> solution(5)\n    4\n    >>> solution(6)\n    4\n    >>> solution(7)\n    5\n    >>> solution(8)\n    5\n    >>> solution(9)\n    6\n    >>> solution(10)\n    6\n    >>> solution(11)\n    7\n    >>> solution(12)\n    7\n    >>> solution(13)\n    8\n    >>> solution(14)\n    8\n    >>> solution(15)\n    9\n    >>> solution(16)\n    9\n    >>> solution(17)\n    10\n    >>> solution(18)\n    10\n    >>> solution(19)\n    11\n    >>> solution(20)\n    11\n    >>> solution(21)\n    12\n    >>> solution(22)\n    12\n    >>> solution(23)\n    13\n    >>> solution(24)\n    13\n    >>> solution(25)\n    14\n    >>> solution(26)\n    14\n    >>> solution(27)\n    15\n    >>> solution(28)\n    15\n    >>> solution(29)\n    16\n    >>> solution(30)\n    16\n    >>> solution(31)\n    17\n    >>> solution(32)\n    17\n    >>> solution(33)\n    18\n    >>> solution(34)\n    18\n    >>> solution(35)\n    19\n    >>> solution(36)\n    19\n    >>> solution(37)\n    20\n    >>> solution(38)\n    20\n    >>> solution(39)\n    21\n    >>> solution(40)\n    21\n    >>> solution(41)\n    22\n    >>> solution(42)\n    22\n    >>> solution(43)\n    23\n    >>> solution(44)\n    23\n    >>> solution(45)\n    24\n    >>> solution(46)\n    24\n    >>> solution(47)\n    25\n    >>> solution(48)\n    25\n    >>> solution(49)\n    26\n    >>> solution(50)\n    26\n    >>> solution(51)\n    27\n    >>> solution(52)\n    27\n    >>> solution(53)\n    28\n    >>> solution(54)\n    28\n    >>> solution(55)\n    29\n    >>> solution(56)\n    29\n    >>> solution(57)\n    30\n    >>> solution(58)\n    30\n    >>> solution(59)\n    31\n    >>> solution(60)\n    31\n    >>> solution(61)\n    32\n    >>> solution(62)\n    32\n    >>> solution(63)\n    33\n    >>> solution(64)\n    33\n    >>> solution(65)\n    34\n    >>> solution(66)\n    34\n    >>> solution(67)\n    35\n    >>> solution(68)\n    35\n    >>> solution(69)\n    36\n    >>> solution(70)\n    36\n    >>> solution(71)\n    37\n    >>> solution(72)\n    37\n    >>> solution(73)\n    38\n    >>> solution(74)\n    38\n    >>> solution(75)\n    39\n    >>> solution(76)\n    39\n    >>> solution(77)\n    40\n    >>> solution(78)\n    40\n    >>> solution(79)\n    41\n    >>> solution(80)\n    41\n    >>> solution(81)\n    42\n    >>> solution(82)\n    42\n    >>> solution(83)\n    43\n    >>> solution(84)\n    43\n    >>> solution(85)\n    44\n    >>> solution(86)\n    44\n    >>> solution(87)\n    45\n    >>> solution(88)\n    45\n    >>> solution(89)\n    46\n    >>> solution(90)\n    46\n    >>> solution(91)\n    47\n    >>> solution(92)\n    47\n    >>> solution(93)\n    48\n    >>> solution(94)\n    48\n    >>> solution(95)\n    49\n    >>> solution(96)\n    49\n    >>> solution(97)\n    50\n    >>> solution(98)\n    50\n    >>> solution(99)\n    51\n    >>> solution(100)\n    51\n    >>> solution(101)\n    52\n    >>> solution(102)\n    52\n    >>> solution(103)\n    53\n    >>> solution(104)\n    53\n    >>> solution(105)\n    54\n    >>> solution(106)\n    54\n    >>> solution(107)\n    55\n    >>> solution(108)\n    55\n    >>> solution(109)\n    56\n    >>> solution(110)\n    56\n    >>> solution(111)\n    57\n    >>> solution(112)\n    57\n    >>> solution(113)\n    58\n    >>> solution(114)\n    58\n    >>> solution(115)\n    59\n    >>> solution(116)\n    59\n    >>> solution(117)\n    60\n    >>> solution(118)\n    60\n    >>> solution(119)\n    61\n    >>> solution(120)\n    61\n    >>> solution(121)\n    62\n    >>> solution(122)\n    62\n    >>> solution(123)\n    63\n    >>> solution(124)\n    63\n    >>> solution(125)\n    64\n    >>> solution(126)\n    64\n    >>> solution(127)\n    65\n    >>> solution(128)\n    65\n    >>> solution(129)\n    66\n    >>> solution(130)\n    66\n    >>> solution(131)\n    67\n    >>> solution(132)\n    67\n    >>> solution(133)\n    68\n    >>> solution(134)\n    68\n    >>> solution(135)\n    69\n    >>> solution(136)\n    69\n    >>> solution(137)\n    70\n    >>> solution(138)\n    70\n    >>> solution(139)\n    71\n    >>> solution(140)\n    71\n    >>> solution(141)\n    72\n    >>> solution(142)\n    72\n    >>> solution(143)\n    73\n    >>> solution(144)\n    73\n    >>> solution(145)\n    74\n    >>> solution(146)\n    74\n    >>> solution(147)\n    75\n    >>> solution(148)\n    75\n    >>> solution(149)\n    76\n    >>> solution(150)\n    76\n    >>> solution(151)\n    77\n    >>> solution(152)\n    77\n    >>> solution(153)\n    78\n    >>> solution(154)\n    78\n    >>> solution(155)\n    79\n    >>> solution(156)\n    79\n    >>> solution(157)\n    80\n    >>> solution(158)\n    80\n    >>> solution(159)\n    81\n    >>> solution(160)\n    81\n    >>> solution(161)\n    82\n    >>> solution(162)\n    82\n    >>> solution(163)\n    83\n    >>> solution(164)\n    83\n    >>> solution(165)\n    84\n    >>> solution(166)\n    84\n    >>> solution(167)\n    85\n    >>> solution(168)\n    85\n    >>> solution(169)\n    86\n    >>> solution(170)\n    86\n    >>> solution(171)\n    87\n    >>> solution(172)\n    87\n    >>> solution(173)\n    88\n    >>> solution(174)\n    88\n    >>> solution(175)\n    89\n    >>> solution(176)\n    89\n    >>> solution(177)\n    90\n    >>> solution(178)\n    90\n    >>> solution(179)\n    91\n    >>> solution(180)\n    91\n    >>> solution(181)\n    92\n    >>> solution(182)\n    92\n    >>> solution(183)\n    93\n    >>> solution(184)\n    93\n    >>> solution(185)\n    94\n    >>> solution(186)\n    94\n    >>> solution(187)\n    95\n    >>> solution(188)\n    95\n    >>> solution(189)\n    96\n    >>> solution(190)",
        "test": "assert solution('4') == '3'",
        "num_ids": 1900,
        "indeed": false
    },
    {
        "number": 4060,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            count += 1\n    return count",
        "test": "assert solution(\"()()()\") == 0",
        "num_ids": 69,
        "indeed": false
    },
    {
        "number": 4061,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    l = len(s)\n    r = 0\n    for i in range(l):\n        if s[i] == t[0]:\n            for j in range(1, len(t)):\n                if i + j < l and s[i + j] == t[j]:\n                    r += 1\n                else:\n                    break\n    return r",
        "test": "assert solution(\"tst\") == 1",
        "num_ids": 119,
        "indeed": false
    },
    {
        "number": 4062,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(a * c, b * d))",
        "test": "assert solution(\"1 2 1 1\") == \"2\"",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4063,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n",
        "test": "assert solution(\"6\\n9 1 4 4 6 7\") == \"2\"",
        "num_ids": 45,
        "indeed": false
    },
    {
        "number": 4064,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    good = 0\n    for i in range(n):\n        if l <= a[i] <= r:\n            good += 1\n    return good",
        "test": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"",
        "num_ids": 99,
        "indeed": false
    },
    {
        "number": 4065,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    cnt = 0\n    for i in range(n - 1):\n        if arr[i] * 2 <= arr[i + 1]:\n            cnt += 1\n    return cnt",
        "test": "assert solution(\"5\\n2 10 50 110 250\") == \"1\"",
        "num_ids": 120,
        "indeed": false
    },
    {
        "number": 4066,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    lcm = a[0]\n    for i in range(1, n):\n        lcm = lcm * a[i] // math.gcd(lcm, a[i])\n    i, j = 0, n - 1\n    while i < j:\n        if lcm * a[i] > lcm * a[j]:\n            j -= 1\n        elif lcm * a[i] < lcm * a[j]:\n            i += 1\n        else:\n            break\n    return str(i + 1) +'' + str(j + 1)\n",
        "test": "assert solution(\"5\\n5 2 11 3 7\") == \"2 4\"",
        "num_ids": 209,
        "indeed": false
    },
    {
        "number": 4067,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s[::-1]\n    s = list(s)\n",
        "test": "assert solution(\"120110\") == \"120120\"",
        "num_ids": 1646,
        "indeed": false
    },
    {
        "number": 4068,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 1\n   ... 3\n   ... ''')\n    '4'\n    >>> solution('''6 1\n   ... 3\n   ... 4\n   ... ''')\n    '0'\n    >>> solution('''6 1\n   ... 3\n   ... 2\n   ... ''')\n    '1'\n    >>> solution('''6 1\n   ... 3\n   ... 1\n   ... ''')\n    '1'\n    >>> solution('''6 1\n   ... 3\n   ... 2\n   ... 3\n   ... ''')\n    '0'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[:2])\n    a = list(map(int, stdin.split('\\n')[2:]))\n    a.sort()\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(m):\n        for j in range(a[i], n + 1):\n            dp[j] = (dp[j] + dp[j - a[i]]) % 1000000007\n    return str(dp[n])\n",
        "test": "assert solution(\"6 1\\n3\") == \"4\"",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 4069,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    if k == 1:\n        return str(abs(x - d))\n    else:\n        return str(min(abs(x - d), abs(x + d)))\n",
        "test": "assert solution(\"6 2 4\") == \"2\"",
        "num_ids": 71,
        "indeed": false
    },
    {
        "number": 4070,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n",
        "test": "assert solution(\"14\") == 0",
        "num_ids": 27,
        "indeed": false
    },
    {
        "number": 4071,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) * int(stdin))",
        "test": "assert solution('3') == 27",
        "num_ids": 24,
        "indeed": false
    },
    {
        "number": 4072,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '1' if int(stdin) % 2 else '0'\n",
        "test": "assert solution('13') == '1'",
        "num_ids": 40,
        "indeed": true
    },
    {
        "number": 4073,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    return n\n",
        "test": "assert solution(\"4 5 3 1\") == 4",
        "num_ids": 49,
        "indeed": false
    },
    {
        "number": 4074,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8 7\n   ... 8 1\n   ... 6 10\n   ... 9999999733 999999732\n   ... 9999999733 999999733''')\n    '2'\n    >>> solution('''8 7\n   ... 8 1\n   ... 6 10\n   ... 9999999733 999999733\n   ... 9999999733 999999733''')\n    '8'\n    >>> solution('''8 7\n   ... 8 1\n   ... 6 10\n   ... 9999999733 999999732\n   ... 9999999733 999999733\n   ... 9999999733 999999733''')\n    '1'\n    >>> solution('''8 7\n   ... 8 1\n   ... 6 10\n   ... 9999999733 999999732\n   ... 9999999733 999999733\n   ... 9999999733 999999733''')\n    '999999733'\n    >>> solution('''8 7\n   ... 8 1\n   ... 6 10\n   ... 9999999733 999999732\n   ... 9999999733 999999733\n   ... 9999999733 999999733\n   ... 9999999733 999999733''')\n    '1'\n    \"\"\"\n   ...\n",
        "test": "assert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\") == \"2\\n8\\n1\\n999999733\\n1\"",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 4075,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"",
        "num_ids": 35,
        "indeed": false
    },
    {
        "number": 4076,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    return str(round(A * B / (H * M)))",
        "test": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"",
        "num_ids": 51,
        "indeed": false
    },
    {
        "number": 4077,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] == m:\n                count += 1\n    return str(count)\n",
        "test": "assert solution(\"3 1\\n1 1 1\") == \"6\"",
        "num_ids": 129,
        "indeed": false
    },
    {
        "number": 4078,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = [0] * n\n    for i in range(m):\n        l, r = map(int, stdin.split(' '))\n        b[l - 1] += 1\n        b[r] -= 1\n    b = [i + j for i, j in zip(a, b)]\n    return str(max(b) - min(b)) +'' + str(b.index(max(b)) + 1)\n",
        "test": "assert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"",
        "num_ids": 221,
        "indeed": false
    },
    {
        "number": 4079,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\nfced\\nxyz\\nr\\ndabcef\\naz\\n\\naa\\nbad\\nbabc\\n\")\n    'Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\\n'\n    \"\"\"\n    n = int(stdin.readline())\n    for _ in range(n):\n        if is_diverse(stdin.readline()):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n",
        "test": "assert solution(\"xyz\") == \"Yes\"",
        "num_ids": 147,
        "indeed": false
    },
    {
        "number": 4080,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = [0] * n\n    for i in range(m):\n        l, r = map(int, stdin.split(' '))\n        b[l - 1] += 1\n        b[r] -= 1\n    b = [abs(i) for i in b]\n    print(max(b) - min(b))\n    print(b.index(max(b)) + 1)\n    return ''",
        "test": "assert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"",
        "num_ids": 217,
        "indeed": false
    },
    {
        "number": 4081,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"",
        "num_ids": 52,
        "indeed": false
    },
    {
        "number": 4082,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    i = 0\n    while i < n - 1:\n        if a[i] < a[i + 1]:\n            i += 1\n        else:\n            break\n    return i\n",
        "test": "assert solution(\"2\\n1 2\") == \"2\"",
        "num_ids": 113,
        "indeed": false
    },
    {
        "number": 4083,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    a.sort()\n    if k == 1:\n        return 0\n    if k == n:\n        return n - 1\n    if k == n // 2:\n        return n // 2\n    if k == n // 2 + 1:\n        return n // 2 + 1\n    if k == n // 2 + 2:\n        return n // 2 + 2\n    if k == n // 2 + 3:\n        return n // 2 + 3\n    if k == n // 2 + 4:\n        return n // 2 + 4\n    if k == n // 2 + 5:\n        return n // 2 + 5\n    if k == n // 2 + 6:\n        return n // 2 + 6\n    if k == n // 2 + 7:\n        return n // 2 + 7\n    if k == n // 2 + 8:\n        return n // 2 + 8\n    if k == n // 2 + 9:\n        return n // 2 + 9\n    if k == n // 2 + 10:\n        return n // 2 + 10\n    if k == n // 2 + 11:\n        return n // 2 + 11\n    if k == n // 2 + 12:\n        return n // 2 + 12\n    if k == n // 2 + 13:\n        return n // 2 + 13\n    if k == n // 2 + 14:\n        return n // 2 + 14\n    if k == n // 2 + 15:\n        return n // 2 + 15\n    if k == n // 2 + 16:\n        return n // 2 + 16\n    if k == n // 2 + 17:\n        return n // 2 + 17\n    if k == n // 2 + 18:\n        return n // 2 + 18\n    if k == n // 2 + 19:\n        return n // 2 + 19\n    if k == n // 2 + 20:\n        return n // 2 + 20\n    if k == n // 2 + 21:\n        return n // 2 + 21\n    if k == n // 2 + 22:\n        return n // 2 + 22\n    if k == n // 2 + 23:\n        return n // 2 + 23\n    if k == n // 2 + 24:\n        return n // 2 + 24\n    if k == n // 2 + 25:\n        return n // 2 + 25\n    if k == n // 2 + 26:\n        return n // 2 + 26\n    if k == n // 2 + 27:\n        return n // 2 + 27\n    if k == n // 2 + 28:\n        return n // 2 + 28\n    if k == n // 2 + 29:\n        return n // 2 + 29\n    if k == n // 2 + 30:\n        return n // 2 + 30\n    if k == n // 2 + 31:\n        return n // 2 + 31\n    if k == n // 2 + 32:\n        return n // 2 + 32\n    if k == n // 2 + 33:\n        return n // 2 + 33\n    if k == n // 2 + 34:\n        return n // 2 + 34\n    if k == n // 2 + 35:\n        return n // 2 + 35\n    if k == n // 2 + 36:\n        return n // 2 + 36\n    if k == n // 2 + 37:\n        return n // 2 + 37\n    if k == n // 2 + 38:\n        return n // 2 + 38\n    if k == n // 2 + 39:\n        return n // 2 + 39\n    if k == n // 2 + 40:\n        return n // 2 + 40\n    if k == n // 2 + 41:\n        return n // 2 + 41\n    if k == n // 2 + 42:\n        return n // 2 + 42\n    if k == n // 2 + 43:\n        return n // 2 + 43\n    if k == n // 2 + 44:\n        return n // 2 + 44\n    if k == n // 2 + 45:\n        return n // 2 + 45\n    if k == n // 2 + 46:\n        return n // 2 + 46\n    if k == n // 2 + 47:\n        return n // 2 + 47\n    if k == n // 2 + 48:\n        return n // 2 + 48\n    if k == n // 2 + 49:\n        return n // 2 + 49\n    if k == n // 2 + 50:\n        return n // 2 + 50\n    if k == n // 2 + 51:\n        return n // 2 + 51\n    if k == n // 2 + 52:\n        return n // 2 + 52\n    if k == n // 2 + 53:\n        return n // 2 + 53\n    if k == n // 2 + 54:\n        return n // 2 + 54\n    if k == n // 2 + 55:\n        return n // 2 + 55\n    if k == n // 2 + 56:\n        return n // 2 + 56\n    if k == n // 2 + 57:\n        return n // 2 + 57\n    if k == n // 2 + 58:\n        return n // 2 + 58\n    if k == n // 2 + 59:\n        return n // 2 + 59\n    if k == n // 2 + 60:\n        return n // 2 + 60\n    if k == n // 2 + 61:\n        return n // 2 + 61\n    if k == n // 2 + 62:\n        return n // 2 + 62\n    if k == n // 2 + 63:\n        return n // 2 + 63\n    if k == n // 2 + 64:\n        return n // 2 + 64\n    if k == n // 2 + 65:\n        return n // 2 + 65\n    if k == n // 2 + 66:\n        return n // 2 + 66\n    if k == n // 2 + 67:\n        return n // 2 + 67\n    if k == n // 2 + 68:\n        return n // 2 + 68\n    if k == n // 2 + 69:\n        return n // 2 + 69\n    if k == n // 2 + 70:\n        return n // 2 + 70\n    if k == n // 2 + 71:\n        return n // 2 + 71\n    if k == n // 2 + 72:\n        return n // 2 + 72\n    if k == n // 2 + 73:\n        return n // 2 + 73\n    if k == n // 2 + 74:\n        return n // 2 + 74\n    if k == n // 2 + 75:\n        return n // 2 + 75\n    if k == n // 2 + 76:\n        return n // 2 + 76\n    if k == n // 2 + 77:\n        return n // 2 + 77\n    if k == n // 2 + 78:\n        return n // 2 + 78\n    if k == n // 2 + 79:\n        return n // 2 + 79\n    if k == n // 2 + 80:\n        return n // 2 + 80\n    if k == n // 2 + 81:\n        return n // 2 + 81\n    if k == n // 2 + 82:\n        return n // 2 + 82\n    if k == n // 2 + 83:\n        return n // 2 + 83\n    ",
        "test": "assert solution(\"5 3\\n1 2 3 4 5\") == \"2\"",
        "num_ids": 1700,
        "indeed": false
    },
    {
        "number": 4084,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(n - a + b)",
        "test": "assert solution(\"8 3 4\") == \"4\"",
        "num_ids": 40,
        "indeed": false
    },
    {
        "number": 4085,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"48\"",
        "num_ids": 31,
        "indeed": false
    },
    {
        "number": 4086,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\n1 5 5 1 6 1\")\n    3\n    >>> solution(\"5\\n2 4 2 4 4\")\n    2\n    >>> solution(\"5\\n6 6 6 6 6\")\n    1\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a = list(dict.fromkeys(a))\n    print(len(a))\n    print(\" \".join(map(str, a)))\n",
        "test": "assert solution(\"5 5 5 5 5\") == \"1 5\"",
        "num_ids": 154,
        "indeed": false
    },
    {
        "number": 4087,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = a + 1\n    while True:\n        if sum(int(i) for i in str(b)) % 4 == 0:\n            return str(b)\n        b += 1\n",
        "test": "assert solution(\"432\") == \"435\"",
        "num_ids": 75,
        "indeed": false
    },
    {
        "number": 4088,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abac\")\n    'aac'\n    >>> solution(\"abc\")\n    'b'\n    >>> solution(\"abba\")\n    'aba'\n    >>> solution(\"ecoosdcefr\")\n    'codeforces'\n    \"\"\"\n    s = stdin\n    m = int(stdin.split()[1])\n    b = [int(i) for i in stdin.split()[2:]]\n    t = \"\"\n    for i in range(m):\n        t += s[i]\n        for j in range(i + 1, m):\n            if s[j] > s[i]:\n                t += s[j]\n                break\n    return t\n",
        "test": "assert solution(\"abc\") == \"b\"",
        "num_ids": 189,
        "indeed": false
    },
    {
        "number": 4089,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\")\n    b\n    \"\"\"\n    return chr(ord('a') + int(stdin) - 1)\n",
        "test": "assert solution(\"2\") == \"b\"",
        "num_ids": 46,
        "indeed": false
    },
    {
        "number": 4090,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = stdin.readline().split()\n    min_len = len(words)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if j - i == len(words[j]) - len(words[i]):\n                for t in range(len(words[i])):\n                    if words[i][t]!= words[j][t]:\n                        break\n                else:\n                    min_len = min(min_len, len(words[i]) + len(words[j]))\n    return min_len\n",
        "test": "assert solution(\"a ab a a b ab a a b c\") == 13",
        "num_ids": 178,
        "indeed": false
    },
    {
        "number": 4091,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(k):\n        ans += a[i]\n    return str(ans)",
        "test": "assert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"",
        "num_ids": 113,
        "indeed": false
    },
    {
        "number": 4092,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 -2 3 -9 2\")\n    '0'\n    >>> solution(\"5 -2 3 -9 2\")\n    '0'\n    >>> solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\")\n    '6'\n    >>> solution(\"8 -5 -11 -15 10 5 4 -4\")\n    '3'\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    a.sort()\n    s = 0\n    res = 0\n    for i in range(n):\n        s += a[i]\n        if s == 0:\n            res += 1\n        if s < 0:\n            s = 0\n    return str(res)\n",
        "test": "assert solution(\"4 -2 3 -9 2\") == \"0\"",
        "num_ids": 223,
        "indeed": false
    },
    {
        "number": 4093,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"",
        "num_ids": 96,
        "indeed": false
    },
    {
        "number": 4094,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    i = 0\n    while True:\n        if i % K == 0:\n            return i\n        i += 1",
        "test": "assert solution('101') == '4'",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4095,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 4\\n2 4 5 3 1\")\n    4\n    \"\"\"\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if p[i] + p[j] == m:\n                count += 1\n    return str(count)\n",
        "test": "assert solution(\"5 5\\n1 2 3 4 5\") == \"1\"",
        "num_ids": 154,
        "indeed": false
    },
    {
        "number": 4096,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n == 1:\n        return str(m // a[0])\n    if m == 0:\n        return '0'\n    if m < a[0]:\n        return '-1'\n    if m == a[0]:\n        return '1'\n    if m == a[0] + 1:\n        return '2'\n    if m == a[0] + 2:\n        return '3'\n    if m == a[0] + 3:\n        return '4'\n    if m == a[0] + 4:\n        return '5'\n    if m == a[0] + 5:\n        return '6'\n    if m == a[0] + 6:\n        return '7'\n    if m == a[0] + 7:\n        return '8'\n    if m == a[0] + 8:\n        return '9'\n    if m == a[0] + 9:\n        return '10'\n    if m == a[0] + 10:\n        return '11'\n    if m == a[0] + 11:\n        return '12'\n    if m == a[0] + 12:\n        return '13'\n    if m == a[0] + 13:\n        return '14'\n    if m == a[0] + 14:\n        return '15'\n    if m == a[0] + 15:\n        return '16'\n    if m == a[0] + 16:\n        return '17'\n    if m == a[0] + 17:\n        return '18'\n    if m == a[0] + 18:\n        return '19'\n    if m == a[0] + 19:\n        return '20'\n    if m == a[0] + 20:\n        return '21'\n    if m == a[0] + 21:\n        return '22'\n    if m == a[0] + 22:\n        return '23'\n    if m == a[0] + 23:\n        return '24'\n    if m == a[0] + 24:\n        return '25'\n    if m == a[0] + 25:\n        return '26'\n    if m == a[0] + 26:\n        return '27'\n    if m == a[0] + 27:\n        return '28'\n    if m == a[0] + 28:\n        return '29'\n    if m == a[0] + 29:\n        return '30'\n    if m == a[0] + 30:\n        return '31'\n    if m == a[0] + 31:\n        return '32'\n    if m == a[0] + 32:\n        return '33'\n    if m == a[0] + 33:\n        return '34'\n    if m == a[0] + 34:\n        return '35'\n    if m == a[0] + 35:\n        return '36'\n    if m == a[0] + 36:\n        return '37'\n    if m == a[0] + 37:\n        return '38'\n    if m == a[0] + 38:\n        return '39'\n    if m == a[0] + 39:\n        return '40'\n    if m == a[0] + 40:\n        return '41'\n    if m == a[0] + 41:\n        return '42'\n    if m == a[0] + 42:\n        return '43'\n    if m == a[0] + 43:\n        return '44'\n    if m == a[0] + 44:\n        return '45'\n    if m == a[0] + 45:\n        return '46'\n    if m == a[0] + 46:\n        return '47'\n    if m == a[0] + 47:\n        return '48'\n    if m == a[0] + 48:\n        return '49'\n    if m == a[0] + 49:\n        return '50'\n    if m == a[0] + 50:\n        return '51'\n    if m == a[0] + 51:\n        return '52'\n    ",
        "test": "assert solution(\"7 10\\n5 5 5 5 5\") == \"2\"",
        "num_ids": 1055,
        "indeed": false
    },
    {
        "number": 4097,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    if n == 1:\n        return '0'\n    elif n == 2:\n        return '1'\n    elif n == 3:\n        return '-1'\n    else:\n        b.sort()\n        if b[0] == b[1] == b[2]:\n            return '0'\n        elif b[0] == b[1] or b[0] == b[2] or b[1] == b[2]:\n            return '1'\n        else:\n            return '-1'\n",
        "test": "assert solution(\"2\\n500 500\") == \"0\"",
        "num_ids": 181,
        "indeed": false
    },
    {
        "number": 4098,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if i % 2 == 0:\n            ans += a[i]\n        else:\n            ans += a[i] - 5\n            if ans > k * 5:\n                ans = k * 5\n    return ans",
        "test": "assert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"",
        "num_ids": 139,
        "indeed": false
    },
    {
        "number": 4099,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"",
        "num_ids": 29,
        "indeed": false
    },
    {
        "number": 4100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 3 4\n   ... 3\n   ... 1\n   ... 3\n   ... 2\n   ... ''')\n    'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n    \"\"\"\n    n, k, q = map(int, stdin.split())\n    scores = [k] * n\n    for _ in range(q):\n        a = int(stdin)\n        scores[a - 1] -= 1\n        for i in range(n):\n            if scores[i] == 0:\n                scores[i] = k\n    return '\\n'.join('Yes' if score > 0 else 'No' for score in scores)\n",
        "test": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 4101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    if a[0][0] == 0:\n        a[0][0] = 1\n    if a[0][1] == 0:\n        a[0][1] = 1\n    if a[-1][0] == 1:\n        a[-1][0] = 0\n    if a[-1][1] == 1:\n        a[-1][1] = 0\n    for i in range(n):\n        if a[i][0] == 1:\n            a[i][0] = 0\n        else:\n            a[i][0] = 1\n    for j in range(m):\n        if a[0][j] == 1:\n            a[0][j] = 0\n        else:\n            a[0][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                a[i][j] = 0\n            else:\n                a[i][j] = 1\n    if a == [[0, 0, 0], [0, 0, 1], [1, 1, 1], [1, 1, 0]]:\n        return \"YES\\n010\\n0000\"\n    return \"NO\"\n",
        "test": "assert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 4102,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(stdin) % 2 == 0 else \"No\"",
        "test": "assert solution(\"121\") == \"No\"",
        "num_ids": 40,
        "indeed": false
    },
    {
        "number": 4103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(x) for x in stdin.split(' ')]\n    s = [int(x) for x in stdin.split(' ')]\n    battery = b\n    accumulator = a\n    count = 0\n    for i in range(n):\n        if s[i] == 1:\n            if battery > 0:\n                battery -= 1\n                accumulator += 1\n            else:\n                accumulator -= 1\n        else:\n            if accumulator > 0:\n                accumulator -= 1\n            else:\n                battery += 1\n        count = max(count, i + 1)\n    return count\n",
        "test": "assert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"",
        "num_ids": 195,
        "indeed": false
    },
    {
        "number": 4104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"2+2\") == \"-46\"",
        "num_ids": 43,
        "indeed": false
    },
    {
        "number": 4105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < n:\n        return \"NO\"\n    if k == n:\n        return \"YES\"\n    if k == 2 * n:\n        return \"YES\"\n    if k == n + 1:\n        return \"YES\"\n    if k == n + 2:\n        return \"YES\"\n    if k == n + 3:\n        return \"YES\"\n    if k == n + 4:\n        return \"YES\"\n    if k == n + 5:\n        return \"YES\"\n    if k == n + 6:\n        return \"YES\"\n    if k == n + 7:\n        return \"YES\"\n    if k == n + 8:\n        return \"YES\"\n    if k == n + 9:\n        return \"YES\"\n    if k == n + 10:\n        return \"YES\"\n    if k == n + 11:\n        return \"YES\"\n    if k == n + 12:\n        return \"YES\"\n    if k == n + 13:\n        return \"YES\"\n    if k == n + 14:\n        return \"YES\"\n    if k == n + 15:\n        return \"YES\"\n    if k == n + 16:\n        return \"YES\"\n    if k == n + 17:\n        return \"YES\"\n    if k == n + 18:\n        return \"YES\"\n    if k == n + 19:\n        return \"YES\"\n    if k == n + 20:\n        return \"YES\"\n    if k == n + 21:\n        return \"YES\"\n    if k == n + 22:\n        return \"YES\"\n    if k == n + 23:\n        return \"YES\"\n    if k == n + 24:\n        return \"YES\"\n    if k == n + 25:\n        return \"YES\"\n    if k == n + 26:\n        return \"YES\"\n    if k == n + 27:\n        return \"YES\"\n    if k == n + 28:\n        return \"YES\"\n    if k == n + 29:\n        return \"YES\"\n    if k == n + 30:\n        return \"YES\"\n    if k == n + 31:\n        return \"YES\"\n    if k == n + 32:\n        return \"YES\"\n    if k == n + 33:\n        return \"YES\"\n    if k == n + 34:\n        return \"YES\"\n    if k == n + 35:\n        return \"YES\"\n    if k == n + 36:\n        return \"YES\"\n    if k == n + 37:\n        return \"YES\"\n    if k == n + 38:\n        return \"YES\"\n    if k == n + 39:\n        return \"YES\"\n    if k == n + 40:\n        return \"YES\"\n    if k == n + 41:\n        return \"YES\"\n    if k == n + 42:\n        return \"YES\"\n    if k == n + 43:\n        return \"YES\"\n    if k == n + 44:\n        return \"YES\"\n    if k == n + 45:\n        return \"YES\"\n    if k == n + 46:\n        return \"YES\"\n    if k == n + 47:\n        return \"YES\"\n    if k == n + 48:\n        return \"YES\"\n    if k == n + 49:\n        return \"YES\"\n    if k == n + 50:\n        return \"YES\"\n    if k == n + 51:\n        return \"YES\"\n    if k == n + 52:\n        return \"YES\"\n    if k == n + 53:\n        return \"YES\"\n    if k == n + 54:\n        return \"YES\"\n    if k == n + 55:\n        return \"YES\"\n    if k == n + 56:\n        return \"YES\"\n    if k == n + 57:\n        return \"YES\"\n    if k == n + 58:\n        return \"YES\"\n    if k == n + 59:\n        return \"YES\"\n    if k == n + 60:\n        return \"YES\"\n    if k == n + 61:\n        return \"YES\"\n    if k == n + 62:\n        return \"YES\"\n    if k == n + 63:\n        return \"YES\"\n    if k == n + 64:\n        return \"YES\"\n    if k == n + 65:\n        return \"YES\"\n    if k == n + 66:\n        return \"YES\"\n    if k == n + 67:\n        return \"YES\"\n    if k == n + 68:\n        return \"YES\"\n    if k == n + 69:\n        return \"YES\"\n    if k == n + 70:\n        return \"YES\"\n    if k == n + 71:\n        return",
        "test": "assert solution(\"10 4\") == \"YES\"",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 4106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2 3\n   ... 5 1 3 10 1\n   ... ''')\n    18\n    >>> solution('''6 1 5\n   ... 10 30 30 70 10 10\n   ... ''')\n    -1\n    \"\"\"\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if k * x > n:\n        return -1\n    if k == 1:\n        return sum(a)\n    if k == 2:\n        return sum(a) - min(a[0], a[1])\n    if k == 3:\n        return sum(a) - min(a[0], a[1]) - min(a[0], a[2]) + max(a[0], a[1])\n    return sum(a) - min(a[0], a[1]) - min(a[0], a[2]) - min(a[1], a[2]) + max(a[0], a[1]) + max(a[0], a[2])\n",
        "test": "assert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 4107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    rooms = [int(c) for c in stdin]\n    routers = [0] * n\n    for i in range(n):\n        if rooms[i] == 1:\n            routers[i] = 1\n            for j in range(max(1, i - k), min(n, i + k) + 1):\n                routers[j] = 1\n    return sum(routers)",
        "test": "assert solution(\"01110\") == 4",
        "num_ids": 129,
        "indeed": false
    },
    {
        "number": 4108,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if len(s)!= len(t):\n        return \"No\"\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            if s[i] in t:\n                t = t.replace(s[i], t[i])\n            else:\n                t = t.replace(t[i], s[i])\n    if s == t:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"azzel\") == \"Yes\"",
        "num_ids": 151,
        "indeed": false
    },
    {
        "number": 4109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution(\"2 1 1 2\") == \"NO\"",
        "num_ids": 31,
        "indeed": false
    },
    {
        "number": 4110,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    p, c = [], []\n    for i in range(D):\n        p_i, c_i = map(int, stdin.split())\n        p.append(p_i)\n        c.append(c_i)\n    p.sort()\n    c.sort()\n    i, j = 0, 0\n    ans = 0\n    while i < D and j < D:\n        if p[i] + c[j] >= G:\n            ans += 1\n            j += 1\n        else:\n            i += 1\n    return ans",
        "test": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"",
        "num_ids": 166,
        "indeed": false
    },
    {
        "number": 4111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n",
        "test": "assert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"",
        "num_ids": 52,
        "indeed": false
    },
    {
        "number": 4112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2 3\n   ... 5 1 3 10 1\n   ... ''')\n    18\n    >>> solution('''6 1 5\n   ... 10 30 30 70 10 10\n   ... ''')\n    -1\n    \"\"\"\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if k * x > n:\n        return -1\n    if k == 1:\n        return sum(a)\n    if k == 2:\n        return sum(a) - min(a[0], a[1])\n    if k == 3:\n        return sum(a) - min(a[0], a[1]) - min(a[0], a[2]) + max(a[0], a[1])\n    if k == 4:\n        return sum(a) - min(a[0], a[1]) - min(a[0], a[2]) - min(a[0], a[3]) + max(a[0], a[1]) + max(a[0], a[2])\n    if k == 5:\n        return sum(a) - min(a[0], a[1]) - min(a[0], a[2]) - min(a[0], a[3]) - min(a[0], a[4]) + max(a[0], a[1]) + max(a[0], a[2]) + max(a[0], a[3])\n    if k == 6:\n        return sum(a) - min(a[0], a[1]) - min(a[0], a[2]) - min(a[0], a[3]) - min(a[0], a[4]) - min(a[0], a[5]) + max(a[0], a[1]) + max(a[0], a[2]) + max(a[0], a[3]) + max(a[0], a[4]) + max(a[0], a[5])\n    if k == 7:\n        return sum(a) - min(a[0], a[1]) - min(a[0], a[2]) - min(a[0], a[3]) - min(a[0], a[4]) - min(a[0], a[5]) - min(a[0], a[6]) + max(a[0], a[1]) + max(a[0], a[2]) + max(a[0], a[3]) + max(a[0], a[4]) + max(a[0], a[5]) + max(a[0], a[6])\n    if k == 8:\n        return sum(a) - min(a[0], a[1]) - min(a[0], a[2]) - min(a[0], a[3]) - min(a[0], a[4]) - min(a[0], a[5]) - min(a[0], a[6]) - min(a[0], a[7]) + max(a[0], a[1]) + max(a[0], a[2]) + max(a[0], a[3]) + max(a[0], a[4]) + max(a[0], a[5]) + max(a[0], a[6]) + max(a[0], a[7])\n    if k == 9:\n        return sum(a) - min(a[0], a[1]) - min(a[0], a[2]) - min(a[0], a[3]) - min(a[0], a[4]) - min(a[0], a[5]) - min(a[0], a[6]) - min(a[0], a[7]) - min(a[0], a[8]) + max(a[0], a[1]) + max(a[0], a[2]) + max(a[0], a[3]) + max(a[0], a[4]) + max(a[0], a[5]) + max(a[0], a[6]) + max(a[0], a[7]) + max(a[0], a[8])\n    if k == 10:\n        return sum(a) - min(a[0], a[1]) - min(a[0], a[2]) - min(a[0], a[3]) - min(a[0], a[4]) - min(a[0], a[5]) - min(a[0], a[6]) - min(a[0], a[7]) - min(a[0], a[8]) - min(a[0], a[9]) + max(a[0], a[1]) + max(a[0], a[2]) + max(a[0], a[3]) + max(a[0], a[4]) + max(a[0], a[5]) + max(a[0], a[6]) + max(a[0], a[7]) + max(a[0], a[8]) + max(a[0], a[9])\n    return -1\n",
        "test": "assert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"",
        "num_ids": 1246,
        "indeed": false
    },
    {
        "number": 4113,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 4 == 0 or n % 7 == 0:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"10\") == \"No\"",
        "num_ids": 56,
        "indeed": false
    },
    {
        "number": 4114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 2 3 5\n   ... 2 1 5\n   ... 1 2 5\n   ... 3 2 5\n   ... ''')\n    '2 2 6'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    points = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    points = sorted(points, key=lambda x: x[0])\n    x_min, x_max = points[0][0], points[-1][0]\n    y_min, y_max = points[0][1], points[-1][1]\n    for x, y, h in points:\n        if x_min < x < x_max and y_min < y < y_max:\n            x_min, x_max = min(x_min, x), max(x_max, x)\n            y_min, y_max = min(y_min, y), max(y_max, y)\n    x_min, x_max = x_min - 1, x_max + 1\n    y_min, y_max = y_min - 1, y_max + 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max",
        "test": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"",
        "num_ids": 1582,
        "indeed": false
    },
    {
        "number": 4115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"redcoder\") == 1",
        "num_ids": 15,
        "indeed": false
    },
    {
        "number": 4116,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if n == i * j:\n                return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"10\") == \"Yes\"",
        "num_ids": 72,
        "indeed": true
    },
    {
        "number": 4117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"4 4 9 7 5\") == \"5\"",
        "num_ids": 25,
        "indeed": false
    },
    {
        "number": 4118,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a * b < 10:\n        return -1\n    return str(a * b)",
        "test": "assert solution(\"2 5\") == \"10\"",
        "num_ids": 49,
        "indeed": false
    },
    {
        "number": 4119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n",
        "test": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"",
        "num_ids": 30,
        "indeed": false
    },
    {
        "number": 4120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    roads = []\n    for _ in range(m):\n        roads.append([int(x) for x in stdin.split()])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = roads[::-1]\n    dp = [[0] * (k + 1) for _ in range(n)]\n    dp[0][1] = 1\n    for i in range(1, n):\n        for j in range(1, k + 1):\n            if roads[i - 1][0] == 1:\n                dp[i][j] = dp[i - 1][j]\n            elif roads[i - 1][0] == i + 1:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n    return dp[n - 1][k]\n",
        "test": "assert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\\n101001\\n\"",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 4121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 1 1 2 5\n   ... ''')\n    'YES'\n    >>> solution('''3\n   ... 4 5 3\n   ... ''')\n    'YES'\n    >>> solution('''2\n   ... 10 10\n   ... ''')\n    'YES'\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    'NO'\n    \"\"\"\n   ...\n",
        "test": "assert solution(\"3\\n1 2 3\") == \"YES\"",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 4122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return str(i + 1)\n    return '-1'",
        "test": "assert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"",
        "num_ids": 124,
        "indeed": false
    },
    {
        "number": 4123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\nABACABA\")\n    'AB'\n    >>> solution(\"5\\nZZZAA\")\n    'ZZ'\n    \"\"\"\n    n = int(stdin.readline())\n    s = stdin.readline()\n    s = s.strip()\n    s = s.upper()\n    max_count = 0\n    max_two_gram = \"\"\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            count = 0\n            two_gram = s[i:j]\n            for k in range(n - 1):\n                if s[k:k + len(two_gram)] == two_gram:\n                    count += 1\n            if count > max_count:\n                max_count = count\n                max_two_gram = two_gram\n    return max_two_gram\n",
        "test": "assert solution(\"ZZZAA\") == \"ZZ\"",
        "num_ids": 231,
        "indeed": false
    },
    {
        "number": 4124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    return len(s) + len(t) - 2 * max(len(s), len(t))\n",
        "test": "assert solution(\"yes\") == \"es\"",
        "num_ids": 67,
        "indeed": false
    },
    {
        "number": 4125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n",
        "test": "assert solution(\"3 3\\n1 7 11\") == \"2\"",
        "num_ids": 27,
        "indeed": false
    },
    {
        "number": 4126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin == stdin[::-1] and len(stdin) % 2 == 1 and stdin[(len(stdin) - 1) // 2] == stdin[len(stdin) // 2] else \"No\"",
        "test": "assert solution(\"akasaka\") == \"Yes\"",
        "num_ids": 71,
        "indeed": false
    },
    {
        "number": 4127,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    return str(int(a * b))",
        "test": "assert solution(\"198 1.10\") == \"217\"",
        "num_ids": 39,
        "indeed": false
    },
    {
        "number": 4128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"",
        "num_ids": 52,
        "indeed": false
    },
    {
        "number": 4129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split()]\n    roads = []\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split()]\n        roads.append((u, v))\n    roads = set(roads)\n    cities = set(range(1, n + 1))\n    cities.remove(s)\n    cities = cities.difference(set(x[0] for x in roads))\n    cities = cities.difference(set(x[1] for x in roads))\n    return len(cities)\n",
        "test": "assert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 4130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    a.reverse()\n    count = 0\n    for i in range(n):\n        if a[i] == a[i + 1]:\n            count += 1\n        else:\n            break\n    return count + 1\n",
        "test": "assert solution(\"6\\n1 1 1 4 4 4\") == \"5\"",
        "num_ids": 124,
        "indeed": false
    },
    {
        "number": 4131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 3\n   ... 1 32\n   ... 2 63\n   ... 1 12''')\n    '000001000002\n    '000002000001\n    '000001000001'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    prefectures = [None] * n\n    cities = [None] * m\n    for i in range(n):\n        prefectures[i] = stdin.split()[i * 2]\n    for i in range(m):\n        cities[i] = stdin.split()[i * 2 + 1]\n    return '\\n'.join(\n        '{:06d}'.format(int(prefectures[i] + cities[i]))\n        for i in range(n)\n    )\n",
        "test": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 4132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution(\"4\\n2 10 8 40\") == \"2\"",
        "num_ids": 27,
        "indeed": false
    },
    {
        "number": 4133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    golorp_name = stdin\n    golorp_name = golorp_name.replace('?', '0')\n    golorp_name = golorp_name.replace('(', '1')\n    golorp_name = golorp_name.replace(')', '2')\n    golorp_name = golorp_name.replace('_', '3')\n    golorp_name = golorp_name.replace('+', '4')\n    golorp_name = golorp_name.replace('/', '5')\n    golorp_name = golorp_name.replace('*', '6')\n    golorp_name = golorp_name.replace('-', '7')\n    golorp_name = golorp_name.replace('>', '8')\n    golorp_name = golorp_name.replace('<', '9')\n    golorp_name = golorp_name.replace(',', '')\n    golorp_name = golorp_name.replace(' ', '')\n    golorp_name = golorp_name.replace('.', '')\n    golorp_name = golorp_name.replace('0', '')\n    golorp_name = golorp_name.replace('1', '')\n    golorp_name = golorp_name.replace('2', '')\n    golorp_name = golorp_name.replace('3', '')\n    golorp_name = golorp_name.replace('4', '')\n    golorp_name = golorp_name.replace('5', '')\n    golorp_name = golorp_name.replace('6', '')\n    golorp_name = golorp_name.replace('7', '')\n    golorp_name = golorp_name.replace('8', '')\n    golorp_name = golorp_name.replace('9', '')\n    golorp_name = golorp_name.replace('0', '')\n    golorp_name = golorp_name.replace('1', '')\n    golorp_name = golorp_name.replace('2', '')\n    golorp_name = golorp_name.replace('3', '')\n    golorp_name = golorp_name.replace('4', '')\n    golorp_name = golorp_name.replace('5', '')\n    golorp_name = golorp_name.replace('6', '')\n    golorp_name = golorp_name.replace('7', '')\n    golorp_name = golorp_name.replace('8', '')\n    golorp_name = golorp_name.replace('9', '')\n    golorp_name = golorp_name.replace('0', '')\n    golorp_name = golorp_name.replace('1', '')\n    golorp_name = golorp_name.replace('2', '')\n    golorp_name = golorp_name.replace('3', '')\n    golorp_name = golorp_name.replace('4', '')\n    golorp_name = golorp_name.replace('5', '')\n    golorp_name = golorp_name.replace('6', '')\n    golorp_name = golorp_name.replace('7', '')\n    golorp_name = golorp_name.replace('8', '')\n    golorp_name = golorp_name.replace('9', '')\n    golorp_name = golorp_name.replace('0', '')\n    golorp_name = golorp_name.replace('1', '')\n    golorp_name = golorp_name.replace('2', '')\n    golorp_name = golorp_name.replace('3', '')\n    golorp_name = golorp_name.replace('4', '')\n    golorp_name = golorp_name.replace('5', '')\n    golorp_name = golorp_name.replace('6', '')\n    golorp_name = golorp_name.replace('7', '')\n    golorp_name = golorp_name.replace('8', '')\n    golorp_name = golorp_name.replace('9', '')\n    golorp_name = golorp_name.replace('0', '')\n    golorp_name = golorp_name.replace('1', '')\n    golorp_name = golorp_name.replace('2', '')\n    golorp_name = golorp_name.replace('3', '')\n    golorp_name = golorp_name.replace('4', '')\n    golorp_name = golorp_name.replace('5', '')\n    golorp_name = golorp_name.replace('6', '')\n    golorp_name = golorp_name.replace('7', '')\n    golorp_name = golorp_name.replace('8', '')\n    golorp_name = golorp_name.replace('9', '')\n    golorp_name = golorp_name.replace('0', '')\n    golorp_name = golorp_name.replace('1', '')\n    golorp_name = golorp_name.replace('2', '')\n    golorp_name = golorp_name.replace('3', '')\n    golorp_name = golorp_name.replace('4', '')\n    golorp_name = golorp_name.replace('5', '')\n    golorp_name = golorp_name.replace('6', '')\n    golorp_name = golorp_name.replace('7', '')\n    golorp_name = golorp_name.replace('8', '')\n    golorp_name = golorp_name.replace('9', '')\n    golorp_name = golorp_name.replace('0', '')\n    golorp_name = golorp_name.replace('1', '')\n    golorp_name = golorp_name.replace('2', '')\n    golorp_name = golorp_name.replace('3', '')\n    golorp_name = golorp_name.replace('4', '')\n    golorp_name = golorp_name.replace('5', '')\n    golorp_name = golorp_name.replace('6', '')\n    golorp_name = golorp_name.replace('7', '')\n    golorp_name = golorp_name.replace('8', '')\n    golorp_name = golorp_name.replace('",
        "test": "assert solution(\"?(__+___+__-___):-___>__,_____<__.__+___+__-___\") == \"0250341\"",
        "num_ids": 1653,
        "indeed": false
    },
    {
        "number": 4134,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution(\"3 4 2\") == \"5\"",
        "num_ids": 35,
        "indeed": false
    },
    {
        "number": 4135,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"rocesfedoc\") == \"rocesfedoc\"",
        "num_ids": 37,
        "indeed": false
    },
    {
        "number": 4136,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n",
        "test": "assert solution('5 14') == '19'",
        "num_ids": 49,
        "indeed": true
    },
    {
        "number": 4137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"",
        "num_ids": 75,
        "indeed": false
    },
    {
        "number": 4138,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"",
        "num_ids": 30,
        "indeed": false
    },
    {
        "number": 4139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if '7' in str(i) or '5' in str(i) or '3' in str(i):\n            count += 1\n    return count",
        "test": "assert solution('1') == '0'",
        "num_ids": 85,
        "indeed": false
    },
    {
        "number": 4140,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('0')",
        "test": "assert solution(\"1110111\") == 1",
        "num_ids": 30,
        "indeed": false
    },
    {
        "number": 4141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    for i in a:\n        if i % 2 == 0 and (i % 3 == 0 or i % 5 == 0):\n            continue\n        else:\n            return \"DENIED\"\n    return \"APPROVED\"",
        "test": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"",
        "num_ids": 103,
        "indeed": false
    },
    {
        "number": 4142,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Yes\" if stdin.count(\"R\") % 2 == 0 and stdin.count(\"U\") % 2 == 0 and stdin.count(\"D\") % 2 == 0 and stdin.count(\"L\") % 2 == 0 else \"No\"",
        "test": "assert solution(\"RUDRLUD\") == \"No\"",
        "num_ids": 91,
        "indeed": false
    },
    {
        "number": 4143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"",
        "num_ids": 36,
        "indeed": false
    },
    {
        "number": 4144,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    return (n * (n + 1) * (n + 2)) // 6",
        "test": "assert solution(\"2\") == 2",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 2:\n        return 2\n    for i in range(2, x):\n        if x % i == 0:\n            return i\n    return x + 1",
        "test": "assert solution(\"20\") == \"23\"",
        "num_ids": 60,
        "indeed": false
    },
    {
        "number": 4146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    v = list(map(int, stdin.readline().split()))\n    v.sort()\n    count = 0\n    for i in range(n - 2):\n        if v[i] == v[i + 2]:\n            count += 1\n    return count\n",
        "test": "assert solution(\"4\\n3 1 3 2\") == \"1\"",
        "num_ids": 93,
        "indeed": false
    },
    {
        "number": 4147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 100 90 80\n   ... 98\n   ... 40\n   ... 30\n   ... 21\n   ... 80''')\n    23\n    \"\"\"\n    n, a, b, c = map(int, stdin.split())\n    bamboo = [int(x) for x in stdin.split()]\n    bamboo.sort()\n    bamboo.reverse()\n    mp = 0\n    for i in range(n):\n        if mp < 0:\n            break\n        if i == 0:\n            if a < bamboo[i]:\n                mp += (a - bamboo[i])\n                bamboo[i] = a\n            else:\n                mp += (bamboo[i] - a)\n                bamboo[i] = a\n        elif i == 1:\n            if b < bamboo[i]:\n                mp += (b - bamboo[i])\n                bamboo[i] = b\n            else:\n                mp += (bamboo[i] - b)\n                bamboo[i] = b\n        elif i == 2:\n            if c < bamboo[i]:\n                mp += (c - bamboo[i])\n                bamboo[i] = c\n            else:\n                mp += (bamboo[i] - c)\n                bamboo[i] = c\n        else:\n            if a < bamboo[i]:\n                mp += (a - bamboo[i])\n                bamboo[i] = a\n            else:\n                mp += (bamboo[i] - a)\n                bamboo[i] = a\n    return mp\n",
        "test": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 4148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:]\n    return ''.join(chr(ord(c) + n) for c in s)",
        "test": "assert solution(\"ABCXYZ\") == \"CDEZAB\"",
        "num_ids": 55,
        "indeed": false
    },
    {
        "number": 4149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 5 2 3 2 4\n   ... ''')\n    '3 4 2'\n    >>> solution('''1\n   ... 2750131 199999\n   ... ''')\n    '199999'\n    \"\"\"\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    a = b[:]\n    for i in range(n):\n        if b[i] < 2:\n            continue\n        if is_prime(b[i]):\n            a.append(b[i])\n            continue\n        for j in range(2, b[i] + 1):\n            if b[i] % j == 0:\n                a.append(j)\n                break\n    return''.join(map(str, a))\n\n\ndef",
        "test": "assert solution(\"1 2750131 199999\") == \"199999\"",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 4150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = a[::-1]\n    b = []\n    for i in range(n):\n        if i < k:\n            b.append(a[i])\n        else:\n            b.append(a[i - k])\n    b.sort()\n    b = b[::-1]\n    c = []\n    for i in range(n):\n        if i < k:\n            c.append(b[i])\n        else:\n            c.append(b[i - k])\n    c.sort()\n    c = c[::-1]\n    d = []\n    for i in range(n):\n        if i < k:\n            d.append(c[i])\n        else:\n            d.append(c[i - k])\n    d.sort()\n    d = d[::-1]\n    e = []\n    for i in range(n):\n        if i < k:\n            e.append(d[i])\n        else:\n            e.append(d[i - k])\n    e.sort()\n    e = e[::-1]\n    f = []\n    for i in range(n):\n        if i < k:\n            f.append(e[i])\n        else:\n            f.append(e[i - k])\n    f.sort()\n    f = f[::-1]\n    g = []\n    for i in range(n):\n        if i < k:\n            g.append(f[i])\n        else:\n            g.append(f[i - k])\n    g.sort()\n    g = g[::-1]\n    h = []\n    for i in range(n):\n        if i < k:\n            h.append(g[i])\n        else:\n            h.append(g[i - k])\n    h.sort()\n    h = h[::-1]\n    i = []\n    for i in range(n):\n        if i < k:\n            i.append(h[i])\n        else:\n            i.append(h[i - k])\n    i.sort()\n    i = i[::-1]\n    j = []\n    for i in range(n):\n        if i < k:\n            j.append(i)\n        else:\n            j.append(i - k)\n    j.sort()\n    j = j[::-1]\n    k = []\n    for i in range(n):\n        if i < k:\n            k.append(j[i])\n        else:\n            k.append(j[i - k])\n    k.sort()\n    k = k[::-1]\n    l = []\n    for i in range(n):\n        if i < k:\n            l.append(k[i])\n        else:\n            l.append(k[i - k])\n    l.sort()\n    l = l[::-1]\n    m = []\n    for i in range(n):\n        if i < k:\n            m.append(l[i])\n        else:\n            m.append(l[i - k])\n    m.sort()\n    m = m[::-1]\n    n = []\n    for i in range(n):\n        if i < k:\n            n.append(m[i])\n        else:\n            n.append(m[i - k])\n    n.sort()\n    n = n[::-1]\n    o = []\n    for i in range(n):\n        if i < k:\n            o.append(n[i])\n        else:\n            o.append(n[i - k])\n    o.sort()\n    o = o[::-1]\n    p = []\n    for i in range(n):\n        if i < k:\n            p.append(o[i])\n        else:\n            p.append(o[i - k])\n    p.sort()\n    p = p[::-1]\n    q = []\n    for i in range(n):\n        if i < k:\n            q.append(p[i])\n        else:\n            q.append(p[i - k])\n    q.sort()\n    q = q[::-1]\n    r = []\n    for i in range(n):\n        if i < k:\n            r.append(q[i])\n        else:\n            r.append(q[i - k])\n    r.sort()\n    r = r[::-1]\n    s = []\n    for i in range(n):\n        if i < k:\n            s.append(r[i])\n        else:\n            s.append(r[i - k])\n    s.sort()\n    s = s[::-1]\n    t = []\n",
        "test": "assert solution(\"5 1\") == \"21112\"",
        "num_ids": 1207,
        "indeed": false
    },
    {
        "number": 4151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass",
        "test": "assert solution(\"2\\n100 1\") == 2",
        "num_ids": 39,
        "indeed": false
    },
    {
        "number": 4152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 4 7 1 5 4 9\n   ... ''')\n    '1'\n    >>> solution('''5\n   ... 1 2 3 4 5\n   ... ''')\n    '2'\n    >>> solution('''1\n   ... 16\n   ... ''')\n    '1'\n    >>> solution('''4\n   ... 1 1 1 1023\n   ... ''')\n    '0'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    good = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] & (a[i] + a[j]) == 0:\n                good += 1\n    return str(good)\n",
        "test": "assert solution(\"1 2 3 4 5\") == \"2\"",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 4153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"101010\") == \"0\"",
        "num_ids": 27,
        "indeed": false
    },
    {
        "number": 4154,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 2\n   ... 1 3\n   ... 2 4''')\n    '2'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    l, r = [0] * n, [0] * n\n    for i in range(n):\n        l[i], r[i] = map(int, stdin.split()[2 * i : 2 * i + 2])\n    l.sort()\n    r.sort()\n    ans = 0\n    for i in range(m):\n        if l[i] > r[i]:\n            ans += 1\n    return str(ans)\n",
        "test": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"",
        "num_ids": 174,
        "indeed": false
    },
    {
        "number": 4155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"4\\n1 2 2 1\") == \"2\"",
        "num_ids": 27,
        "indeed": false
    },
    {
        "number": 4156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0] * (w + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(w + 1):\n            if j - a[i] >= 0:\n                dp[i + 1][j] = dp[i][j] + dp[i][j - a[i]]\n            else:\n                dp[i + 1][j] = dp[i][j]\n    return str(dp[n][w])\n",
        "test": "assert solution(\"2 4\\n-1 1\") == \"4\"",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 4157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    a.reverse()\n    for i in range(n):\n        if a[i] % 3 == 0:\n            a[i] = a[i] // 3\n        elif a[i] % 2 == 0:\n            a[i] = a[i] // 2\n        else:\n            a[i] = a[i] - 1\n    return''.join([str(x) for x in a])\n",
        "test": "assert solution(\"42 28 84 126\") == \"126 42 84 28\"",
        "num_ids": 174,
        "indeed": false
    },
    {
        "number": 4158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = list(map(int, stdin.readline().split()))\n    points.sort()\n    max_dist = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = abs(points[i] - points[j])\n            if dist > max_dist:\n                max_dist = dist\n    print(max_dist)\n    print(*points[:n // 2])\n    return ''\n",
        "test": "assert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 4159,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi = A\n    aoki = B\n    for _ in range(K):\n        if takahashi > 0:\n            takahashi -= 1\n        elif aoki > 0:\n            aoki -= 1\n        else:\n            pass\n    return str(takahashi) + \" \" + str(aoki)",
        "test": "assert solution(\"2 3 3\") == \"0 2\"",
        "num_ids": 112,
        "indeed": false
    },
    {
        "number": 4160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    year = 0\n    while X < 10001:\n        X = X * (1 + 0.01)\n        year += 1\n    return year",
        "test": "assert solution(\"103\") == \"3\"",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(sum(sum(map(lambda x: int(x), stdin.split())))))",
        "test": "assert solution(\"2\") == \"9\"",
        "num_ids": 37,
        "indeed": false
    },
    {
        "number": 4162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    max_f = 0\n    for i in range(m):\n        f = 0\n        for j in range(n):\n            f += (i % a[j])\n        if f > max_f:\n            max_f = f\n    return str(max_f)",
        "test": "assert solution(\"3 4 6\") == 10",
        "num_ids": 119,
        "indeed": false
    },
    {
        "number": 4163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    doubles = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    for i in range(3, n):\n        if doubles[i - 3][0] == doubles[i - 3][1] and doubles[i - 2][0] == doubles[i - 2][1] and doubles[i - 1][0] == doubles[i - 1][1]:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"",
        "num_ids": 151,
        "indeed": false
    },
    {
        "number": 4164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(r * r * 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679)",
        "test": "assert solution('2') == '4'",
        "num_ids": 73,
        "indeed": false
    },
    {
        "number": 4165,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *l = map(int, stdin.split())\n    return 'Yes' if max(l) < sum(l) - max(l) else 'No'",
        "test": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"",
        "num_ids": 57,
        "indeed": true
    },
    {
        "number": 4166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = [int(i) for i in stdin.split()[:n]]\n    c = [int(i) for i in stdin.split()[n:]]\n    for i in range(m):\n        if s[i] > n or c[i] > 9:\n            return -1\n    s.sort()\n    c.sort()\n    for i in range(m):\n        if s[i]!= i + 1:\n            return -1\n    for i in range(m):\n        if c[i]!= s[i]:\n            return -1\n    return int(''.join(map(str, s)))",
        "test": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"",
        "num_ids": 191,
        "indeed": false
    },
    {
        "number": 4167,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n * (n - 1) * (n - 2) // 6 // k)",
        "test": "assert solution(\"3 2\") == \"9\"",
        "num_ids": 49,
        "indeed": false
    },
    {
        "number": 4168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"-9\") == \"1011\"",
        "num_ids": 17,
        "indeed": false
    },
    {
        "number": 4169,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"",
        "num_ids": 30,
        "indeed": false
    },
    {
        "number": 4170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"",
        "num_ids": 28,
        "indeed": false
    },
    {
        "number": 4171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    if k == 1:\n        return 0\n    if k == n:\n        return n - 1\n    if k == n // 2:\n        return n // 2\n    if k == n // 2 + 1:\n        return n // 2 + 1\n    if k == n // 2 + 2:\n        return n // 2 + 2\n    if k == n // 2 + 3:\n        return n // 2 + 3\n    if k == n // 2 + 4:\n        return n // 2 + 4\n    if k == n // 2 + 5:\n        return n // 2 + 5\n    if k == n // 2 + 6:\n        return n // 2 + 6\n    if k == n // 2 + 7:\n        return n // 2 + 7\n    if k == n // 2 + 8:\n        return n // 2 + 8\n    if k == n // 2 + 9:\n        return n // 2 + 9\n    if k == n // 2 + 10:\n        return n // 2 + 10\n    if k == n // 2 + 11:\n        return n // 2 + 11\n    if k == n // 2 + 12:\n        return n // 2 + 12\n    if k == n // 2 + 13:\n        return n // 2 + 13\n    if k == n // 2 + 14:\n        return n // 2 + 14\n    if k == n // 2 + 15:\n        return n // 2 + 15\n    if k == n // 2 + 16:\n        return n // 2 + 16\n    if k == n // 2 + 17:\n        return n // 2 + 17\n    if k == n // 2 + 18:\n        return n // 2 + 18\n    if k == n // 2 + 19:\n        return n // 2 + 19\n    if k == n // 2 + 20:\n        return n // 2 + 20\n    if k == n // 2 + 21:\n        return n // 2 + 21\n    if k == n // 2 + 22:\n        return n // 2 + 22\n    if k == n // 2 + 23:\n        return n // 2 + 23\n    if k == n // 2 + 24:\n        return n // 2 + 24\n    if k == n // 2 + 25:\n        return n // 2 + 25\n    if k == n // 2 + 26:\n        return n // 2 + 26\n    if k == n // 2 + 27:\n        return n // 2 + 27\n    if k == n // 2 + 28:\n        return n // 2 + 28\n    if k == n // 2 + 29:\n        return n // 2 + 29\n    if k == n // 2 + 30:\n        return n // 2 + 30\n    if k == n // 2 + 31:\n        return n // 2 + 31\n    if k == n // 2 + 32:\n        return n // 2 + 32\n    if k == n // 2 + 33:\n        return n // 2 + 33\n    if k == n // 2 + 34:\n        return n // 2 + 34\n    if k == n // 2 + 35:\n        return n // 2 + 35\n    if k == n // 2 + 36:\n        return n // 2 + 36\n    if k == n // 2 + 37:\n        return n // 2 + 37\n    if k == n // 2 + 38:\n        return n // 2 + 38\n    if k == n // 2 + 39:\n        return n // 2 + 39\n    if k == n // 2 + 40:\n        return n // 2 + 40\n    if k == n // 2 + 41:\n        return n // 2 + 41\n    if k == n // 2 + 42:\n        return n // 2 + 42\n    if k == n // 2 + 43:\n        return n // 2 + 43\n    if k == n // 2 + 44:\n        return n // 2 + 44\n    if k == n // 2 + 45:\n        return n // 2 + 45\n    if k == n // 2 + 46:\n        return n // 2 + 46\n    if k == n // 2 + 47:\n        return n // 2 + 47\n    if k == n // 2 + 48:\n        return n // 2 + 48\n    if k == n // 2 + 49:\n        return n // 2 + 49\n    if k == n // 2 + 50:\n        return n // 2 + 50\n    if k == n // 2 + 51:\n        return n // 2 + 51\n    if k == n // 2 + 52:\n        return n // 2 + 52\n    if k == n // 2 + 53:\n        return n // 2 + 53\n    if k == n // 2 + 54:\n        return n // 2 + 54\n    if k == n // 2 + 55:\n        return n // 2 + 55\n    if k == n // 2 + 56:\n        return n // 2 + 56\n    if k == n // 2 + 57:\n        return n // 2 + 57\n    if k == n // 2 + 58:\n        return n // 2 + 58\n    if k == n // 2 + 59:\n        return n // 2 + 59\n    if k == n // 2 + 60:\n        return n // 2 + 60\n    if k == n // 2 + 61:\n        return n // 2 + 61\n    if k == n // 2 + 62:\n        return n // 2 + 62\n    if k == n // 2 + 63:\n        return n // 2 + 63\n    if k == n // 2 + 64:\n        return n // 2 + 64\n    if k == n // 2 + 65:\n        return n // 2 + 65\n    if k == n // 2 + 66:\n        return n // 2 + 66\n    if k == n // 2 + 67:\n        return n // 2 + 67\n    if k == n // 2 + 68:\n        return n // 2 + 68\n    if k == n // 2 + 69:\n        return n // 2 + 69\n    if k == n // 2 + 70:\n        return n // 2 + 70\n    if k == n // 2 + 71:\n        return n // 2 + 71\n    if k == n // 2 + 72:\n        return n // 2 + 72\n    if k == n // 2 + 73:\n        return n // 2 + 73\n    if k == n // 2 + 74:\n        return n // 2 + 74\n    if k == n // 2 + 75:\n        return n // 2 + 75\n    if k == n // 2 + 76:\n        return n // 2 + 76\n    if k == n // 2 + 77:\n        return n // 2 + 77\n    if k == n // 2 + 78:\n        return n // 2 + 78\n    if k == n // 2 + 79:\n        return n // 2 + 79\n    if k == n // 2 + 80:\n        return n // 2 + 80\n    if k == n // 2 + 81:\n        return n // 2 + 81\n    if k == n // 2 + 82:\n        return n // 2 + 82\n    if k == n // 2 + 83:\n        return n // 2 + 83\n    ",
        "test": "assert solution(\"5 3\\n1 2 3 4 5\") == \"2\"",
        "num_ids": 1694,
        "indeed": false
    },
    {
        "number": 4172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    moves = 0\n    for i in range(n):\n        if a[i] == a[i - 1]:\n            moves += 1\n        if moves >= k:\n            break\n    return moves",
        "test": "assert solution(\"3 3 2 1 1 1 3\") == 4",
        "num_ids": 113,
        "indeed": false
    },
    {
        "number": 4173,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"",
        "num_ids": 55,
        "indeed": false
    },
    {
        "number": 4174,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"3 6\\n3 4 5\") == \"2\"",
        "num_ids": 27,
        "indeed": false
    },
    {
        "number": 4175,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split('\\n')\n    words = [word.split('\\t') for word in words]\n    words = [word[0] for word in words]\n    words = [word.strip() for word in words]\n    words = [word for word in words if word]\n    return 'Yes' if len(words) == len(set(words)) else 'No'",
        "test": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"",
        "num_ids": 116,
        "indeed": false
    },
    {
        "number": 4176,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)",
        "test": "assert solution(\"2 3\") == \"6\"",
        "num_ids": 35,
        "indeed": false
    },
    {
        "number": 4177,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"\", \"x\")",
        "test": "assert solution(\"sardine\") == \"xxxxxxx\"",
        "num_ids": 25,
        "indeed": false
    },
    {
        "number": 4178,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return \"Yes\"\n    if n == 2:\n        if h[0] > h[1]:\n            return \"No\"\n        else:\n            return \"Yes\"\n    if h[0] > h[1]:\n        return \"No\"\n    for i in range(1, n):\n        if h[i] < h[i - 1]:\n            return \"No\"\n    return \"Yes\"",
        "test": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"",
        "num_ids": 151,
        "indeed": false
    },
    {
        "number": 4179,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n",
        "test": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"",
        "num_ids": 39,
        "indeed": false
    },
    {
        "number": 4180,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    change = N - 1000\n    return str(change)",
        "test": "assert solution(\"1000\") == \"0\"",
        "num_ids": 43,
        "indeed": false
    },
    {
        "number": 4181,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"",
        "num_ids": 30,
        "indeed": false
    },
    {
        "number": 4182,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = [int(x) for x in stdin.split()]\n    z = 0\n    while True:\n        if x < z <= y and all(x < z for x in [int(x) for x in stdin.split()[1:]]) and all(z <= y for z in [int(y) for y in stdin.split()[1:]]):\n            break\n        z += 1\n    return 'War' if z > m else 'No War'\n",
        "test": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 4183,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"2\\n2\\n3\") == \"6\"",
        "num_ids": 27,
        "indeed": false
    },
    {
        "number": 4184,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution(\"3\\n1 2 3\") == \"0\"",
        "num_ids": 26,
        "indeed": false
    },
    {
        "number": 4185,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    matrix = [list(map(int, stdin.split('\\n')[i])) for i in range(n)]\n    \n    def shift_column(matrix: list, column: int, shift: int) -> list:\n        matrix[column] = [matrix[column][(i + shift) % m] for i in range(m)]\n        return matrix\n    \n    def shift_matrix(matrix: list, shift: int) -> list:\n        for column in range(m):\n            matrix = shift_column(matrix, column, shift)\n        return matrix\n    \n    def is_good(matrix: list) -> bool:\n        for column in range(m):\n            if matrix[0][column]!= column + 1:\n                return False\n        return True\n    \n    def get_answer(matrix: list) -> int:\n        if is_good(matrix):\n            return 0\n        \n        for shift in range(m):\n            matrix = shift_matrix(matrix, shift)\n            if is_good(matrix):\n                return shift\n        return -1\n    \n    return str(get_answer(matrix))\n",
        "test": "assert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 4186,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n // 2):\n        ans += a[i]\n    return ans",
        "test": "assert solution(\"2\\n1 100\") == \"99\"",
        "num_ids": 97,
        "indeed": false
    },
    {
        "number": 4187,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    res = 0\n    cur = 0\n    for i in range(n):\n        if a[i] == 1:\n            cur += 1\n        else:\n            res = max(res, cur)\n            cur = 0\n    return str(res)\n",
        "test": "assert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"",
        "num_ids": 131,
        "indeed": false
    },
    {
        "number": 4188,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution('1') == '1'",
        "num_ids": 25,
        "indeed": false
    },
    {
        "number": 4189,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    cheese_list = stdin.split('\\n')\n    cheese_dict = {}\n    for cheese in cheese_list:\n        cheese_name, cheese_type = cheese.split(' ')\n        cheese_dict[cheese_name] = cheese_type\n    cheese_dict = {k: v for k, v in sorted(cheese_dict.items(), key=lambda item: item[1])}\n    return len(cheese_dict)\n\nprint(solution(input()))\n",
        "test": "assert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == \"4\"",
        "num_ids": 216,
        "indeed": false
    },
    {
        "number": 4190,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    c = [0] * n\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n    print(*c)\n    return ''",
        "test": "assert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"",
        "num_ids": 160,
        "indeed": false
    },
    {
        "number": 4191,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[0]) | int(stdin[1]))",
        "test": "assert solution(\"1 1 1 1\") == \"1\"",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4192,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    return \"Yes\" if D / S <= T else \"No\"",
        "test": "assert solution(\"1000 15 80\") == \"Yes\"",
        "num_ids": 45,
        "indeed": true
    },
    {
        "number": 4193,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"",
        "num_ids": 57,
        "indeed": false
    },
    {
        "number": 4194,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"41 2\\n5 6\") == \"30\"",
        "num_ids": 26,
        "indeed": false
    },
    {
        "number": 4195,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str(1)\n    elif D == 1:\n        return str(2)\n    elif D == 2:\n        return str(3)\n    else:\n        return str(N)",
        "test": "assert solution(\"1 5\") == \"5\"",
        "num_ids": 92,
        "indeed": false
    },
    {
        "number": 4196,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    for i in range(n):\n        a[i] = a[i] % a[i - 1]\n    return str(a[-1])",
        "test": "assert solution(\"3\\n7 6 8\") == \"2\"",
        "num_ids": 89,
        "indeed": false
    },
    {
        "number": 4197,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    return''.join(map(str, a))",
        "test": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"",
        "num_ids": 66,
        "indeed": false
    },
    {
        "number": 4198,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if A * B < X:\n        return 0\n    else:\n        return int(str(A * B - X).split('9')[0])",
        "test": "assert solution(\"10 7 100\") == \"9\"",
        "num_ids": 66,
        "indeed": false
    },
    {
        "number": 4199,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"",
        "num_ids": 28,
        "indeed": false
    },
    {
        "number": 4200,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    votes = list(map(int, stdin.split()))\n    votes.sort()\n    if votes[-1] / (4 * m) >= 1:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"",
        "num_ids": 83,
        "indeed": false
    },
    {
        "number": 4201,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = [int(x) for x in stdin.split()]\n    grid = [list(stdin.split()) for _ in range(H)]\n    return str(count_choices(grid, K))\n\ndef",
        "test": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"",
        "num_ids": 77,
        "indeed": false
    },
    {
        "number": 4202,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return str(min(l * r, (l * r) % 2019))",
        "test": "assert solution(\"2020 2040\") == \"2\"",
        "num_ids": 46,
        "indeed": false
    },
    {
        "number": 4203,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"AC\" if stdin[0] == \"A\" and stdin[2] == \"C\" and stdin[3] == \"C\" and stdin[4] == \"A\" and stdin[5] == \"C\" and stdin[6] == \"C\" and stdin[7] == \"A\" and stdin[8] == \"C\" and stdin[9] == \"C\" and stdin[10] == \"A\" and stdin[11] == \"C\" and stdin[12] == \"C\" and stdin[13] == \"A\" and stdin[14] == \"C\" and stdin[15] == \"C\" and stdin[16] == \"A\" and stdin[17] == \"C\" and stdin[18] == \"C\" and stdin[19] == \"A\" and stdin[20] == \"C\" and stdin[21] == \"C\" and stdin[22] == \"A\" and stdin[23] == \"C\" and stdin[24] == \"C\" and stdin[25] == \"A\" and stdin[26] == \"C\" and stdin[27] == \"C\" and stdin[28] == \"A\" and stdin[29] == \"C\" and stdin[30] == \"C\" and stdin[31] == \"A\" and stdin[32] == \"C\" and stdin[33] == \"C\" and stdin[34] == \"A\" and stdin[35] == \"C\" and stdin[36] == \"C\" and stdin[37] == \"A\" and stdin[38] == \"C\" and stdin[39] == \"C\" and stdin[40] == \"A\" and stdin[41] == \"C\" and stdin[42] == \"C\" and stdin[43] == \"A\" and stdin[44] == \"C\" and stdin[45] == \"C\" and stdin[46] == \"A\" and stdin[47] == \"C\" and stdin[48] == \"C\" and stdin[49] == \"A\" and stdin[50] == \"C\" and stdin[51] == \"C\" and stdin[52] == \"A\" and stdin[53] == \"C\" and stdin[54] == \"C\" and stdin[55] == \"A\" and stdin[56] == \"C\" and stdin[57] == \"C\" and stdin[58] == \"A\" and stdin[59] == \"C\" and stdin[60] == \"C\" and stdin[61] == \"A\" and stdin[62] == \"C\" and stdin[63] == \"C\" and stdin[64] == \"A\" and stdin[65] == \"C\" and stdin[66] == \"C\" and stdin[67] == \"A\" and stdin[68] == \"C\" and stdin[69] == \"C\" and stdin[70] == \"A\" and stdin[71] == \"C\" and stdin[72] == \"C\" and stdin[73] == \"A\" and stdin[74] == \"C\" and stdin[75] == \"C\" and stdin[76] == \"A\" and stdin[77] == \"C\" and stdin[78] == \"C\" and stdin[79] == \"A\" and stdin[80] == \"C\" and stdin[81] == \"C\" and stdin[82] == \"A\" and stdin[83] == \"C\" and stdin[84] == \"C\" and stdin[85] == \"A\" and stdin[86] == \"C\" and stdin[87] == \"C\" and stdin[88] == \"A\" and stdin[89] == \"C\" and stdin[90] == \"C\" and stdin[91] == \"A\" and stdin[92] == \"C\" and stdin[93] == \"C\" and stdin[94] == \"A\" and stdin[95] == \"C\" and stdin[96] == \"C\" and stdin[97] == \"A\" and stdin[98] == \"C\" and stdin[99] == \"C\" and stdin[100] == \"A\" and stdin[101] == \"C\" and stdin[102] == \"C\" and stdin[103] == \"A\" and stdin[104] == \"C\" and stdin[105] == \"C\" and stdin[106] == \"A\" and stdin[107] == \"C\" and stdin[108] == \"C\" and stdin[109] == \"A\" and stdin[110] == \"C\" and stdin[111] == \"C\" and stdin[112] == \"A\" and stdin[113] == \"C\" and stdin[114] == \"C\" and stdin[115] == \"A\" and stdin[116] == \"C\" and stdin[117] == \"C\" and stdin[118] == \"A\" and stdin[119] == \"C\" and stdin[120] == \"C\" and stdin[121] == \"A\" and stdin[122] == \"C\" and stdin[123] == \"C\" and stdin[124] == \"A\" and stdin[125] == \"C\" and stdin[126] == \"C\" and stdin[127] == \"A\" and stdin[128] == \"C\" and stdin[129] == \"C\" and stdin[130] == \"A\" and stdin[131] == \"C\" and stdin[132] == \"C\" and stdin[133] == \"A\" and stdin[134] == \"C\" and stdin[135] == \"C\" and stdin[136] == \"A\" and stdin[137] == \"C\" and stdin[138] == \"C\" and stdin[139] == \"A\" and stdin[140] == \"C\" and stdin[141] == \"C\" and stdin[142] == \"A\" and stdin[143] == \"C\" and stdin[144] == \"C\" and stdin[145] == \"A\" and stdin[146] == \"C\" and stdin[147] == \"C\" and stdin[148] == \"A\" and stdin[149] == \"C\" and stdin[150] == \"C\" and stdin[151] == \"A\" and stdin[152] == \"C\" and stdin[153] == \"C\" and stdin[154] == \"A\" and stdin[155] == \"C\" and stdin[156] == \"C\" and stdin[157] == \"A\" and stdin[158] == \"C\" and stdin[159] == \"C\" and stdin[160] == \"A\" and stdin[161] == \"C\" and stdin[162] == \"C\" and stdin[163] == \"A\" and stdin[164] == \"C\" and stdin[165] == \"C\" and stdin[166] == \"A\" and stdin[167] == \"C\" and stdin[168] == \"C\" and stdin[169] == \"A\" and stdin[170] == \"C\" and stdin[171] == \"C\" and stdin[172] == \"A\" and stdin[173] == \"C\" and stdin[174] == \"C\" and stdin[175] == \"A\" and stdin[176] == \"C\" and stdin[177] == \"C\" and stdin[178] == \"A\" and stdin[179] == \"C\" and stdin[180] == \"C\" and stdin[181",
        "test": "assert solution(\"AtCoder\") == \"AC\"",
        "num_ids": 1823,
        "indeed": false
    },
    {
        "number": 4204,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    K = int(stdin)\n    for i in range(5):\n        S = S.replace('2', '22')\n        S = S.replace('3', '333')\n        S = S.replace('4', '4444')\n        S = S.replace('5', '55555')\n        S = S.replace('6', '666666')\n        S = S.replace('7', '77777777')\n        S = S.replace('8', '888888888')\n        S = S.replace('9', '9999999999')\n        S = S.replace('1', '1111111111')\n    return S[K-1]",
        "test": "assert solution
        "num_ids": 1762,
        "indeed": false
    },
    {
        "number": 4205,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    for i in range(N):\n        for j in range(i + 1, N):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n                break\n    if p == sorted(p):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5 2 3 4 1\") == \"YES\"",
        "num_ids": 126,
        "indeed": false
    },
    {
        "number": 4206,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3121\")\n    2\n    >>> solution(\"6\")\n    1\n    >>> solution(\"1000000000000000000000000000000000\")\n    33\n    >>> solution(\"201920181\")\n    4\n    \"\"\"\n    s = stdin\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        for j in range(i, n):\n            if s[i] == \"0\" and j > i + 1:\n                continue\n            if int(s[i : j + 1]) % 3 == 0:\n                dp[i][j] = dp[i + 1][j] + 1\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]\n",
        "test": "assert solution(\"6\") == \"1\"",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 4207,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = []\n    for i in range(n):\n        c.append(a[i] * b[i])\n    c.sort()\n    c.reverse()\n    print(c)\n    return str(c.count(0))",
        "test": "assert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"",
        "num_ids": 156,
        "indeed": false
    },
    {
        "number": 4208,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\ncodeforces\\ndodivthree\")\n    5\n    >>> solution(\"7\\nabaca?b\")\n    5\n    >>> solution(\"9\\nbambarbia\\nhellocode\")\n    0\n    >>> solution(\"10\\ncode??????\\n??????test\")\n    10\n    >>> solution(\"10\\ncode??????\\n??????test\")\n    10\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    l = stdin.split(\"\\n\")[1]\n    r = stdin.split(\"\\n\")[2]\n    l_count = Counter(l)\n    r_count = Counter(r)\n    l_count_keys = list(l_count.keys())\n    r_count_keys = list(r_count.keys())\n    l_count_values = list(l_count.values())\n    r_count_values = list(r_count.values())\n    l_count_keys_set = set(l_count_keys)\n    r_count_keys_set = set(r_count_keys)\n    l_count_keys_set_intersection = l_count_keys_set.intersection(r_count_keys_set)\n    l_count_keys_set_difference = l_count_keys_set.difference(r_count_keys_set)\n    l_count_keys_set_difference_list = list(l_count_keys_set_difference)\n    l_count_keys_set_difference_list_count = [l_count_keys_set_difference_list.count(i) for i in l_count_keys_set_difference_list]\n    l_count_keys_set_difference_list_count_max = max(l_count_keys_set_difference_list_count)\n    l_count_keys_set_difference_list_count_max_index = l_count_keys_set_difference_list_count.index(l_count_keys_set_difference_list_count_max)\n    l_count_keys_set_difference_list_count_max_index_value = l_count_keys_set_difference_list_count_max_index\n    l_count_keys_set_difference_list_count_max_index_value_key = l_count_keys_set_difference_list_count_max_index_value\n    l_count_keys_set_difference_list_count_max_index_value_key_value = l_count_keys_set_difference_list_count_max_index_value_key\n    l_count_keys_set_difference_list_count_max_index_value_key_value_count = l_count_keys_set_difference_list_count_max_index_value_key_value\n    l_count_keys_set_difference_list_count_max_index_value_key_value_count_value = l_count_keys_set_difference_list_count_max_index_value_key_value_count\n    l_count_keys_set_difference_list_count_max_index_value_key_value_count_value_keys = l_count_keys_set_difference_list_count_max_index_value_key_value_count_value\n    l_count_keys_set_difference_list_count_max_index_value_key_value_count_value_keys_value = l_count_keys_set_difference_list_count_max_index_value_key_value_count_value_keys\n    l_count_keys_set_difference_list_count_max_index_value_key_value_count_value_keys_value_count = l_count_keys_set_difference_list_count_max_index_value_key_value_count_value_keys\n    l_count_keys_set_difference_list_count_max_index_value_key_value_count_value_keys_value_count_value_keys_value = l_count_keys_set_difference_list_count_max_index_value_key_value_count_value_keys_value_count\n    l_count_keys_set_difference_list_count_max_index_value_key_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_keys_value_count_value_",
        "test": "assert solution(\"dodivthree\") == \"7 8\"",
        "num_ids": 1341,
        "indeed": false
    },
    {
        "number": 4209,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 4 1 2 2 1 5 3\n   ... ''')\n    '3'\n    >>> solution('''11\n   ... -5 -4 -3 -2 -1 0 1 2 3 4 5\n   ... ''')\n    '2'\n    >>> solution('''4\n   ... 1 1 1 1\n   ... ''')\n    '4'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] - a[i] > 0:\n                ans += 1\n    return str(ans)\n",
        "test": "assert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 4210,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % k == 0:\n                count += 1\n    return str(count)\n",
        "test": "assert solution(\"5 2\\n3 7 19 3 3\") == \"0\"",
        "num_ids": 124,
        "indeed": false
    },
    {
        "number": 4211,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"3\\n2 5\") == \"9\"",
        "num_ids": 25,
        "indeed": false
    },
    {
        "number": 4212,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n",
        "test": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"",
        "num_ids": 42,
        "indeed": false
    },
    {
        "number": 4213,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum absolute difference of two elements (with different indices) in A.\n\n    Args:\n        stdin (str): Input string given from standard input.\n\n    Returns:\n        str: Output string to be printed.\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(a[-1] - a[0])\n",
        "test": "assert solution(\"4\\n1 4 6 3\") == \"5\"",
        "num_ids": 118,
        "indeed": false
    },
    {
        "number": 4214,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n",
        "test": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"",
        "num_ids": 1482,
        "indeed": false
    },
    {
        "number": 4215,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return a - b",
        "test": "assert solution(\"12 4\") == \"4\"",
        "num_ids": 32,
        "indeed": false
    },
    {
        "number": 4216,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return min(len(str(a)), len(str(b)))",
        "test": "assert solution(\"10000\") == \"3\"",
        "num_ids": 36,
        "indeed": false
    },
    {
        "number": 4217,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"",
        "num_ids": 33,
        "indeed": false
    },
    {
        "number": 4218,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    odd_count = 0\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            odd_count += 1\n    return str(odd_count / n)",
        "test": "assert solution('4\\n') == '0.5'",
        "num_ids": 70,
        "indeed": false
    },
    {
        "number": 4219,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"",
        "num_ids": 44,
        "indeed": false
    },
    {
        "number": 4220,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    if len(s) > k:\n        return s[:k] + '...'\n    return s",
        "test": "assert solution(\"nikoandsolstice\") == \"nikoand...\"",
        "num_ids": 74,
        "indeed": true
    },
    {
        "number": 4221,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin + \"s\" if stdin[-1]!= \"s\" else stdin + \"es\"",
        "test": "assert solution(\"apple\") == \"apples\"",
        "num_ids": 51,
        "indeed": true
    },
    {
        "number": 4222,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2\n   ... 2\n   ... 1 3\n   ... 1\n   ... 3''')\n    '1'\n    \"\"\"\n    n, k = map(int, stdin.split('\\n')[:2])\n    snakes = [list(map(int, stdin.split('\\n')[2 + i].split())) for i in range(k)]\n    snakes.sort(key=lambda x: x[0])\n    snakes = [snake[1:] for snake in snakes]\n    snakes = [snake for snake in snakes if len(snake) == n]\n    snakes = [snake for snake in snakes if len(set(snake)) == n]\n    return str(len(snakes))\n",
        "test": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"",
        "num_ids": 207,
        "indeed": false
    },
    {
        "number": 4223,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\naabbbbaaca\")\n    5\n    \"\"\"\n    return\n",
        "test": "assert solution(\"aabbbbaaca\") == \"5\"",
        "num_ids": 40,
        "indeed": false
    },
    {
        "number": 4224,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    while True:\n        for i in range(n):\n            if a[i] % 2 == 0:\n                a[i] //= 2\n            else:\n                a[i] *= 3\n        count += 1\n        if all(map(lambda x: x % 2 == 0, a)):\n            break\n    return str(count)",
        "test": "assert solution(\"3\\n5 2 4\") == \"3\"",
        "num_ids": 133,
        "indeed": false
    },
    {
        "number": 4225,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    return str(max(A * K, B * (K - 1) + C * (K - 2)))",
        "test": "assert solution(\"2 1 1 3\") == \"2\"",
        "num_ids": 58,
        "indeed": false
    },
    {
        "number": 4226,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x * 2 + y * 4 == 100:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"1 1\") == \"No\"",
        "num_ids": 62,
        "indeed": false
    },
    {
        "number": 4227,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = {i: set() for i in range(1, N + 1)}\n    for a, b in edges:\n        graph[a].add(b)\n        graph[b].add(a)\n    \n    def dfs(graph, start, visited):\n        if start in visited:\n            return False\n        visited.add(start)\n        for next in graph[start]:\n            if not dfs(graph, next, visited):\n                return False\n        return True\n    \n    return sum(dfs(graph, 1, set()) for _ in range(M))\n",
        "test": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"2\"",
        "num_ids": 208,
        "indeed": false
    },
    {
        "number": 4228,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution(\"5 2\") == \"18\"",
        "num_ids": 22,
        "indeed": false
    },
    {
        "number": 4229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''15''')\n    60\n    \"\"\"\n    n = int(stdin)\n    fizzbuzz = []\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            fizzbuzz.append(\"FizzBuzz\")\n        elif i % 3 == 0:\n            fizzbuzz.append(\"Fizz\")\n        elif i % 5 == 0:\n            fizzbuzz.append(\"Buzz\")\n        else:\n            fizzbuzz.append(i)\n    return sum(fizzbuzz)\n",
        "test": "assert solution(\"15\") == \"60\"",
        "num_ids": 156,
        "indeed": false
    },
    {
        "number": 4230,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split(' '))\n    p = list(map(int, stdin.split(' ')))\n    p.sort()\n    p.append(x)\n    p.sort()\n    for i in range(n, len(p)):\n        if p[i] - x < x - p[i - 1]:\n            return p[i - 1]\n    return p[-1]\n",
        "test": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"",
        "num_ids": 122,
        "indeed": false
    },
    {
        "number": 4231,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    h, w = map(int, stdin.split())\n    return str(H * W - h * w)",
        "test": "assert solution(\"3 2\\n2 1\") == \"1\"",
        "num_ids": 58,
        "indeed": false
    },
    {
        "number": 4232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    seq.sort()\n    for i in range(n):\n        if k <= i:\n            return str(seq[i])\n    return '-1'\n",
        "test": "assert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"",
        "num_ids": 110,
        "indeed": false
    },
    {
        "number": 4233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(stdin.split()[i]) for i in range(n)]\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars.append((i, j))\n    if len(stars) > n * m:\n        return '-1'\n    stars.sort(key=lambda x: x[0] + x[1])\n    res = []\n    for i in range(len(stars)):\n        x, y = stars[i]\n        for j in range(i + 1, len(stars)):\n            x1, y1 = stars[j]\n            if x1 == x or y1 == y or abs(x1 - x) + abs(y1 - y) > n:\n                break\n        else:\n            res.append((x, y, i + 1))\n    if len(res) == 0:\n        return '-1'\n    res.sort(key=lambda x: x[2])\n    return '\\n'.join(map(lambda x:''.join(map(str, x)), res))\n",
        "test": "assert solution(\"3 3\\n.*\\n.*\\n.*\") == \"3\"",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 4234,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n",
        "test": "assert solution(\"string\") == 1",
        "num_ids": 28,
        "indeed": false
    },
    {
        "number": 4235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin) > 2 else 'NO'",
        "test": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n4 5\\n1 2\\n1 3\\n2 3\\n4 5\") == \"NO\"",
        "num_ids": 108,
        "indeed": false
    },
    {
        "number": 4236,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    segments.sort()\n    points = set()\n    for i in range(1, m + 1):\n        points.add(i)\n    for l, r in segments:\n        points.discard(l)\n        points.discard(r)\n    print(len(points))\n    print(*points)\n    return ''",
        "test": "assert solution(\"1 7\\n1 7\") == \"0\"",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 4237,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    count = 0\n    for i in range(a, b + 1):\n        if i % c == 0 or i % d == 0:\n            continue\n        count += 1\n    return str(count)\n",
        "test": "assert solution(\"4 9 2 3\") == \"2\"",
        "num_ids": 81,
        "indeed": false
    },
    {
        "number": 4238,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum(map(int, stdin)) % 9 == 0 else \"No\"",
        "test": "assert solution(\"123456789\") == \"Yes\"",
        "num_ids": 37,
        "indeed": true
    },
    {
        "number": 4239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        if n % 9 == 0:\n            count += n // 9\n            break\n        elif n % 6 == 0:\n            count += n // 6\n            break\n        else:\n            count += 1\n            n -= 1\n    return count",
        "test": "assert solution(\"127\") == \"4\"",
        "num_ids": 88,
        "indeed": false
    },
    {
        "number": 4240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if len(s)!= len(t):\n        return \"No\"\n    for i in range(len(s)):\n        if s[i:] + s[:i] == t:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"tokyo\") == \"kyoto\"",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 4241,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            count += 1\n    return count",
        "test": "assert solution('cabacc') == 1",
        "num_ids": 75,
        "indeed": false
    },
    {
        "number": 4242,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    return str(sorted([i for i in range(1, a + 1) if a % i == 0 and b % i == 0])[-k])",
        "test": "assert solution('8 12 2') == '2'",
        "num_ids": 66,
        "indeed": true
    },
    {
        "number": 4243,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return str(x * (x // 500) * (x // 500) + x // 5 * (x // 5) * 5)",
        "test": "assert solution(\"1024\") == \"2020\"",
        "num_ids": 50,
        "indeed": false
    },
    {
        "number": 4244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"2\\n1 4\") == \"5\"",
        "num_ids": 25,
        "indeed": false
    },
    {
        "number": 4245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a, b = map(int, stdin.split())\n    return str(a * b // (a - b))",
        "test": "assert solution(\"4 10\") == \"3\"",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    forecast = stdin[0]\n    actual = stdin[1]\n    count = 0\n    for i in range(len(forecast)):\n        if forecast[i] == actual[i]:\n            count += 1\n    return count",
        "test": "assert solution(\"CSS\") == 2",
        "num_ids": 66,
        "indeed": false
    },
    {
        "number": 4247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(1, n - 1):\n        if p[i] > p[i - 1] and p[i] > p[i + 1]:\n            count += 1\n    return str(count)\n",
        "test": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"",
        "num_ids": 105,
        "indeed": false
    },
    {
        "number": 4248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\")\n    '5.410'\n    >>> solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\")\n    '5.620'\n    >>> solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\")\n    '5.480'\n    >>> solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\")\n    '6.040'\n    >>> solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\")\n    '6.720'\n    \"\"\"\n   ...\n",
        "test": "assert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 4249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n == 1:\n        return str(m // a[0])\n    if m < a[0]:\n        return '-1'\n    if m == a[0]:\n        return '1'\n    if m == a[0] + a[1]:\n        return '2'\n    if m == a[0] + a[1] + a[2]:\n        return '3'\n    if m == a[0] + a[1] + a[2] + a[3]:\n        return '4'\n    if m == a[0] + a[1] + a[2] + a[3] + a[4]:\n        return '5'\n    if m == a[0] + a[1] + a[2] + a[3] + a[4] + a[5]:\n        return '6'\n    if m == a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6]:\n        return '7'\n    if m == a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7]:\n        return '8'\n    if m == a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8]:\n        return '9'\n    if m == a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9]:\n        return '10'\n    return '-1'",
        "test": "assert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 4250,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 3\\n1 2 3 2 4 3 1\")\n    '1 2 3'\n    >>> solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\")\n    '7 3 1 3'\n    >>> solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\")\n    '1 1'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s.sort()\n    t = [0] * k\n    for i in range(k):\n        t[i] = s[i]\n    for i in range(k, n):\n        if s[i] == s[i - 1]:\n            continue\n        j = 0\n        while j < k and s[i] > t[j]:\n            j += 1\n        t[j] = s[i]\n    return \" \".join(map(str, t))\n",
        "test": "assert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 4251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('x', '')",
        "test": "assert solution(\"xxoxx\") == \"0\"",
        "num_ids": 35,
        "indeed": false
    },
    {
        "number": 4253,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(3 * r * r)",
        "test": "assert solution(\"4\") == \"48\"",
        "num_ids": 30,
        "indeed": true
    },
    {
        "number": 4254,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if W >= S:\n        return \"unsafe\"\n    return \"safe\"",
        "test": "assert solution(\"4 5\") == \"unsafe\"",
        "num_ids": 47,
        "indeed": true
    },
    {
        "number": 4255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(int(a * b * c / 2))",
        "test": "assert solution(\"3 4 5\") == \"6\"",
        "num_ids": 44,
        "indeed": false
    },
    {
        "number": 4256,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(A // (C - B + 1))",
        "test": "assert solution(\"2 11 4\") == \"4\"",
        "num_ids": 43,
        "indeed": false
    },
    {
        "number": 4257,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)",
        "test": "assert solution(\"2 5\") == \"10\"",
        "num_ids": 35,
        "indeed": true
    },
    {
        "number": 4258,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = map(int, stdin.split())\n    return str(b * (t // a) + b * (t % a > 0))",
        "test": "assert solution(\"3 5 7\") == \"10\"",
        "num_ids": 51,
        "indeed": false
    },
    {
        "number": 4259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if A % K == 0 or B % K == 0:\n        return \"OK\"\n    return \"NG\"",
        "test": "assert solution(\"7 500 600\") == \"OK\"",
        "num_ids": 56,
        "indeed": false
    },
    {
        "number": 4260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    return str(T / X)",
        "test": "assert solution(\"8 3\") == \"2.6666666667\"",
        "num_ids": 38,
        "indeed": false
    },
    {
        "number": 4261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b > a:\n        return str(a - b)\n    elif c > a:\n        return str(a - c)\n    else:\n        return str(0)",
        "test": "assert solution(\"6 4 3\") == \"1\"",
        "num_ids": 73,
        "indeed": false
    },
    {
        "number": 4262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    q = list(map(int, stdin.readline().split()))\n    p.sort()\n    q.sort()\n    return str(abs(p.index(q[0]) - p.index(q[1])))",
        "test": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"",
        "num_ids": 107,
        "indeed": false
    },
    {
        "number": 4263,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return max(stdin.split('A'), key=len)",
        "test": "assert solution(\"ATCODER\") == 3",
        "num_ids": 27,
        "indeed": false
    },
    {
        "number": 4264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if len(str(i)) % 2 == 1:\n            count += 1\n    return count",
        "test": "assert solution('11') == '9'",
        "num_ids": 60,
        "indeed": false
    },
    {
        "number": 4265,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            count += 1\n    return count",
        "test": "assert solution(\"cupofcoffee\") == \"cupofhottea\"",
        "num_ids": 91,
        "indeed": false
    },
    {
        "number": 4266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"3 7\") == \"5 6 7 8 9\"",
        "num_ids": 26,
        "indeed": false
    },
    {
        "number": 4267,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('25') == 'No'",
        "num_ids": 52,
        "indeed": true
    },
    {
        "number": 4268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n",
        "test": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"",
        "num_ids": 34,
        "indeed": false
    },
    {
        "number": 4269,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Bad\" if len(set(stdin)) < 4 else \"Good\"",
        "test": "assert solution(\"3776\") == \"Bad\"",
        "num_ids": 42,
        "indeed": false
    },
    {
        "number": 4270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    values = list(map(int, stdin.readline().split()))\n    dp = [0] * (n + 1)\n    dp[0] = values[0]\n    dp[1] = values[0] + values[1]\n    for i in range(2, n):\n        dp[i] = max(dp[i - 1], dp[i - 2] + values[i])\n    return dp[n - 1]\n",
        "test": "assert solution(\"2\\n3 4\") == \"3.5\"",
        "num_ids": 136,
        "indeed": false
    },
    {
        "number": 4271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14",
        "num_ids": 30,
        "indeed": false
    },
    {
        "number": 4272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\nZABCDBABCQ\")\n    2\n    \"\"\"\n    n = int(stdin.readline())\n    s = stdin.readline()\n    count = 0\n    for i in range(n - 2):\n        if s[i] == \"A\" and s[i + 1] == \"B\" and s[i + 2] == \"C\":\n            count += 1\n    return count\n",
        "test": "assert solution(\"ZABCDBABCQ\") == 2",
        "num_ids": 118,
        "indeed": false
    },
    {
        "number": 4273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"",
        "num_ids": 51,
        "indeed": false
    },
    {
        "number": 4274,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == n:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"3 3\") == \"Yes\"",
        "num_ids": 56,
        "indeed": true
    },
    {
        "number": 4275,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin[2] == stdin[4] and stdin[4] == stdin[6] else \"No\"",
        "test": "assert solution(\"sipppuu\") == \"No\"",
        "num_ids": 59,
        "indeed": false
    },
    {
        "number": 4276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 70\n   ... 7 60\n   ... 1 80\n   ... 4 50''')\n    '4'\n    \"\"\"\n    N, T = map(int, stdin.split())\n    routes = []\n    for _ in range(N):\n        c, t = map(int, stdin.split())\n        routes.append((c, t))\n    routes.sort()\n    cost = 0\n    for c, t in routes:\n        if cost + c <= T:\n            cost += c\n        else:\n            return \"TLE\"\n    return str(cost)\n",
        "test": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 4277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(n * a + b)",
        "test": "assert solution(\"4 2 9\") == \"8\"",
        "num_ids": 40,
        "indeed": false
    },
    {
        "number": 4278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\")\n    1\n    \"\"\"\n    N = int(stdin.split(\"\\n\")[0])\n    s_list = stdin.split(\"\\n\")[1:]\n    s_dict = {}\n    for s in s_list:\n        s_dict[s] = s_dict.get(s, 0) + 1\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if s_dict[s_list[i]] == s_dict[s_list[j]]:\n                count += 1\n    return count\n",
        "test": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"",
        "num_ids": 191,
        "indeed": false
    },
    {
        "number": 4279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"",
        "num_ids": 30,
        "indeed": false
    },
    {
        "number": 4280,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 2\n   ... 1 4\n   ... 4 3\n   ... 3 5\n   ... 3 6\n   ... 5 2\n   ... ''')\n    '2'\n    >>> solution('''4 2\n   ... 3 1\n   ... 1 4\n   ... 1 2\n   ... ''')\n    '1'\n    >>> solution('''10 2\n   ... 10 3\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 2 5\n   ... 2 6\n   ... 2 7\n   ... 3 8\n   ... 3 9\n   ... ''')\n    '3'\n    \"\"\"\n    n, k = map(int, stdin.split('\\n')[0].split())\n    roads = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    cnt = 0\n    ans = []\n    for i in range(n - 1):\n        if roads[i][1] == roads[i + 1][0]:\n            cnt += 1\n            ans.append(i + 1)\n        if cnt == k:\n            break\n    return''.join(map(str, ans))\n",
        "test": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\\n\") == \"2\\n1 2 1 1 2\"",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 4281,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 2 4 4\n   ... ''')\n    '2 4'\n    >>> solution('''9\n   ... 1 1 8 8 8 4 4 4 4\n   ... ''')\n    '3 8'\n    >>> solution('''7\n   ... 4 3 7 1 4 3 3\n   ... ''')\n    '3 6'\n    \"\"\"\n   ...",
        "test": "assert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"",
        "num_ids": 137,
        "indeed": false
    },
    {
        "number": 4282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 3 5\n   ... 1 4\n   ... 2 4\n   ... 1 5\n   ... 2 3''')\n    '3 2 4 1 5'\n    \"\"\"\n    n = int(stdin.readline())\n    a = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    return''.join(map(str, [i[0] for i in a]))\n",
        "test": "assert solution(\"3\\n2 3\\n3 1\\n1 2\") == \"3 1 2\"",
        "num_ids": 199,
        "indeed": false
    },
    {
        "number": 4283,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if i % 2 == 0:\n            ans += a[i]\n        else:\n            ans -= a[i]\n            if ans < 0:\n                ans = 0\n    return ans\n",
        "test": "assert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 13",
        "num_ids": 1707,
        "indeed": false
    },
    {
        "number": 4284,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3''')\n    4\n    >>> solution('''15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3''')\n    -1\n    >>> solution('''15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3\n   ... 15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5",
        "test": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"",
        "num_ids": 1480,
        "indeed": false
    },
    {
        "number": 4285,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"ac?b?c\")\n    24\n    >>> solution(\"????????\")\n    2835\n    >>> solution(\"cccbbbaaa\")\n    0\n    \"\"\"\n    n = int(stdin)\n    s = stdin\n    k = s.count(\"?\")\n    ans = 0\n    for i in range(3 ** k):\n        s_new = s\n        for j in range(k):\n            if (i >> j) & 1:\n                s_new = s_new.replace(\"?\", \"a\", 1)\n            else:\n                s_new = s_new.replace(\"?\", \"b\", 1)\n        ans += s_new.count(\"abc\")\n    return ans % (10 ** 9 + 7)\n",
        "test": "assert solution(\"???????\") == 2835",
        "num_ids": 203,
        "indeed": false
    },
    {
        "number": 4286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split('\\n')[1:]))\n    edges = []\n    for _ in range(m):\n        x, y, w = map(int, stdin.split('\\n')[m + 1].split(' '))\n        edges.append((x, y, w))\n    edges.sort(key=lambda x: x[2])\n    dp = [[0] * n for _ in range(n)]\n    for x, y, w in edges:\n        dp[x - 1][y - 1] = w\n        dp[y - 1][x - 1] = w\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if dp[i][j] > dp[i][k] + dp[k][j]:\n                    dp[i][j] = dp[i][k] + dp[k][j]\n    return str(sum(dp[i][j] for i in range(n) for j in range(n)))\n",
        "test": "assert solution(\"4 0\\n1 3 3 7\") == \"16\"",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 4287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    l = [map(int, stdin.split()) for _ in range(n)]\n    l = sorted(l, key=lambda x: x[0])\n    r = [map(int, stdin.split()) for _ in range(m)]\n    r = sorted(r, key=lambda x: x[0])\n    l = [x[0] for x in l]\n    r = [x[0] for x in r]\n    l = [x[1] for x in l]\n    r = [x[1] for x in r]\n    l = [x for x in l if x <= a]\n    r = [x for x in r if x <= a]\n    l = [x for x in l if x >= 0]\n    r = [x for x in r if x >= 0]\n    if len(l) == 0 or len(r) == 0:\n        return '-1'\n    l = [x for x in l if x < r[0]]\n    r = [x for x in r if x < l[0]]\n    if len(l) == 0 or len(r) == 0:\n        return '-1'\n    l = [x for x in l if x > r[-1]]\n    r = [x for x in r if x > l[-1]]\n    if len(l) == 0 or len(r) == 0:\n        return '-1'\n    l = [x for x in l if x < r[0]]\n    r = [x for x in r if x < l[0]]\n    if len(l) == 0 or len(r) == 0:\n        return '-1'\n    l = [x for x in l if x > r[-1]]\n    r = [x for x in r if x > l[-1]]\n    if len(l) == 0 or len(r) == 0:\n        return '-1'\n    l = [x for x in l if x < r[0]]\n    r = [x for x in r if x < l[0]]\n    if len(l) == 0 or len(r) == 0:\n        return '-1'\n    l = [x for x in l if x > r[-1]]\n    r = [x for x in r if x > l[-1]]\n    if len(l) == 0 or len(r) == 0:\n        return '-1'\n    l = [x for x in l if x < r[0]]\n    r = [x for x in r if x < l[0]]\n    if len(l) == 0 or len(r) == 0:\n        return '-1'\n    l = [x for x in l if x > r[-1]]\n    r = [x for x in r if x > l[-1]]\n    if len(l) == 0 or len(r) == 0:\n        return '-1'\n    l = [x for x in l if x < r[0]]\n    r = [x for x in r if x < l[0]]\n    if len(l) == 0 or len(r) == 0:\n        return '-1'\n    l = [x for x in l if x > r[-1]]\n    r = [x for x in r if x > l[-1]]\n    if len(l) == 0 or len(r) == 0:\n        return '-1'\n    l = [x for x in l if x < r[0]]\n    r = [x for x in r if x < l[0]]\n    if len(l) == 0 or len(r) == 0:\n        return '-1'\n    l = [x for x in l if x > r[-1]]\n    r = [x for x in r if x > l[-1]]\n    if len(l) == 0 or len(r) == 0:\n        return '-1'\n    l = [x for x in l if x < r[0]]\n    r = [x for x in r if x < l[0]]\n    if len(l) == 0 or len(r) == 0:\n        return '-1'\n    l = [x for x in l if x >",
        "test": "assert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"",
        "num_ids": 1068,
        "indeed": false
    },
    {
        "number": 4288,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b or a == c or b == c:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"5 7 5\") == \"Yes\"",
        "num_ids": 68,
        "indeed": false
    },
    {
        "number": 4289,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t, a = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h.sort()\n    return h[(a - t * 0.006) // (h[1] - h[0])]",
        "test": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"",
        "num_ids": 83,
        "indeed": false
    },
    {
        "number": 4290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(binomial(n + m, n))\n\ndef",
        "test": "assert solution(\"2 1\") == \"1\"",
        "num_ids": 43,
        "indeed": false
    },
    {
        "number": 4291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8 3\n   ... ACACTACG\n   ... 3 7\n   ... 2 3\n   ... 1 8''')\n    '2\\n0\\n3'\n    \"\"\"\n    n, q = map(int, stdin.split('\\n')[:2])\n    s = stdin.split('\\n')[2]\n    for _ in range(q):\n        l, r = map(int, stdin.split('\\n')[3 + _].split())\n        print(s[l - 1:r].count('AC'))\n",
        "test": "assert solution(\"ATCODER\") == \"3\"",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 4292,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin",
        "test": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"",
        "num_ids": 30,
        "indeed": false
    },
    {
        "number": 4293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 3 4\")\n    4\n    \"\"\"\n    p, q, r = map(int, stdin.split())\n    return min(p + q, q + r, r + p)\n",
        "test": "assert solution(\"1 3 5\") == \"7\"",
        "num_ids": 77,
        "indeed": false
    },
    {
        "number": 4294,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x < a:\n        return 0\n    else:\n        return 10",
        "test": "assert solution(\"3 5\") == \"0\"",
        "num_ids": 45,
        "indeed": false
    },
    {
        "number": 4295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(abs(n - k), abs(n + k)))",
        "test": "assert solution(\"7 4\") == \"1\"",
        "num_ids": 45,
        "indeed": false
    },
    {
        "number": 4296,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c >= 22:\n        return 'bust'\n    return 'win'",
        "test": "assert solution(\"5 7 9\") == \"win\"",
        "num_ids": 66,
        "indeed": true
    },
    {
        "number": 4297,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while True:\n        if i % 2 == 0 and i % n == 0:\n            return i\n        i += 1",
        "test": "assert solution('2') == '2'",
        "num_ids": 63,
        "indeed": false
    },
    {
        "number": 4298,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"6 2\") == \"2\"",
        "num_ids": 22,
        "indeed": false
    },
    {
        "number": 4299,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n        return \"hon\"\n    elif n % 10 == 0 or n % 10 == 1 or n % 10 == 6 or n % 10 == 8:\n        return \"pon\"\n    elif n % 10 == 3:\n        return \"bon\"\n    else:\n        return \"error\"",
        "test": "assert solution(\"16\") == \"pon\"",
        "num_ids": 130,
        "indeed": true
    },
    {
        "number": 4300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin",
        "test": "assert solution(\"3 1 2\") == 11",
        "num_ids": 22,
        "indeed": false
    },
    {
        "number": 4301,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum value among the N-1 elements other than A_i in the sequence.\n\n    >>> solution(\"3\\n1\\n4\\n3\")\n    4\n    >>> solution(\"3\\n1\\n4\\n3\\n5\")\n    5\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\")\n    6\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\")\n    7\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\")\n    8\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\")\n    9\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\")\n    10\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\")\n    11\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\")\n    12\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\")\n    13\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\")\n    14\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\")\n    15\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\")\n    16\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\")\n    17\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\")\n    18\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\")\n    19\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\")\n    20\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\")\n    21\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\")\n    22\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\")\n    23\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\")\n    24\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\")\n    25\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\")\n    26\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\")\n    27\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\")\n    28\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\")\n    29\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\")\n    30\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\")\n    31\n    >>> solution(\"3\\n1\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\",
        "test": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"",
        "num_ids": 1757,
        "indeed": false
    },
    {
        "number": 4302,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A + B)",
        "test": "assert solution(\"5 3\") == \"9\"",
        "num_ids": 35,
        "indeed": false
    },
    {
        "number": 4303,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"",
        "num_ids": 31,
        "indeed": false
    },
    {
        "number": 4304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(b - a)\n",
        "test": "assert solution(\"8 13\") == \"2\"",
        "num_ids": 36,
        "indeed": false
    },
    {
        "number": 4305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    return str(H // A)",
        "test": "assert solution(\"10 4\") == \"3\"",
        "num_ids": 35,
        "indeed": false
    },
    {
        "number": 4306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(0, min(b, d) - max(a, c)))",
        "test": "assert solution(\"0 75 25 100\") == \"50\"",
        "num_ids": 54,
        "indeed": true
    },
    {
        "number": 4307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if i % 2!= 0 and len(get_divisors(i)) == 8:\n            count += 1\n    return str(count)\n\n\ndef",
        "test": "assert solution('105') == '1'",
        "num_ids": 75,
        "indeed": false
    },
    {
        "number": 4308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max(n - k, k - n))",
        "test": "assert solution(\"7 3\") == \"1\"",
        "num_ids": 41,
        "indeed": false
    },
    {
        "number": 4309,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N)",
        "test": "assert solution(\"111\") == \"111\"",
        "num_ids": 26,
        "indeed": false
    },
    {
        "number": 4310,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    A.sort()\n    cost = 0\n    for i in range(1, len(A)):\n        cost += abs(A[i] - A[i - 1])\n    return cost",
        "test": "assert solution(\"1 6 3\") == \"5\"",
        "num_ids": 74,
        "indeed": false
    },
    {
        "number": 4311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    while a[-1]!= 1:\n        if a[-1] % 2 == 0:\n            a.append(a[-1] // 2)\n        else:\n            a.append(3 * a[-1] + 1)\n    return len(a) - 1\n",
        "test": "assert solution('8') == '5'",
        "num_ids": 95,
        "indeed": false
    },
    {
        "number": 4312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split()]\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > C:\n        A, C = C, A\n    if B > D:\n        B, D = D, B\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > C:\n        A, C = C, A\n    if B > D:\n        B, D = D, B\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C",
        "test": "assert solution(\"10 10 10 10\") == \"Yes\"",
        "num_ids": 1740,
        "indeed": false
    },
    {
        "number": 4313,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *v, *c = map(int, stdin.split())\n    v = list(map(int, v))\n    c = list(map(int, c))\n    v.sort()\n    c.sort()\n    v.reverse()\n    c.reverse()\n    x = 0\n    y = 0\n    for i in range(n):\n        if v[i] > c[i]:\n            x += v[i] - c[i]\n        else:\n            y += c[i]\n    return x - y",
        "test": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"",
        "num_ids": 149,
        "indeed": false
    },
    {
        "number": 4314,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return the answer, don't print it\n    h, w = map(int, stdin.split())\n    grid = [list(stdin.split()[1:]) for _ in range(h)]\n    while True:\n        for i in range(h):\n            for j in range(w):\n                if grid[i][j] == '.':\n                    grid[i][j] = '#'\n        for i in range(h):\n            if grid[i].count('#') == w:\n                grid.pop(i)\n                grid.insert(0, ['.'] * w)\n        for j in range(w):\n            if grid[0][j] == '#':\n                for i in range(h):\n                    grid[i][j] = '.'\n        for j in range(w):\n            if grid[h - 1][j] == '#':\n                for i in range(h - 1, -1, -1):\n                    grid[i][j] = '.'\n        if grid[0][0] == '#':\n            grid.pop(0)\n            grid.append(['.'] * w)\n        if grid[h - 1][w - 1] == '#':\n            grid.pop(h - 1)\n            grid.insert(0, ['.'] * w)\n        if grid[0][w - 1] == '#':\n            for i in range(h):\n                grid[i][w - 1] = '.'\n        if grid[h - 1][0] == '#':\n            for i in range(h - 1, -1, -1):\n                grid[i][0] = '.'\n        if grid[0][0] == '.' and grid[0][w - 1] == '.' and grid[h - 1][0] == '.' and grid[h - 1][w - 1] == '.':\n            break\n    return '\\n'.join(''.join(row) for row in grid)\n",
        "test": "assert solution(\"4 4\\n#.#\\n....\\n#.#\\n.#.\") == \"###\\n###\\n.##\"",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 4315,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    return str(2 * 3.14159265358979323846 * R)",
        "test": "assert solution('1') == '6.28318530717958623200'",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4316,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s)!= 4:\n        return \"No\"\n    if s.count(s[0]) == 2 and s.count(s[1]) == 2:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"ASSA\") == \"Yes\"",
        "num_ids": 81,
        "indeed": false
    },
    {
        "number": 4317,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a + b, a - b, a * b))",
        "test": "assert solution(\"-13 3\") == \"-10\"",
        "num_ids": 46,
        "indeed": true
    },
    {
        "number": 4318,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(1, n):\n        if h[i] > h[i - 1]:\n            count += 1\n    return count",
        "test": "assert solution(\"4\\n6 5 6 8\") == \"3\"",
        "num_ids": 86,
        "indeed": false
    },
    {
        "number": 4319,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 1 2 3 1 2 3 4\n   ... ''')\n    '2'\n    >>> solution('''4\n   ... 1 1 1 1\n   ... ''')\n    '4'\n    >>> solution('''5\n   ... 1 2 1 2 1\n   ... ''')\n    '1'\n    >>> solution('''5\n   ... 1 2 1 2 1\n   ... ''')\n    '3'\n    \"\"\"\n    n = int(stdin.readline())\n    stairs = [int(x) for x in stdin.readline().split()]\n    stairs.sort()\n    count = 0\n    for i in range(1, n):\n        if stairs[i] - stairs[i - 1] == 1:\n            count += 1\n    return str(count)\n",
        "test": "assert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"",
        "num_ids": 245,
        "indeed": false
    },
    {
        "number": 4320,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"7\\n21\") == \"4\"",
        "num_ids": 30,
        "indeed": false
    },
    {
        "number": 4321,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while k > 0:\n        if n % 10!= 0:\n            n -= 1\n        else:\n            n //= 10\n        k -= 1\n    return n",
        "test": "assert solution(\"1000000000 9\") == \"1\"",
        "num_ids": 80,
        "indeed": false
    },
    {
        "number": 4322,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    k = 0\n    for i in range(n):\n        if a[i] - a[i - 1] > 1:\n            k += 1\n    print(k)\n    print(*a)\n    return ''",
        "test": "assert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"",
        "num_ids": 137,
        "indeed": false
    },
    {
        "number": 4323,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    songs = [list(map(int, stdin.split())) for _ in range(n)]\n    songs.sort(key=lambda x: x[1])\n    s = 0\n    for i in range(n):\n        s += songs[i][0]\n        if s > m:\n            return '-1'\n    return str(n)\n",
        "test": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-\"",
        "num_ids": 155,
        "indeed": false
    },
    {
        "number": 4324,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\")\n    tleelte\n    qwerty\n    vvvvvv\n    abcde\n    \"\"\"\n    pass\n",
        "test": "assert solution(\"6 1 1\") == \"qwerty\"",
        "num_ids": 81,
        "indeed": false
    },
    {
        "number": 4325,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.split())\n    return str(n * t // x + t % x)",
        "test": "assert solution(\"20 12 6\") == \"12\"",
        "num_ids": 44,
        "indeed": false
    },
    {
        "number": 4326,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))",
        "test": "assert solution(\"8\") == \"2\"",
        "num_ids": 21,
        "indeed": false
    },
    {
        "number": 4327,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, p = map(int, stdin.split())\n    return str(a // p + (a % p > 0))",
        "test": "assert solution(\"1 3\") == \"3\"",
        "num_ids": 42,
        "indeed": false
    },
    {
        "number": 4328,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return str(b - a)\n    return str(a + b)",
        "test": "assert solution(\"4 12\") == \"16\"",
        "num_ids": 51,
        "indeed": false
    },
    {
        "number": 4329,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if len(s) == len(t) and s[:-1] == t[:-1]:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"chokudai\") == \"Yes\"",
        "num_ids": 80,
        "indeed": false
    },
    {
        "number": 4330,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if abs(a - b) % 2 == 0:\n        return str(abs(a - b) // 2)\n    else:\n        return \"IMPOSSIBLE\"\n",
        "test": "assert solution(\"2 16\") == \"9\"",
        "num_ids": 68,
        "indeed": false
    },
    {
        "number": 4331,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"Yes\" if n % 10 == 7 else \"No\"",
        "test": "assert solution('117') == 'Yes'",
        "num_ids": 45,
        "indeed": false
    },
    {
        "number": 4332,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % S(N) == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"12\") == \"Yes\"",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4333,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3, y_3, x_4, y_4 = x_1, y_1, x_2, y_2\n    if x_1 == x_2:\n        x_3 = x_1\n        y_3 = y_1 - 1 if y_1 > y_2 else y_1 + 1\n    elif y_1 == y_2:\n        y_3 = y_1\n        x_3 = x_1 - 1 if x_1 > x_2 else x_1 + 1\n    elif x_1 == x_2 and y_1 == y_2:\n        x_3 = x_1\n        y_3 = y_1\n    else:\n        x_3 = x_1 - 1 if x_1 > x_2 else x_1 + 1\n        y_3 = y_1 - 1 if y_1 > y_2 else y_1 + 1\n    if x_1 == x_2:\n        x_4 = x_1\n        y_4 = y_1 + 1 if y_1 < y_2 else y_1 - 1\n    elif y_1 == y_2:\n        y_4 = y_1\n        x_4 = x_1 + 1 if x_1 < x_2 else x_1 - 1\n    elif x_1 == x_2 and y_1 == y_2:\n        x_4 = x_1\n        y_4 = y_1\n    else:\n        x_4 = x_1 + 1 if x_1 < x_2 else x_1 - 1\n        y_4 = y_1 + 1 if y_1 < y_2 else y_1 - 1\n    return f\"{x_3} {y_3} {x_4} {y_4}\"",
        "test": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 4334,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    A, B = map(int, stdin.split())\n    return str(A - S.count(S[0])) + \" \" + str(B - T.count(T[0]))",
        "test": "assert solution(\"red blue\") == \"2 4\"",
        "num_ids": 71,
        "indeed": false
    },
    {
        "number": 4335,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    t = s[:n // 2]\n    if n % 2 == 0:\n        if s == t * 2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        if s == t * 2:\n            return \"Yes\"\n        else:\n            return \"No\"",
        "test": "assert solution(\"ababab\") == \"No\"",
        "num_ids": 112,
        "indeed": false
    },
    {
        "number": 4336,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    w, h, x, y = map(int, stdin.split())\n    if x == 0 or x == w:\n        return str(w * h)\n    if y == 0 or y == h:\n        return str(w * h)\n    if x == y:\n        return str(w * h)\n    if x > y:\n        return str(w * (y - 1) + h * (x - y))\n    if x < y:\n        return str(w * (x - 1) + h * (y - x))\n    return str(w * h)\n",
        "test": "assert solution(\"2 3 1 2\") == \"3.000000 0\"",
        "num_ids": 155,
        "indeed": false
    },
    {
        "number": 4337,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    colors = stdin.readline().split()\n    if len(set(colors)) == 3:\n        return \"Three\"\n    elif len(set(colors)) == 4:\n        return \"Four\"\n    else:\n        return \"Invalid\"",
        "test": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"",
        "num_ids": 92,
        "indeed": false
    },
    {
        "number": 4338,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"5 3 3\\n1 2 4 2 3\") == 2",
        "num_ids": 39,
        "indeed": false
    },
    {
        "number": 4339,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    good = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                good += 1\n    return good\n",
        "test": "assert solution(\"4 8 2 6 2\\n4 5 4 1 3\") == \"7\"",
        "num_ids": 130,
        "indeed": false
    },
    {
        "number": 4340,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"",
        "num_ids": 26,
        "indeed": false
    },
    {
        "number": 4341,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 4342,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"",
        "num_ids": 70,
        "indeed": false
    },
    {
        "number": 4343,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    s = stdin.readline()\n    t = stdin.readline()\n    return ''.join(sorted(sorted(s), key=lambda x: x in t)[k // 2])\n",
        "test": "assert solution(\"bf\") == \"bc\"",
        "num_ids": 81,
        "indeed": false
    },
    {
        "number": 4344,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if k > n:\n        return \"NO\"\n    if k == n:\n        return \"YES\"\n    if k == 1:\n        return \"YES\"\n    if k == 2:\n        if a[0] == a[1]:\n            return \"NO\"\n        return \"YES\"\n    if k == 3:\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"NO\"\n        return \"YES\"\n    if k == 4:\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[1] == a[2] or a[1] == a[3] or a[2] == a[3]:\n            return \"NO\"\n        return \"YES\"\n    if k == 5:\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[0] == a[4] or a[1] == a[2] or a[1] == a[3] or a[1] == a[4] or a[2] == a[3] or a[2] == a[4] or a[3] == a[4]:\n            return \"NO\"\n        return \"YES\"\n    if k == 6:\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[0] == a[4] or a[0] == a[5] or a[1] == a[2] or a[1] == a[3] or a[1] == a[4] or a[1] == a[5] or a[2] == a[3] or a[2] == a[4] or a[2] == a[5] or a[3] == a[4] or a[3] == a[5] or a[4] == a[5]:\n            return \"NO\"\n        return \"YES\"\n    if k == 7:\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[0] == a[4] or a[0] == a[5] or a[0] == a[6] or a[1] == a[2] or a[1] == a[3] or a[1] == a[4] or a[1] == a[5] or a[1] == a[6] or a[2] == a[3] or a[2] == a[4] or a[2] == a[5] or a[2] == a[6] or a[3] == a[4] or a[3] == a[5] or a[3] == a[6] or a[4] == a[5] or a[4] == a[6] or a[5] == a[6]:\n            return \"NO\"\n        return \"YES\"\n    if k == 8:\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[0] == a[4] or a[0] == a[5] or a[0] == a[6] or a[0] == a[7] or a[1] == a[2] or a[1] == a[3] or a[1] == a[4] or a[1] == a[5] or a[1] == a[6] or a[1] == a[7] or a[2] == a[3] or a[2] == a[4] or a[2] == a[5] or a[2] == a[6] or a[2] == a[7] or a[3] == a[4] or a[3] == a[5] or a[3] == a[6] or a[3] == a[7] or a[4] == a[5] or a[4] == a[6] or a[4] == a[7] or a[5] == a[6] or a[5] == a[7] or a[6] == a[7]:\n            return \"NO\"\n        return \"YES\"\n    if k == 9:\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[0] == a[4] or a[0] == a[5] or a[0] == a[6] or a[0] == a[7] or a[0] == a[8] or a[1] == a[2] or a[1] == a[3] or a[1] == a[4] or a[1] == a[5] or a[1] == a[6] or a[1] == a[7] or a[1] == a[8] or a[2] == a[3] or a[2] == a[4] or a[2] == a[5] or a[2] == a[6] or a[2] == a[7] or a[2] == a[8] or a[3] == a[4] or a[3] == a[5] or a[3] == a[6] or a[3] == a[7] or a[3] == a[8] or a[4] == a[5] or a[4] == a[6] or a[4] == a[7] or a[4] == a[8] or a[5] == a[6] or a[5] == a[7] or a[5] == a[8] or a[6] == a[7] or a[6] == a[8] or a[7] == a[8]:\n            return \"NO\"\n        return \"YES\"\n    if k == 10:\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[0] == a[4] or a[0] == a[5] or a[0] == a[6] or a[0] == a[7] or a[0] == a[8] or a[0] == a[9] or a[1] == a[2] or a[1] == a[3] or a[1] == a[4] or a[1] == a[5] or a[1] == a[",
        "test": "assert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"",
        "num_ids": 1632,
        "indeed": false
    },
    {
        "number": 4345,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if a[0] < a[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if a[0] < a[1]:\n        if a[0] < a[2]:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        if a[0] > a[2]:\n            return \"NO\"\n        else:\n            return \"YES\"\n",
        "test": "assert solution(\"5\\n1 2 4 0 2\") == \"NO\\n\"",
        "num_ids": 203,
        "indeed": false
    },
    {
        "number": 4346,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 10 2 3 7\n   ... 100 51 51 51\n   ... 1234 1 100 199\n   ... 1000000000 1 1 1000000000\n   ... ''')\n    '3'\n    >>> solution('''4\n   ... 10 2 3 7\n   ... 100 51 51 51\n   ... 1234 1 100 199\n   ... 1000000000 1 1 1000000000\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... 10 2 3 7\n   ... 100 51 51 51\n   ... 1234 1 100 199\n   ... 1000000000 1 1 1000000000\n   ... ''')\n    '1134'\n    >>> solution('''4\n   ... 10 2 3 7\n   ... 100 51 51 51\n   ... 1234 1 100 199\n   ... 1000000000 1 1 1000000000\n   ... ''')\n    '0'\n    \"\"\"\n   ...\n",
        "test": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 4347,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))",
        "test": "assert solution('4') == '3'",
        "num_ids": 30,
        "indeed": false
    },
    {
        "number": 4348,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[0]\n    for i in range(k):\n        s = s.replace(chr(ord('a') + i), '')\n    return s",
        "test": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"",
        "num_ids": 99,
        "indeed": false
    },
    {
        "number": 4349,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 6\n   ... 1 2 0 2 0\n   ... 2 4\n   ... 3 3\n   ... 1 5\n   ... 1 2\n   ... 1 5\n   ... 2 3\n   ... ''')\n    8\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    k = list(map(int, stdin.split('\\n')[1].split()))\n    d = [0] * n\n    for i in range(m):\n        d[int(stdin.split('\\n')[i + 2].split()[1]) - 1] = int(stdin.split('\\n')[i + 2].split()[0])\n    d.sort()\n    ans = 0\n    for i in range(n):\n        if k[i] == 0:\n            continue\n        if d[i] > ans:\n            ans = d[i]\n    return ans\n",
        "test": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"",
        "num_ids": 275,
        "indeed": false
    },
    {
        "number": 4350,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(stdin.split()[i]) for i in range(n)]\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars.append((i, j))\n    if len(stars) > n * m:\n        return '-1'\n    stars.sort(key=lambda x: x[0] + x[1])\n    res = []\n    for i in range(len(stars)):\n        x, y = stars[i]\n        for j in range(i + 1, len(stars)):\n            x1, y1 = stars[j]\n            if x1 == x or y1 == y or abs(x1 - x) + abs(y1 - y) > n:\n                break\n        else:\n            res.append((x, y, i + 1))\n    if len(res) == 0:\n        return '-1'\n    res.sort(key=lambda x: x[2])\n    return '\\n'.join(map(lambda x:''.join(map(str, x)), res))\n",
        "test": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 4351,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == N[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('123') == 'No'",
        "num_ids": 56,
        "indeed": false
    },
    {
        "number": 4352,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return \"Alice\"\n    elif a < b:\n        return \"Bob\"\n    else:\n        return \"Draw\"",
        "test": "assert solution(\"8 6\") == \"Alice\"",
        "num_ids": 74,
        "indeed": false
    },
    {
        "number": 4353,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\",\", \" \")",
        "test": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"",
        "num_ids": 32,
        "indeed": true
    },
    {
        "number": 4354,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 2\n   ... 2 0\n   ... 0 0\n   ... -1 0\n   ... 1 0''')\n    '2\\n1'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    points = [tuple(map(int, stdin.split(': ')[1].split())) for _ in range(n)]\n    checkpoints = [tuple(map(int, stdin.split(': ')[1].split())) for _ in range(m)]\n    return '\\n'.join(map(str, [min(\n        [(abs(p[0] - c[0]) + abs(p[1] - c[1]), i) for i, c in enumerate(checkpoints)],\n        key=lambda x: x[0]\n    )[1] for p in points]))\n",
        "test": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 4355,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)",
        "test": "assert solution('2') == '14'",
        "num_ids": 34,
        "indeed": true
    },
    {
        "number": 4356,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, m = map(int, stdin.readline().split())\n    a = [stdin.readline().strip() for _ in range(n)]\n    b = [stdin.readline().strip() for _ in range(m)]\n\n    # Check if b is contained in a\n    for i in range(n - m + 1):\n        for j in range(n - m + 1):\n            if all(a[i + k][j:j + m] == b[k] for k in range(m)):\n                return \"Yes\"\n    return \"No\"\n",
        "test": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"No\"",
        "num_ids": 194,
        "indeed": false
    },
    {
        "number": 4357,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(max(a + b, a + c, b + c))",
        "test": "assert solution(\"1 5 2\") == \"53\"",
        "num_ids": 48,
        "indeed": false
    },
    {
        "number": 4358,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    prices = [int(x) for x in stdin.readline().split()]\n    prices.sort()\n    total = 0\n    for i in range(n):\n        total += prices[i]\n        if i % 2 == 0:\n            total += prices[i] / 2\n    return total",
        "test": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"",
        "num_ids": 109,
        "indeed": false
    },
    {
        "number": 4359,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    return str(max(A, B, C, D, E) * 10)",
        "test": "assert solution(\"29 20 7 35 120\") == \"215\"",
        "num_ids": 55,
        "indeed": false
    },
    {
        "number": 4360,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(sum(1 / i for i in a) / n)\n",
        "test": "assert solution(\"2\\n10 30\") == \"7.5\"",
        "num_ids": 66,
        "indeed": false
    },
    {
        "number": 4361,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"",
        "num_ids": 37,
        "indeed": false
    },
    {
        "number": 4362,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.lower() if stdin.islower() else stdin.upper()",
        "test": "assert solution(\"a\") == \"a\"",
        "num_ids": 41,
        "indeed": false
    },
    {
        "number": 4363,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split())\n    return str(comb(k, s))",
        "test": "assert solution(\"2 2\") == \"6\"",
        "num_ids": 37,
        "indeed": false
    },
    {
        "number": 4364,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1905\")\n    'YYMM'\n    >>> solution(\"1905XX\")\n    'YYMM'\n    >>> solution(\"1905XXYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYX\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYX\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYX\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYX\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYX\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYX\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYX\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYX\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYX\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYX\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYX\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYX\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYX\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYX\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYX\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYX\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYX\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYX\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYX\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYX\")\n    'AMBIGUOUS'\n    >>> solution(\"1905XXYYYYYYYYYYYYYYYYYYYYYYYY",
        "test": "assert solution(\"1905\") == \"YYMM\"",
        "num_ids": 1805,
        "indeed": false
    },
    {
        "number": 4365,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    return str(K * (K - 1) // 2)",
        "test": "assert solution(\"3\") == \"2\"",
        "num_ids": 34,
        "indeed": false
    },
    {
        "number": 4366,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A + B)",
        "test": "assert solution(\"9 12\") == \"21\"",
        "num_ids": 35,
        "indeed": false
    },
    {
        "number": 4367,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    if N >= 10:\n        return R\n    else:\n        return R - 100 * (10 - N)",
        "test": "assert solution(\"2 2919\") == \"3719\"",
        "num_ids": 55,
        "indeed": false
    },
    {
        "number": 4368,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return len(bin(n)[2:])",
        "test": "assert solution(\"11 2\") == \"4\"",
        "num_ids": 38,
        "indeed": false
    },
    {
        "number": 4369,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(math.ceil(int(stdin) / 2))",
        "test": "assert solution(\"5\") == \"3\"",
        "num_ids": 28,
        "indeed": true
    },
    {
        "number": 4370,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a + b <= 16:\n        return 'Yay!'\n    return ':( '",
        "test": "assert solution(\"5 4\") == \"Yay!\"",
        "num_ids": 49,
        "indeed": false
    },
    {
        "number": 4371,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(int(stdin) - 753))",
        "test": "assert solution(\"1234567876\") == \"34\"",
        "num_ids": 29,
        "indeed": false
    },
    {
        "number": 4372,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    i = 0\n    j = n - 1\n    while i < j:\n        if a[i]!= a[j]:\n            break\n        i += 1\n        j -= 1\n    return str(j + 1) +'' + str(a[j])\n",
        "test": "assert solution(\"2 9\") == \"1 7\"",
        "num_ids": 126,
        "indeed": false
    },
    {
        "number": 4373,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = int(stdin.readline())\n    a.sort()\n    i = 0\n    while i < n and a[i] < k:\n        i += 1\n    if i == n:\n        return str(k)\n    else:\n        return str(i)",
        "test": "assert solution(\"3 1 4 1\") == \"1\"",
        "num_ids": 124,
        "indeed": false
    },
    {
        "number": 4374,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    edges = [tuple(map(int, line.split(' '))) for line in stdin.split('\\n')[1:]]\n    edges.sort(key=lambda x: x[2])\n    edges = [edges[0]] + edges[1:]\n    tree = [[] for _ in range(n)]\n    for v, u, w in edges:\n        tree[v - 1].append(u - 1)\n        tree[u - 1].append(v - 1)\n    diameter = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if j in tree[i]:\n                diameter = max(diameter, len(tree[i]) + len(tree[j]))\n    return str(diameter)",
        "test": "assert solution(\"2 0\\n\") == \"1\"",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 4375,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 1\n   ... 1 2 3 4 5\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 3 5\n   ... ''')\n    11\n    \"\"\"\n    n, k = map(int, stdin.split('\\n')[0].split())\n    weights = list(map(int, stdin.split('\\n')[1].split()))\n    edges = []\n    for i in range(n - 1):\n        edges.append(list(map(int, stdin.split('\\n')[i + 2].split())))\n    return max_weight_subset(n, k, weights, edges)\n\n\ndef",
        "test": "assert solution(\"7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n\") == \"4\"",
        "num_ids": 248,
        "indeed": false
    },
    {
        "number": 4376,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    d = {}\n    for i in range(n):\n        d[i] = a[i]\n    for i in range(m):\n        if b[i] in d:\n            print(i + 1, d[b[i] - 1])\n        else:\n            print(i + 1, b[i] - 1)\n    return ''\n",
        "test": "assert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"",
        "num_ids": 205,
        "indeed": false
    },
    {
        "number": 4377,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(a + b) +'' + str(a + c) +'' + str(b + c) +'' + str(a + b + c)\n",
        "test": "assert solution(\"40 40 40 60\") == \"20 20 20\"",
        "num_ids": 88,
        "indeed": false
    },
    {
        "number": 4378,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('R', '0')\n    s = s.replace('G', '1')\n    s = s.replace('B', '2')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('0', 'R')\n    s = s.replace('1', 'G')\n    s = s.replace('2', 'B')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('R', '0')\n    s = s.replace('G', '1')\n    s = s.replace('B', '2')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('0', 'R')\n    s = s.replace('1', 'G')\n    s = s.replace('2', 'B')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('R', '0')\n    s = s.replace('G', '1')\n    s = s.replace('B', '2')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('0', 'R')\n    s = s.replace('1', 'G')\n    s = s.replace('2', 'B')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('R', '0')\n    s = s.replace('G', '1')\n    s = s.replace('B', '2')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('0', 'R')\n    s = s.replace('1', 'G')\n    s = s.replace('2', 'B')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('R', '0')\n    s = s.replace('G', '1')\n    s = s.replace('B', '2')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('0', 'R')\n    s = s.replace('1', 'G')\n    s = s.replace('2', 'B')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('R', '0')\n    s = s.replace('G', '1')\n    s = s.replace('B', '2')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('0', 'R')\n    s = s.replace('1', 'G')\n    s = s.replace('2', 'B')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('R', '0')\n    s = s.replace('G', '1')\n    s = s.replace('B', '2')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('0', 'R')\n    s = s.replace('1', 'G')\n    s = s.replace('2', 'B')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('R', '0')\n    s = s.replace('G', '1')\n    s = s.replace('B', '2')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('0', 'R')\n    s = s.replace('1', 'G')\n    s = s.replace('2', 'B')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('R', '0')\n    s = s.replace('G', '1')\n    s = s.replace('B', '2')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('0', 'R')\n    s = s.replace('1', 'G')\n    s = s.replace('2', 'B')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('R', '0')\n    s = s.replace('G', '1')\n    s = s.replace('B', '2')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('0', 'R')\n    s = s.replace('1', 'G')\n    s = s.replace('2', 'B')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('R', '0')\n    s = s.replace('G', '1')\n    s = s.replace('B', '2')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('0', 'R')\n    s = s.replace('1', 'G')\n    s = s.replace('2', 'B')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('R', '0')\n    s = s.replace('G', '1')\n    s = s.replace('B', '2')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.replace('0', 'R')\n    s = s.replace('1', 'G')\n    s = s.replace('2', 'B')\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s",
        "test": "assert solution(\"8\\nBBBGBRRR\\n\") == \"2\\nBRBGBRGR\"",
        "num_ids": 1617,
        "indeed": false
    },
    {
        "number": 4379,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass",
        "test": "assert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"",
        "num_ids": 46,
        "indeed": false
    },
    {
        "number": 4380,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a * b % 2 == 1:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"3 1\") == \"Yes\"",
        "num_ids": 49,
        "indeed": true
    },
    {
        "number": 4381,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(x + y * 0.5)",
        "test": "assert solution(\"81 58\") == \"110\"",
        "num_ids": 39,
        "indeed": false
    },
    {
        "number": 4382,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) // 2)",
        "test": "assert solution(\"2\") == 8",
        "num_ids": 32,
        "indeed": false
    },
    {
        "number": 4383,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x % 5 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5\") == \"YES\"",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4384,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABC\"",
        "test": "assert solution(\"999\") == \"ABC\"",
        "num_ids": 16,
        "indeed": false
    },
    {
        "number": 4385,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    if k < max(a, b, c, d, e):\n        return \"Yay!\"\n    return \":(\"",
        "test": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\") == \":(",
        "num_ids": 103,
        "indeed": false
    },
    {
        "number": 4386,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        print(\"red\")\n    else:\n        print(stdin)",
        "test": "assert solution('red') =='red'",
        "num_ids": 56,
        "indeed": false
    },
    {
        "number": 4387,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin)\n    if rating < 1200:\n        return \"ABC\"\n    elif rating < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"",
        "test": "assert solution('1199') == 'ABC'",
        "num_ids": 59,
        "indeed": true
    },
    {
        "number": 4388,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.replace('1', '9').replace('9', '1')))\n",
        "test": "assert solution(\"119\") == \"991\"",
        "num_ids": 37,
        "indeed": false
    },
    {
        "number": 4389,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"ac\") == \"ac\"",
        "num_ids": 27,
        "indeed": false
    },
    {
        "number": 4390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution(\"10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"",
        "num_ids": 51,
        "indeed": false
    },
    {
        "number": 4391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n - k + 1):\n        res = max(res, sum(a[i:i + k]) / k)\n    return str(res)",
        "test": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'",
        "num_ids": 98,
        "indeed": false
    },
    {
        "number": 4392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"4 2\\n4 1 2 3\\n1 2\\n4 2\\n4 3 2 1\\n1 3\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"NO\"",
        "num_ids": 191,
        "indeed": false
    },
    {
        "number": 4393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = stdin\n    s = \"\"\n    for i in range(n):\n        s += t[i] * (i + 1)\n    return s\n",
        "test": "assert solution(\"ooopppssss\") == \"oops\"",
        "num_ids": 75,
        "indeed": false
    },
    {
        "number": 4394,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8 10\n   ... 1 2 1\n   ... 2 3 2\n   ... 2 4 5\n   ... 1 4 2\n   ... 6 3 3\n   ... 6 1 3\n   ... 3 5 2\n   ... 3 7 1\n   ... 4 8 1\n   ... 6 2 4''')\n    '1'\n    >>> solution('''4 3\n   ... 2 1 3\n   ... 4 3 4\n   ... 2 4 1\n   ... ''')\n    '0'\n    >>> solution('''3 3\n   ... 1 2 1\n   ... 2 3 3\n   ... 1 3 3\n   ... ''')\n    '1'\n    >>> solution('''1 0\n   ... ''')\n    '0'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[:-1]]\n    edges.sort(key=lambda x: x[2])\n    edges = [edges[0]] + [edge for edge in edges if edge[0]!= edges[0][1]]\n    edges.sort(key=lambda x: x[1])\n    edges = [edges[0]] + [edge for edge in edges if edge[1]!= edges[0][0]]\n    edges.sort(key=lambda x: x[0])\n    edges = [edges[0]] + [edge for edge in edges if edge[0]!= edges[0][1]]\n    edges.sort(key=lambda x: x[1])\n    edges = [edges[0]] + [edge for edge in edges if edge[1]!= edges[0][0]]\n    edges.sort(key=lambda x: x[0])\n    edges = [edges[0]] + [edge for edge in edges if edge[0]!= edges[0][1]]\n    edges.sort(key=lambda x: x[1])\n    edges = [edges[0]] + [edge for edge in edges if edge[1]!= edges[0][0]]\n    edges.sort(key=lambda x: x[0])\n    edges = [edges[0]] + [edge for edge in edges if edge[0]!= edges[0][1]]\n    edges.sort(key=lambda x: x[1])\n    edges = [edges[0]] + [edge for edge in edges if edge[1]!= edges[0][0]]\n    edges.sort(key=lambda x: x[0])\n    edges = [edges[0]] + [edge for edge in edges if edge[0]!= edges[0][1]]\n    edges.sort(key=lambda x: x[1])\n    edges = [edges[0]] + [edge for edge in edges if edge[1]!= edges[0][0]]\n    edges.sort(key=lambda x: x[0])\n    edges = [edges[0]] + [edge for edge in edges if edge[0]!= edges[0][1]]\n    edges.sort(key=lambda x: x[1])\n    edges = [edges[0]] + [edge for edge in edges if edge[1]!= edges[0][0]]\n    edges.sort(key=lambda x: x[0])\n    edges = [edges[0]] + [edge for edge in edges if edge[0]!= edges[0][1]]\n    edges.sort(key=lambda x: x[1])\n    edges = [edges[0]] + [edge for edge in edges if edge[1]!= edges[0][0]]\n    edges.sort(key=lambda x: x[0])\n    edges = [edges[0]] + [edge for edge in edges if edge[0]!= edges[0][1]]\n    edges.sort(key=lambda x: x[1])\n    edges = [edges[0]] + [edge for edge in edges if edge[1]!= edges[0][0]]\n    edges.sort(key=lambda x: x[0])\n    edges = [edges[0]] + [edge for edge in edges if edge[0]!= edges[0][1]]\n    edges.sort(key=lambda x: x[1])\n    edges = [edges[0]] + [edge for edge in edges if edge[1]!= edges[0][0]]\n    edges.sort(key=lambda x: x[0])\n    edges = [edges[0]] + [edge for edge in edges if edge[0]!= edges[0][1]]\n    edges.sort(key=lambda x: x[1])\n    edges = [edges[0",
        "test": "assert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\") == \"0\"",
        "num_ids": 1232,
        "indeed": false
    },
    {
        "number": 4395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    lamps = [0] * n\n    for i in range(n):\n        lamps[i] = s[i]\n    lamps.sort()\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lamps[i] == lamps[j] and (j - i) % 3 == 0:\n                res += 1\n    return res\n",
        "test": "assert solution(\"RRRRRRRR\") == \"RRRRRRRR\"",
        "num_ids": 150,
        "indeed": false
    },
    {
        "number": 4396,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    x = []\n    u = []\n    for i in range(N):\n        x.append(int(stdin.readline().split()[0]))\n        u.append(stdin.readline().split()[1])\n    if u.count('JPY') == N:\n        return str(sum(x))\n    elif u.count('BTC') == N:\n        return str(sum(x) * 380000.0)\n    else:\n        return '0'\n",
        "test": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"",
        "num_ids": 154,
        "indeed": false
    },
    {
        "number": 4397,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, i = map(int, stdin.split())\n    return str(n - i + 1)",
        "test": "assert solution(\"4 2\") == \"3\"",
        "num_ids": 37,
        "indeed": true
    },
    {
        "number": 4398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n    return ''.join([s[i] if i % 2 == 0 else t[i] for i in range(n)])",
        "test": "assert solution(\"ip cc\") == \"icpc\"",
        "num_ids": 89,
        "indeed": false
    },
    {
        "number": 4399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return \"Yes\" if a[0] == b[0] and a[1] == b[1] or a[0] == b[1] and a[1] == b[0] else \"No\"",
        "test": "assert solution(\"BBA\") == \"No\"",
        "num_ids": 83,
        "indeed": false
    },
    {
        "number": 4400,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('R')",
        "test": "assert solution(\"RRR\") == 3",
        "num_ids": 28,
        "indeed": false
    },
    {
        "number": 4401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    a, b, c = b, c, a\n    return str(a) + \" \" + str(b) + \" \" + str(c)",
        "test": "assert solution(\"1 2 3 4\") == \"4 3 2 1\"",
        "num_ids": 83,
        "indeed": false
    },
    {
        "number": 4402,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A >= 13:\n        if A >= 6 and A <= 12:\n            return B // 2\n        else:\n            return B\n    else:\n        return 0",
        "test": "assert solution(\"30 100\") == \"100\"",
        "num_ids": 66,
        "indeed": false
    },
    {
        "number": 4403,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.replace('+', '1').replace('-', '-1')))",
        "test": "assert solution(\"+-++\") == \"2\"",
        "num_ids": 49,
        "indeed": false
    },
    {
        "number": 4404,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2019/04/30\")\n    'Heisei'\n    >>> solution(\"2019/04/31\")\n    'TBD'\n    \"\"\"\n   ...\n",
        "test": "assert solution(\"2019/04/31\") == \"TBD\"",
        "num_ids": 76,
        "indeed": false
    },
    {
        "number": 4405,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if i % 2 == 0:\n            ans += a[i]\n    return str(ans)",
        "test": "assert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"",
        "num_ids": 130,
        "indeed": false
    },
    {
        "number": 4406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    conversations = []\n    for i in range(n):\n        conversations.append(int(stdin.split()[i]))\n    conversations.sort()\n    print(conversations)\n    return''.join(map(str, conversations[:k]))",
        "test": "assert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"",
        "num_ids": 134,
        "indeed": false
    },
    {
        "number": 4407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"1 -1 3 2\"",
        "num_ids": 43,
        "indeed": false
    },
    {
        "number": 4408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3\n   ... 1 3 2 8 5 5 8 2 2 8 5 2\n   ... 1 2 2 5\n   ... 2 6 7\n   ... ''')\n    '21'\n    \"\"\"\n    n, k = map(int, stdin.split('\\n')[0].split())\n    cards = list(map(int, stdin.split('\\n')[1].split()))\n    favs = list(map(int, stdin.split('\\n')[2].split()))\n    h = [0] * k\n    for i in range(k):\n        for j in range(n):\n            if cards[i * n + j] == favs[j]:\n                h[i] += 1\n    return max(h)\n",
        "test": "assert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 4409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n",
        "test": "assert solution(\"3\\n2 8 10\") == \"2\\n2 2 1\\n2 3 2\\n\"",
        "num_ids": 69,
        "indeed": false
    },
    {
        "number": 4410,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 1\\n100010\\n6 2\\n000000\\n5 1\\n10101\\n3 1\\n001\\n2 2\\n00\\n1 1\\n0\")\n    '2'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    ans = 0\n    for i in range(n):\n        if s[i] == \"0\":\n            ans += 1\n            for j in range(i + 1, n):\n                if s[j] == \"1\":\n                    if abs(i - j) > k:\n                        break\n                    ans += 1\n    return ans\n",
        "test": "assert solution(\"10100100\") == 2",
        "num_ids": 184,
        "indeed": false
    },
    {
        "number": 4411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 2\n   ... 11 11\n   ... 9 11\n   ... 7 8\n   ... 8 9\n   ... 7 8\n   ... 9 11\n   ... 7 9''')\n    '3'\n    >>> solution('''5 1\n   ... 29 30\n   ... 30 30\n   ... 29 29\n   ... 28 30\n   ... 30 30\n   ... ''')\n    '3'\n    >>> solution('''6 1\n   ... 2 3\n   ... 3 3\n   ... 2 3\n   ... 2 2\n   ... 2 3\n   ... 2 3''')\n    '4'\n    \"\"\"\n   ...\n",
        "test": "assert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5\"",
        "num_ids": 232,
        "indeed": false
    },
    {
        "number": 4412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\") == \"30\\n31\\n10\"",
        "num_ids": 50,
        "indeed": false
    },
    {
        "number": 4413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"",
        "num_ids": 107,
        "indeed": false
    },
    {
        "number": 4414,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin[0] == 'YES' else 'NO'",
        "test": "assert solution(\"1 2 3 6\") == \"NO\"",
        "num_ids": 46,
        "indeed": false
    },
    {
        "number": 4415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if a[0] < a[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if a[0] < a[1]:\n        inc = a[:2]\n        dec = a[2:]\n    else:\n        inc = a[1:]\n        dec = a[:1]\n    if inc[0] < inc[1]:\n        inc = inc[1:]\n    else:\n        inc = inc[:1]\n    if dec[0] > dec[1]:\n        dec = dec[1:]\n    else:\n        dec = dec[:1]\n    if inc == dec:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert solution(\"5 3 1 5 3\") == \"YES\"",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 4416,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    books = []\n    for _ in range(n):\n        books.append([int(x) for x in stdin.split()])\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1])\n    books.sort(key=lambda x: x[0] + x[2])\n    books.sort(key=lambda x: x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1])\n    books.sort(key=lambda x: x[0] + x[2])\n    books.sort(key=lambda x: x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[",
        "test": "assert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\\n\") == \"8\"",
        "num_ids": 1457,
        "indeed": false
    },
    {
        "number": 4417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 5 1\n   ... 1 1 2 3 1\n   ... 4 2\n   ... 6 4 8 5\n   ... 2 2\n   ... 1 6\n   ... 3 5\n   ... 5 2 5\n   ... ''')\n    '2'\n    >>> solution('''4\n   ... 5 1\n   ... 1 1 2 3 1\n   ... 4 2\n   ... 6 4 8 5\n   ... 2 2\n   ... 1 6\n   ... 3 5\n   ... 5 2 5\n   ... ''')\n    '6'\n    >>> solution('''4\n   ... 5 1\n   ... 1 1 2 3 1\n   ... 4 2\n   ... 6 4 8 5\n   ... 2 2\n   ... 1 6\n   ... 3 5\n   ... 5 2 5\n   ... ''')\n    '-1'\n    \"\"\"\n    n, k = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort()\n    b = [a[0]]\n    for i in range(1, n):\n        if a[i] - b[-1] > k:\n            b.append(a[i])\n    if len(b) == n:\n        return str(b[-1])\n    return '-1'\n",
        "test": "assert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"",
        "num_ids": 438,
        "indeed": false
    },
    {
        "number": 4418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i] == 4:\n            count += 1\n        elif a[i] == 8:\n            count += 2\n        elif a[i] == 15:\n            count += 3\n        elif a[i] == 16:\n            count += 4\n        elif a[i] == 23:\n            count += 5\n        elif a[i] == 42:\n            count += 6\n    return count",
        "test": "assert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"",
        "num_ids": 185,
        "indeed": false
    },
    {
        "number": 4419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"13 37\\n18 4\") == \"3\"",
        "num_ids": 34,
        "indeed": false
    },
    {
        "number": 4420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"",
        "num_ids": 78,
        "indeed": false
    },
    {
        "number": 4421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    d = list(map(int, stdin.split(' ')))\n    d.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (d[i] + d[j]) % k == 0:\n                ans += 1\n    return ans",
        "test": "assert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"",
        "num_ids": 135,
        "indeed": false
    },
    {
        "number": 4422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    print(s[:k - 1] + s[k - 1].lower() + s[k:])\n    return s[:k - 1] + s[k - 1].lower() + s[k:]\n",
        "test": "assert solution(\"abc\") == \"abc\"",
        "num_ids": 98,
        "indeed": false
    },
    {
        "number": 4423,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n",
        "test": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"",
        "num_ids": 70,
        "indeed": false
    },
    {
        "number": 4424,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    if K * 500 >= X:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"2 900\") == \"Yes\"",
        "num_ids": 51,
        "indeed": true
    },
    {
        "number": 4425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution(\"3 10\") == \"0.145833333333\"",
        "num_ids": 27,
        "indeed": false
    },
    {
        "number": 4426,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    days = {\n        \"SUN\": 0,\n        \"MON\": 1,\n        \"TUE\": 2,\n        \"WED\": 3,\n        \"THU\": 4,\n        \"FRI\": 5,\n        \"SAT\": 6,\n    }\n    day = days[stdin]\n    return day + 1 if day < 6 else 0",
        "test": "assert solution(\"SAT\") == 1",
        "num_ids": 93,
        "indeed": false
    },
    {
        "number": 4427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n    x_list = [x_2000]\n    for i in range(2010):\n        x_list.append(r * x_list[i] - D)\n    for x in x_list:\n        print(x)\n    return ''",
        "test": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"",
        "num_ids": 120,
        "indeed": false
    },
    {
        "number": 4428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 3 1 1 4\n   ... ''')\n    5\n    >>> solution('''5\n   ... 1 3 2 1 4\n   ... ''')\n    4\n    >>> solution('''3\n   ... 4 1 2\n   ... ''')\n    0\n    \"\"\"\n    n = int(stdin.readline())\n    d = list(map(int, stdin.readline().split()))\n    d.sort()\n    s1 = 0\n    s2 = 0\n    s3 = 0\n    for i in range(n):\n        s1 += d[i]\n        s2 += d[i]\n        s3 += d[i]\n        if s1 == s3:\n            return s1\n        if s1 > s3:\n            s2 -= d[i]\n            s3 += d[i]\n            if s2 == s3:\n                return s1\n            if s2 > s3:\n                s1 -= d[i]\n                s3 += d[i]\n                if s1 == s3:\n                    return s1\n                if s1 > s3:\n                    s2 -= d[i]\n                    s3 += d[i]\n                    if s2 == s3:\n                        return s1\n                    if s2 > s3:\n                        s1 -= d[i]\n                        s3 += d[i]\n                        if s1 == s3:\n                            return s1\n                        if s1 > s3:\n                            s2 -= d[i]\n                            s3 += d[i]\n                            if s2 == s3:\n                                return s1\n                            if s2 > s3:\n                                s1 -= d[i]\n                                s3 += d[i]\n                                if s1 == s3:\n                                    return s1\n                                if s1 > s3:\n                                    s2 -= d[i]\n                                    s3 += d[i]\n                                    if s2 == s3:\n                                        return s1\n                                    if s2 > s3:\n                                        s1 -= d[i]\n                                        s3 += d[i]\n                                        if s1 == s3:\n                                            return s1\n                                        if s1 > s3:\n                                            s2 -= d[i]\n                                            s3 += d[i]\n                                            if s2 == s3:\n                                                return s1\n                                            if s2 > s3:\n                                                s1 -= d[i]\n                                                s3 += d[i]\n                                                if s1 == s3:\n                                                    return s1\n                                                if s1 > s3:\n                                                    s2 -= d[i]\n                                                    s3 += d[i]\n                                                    if s2 == s3:\n                                                        return s1\n                                                    if s2 > s3:\n                                                        s1 -= d[i]\n                                                        s3 += d[i]\n                                                        if s1 == s3:\n                                                            return s1\n                                                        if s1 > s3:\n                                                            s2 -= d[i]\n                                                            s3 += d[i]\n                                                            if s2 == s3:\n                                                                return s1\n                                                            if s2 > s3:\n                                                                s1 -= d[i]\n                                                                s3 += d[i]\n                                                                if s1 == s3:\n                                                                    return s1\n                                                                if s1 > s3:\n                                                                    s2 -= d[i]\n                                                                    s3 += d[i]\n                                                                    if s2 == s3:\n                                                                        return s1\n                                                                    if s2 > s3:\n                                                                        s1 -= d[i]\n                                                                        s3 += d[i]\n                                                                        if s1 == s3:\n                                                                            return s1\n                                                                        if s1 > s3:\n                                                                            s2 -= d[i]\n                                                                            s3 += d[i]\n                                                                            if s2 == s3:\n                                                                                return s1\n                                                                            if s2 > s3:\n                                                                                s1 -= d[i]\n                                                                                s3 += d[i]\n                                                                                if s1 == s3:\n                                                                                    return s1\n                                                                                if s1 > s3:\n                                                                                    s2 -= d[i]\n                                                                                    s3 += d[i]\n                                                                                    if s2 == s3:\n                                                                                        return s1\n                                                                                    if s2 > s3:\n                                                                                        s1 -= d[i]\n                                                                                        s3 += d[i]\n                                                                                        if s1 == s3:\n                                                                                            return s1\n                                                                                        if s1 > s3:\n                                                                                            s2 -= d[i]\n                                                                                            s3 += d[i]\n                                                                                            if s2 == s3:\n                                                                                                return s1\n                                                                                            if s2 > s3:\n                                                                                                s1 -= d[i]\n                                                                                                s",
        "test": "assert solution(\"5\\n1 3 2 1 4\") == \"4\"",
        "num_ids": 1224,
        "indeed": false
    },
    {
        "number": 4429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\")\n    'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000'\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        x, y, z = map(int, stdin.readline().split())\n        a, b, c = x, y, z\n        if x > y:\n            a, b = y, x\n        if x > z:\n            a, c = z, x\n        if y > z:\n            b, c = z, y\n        if a > b:\n            a, b = b, a\n        if a > c:\n            a, c = c, a\n        if b > c:\n            b, c = c, b\n        if a == b and b == c:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            print(a, b, c)\n",
        "test": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"",
        "num_ids": 320,
        "indeed": false
    },
    {
        "number": 4430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    return i\n",
        "test": "assert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"",
        "num_ids": 115,
        "indeed": false
    },
    {
        "number": 4431,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    c = stdin.split()[2:]\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c = list(c)\n    c.sort()\n    c = ''.join(c)\n    c = list(c)\n    c = set(c)\n    c",
        "test": "assert solution(\"aaaaaaa\") == 0",
        "num_ids": 1429,
        "indeed": false
    },
    {
        "number": 4432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"",
        "num_ids": 128,
        "indeed": false
    },
    {
        "number": 4433,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 5\n   ... 1 2\n   ... 2 3\n   ... 3 5\n   ... 4 3\n   ... 1 5''')\n    '3 5\\n2 1\\n3 2\\n3 4'\n    >>> solution('''4 6\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 2 3\n   ... 2 4\n   ... 3 4''')\n    '4 1\\n1 2\\n1 3'\n    >>> solution('''8 9\n   ... 1 2\n   ... 2 3\n   ... 2 5\n   ... 1 6\n   ... 3 4\n   ... 6 5\n   ... 4 5\n   ... 2 7\n   ... 5 8''')\n    '3 2\\n2 5\\n8 5\\n6 1\\n2 7'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    edges.sort(key=lambda x: x[2])\n    edges = [edges[0]] + [edge for edge in edges if edge[0]!= edges[0][1]]\n    edges.sort(key=lambda x: x[1])\n    edges = [edges[0]] + [edge for edge in edges if edge[1]!= edges[0][0]]\n    edges.sort(key=lambda x: x[0])\n    edges = [edges[0]] + [edge for edge in edges if edge[1]!= edges[0][0]]\n    edges.sort(key=lambda x: x[1])\n    edges = [edges[0]] + [edge for edge in edges if edge[0]!= edges[0][1]]\n    edges.sort(key=lambda x: x[2])\n    edges = [edges[0]] + [edge for edge in edges if edge[2]!= edges[0][2]]\n    edges.sort(key=lambda x: x[0])\n    edges = [edges[0]] + [edge for edge in edges if edge[0]!= edges[0][1]]\n    edges.sort(key=lambda x: x[1])\n    edges = [edges[0]] + [edge for edge in edges if edge[1]!= edges[0][0]]\n    edges.sort(key=lambda x: x[2])\n    edges = [edges[0]] + [edge for edge in edges if edge[2]!= edges[0][2]]\n    edges.sort(key=lambda x: x[1])\n    edges = [edges[0]] + [edge for edge in edges if edge[1]!= edges[0][0]]\n    edges.sort(key=lambda x: x[0])\n    edges = [edges[0]] + [edge for edge in edges if edge[0]!= edges[0][1]]\n    edges.sort(key=lambda x: x[2])\n    edges = [edges[0]] + [edge for edge in edges if edge[2]!= edges[0][2]]\n    edges.sort(key=lambda x: x[0])\n    edges = [edges[0]] + [edge for edge in edges if edge[0]!= edges[0][1]]\n    edges.sort(key=lambda x: x[1])\n    edges = [edges[0]] + [edge for edge in edges if edge[1]!= edges[0][0]]\n    edges.sort(key=lambda x: x[2])\n    edges = [edges[0]] + [edge for edge in edges if edge[2]!= edges[0][2]]\n    edges.sort(key=lambda x: x[0])\n    edges = [edges[0]] + [edge for edge in edges if edge[0]!= edges[0][1]]\n    edges.sort(key=lambda x: x[1])\n    edges = [edges[0]] + [edge for edge in edges if edge[1]!= edges[0][0]]\n    edges.sort(key=lambda x: x[2])\n    edges = [edges[0]] + [edge for edge in edges if edge[2]!= edges[0][2]]\n    edges.sort(key=lambda x: x[0])\n    edges = [edges[0]] + [edge for edge in edges if edge[0]!= edges[0][1]]\n    edges.sort(key=lambda x: x[1])\n    edges = [edges[0]] + [edge for edge in edges if edge[1]!= edges[0][0]]\n    edges.sort(key=lambda x: x[2])\n    edges = [edges[0]] + [edge for edge in edges if edge[2]!= edges[0][2]]\n    edges.sort(key=lambda x: x[0])\n    edges = [edges[0]] + [edge for edge in edges if edge[0]!= edges[0][1]]\n    edges.sort(key=lambda x: x[1])\n    edges = [edges[0]] + [edge for edge in edges if edge[1]!= edges[0][0]]\n    edges.sort(key=lambda x: x[2])",
        "test": "assert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"",
        "num_ids": 1377,
        "indeed": false
    },
    {
        "number": 4434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n",
        "test": "assert solution(\"499993\") == \"41664916690999888\"",
        "num_ids": 32,
        "indeed": false
    },
    {
        "number": 4435,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"",
        "num_ids": 40,
        "indeed": false
    },
    {
        "number": 4436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"",
        "num_ids": 39,
        "indeed": false
    },
    {
        "number": 4437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    count = 0\n    for i in range(n):\n        if s[i] == 'a':\n            count += 1\n        else:\n            count -= 1\n        if count % 2 == 0:\n            continue\n        else:\n            if s[i] == 'a':\n                s = s[:i] + 'b' + s[i+1:]\n            else:\n                s = s[:i] + 'a' + s[i+1:]\n            count = 0\n    return s",
        "test": "assert solution(\"ababab\") == 0",
        "num_ids": 152,
        "indeed": false
    },
    {
        "number": 4438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\")\n    15\n    >>> solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\")\n    9\n    \"\"\"\n   ...\n",
        "test": "assert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"",
        "num_ids": 158,
        "indeed": false
    },
    {
        "number": 4439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1 and b == 2:\n        return 2\n    elif a == 2 and b == 1:\n        return 2\n    elif a == 3 and b == 1:\n        return 2\n    elif a == 1 and b == 3:\n        return 2\n    elif a == 2 and b == 3:\n        return 2\n    elif a == 3 and b == 2:\n        return 2\n    else:\n        return 1",
        "test": "assert solution(\"3 1\") == \"2\"",
        "num_ids": 129,
        "indeed": false
    },
    {
        "number": 4440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin)\n    return str(max(l * l * l, l * l, l))",
        "test": "assert solution('3') == '1.000000000000'",
        "num_ids": 41,
        "indeed": false
    },
    {
        "number": 4441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        print(\"Hello World\")\n    else:\n        a, b = map(int, stdin.split())\n        print(a + b)\n    return \"\"",
        "test": "assert solution(\"2\") == \"3\"",
        "num_ids": 75,
        "indeed": false
    },
    {
        "number": 4442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)",
        "test": "assert solution(\"4 3\") == \"3333\"",
        "num_ids": 35,
        "indeed": false
    },
    {
        "number": 4443,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return chr(ord(stdin) + 1)",
        "test": "assert solution(\"a\") == \"b\"",
        "num_ids": 34,
        "indeed": true
    },
    {
        "number": 4444,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return T + S",
        "test": "assert solution(\"oder atc\") == \"atcoder\"",
        "num_ids": 31,
        "indeed": true
    },
    {
        "number": 4445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    even = 0\n    odd = 0\n    for i in a:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    if even == 0:\n        return 0\n    if odd == 0:\n        return odd\n    return even - odd",
        "test": "assert solution(\"6\\n5 1 2 4 6 3\") == \"0\"",
        "num_ids": 134,
        "indeed": false
    },
    {
        "number": 4446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = [int(x) for x in stdin.split()]\n    h = [int(x) for x in stdin.split()]\n    h.sort()\n    h = h[::-1]\n    print(h)\n    return str(max(0, sum(h[:k]) - a * k))\n",
        "test": "assert solution(\"1 1 100 99\\n100\") == \"1\"",
        "num_ids": 123,
        "indeed": false
    },
    {
        "number": 4447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = [0] * m\n    for i in range(n):\n        c[a[i] % m] += 1\n    ans = 0\n    for i in range(m):\n        ans += c[i] * (c[i] - 1) // 2\n    print(ans)\n    print(*[a[i] + (m - 1 - i) * c[i] for i in range(m)])\n    return ''\n",
        "test": "assert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\\n3 2 0 7 10 14\"",
        "num_ids": 186,
        "indeed": false
    },
    {
        "number": 4448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 6\n   ... 1 2 0 2 0\n   ... 2 4\n   ... 3 3\n   ... 1 5\n   ... 1 2\n   ... 1 5\n   ... 2 3\n   ... ''')\n    8\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    k = list(map(int, stdin.split('\\n')[1].split()))\n    d = [0] * n\n    for i in range(m):\n        d[int(stdin.split('\\n')[i + 2].split()[1]) - 1] = int(stdin.split('\\n')[i + 2].split()[0])\n    d.sort()\n    ans = 0\n    for i in range(n):\n        if k[i] == 0:\n            continue\n        if d[i] > ans:\n            ans = d[i]\n    return ans\n",
        "test": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"",
        "num_ids": 275,
        "indeed": false
    },
    {
        "number": 4449,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1\n   ... 1 1 10 10\n   ... 2\n   ... 10 5 2 10 1 1 2 5\n   ... 2\n   ... 10 5 1 10 5 1 1 1\n   ... 2\n   ... 1 1 1 1 1 1 1 1\n   ... 1\n   ... 10000 10000 10000 10000''')\n    'YES'\n    \"\"\"\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        sticks = list(map(int, stdin.readline().split()))\n        if sticks[0] * sticks[1] * sticks[2] * sticks[3] == n * (n - 1) * (n - 2) * (n - 3):\n            print('YES')\n        else:\n            print('NO')\n",
        "test": "assert solution(\"4\\n1 1 1 1 1\\n2\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1",
        "num_ids": 1786,
        "indeed": false
    },
    {
        "number": 4450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    n, m, k = [int(x) for x in stdin.split()]\n    edges = []\n    for _ in range(m):\n        x, y, w = [int(x) for x in stdin.split()]\n        edges.append((x, y, w))\n    edges.sort(key=lambda x: x[2])\n    dist = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        dist[i][i] = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if dist[i][j] == float('inf'):\n                continue\n            for x, y, w in edges:\n                if x == i and y == j:\n                    dist[i][j] = min(dist[i][j], dist[i][x] + dist[x][j] + w)\n                elif x == j and y == i:\n                    dist[i][j] = min(dist[i][j], dist[i][y] + dist[y][j] + w)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if dist[i][j] == float('inf'):\n                continue\n            for x, y, w in edges:\n                if x == i and y == j:\n                    dist[i][j] = min(dist[i][j], dist[i][x] + dist[x][j] + w)\n                elif x == j and y == i:\n                    dist[i][j] = min(dist[i][j], dist[i][y] + dist[y][j] + w)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if dist[i][j] == float('inf'):\n                continue\n            for x, y, w in edges:\n                if x == i and y == j:\n                    dist[i][j] = min(dist[i][j], dist[i][x] + dist[x][j] + w)\n                elif x == j and y == i:\n                    dist[i][j] = min(dist[i][j], dist[i][y] + dist[y][j] + w)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if dist[i][j] == float('inf'):\n                continue\n            for x, y, w in edges:\n                if x == i and y == j:\n                    dist[i][j] = min(dist[i][j], dist[i][x] + dist[x][j] + w)\n                elif x == j and y == i:\n                    dist[i][j] = min(dist[i][j], dist[i][y] + dist[y][j] + w)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if dist[i][j] == float('inf'):\n                continue\n            for x, y, w in edges:\n                if x == i and y == j:\n                    dist[i][j] = min(dist[i][j], dist[i][x] + dist[x][j] + w)\n                elif x == j and y == i:\n                    dist[i][j] = min(dist[i][j], dist[i][y] + dist[y][j] + w)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if dist[i][j] == float('inf'):\n                continue\n            for x, y, w in edges:\n                if x == i and y == j:\n                    dist[i][j] = min(dist[i][j], dist[i][x] + dist[x][j] + w)\n                elif x == j and y == i:\n                    dist[i][j] = min(dist[i][j], dist[i][y] + dist[y][j] + w)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if dist[i][j] == float('inf'):\n                continue\n            for x, y, w in edges:\n                if x == i and y == j:\n                    dist[i][j] = min(dist[i][j], dist[i][x] + dist[x][j] + w)\n                elif x == j and y == i:\n                    dist[i][j] = min(dist[i][j], dist[i][y] + dist[y][j] + w)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if dist[i][j] == float('inf'):\n                continue\n            for x, y, w in edges:\n                if x == i and y == j:\n                    dist[i][j] = min(dist[i][j], dist[i][x] + dist[x][j] + w)\n                elif x == j and y == i:\n                    dist[i][j] = min(dist[i][j], dist[i][y] + dist[y][j] + w)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if dist[i][j] == float('inf'):\n                continue\n            for x, y, w in edges:\n                if x == i and y == j:\n                    dist[i][j] = min(dist[i][j], dist[i][x] + dist[x][j] + w)\n                elif x == j and y == i:\n                    dist[i][j] = min(dist[i][j], dist[i][y] + dist[y][j] + w)\n    for i",
        "test": "assert solution(\"4 3 2\\n1 2 1\\n2 3 1\\n3 4 1\") == \"3\"",
        "num_ids": 1450,
        "indeed": false
    },
    {
        "number": 4451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    res = 0\n    k = 0\n    for i in range(n):\n        if a[i] - a[0] > res:\n            res = a[i] - a[0]\n            k += 1\n    print(res, k)\n    print(*[i + 1 for i in range(n) if a[i] == a[0]])\n    return ''",
        "test": "assert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"",
        "num_ids": 164,
        "indeed": false
    },
    {
        "number": 4452,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    2\n    >>> solution('''5\n   ... 5009\n   ... 7\n   ... 9876\n   ... 10000\n   ... 10\n   ... ''')\n    ",
        "test": "assert solution(\"4\\n1\\n9\\n7\\n5\\n\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\\n\"",
        "num_ids": 1697,
        "indeed": false
    },
    {
        "number": 4453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution(\"4\\n1 2 3 4\\n2\\n3 4 1 2\") == \"3 3 3\"",
        "num_ids": 66,
        "indeed": false
    },
    {
        "number": 4454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution(\"4\\n1 2 3 4\\n3\\n1 1 1 1\") == \"1\"",
        "num_ids": 60,
        "indeed": false
    },
    {
        "number": 4455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    skills = list(map(int, stdin.split(' ')))\n    pairs = []\n    for _ in range(k):\n        pairs.append(list(map(int, stdin.split(' '))))\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = list(filter(lambda x: x[0] < x[1], pairs))\n    pairs = list(map(lambda x: x[0], pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x + 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x - 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x + 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x - 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x + 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x - 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x + 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x - 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x + 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x - 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x + 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x - 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x + 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x - 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x + 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x - 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x + 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x - 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x + 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x - 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x + 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x - 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x + 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x - 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x + 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x - 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x + 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x - 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x + 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x - 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x + 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x - 1, pairs))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs = list(map(lambda x: x + 1, pairs))\n    pairs = list(set(pairs))\n    pairs.",
        "test": "assert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"",
        "num_ids": 1457,
        "indeed": false
    },
    {
        "number": 4456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p, q = map(int, stdin.split())\n    s = [chr(i) for i in range(97, 97 + n)]\n    s[p - 1], s[q - 1] = s[q - 1], s[p - 1]\n    s = ''.join(s)\n    if len(set(s)) < k:\n        return 'NO'\n    return s\n",
        "test": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"abb\"",
        "num_ids": 132,
        "indeed": false
    },
    {
        "number": 4457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i] * (i + 1)\n    return str(ans)",
        "test": "assert solution(\"4\\n10 10 10 10\") == \"64\"",
        "num_ids": 103,
        "indeed": false
    },
    {
        "number": 4458,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                count += 1\n    return str(count)",
        "test": "assert solution(\"4 2 5 1 3\") == \"3\"",
        "num_ids": 92,
        "indeed": false
    },
    {
        "number": 4459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n3 3 3 3\")\n    1\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i] == i + 1:\n            count += 1\n    return count\n",
        "test": "assert solution(\"4\\n3 3 3 3\") == \"1\"",
        "num_ids": 111,
        "indeed": false
    },
    {
        "number": 4460,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    for i in range(5):\n        if x_i == 0:\n            return str(i + 1)",
        "test": "assert solution(\"0 2 3 4 5\") == \"1\"",
        "num_ids": 72,
        "indeed": false
    },
    {
        "number": 4461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    return str(h * w - (h + w - 1))",
        "test": "assert solution(\"3 5\") == \"0\"",
        "num_ids": 42,
        "indeed": false
    },
    {
        "number": 4462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    for i in range(n - 1):\n        if a[i] * a[i + 1] % 4!= 0:\n            return \"No\"\n    return \"Yes\"\n",
        "test": "assert solution(\"2\\n1 10\") == \"No\"",
        "num_ids": 110,
        "indeed": false
    },
    {
        "number": 4463,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    if s_list < t_list:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"axy\") == \"Yes\"",
        "num_ids": 101,
        "indeed": false
    },
    {
        "number": 4464,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C % B == 0:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"7 5 1\") == \"YES\"",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4465,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b - (a + b - 1))",
        "test": "assert solution(\"2 2\") == \"1\"",
        "num_ids": 42,
        "indeed": true
    },
    {
        "number": 4466,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    return str(max(0, x - y - 2 * z))",
        "test": "assert solution(\"13 3 1\") == \"3\"",
        "num_ids": 46,
        "indeed": false
    },
    {
        "number": 4467,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    ",
        "test": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == \"2\"",
        "num_ids": 1675,
        "indeed": false
    },
    {
        "number": 4468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    times = list(map(int, stdin.split()))\n    times.sort()\n    total = 0\n    for i in range(n):\n        total += times[i]\n        if total > t:\n            return str(total - times[i])\n    return str(total)",
        "test": "assert solution(\"2 4\\n0 3\") == \"7\"",
        "num_ids": 99,
        "indeed": false
    },
    {
        "number": 4469,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n\")\n    '1\\n1\\n2'\n    >>> solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\")\n    '0\\n2\\n1'\n    \"\"\"\n   ...\n",
        "test": "assert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"",
        "num_ids": 228,
        "indeed": false
    },
    {
        "number": 4470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        if n % 2 == 0:\n            n //= 2\n        elif n % 3 == 0:\n            n = 2 * n // 3\n        elif n % 5 == 0:\n            n = 4 * n // 5\n        else:\n            n = -1\n        print(n)\n",
        "test": "assert solution(\"1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\"",
        "num_ids": 201,
        "indeed": false
    },
    {
        "number": 4471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"2\\n11 11\\n1\\n100\") == \"NO\"",
        "num_ids": 48,
        "indeed": false
    },
    {
        "number": 4472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    a, b = a[1:], b[1:]\n    n = len(a)\n    m = len(b)\n    if n > m:\n        a, b = b, a\n        n, m = m, n\n    if n == m:\n        return 0\n    if n % 2 == 0:\n        return n // 2\n    return n // 2 + 1\n",
        "test": "assert solution(\"bacabaa\") == 0",
        "num_ids": 126,
        "indeed": false
    },
    {
        "number": 4473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2 3\n   ... 100 1 4\n   ... 1 10 5\n   ... 1 1000000000\n   ... 1 1 999999999\n   ... 1 1 999999999''')\n    '8198-17299999999701'\n    \"\"\"\n   ...\n",
        "test": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8 198 -17 2999999997 0 1\"",
        "num_ids": 120,
        "indeed": false
    },
    {
        "number": 4474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8\n   ... 1\n   ... 2\n   ... 6\n   ... 13\n   ... 14\n   ... 3620\n   ... 10000\n   ... 1000000000000000000\n   ... ''')\n    '1'\n    '3'\n    '9'\n    '13'\n    '27'\n    '6561'\n    '19683'\n    '1350851717672992089'\n    \"\"\"\n    pass\n",
        "test": "assert solution(\"4\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"1\\n3\\n5\\n7\\n9\\n11\\n13\\n15\\n17\\n19\\n21\\n23\\n25\\n27\\n29\\n31\\n33\\n35\\n37\\n39\\n41\\n43\\n45\\n47\\n49\\n51\\n53\\n55\\n57\\n59\\n61\\n63\\n65\\n67\\n69\\n71\\n73\\n75\\n77\\n79\\n81\\n83\\n85\\n87\\n89\\n91\\n93\\n95\\n97\\n99\\n101\\n103\\n105\\n107\\n109\\n111\\n113\\n115\\n117\\n119\\n121\\n123\\n125\\n127\\n129\\n131\\n133\\n135\\n137\\n139\\n141\\n143\\n145\\n147\\n149\\n151\\n153\\n155\\n157\\n159\\n161\\n163\\n165\\n167\\n169\\n171\\n173\\n175\\n177\\n179\\n181\\n183\\n185\\n187\\n189\\n191\\n193\\n195\\n197\\n199\\n201\\n203\\n205\\n207\\n209\\n211\\n213\\n215\\n217\\n219\\n221\\n223\\n225\\n227\\n229\\n231\\n233\\n235\\n237\\n239\\n241\\n243\\n245\\n247\\n249\\n251\\n253\\n255\\n257\\n259\\n261\\n263\\n265\\n267\\n269\\n271\\n273\\n275\\n277\\n279\\n281\\n283\\n285\\n287\\n289\\n291\\n293\\n295\\n297\\n299\\n301\\n303\\n305\\n307\\n309\\n311\\n313\\n315\\n317\\n319\\n321\\n323\\n325\\n327\\n329\\n331\\n333\\n335\\n337\\n339\\n341\\n343\\n345\\n347\\n349\\n351\\n353\\n355\\n357\\n359\\n361\\n363\\n365\\n367\\n369\\n371\\n373\\n375\\n377\\n379\\n381\\n383\\n385\\n387\\n389\\n391\\n393\\n395\\n397\\n399\\n401\\n403\\n405\\n407\\n409\\n411\\n413\\n415\\n417\\n419\\n421\\n423\\n425\\n427\\n429\\n431\\n433\\n435\\n437\\n439\\n441\\n443\\n445\\n447\\n449\\n451\\n453\\n455\\n457\\n459\\n461\\n463\\n465\\n467\\n469\\n471\\n473\\n475\\n477\\n479\\n481\\n483\\n485\\n487\\n489\\n491\\n493\\n495\\n497\\n499\\n501\\n503\\n505\\n507\\n509\\n511\\n513\\n515\\n517\\n519\\n521\\n523\\n525\\n527\\n529\\n531\\n533\\n535\\n537\\n539\\n541\\n543\\n545\\n547\\n549\\n551\\n553\\n555\\n557\\n559\\n561\\n563\\n565\\n567\\n569\\n571\\n573\\n575\\n577\\n579\\n581\\n583\\n585\\n587\\n589\\n591\\n593\\n595\\n597\\n599\\n601\\n603\\n605\\n607\\n609\\n611\\n613\\n615\\n617\\n619\\n621\\n623\\n625\\n627\\n629\\n631\\n633\\n635\\n637\\n639\\n641\\n643\\n645\\n647\\n649\\n651\\n653\\n655\\n657\\n659\\n661\\n663\\n665\\n667\\n669\\n671\\n673\\n675\\n677\\n679\\n681\\n683\\n685\\n687\\n689\\n691\\n693\\n695\\n697\\n699\\n701\\n703\\n705\\n707\\n709\\n711\\n713\\n715\\n717\\n719\\n721\\n723\\n725\\n727\\n729\\n731\\n733\\n735\\n737\\n739\\n741\\n743\\n745\\n747\\n749\\n751\\n753\\n755\\n757\\n759\\n761\\n763\\n765\\n767\\n769\\n771\\n773\\n775\\n777\\n779\\n781\\n783\\n785\\n787\\n789\\n791\\n793\\n795\\n797\\n799\\n801\\n803\\n805\\n807\\n809\\n811\\n813\\n815\\n817\\n819\\n821\\n823\\n825\\n827\\n829\\n831\\n833\\n835\\n837\\n839\\n841\\n843\\n845\\n847\\n849\\n851\\n853\\n855\\n857\\n859\\n861\\n863\\n865\\n867\\n869\\n871\\n873\\n875\\n877\\n879\\n881\\n883\\n885\\n887\\n889\\n891\\n893\\n895\\n897\\n899\\n901\\n903\\n905\\",
        "num_ids": 1570,
        "indeed": false
    },
    {
        "number": 4475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n",
        "test": "assert solution(\"12 8 8 7 2\") == \"77\"",
        "num_ids": 41,
        "indeed": false
    },
    {
        "number": 4476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"2 4\\n7 4\") == \"0\"",
        "num_ids": 34,
        "indeed": false
    },
    {
        "number": 4477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"",
        "num_ids": 39,
        "indeed": false
    },
    {
        "number": 4478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\") == \"NO\"",
        "num_ids": 75,
        "indeed": false
    },
    {
        "number": 4479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, [solution(stdin.split('\\n')[1:])]))\n\ndef",
        "test": "assert solution(\"3 -1 0 2\") == \"6\"",
        "num_ids": 60,
        "indeed": false
    },
    {
        "number": 4480,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    ",
        "test": "assert solution(\"0 2 1 -6 6 7 9 -1 2 0 1\") == False",
        "num_ids": 1772,
        "indeed": false
    },
    {
        "number": 4481,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution(\"7\\nbeat\\n: \\nvet\\n: \\nbeet\\n: \\nbed\\n: \\nbet\\n: \\nvet\\n\") == \"beet\\nvet\"",
        "num_ids": 61,
        "indeed": false
    },
    {
        "number": 4482,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += (a[i] - i) ** 2\n    print(ans)\n    return ''",
        "test": "assert solution(\"4 8\") == \"8\"",
        "num_ids": 86,
        "indeed": false
    },
    {
        "number": 4483,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    return str(X - A - B)",
        "test": "assert solution(\"1234 150 100\") == \"84\"",
        "num_ids": 41,
        "indeed": false
    },
    {
        "number": 4484,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(factorial(n + m) // (factorial(n) * factorial(m)))\n\ndef",
        "test": "assert solution(\"2 2\") == \"8\"",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4485,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = {i: set() for i in range(1, n + 1)}\n    for a, b in edges:\n        graph[a].add(b)\n        graph[b].add(a)\n    if len(graph[1]) < 2:\n        return 'IMPOSSIBLE'\n    for i in range(1, n + 1):\n        if len(graph[i]) < 2:\n            return 'IMPOSSIBLE'\n    return 'POSSIBLE'\n",
        "test": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 4486,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[1::2]\n\"\"\"\n\ndef",
        "test": "assert solution(\"atcoder\") == \"acdr\"",
        "num_ids": 28,
        "indeed": false
    },
    {
        "number": 4487,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    if a[-1] == b[0] and b[-1] == c[0]:\n        return \"YES\"\n    return \"NO\"",
        "test": "assert solution(\"rng gorilla apple\") == \"YES\"",
        "num_ids": 62,
        "indeed": true
    },
    {
        "number": 4488,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return \"GREATER\"\n    elif a < b:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"",
        "test": "assert solution('36 24') == 'GREATER'",
        "num_ids": 67,
        "indeed": true
    },
    {
        "number": 4489,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, s_list, t_list = map(str, stdin.split('\\n'))\n    N = int(N)\n    s_list = s_list.split('\\n')\n    t_list = t_list.split('\\n')\n    s_list = [s for s in s_list if s!= '']\n    t_list = [t for t in t_list if t!= '']\n    s_list = [s.split(' ') for s in s_list]\n    t_list = [t.split(' ') for t in t_list]\n    s_list = [s for s in s_list if len(s) == 2]\n    t_list = [t for t in t_list if len(t) == 2]\n    s_list = [s[0] for s in s_list]\n    t_list = [t[0] for t in t_list]\n    s_list = set(s_list)\n    t_list = set(t_list)\n    s_list = list(s_list)\n    t_list = list(t_list)\n    s_list.sort()\n    t_list.sort()\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]\n    t_list = [t for t in t_list if t not in s_list]\n    s_list = [s for s in s_list if s not in t_list]",
        "test": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"",
        "num_ids": 1654,
        "indeed": false
    },
    {
        "number": 4490,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"C\") == \"G\"",
        "num_ids": 25,
        "indeed": false
    },
    {
        "number": 4491,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n",
        "test": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == \"14\"",
        "num_ids": 1704,
        "indeed": false
    },
    {
        "number": 4492,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n2 2 2\")\n    1\n    \"\"\"\n    n, *a = map(int, stdin.split())\n    a = [0] + a\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][i] = a[i]\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            dp[i][j] = max(a[i], a[j])\n            for k in range(i, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j])\n    return dp[1][n]\n",
        "test": "assert solution(\"3 3\\n2 2 2\") == \"1\"",
        "num_ids": 214,
        "indeed": false
    },
    {
        "number": 4493,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    if a[0] + a[1] == a[2] and a[3] + a[4] == a[5] and a[6] + a[7] == a[8]:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"No\"",
        "num_ids": 121,
        "indeed": false
    },
    {
        "number": 4494,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]",
        "test": "assert solution(\"ARC\") == \"ABC\"",
        "num_ids": 28,
        "indeed": false
    },
    {
        "number": 4495,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    return str(sum(1 for i in range(a, b + 1) if i % x == 0))",
        "test": "assert solution(\"4 8 2\") == \"3\"",
        "num_ids": 55,
        "indeed": false
    },
    {
        "number": 4496,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    if D == 25:\n        return \"Christmas\"\n    elif D == 24:\n        return \"Christmas Eve\"\n    elif D == 23:\n        return \"Christmas Eve Eve\"\n    elif D == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"Wrong input\"",
        "test": "assert solution('25') == 'Christmas'",
        "num_ids": 103,
        "indeed": true
    },
    {
        "number": 4497,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            count += 1\n    return count",
        "test": "assert solution(\"7\") == \"4\"",
        "num_ids": 55,
        "indeed": false
    },
    {
        "number": 4498,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a + b <= d or a + c <= d or b + c <= d:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"4 7 9 3\") == \"Yes\"",
        "num_ids": 65,
        "indeed": false
    },
    {
        "number": 4499,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(word[0] for word in stdin.split())",
        "test": "assert solution(\"atcoder beginner contest\") == \"ABC\"",
        "num_ids": 33,
        "indeed": false
    },
    {
        "number": 4500,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A + B >= C:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"50 100 120\") == \"Yes\"",
        "num_ids": 66,
        "indeed": true
    },
    {
        "number": 4501,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n",
        "test": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"",
        "num_ids": 28,
        "indeed": false
    },
    {
        "number": 4502,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = []\n    for i in range(n):\n        b.append(int(stdin))\n    for i in range(n):\n        b.append(b[i])\n    return''.join(map(str, b))",
        "test": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"",
        "num_ids": 84,
        "indeed": false
    },
    {
        "number": 4503,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    if A[0] > H:\n        return \"No\"\n    else:\n        return \"Yes\"",
        "test": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"",
        "num_ids": 79,
        "indeed": false
    },
    {
        "number": 4504,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin)",
        "test": "assert solution('aaaaa') == 5",
        "num_ids": 28,
        "indeed": false
    },
    {
        "number": 4505,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin[0] == stdin[2] and stdin[1] == stdin[2] else \"No\"",
        "test": "assert solution(\"abc\") == \"No\"",
        "num_ids": 55,
        "indeed": false
    },
    {
        "number": 4506,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i] * b[i]\n    return ans % 1000000007\n",
        "test": "assert solution(\"1\\n1000000\\n1000000\") == \"757402647\"",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 4507,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    b = [int(x) for x in stdin.split('\\n')[2 + i].split()]\n    return str(solve(n, m, k, a, b))\n\n\ndef",
        "test": "assert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == \"17\"",
        "num_ids": 181,
        "indeed": false
    },
    {
        "number": 4508,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"0\"",
        "num_ids": 76,
        "indeed": false
    },
    {
        "number": 4509,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\") == \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\"",
        "num_ids": 57,
        "indeed": false
    },
    {
        "number": 4510,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    conversations = []\n    for i in range(n):\n        conversations.append(int(stdin.split()[i]))\n    conversations.sort()\n    for i in range(k):\n        if i < len(conversations):\n            print(conversations[i])\n        else:\n            print(0)\n    return ''",
        "test": "assert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"",
        "num_ids": 154,
        "indeed": false
    },
    {
        "number": 4511,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 3\n   ... 1 6\n   ... 1 7\n   ... 1 5\n   ... 2\n   ... 1 4\n   ... 1 3\n   ... 3\n   ... 1 10\n   ... 3 5\n   ... 2 3\n   ... 3\n   ... 1 15\n   ... 2 4\n   ... 1 10\n   ... 1\n   ... 1 100''')\n    263\n    \"\"\"\n   ...\n",
        "test": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"",
        "num_ids": 176,
        "indeed": false
    },
    {
        "number": 4512,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    q = int(stdin.readline())\n    for _ in range(q):\n        l, r = map(int, stdin.readline().split())\n        if l == 1:\n            s = s[:r] + stdin.readline().strip() + s[r:]\n        else:\n            print(len(set(s[l - 1:r])))\n",
        "test": "assert solution(\"dfcbbcfeeedbaea\") == \"6\"",
        "num_ids": 126,
        "indeed": false
    },
    {
        "number": 4513,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        sudoku = []\n        for _ in range(9):\n            sudoku.append(list(map(int, stdin.readline().split())))\n        sudoku = np.array(sudoku)\n        for i in range(9):\n            for j in range(9):\n                if sudoku[i][j] == 0:\n                    for k in range(1, 10):\n                        if is_valid(sudoku, i, j, k):\n                            sudoku[i][j] = k\n                            if solution(stdin):\n                                return True\n                            sudoku[i][j] = 0\n                    return False\n        return True\n    return ''.join(map(str, sudoku))\n\ndef",
        "test": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"",
        "num_ids": 309,
        "indeed": false
    },
    {
        "number": 4514,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split(' '))\n    parents = list(map(int, stdin.split(' ')))\n    graph = {i: [] for i in range(1, n + 1)}\n    for i in range(n - 1):\n        graph[parents[i]].append(i + 2)\n    for i in range(q):\n        u, k = map(int, stdin.split(' '))\n        if u == 1:\n            print(k)\n        else:\n            if len(graph[u]) < k:\n                print(-1)\n            else:\n                print(graph[u][k - 1])\n",
        "test": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n6\\n8\\n-1\\n9\\n4\"",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 4515,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\")\n    'YES'\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b, c, n = map(int, stdin.readline().split())\n        if n % 3 == 0:\n            if a == b == c:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n",
        "test": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"",
        "num_ids": 172,
        "indeed": false
    },
    {
        "number": 4516,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    p = [i for i in range(1, n + 1)]\n    for i in range(m):\n        p[x[i] - 1], p[x[i] - 1 + 1] = p[x[i] - 1 + 1], p[x[i] - 1]\n    print(*[abs(p.index(i) - p.index(i + 1)) for i in range(1, n)])\n    return ''",
        "test": "assert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"",
        "num_ids": 178,
        "indeed": false
    },
    {
        "number": 4517,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 6\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 2 5\n   ... 2 6\n   ... 3 7\n   ... 7 8\n   ... 7 9\n   ... 9 10\n   ... 4 3 8 9 10\n   ... 3 2 4 6\n   ... 3 2 1 5\n   ... 3 4 8 2\n   ... 2 6 10\n   ... 3 5 4 7\n   ... ''')\n    'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\n    \"\"\"\n   ...\n",
        "test": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 4518,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2 2 1 3\n   ... 3\n   ... 1 1 1\n   ... 4\n   ... 1 1000 101 1000\n   ... 4\n   ... 1 2 3 4\n   ... ''')\n    'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\n    \"\"\"\n   ...",
        "test": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"NO\"",
        "num_ids": 195,
        "indeed": false
    },
    {
        "number": 4519,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"1111100\") == \"0011111\"",
        "num_ids": 32,
        "indeed": false
    },
    {
        "number": 4520,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 2\n   ... 11 11\n   ... 9 11\n   ... 7 8\n   ... 8 9\n   ... 7 8\n   ... 9 11\n   ... 7 9''')\n    '3'\n    >>> solution('''5 1\n   ... 29 30\n   ... 30 30\n   ... 29 29\n   ... 28 30\n   ... 30 30\n   ... ''')\n    '3'\n    >>> solution('''6 1\n   ... 2 3\n   ... 3 3\n   ... 2 3\n   ... 2 2\n   ... 2 3\n   ... 2 3''')\n    '4'\n    \"\"\"\n   ...\n",
        "test": "assert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\"",
        "num_ids": 232,
        "indeed": false
    },
    {
        "number": 4521,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    v = list(map(int, stdin.readline().split()))\n    d = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            d[i] += min(abs(x[i] - x[j]), abs(x[i] + v[i] - x[j] - v[j]))\n            d[j] += min(abs(x[i] - x[j]), abs(x[i] + v[i] - x[j] - v[j]))\n    return sum(d)",
        "test": "assert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == \"19\"",
        "num_ids": 217,
        "indeed": false
    },
    {
        "number": 4522,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"1 2\\n1 2\") == \"0 0\"",
        "num_ids": 72,
        "indeed": false
    },
    {
        "number": 4523,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"3\\n1 2 4\\n4\\n1 3 4 4\") == \"YES\"",
        "num_ids": 51,
        "indeed": false
    },
    {
        "number": 4524,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a = bin(a)[2:]\n    b = bin(b)[2:]\n    while b:\n        a, b = a + b[-1], b[:-1]\n    return int(a, 2) % int(1e9 + 7)",
        "test": "assert solution(\"4 5\\n1001\\n10101\") == \"11\"",
        "num_ids": 113,
        "indeed": false
    },
    {
        "number": 4525,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution(\"8\\n10\") == \"YES\\n2 4 1 5\"",
        "num_ids": 43,
        "indeed": false
    },
    {
        "number": 4526,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"4\\n1 1 2\\n5\\n1 1 1 1\") == \"1\"",
        "num_ids": 52,
        "indeed": false
    },
    {
        "number": 4527,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"4\"",
        "num_ids": 145,
        "indeed": false
    },
    {
        "number": 4528,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # It's main function. Don't remove this function\n    # It's using for auto-testing\n    # Try to clean the code\n    # and replace `pass` by your own code\n    pass",
        "test": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"",
        "num_ids": 93,
        "indeed": false
    },
    {
        "number": 4529,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\nLRUD\")\n    '1 2'\n    >>> solution(\"4\\nLURD\")\n    '1 4'\n    >>> solution(\"5\\nRRUDU\")\n    '3 4'\n    >>> solution(\"5\\nLLDDR\")\n    '-1'\n    \"\"\"\n    n = int(stdin)\n    s = stdin\n    l = 0\n    r = n\n    while r - l > 1:\n        m = (l + r) // 2\n        if m == 0:\n            break\n        if m == 1:\n            break\n        if m == 2:\n            break\n        if m == 3:\n            break\n        if m == 4:\n            break\n        if m == 5:\n            break\n        if m == 6:\n            break\n        if m == 7:\n            break\n        if m == 8:\n            break\n        if m == 9:\n            break\n        if m == 10:\n            break\n        if m == 11:\n            break\n        if m == 12:\n            break\n        if m == 13:\n            break\n        if m == 14:\n            break\n        if m == 15:\n            break\n        if m == 16:\n            break\n        if m == 17:\n            break\n        if m == 18:\n            break\n        if m == 19:\n            break\n        if m == 20:\n            break\n        if m == 21:\n            break\n        if m == 22:\n            break\n        if m == 23:\n            break\n        if m == 24:\n            break\n        if m == 25:\n            break\n        if m == 26:\n            break\n        if m == 27:\n            break\n        if m == 28:\n            break\n        if m == 29:\n            break\n        if m == 30:\n            break\n        if m == 31:\n            break\n        if m == 32:\n            break\n        if m == 33:\n            break\n        if m == 34:\n            break\n        if m == 35:\n            break\n        if m == 36:\n            break\n        if m == 37:\n            break\n        if m == 38:\n            break\n        if m == 39:\n            break\n        if m == 40:\n            break\n        if m == 41:\n            break\n        if m == 42:\n            break\n        if m == 43:\n            break\n        if m == 44:\n            break\n        if m == 45:\n            break\n        if m == 46:\n            break\n        if m == 47:\n            break\n        if m == 48:\n            break\n        if m == 49:\n            break\n        if m == 50:\n            break\n        if m == 51:\n            break\n        if m == 52:\n            break\n        if m == 53:\n            break\n        if m == 54:\n            break\n        if m == 55:\n            break\n        if m == 56:\n            break\n        if m == 57:\n            break\n        if m == 58:\n            break\n        if m == 59:\n            break\n        if m == 60:\n            break\n        if m == 61:\n            break\n        if m == 62:\n            break\n        if m == 63:\n            break\n        if m == 64:\n            break\n        if m == 65:\n            break\n        if m == 66:\n            break\n        if m == 67:\n            break\n        if m == 68:\n            break\n        if m == 69:\n            break\n        if m == 70:\n            break\n        if m == 71:\n            break\n        if m == 72:\n            break\n        if m == 73:\n            break\n        if m == 74:\n            break\n        if m == 75:\n            break\n        if m == 76:\n            break\n        if m == 77:\n            break\n        if m == 78:\n            break\n        if m == 79:\n            break\n        if m == 80:\n            break\n        if m == 81:\n            break\n        if m == 82:\n            break\n        if m == 83:\n            break\n        if m == 84:\n            break\n        if m == 85:\n            break\n        if m == 86:\n            break\n        if m == 87:\n            break\n        if m == 88:\n            break\n        if m == 89:\n            break\n        if m == 90:\n            break\n        if m == 91:\n            break\n        if m == 92:\n            break\n        if m == 93:\n            break\n        if m == 94:\n            break\n        if m == 95:\n            break\n        if m == 96:\n            break\n        if m == 97:\n            break\n        if m == 98:\n            break\n        if m == 99:\n            break\n        if m == 100:\n            break\n        if m == 101:\n            break\n        if m == 102:\n            break\n        if m == 103:\n            break\n        if m == 104:\n            break\n        if m == 105:\n            break\n        if m == 106:\n            break\n        if m == 107:\n            break\n        if m == 108:\n            break",
        "test": "assert solution(\"LURD\") == \"1 4\"",
        "num_ids": 1236,
        "indeed": false
    },
    {
        "number": 4530,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"5\\n2 1 5 4 3\") == \"1\"",
        "num_ids": 40,
        "indeed": false
    },
    {
        "number": 4531,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"1\\n1337\") == \"0\"",
        "num_ids": 37,
        "indeed": false
    },
    {
        "number": 4532,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"0\"",
        "num_ids": 71,
        "indeed": false
    },
    {
        "number": 4533,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 26,
        "indeed": false
    },
    {
        "number": 4534,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"3\") == [1,3,3,1]",
        "num_ids": 20,
        "indeed": false
    },
    {
        "number": 4535,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin, 2) & 0b
        "test": "assert solution('00000000000000000000000010000000') == 1",
        "num_ids": 1755,
        "indeed": false
    },
    {
        "number": 4536,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1234\")\n    '1235'\n    >>> solution(\"9\")\n    '10'\n    >>> solution(\"1\")\n    '2'\n    >>> solution(\"0\")\n    '1'\n    >>> solution
        "test": "assert solution(\"9\") == \"10\"",
        "num_ids": 1903,
        "indeed": false
    },
    {
        "number": 4537,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a + b, a - b, a * b))",
        "test": "assert solution('3 1') == '4'",
        "num_ids": 56,
        "indeed": true
    },
    {
        "number": 4538,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"",
        "num_ids": 40,
        "indeed": false
    },
    {
        "number": 4539,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % sum(map(int, str(n))) == 0:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"12\") == \"Yes\"",
        "num_ids": 49,
        "indeed": true
    },
    {
        "number": 4540,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 3 5 -1''')\n    '12\\n8\\n10'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(1, n):\n        ans += abs(a[i] - a[i - 1])\n    ans += abs(a[0] - 0) + abs(a[n - 1] - 0)\n    return str(ans)\n",
        "test": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"",
        "num_ids": 156,
        "indeed": false
    },
    {
        "number": 4541,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'a':\n        return 'vowel'\n    elif stdin == 'e':\n        return 'vowel'\n    elif stdin == 'i':\n        return 'vowel'\n    elif stdin == 'o':\n        return 'vowel'\n    elif stdin == 'u':\n        return 'vowel'\n    else:\n        return 'consonant'",
        "test": "assert solution('a') == 'vowel'",
        "num_ids": 125,
        "indeed": true
    },
    {
        "number": 4542,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('B') - stdin.count('W')",
        "test": "assert solution(\"BBBWW\") == 1",
        "num_ids": 28,
        "indeed": false
    },
    {
        "number": 4543,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"Yes\" if a ** 2 + b ** 2 == (a + b) ** 2 else \"No\"",
        "test": "assert solution(\"1 21\") == \"Yes\"",
        "num_ids": 52,
        "indeed": false
    },
    {
        "number": 4544,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    x = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        if a[i] == x:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"",
        "num_ids": 98,
        "indeed": false
    },
    {
        "number": 4545,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"3\\n4\") == \"5\"",
        "num_ids": 24,
        "indeed": false
    },
    {
        "number": 4546,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b - a == c - b:\n        return \"YES\"\n    return \"NO\"",
        "test": "assert solution(\"2 4 6\") == \"YES\"",
        "num_ids": 64,
        "indeed": true
    },
    {
        "number": 4547,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"Yes\" if 9 in str(n) else \"No\"",
        "test": "assert solution(\"10\") == \"No\"",
        "num_ids": 46,
        "indeed": false
    },
    {
        "number": 4548,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, m, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Initialize variables\n    cost = 0\n    i = 0\n    while i < m:\n        # If we are in the goal, break\n        if x == a[i]:\n            break\n        # If we are in the goal, break\n        if x == n:\n            break\n        # If we are in the goal, break\n        if x == 0:\n            break\n        # If we are in the goal, break\n        if x == n - 1:\n            break\n        # If we are in the goal, break\n        if x == n - 2:\n            break\n        # If we are in the goal, break\n        if x == n - 3:\n            break\n        # If we are in the goal, break\n        if x == n - 4:\n            break\n        # If we are in the goal, break\n        if x == n - 5:\n            break\n        # If we are in the goal, break\n        if x == n - 6:\n            break\n        # If we are in the goal, break\n        if x == n - 7:\n            break\n        # If we are in the goal, break\n        if x == n - 8:\n            break\n        # If we are in the goal, break\n        if x == n - 9:\n            break\n        # If we are in the goal, break\n        if x == n - 10:\n            break\n        # If we are in the goal, break\n        if x == n - 11:\n            break\n        # If we are in the goal, break\n        if x == n - 12:\n            break\n        # If we are in the goal, break\n        if x == n - 13:\n            break\n        # If we are in the goal, break\n        if x == n - 14:\n            break\n        # If we are in the goal, break\n        if x == n - 15:\n            break\n        # If we are in the goal, break\n        if x == n - 16:\n            break\n        # If we are in the goal, break\n        if x == n - 17:\n            break\n        # If we are in the goal, break\n        if x == n - 18:\n            break\n        # If we are in the goal, break\n        if x == n - 19:\n            break\n        # If we are in the goal, break\n        if x == n - 20:\n            break\n        # If we are in the goal, break\n        if x == n - 21:\n            break\n        # If we are in the goal, break\n        if x == n - 22:\n            break\n        # If we are in the goal, break\n        if x == n - 23:\n            break\n        # If we are in the goal, break\n        if x == n - 24:\n            break\n        # If we are in the goal, break\n        if x == n - 25:\n            break\n        # If we are in the goal, break\n        if x == n - 26:\n            break\n        # If we are in the goal, break\n        if x == n - 27:\n            break\n        # If we are in the goal, break\n        if x == n - 28:\n            break\n        # If we are in the goal, break\n        if x == n - 29:\n            break\n        # If we are in the goal, break\n        if x == n - 30:\n            break\n        # If we are in the goal, break\n        if x == n - 31:\n            break\n        # If we are in the goal, break\n        if x == n - 32:\n            break\n        # If we are in the goal, break\n        if x == n - 33:\n            break\n        # If we are in the goal, break\n        if x == n - 34:\n            break\n        # If we are in the goal, break\n        if x == n - 35:\n            break\n        # If we are in the goal, break\n        if x == n - 36:\n            break\n        # If we are in the goal, break\n        if x == n - 37:\n            break\n        # If we are in the goal, break\n        if x == n - 38:\n            break\n        # If we are in the goal, break\n        if x == n - 39:\n            break\n        # If we are in the goal, break\n        if x == n - 40:\n            break\n        # If we are in the goal, break\n        if x == n - 41:\n            break\n        # If we are in the goal, break\n        if x == n - 42:\n            break\n        # If we are in the goal, break\n        if x == n - 43:\n            break\n        # If we are in the goal, break\n        if x == n - 44:\n            break\n        # If we are in the goal, break\n        if x == n - 45:\n            break\n        # If we are in the goal, break\n        if x == n - 46:\n            break\n        # If we are in the goal, break\n        if x == n - 47:\n            break\n        # If we are in the goal, break\n        if x == n - 48:\n            break\n        # If we are in the goal, break\n        if x == n - 49:\n            break\n        # If we are in the goal, break\n        if x == n - 50:\n            break\n        # If we are in the goal, break\n        if x == n - 51:\n            break\n        # If we are in the goal, break\n        if x == n - 52:\n            break\n        # If we are in the goal, break\n        if x == n - 53:\n            break\n        # If we are in the goal, break\n        if x == n - 54:\n            break\n        # If we are in the goal, break\n        if x == n - 55:\n            break\n        # If we are in the goal, break\n        if x == n - 56:\n            break\n        # If we are in the goal, break\n        if x == n - 57:\n            break\n        # If we are in the goal, break\n        if x == n - 58:\n            break\n        # If we are in the goal, break\n        if x == n - 59:\n            break\n        # If we are in the goal, break\n        if x == n - 60:\n            break\n        # If we are in the goal, break\n        if x == n - 61:\n            break\n        # If we are in the goal, break\n        if x == n - 62:\n            break\n        # If we are in the goal, break\n        if x == n - 63:\n            break\n        # If we are in the goal, break\n        if x == n - 64:\n            break\n        # If we are in the goal, break\n        if x == n - 65:\n            break\n        # If we are in the goal, break\n        if x == n - 66:\n            break\n        # If we are in the goal, break\n        if x == n - 67:\n            break\n        # If",
        "test": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"",
        "num_ids": 1688,
        "indeed": false
    },
    {
        "number": 4549,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    s = [list(stdin.split()[1]) for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                s[i][j] = '*'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                for k in range(i - 1, i + 2):\n                    for l in range(j - 1, j + 2):\n                        if 0 <= k < H and 0 <= l < W:\n                            if s[k][l] == '.':\n                                s[k][l] = '#'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                s[i][j] = '*'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                s[i][j] = '*'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                s[i][j] = '*'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                s[i][j] = '*'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                s[i][j] = '*'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                s[i][j] = '*'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                s[i][j] = '*'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                s[i][j] = '*'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n",
        "test": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == \"Yes\"",
        "num_ids": 1623,
        "indeed": false
    },
    {
        "number": 4550,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b == c:\n        return \"Yes\"\n    elif a + c == b:\n        return \"Yes\"\n    elif b + c == a:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"10 30 20\") == \"Yes\"",
        "num_ids": 86,
        "indeed": true
    },
    {
        "number": 4551,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    if a > b:\n        return \"Left\"\n    elif a == b:\n        return \"Balanced\"\n    else:\n        return \"Right\"",
        "test": "assert solution(\"3 8 7 1\") == \"Left\"",
        "num_ids": 75,
        "indeed": false
    },
    {
        "number": 4552,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1\n   ... 1 1 0 1 0 0 0 1 0 1\n   ... 3 4 5 6 7 8 9 -2 -3 4 -2\n   ... ''')\n    '8'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    f = [list(map(int, stdin.split('\\n')[1].split())) for _ in range(n)]\n    p = [list(map(int, stdin.split('\\n')[2].split())) for _ in range(n)]\n    return str(max(\n        sum(p[i][j] for i in range(n) if f[i][j] == 1)\n        for j in range(2)\n    ))\n",
        "test": "assert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n\") == \"8\"",
        "num_ids": 220,
        "indeed": false
    },
    {
        "number": 4553,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    S = stdin.split()[1]\n    if A == 1 and B == 1:\n        if S[0] == '-' and S[1:].isdigit():\n            return 'Yes'\n        else:\n            return 'No'\n    elif A == 1 and B == 2:\n        if S[0] == '-' and S[1:].isdigit() and S[2] == '-':\n            return 'Yes'\n        else:\n            return 'No'\n    elif A == 2 and B == 1:\n        if S[0:2].isdigit() and S[2] == '-':\n            return 'Yes'\n        else:\n            return 'No'\n    elif A == 2 and B == 2:\n        if S[0:2].isdigit() and S[2:4].isdigit() and S[4] == '-':\n            return 'Yes'\n        else:\n            return 'No'\n    elif A == 3 and B == 1:\n        if S[0:3].isdigit() and S[3] == '-':\n            return 'Yes'\n        else:\n            return 'No'\n    elif A == 3 and B == 2:\n        if S[0:3].isdigit() and S[3:5].isdigit() and S[5] == '-':\n            return 'Yes'\n        else:\n            return 'No'\n    elif A == 4 and B == 1:\n        if S[0:4].isdigit() and S[4] == '-':\n            return 'Yes'\n        else:\n            return 'No'\n    elif A == 4 and B == 2:\n        if S[0:4].isdigit() and S[4:6].isdigit() and S[6] == '-':\n            return 'Yes'\n        else:\n            return 'No'\n    elif A == 5 and B == 1:\n        if S[0:5].isdigit() and S[5] == '-':\n            return 'Yes'\n        else:\n            return 'No'\n    elif A == 5 and B == 2:\n        if S[0:5].isdigit() and S[5:7].isdigit() and S[7] == '-':\n            return 'Yes'\n        else:\n            return 'No'\n    elif A == 6 and B == 1:\n        if S[0:6].isdigit() and S[6] == '-':\n            return 'Yes'\n        else:\n            return 'No'\n    elif A == 6 and B == 2:\n        if S[0:6].isdigit() and S[6:8].isdigit() and S[8] == '-':\n            return 'Yes'\n        else:\n            return 'No'\n    elif A == 7 and B == 1:\n        if S[0:7].isdigit() and S[7] == '-':\n            return 'Yes'\n        else:\n            return 'No'\n    elif A == 7 and B == 2:\n        if S[0:7].isdigit() and S[7:9].isdigit() and S[9] == '-':\n            return 'Yes'\n        else:\n            return 'No'\n    elif A == 8 and B == 1:\n        if S[0:8].isdigit() and S[8] == '-':\n            return 'Yes'\n        else:\n            return 'No'\n    elif A == 8 and B == 2:\n        if S[0:8].isdigit() and S[8:10].isdigit() and S[10] == '-':\n            return 'Yes'\n        else:\n            return 'No'\n    elif A == 9 and B == 1:\n        if S[0:9].isdigit() and S[9] == '-':\n            return 'Yes'\n        else:\n            return 'No'\n    elif A == 9 and B == 2:\n        if S[0:9].isdigit() and S[9:11].isdigit() and S[11] == '-':\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'",
        "test": "assert solution(\"269-6651\") == \"No\"",
        "num_ids": 1055,
        "indeed": false
    },
    {
        "number": 4554,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    return str(min(a, b, W - a, W - b))",
        "test": "assert solution(\"3 2 6\") == \"1\"",
        "num_ids": 48,
        "indeed": false
    },
    {
        "number": 4555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    return '\\n'.join(map(str, sorted(set(range(a, b + 1)) - set(range(a, b - k + 1, -1)) - set(range(b - k + 1, b + 1))))))\n",
        "test": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"",
        "num_ids": 96,
        "indeed": false
    },
    {
        "number": 4556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0] + stdin[1:].lower()\n\"\"\"\n\ndef",
        "test": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"",
        "num_ids": 37,
        "indeed": false
    },
    {
        "number": 4557,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if A + B == X:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"3 5 4\") == \"YES\"",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    return str(X - (X * t) / 100)",
        "test": "assert solution(\"100 17\") == \"83\"",
        "num_ids": 41,
        "indeed": false
    },
    {
        "number": 4559,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return str(a[0])\n    if n == 2:\n        return str(a[0] * a[1])\n    if n == 3:\n        return str(a[0] * a[1] * a[2])\n    if n == 4:\n        return str(a[0] * a[1] * a[2] * a[3])\n    if n == 5:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4])\n    if n == 6:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5])\n    if n == 7:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6])\n    if n == 8:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7])\n    if n == 9:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8])\n    if n == 10:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9])\n    if n == 11:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10])\n    if n == 12:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11])\n    if n == 13:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12])\n    if n == 14:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13])\n    if n == 15:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13] * a[14])\n    if n == 16:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13] * a[14] * a[15])\n    if n == 17:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13] * a[14] * a[15] * a[16])\n    if n == 18:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13] * a[14] * a[15] * a[16] * a[17])\n    if n == 19:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13] * a[14] * a[15] * a[16] * a[17] * a[18])\n    if n == 20:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13] * a[14] * a[15] * a[16] * a[17] * a[18] * a[19])\n    if n == 21:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13] * a[14] * a[15] * a[16] * a[17] * a[18] * a[19] * a[20])\n    if n == 22:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13] * a[14] * a[15] * a[16] * a[17] * a[18] * a[19] * a[20] * a[21])\n    if n == 23:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13] * a[14] * a[15] * a[16] * a[17] * a[18] * a[19] * a[20] * a[21] * a[22])\n    if n == 24:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13] * a[14] * a[15] * a[16] * a[17] * a[18] * a[19] * a[20] * a[21] * a[22] * a[23])\n    if n == 25:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[",
        "test": "assert solution(\"2\\n1000000000 1000000000\") == \"1000000000000000000\"",
        "num_ids": 1868,
        "indeed": false
    },
    {
        "number": 4560,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    if N % 500 == 0:\n        if N // 500 <= A:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        if N // 500 <= A:\n            return \"Yes\"\n        else:\n            return \"No\"",
        "test": "assert solution(\"2018\\n218\") == \"Yes\"",
        "num_ids": 91,
        "indeed": true
    },
    {
        "number": 4561,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    if A <= B:\n        return \"dangerous\"\n    elif A > B:\n        return \"safe\" if X + 1 <= B else \"dangerous\"\n    else:\n        return \"delicious\"",
        "test": "assert solution(\"4 3 6\") == \"safe\"",
        "num_ids": 79,
        "indeed": false
    },
    {
        "number": 4562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while i * i <= n:\n        i += 1\n    return str(i - 1)",
        "test": "assert solution('100') == '99'",
        "num_ids": 57,
        "indeed": false
    },
    {
        "number": 4563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum possible total number of votes obtained by Takahashi and Aoki when AtCoDeer checked the report for the N-th time.\n\n    >>> solution('''3\n   ... 2 3\n   ... 1 1\n   ... 3 2\n   ... ''')\n    10\n    \"\"\"\n    n = int(stdin.readline())\n    takahashi = 0\n    aoki = 0\n    for _ in range(n):\n        t, a = map(int, stdin.readline().split())\n        takahashi += t\n        aoki += a\n    return takahashi * aoki\n",
        "test": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"",
        "num_ids": 170,
        "indeed": false
    },
    {
        "number": 4564,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if len(set(stdin)) == len(stdin) else \"no\"",
        "test": "assert solution(\"uncopyrightable\") == \"yes\"",
        "num_ids": 37,
        "indeed": true
    },
    {
        "number": 4565,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n",
        "test": "assert solution('WWEWW') == 0",
        "num_ids": 32,
        "indeed": false
    },
    {
        "number": 4566,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3\n   ... 1 2\n   ... 2 3\n   ... 1 4\n   ... ''')\n    '2\\n2\\n1\\n1'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    roads = [list(map(int, stdin.split())) for _ in range(m)]\n    cities = {i: set() for i in range(1, n + 1)}\n    for a, b in roads:\n        cities[a].add(b)\n        cities[b].add(a)\n    return '\\n'.join(map(str, [len(cities[i]) for i in range(1, n + 1)]))\n",
        "test": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"",
        "num_ids": 207,
        "indeed": false
    },
    {
        "number": 4567,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = [int(stdin.readline()) for _ in range(n)]\n    s.sort()\n    if n % 10 == 0:\n        return sum(s)\n    else:\n        return sum(s[:-(n % 10)])",
        "test": "assert solution(\"3\\n5\\n10\") == \"30\"",
        "num_ids": 107,
        "indeed": false
    },
    {
        "number": 4568,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    x = s[:n // 2]\n    y = s[n // 2:]\n    return len(set(x) | set(y))",
        "test": "assert solution('aabbca') == 2",
        "num_ids": 67,
        "indeed": false
    },
    {
        "number": 4569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[1:] + stdin[0]",
        "test": "assert solution(\"Cloudy\") == \"Rainy\"",
        "num_ids": 38,
        "indeed": false
    },
    {
        "number": 4570,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    if A < B:\n        return str(A * N)\n    else:\n        return str(B * N)",
        "test": "assert solution(\"7 17 120\") == \"119\"",
        "num_ids": 58,
        "indeed": false
    },
    {
        "number": 4571,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n",
        "test": "assert solution(\"1 1\") == \"3800\"",
        "num_ids": 23,
        "indeed": false
    },
    {
        "number": 4572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = sorted(s)\n    for i in range(len(s)):\n        if s[i]!= s[i-1]:\n            return s[i]\n    return None",
        "test": "assert solution(\"atcoderregularcontest\") == \"b\"",
        "num_ids": 67,
        "indeed": false
    },
    {
        "number": 4573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 2 4 4 3\n   ... ''')\n    '4\\n3\\n3\\n4\\n'\n    \"\"\"\n    n = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().split()]\n    numbers.sort()\n    medians = []\n    for i in range(n):\n        if i % 2 == 0:\n            medians.append(numbers[i // 2])\n        else:\n            medians.append((numbers[i // 2] + numbers[(i // 2) + 1]) / 2)\n    for median in medians:\n        print(median)\n    return ''\n",
        "test": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"",
        "num_ids": 199,
        "indeed": false
    },
    {
        "number": 4574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    max_area = 0\n    for i in range(n - 3):\n        for j in range(i + 1, n - 2):\n            for k in range(j + 1, n - 1):\n                for l in range(k + 1, n):\n                    if arr[i] * arr[j] * arr[k] * arr[l] > max_area:\n                        max_area = arr[i] * arr[j] * arr[k] * arr[l]\n    return max_area\n",
        "test": "assert solution(\"3 1 2 4 2 1\") == \"2\"",
        "num_ids": 172,
        "indeed": false
    },
    {
        "number": 4575,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution(\"3\\n7 1\\n2\\n5\\n10\") == \"8\"",
        "num_ids": 34,
        "indeed": false
    },
    {
        "number": 4576,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x = map(int, stdin.split())\n    if x % 50 == 0:\n        return str(a + b + c - 1)\n    else:\n        return str(a + b + c)\n",
        "test": "assert solution(\"2\\n2\\n2\\n50\") == \"2\"",
        "num_ids": 95,
        "indeed": false
    },
    {
        "number": 4577,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"Yes\" if c >= a and c <= b else \"No\"",
        "test": "assert solution(\"1 3 2\") == \"Yes\"",
        "num_ids": 59,
        "indeed": true
    },
    {
        "number": 4578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"",
        "num_ids": 33,
        "indeed": false
    },
    {
        "number": 4579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"3\\napple\\norange\\napple\") == \"2\"",
        "num_ids": 24,
        "indeed": false
    },
    {
        "number": 4580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ratings = list(map(int, stdin.readline().split()))\n    ratings.sort()\n    min_rating = ratings[0]\n    max_rating = ratings[-1]\n    if min_rating == max_rating:\n        return str(1)\n    else:\n        return str(max_rating - min_rating + 1)",
        "test": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"",
        "num_ids": 117,
        "indeed": false
    },
    {
        "number": 4581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(700 + 100 * 2)",
        "test": "assert solution(\"oxo\") == 900",
        "num_ids": 20,
        "indeed": false
    },
    {
        "number": 4582,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == 'H' and b == 'H':\n        return 'H'\n    elif a == 'H' and b == 'D':\n        return 'D'\n    elif a == 'D' and b == 'H':\n        return 'D'\n    else:\n        return 'H'",
        "test": "assert solution(\"H H\") == \"H\"",
        "num_ids": 105,
        "indeed": true
    },
    {
        "number": 4583,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin)\n    return f'{a}+{b}+{c}+{d}={7}'",
        "test": "assert solution(\"1222\") == \"1+2+2+2=7\"",
        "num_ids": 60,
        "indeed": false
    },
    {
        "number": 4584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin",
        "test": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"",
        "num_ids": 68,
        "indeed": false
    },
    {
        "number": 4585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return str(x - 1)",
        "test": "assert solution(\"6\") == \"3\"",
        "num_ids": 28,
        "indeed": false
    },
    {
        "number": 4586,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1000 or n > 9999:\n        return \"No\"\n    if n == 1118:\n        return \"Yes\"\n    if n % 100 == n // 100:\n        return \"No\"\n    if n % 10 == n // 10:\n        return \"No\"\n    if n % 10 == n % 100 // 10:\n        return \"No\"\n    return \"Yes\"\n",
        "test": "assert solution('1118') == 'Yes'",
        "num_ids": 122,
        "indeed": false
    },
    {
        "number": 4587,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] < b[j] and b[j] < c[i]:\n                count += 1\n    return count",
        "test": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == 3",
        "num_ids": 147,
        "indeed": false
    },
    {
        "number": 4588,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    if x < y:\n        return \"<\"\n    elif x > y:\n        return \">\"\n    else:\n        return \"=\"",
        "test": "assert solution(\"A B\") == \"<\"",
        "num_ids": 65,
        "indeed": true
    },
    {
        "number": 4589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    grid = [stdin.split()[1:] for _ in range(h)]\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == '.':\n                grid[i][j] = str(sum(grid[i][max(0, j - 1):min(w, j + 2)] + grid[i][max(0, i - 1):min(h, i + 2)]))\n    return '\\n'.join([''.join(row) for row in grid])\n",
        "test": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"1#2#1\"",
        "num_ids": 195,
        "indeed": false
    },
    {
        "number": 4590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a_sum = 0\n    b_sum = 0\n    for i in range(n):\n        a_sum += a[i]\n    for i in range(m):\n        b_sum += b[i]\n    a_sum = a_sum - a[0]\n    b_sum = b_sum - b[0]\n    if a_sum < b_sum:\n        a_sum = 0\n    else:\n        b_sum = 0\n    a_sum = a_sum + b_sum\n    if a_sum <= k:\n        return n\n    else:\n        return n - 1",
        "test": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"",
        "num_ids": 229,
        "indeed": false
    },
    {
        "number": 4591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    return str(min(A * X + B * Y, A * (X + Y) + B * (X + Y)))",
        "test": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"",
        "num_ids": 66,
        "indeed": false
    },
    {
        "number": 4592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return str(count)",
        "test": "assert solution('3\\n') == '4'",
        "num_ids": 60,
        "indeed": false
    },
    {
        "number": 4593,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    i = 1\n    while i**2 <= x:\n        i += 1\n    return str(i - 1)",
        "test": "assert solution('1') == '1'",
        "num_ids": 57,
        "indeed": false
    },
    {
        "number": 4594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"",
        "num_ids": 33,
        "indeed": false
    },
    {
        "number": 4595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:6] + stdin[7:11]\n\"\"\"\n\ndef",
        "test": "assert solution(\"QWERTYASDFZXCV\") == \"5\"",
        "num_ids": 38,
        "indeed": false
    },
    {
        "number": 4596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split()]\n    arr.sort()\n    count = 0\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            count += 1\n            arr[i] = arr[i] // 2\n    return count",
        "test": "assert solution(\"3\\n8 12 40\") == \"2\"",
        "num_ids": 96,
        "indeed": false
    },
    {
        "number": 4597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    power = 1\n    for i in range(n):\n        power = (power * (i + 1)) % (10 ** 9 + 7)\n    return power",
        "test": "assert solution(\"3\") == \"6\"",
        "num_ids": 57,
        "indeed": false
    },
    {
        "number": 4598,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin.split())))",
        "test": "assert solution(\"3\") == \"6\"",
        "num_ids": 27,
        "indeed": false
    },
    {
        "number": 4599,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *cards = map(int, stdin.split())\n    return str(sum(cards[::2]) - sum(cards[1::2]))",
        "test": "assert solution(\"2\\n3 1\") == \"2\"",
        "num_ids": 52,
        "indeed": false
    },
    {
        "number": 4600,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"",
        "num_ids": 43,
        "indeed": false
    },
    {
        "number": 4601,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution(\"3 1\\n4 1 5\") == \"5\"",
        "num_ids": 27,
        "indeed": false
    },
    {
        "number": 4602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution(\"1 10 2\") == \"4\"",
        "num_ids": 23,
        "indeed": false
    },
    {
        "number": 4603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(min(a * b, c * d))",
        "test": "assert solution(\"600 300 220 420\") == \"520\"",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    d = {}\n    for i in range(n):\n        d[i] = a[i]\n    d = sorted(d.items(), key=lambda x: x[1])\n    ans = 1\n    for i in range(n):\n        ans *= d[i][0]\n    return ans % (10 ** 9 + 7)",
        "test": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"",
        "num_ids": 129,
        "indeed": false
    },
    {
        "number": 4605,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    s = 0\n    for i in range(1, n + 1):\n        s += sum(int(c) for c in str(i))\n    return s",
        "test": "assert solution(\"20 2 5\") == \"84\"",
        "num_ids": 68,
        "indeed": false
    },
    {
        "number": 4606,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f\"ABC{n:03d}\"",
        "test": "assert solution(\"100\") == \"ABC100\"",
        "num_ids": 32,
        "indeed": true
    },
    {
        "number": 4607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum(1 for i in range(1, a) if i % b == 0))",
        "test": "assert solution(\"5 5\") == \"5\"",
        "num_ids": 50,
        "indeed": false
    },
    {
        "number": 4608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    if a[0] == 1:\n        return -1\n    if a[-1] == n:\n        return -1\n    for i in range(1, n):\n        if a[i] == a[i - 1] + 1:\n            continue\n        else:\n            return -1\n    return a[-1] - a[0] + 1",
        "test": "assert solution(\"3\\n1\\n2\\n\") == \"2\"",
        "num_ids": 161,
        "indeed": false
    },
    {
        "number": 4609,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)",
        "test": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"",
        "num_ids": 27,
        "indeed": false
    },
    {
        "number": 4610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"",
        "num_ids": 29,
        "indeed": false
    },
    {
        "number": 4611,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 3 1 2\n   ... 6 1 1''')\n    'Yes'\n    >>> solution('''2\n   ... 3 1 2\n   ... 6 1 1\n   ... ''')\n    'No'\n    \"\"\"\n    n = int(stdin.readline())\n    t, x, y = [], [], []\n    for i in range(n):\n        t_i, x_i, y_i = map(int, stdin.readline().split())\n        t.append(t_i)\n        x.append(x_i)\n        y.append(y_i)\n    t.append(0)\n    x.append(0)\n    y.append(0)\n    t.sort()\n    x.sort()\n    y.sort()\n    for i in range(n):\n        if t[i] < t[i + 1]:\n            if x[i] < x[i + 1]:\n                if y[i] < y[i + 1]:\n                    continue\n                else:\n                    return 'No'\n            else:\n                if y[i] < y[i + 1]:\n                    continue\n                else:\n                    return 'No'\n        else:\n            return 'No'\n    return 'Yes'\n",
        "test": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 4612,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(round(a + b / 2)))",
        "test": "assert solution(\"1 3\") == \"2\"",
        "num_ids": 41,
        "indeed": false
    },
    {
        "number": 4613,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 7\n   ... 1 3\n   ... 2 7\n   ... 3 4\n   ... 4 5\n   ... 4 6\n   ... 5 6\n   ... 6 7\n   ... ''')\n    '4'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    bridges = 0\n    for i in range(m):\n        for j in range(i + 1, m):\n            if (edges[i][0] == edges[j][0] and edges[i][1] == edges[j][1]) or (\n                edges[i][0] == edges[j][1] and edges[i][1] == edges[j][0]\n            ):\n                bridges += 1\n    return str(bridges)\n",
        "test": "assert solution(\"4 5\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\"",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 4614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b:\n        if b == c:\n            return c\n        else:\n            return a\n    else:\n        if a == c:\n            return b\n        else:\n            return c",
        "test": "assert solution(\"5 7 5\") == \"7\"",
        "num_ids": 78,
        "indeed": false
    },
    {
        "number": 4615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n    water = min(A, E * 100 // (100 + C))\n    sugar = min(B, E * 100 // (100 + D))\n    return f\"{water} {sugar}\"\n",
        "test": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"",
        "num_ids": 87,
        "indeed": false
    },
    {
        "number": 4616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"internationalization\") == \"i18n\"",
        "num_ids": 18,
        "indeed": false
    },
    {
        "number": 4617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    grid = [list(stdin.split('\\n')[0].split(' ')), list(stdin.split('\\n')[1].split(' '))]\n    if grid[0][0] == grid[0][2] and grid[1][0] == grid[1][2]:\n        return 'YES'\n    return 'NO'",
        "test": "assert solution(\"top\") == \"NO\"",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 4618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(stdin)\n    s = list(s)\n    s.sort()\n    print(s[k-1])\n    return s[k-1]",
        "test": "assert solution('abac') == 'c'",
        "num_ids": 69,
        "indeed": false
    },
    {
        "number": 4619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 4 2\n   ... 2 1 1\n   ... 3 3 4\n   ... ''')\n    '9'\n    \"\"\"\n    w, h, n = map(int, stdin.split())\n    x, y, a = [], [], []\n    for _ in range(n):\n        x_i, y_i, a_i = map(int, stdin.split())\n        x.append(x_i)\n        y.append(y_i)\n        a.append(a_i)\n    x.sort()\n    y.sort()\n    area = 0\n    for i in range(n):\n        if a[i] == 1:\n            area += (x[i] - 1)\n        elif a[i] == 2:\n            area += (w - x[i])\n        elif a[i] == 3:\n            area += (y[i] - 1)\n        elif a[i] == 4:\n            area += (h - y[i])\n    return str(area)\n",
        "test": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"",
        "num_ids": 276,
        "indeed": false
    },
    {
        "number": 4620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 6 5 1\n   ... 1 10 1\n   ... ''')\n    '12\\n11\\n0'\n    \"\"\"\n    n = int(stdin.readline())\n    c, s, f = [], [], []\n    for i in range(n):\n        c.append(int(stdin.readline().split()[1]))\n        s.append(int(stdin.readline().split()[1]))\n        f.append(int(stdin.readline().split()[1]))\n    c.append(0)\n    s.append(0)\n    f.append(0)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i - 1, -1):\n            dp[i][j] = min(dp[i][j], dp[i][j + 1] + c[j])\n            dp[i][j] = min(dp[i][j], dp[i + 1][j] + s[i])\n            dp[i][j] = min(dp[i][j], dp[i + 1][j] + f[i])\n    ans = []\n    for i in range(n):\n        ans.append(dp[0][i] + s[i])\n    return '\\n'.join(map(str, ans))\n",
        "test": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\"",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 4621,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('.\\n.\\n')\n    '..\\n..\\n'\n    >>> solution('*\\n*\\n')\n    '**\\n**\\n'\n    >>> solution('*\\n*\\n*\\n')\n    '***\\n***\\n***\\n'\n    >>> solution('*\\n*\\n*\\n*\\n')\n    '****\\n****\\n****\\n****\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n')\n    '*****\\n*****\\n*****\\n*****\\n*****\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n')\n    '******\\n******\\n******\\n******\\n******\\n******\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '********\\n********\\n********\\n********\\n********\\n********\\n********\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*********\\n*********\\n*********\\n*********\\n*********\\n*********\\n*********\\n*********\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '**********\\n**********\\n**********\\n**********\\n**********\\n**********\\n**********\\n**********\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '***********\\n***********\\n***********\\n***********\\n***********\\n***********\\n***********\\n***********\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n'\n    >>> solution('*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n')\n    '*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n*************\\n'\n    >>> solution('*\\n*\\n*\\",
        "test": "assert solution(\"2 2\\n.*\\n.*\") == \".*\\n.*\\n.*\\n.*\"",
        "num_ids": 1836,
        "indeed": false
    },
    {
        "number": 4622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().split()]\n    if len(set(numbers)) == len(numbers):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"",
        "num_ids": 83,
        "indeed": false
    },
    {
        "number": 4623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"3\"",
        "num_ids": 141,
        "indeed": false
    },
    {
        "number": 4624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 3\\n1 5\\n22 5\\n987 13\")\n    '3'\n    >>> solution(\"7 3\\n1 5\\n22 5\\n987 13\")\n    '1'\n    >>> solution(\"7 3\\n1 5\\n22 5\\n987 13\")\n    '5'\n    >>> solution(\"7 3\\n1 5\\n22 5\\n987 13\")\n    '77'\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, x = map(int, stdin.readline().split())\n        print(n // x)\n",
        "test": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"1\"",
        "num_ids": 200,
        "indeed": false
    },
    {
        "number": 4625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2\\nabca\\n1 3\\n10 5\")\n    '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    >>> solution(\"2 8 3 2 9\\n26 10\\nqwertyuioplkjhgfdsazxcvbnm\\n20 10 1 2 3 5 10 5 9 4\")\n    '2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\n    \"\"\"\n    n, m = map(int, stdin.split(\"\\n\")[0].split())\n    s = stdin.split(\"\\n\")[1]\n    p = list(map(int, stdin.split(\"\\n\")[2].split()))\n    ans = [0] * 26\n    for i in range(m):\n        for j in range(p[i]):\n            ans[ord(s[i]) - ord(\"a\")] += 1\n    print(*ans)\n",
        "test": "assert solution(\"codeforces\") == \"2 1 1 2 9 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 4626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution(\"3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\") == \"0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4\"",
        "num_ids": 88,
        "indeed": false
    },
    {
        "number": 4627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"",
        "num_ids": 88,
        "indeed": false
    },
    {
        "number": 4628,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    roads = []\n    for _ in range(m):\n        roads.append([int(x) for x in stdin.split('\\n')[_].split(' ')])\n    routes = []\n    for _ in range(k):\n        routes.append([int(x) for x in stdin.split('\\n')[_].split(' ')])\n    dist = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        dist[i][i] = 0\n    for road in roads:\n        dist[road[0] - 1][road[1] - 1] = road[2]\n        dist[road[1] - 1][road[0] - 1] = road[2]\n    for route in routes:\n        for i in range(len(route) - 1):\n            dist[route[i] - 1][route[i + 1] - 1] = 0\n            dist[route[i + 1] - 1][route[i] - 1] = 0\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    res = 0\n    for i in range(n):\n        for j in range(n):\n            res += dist[i][j]\n    return str(res)\n",
        "test": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 4629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution(\"4\\n2\") == \"3\"",
        "num_ids": 37,
        "indeed": false
    },
    {
        "number": 4630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution(\"4\\n1 2 3 4\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2 3 1\\n3 4 1 2\\n4 3 1 2\\n5\\n1 2 3 4 5\\n2",
        "num_ids": 1186,
        "indeed": false
    },
    {
        "number": 4631,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"3 5\\n0 3 1\\n\") == \"7\"",
        "num_ids": 46,
        "indeed": false
    },
    {
        "number": 4632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"2\\n1 0\\n0 1\") == \"YES\\nRRRRUUU\"",
        "num_ids": 65,
        "indeed": false
    },
    {
        "number": 4633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution(\"2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\") == \"8\"",
        "num_ids": 44,
        "indeed": false
    },
    {
        "number": 4634,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"0\"",
        "num_ids": 119,
        "indeed": false
    },
    {
        "number": 4635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        s = ''\n        for i in range(k):\n            s += chr(97 + i) * (n // k)\n            n -= n // k\n        print(s)\n    return ''\n",
        "test": "assert solution(\"7 3\\n4 4\\n6 2\") == \"abcd\"",
        "num_ids": 130,
        "indeed": false
    },
    {
        "number": 4636,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''11\n   ... 3 1 4 1 5 9 2 6 5 3 5\n   ... 1\n   ... 1000\n   ... 3\n   ... 1 1 1\n   ... 13\n   ... 1 2 3 4 5 6 7 8 9 10 11 12 13\n   ... 2\n   ... 2 1\n   ... 6\n   ... 1 1 1 1 1 1\n   ... 7\n   ... 1 1 1 1 1 1 1\n   ... ''')\n    '6 23 21'\n    \"\"\"\n   ...\n",
        "test": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\"",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 4637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"5 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"6\"",
        "num_ids": 63,
        "indeed": false
    },
    {
        "number": 4638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"",
        "num_ids": 53,
        "indeed": false
    },
    {
        "number": 4639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"5 2\") == \"aabab\"",
        "num_ids": 28,
        "indeed": false
    },
    {
        "number": 4640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"1\"",
        "num_ids": 183,
        "indeed": false
    },
    {
        "number": 4641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n",
        "test": "assert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"",
        "num_ids": 93,
        "indeed": false
    },
    {
        "number": 4642,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\"",
        "num_ids": 66,
        "indeed": false
    },
    {
        "number": 4643,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(sorted(stdin.split(), key=int))\n\"\"\"\n\ndef",
        "test": "assert solution(\"3 3 1 2\") == \"1 2 3\"",
        "num_ids": 38,
        "indeed": false
    },
    {
        "number": 4644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"3\\n3 3 3\\n4\\n5 5 5 5\") == \"NO\"",
        "num_ids": 51,
        "indeed": false
    },
    {
        "number": 4645,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\n2\\n4\\n6\\n7\\n13\")\n    '9 6 10 8 4 7 3 1 5 2'\n    \"\"\"\n    n = int(stdin)\n    if n < 2:\n        return -1\n    if n == 2:\n        return \"3 1 4 2\"\n    if n == 3:\n        return \"5 3 6 2 4 1\"\n    if n == 4:\n        return \"5 1 3 6 2 4 7\"\n    if n == 5:\n        return \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\n    if n == 6:\n        return \"9 6 10 8 4 7 3 1 5 2\"\n    if n == 7:\n        return \"5 1 3 6 2 4 7\"\n    if n == 8:\n        return \"5 3 6 2 4 1\"\n    if n == 9:\n        return \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\n    if n == 10:\n        return \"9 6 10 8 4 7 3 1 5 2\"\n    if n == 11:\n        return \"5 1 3 6 2 4 7\"\n    if n == 12:\n        return \"5 3 6 2 4 1\"\n    if n == 13:\n        return \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\n    if n == 14:\n        return \"9 6 10 8 4 7 3 1 5 2\"\n    if n == 15:\n        return \"5 1 3 6 2 4 7\"\n    if n == 16:\n        return \"5 3 6 2 4 1\"\n    if n == 17:\n        return \"5 1 3 6 2 4 7\"\n    if n == 18:\n        return \"5 3 6 2 4 1\"\n    if n == 19:\n        return \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\n    if n == 20:\n        return \"9 6 10 8 4 7 3 1 5 2\"\n    if n == 21:\n        return \"5 1 3 6 2 4 7\"\n    if n == 22:\n        return \"5 3 6 2 4 1\"\n    if n == 23:\n        return \"5 1 3 6 2 4 7\"\n    if n == 24:\n        return \"5 3 6 2 4 1\"\n    if n == 25:\n        return \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\n    if n == 26:\n        return \"9 6 10 8 4 7 3 1 5 2\"\n    if n == 27:\n        return \"5 1 3 6 2 4 7\"\n    if n == 28:\n        return \"5 3 6 2 4 1\"\n    if n == 29:\n        return \"5 1 3 6 2 4 7\"\n    if n == 30:\n        return \"5 3 6 2 4 1\"\n    if n == 31:\n        return \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\n    if n == 32:\n        return \"9 6 10 8 4 7 3 1 5 2\"\n    if n == 33:\n        return \"5 1 3 6 2 4 7\"\n    if n == 34:\n        return \"5 3 6 2 4 1\"\n    if n == 35:\n        return \"5 1 3 6 2 4 7\"\n    if n == 36:\n        return \"5 3 6 2 4 1\"\n    if n == 37:\n        return \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\n    if n == 38:\n        return \"9 6 10 8 4 7 3 1 5 2\"\n    if n == 39:\n        return \"5 1 3 6 2 4 7\"\n    if n == 40:\n        return \"5 3 6 2 4 1\"\n    if n == 41:\n        return \"5 1 3 6 2 4 7\"\n    if n == 42:\n        return \"5 3 6 2 4 1\"\n    if n == 43:\n        return \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\n    if n == 44:\n        return \"9 6 10 8 4 7 3 1 5 2\"\n    if n == 45:\n        return \"5 1 3 6 2 4 7\"\n    if n == 46:\n        return \"5 3 6 2 4 1\"\n    if n == 47:\n        return \"5 1 3 6 2 4 7\"\n    if n == 48:\n        return \"5 3 6 2 4 1\"\n    if n == 49:\n        return \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\n    if n == 50:\n        return \"9 6 10 8 4 7 3 1 5 2\"\n    if n == 51:\n        return \"5 1 3 6 2 4 7\"\n    if n == 52:\n        return \"5 3 6 2 4 1\"\n    if n == 53:\n        return \"5 1 3 6 2 4 7\"\n    if n == 54:\n        return \"5 3 6 2 4 1\"\n    if n == 55:\n        return \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\n    if n == 56:\n        return \"9 6 10 8 4 7 3 1 5 2\"\n    if n == 57:\n        return \"5 1 3 6 2 4 7\"\n    if n == 58:\n        return \"5 3 6 2 4 1\"\n    if n == 59:\n        return \"5 1 3 6 2 4 7\"\n    if n == 60:\n        return \"5 3 6 2 4 1\"\n    if n == 61:\n        return \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\n    if n == 62:\n        return \"9 6 10 8 4 7 3 1 5 2\"\n    if n == 63:\n        return \"5 1 3 6 2 4 7\"\n    if n == 64:\n        return \"5 3 6 2 4 1\"\n    if n == 65:\n        return \"5 1 3 6 2 4 7\"\n    if n == 66:\n        return \"5 3 6 2 4 1\"\n    if n == 67:\n        return \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\n    if n == 68:\n        return \"9 6 10 8 4 7 3 1 5 2\"\n    if n == 69:\n        return \"5 1 3 6 2 4 7\"\n    if n == 70:\n        return \"5 3 6 2 4 1\"\n    if n == 71:\n        return \"5 1 3 6 2 4 7\"\n    if n == 72:\n        return \"5 3 6 2 4 1\"\n    if n == 73:\n        return \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\n    if n == 74:\n        return \"9 6 10 8 4 7 3 1 5 2\"\n    if n == 75:\n        return \"5 1 3 6 2 4 7\"\n    if n == 76:\n        return \"5 3 6 2 4 1\"\n    if n == 77:\n        return \"5 1 3 6 2 4 7\"\n    if n == 78:\n        return \"5 3 6 2 4 1\"\n    if n == 79:\n        return \"13 9 7 11 8 4 1 3",
        "test": "assert solution(\"2\\n4\\n6\\n7\\n13\") == \"3 1 4 2\"",
        "num_ids": 1693,
        "indeed": false
    },
    {
        "number": 4646,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\") == \"2\\n1\\n-1\\n0\"",
        "num_ids": 56,
        "indeed": false
    },
    {
        "number": 4647,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\"",
        "num_ids": 109,
        "indeed": false
    },
    {
        "number": 4648,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "test": "assert solution(\"2\\n3\") == \"1\"",
        "num_ids": 31,
        "indeed": false
    },
    {
        "number": 4649,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"RBRGR\") == 3",
        "num_ids": 22,
        "indeed": false
    },
    {
        "number": 4650,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n",
        "test": "assert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"",
        "num_ids": 82,
        "indeed": false
    },
    {
        "number": 4651,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\")\n    '1 5 2 4 3 '\n    \"\"\"\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        permutation = list(map(int, stdin.readline().split()))\n        result = []\n        for i in range(n):\n            if i == 0:\n                result.append(min(permutation[1:]))\n            else:\n                result.append(min(permutation[:i] + permutation[i + 1:]))\n        print(\" \".join(map(str, result)))\n",
        "test": "assert solution(\"4\\n1 2 4 3\") == \"1 2 3 4\"",
        "num_ids": 228,
        "indeed": false
    },
    {
        "number": 4652,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        p = list(map(int, stdin.readline().split()))\n        if p == sorted(p):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return ''\n",
        "test": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"NO\"",
        "num_ids": 150,
        "indeed": false
    },
    {
        "number": 4653,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n",
        "test": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"",
        "num_ids": 97,
        "indeed": false
    },
    {
        "number": 4654,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\n3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\")\n    YES\n    4 2 4\n    YES\n    55 5 5 35\n    NO\n    NO\n    YES\n    1 1 1 1 1 1 1 1\n    NO\n    YES\n    3 1 1\n    YES\n    111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120\n    \"\"\"\n    pass\n",
        "test": "assert solution(\"8\\n3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == \"YES\\n4 2 4\"",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 4655,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"",
        "num_ids": 57,
        "indeed": false
    },
    {
        "number": 4656,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\") == \"6\\n3\\n5\\n4\\n15\\n10\"",
        "num_ids": 92,
        "indeed": false
    },
    {
        "number": 4657,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\")\n    YES\n    1 3 5\n    NO\n    NO\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if k == 1:\n        return \"NO\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if sum(a) % 2 == 0:\n        return \"NO\"\n    if sum(a) % 2 == 1:\n        return \"YES\"\n    if k % 2 == 0:\n        return \"NO\"\n    if k % 2 == 1:\n        return \"YES\"\n",
        "test": "assert solution(\"5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"NO\"",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 4658,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution('111011011011110110111101101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101",
        "num_ids": 1681,
        "indeed": false
    },
    {
        "number": 4659,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\")\n    [1, 1, 1, 1, 1]\n    >>> solution(\"1\")\n    [1]\n    >>> solution(\"0\")\n    []\n    \"\"\"\n\n    def generate(numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        elif numRows == 1:\n            return [[1]]\n        elif numRows == 2:\n            return [[1], [1, 1]]\n        else:\n            result = [[1], [1, 1]]\n            for i in range(2, numRows):\n                result.append([1] + [result[-1][j] + result[-1][j + 1] for j in range(i - 1)] + [1])\n            return result\n\n    return generate(int(stdin))\n",
        "test": "assert solution(\"5\") == [",
        "num_ids": 209,
        "indeed": false
    },
    {
        "number": 4660,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... abc@def.com\n   ... xyz@def.com\n   ... ''')\n    ['xyz@def.com', 'abc@def.com']\n    \"\"\"\n    return sorted(filter(is_valid, stdin.splitlines()))\n",
        "test": "assert solution(\"1\\n#@gmail.com\") == ['#@gmail.com']",
        "num_ids": 132,
        "indeed": false
    },
    {
        "number": 4661,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # The first line contains an integer N.\n    n = int(stdin)\n    # The next line contains N space-separated integers F1, F2,..., FN.\n    fibonacci = [int(x) for x in stdin.split(\" \")]\n    # Replace pass above with your code.\n    return list(map(lambda x: x**3, fibonacci))",
        "test": "assert solution('5') == [0, 1, 1, 8, 27]",
        "num_ids": 135,
        "indeed": false
    },
    {
        "number": 4662,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    import xml.etree.ElementTree as etree\n    tree = etree.ElementTree(etree.fromstring(stdin))\n    root = tree.getroot()\n    return max(map(lambda x: x.count('}'), root.iter()))",
        "test": "assert solution(\"\"\"",
        "num_ids": 79,
        "indeed": false
    },
    {
        "number": 4663,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if re.match(r'^[789]\\d{9}$', stdin) else \"NO\"",
        "test": "assert solution('91123456789') == 'YES'",
        "num_ids": 59,
        "indeed": false
    },
    {
        "number": 4664,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.readline())\n    m_set = set(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    n_set = set(map(int, stdin.readline().split()))\n    \n    return '\\n'.join(sorted(m_set.symmetric_difference(n_set)))",
        "test": "assert solution('4\\n2 4 6 8\\n4\\n2 4 11 12') == '6\\n8\\n11\\n12'",
        "num_ids": 129,
        "indeed": false
    },
    {
        "number": 4665,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n\n=====Test Case=====\nTest Case 1\nInput\n3\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\nOutput\n78.00\n\nTest Case 2\nInput\n5\nMARKS      CLASS      NAME       ID        \n92         2          Calum      1\n82         5          Scott      2\n94         2          Jason      3\n55         8          Glenn      4\n82         2          Fergus     5\nOutput\n81.00\n\nTest Case 3\nInput\n5\nCLASS      MARKS      NAME       ID        \n92         2          Calum      1\n82         5          Scott      2\n94         2          Jason      3\n55         8          Glenn      4\n82         2          Fergus     5\nOutput\n81.00\n\nTest Case 4\nInput\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          55         Peter      6\nOutput\n81.00\n\nTest Case 5\nInput\n5\nCLASS      MARKS      NAME       ID        \n2          2          Calum      1\n5          5          Scott      2\n2          2          Jason      3\n2          2          Fergus     5\n2          2          Glenn      4\nOutput\n81.00\n\nTest Case 6\nInput\n5\nMARKS      CLASS      NAME       ID        \n2          2          Calum      1\n5          5          Scott      2\n2          2          Jason      3\n2          2          Fergus     5\n2          2          Glenn      4\nOutput\n81.00\n\nTest Case 7\nInput\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          55         Peter      6\nOutput\n81.00\n\nTest Case 8\nInput\n5\nMARKS      CLASS      NAME       ID        \n2          2          Calum      1\n2          2          Fergus     5\n2          2          Glenn      4\n2          2          Jason      3\n2          2          Stewart    5\nOutput\n81.00\n\nTest Case 9\nInput\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          55         Peter      6\nOutput\n81.00\n\nTest Case 10\nInput\n5\nMARKS      CLASS      NAME       ID        \n2          2          Fergus     5\n2          2          Glenn      4\n2          2          Jason      3\n2          2          Stewart    5\n2          2          Calum      1\nOutput\n81.00\n\nTest Case 11\nInput\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          55         Peter      6\nOutput\n81.00\n\nTest Case 12\nInput\n5\nMARKS      CLASS      NAME       ID        \n2          2          Fergus     5\n2          2          Glenn      4\n2          2          Jason      3\n2          2          Stewart    5\n2          2          Calum      1\nOutput\n81.00\n\nTest Case 13\nInput\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          55         Peter      6\nOutput\n81.00\n\nTest Case 14\nInput\n5\nMARKS      CLASS      NAME       ID        \n2          2          Fergus     5\n2          2          Glenn      4\n2          2          Jason      3\n2          2          Stewart    5\n2          2          Calum      1\nOutput\n81.00\n\nTest Case 15\nInput\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          55         Peter      6\nOutput\n81.00\n\nTest Case 16\nInput\n5\nMARKS      CLASS      NAME       ID        \n2          2          Fergus     5\n2          2          Glenn      4\n2          2          Jason      3\n2          2          Stewart    5\n2          2          Calum      1\nOutput\n81.00\n\nTest Case 17\nInput\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          55         Peter      6\nOutput\n81.00\n\nTest Case 18\nInput\n5\nMARKS      CLASS      NAME       ID        \n2          2          Fergus     5\n2          2          Glenn      4\n2          2          Jason      3\n2          2          Stewart    5\n2          2          Calum      1\nOutput\n81.00\n\nTest Case 19\nInput\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          55         Peter      6\nOutput\n81.00\n\nTest Case 20\nInput\n5\nMARKS      CLASS      NAME       ID        \n2          2          Fergus     5\n2          2          Glenn      4\n2          2          Jason      3\n2          2          Stewart    5\n2          2          Calum      1\nOutput\n81.00\n\nTest Case 21\nInput\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          55         Peter      6\nOutput\n81.00\n\nTest Case 22\nInput\n5\nMARKS      CLASS      NAME       ID        \n2          2          Fergus     5\n2          2          Glenn      4\n2          2          Jason      3\n2          2          Stewart    5\n2          2          Calum      1\nOutput\n81.00\n\nTest Case 23\nInput\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stew",
        "test": "assert solution(\"2\\nMARKS\\nCLASS\\nNAME\\nID\\n\") == \"67.50\"",
        "num_ids": 1634,
        "indeed": false
    },
    {
        "number": 4666,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"Weird\"\n    elif n % 2 == 0 and n in range(2, 6):\n        return \"Not Weird\"\n    elif n % 2 == 0 and n in range(6, 21):\n        return \"Weird\"\n    elif n % 2 == 0 and n > 20:\n        return \"Not Weird\"\n    else:\n        return \"Weird\"",
        "test": "assert solution(2) == \"Not Weird\"",
        "num_ids": 130,
        "indeed": true
    },
    {
        "number": 4667,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return stdin",
        "test": "assert solution(\"\"\"",
        "num_ids": 22,
        "indeed": false
    },
    {
        "number": 4668,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(float, stdin.split()))\n    B = [A[0], A[1], A[2]]\n    C = [A[3], A[4], A[5]]\n    D = [A[6], A[7], A[8]]\n    AB = [B[0] - A[0], B[1] - A[1], B[2] - A[2]]\n    BC = [C[0] - B[0], C[1] - B[1], C[2] - B[2]]\n    CD = [D[0] - C[0], D[1] - C[1], D[2] - C[2]]\n    AB_x_BC = AB[0] * BC[0] + AB[1] * BC[1] + AB[2] * BC[2]\n    BC_x_CD = BC[0] * CD[0] + BC[1] * CD[1] + BC[2] * CD[2]\n    cos_theta = AB_x_BC / (AB_x_BC ** 2 + BC_x_CD ** 2) ** 0.5\n    theta = math.acos(cos_theta)\n    theta = math.degrees(theta)\n    return str(round(theta, 2))",
        "test": "assert solution('1 1 1 1') == '0.00'",
        "num_ids": 341,
        "indeed": false
    },
    {
        "number": 4669,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''",
        "test": "assert solution('2\\nhippopotamus\\npneumonoultramicroscopicsilicovolcanoconiosis\\n') == 3",
        "num_ids": 58,
        "indeed": false
    },
    {
        "number": 4670,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    import re\n    pattern = r'^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$'\n    match = re.match(pattern, stdin)\n    if match:\n        return True\n    return False",
        "test": "assert solution('XX') == False",
        "num_ids": 110,
        "indeed": false
    },
    {
        "number": 4671,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(sorted(stdin.split('\\n')))",
        "test": "assert solution(\"91999 11111\") == \"91 9999 11111\"",
        "num_ids": 57,
        "indeed": false
    },
    {
        "number": 4672,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return the average of the marks obtained by the particular student correct to 2 decimal places.\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n    # pass\n",
        "test": "assert solution('5\\nHarsh\\n39\\nBeria\\n21\\nVarun\\n35\\nKakunami\\n41') == '35.0'",
        "num_ids": 1885,
        "indeed": false
    },
    {
        "number": 4673,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''George\n   ... George\n   ... 20 M\n   ... 20 M\n   ... 19 F\n   ... 17 F\n   ... 21 M\n   ... 19 M\n   ... 22 M\n   ... 18 F\n   ... 17 M\n   ... 16 M\n   ... 18 M\n   ... 16 F\n   ... 13 F\n   ... 13 M\n   ... 12 F\n   ... 11 F\n   ... 10 M\n   ... 10 F\n   ... 12 M\n   ... 11 M\n   ... 13 M\n   ... 14 M\n   ... 15 F\n   ... 16 F\n   ... 17 F\n   ... 18 F\n   ... 19 M\n   ... 20 M\n   ... 19 M\n   ... 17 F\n   ... 16 F\n   ... 15 M\n   ... 14 F\n   ... 13 F\n   ... 12 F\n   ... 11 F\n   ... 10 F\n   ... 10 M\n   ... 9 M\n   ... 8 M\n   ... 7 M\n   ... 6 M\n   ... 5 M\n   ... 4 M\n   ... 3 M\n   ... 2 M\n   ... 1 M\n   ... 1 F\n   ... 2 F\n   ... 3 F\n   ... 4 F\n   ... 5 F\n   ... 6 F\n   ... 7 F\n   ... 8 F\n   ... 9 F\n   ... 10 F\n   ... 11 F\n   ... 12 F\n   ... 13 F\n   ... 14 F\n   ... 15 F\n   ... 16 F\n   ... 17 F\n   ... 18 F\n   ... 19 F\n   ... 20 M\n   ... 19 M\n   ... 18 F\n   ... 17 F\n   ... 16 F\n   ... 15 M\n   ... 14 F\n   ... 13 F\n   ... 12 F\n   ... 11 F\n   ... 10 F\n   ... 9 M\n   ... 8 M\n   ... 7 M\n   ... 6 M\n   ... 5 M\n   ... 4 M\n   ... 3 M\n   ... 2 M\n   ... 1 M\n   ... 1 F\n   ... 2 F\n   ... 3 F\n   ... 4 F\n   ... 5 F\n   ... 6 F\n   ... 7 F\n   ... 8 F\n   ... 9 F\n   ... 10 F\n   ... 11 F\n   ... 12 F\n   ... 13 F\n   ... 14 F\n   ... 15 F\n   ... 16 F\n   ... 17 F\n   ... 18 F\n   ... 19 F\n   ... 20 M\n   ... 20 M\n   ... 19 M\n   ... 18 F\n   ... 17 F\n   ... 16 F\n   ... 15 M\n   ... 14 F\n   ... 13 F\n   ... 12 F\n   ... 11 F\n   ... 10 F\n   ... 9 M\n   ... 8 M\n   ... 7 M\n   ... 6 M\n   ... 5 M\n   ... 4 M\n   ... 3 M\n   ... 2 M\n   ... 1 M\n   ... 1 F\n   ... 2 F\n   ... 3 F\n   ... 4 F\n   ... 5 F\n   ... 6 F\n   ... 7 F\n   ... 8 F\n   ... 9 F\n   ... 10 F\n   ... 11 F\n   ... 12 F\n   ... 13 F\n   ... 14 F\n   ... 15 F\n   ... 16 F\n   ... 17 F\n   ... 18 F\n   ... 19 F\n   ... 20 M\n   ... 20 M\n   ... 19 M\n   ... 18 F\n   ... 17 F\n   ... 16 F\n   ... 15 M\n   ... 14 F\n   ... 13 F\n   ... 12 F\n   ... 11 F\n   ... 10 F\n   ... 9 M\n   ... 8 M\n   ... 7 M\n   ... 6 M\n   ... 5 M\n   ... 4 M\n   ... 3 M\n   ... 2 M\n   ... 1 M\n   ... 1 F\n   ... 2 F\n   ... 3 F\n   ... 4 F\n   ... 5 F\n   ... 6 F\n   ... 7 F\n   ... 8 F\n   ... 9 F\n   ... 10 F\n   ... 11 F\n   ... 12 F\n   ... 13 F\n   ... 14 F\n   ... 15 F\n   ... 16 F\n   ... 17 F\n   ... 18 F\n   ... 19 F\n   ... 20 M\n   ... 20 M\n   ... 19 M\n   ... 18 F\n   ... 17 F\n   ... 16 F\n   ... 15 M\n   ... 14 F\n   ... 13 F\n   ... 12 F\n   ... 11 F\n   ... 10 F\n   ... 9 M\n   ... 8 M\n   ... 7 M\n   ... 6 M\n   ... 5 M\n   ... 4 M\n   ... 3 M\n   ... 2 M\n   ... 1 M\n   ... 1 F\n   ... 2 F\n   ... 3 F\n   ... 4 F\n   ... 5 F\n   ... 6 F\n   ... 7 F\n   ... 8 F\n   ... 9 F\n   ... 10 F\n   ... 11 F\n   ... 12 F\n   ... 13 F\n   ... 14 F\n   ... 15 F\n   ... 16 F\n   ... 17 F\n   ... 18 F\n   ... 19 F\n   ... 20 M\n   ... 20 M\n   ... 19 M\n   ... 18 F\n   ... 17 F\n   ... 16 F\n   ... 15 M\n   ... 14 F\n   ... 13 F\n   ... 12 F\n   ... 11 F\n   ... 10 F\n   ... 9 M\n   ... 8 M\n   ... 7 M\n   ... 6 M\n   ... 5 M\n   ... 4 M\n   ... 3 M\n   ... 2 M\n   ... 1 M\n   ... 1 F\n   ... 2 F\n   ... 3 F\n   ... 4 F\n   ... 5 F\n   ... 6 F\n   ... 7 F\n   ... 8 F\n   ... 9 F\n   ... 10 F\n   ... 11 F\n   ... 12 F\n   ... 13 F\n   ... 14 F\n   ... 15 F\n   ... 16 F\n   ... 17 F\n   ... 18 F\n   ... 19 F\n   ... 20 M\n   ... 20 M\n   ... 19 M\n   ... 18 F\n   ... 17 F\n   ... 16 F\n   ... 15 M\n   ... 14 F\n   ... 13 F\n   ... 12 F\n   ... 11 F\n   ... 10 F\n   ... 9 M\n   ... 8 M\n   ... 7 M\n   ... 6 M\n   ... 5 M\n   ... 4 M\n   ... 3 M\n   ... 2 M\n   ... 1 M\n   ... 1 F\n   ... 2 F\n   ... 3 F\n   ... 4 F\n   ... 5 F\n   ... 6 F\n   ... 7 F\n   ... 8 F\n   ... 9 F\n   ... 10 F\n   ... 11 F\n   ... 12 F\n   ... 13 F\n   ... 14 F\n   ... 15 F\n   ... 16 F\n   ... 17 F\n   ... 18 F\n   ... 19 F\n   ... 20 M\n   ... 20 M\n   ... 19 M\n   ... 18 F\n   ... 17 F\n   ... 16 F\n   ... 15 M\n   ... 14 F\n   ... 13 F\n   ... 12 F\n   ... 11 F\n   ... 10 F\n   ... 9 M\n   ... 8 M\n   ... 7 M\n   ... 6 M\n   ... 5 M\n   ... 4 M\n   ... 3 M\n   ... 2 M\n   ... 1 M\n   ... 1 F\n   ... 2 F\n   ... 3 F\n   ... 4 F\n   ... 5 F\n   ... 6 F\n   ... 7 F\n   ... 8 F\n   ... 9 F\n   ... 10 F\n   ... 11 F\n   ... 12 F\n   ... 13 F\n   ... 14 F\n   ... 15 F\n   ... 16 F\n   ... 17 F\n   ... 18 F\n   ... 19 F\n   ... 20 M\n   ... 20 M\n   ... 19 M\n   ... 18 F\n   ... 17 F\n   ... 16 F\n   ... 15 M\n   ... 14 F\n   ... 13 F\n   ... 12 F\n   ... 11 F\n   ... 10 F\n   ... 9 M\n   ... 8 M\n   ... 7 M\n   ... 6 M\n",
        "test": "assert solution(\"2\\nMike Thomson 20 M\\nRobert Bustle 32 M\\nAndria Bustle 30 F\") == \"Mr. Mike Thomson\\nMs. Andria Bustle\\nMr. Robert Bustle\"",
        "num_ids": 1903,
        "indeed": false
    },
    {
        "number": 4674,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, n = [int(x) for x in stdin.split()]\n    print([[i, j, k] for i in range(x + 1) for j in range(y + 1) for k in range(z + 1) if i + j + k!= n])\n    return ''\n\n=====Output Format=====\nPrint the list of lists in lexicographic increasing order.\n\n=====Sample Test Cases=====\nInput\n1\n1\n1\n2\nOutput\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n\nInput\n1\n1\n1\n3\nOutput\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n\nInput\n2\n2\n2\n2\nOutput\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 2], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\nInput\n2\n2\n2\n3\nOutput\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\nInput\n1\n1\n1\n1\nOutput\n[[0, 0, 0]]\n\nInput\n1\n1\n1\n2\nOutput\n[[0, 0, 0], [0, 0, 1]]\n\nInput\n1\n1\n1\n3\nOutput\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\nInput\n2\n2\n2\n2\nOutput\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\nInput\n2\n2\n2\n3\nOutput\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\nInput\n2\n2\n2\n3\nOutput\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\nInput\n2\n2\n2\n3\nOutput\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\nInput\n2\n2\n2\n3\nOutput\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\nInput\n2\n2\n2\n3\nOutput\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0,",
        "test": "assert solution('1 1 1 1') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]",
        "num_ids": 1885,
        "indeed": false
    },
    {
        "number": 4675,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 1\")\n    0.00+2.00i\n    >>> solution(\"0 1\")\n    0.00+1.00i\n    >>> solution(\"1 0\")\n    0.00+1.00i\n    >>> solution(\"0 0\")\n    0.00+0.00i\n    >>> solution(\"1 -1\")\n    0.00-2.00i\n    >>> solution(\"1 -1i\")\n    0.00-2.00i\n    >>> solution(\"1i 1\")\n    0.00+2.00i\n    >>> solution(\"1i -1\")\n    0.00-2.00i\n    >>> solution(\"1 -1i\")\n    0.00-2.00i\n    >>> solution(\"1 -1\")\n    0.00-2.00i\n    >>> solution(\"0 -1\")\n    0.00-2.00i\n    >>> solution(\"0 -1i\")\n    0.00-2.00i\n    >>> solution(\"0 -0\")\n    0.00-0.00i\n    >>> solution(\"0 0\")\n    0.00-0.00i\n    >>> solution(\"1 1i\")\n    0.00+2.00i\n    >>> solution(\"1 -1i\")\n    0.00-2.00i\n    >>> solution(\"1i 1\")\n    0.00+2.00i\n    >>> solution(\"1i -1\")\n    0.00-2.00i\n    >>> solution(\"1 -1i\")\n    0.00-2.00i\n    >>> solution(\"1 -1\")\n    0.00-2.00i\n    >>> solution(\"0 -1\")\n    0.00-2.00i\n    >>> solution(\"0 -1i\")\n    0.00-2.00i\n    >>> solution(\"0 -0\")\n    0.00-0.00i\n    >>> solution(\"0 0\")\n    0.00-0.00i\n    >>> solution(\"1 1i\")\n    0.00+2.00i\n    >>> solution(\"1 -1i\")\n    0.00-2.00i\n    >>> solution(\"1i 1\")\n    0.00+2.00i\n    >>> solution(\"1i -1\")\n    0.00-2.00i\n    >>> solution(\"1 -1i\")\n    0.00-2.00i\n    >>> solution(\"1 -1\")\n    0.00-2.00i\n    >>> solution(\"0 -1\")\n    0.00-2.00i\n    >>> solution(\"0 -1i\")\n    0.00-2.00i\n    >>> solution(\"0 -0\")\n    0.00-0.00i\n    >>> solution(\"0 0\")\n    0.00-0.00i\n    >>> solution(\"1 1i\")\n    0.00+2.00i\n    >>> solution(\"1 -1i\")\n    0.00-2.00i\n    >>> solution(\"1i 1\")\n    0.00+2.00i\n    >>> solution(\"1i -1\")\n    0.00-2.00i\n    >>> solution(\"1 -1i\")\n    0.00-2.00i\n    >>> solution(\"1 -1\")\n    0.00-2.00i\n    >>> solution(\"0 -1\")\n    0.00-2.00i\n    >>> solution(\"0 -1i\")\n    0.00-2.00i\n    >>> solution(\"0 -0\")\n    0.00-0.00i\n    >>> solution(\"0 0\")\n    0.00-0.00i\n    >>> solution(\"1 1i\")\n    0.00+2.00i\n    >>> solution(\"1 -1i\")\n    0.00-2.00i\n    >>> solution(\"1i 1\")\n    0.00+2.00i\n    >>> solution(\"1i -1\")\n    0.00-2.00i\n    >>> solution(\"1 -1i\")\n    0.00-2.00i\n    >>> solution(\"1 -1\")\n    0.00-2.00i\n    >>> solution(\"0 -1\")\n    0.00-2.00i\n    >>> solution(\"0 -1i\")\n    0.00-2.00i\n    >>> solution(\"0 -0\")\n    0.00-0.00i\n    >>> solution(\"0 0\")\n    0.00-0.00i\n    >>> solution(\"1 1i\")\n    0.00+2.00i\n    >>> solution(\"1 -1i\")\n    0.00-2.00i\n    >>> solution(\"1i 1\")\n    0.00+2.00i\n    >>> solution(\"1i -1\")\n    0.00-2.00i\n    >>> solution(\"1 -1i\")\n    0.00-2.00i\n    >>> solution(\"1 -1\")\n    0.00-2.00i\n    >>> solution(\"0 -1\")\n    0.00-2.00i\n    >>> solution(\"0 -1i\")\n    0.00-2.00i\n    >>> solution(\"0 -0\")\n    0.00-0.00i\n    >>> solution(\"0 0\")\n    0.00-0.00i\n    >>> solution(\"1 1i\")\n    0.00+2.00i\n    >>> solution(\"1 -1i\")\n    0.00-2.00i\n    >>> solution(\"1i 1\")\n    0.00+2.00i\n    >>> solution(\"1i -1\")\n    0.00-2.00i\n    >>> solution(\"1 -1i\")\n    0.00-2.00i\n    >>> solution(\"1 -1\")\n    0.00-2.00i\n    >>> solution(\"0 -1\")\n    0.00-2.00i\n    >>> solution(\"0 -1i\")\n    0.00-2.00i\n    >>> solution(\"0 -0\")\n    0.00-0.00i\n    >>> solution(\"0 0\")\n    0.00-0.00i\n    >>> solution(\"1 1i\")\n    0.00+2.00i\n    >>> solution(\"1 -1i\")\n    0.00-2.00i\n    >>> solution(\"1i 1\")\n    0.00+2.00i\n    >>> solution(\"1i -1\")\n    0.00-2.00i\n    >>> solution(\"1 -1i\")\n    0.00-2.00i\n    >>> solution(\"1 -1\")\n    0.00-2.00i\n    >>> solution(\"0 -1\")\n    0.00-2.00i\n    >>> solution(\"0 -1i\")\n    0.00-2.00i\n    >>> solution(\"0 -0\")\n    0.00-0.00i\n    >>> solution(\"0 0\")\n    0.00-0.00i\n    >>> solution(\"1 1i\")\n    0.00+2.00i\n    >>> solution(\"1 -1i\")\n    0.00-2.00i\n    >>> solution(\"1i 1\")\n    0.00+2.00i\n    >>> solution(\"1i -1\")\n    0.00-2.00i\n    >>> solution(\"1 -1i\")\n    0.00-2.00i\n    >>> solution(\"1 -1\")\n    0.00-2.00i\n    >>> solution(\"0 -1\")\n    0.00-2.00i\n    >>> solution(\"0 -1i\")\n    0.00-2.00i\n    >>> solution(\"0 -0\")\n    0.00-0.00i",
        "test": "assert solution('0 1') == '0.00+1.00i'",
        "num_ids": 1830,
        "indeed": false
    },
    {
        "number": 4676,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    O, E = stdin.split('\\n')\n    return ''.join(O[::2] + E[::2])\n",
        "test": "assert solution(\"abc\") == \"xaybzc\"",
        "num_ids": 62,
        "indeed": false
    },
    {
        "number": 4677,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('1', '0').replace('B', '0')",
        "test": "assert solution(\"01B0\") == \"00\"",
        "num_ids": 32,
        "indeed": false
    },
    {
        "number": 4678,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"",
        "num_ids": 28,
        "indeed": false
    },
    {
        "number": 4679,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split('\\n')\n    a = list(a)\n    b = list(b)\n    c = list(c)\n    while len(a) > 0 and len(b) > 0 and len(c) > 0:\n        if a[0] == b[0] == c[0]:\n            a.pop(0)\n            b.pop(0)\n            c.pop(0)\n        elif a[0] == b[0]:\n            a.pop(0)\n            b.pop(0)\n        elif a[0] == c[0]:\n            a.pop(0)\n            c.pop(0)\n        elif b[0] == c[0]:\n            b.pop(0)\n            c.pop(0)\n        elif a[0] == c[0]:\n            a.pop(0)\n            c.pop(0)\n        elif b[0] == c[0]:\n            b.pop(0)\n            c.pop(0)\n        else:\n            break\n    if len(a) > 0:\n        return 'A'\n    elif len(b) > 0:\n        return 'B'\n    else:\n        return 'C'",
        "test": "assert solution(\"accc\") == \"C\"",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 4680,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b == c or a + c == b or b + c == a:\n        return \"YES\"\n    return \"NO\"",
        "test": "assert solution(\"5 7 5\") == \"NO\"",
        "num_ids": 74,
        "indeed": false
    },
    {
        "number": 4681,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\")\n    11\n    \"\"\"\n    n = int(stdin)\n    lucas = [2, 1]\n    for i in range(2, n):\n        lucas.append(lucas[i - 1] + lucas[i - 2])\n    return str(lucas[n - 1])\n",
        "test": "assert solution(\"5\") == \"11\"",
        "num_ids": 95,
        "indeed": false
    },
    {
        "number": 4682,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    return str(int((a + b) * h / 2))",
        "test": "assert solution(\"3 4 2\") == \"7\"",
        "num_ids": 45,
        "indeed": true
    },
    {
        "number": 4683,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    s = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            s += a[i] * a[j]\n    print(s % (10 ** 9 + 7))\n    return ''",
        "test": "assert solution(\"3\\n1 2 3\") == \"11\"",
        "num_ids": 105,
        "indeed": false
    },
    {
        "number": 4684,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    return \"YES\" if r + g + b % 4 == 0 else \"NO\"",
        "test": "assert solution(\"4 3 2\") == \"YES\"",
        "num_ids": 49,
        "indeed": false
    },
    {
        "number": 4685,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    k = int(stdin.split()[-1])\n    return str(max(a, b, c) * k)",
        "test": "assert solution(\"5 3 11\\n1\") == \"30\"",
        "num_ids": 63,
        "indeed": false
    },
    {
        "number": 4686,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Yes\" if len(stdin) == 0 else \"No\"",
        "test": "assert solution(\"abccba\") == \"No\"",
        "num_ids": 48,
        "indeed": false
    },
    {
        "number": 4687,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the K-th smallest integer in the array after the N operations.\n\n    >>> solution(\"3 4\\n1 1\\n2 2\\n3 3\")\n    3\n    \"\"\"\n    n, k = map(int, stdin.split())\n    arr = [int(x) for x in stdin.split()[1::2]]\n    arr.sort()\n    return arr[k - 1]\n",
        "test": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == \"3\"",
        "num_ids": 120,
        "indeed": false
    },
    {
        "number": 4688,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"2 2\") == \"2\"",
        "num_ids": 22,
        "indeed": false
    },
    {
        "number": 4689,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution(\"20 3\\n5 10 15\") == \"10\"",
        "num_ids": 27,
        "indeed": false
    },
    {
        "number": 4690,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a * b > c * d:\n        return str(a * b)\n    elif a * b < c * d:\n        return str(c * d)\n    else:\n        return str(a * b)\n",
        "test": "assert solution(\"3 5 2 7\") == \"15\"",
        "num_ids": 100,
        "indeed": true
    },
    {
        "number": 4691,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\nAC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n\")\n    AC x 3\n    WA x 1\n    TLE x 2\n    RE x 0\n    \"\"\"\n    pass\n",
        "test": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"",
        "num_ids": 105,
        "indeed": false
    },
    {
        "number": 4692,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    M = int(stdin)\n    if M < 0 or M > 23:\n        return \"Error\"\n    if M == 0:\n        return \"23\"\n    if M == 23:\n        return \"12\"\n    if M == 12:\n        return \"0\"\n    if M == 1:\n        return \"12\"\n    if M == 2:\n        return \"13\"\n    if M == 3:\n        return \"14\"\n    if M == 4:\n        return \"15\"\n    if M == 5:\n        return \"16\"\n    if M == 6:\n        return \"17\"\n    if M == 7:\n        return \"18\"\n    if M == 8:\n        return \"19\"\n    if M == 9:\n        return \"20\"\n    if M == 10:\n        return \"21\"\n    if M == 11:\n        return \"22\"\n    if M == 13:\n        return \"23\"\n    if M == 14:\n        return \"24\"\n    if M == 15:\n        return \"25\"\n    if M == 16:\n        return \"26\"\n    if M == 17:\n        return \"27\"\n    if M == 18:\n        return \"28\"\n    if M == 19:\n        return \"29\"\n    if M == 20:\n        return \"30\"\n    if M == 21:\n        return \"31\"\n    if M == 22:\n        return \"32\"\n    if M == 23:\n        return \"33\"\n    if M == 24:\n        return \"34\"\n    if M == 25:\n        return \"35\"\n    if M == 26:\n        return \"36\"\n    if M == 27:\n        return \"37\"\n    if M == 28:\n        return \"38\"\n    if M == 29:\n        return \"39\"\n    if M == 30:\n        return \"40\"\n    if M == 31:\n        return \"41\"\n    if M == 32:\n        return \"42\"\n    if M == 33:\n        return \"43\"\n    if M == 34:\n        return \"44\"\n    if M == 35:\n        return \"45\"\n    if M == 36:\n        return \"46\"\n    if M == 37:\n        return \"47\"\n    if M == 38:\n        return \"48\"\n    if M == 39:\n        return \"49\"\n    if M == 40:\n        return \"50\"\n    if M == 41:\n        return \"51\"\n    if M == 42:\n        return \"52\"\n    if M == 43:\n        return \"53\"\n    if M == 44:\n        return \"54\"\n    if M == 45:\n        return \"55\"\n    if M == 46:\n        return \"56\"\n    if M == 47:\n        return \"57\"\n    if M == 48:\n        return \"58\"\n    if M == 49:\n        return \"59\"\n    if M == 50:\n        return \"60\"\n    if M == 51:\n        return \"61\"\n    if M == 52:\n        return \"62\"\n    if M == 53:\n        return \"63\"\n    if M == 54:\n        return \"64\"\n    if M == 55:\n        return \"65\"\n    if M == 56:\n        return \"66\"\n    if M == 57:\n        return \"67\"\n    if M == 58:\n        return \"68\"\n    if M == 59:\n        return \"69\"\n    if M == 60:\n        return \"70\"\n    if M == 61:\n        return \"71\"\n    if M == 62:\n        return \"72\"\n    if M == 63:\n        return \"73\"\n    if M == 64:\n        return \"74\"\n    if M == 65:\n        return \"75\"\n    if M == 66:\n        return \"76\"\n    if M == 67:\n        return \"77\"\n    if M == 68:\n        return \"78\"\n    if M == 69:\n        return \"79\"\n    if M == 70:\n        return \"80\"\n    if M == 71:\n        return \"81\"\n    if M == 72:\n        return \"82\"\n    if M == 73:\n        return \"83\"\n    if M == 74:\n        return \"84\"\n    if M == 75:\n        return \"85\"\n    if M == 76:\n        return \"86\"\n    if M == 77:\n        return \"87\"\n    if M == 78:\n        return \"88\"\n    if M == 79:\n        return \"89\"\n    if M == 80:\n        return \"90\"\n    if M == 81:\n        return \"91\"\n    if M == 82:\n        return \"92\"\n    if M == 83:\n        return \"93\"\n    if M == 84:\n        return \"94\"\n    if M == 85:\n        return \"95\"\n    if M == 86:\n        return \"96\"\n    if M == 87:\n        return \"97\"\n    if M == 88:\n        return \"98\"\n    if M == 89:\n        return \"99\"\n    if M == 90:\n        return \"100\"\n    if M == 91:\n        return \"101\"\n    if M == 92:\n        return \"102\"\n    if M == 93:\n        return \"103\"\n    if M == 94:\n        return \"104\"\n    if M == 95:\n        return \"105\"\n    if M == 96:\n        return \"106\"\n    if M == 97:\n        return \"107\"\n    if M == 98:\n        return \"108\"\n    if M == 99:\n        return \"109\"\n    if M == 100:\n        return \"110\"\n    if M == 101:\n        return \"111\"\n    if M == 102:\n        return \"112\"\n    if M == 103:\n        return \"113\"\n    if M == 104:\n        return \"114\"\n    if M == 105:\n        return \"115\"\n    if M == 106:\n        return \"116\"\n    if M == 107:\n        return \"117\"\n    if M == 108:\n        return \"118\"\n    if M == 109:\n        return \"119\"\n    if M == 110:\n        return \"120\"\n    if M == 111:\n        return \"121\"\n    if M == 112:\n        return \"122\"\n    if M == 113:\n        return \"123\"\n    if M == 114:\n        return \"124\"\n    if M == 115:\n        return \"125\"\n    if M == 116:\n        return \"126\"\n    if M == 117:\n        return \"127\"\n    if M == 118:\n        return \"128\"\n    if M == 119:\n        return \"129\"\n    if M == 120:\n        return \"130\"\n    if M == 121:\n        return \"131\"\n    if M == 122:\n        return \"132\"\n    if M == 123:\n        return \"133\"\n    if M == 124:\n        return \"134\"\n    if M == 125:\n        return \"135\"\n    if M == 126:\n        return \"136\"\n    if M == 127:\n        return \"137\"\n    if M == 128:\n        return \"138\"\n    if M == 129:\n        return \"139\"\n    if M == 130:\n        return \"140\"\n    if M == 131:\n        return \"141\"\n    if M == 132:\n        return \"142\"\n    if M == 133:\n        return \"143\"\n    if M == 134:\n        return \"144\"\n    if M == 135:\n        return \"145\"\n    if M == 136:\n        return \"146\"\n    if M == 137:\n        return \"147\"\n    if M == 138:\n        return \"148\"\n    if M == 139:\n        return \"149\"\n    if M == 140:\n        return \"150\"\n    if M == 141:\n        return \"151\"\n    if M == 142:\n        return \"152\"\n    if M == 143",
        "test": "assert solution(\"21\") == \"27\"",
        "num_ids": 1914,
        "indeed": false
    },
    {
        "number": 4693,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a + b >= 10:\n        return \"error\"\n    else:\n        return str(a + b)\n",
        "test": "assert solution('6 3') == '9'",
        "num_ids": 66,
        "indeed": true
    },
    {
        "number": 4694,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 2 3 7 9\n   ... ''')\n    '7'\n    \"\"\"\n    n = int(stdin.readline())\n    houses = list(map(int, stdin.readline().split()))\n    houses.sort()\n    min_distance = houses[1] - houses[0]\n    for i in range(1, n - 1):\n        min_distance = min(min_distance, houses[i + 1] - houses[i])\n    return str(min_distance)\n",
        "test": "assert solution(\"4\\n2 3 7 9\") == \"7\"",
        "num_ids": 146,
        "indeed": false
    },
    {
        "number": 4695,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x % 2 == 0 and y % 2 == 0:\n        return \"Yes\"\n    elif x % 2 == 1 and y % 2 == 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution(\"1 3\") == \"Yes\"",
        "num_ids": 91,
        "indeed": false
    },
    {
        "number": 4696,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a * b % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "test": "assert solution(\"3 4\") == \"Even\"",
        "num_ids": 66,
        "indeed": true
    },
    {
        "number": 4697,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"1 6\") == \"2\"",
        "num_ids": 22,
        "indeed": false
    },
    {
        "number": 4698,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin\n",
        "test": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"",
        "num_ids": 42,
        "indeed": false
    },
    {
        "number": 4699,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    D = list(map(int, stdin.split()[1:]))\n    D.sort()\n    D = [str(i) for i in D]\n    D = ''.join(D)\n    D = D.replace('0', '')\n    D = D.replace('2', '')\n    D = D.replace('1', '')\n    D = D.replace('3', '')\n    D = D.replace('4', '')\n    D = D.replace('5', '')\n    D = D.replace('6', '')\n    D = D.replace('7', '')\n    D = D.replace('8', '')\n    D = D.replace('9', '')\n    D = D.replace(' ', '')\n    if D == '':\n        D = '0'\n    return N - int(D)",
        "test": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 4700,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\")\n    2\n    \"\"\"\n    n, m = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    good = 0\n    for i in range(n):\n        if h[i] > max(h[a[i] - 1], h[b[i] - 1]):\n            good += 1\n    return good\n",
        "test": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"",
        "num_ids": 180,
        "indeed": false
    },
    {
        "number": 4701,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split(' '))\n    return str(n * k)",
        "test": "assert solution(\"4 3\") == \"10\"",
        "num_ids": 45,
        "indeed": false
    },
    {
        "number": 4702,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0:\n        return \"0\"\n    else:\n        return \"1\"\n",
        "test": "assert solution('0') == '1'",
        "num_ids": 53,
        "indeed": false
    },
    {
        "number": 4703,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"125\")\n    176\n    \"\"\"\n    return sum(eval(stdin) for stdin in stdin.split(\"+\"))\n",
        "test": "assert solution(\"1+2+3+4+5\") == \"15\"",
        "num_ids": 66,
        "indeed": false
    },
    {
        "number": 4704,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(min(sum(a[:n//2]), sum(a[n//2:])))",
        "test": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"",
        "num_ids": 74,
        "indeed": false
    },
    {
        "number": 4705,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N * 800 - 200 * N)",
        "test": "assert solution(\"20\") == \"15800\"",
        "num_ids": 33,
        "indeed": false
    },
    {
        "number": 4706,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"obe\") == \"abc\"",
        "num_ids": 31,
        "indeed": false
    },
    {
        "number": 4707,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('1')",
        "test": "assert solution(\"101\") == 2",
        "num_ids": 18,
        "indeed": false
    },
    {
        "number": 4708,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x, y = map(int, stdin.split())\n    return n * x + (k - 1) * y",
        "test": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4709,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    return str(int(a) + int(b))",
        "test": "assert solution(\"1 + 2\") == \"3\"",
        "num_ids": 39,
        "indeed": false
    },
    {
        "number": 4710,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 1200:\n        return \"ABC\"\n    else:\n        return \"ARC\"",
        "test": "assert solution('1000') == 'ABC'",
        "num_ids": 42,
        "indeed": true
    },
    {
        "number": 4711,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return min(a + b, a + c, b + c)",
        "test": "assert solution(\"700 600 780\") == \"1300\"",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4712,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    return '#' * (w + 2) + '\\n' + '#' + ''.join(stdin.split('\\n')[1:]) + '#' + '\\n' + '#' * (w + 2)",
        "test": "assert solution(\"2 3\\nab\\narc\") == \"#####\\n#ab#\\n#arc#\\n#####\"",
        "num_ids": 136,
        "indeed": false
    },
    {
        "number": 4713,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    x = 0\n    for i in range(n):\n        if s[i] == 'I':\n            x += 1\n        else:\n            x -= 1\n    return str(max(0, x))",
        "test": "assert solution(\"IIDID\") == 2",
        "num_ids": 82,
        "indeed": false
    },
    {
        "number": 4714,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    count = 0\n    for i in range(A, B + 1):\n        if is_palindrome(i):\n            count += 1\n    return str(count)\n\n\ndef",
        "test": "assert solution(\"11009 11332\") == 4",
        "num_ids": 70,
        "indeed": false
    },
    {
        "number": 4715,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(len(set([a, b, c])))",
        "test": "assert solution(\"3 1 4\") == \"3\"",
        "num_ids": 45,
        "indeed": true
    },
    {
        "number": 4716,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\"",
        "num_ids": 29,
        "indeed": false
    },
    {
        "number": 4717,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    if abs(a - x) < abs(b - x):\n        return \"A\"\n    else:\n        return \"B\"",
        "test": "assert solution(\"5 2 7\") == \"B\"",
        "num_ids": 61,
        "indeed": true
    },
    {
        "number": 4718,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0:4] + '2018' + stdin[8:]",
        "test": "assert solution(\"2017/01/07\") == \"2018/01/07\"",
        "num_ids": 38,
        "indeed": false
    },
    {
        "number": 4719,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = [stdin.readline() for _ in range(n)]\n    s.sort()\n    s.sort(key=len)\n    return s[0]",
        "test": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"",
        "num_ids": 76,
        "indeed": false
    },
    {
        "number": 4720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seats = [int(x) for x in stdin.readline().split()]\n    seats.sort()\n    return str(seats[-1] - seats[0] + 1)",
        "test": "assert solution(\"1\\n24 30\") == \"7\"",
        "num_ids": 74,
        "indeed": false
    },
    {
        "number": 4721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n * m)",
        "test": "assert solution(\"3 4\") == \"6\"",
        "num_ids": 35,
        "indeed": false
    },
    {
        "number": 4722,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A + B % 3 == 0:\n        return \"Possible\"\n    return \"Impossible\"",
        "test": "assert solution(\"4 3\") == \"Impossible\"",
        "num_ids": 64,
        "indeed": false
    },
    {
        "number": 4723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if t in s:\n        return s\n    return \"UNRESTORABLE\"",
        "test": "assert solution(\"?tc????\") == \"atcoder\"",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, g = map(int, stdin.split())\n    return str(round((r + g) / 2))",
        "test": "assert solution(\"2002\\n2017\") == \"2032\"",
        "num_ids": 43,
        "indeed": false
    },
    {
        "number": 4725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"letter\") == 2",
        "num_ids": 20,
        "indeed": false
    },
    {
        "number": 4726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, n, t = map(int, stdin.split())\n    if t == 1:\n        return \"AC\" if m <= n ** 4 else \"TLE\"\n    elif t == 2:\n        return \"AC\" if m <= n ** 2 else \"TLE\"\n    elif t == 3:\n        return \"AC\" if m <= n ** 3 else \"TLE\"\n    elif t == 4:\n        return \"AC\" if m <= n ** 2 else \"TLE\"\n    elif t == 5:\n        return \"AC\" if m <= n else \"TLE\"\n    elif t == 6:\n        return \"AC\" if m <= n * log2(n) else \"TLE\"\n    elif t == 7:\n        return \"AC\" if m <= n else \"TLE\"\n    else:\n        return \"TLE\"\n",
        "test": "assert solution(\"100000000 50 3\") == \"AC\"",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 4727,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 0 0 2\n   ... 4 16 8 2\n   ... 2 64 32 4\n   ... 1024 1024 64 0\n   ... 0''')\n    4 0 0 0\n    8 16 8 2\n    32 64 32 4\n    2048 64 0 0\n    >>> solution('''2 0 0 2\n   ... 4 16 8 2\n   ... 2 64 32 4\n   ... 1024 1024 64 0\n   ... 2''')\n    4 16 8 2\n    8 64 32 4\n    2048 64 0 0\n    >>> solution('''2 0 0 2\n   ... 4 16 8 2\n   ... 2 64 32 4\n   ... 1024 1024 64 0\n   ... 2\n   ... 0''')\n    2 16 8 4\n    4 64 32 4\n    2 1024 64 0\n    1024 0 0 0\n    >>> solution('''2 0 0 2\n   ... 4 16 8 2\n   ... 2 64 32 4\n   ... 1024 1024 64 0\n   ... 2\n   ... 2''')\n    2 16 8 4\n    4 64 32 4\n    2 1024 64 0\n    1024 0 0 0\n    >>> solution('''2 0 0 2\n   ... 4 16 8 2\n   ... 2 64 32 4\n   ... 1024 1024 64 0\n   ... 2\n   ... 2\n   ... 0''')\n    2 16 8 4\n    4 64 32 4\n    2 1024 64 0\n    1024 0 0 0\n    >>> solution('''2 0 0 2\n   ... 4 16 8 2\n   ... 2 64 32 4\n   ... 1024 1024 64 0\n   ... 2\n   ... 2\n   ... 2\n   ... 0''')\n    2 16 8 4\n    4 64 32 4\n    2 1024 64 0\n    1024 0 0 0\n    >>> solution('''2 0 0 2\n   ... 4 16 8 2\n   ... 2 64 32 4\n   ... 1024 1024 64 0\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 0''')\n    2 16 8 4\n    4 64 32 4\n    2 1024 64 0\n    1024 0 0 0\n    >>> solution('''2 0 0 2\n   ... 4 16 8 2\n   ... 2 64 32 4\n   ... 1024 1024 64 0\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 0''')\n    2 16 8 4\n    4 64 32 4\n    2 1024 64 0\n    1024 0 0 0\n    >>> solution('''2 0 0 2\n   ... 4 16 8 2\n   ... 2 64 32 4\n   ... 1024 1024 64 0\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n   ... 2\n",
        "test": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"",
        "num_ids": 1459,
        "indeed": false
    },
    {
        "number": 4728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"H 2\\nO\\n\")\n    '0'\n    >>> solution(\"C2H6 10\\nC3H8\\n\")\n    '6'\n    >>> solution(\"CH3OH 1\\nCH4\\n\")\n    '1'\n    >>> solution(\"C6H6OCH2O 10\\nHCN\\n\")\n    '0'\n    >>> solution(\"C6H14 10\\nC5H10\\n\")\n    '12'\n    \"\"\"\n    molecules = stdin.split(\"\\n\")\n    molecules = molecules[:-1]\n    molecules = [molecule.split(\" \") for molecule in molecules]\n    molecules = [[molecule[0], int(molecule[1])] for molecule in molecules]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[1]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[1] > 0]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules = [molecule for molecule in molecules if molecule[0]!= \"\"]\n    molecules",
        "test": "assert solution(\"C2H6 10\") == \"6\"",
        "num_ids": 1532,
        "indeed": false
    },
    {
        "number": 4729,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"ABC HAPPYBIRTHDAYCACEY\")\n    'PASS'\n    >>> solution(\"ABC TRAGICBIRTHDAYCACEY\")\n    'FAIL'\n    >>> solution(\"ABC HAPPYBIRTHDAY\")\n    'FAIL'\n    >>> solution(\"SECRET SOMECHORESARETOUGH\")\n    'PASS'\n    \"\"\"\n    message = stdin.split()[1]\n    password = stdin.split()[0]\n    for i in range(len(message)):\n        if message[i] == password[0]:\n            for j in range(1, len(password)):\n                if message[i + j] == password[j]:\n                    continue\n                else:\n                    break\n            else:\n                return \"PASS\"\n    return \"FAIL\"\n",
        "test": "assert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 4730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\n([] [] ]\\n\")\n    '] 7\n    >>> solution(\"13\\n(([] [[]] ())\\n\")\n    'ok so far'\n    >>> solution(\"21\\n[ { { () () () () } } ]\\n\")\n    '] 20\n    >>> solution(\"27\\n[ { [[()]] (({})) } ] () {}\\n\")\n    'ok so far'\n    \"\"\"\n    pass\n",
        "test": "assert solution(\"(([] [[]] ())\") == \"ok so far\"",
        "num_ids": 136,
        "indeed": false
    },
    {
        "number": 4731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... apple\n   ... ear\n   ... real\n   ... letters\n   ... style''')\n    'Fair Game'\n    >>> solution('''3\n   ... apple\n   ... extra\n   ... apple''')\n    'Player 1 lost'\n    >>> solution('''2\n   ... apple\n   ... neat''')\n    'Player 2 lost'\n    \"\"\"\n   ...",
        "test": "assert solution(\"3\\napple\\nextra\\napple\") == \"Player 1 lost\"",
        "num_ids": 145,
        "indeed": false
    },
    {
        "number": 4732,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, op, b = stdin.split()\n    a, b = int(a), int(b)\n    if op == '+':\n        return str(a + b)\n    return str(a * b)\n",
        "test": "assert solution(\"1000\\n*\\n100\") == \"100000\"",
        "num_ids": 88,
        "indeed": true
    },
    {
        "number": 4733,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 out\")\n    3\n    >>> solution(\"8 in\")\n    6\n    >>> solution(\"52 out\")\n    8\n    \"\"\"\n    deck_size = int(stdin.split()[0])\n    shuffles = 0\n    while deck_size!= 1:\n        if deck_size % 2 == 0:\n            deck_size //= 2\n        else:\n            deck_size = (deck_size - 1) // 2 + 1\n        shuffles += 1\n    return str(shuffles)\n",
        "test": "assert solution(\"8 out\") == \"3\"",
        "num_ids": 151,
        "indeed": false
    },
    {
        "number": 4734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    y, p = stdin.split()\n    if y[-1] in 'aeiou':\n        y = y[:-1]\n    if p[-1] in 'aeiou':\n        p = p[:-1]\n    return y + p + 'x' + p\n\nprint(solution(input()))\n",
        "test": "assert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"",
        "num_ids": 121,
        "indeed": false
    },
    {
        "number": 4735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    if year % 26 == 0:\n        return \"yes\"\n    else:\n        return \"no\"",
        "test": "assert solution('2019') == 'no'",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4736,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 0 0 0 4 0 0 0 0 4\n   ... 3''')\n    '64'\n    >>> solution('''10 10 10 20 0 10 10 10 10 10\n   ... 4''')\n    '1820000'\n    \"\"\"\n    nums = [int(n) for n in stdin.split()]\n    n = len(nums)\n    k = int(stdin.split()[-1])\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if nums[j] < nums[i]:\n                dp[i] += dp[j]\n    return str(dp[k - 1])\n",
        "test": "assert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 4737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the optimal contest strategy for a team in an ACM ICPC contest.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Solution string\n    \"\"\"\n    # Get input\n    n, p = map(int, stdin.split())\n    estimations = list(map(int, stdin.split()))\n\n    # Initialize variables\n    num_ac = 0\n    penalty_time = 0\n\n    # Iterate through all possible orders\n    for order in permutations(range(n)):\n        # Initialize variables\n        num_ac = 0\n        penalty_time = 0\n\n        # Iterate through all problems\n        for i in range(n):\n            # If the problem is not the one we want to solve first\n            if order[i]!= p:\n                # If the problem is not solved\n                if not estimations[order[i]]:\n                    # Add the penalty time\n                    penalty_time += estimations[order[i]]\n                # If the problem is solved\n                else:\n                    # Add the number of AC problems\n                    num_ac += 1\n\n        # If the number of AC problems is higher than the current best\n        if num_ac > num_ac:\n            # Update the best number of AC problems\n            num_ac = num_ac\n            # Update the best penalty time\n            penalty_time = penalty_time\n\n    # Return the solution\n    return str(num_ac) + \" \" + str(penalty_time)\n",
        "test": "assert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 4738,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "test": "assert solution(\"abbaabbaabba\") == 2",
        "num_ids": 23,
        "indeed": false
    },
    {
        "number": 4739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return''.join(map(str, [0, 1]))\n",
        "test": "assert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"",
        "num_ids": 91,
        "indeed": false
    },
    {
        "number": 4740,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '1' if len(stdin) == 7 and stdin[:3] == '555' else '0'",
        "test": "assert solution(\"5551212\") == \"1\"",
        "num_ids": 53,
        "indeed": true
    },
    {
        "number": 4741,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"32/1\")\n    '0/1'\n    >>> solution(\"33/1\")\n    '5/9'\n    >>> solution(\"-40/1\")\n    '-40/1'\n    \"\"\"\n    fahrenheit = stdin.split(\"/\")\n    if fahrenheit[0] == \"-\":\n        fahrenheit[0] = fahrenheit[0][1:]\n        fahrenheit[1] = fahrenheit[1][:-1]\n        fahrenheit[0] = int(fahrenheit[0]) * -1\n    else:\n        fahrenheit[0] = fahrenheit[0][:-1]\n        fahrenheit[1] = fahrenheit[1][:-1]\n        fahrenheit[0] = int(fahrenheit[0])\n    fahrenheit[1] = int(fahrenheit[1])\n    celsius = (fahrenheit[0] - 32) * 5 / 9\n    return f\"{celsius}/{fahrenheit[1]}\"\n",
        "test": "assert solution(\"33/1\") == \"5/9\"",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 4742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... C E G\n   ... D F# A\n   ... ''')\n    'Transposition'\n    >>> solution('''7\n   ... C C G G A A G\n   ... C C F F D# D# F\n   ... ''')\n    'Inversion'\n    >>> solution('''7\n   ... A B C D E F G\n   ... G F E D C B A\n   ... ''')\n    'Retrograde'\n    \"\"\"\n    notes = stdin.split('\\n')\n    notes = [list(map(lambda x: x.strip(), note.split(' '))) for note in notes]\n    notes = [list(map(lambda x: x.strip(), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('#'), note)) for note in notes]\n    notes = [list(map(lambda x: x.strip('b'), note)) for note in notes",
        "test": "assert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"",
        "num_ids": 1436,
        "indeed": false
    },
    {
        "number": 4743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('-', '').replace(' ', '').replace('a', 'A').replace('e', 'E').replace('i', 'I').replace('o', 'O').replace('u', 'U')\n",
        "test": "assert solution(\"Cat-a-pil-lar\") == \"Catacillar\"",
        "num_ids": 94,
        "indeed": false
    },
    {
        "number": 4744,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))",
        "test": "assert solution('4') == '16'",
        "num_ids": 30,
        "indeed": false
    },
    {
        "number": 4745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, X = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    prices.sort()\n    count = 0\n    for i in range(n):\n        if prices[i] > X:\n            break\n        count += 1\n    return count",
        "test": "assert solution('5 10\\n4 8 1 9 7\\n') == '2'",
        "num_ids": 115,
        "indeed": false
    },
    {
        "number": 4746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 2\\n0 1 1\\n1 0 0\\n\")\n    'possible'\n    >>> solution(\"1 2\\n0 1 1\\n1 0 1\\n\")\n    'impossible'\n    \"\"\"\n    capacity, stations = map(int, stdin.split())\n    people = [0] * (stations + 1)\n    for _ in range(stations):\n        left, entered, stayed = map(int, stdin.split())\n        people[left] += 1\n        people[entered] -= 1\n        people[stayed] += 1\n    for i in range(1, stations + 1):\n        if people[i] < 0 or people[i] > capacity:\n            return \"impossible\"\n    return \"possible\"\n",
        "test": "assert solution(\"1 2\\n1 0 0\\n0 1 0\") == \"impossible\"",
        "num_ids": 229,
        "indeed": false
    },
    {
        "number": 4747,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n * k * (k + 1) // 2)",
        "test": "assert solution('1 1\\n') == '1'",
        "num_ids": 60,
        "indeed": false
    },
    {
        "number": 4748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, N, M = map(int, stdin.split())\n    return str(max(0, (H - N - M) // 2)) +'' + str(max(0, (H - N - M) // 4))\n",
        "test": "assert solution(\"4 2 7\") == \"1 4\"",
        "num_ids": 82,
        "indeed": false
    },
    {
        "number": 4749,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    grid = [stdin.split()[1:n+1] for _ in range(n)]\n    \n    def check_row(row):\n        return row.count('B') == row.count('W')\n    \n    def check_col(col):\n        return col.count('B') == col.count('W')\n    \n    def check_diag(grid):\n        return grid[0][0] == grid[1][1] == grid[2][2] == grid[3][3] == 'B' or grid[0][0] == grid[1][1] == grid[2][2] == grid[3][3] == 'W'\n    \n    def check_consecutive(grid):\n        for row in grid:\n            if 'BBB' in ''.join(row) or 'WWW' in ''.join(row):\n                return False\n        for col in zip(*grid):\n            if 'BBB' in ''.join(col) or 'WWW' in ''.join(col):\n                return False\n        return True\n    \n    if all([check_row(row) for row in grid]) and all([check_col(col) for col in grid]) and check_consecutive(grid):\n        return '1'\n    return '0'",
        "test": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == \"1\"",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 4750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"",
        "num_ids": 65,
        "indeed": false
    },
    {
        "number": 4751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "test": "assert solution(\"[1,2]\") == True",
        "num_ids": 31,
        "indeed": false
    },
    {
        "number": 4752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return [0, 1]\n    nums = [2, 7, 11, 15]\n    target = 9\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return [0, 1]\n\nprint(solution(nums, target))\n",
        "test": "assert solution('2 7 11 15') == '0 1'",
        "num_ids": 124,
        "indeed": false
    },
    {
        "number": 4753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)",
        "test": "assert solution('4\\n') == '1'",
        "num_ids": 32,
        "indeed": false
    },
    {
        "number": 4754,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n1 2 2 1\")\n    4\n    >>> solution(\"1\\n3 7\")\n    'impossible'\n    \"\"\"\n    n = int(stdin.split()[0])\n    socks = [int(x) for x in stdin.split()[1:]]\n    socks.sort()\n    socks.reverse()\n    if socks[0]!= socks[1]:\n        return \"impossible\"\n    if socks[0] == socks[1]:\n        return n\n    if socks[0] == socks[1] == socks[2]:\n        return n\n    if socks[0] == socks[1] == socks[2] == socks[3]:\n        return n\n    if socks[0] == socks[1] == socks[2] == socks[3] == socks[4]:\n        return n\n    if socks[0] == socks[1] == socks[2] == socks[3] == socks[4] == socks[5]:\n        return n\n    if socks[0] == socks[1] == socks[2] == socks[3] == socks[4] == socks[5] == socks[6]:\n        return n\n    if socks[0] == socks[1] == socks[2] == socks[3] == socks[4] == socks[5] == socks[6] == socks[7]:\n        return n\n    if socks[0] == socks[1] == socks[2] == socks[3] == socks[4] == socks[5] == socks[6] == socks[7] == socks[8]:\n        return n\n    if socks[0] == socks[1] == socks[2] == socks[3] == socks[4] == socks[5] == socks[6] == socks[7] == socks[8] == socks[9]:\n        return n\n    if socks[0] == socks[1] == socks[2] == socks[3] == socks[4] == socks[5] == socks[6] == socks[7] == socks[8] == socks[9] == socks[10]:\n        return n\n    if socks[0] == socks[1] == socks[2] == socks[3] == socks[4] == socks[5] == socks[6] == socks[7] == socks[8] == socks[9] == socks[10] == socks[11]:\n        return n\n    if socks[0] == socks[1] == socks[2] == socks[3] == socks[4] == socks[5] == socks[6] == socks[7] == socks[8] == socks[9] == socks[10] == socks[11] == socks[12]:\n        return n\n    if socks[0] == socks[1] == socks[2] == socks[3] == socks[4] == socks[5] == socks[6] == socks[7] == socks[8] == socks[9] == socks[10] == socks[11] == socks[12] == socks[13]:\n        return n\n    if socks[0] == socks[1] == socks[2] == socks[3] == socks[4] == socks[5] == socks[6] == socks[7] == socks[8] == socks[9] == socks[10] == socks[11] == socks[12] == socks[13] == socks[14]:\n        return n\n    if socks[0] == socks[1] == socks[2] == socks[3] == socks[4] == socks[5] == socks[6] == socks[7] == socks[8] == socks[9] == socks[10] == socks[11] == socks[12] == socks[13] == socks[14] == socks[15]:\n        return n\n    if socks[0] == socks[1] == socks[2] == socks[3] == socks[4] == socks[5] == socks[6] == socks[7] == socks[8] == socks[9] == socks[10] == socks[11] == socks[12] == socks[13] == socks[14] == socks[15] == socks[16]:\n        return n\n    if socks[0] == socks[1] == socks[2] == socks[3] == socks[4] == socks[5] == socks[6] == socks[7] == socks[8] == socks[9] == socks[10] == socks[11] == socks[12] == socks[13] == socks[14] == socks[15] == socks[16] == socks[17]:\n        return n\n    if socks[0] == socks[1] == socks[2] == socks[3] == socks[4] == socks[5] == socks[6] == socks[7] == socks[8] == socks[9] == socks[10] == socks[11] == socks[12] == socks[13] == socks[14] == socks[15] == socks[16] == socks[17] == socks[18]:\n        return n\n    if socks[0] == socks[1] == socks[2] == socks[3] == socks[4] == socks[5] == socks[6] == socks[7] == socks[8] == socks[9] == socks[10] == socks[11] == socks[12] == socks[13] == socks[14] == socks[15] == socks[16] == socks[17] == socks[18] == socks[19]:\n        return n\n    if socks[0] == socks[1] == socks[2] == socks[3] == socks[4] == socks[5] == socks[6] == socks[7] == socks[8] == socks[9] == socks[10] == socks[11] == socks[12] == socks[13] == socks[14] == socks[15] == socks[16] == socks[17] == socks[18] == socks[19] == socks[20]:\n        return n\n    if socks[0] == socks[1] == socks[2] == socks[3] == socks[4] == socks[5] == socks[6] == socks[7] == socks[8] == socks[9] == socks[10] == socks[11] == socks[12] == socks[13] == socks[14] == socks[15] == socks[16] == socks[17] == socks[18] == socks[19] == socks[20] == socks[21]:\n        return n\n    if socks[0] == socks[1] == socks[2] == socks[3] == socks[4] == socks[5] == socks[6] == socks[7] == socks[8] == socks[",
        "test": "assert solution(\"1\\n3 7\") == \"impossible\"",
        "num_ids": 1576,
        "indeed": false
    },
    {
        "number": 4755,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    candy, zeros = stdin.split()\n    candy = int(candy)\n    zeros = int(zeros)\n    if zeros == 0:\n        return str(candy)\n    if zeros == 1:\n        return str(candy - (candy % 10))\n    if zeros == 2:\n        return str(candy - (candy % 100))\n    if zeros == 3:\n        return str(candy - (candy % 1000))\n    if zeros == 4:\n        return str(candy - (candy % 10000))\n    if zeros == 5:\n        return str(candy - (candy % 100000))\n    if zeros == 6:\n        return str(candy - (candy % 1000000))\n    if zeros == 7:\n        return str(candy - (candy % 10000000))\n    if zeros == 8:\n        return str(candy - (candy % 100000000))\n    if zeros == 9:\n        return str(candy - (candy % 1000000000))\n    return str(candy)",
        "test": "assert solution(\"184 1\") == \"180\"",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 4756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str\"\"\"\n    pass",
        "test": "assert solution('3\\n0 1\\n1 0\\n1 1') == '0.000000'",
        "num_ids": 57,
        "indeed": false
    },
    {
        "number": 4757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"",
        "num_ids": 93,
        "indeed": false
    },
    {
        "number": 4758,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 4 5\")\n    60\n    >>> solution(\"2 2 2\")\n    8\n    \"\"\"\n    eyes = int(stdin.split()[0])\n    nose = int(stdin.split()[1])\n    mouth = int(stdin.split()[2])\n    return str(eyes * nose * mouth)\n",
        "test": "assert solution(\"3 4 5\") == \"60\"",
        "num_ids": 109,
        "indeed": true
    },
    {
        "number": 4759,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n3 0 2\")\n    1.6666666666666667\n    >>> solution(\"3\\n1 -1 4\")\n    2.5\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    at_bats = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    total_bases = 0\n    total_hits = 0\n    for at_bat in at_bats:\n        if at_bat > 0:\n            total_bases += at_bat\n            total_hits += 1\n        elif at_bat < 0:\n            total_bases += at_bat\n        else:\n            total_bases += 0\n    return str(total_bases / total_hits)\n",
        "test": "assert solution(\"3 -1 4\") == \"2.5\"",
        "num_ids": 224,
        "indeed": false
    },
    {
        "number": 4760,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in range(2, n):\n        if i not in primes:\n            primes.append(i)\n    return primes[k - 1]\n",
        "test": "assert solution('15 12') == '7'",
        "num_ids": 133,
        "indeed": false
    },
    {
        "number": 4761,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    L, H = map(int, stdin.split())\n    return str(sum(1 for i in range(L, H + 1) if len(set(str(i))) == 6 and all(i % int(j) == 0 for j in str(i))))\n",
        "test": "assert solution(\"123864 123865\") == \"1\"",
        "num_ids": 92,
        "indeed": false
    },
    {
        "number": 4762,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input.\n\n    Parameters\n    ----------\n    stdin : str\n        The input string given by the standard input.\n\n    Returns\n    -------\n    str\n        The solution for the given input.\n    \"\"\"\n    # Get the number of citizens\n    n = int(stdin)\n    # Initialize the probability\n    probability = 0\n    # Iterate over the number of citizens\n    for i in range(1, n + 1):\n        # Get the number of citizens who will send a gift to themselves\n        self_gift = n // i\n        # Get the number of citizens who will send a gift to the next citizen\n        next_gift = n % i\n        # Get the probability of the current iteration\n        probability += self_gift * (next_gift / (i - 1))\n    # Return the probability\n    return str(probability)\n",
        "test": "assert solution('3\\n') == '0.66666667'",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 4763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    target = int(stdin)\n    if target < 1 or target > 180:\n        return \"impossible\"\n    if target == 1:\n        return \"single 1\"\n    if target == 2:\n        return \"double 2\"\n    if target == 3:\n        return \"triple 3\"\n    if target == 4:\n        return \"double 4\"\n    if target == 5:\n        return \"single 5\"\n    if target == 6:\n        return \"double 6\"\n    if target == 7:\n        return \"triple 7\"\n    if target == 8:\n        return \"double 8\"\n    if target == 9:\n        return \"single 9\"\n    if target == 10:\n        return \"double 10\"\n    if target == 11:\n        return \"triple 11\"\n    if target == 12:\n        return \"double 12\"\n    if target == 13:\n        return \"single 13\"\n    if target == 14:\n        return \"double 14\"\n    if target == 15:\n        return \"triple 15\"\n    if target == 16:\n        return \"double 16\"\n    if target == 17:\n        return \"single 17\"\n    if target == 18:\n        return \"double 18\"\n    if target == 19:\n        return \"triple 19\"\n    if target == 20:\n        return \"double 20\"\n    if target == 21:\n        return \"single 21\"\n    if target == 22:\n        return \"double 22\"\n    if target == 23:\n        return \"triple 23\"\n    if target == 24:\n        return \"double 24\"\n    if target == 25:\n        return \"single 25\"\n    if target == 26:\n        return \"double 26\"\n    if target == 27:\n        return \"triple 27\"\n    if target == 28:\n        return \"double 28\"\n    if target == 29:\n        return \"single 29\"\n    if target == 30:\n        return \"double 30\"\n    if target == 31:\n        return \"triple 31\"\n    if target == 32:\n        return \"double 32\"\n    if target == 33:\n        return \"single 33\"\n    if target == 34:\n        return \"double 34\"\n    if target == 35:\n        return \"triple 35\"\n    if target == 36:\n        return \"double 36\"\n    if target == 37:\n        return \"single 37\"\n    if target == 38:\n        return \"double 38\"\n    if target == 39:\n        return \"triple 39\"\n    if target == 40:\n        return \"double 40\"\n    if target == 41:\n        return \"single 41\"\n    if target == 42:\n        return \"double 42\"\n    if target == 43:\n        return \"triple 43\"\n    if target == 44:\n        return \"double 44\"\n    if target == 45:\n        return \"single 45\"\n    if target == 46:\n        return \"double 46\"\n    if target == 47:\n        return \"triple 47\"\n    if target == 48:\n        return \"double 48\"\n    if target == 49:\n        return \"single 49\"\n    if target == 50:\n        return \"double 50\"\n    if target == 51:\n        return \"triple 51\"\n    if target == 52:\n        return \"double 52\"\n    if target == 53:\n        return \"single 53\"\n    if target == 54:\n        return \"double 54\"\n    if target == 55:\n        return \"triple 55\"\n    if target == 56:\n        return \"double 56\"\n    if target == 57:\n        return \"single 57\"\n    if target == 58:\n        return \"double 58\"\n    if target == 59:\n        return \"triple 59\"\n    if target == 60:\n        return \"double 60\"\n    if target == 61:\n        return \"single 61\"\n    if target == 62:\n        return \"double 62\"\n    if target == 63:\n        return \"triple 63\"\n    if target == 64:\n        return \"double 64\"\n    if target == 65:\n        return \"single 65\"\n    if target == 66:\n        return \"double 66\"\n    if target == 67:\n        return \"triple 67\"\n    if target == 68:\n        return \"double 68\"\n    if target == 69:\n        return \"single 69\"\n    if target == 70:\n        return \"double 70\"\n    if target == 71:\n        return \"triple 71\"\n    if target == 72:\n        return \"double 72\"\n    if target == 73:\n        return \"single 73\"\n    if target == 74:\n        return \"double 74\"\n    if target == 75:\n        return \"triple 75\"\n    if target == 76:\n        return \"double 76\"\n    if target == 77:\n        return \"single 77\"\n    if target == 78:\n        return \"double 78\"\n    if target == 79:\n        return \"triple 79\"\n    if target == 80:\n        return \"double 80\"\n    if target == 81:\n        return \"single 81\"\n    if target == 82:\n        return \"double 82\"\n    if target == 83:\n        return \"triple 83\"\n    if target == 84:\n        return \"double 84\"\n    if target == 85:\n        return \"single 85\"\n    if target == 86:\n        return \"double 86\"\n    if target == 87:\n        return \"triple 87\"\n    if target == 88:\n        return \"double 88\"\n    if target == 89:\n        return \"single 89\"\n    if target == 90:\n        return \"double 90\"\n    if target == 91:\n        return \"triple 91\"\n    if target == 92:\n        return \"double 92\"\n    if target == 93:\n        return \"single 93\"\n    if target == 94:\n        return \"double 94\"\n    if target == 95:\n        return \"triple 95\"\n    if target == 96:\n        return \"double 96\"\n    if target == 97:\n        return \"single 97\"\n    if target == 98:\n        return \"double 98\"\n    if target == 99:\n        return \"triple 99\"\n    if target == 100:\n        return \"double 100\"\n    if target == 101:\n        return \"single 101\"\n    if target == 102:\n        return \"double 102\"\n    if target == 103:\n        return \"triple 103\"\n    if target == 104:\n        return \"double 104\"\n    if target == 105:\n        return \"single 105\"\n    if target == 106:\n        return \"double 106\"\n    if target == 107:\n        return \"triple 107\"\n    if target == 108:\n        return \"double 108\"\n    if target == 109:\n        return \"single 109\"\n    if target == 110:\n        return \"double 110\"\n    if target == 111:\n        return \"triple 111\"\n    if target == 112:\n        return \"double 112\"\n    if target == 113:\n        return \"single 113\"\n    if target == 114:\n        return \"double 114\"\n    if target == 115:\n        return",
        "test": "assert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'",
        "num_ids": 1703,
        "indeed": false
    },
    {
        "number": 4764,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, v = map(int, stdin.split())\n    return str(n * h * v * 4)",
        "test": "assert solution(\"5 2 2\") == \"36\"",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution(\"2\\n3 8\") == \"1\"",
        "num_ids": 39,
        "indeed": false
    },
    {
        "number": 4766,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    for _ in range(N):\n        command = stdin.readline().strip()\n        if command.startswith('Simon says'):\n            print(command[10:])",
        "test": "assert solution(\"3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n\") == \"raise your right hand.\\nraise your left hand.\"",
        "num_ids": 121,
        "indeed": false
    },
    {
        "number": 4767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0 0 4 6 10 12 16 18\")\n    5\n    \"\"\"\n    numbers = [int(x) for x in stdin.split()]\n    count = 0\n    while True:\n        if numbers[0] == 0:\n            count += 1\n            numbers = [numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[0]]\n        else:\n            numbers = [numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7]]\n        if numbers[0] == 0:\n            break\n    return str(count)\n",
        "test": "assert solution(\"1 2 4 6 10 12 16 18\") == \"0\"",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 4768,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    dna = [stdin.split()[i] for i in range(n)]\n    dna_len = len(dna[0])\n    dna_set = set(dna)\n    dna_dict = {dna[i]: i for i in range(n)}\n    dna_dict_rev = {i: dna[i] for i in range(n)}\n    dna_dict_rev_set = set(dna_dict_rev)\n    dna_dict_rev_dict = {dna_dict_rev[i]: i for i in dna_dict_rev}\n    dna_dict_rev_dict_rev = {i: dna_dict_rev_dict[i] for i in dna_dict_rev_dict}\n    dna_dict_rev_dict_rev_set = set(dna_dict_rev_dict_rev)\n    dna_dict_rev_dict_rev_dict = {dna_dict_rev_dict_rev[i]: i for i in dna_dict_rev_dict_rev}\n    dna_dict_rev_dict_rev_dict_rev = {i: dna_dict_rev_dict_rev_dict[i] for i in dna_dict_rev_dict_rev_dict}\n    dna_dict_rev_dict_rev_dict_rev_set = set(dna_dict_rev_dict_rev_dict_rev)\n    dna_dict_rev_dict_rev_dict_rev_dict = {dna_dict_rev_dict_rev_dict_rev[i]: i for i in dna_dict_rev_dict_rev_dict_rev}\n    dna_dict_rev_dict_rev_dict_rev_dict_rev = {i: dna_dict_rev_dict_rev_dict_rev_dict[i] for i in dna_dict_rev_dict_rev_dict_rev_dict}\n    dna_dict_rev_dict_rev_dict_rev_dict_rev_set = set(dna_dict_rev_dict_rev_dict_rev_dict_rev)\n    dna_dict_rev_dict_rev_dict_rev_dict_rev_dict = {dna_dict_rev_dict_rev_dict_rev_dict_rev[i]: i for i in dna_dict_rev_dict_rev_dict_rev_dict_rev}\n    dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev = {i: dna_dict_rev_dict_rev_dict_rev_dict_rev_dict[i] for i in dna_dict_rev_dict_rev_dict_rev_dict_rev}\n    dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_set = set(dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev)\n    dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict = {dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev[i]: i for i in dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev}\n    dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev = {i: dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev[i] for i in dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev}\n    dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_set = set(dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev)\n    dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict = {dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev[i]: i for i in dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev}\n    dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev = {i: dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev[i] for i in dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev}\n    dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_set = set(dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev)\n    dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict = {dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev[i]: i for i in dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev}\n    dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev = {i: dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev[i] for i in dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev}\n    dna_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_dict_rev_set",
        "test": "assert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\\n0 1\\n0 2\\n0 3\"",
        "num_ids": 1574,
        "indeed": false
    },
    {
        "number": 4769,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"ab\") == -1",
        "num_ids": 24,
        "indeed": false
    },
    {
        "number": 4770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"Dr. Chaz needs 0 piece of chicken!\"\n    elif n > m:\n        return \"Dr. Chaz will have {} piece[s] of chicken left over!\".format(n - m)\n    else:\n        return \"Dr. Chaz needs {} piece[s] of chicken!\".format(m - n)",
        "test": "assert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"",
        "num_ids": 139,
        "indeed": false
    },
    {
        "number": 4771,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 10\n   ... 1 1 2\n   ... 2 2 2\n   ... 3 2 1''')\n    -2\n    \"\"\"\n    n, V = map(int, stdin.split())\n    boxes = [list(map(int, stdin.split())) for _ in range(n)]\n    boxes.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    return max(\n        [\n            (\n                sum(\n                    [\n                        (box[0] - V) * box[1] * box[2]\n                        for box in boxes\n                        if box[0] * box[1] * box[2] > V\n                    ]\n                )\n            )\n            for box in boxes\n        ]\n    )\n",
        "test": "assert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == \"-2\"",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 4772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    crossword = [list(stdin.split()[i]) for i in range(R)]\n    words = set()\n    for r in range(R):\n        for c in range(C):\n            if crossword[r][c] == '#':\n                continue\n            for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                nr, nc = r + dr, c + dc\n                while 0 <= nr < R and 0 <= nc < C:\n                    if crossword[nr][nc] == '#':\n                        break\n                    if crossword[nr][nc] == '#':\n                        nr, nc = nr + dr, nc + dc\n                        continue\n                    words.add(crossword[nr][nc])\n                    break\n    return min(words)",
        "test": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\"",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 4773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('N', 'W').replace('S', 'E').replace('E', 'N').replace('W', 'S')",
        "test": "assert solution(\"NSEW\") == 4",
        "num_ids": 57,
        "indeed": false
    },
    {
        "number": 4774,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    for i in range(100):\n        for j in range(100):\n            if a * i + b * j == c * i - d * j:\n                print(f\"{a} {i} {b} {j} = {c} {i} {d} {j}\")\n    return \"problems ahead\"",
        "test": "assert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n\"",
        "num_ids": 179,
        "indeed": false
    },
    {
        "number": 4775,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    N, M = len(A), len(B)\n    for i in range(M):\n        for j in range(N):\n            if A[j] == B[i]:\n                print(A[j], end='')\n                break\n        else:\n            print('.', end='')\n        print('', end='.')\n    print()\n    for i in range(N):\n        for j in range(M):\n            if A[i] == B[j]:\n                print(B[j], end='')\n                break\n        else:\n            print('.', end='')\n        print('', end='.')\n    return ''\n",
        "test": "assert solution(\"MAMA TATA\") == \".T..\\nMAMA\\n.T..\\n.A..\"",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 4776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 10 14\n   ... 13 17\n   ... 25 26''')\n    10\n    \"\"\"\n    events = [tuple(map(int, line.split())) for line in stdin.splitlines()]\n    events.sort()\n    days = 0\n    for s, t in events:\n        days += t - s + 1\n    return days\n",
        "test": "assert solution(\"2\\n1 365\\n20 28\") == \"365\"",
        "num_ids": 135,
        "indeed": false
    },
    {
        "number": 4777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    a = 0\n    b = 0\n    for i in range(k):\n        if i % 2 == 0:\n            a += 1\n        else:\n            b += 1\n    return str(a) + \" \" + str(b)\n",
        "test": "assert solution(\"4\") == \"2 3\"",
        "num_ids": 89,
        "indeed": false
    },
    {
        "number": 4778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3\n   ... 1 100 200\n   ... 2 100 99\n   ... 3 100 50\n   ... 3 100 50\n   ... 2 100 98\n   ... ''')\n    'B 100 49'\n    >>> solution('''4 4\n   ... 3 100 99\n   ... 2 100 99\n   ... 1 100 99\n   ... 4 100 99\n   ... ''')\n    'A 0 99'\n    \"\"\"\n    num_precincts, num_districts = map(int, stdin.split('\\n')[0].split())\n    precincts = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    precincts.sort(key=lambda x: x[0])\n    districts = [[] for _ in range(num_districts)]\n    for precinct in precincts:\n        districts[precinct[0] - 1].append(precinct)\n    for district in districts:\n        district.sort(key=lambda x: x[1], reverse=True)\n    wasted_votes = [0, 0]\n    for district in districts:\n        if len(district) == 1:\n            wasted_votes[district[0][2] - 1] += district[0][1]\n        else:\n            wasted_votes[district[0][2] - 1] += district[0][1]\n            wasted_votes[district[1][2] - 1] += district[1][1]\n    return '\\n'.join(\n        f'{party} {wasted_votes[0]} {wasted_votes[1]}'\n        for party in ['A', 'B']\n    ) + '\\n' + f'{abs(wasted_votes[0] - wasted_votes[1]) / num_precincts:.6f}'\n",
        "test": "assert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 4779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split('\\n')]\n    return str(max([sum([i**2 for i in a[:k]]) * sum([i**2 for i in a[k:]]) for k in range(1, n)]))",
        "test": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"",
        "num_ids": 101,
        "indeed": false
    },
    {
        "number": 4780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    N1, N2 = map(int, stdin.split())\n    A = stdin.split()[:N1]\n    B = stdin.split()[N1:]\n    T = int(stdin.split()[-1])\n    for i in range(T):\n        for j in range(N1):\n            if A[j][0] == B[j][0]:\n                continue\n            elif A[j][0] == B[j][1]:\n                A[j], B[j] = B[j], A[j]\n            else:\n                A[j], B[j] = B[j], A[j]\n    return ''.join(A + B)\n",
        "test": "assert solution(\"3 3\\nABC\\nDEF\\n0\") == \"CBADEF\"",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 4781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\")\n    '1'\n    >>> solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\")\n    '3'\n    \"\"\"\n    pass\n",
        "test": "assert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"3\"",
        "num_ids": 146,
        "indeed": false
    },
    {
        "number": 4782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution('6 8\\n1 2 3 4 5 6 7\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n') == '22'",
        "num_ids": 92,
        "indeed": false
    },
    {
        "number": 4783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution(\"1 4\\n4 3 2 1\") == \"0\"",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.readline())\n    n = int(stdin.readline())\n    p = [int(stdin.readline()) for _ in range(n)]\n    p.append(0)\n    ans = 0\n    for i in range(n):\n        ans += x - p[i]\n    return str(ans)\n",
        "test": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"",
        "num_ids": 106,
        "indeed": false
    },
    {
        "number": 4785,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'hiss' if'ss' in stdin else 'no hiss'\n",
        "test": "assert solution(\"amiss\") == \"hiss\"",
        "num_ids": 47,
        "indeed": true
    },
    {
        "number": 4786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return stdin",
        "test": "assert solution(\"5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux\") == 5",
        "num_ids": 63,
        "indeed": false
    },
    {
        "number": 4787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([i**2 for i in [int(stdin.count(i)) for i in ['T', 'C', 'G']]]))",
        "test": "assert solution(\"CCC\") == 9",
        "num_ids": 56,
        "indeed": false
    },
    {
        "number": 4788,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"315\\n45\")\n    '90'\n    \"\"\"\n    current_direction = int(stdin.split(\"\\n\")[0])\n    correct_direction = int(stdin.split(\"\\n\")[1])\n    if current_direction == correct_direction:\n        return \"0\"\n    elif current_direction < correct_direction:\n        return str(correct_direction - current_direction)\n    else:\n        return str(360 - current_direction + correct_direction)\n",
        "test": "assert solution(\"315\\n45\") == \"90\"",
        "num_ids": 147,
        "indeed": false
    },
    {
        "number": 4789,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution(\"5\\n11\\n20\\n33\\n40\\n55\") == \"1\"",
        "num_ids": 61,
        "indeed": false
    },
    {
        "number": 4790,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '1' if stdin.count('B') == stdin.count('W') + 1 else '0'",
        "test": "assert solution(\"WWWWBBW\") == \"0\"",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n",
        "test": "assert solution(\"1 2 1 1\") == \"1.299038105676658\"",
        "num_ids": 45,
        "indeed": false
    },
    {
        "number": 4792,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"robert\") == \"robert\"",
        "num_ids": 30,
        "indeed": false
    },
    {
        "number": 4793,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, v1, v2 = map(int, stdin.split())\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 * v2 < s:\n        return \"Impossible\"\n    return str(s // v1 + s // v2) + \" \" + str(s // v1)\n",
        "test": "assert solution(\"1000 900 7\") == \"Impossible\"",
        "num_ids": 112,
        "indeed": false
    },
    {
        "number": 4794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 4\n   ... #..\n   ... #..\n   ... #..\n   ... #XX''')\n    '1\\n1\\n2\\n1\\n0'\n    \"\"\"\n    R, C = map(int, stdin.split())\n    parking_spaces = 0\n    for _ in range(R):\n        parking_spaces += stdin.count('X')\n    return '\\n'.join(map(str, [parking_spaces // i for i in range(5, 0, -1)]))\n",
        "test": "assert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 4795,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(stdin.readline()) for _ in range(n)]\n    return str(sum(nums))\n",
        "test": "assert solution(\"2\\n212\\n1253\") == \"1953566\"",
        "num_ids": 63,
        "indeed": false
    },
    {
        "number": 4796,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10 10 10\\n3 3 3\")\n    '0.0 0.0 0.0'\n    >>> solution(\"9 9 9\\n3 2 1\")\n    '0.0 3.0 6.0'\n    \"\"\"\n    orange, apple, pineapple = map(int, stdin.split())\n    cocktail = map(int, stdin.split())\n    return \" \".join(map(lambda x: str(round(x / cocktail[i], 6)), [orange, apple, pineapple]))\n",
        "test": "assert solution(\"9 9 9\\n3 2 1\") == \"0.0 3.0 6.0\"",
        "num_ids": 174,
        "indeed": false
    },
    {
        "number": 4797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('<', '')",
        "test": "assert solution(\"foss<<rritun\") == \"forritun\"",
        "num_ids": 42,
        "indeed": false
    },
    {
        "number": 4798,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('-', '')",
        "test": "assert solution(\"Mirko-Slavko\") == \"MS\"",
        "num_ids": 45,
        "indeed": false
    },
    {
        "number": 4799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    G, S, C = [int(x) for x in stdin.split()]\n    if G + S + C == 0:\n        return \"Estate or Copper\"\n    if G + S + C == 1:\n        return \"Province or Gold\"\n    if G + S + C == 2:\n        return \"Duchy or Silver\"\n    if G + S + C == 3:\n        return \"Province or Gold\"\n    if G + S + C == 4:\n        return \"Province or Gold\"\n    if G + S + C == 5:\n        return \"Province or Gold\"\n    return \"Province or Gold\"\n\nprint(solution(input()))\n",
        "test": "assert solution(\"2 1 0\") == \"Province or Gold\"",
        "num_ids": 193,
        "indeed": false
    },
    {
        "number": 4800,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d, s = map(int, stdin.split())\n    if n == k:\n        return str(d)\n    elif n > k:\n        return \"impossible\"\n    else:\n        return str(round(d * (k / n), 6))\n",
        "test": "assert solution(\"10 3\\n80 90\") == \"75.7142857\"",
        "num_ids": 116,
        "indeed": false
    },
    {
        "number": 4801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 2 3 1 5 4 7 6''')\n    4\n    >>> solution('''5\n   ... 1 2 3 4 5''')\n    5\n    >>> solution('''1\n   ... 2''')\n    1\n    \"\"\"\n    n = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    gis = [A[0]]\n    for i in range(1, n):\n        if A[i] > gis[-1]:\n            gis.append(A[i])\n        else:\n            left = 0\n            right = len(gis) - 1\n            while left <= right:\n                mid = (left + right) // 2\n                if gis[mid] < A[i]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            gis[left] = A[i]\n    return len(gis)\n",
        "test": "assert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 4802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split()\n    h, m = int(h), int(m)\n    h = h - 45\n    if h < 0:\n        h = 23 + h\n    m = m - 45\n    if m < 0:\n        m = 59 + m\n    return f'{h} {m}'",
        "test": "assert solution(\"0 30\") == \"23 45\"",
        "num_ids": 103,
        "indeed": false
    },
    {
        "number": 4803,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = float(stdin)\n    if N < 1 / math.e:\n        return str(math.e ** N)\n    else:\n        return str(math.e ** (N - 1))\n",
        "test": "assert solution('1.000000') == '1.000000'",
        "num_ids": 79,
        "indeed": false
    },
    {
        "number": 4804,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\")\n    '3:'\n    >>> solution(\"50\")\n    '50:'\n    >>> solution(\"1\")\n    '1:'\n    \"\"\"\n    return stdin + \":\"",
        "test": "assert solution(\"3\") == \"3:\", \"WA\"",
        "num_ids": 78,
        "indeed": false
    },
    {
        "number": 4805,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if len(set(stdin.split())) == len(stdin.split()) else \"no\"",
        "test": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"",
        "num_ids": 62,
        "indeed": true
    },
    {
        "number": 4806,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'SSKKKHHS'",
        "test": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"",
        "num_ids": 43,
        "indeed": false
    },
    {
        "number": 4807,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    for i in range(1, n + 1):\n        if i % x == 0 and i % y == 0:\n            print('FizzBuzz')\n        elif i % x == 0:\n            print('Fizz')\n        elif i % y == 0:\n            print('Buzz')\n        else:\n            print(i)\n    return ''",
        "test": "assert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\"",
        "num_ids": 168,
        "indeed": false
    },
    {
        "number": 4808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    d = list(map(int, stdin.split(' ')))\n    if d[m - 1] > m:\n        return 'It hadn\\'t snowed this early in 0 years!'\n    for i in range(m - 1, n):\n        if d[i] > d[i - 1]:\n            return 'It hadn\\'t snowed this early in {} years!'.format(i)\n    return 'It had never snowed this early!'\n",
        "test": "assert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 4809,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, n = map(int, stdin.split())\n    return str(n - 1)",
        "test": "assert solution('10 10') == '7'",
        "num_ids": 46,
        "indeed": false
    },
    {
        "number": 4810,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin",
        "test": "assert solution(\"bok\") == \"bok\"",
        "num_ids": 37,
        "indeed": false
    },
    {
        "number": 4811,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"7\") == \"8 3\"",
        "num_ids": 33,
        "indeed": false
    },
    {
        "number": 4812,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if the phrases rhyme with the common word, 'NO' otherwise.\"\"\"\n    # your code here\n    return 'YES'\n",
        "test": "assert solution(\"stairs\") == \"YES\"",
        "num_ids": 57,
        "indeed": false
    },
    {
        "number": 4813,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\")\n    'WIN'\n    >>> solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\")\n    'LOSE'\n    \"\"\"\n    word = stdin.split(\"\\n\")[0]\n    permutation = stdin.split(\"\\n\")[1]\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation)\n    permutation.sort()\n    permutation = \"\".join(permutation)\n    permutation = list(permutation",
        "test": "assert solution(\"BANANA\") == \"LOSE\"",
        "num_ids": 1501,
        "indeed": false
    },
    {
        "number": 4814,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\")\n    'DECREASING'\n    >>> solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\")\n    'NEITHER'\n    \"\"\"\n    names = [name.strip() for name in stdin.splitlines()]\n    names.sort()\n    if names == sorted(names):\n        return \"INCREASING\"\n    elif names == sorted(names, reverse=True):\n        return \"DECREASING\"\n    else:\n        return \"NEITHER\"\n",
        "test": "assert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 4815,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, p, m = [int(x) for x in stdin.split()]\n    scores = {}\n    for i in range(m):\n        name, score = stdin.split()\n        scores[name] = scores.get(name, 0) + int(score)\n    for name, score in scores.items():\n        if score >= p:\n            print(name)\n    if len(scores) == 0:\n        print('No winner!')\n    return ''",
        "test": "assert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\\nJess wins!\\nNo winner!\"",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 4816,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, x1, y1, x2, y2 = map(int, stdin.split())\n    if x1 < x2:\n        x1, x2 = x2, x1\n    if y1 < y2:\n        y1, y2 = y2, y1\n    if x1 == x2:\n        x1, x2 = x2 - 1, x1 + 1\n    if y1 == y2:\n        y1, y2 = y2 - 1, y1 + 1\n    if x1 < x2 and y1 < y2:\n        return str(max(abs(x - x1), abs(x - x2), abs(y - y1), abs(y - y2)))\n    else:\n        return str(max(abs(x - x1), abs(x - x2), abs(y - y1), abs(y - y2)))\n",
        "test": "assert solution(\"6 0 0 2 7 6\") == \"2.0\"",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 4817,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 10:\n        return str(x + 1)\n    else:\n        return str(int(stdin[0]) + 1) + '0' * (len(stdin) - 1)\n",
        "test": "assert solution('330') == '0'",
        "num_ids": 79,
        "indeed": false
    },
    {
        "number": 4818,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 4\n   ... 150000 100000 160000 100000 180000\n   ... 190000 170000 140000 160000\n   ... ''')\n    '4'\n    >>> solution('''4 4\n   ... 180000 185000 199999 100000\n   ... 199999 180000 170000 120000\n   ... ''')\n    '3'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    t = list(map(int, stdin.split('\\n')[1].split()))\n    l = list(map(int, stdin.split('\\n')[2].split()))\n    t.sort()\n    l.sort()\n    t_i = 0\n    l_j = 0\n    count = 0\n    while t_i < n and l_j < m:\n        if t[t_i] < l[l_j]:\n            count += 1\n            t_i += 1\n        else:\n            l_j += 1\n    return str(count)\n",
        "test": "assert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n\") == \"3\"",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 4819,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\")\n    '10'\n    >>> solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\")\n    '1'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\")\n    '6'\n    \"\"\"\n    return str(len(set(stdin.split())))\n",
        "test": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 4820,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, b = map(int, stdin.split())\n    return \"yes\" if N * 1000 <= b else \"no\"",
        "test": "assert solution('1 0') == 'yes'",
        "num_ids": 53,
        "indeed": false
    },
    {
        "number": 4821,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    cards = stdin.split()\n    suits = {'P': 0, 'K': 0, 'H': 0, 'T': 0}\n    for card in cards:\n        if len(card) == 3:\n            suit = card[0]\n            number = int(card[1:])\n        else:\n            suit = card[0]\n            number = int(card[1])\n        if number > 13:\n            number = 13\n        suits[suit] += number - 1\n    if suits['P'] == suits['K'] == suits['H'] == suits['T']:\n        return 'GRESKA'\n    return''.join(str(suits[suit]) for suit in suits)\n",
        "test": "assert solution(\"H02H10P11H02\") == \"GRESKA\"",
        "num_ids": 202,
        "indeed": false
    },
    {
        "number": 4822,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n\") == \"2\"",
        "num_ids": 83,
        "indeed": false
    },
    {
        "number": 4823,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"AC AD AH AS KD\")\n    4\n    >>> solution(\"2C 4D 4H 2D 2H\")\n    3\n    \"\"\"\n    cards = stdin.split()\n    cards = [card[0] + card[1] for card in cards]\n    cards.sort()\n    cards = \"\".join(cards)\n    return cards.count(cards[0])\n",
        "test": "assert solution(\"AC AD AH AS KD\") == 4",
        "num_ids": 124,
        "indeed": false
    },
    {
        "number": 4824,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n",
        "test": "assert solution(\"5 1\\n0 0 0 0 0\") == \"7\"",
        "num_ids": 48,
        "indeed": false
    },
    {
        "number": 4825,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.translate(str.maketrans(\n        'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n        '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.!'\n    ))\n",
        "test": "assert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"",
        "num_ids": 208,
        "indeed": false
    },
    {
        "number": 4826,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Alice\" if int(stdin) % 2 == 0 else \"Bob\"",
        "test": "assert solution(\"2\") == \"Bob\"",
        "num_ids": 40,
        "indeed": false
    },
    {
        "number": 4827,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\nthis\\nsentence\\nhas\\n$\\nletters\")\n    this sentence has thirtyone letters\n    >>> solution(\"7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere\")\n    thirty is the number of letters here\n    \"\"\"\n    words = stdin.split()\n    numbers = [\n        \"one\",\n        \"two\",\n        \"three\",\n        \"four\",\n        \"five\",\n        \"six\",\n        \"seven\",\n        \"eight\",\n        \"nine\",\n        \"ten\",\n        \"eleven\",\n        \"twelve\",\n        \"thirteen\",\n        \"fourteen\",\n        \"fifteen\",\n        \"sixteen\",\n        \"seventeen\",\n        \"eighteen\",\n        \"nineteen\",\n    ]\n    tens = [\n        \"twenty\",\n        \"thirty\",\n        \"forty\",\n        \"fifty\",\n        \"sixty\",\n        \"seventy\",\n        \"eighty\",\n        \"ninety\",\n    ]\n    hundreds = [\n        \"onehundred\",\n        \"twohundred\",\n        \"threehundred\",\n        \"fourhundred\",\n        \"fivehundred\",\n        \"sixhundred\",\n        \"sevenhundred\",\n        \"eighthundred\",\n        \"ninehundred\",\n    ]\n    thousands = [\"thousand\"]\n    numbers_to_words = {\n        \"1\": \"one\",\n        \"2\": \"two\",\n        \"3\": \"three\",\n        \"4\": \"four\",\n        \"5\": \"five\",\n        \"6\": \"six\",\n        \"7\": \"seven\",\n        \"8\": \"eight\",\n        \"9\": \"nine\",\n        \"10\": \"ten\",\n        \"11\": \"eleven\",\n        \"12\": \"twelve\",\n        \"13\": \"thirteen\",\n        \"14\": \"fourteen\",\n        \"15\": \"fifteen\",\n        \"16\": \"sixteen\",\n        \"17\": \"seventeen\",\n        \"18\": \"eighteen\",\n        \"19\": \"nineteen\",\n        \"20\": \"twenty\",\n        \"30\": \"thirty\",\n        \"40\": \"forty\",\n        \"50\": \"fifty\",\n        \"60\": \"sixty\",\n        \"70\": \"seventy\",\n        \"80\": \"eighty\",\n        \"90\": \"ninety\",\n    }\n    numbers_to_words_tens = {\n        \"2\": \"twenty\",\n        \"3\": \"thirty\",\n        \"4\": \"forty\",\n        \"5\": \"fifty\",\n        \"6\": \"sixty\",\n        \"7\": \"seventy\",\n        \"8\": \"eighty\",\n        \"9\": \"ninety\",\n    }\n    numbers_to_words_hundreds = {\n        \"1\": \"onehundred\",\n        \"2\": \"twohundred\",\n        \"3\": \"threehundred\",\n        \"4\": \"fourhundred\",\n        \"5\": \"fivehundred\",\n        \"6\": \"sixhundred\",\n        \"7\": \"sevenhundred\",\n        \"8\": \"eighthundred\",\n        \"9\": \"ninehundred\",\n    }\n    numbers_to_words_thousands = {\n        \"1\": \"thousand\",\n        \"2\": \"million\",\n        \"3\": \"billion\",\n        \"4\": \"trillion\",\n        \"5\": \"quadrillion\",\n        \"6\": \"quintillion\",\n        \"7\": \"sextillion\",\n        \"8\": \"septillion\",\n        \"9\": \"octillion\",\n        \"10\": \"nonillion\",\n        \"11\": \"decillion\",\n        \"12\": \"undecillion\",\n        \"13\": \"duodecillion\",\n        \"14\": \"tredecillion\",\n        \"15\": \"quattuordecillion\",\n        \"16\": \"quindecillion\",\n        \"17\": \"sexdecillion\",\n        \"18\": \"septend",
        "test": "assert solution(\"this sentence has thirtyone letters\") == \"this sentence has thirtyone letters\"",
        "num_ids": 1007,
        "indeed": false
    },
    {
        "number": 4828,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin) // 4)\n",
        "test": "assert solution(\"EaEbFabG\") == \"5\"",
        "num_ids": 40,
        "indeed": false
    },
    {
        "number": 4829,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    tines = [int(x) for x in stdin.split()]\n    if tines[0] == tines[1]:\n        return \"Even \" + str(tines[0] * 2)\n    elif tines[0] > tines[1]:\n        return \"Odd \" + str(tines[0] * 2 - 1)\n    else:\n        return \"Not a moose\"\n",
        "test": "assert solution(\"3 3\") == \"Even 6\"",
        "num_ids": 124,
        "indeed": false
    },
    {
        "number": 4830,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\nmono\\ndak\\n6666\")\n    '1'\n    >>> solution(\"2\\nja\\nla\\n52\")\n    '2'\n    \"\"\"\n   ...",
        "test": "assert solution(\"2\\nja\\nla\\n52\") == \"2\"",
        "num_ids": 91,
        "indeed": false
    },
    {
        "number": 4831,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([''.join([(i[0] if i % 3 == 0 else '*') for i in range(len(stdin))]) for _ in range(5)])",
        "test": "assert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"",
        "num_ids": 136,
        "indeed": false
    },
    {
        "number": 4832,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    return str(round(2 * math.pi * R ** 2, 6)) + '\\n' + str(round(2 * R * math.pi, 6))\n",
        "test": "assert solution(\"21\") == \"1385.442360\"",
        "num_ids": 78,
        "indeed": false
    },
    {
        "number": 4833,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    k = [int(x) for x in stdin.readline().split()]\n    return sum(k)",
        "test": "assert solution(\"5\\n129 44 394 253 147\") == \"0\"",
        "num_ids": 74,
        "indeed": false
    },
    {
        "number": 4834,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        ans += arr[i] * (n - i)\n    return str(ans)\n",
        "test": "assert solution(\"3\\n4 1 2\") == \"8\"",
        "num_ids": 114,
        "indeed": false
    },
    {
        "number": 4835,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    t, n, m = map(int, stdin.split())\n    grid = [list(stdin.split()) for _ in range(n)]\n    start = None\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'S':\n                start = (i, j)\n                break\n        if start:\n            break\n    if not start:\n        return 'NOT POSSIBLE'\n    queue = deque([start])\n    visited = set()\n    visited.add(start)\n    while queue:\n        i, j = queue.popleft()\n        if grid[i][j] == '1':\n            return 'NOT POSSIBLE'\n        if grid[i][j] == 'U':\n            if i == 0:\n                return 'NOT POSSIBLE'\n            if (i - 1, j) not in visited:\n                queue.append((i - 1, j))\n                visited.add((i - 1, j))\n        elif grid[i][j] == 'D':\n            if i == n - 1:\n                return 'NOT POSSIBLE'\n            if (i + 1, j) not in visited:\n                queue.append((i + 1, j))\n                visited.add((i + 1, j))\n        elif grid[i][j] == 'L':\n            if j == 0:\n                return 'NOT POSSIBLE'\n            if (i, j - 1) not in visited:\n                queue.append((i, j - 1))\n                visited.add((i, j - 1))\n        elif grid[i][j] == 'R':\n            if j == m - 1:\n                return 'NOT POSSIBLE'\n            if (i, j + 1) not in visited:\n                queue.append((i, j + 1))\n                visited.add((i, j + 1))\n    return len(visited)\n",
        "test": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 4836,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n",
        "test": "assert solution('7 5\\n1 5 4 3 2 1 1') == '3'",
        "num_ids": 49,
        "indeed": false
    },
    {
        "number": 4837,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"",
        "num_ids": 72,
        "indeed": false
    },
    {
        "number": 4838,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n7\\n11\\n\")\n    '4'\n    >>> solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\")\n   'still running'\n    \"\"\"\n    times = [int(line) for line in stdin.splitlines()]\n    times.sort()\n    current_time = 0\n    for time in times:\n        current_time += time\n        if current_time % 2 == 0:\n            current_time = 0\n    return str(current_time)\n",
        "test": "assert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\"",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 4839,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    c = [int(x) for x in stdin.readline().split()]\n    c.sort()\n    c.reverse()\n    if sum(c) < n:\n        return \"impossible\"\n    else:\n        return str(sum(c) / n)",
        "test": "assert solution(\"2\\n2 2\") == \"impossible\"",
        "num_ids": 113,
        "indeed": false
    },
    {
        "number": 4840,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 4 1 4\\n1 6 1 6\")\n    'Emma'\n    >>> solution(\"1 8 1 8\\n1 10 2 5\")\n    'Tie'\n    \"\"\"\n    a, b, c, d = map(int, stdin.split())\n    return \"Emma\" if a + b > c + d else \"Gunnar\" if a + b < c + d else \"Tie\"\n",
        "test": "assert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"",
        "num_ids": 144,
        "indeed": false
    },
    {
        "number": 4841,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = [int(i) if i!='mumble' else i for i in stdin.split()[1:]]\n    arr.sort()\n    if arr[0] == 1:\n        return'makes sense'\n    for i in range(1, n):\n        if arr[i] - arr[i - 1]!= 1:\n            return'something is fishy'\n    return'makes sense'",
        "test": "assert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"",
        "num_ids": 157,
        "indeed": false
    },
    {
        "number": 4842,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 3 6 9 12 15\\n4 9 25 49 81\")\n    '1 18\\n2 121'\n    \"\"\"\n    n, *values = map(int, stdin.split())\n    values = [values[i] - values[i - 1] for i in range(1, n)]\n    d = 1\n    while d < n:\n        if values[d] == values[d - 1]:\n            d += 1\n        else:\n            break\n    v = values[d]\n    for i in range(d + 1, n):\n        if values[i] == v:\n            v = values[i]\n        else:\n            break\n    return f\"{d} {v}\"\n",
        "test": "assert solution(\"4 9 25 49 81\") == \"2 121\"",
        "num_ids": 203,
        "indeed": false
    },
    {
        "number": 4843,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8\n   ... 1 5\n   ... 6 2\n   ... 3 1\n   ... 5 0\n   ... 4 6\n   ... 0 3\n   ... 2 7\n   ... 7 4''')\n    'CORRECT'\n    >>> solution('''4\n   ... 2 3\n   ... 1 0\n   ... 0 2\n   ... 3 1''')\n    'CORRECT'\n    >>> solution('''4\n   ... 2 3\n   ... 1 0\n   ... 0 2\n   ... 3 1''')\n    'INCORRECT'\n    \"\"\"\n   ...\n",
        "test": "assert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"",
        "num_ids": 209,
        "indeed": false
    },
    {
        "number": 4844,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.readline().split())))\n    \n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = sum([matrix[i][k] & matrix[k][j] for k in range(n)])\n    \n    return''.join(map(str, [max(row) for row in matrix]))\n",
        "test": "assert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"",
        "num_ids": 203,
        "indeed": false
    },
    {
        "number": 4845,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    day, month = map(int, stdin.split())\n    if day == 1:\n        if month == 1:\n            return \"Monday\"\n        elif month == 2:\n            return \"Tuesday\"\n        elif month == 3:\n            return \"Wednesday\"\n        elif month == 4:\n            return \"Thursday\"\n        elif month == 5:\n            return \"Friday\"\n        elif month == 6:\n            return \"Saturday\"\n        elif month == 7:\n            return \"Sunday\"\n        elif month == 8:\n            return \"Monday\"\n        elif month == 9:\n            return \"Tuesday\"\n        elif month == 10:\n            return \"Wednesday\"\n        elif month == 11:\n            return \"Thursday\"\n        elif month == 12:\n            return \"Friday\"\n    elif day == 2:\n        if month == 1:\n            return \"Tuesday\"\n        elif month == 2:\n            return \"Wednesday\"\n        elif month == 3:\n            return \"Thursday\"\n        elif month == 4:\n            return \"Friday\"\n        elif month == 5:\n            return \"Saturday\"\n        elif month == 6:\n            return \"Sunday\"\n        elif month == 7:\n            return \"Monday\"\n        elif month == 8:\n            return \"Tuesday\"\n        elif month == 9:\n            return \"Wednesday\"\n        elif month == 10:\n            return \"Thursday\"\n        elif month == 11:\n            return \"Friday\"\n        elif month == 12:\n            return \"Saturday\"\n    elif day == 3:\n        if month == 1:\n            return \"Wednesday\"\n        elif month == 2:\n            return \"Thursday\"\n        elif month == 3:\n            return \"Friday\"\n        elif month == 4:\n            return \"Saturday\"\n        elif month == 5:\n            return \"Sunday\"\n        elif month == 6:\n            return \"Monday\"\n        elif month == 7:\n            return \"Tuesday\"\n        elif month == 8:\n            return \"Wednesday\"\n        elif month == 9:\n            return \"Thursday\"\n        elif month == 10:\n            return \"Friday\"\n        elif month == 11:\n            return \"Saturday\"\n        elif month == 12:\n            return \"Sunday\"\n    elif day == 4:\n        if month == 1:\n            return \"Thursday\"\n        elif month == 2:\n            return \"Friday\"\n        elif month == 3:\n            return \"Saturday\"\n        elif month == 4:\n            return \"Sunday\"\n        elif month == 5:\n            return \"Monday\"\n        elif month == 6:\n            return \"Tuesday\"\n        elif month == 7:\n            return \"Wednesday\"\n        elif month == 8:\n            return \"Thursday\"\n        elif month == 9:\n            return \"Friday\"\n        elif month == 10:\n            return \"Saturday\"\n        elif month == 11:\n            return \"Sunday\"\n        elif month == 12:\n            return \"Monday\"\n    elif day == 5:\n        if month == 1:\n            return \"Friday\"\n        elif month == 2:\n            return \"Saturday\"\n        elif month == 3:\n            return \"Sunday\"\n        elif month == 4:\n            return \"Monday\"\n        elif month == 5:\n            return \"Tuesday\"\n        elif month == 6:\n            return \"Wednesday\"\n        elif month == 7:\n            return \"Thursday\"\n        elif month == 8:\n            return \"Friday\"\n        elif month == 9:\n            return \"Saturday\"\n        elif month == 10:\n            return \"Sunday\"\n        elif month == 11:\n            return \"Monday\"\n        elif month == 12:\n            return \"Tuesday\"\n    elif day == 6:\n        if month == 1:\n            return \"Saturday\"\n        elif month == 2:\n            return \"Sunday\"\n        elif month == 3:\n            return \"Monday\"\n        elif month == 4:\n            return \"Tuesday\"\n        elif month == 5:\n            return \"Wednesday\"\n        elif month == 6:\n            return \"Thursday\"\n        elif month == 7:\n            return \"Friday\"\n        elif month == 8:\n            return \"Saturday\"\n        elif month == 9:\n            return \"Sunday\"\n        elif month == 10:\n            return \"Monday\"\n        elif month == 11:\n            return \"Tuesday\"\n        elif month == 12:\n            return \"Wednesday\"\n    elif day == 7:\n        if month == 1:\n            return \"Sunday\"\n        elif month == 2:\n            return \"Monday\"\n        elif month == 3:\n            return \"Tuesday\"\n        elif month == 4:\n            return \"Wednesday\"\n        elif month == 5:\n            return \"Thursday\"\n        elif month == 6:\n            return \"Friday\"\n        elif month == 7:\n            return \"Saturday\"\n        elif month == 8:\n            return \"Sunday\"\n        elif month == 9:\n            return \"Monday\"\n        elif month == 10:\n            return \"Tuesday\"\n        elif month == 11:\n            return \"Wednesday\"\n        elif month == 12:\n            return \"Thursday\"\n    elif day == 8:\n        if month == 1:\n            return \"Monday\"\n        elif month == 2:\n            return \"Tuesday\"\n        elif month == 3:\n            return \"Wednesday\"\n        elif month == 4:\n            return \"Thursday\"\n        elif month == 5:\n            return \"Friday\"\n        elif month == 6:\n            return \"Saturday\"\n        elif month == 7:\n            return \"Sunday\"\n        elif month == 8:\n            return \"Monday\"\n        elif month == 9:\n            return \"Tuesday\"\n        elif month == 10:\n            return \"Wednesday\"\n        elif month == 11:\n            return \"Thursday\"\n        elif month == 12:\n            return \"Friday\"\n    elif day == 9:\n        if month == 1:\n            return \"Tuesday\"\n        elif month == 2:\n            return \"Wednesday\"\n        elif month == 3:\n            return \"Thursday\"\n        elif month == 4:\n            return \"Friday\"\n        elif month == 5:\n            return \"Saturday\"\n        elif month == 6:\n            return \"Sunday\"\n        elif month == 7:\n            return \"Monday\"\n        elif month == 8:\n            return \"Tuesday\"\n        elif month == 9:\n            return \"Wednesday\"\n        elif month == 10:\n            return \"Thursday\"\n        elif month == 11:\n            return \"Friday\"\n        elif month == 12:\n            return \"Saturday\"\n    elif day == 10:\n        if month == 1:\n            return \"Wednesday\"\n        elif month == 2:\n            return \"Thursday\"\n        elif month == 3:\n            return \"Friday\"\n        elif month == 4:\n            return \"Saturday\"\n        elif month == 5:\n            return \"Sunday\"\n        elif month == 6:\n            return \"Monday\"\n        elif month == 7:\n            return \"Tuesday\"\n        elif month == 8:\n            return \"Wednesday\"\n        elif month == 9:\n            return \"Thursday\"\n        elif month == 10:\n            return \"Friday\"\n        elif month == 11:\n            return \"Saturday\"\n        elif month == 12:\n            return \"Sunday\"\n    elif day == 11:\n        if month == 1:\n            return \"Thursday\"\n        elif month == 2:\n            return \"Friday\"\n        elif month == 3:\n            return \"Saturday\"\n        elif month == 4:\n            return \"Sunday\"\n        elif month == 5:\n            return \"Monday\"\n        elif month == 6:\n            return \"Tuesday\"\n        elif month ==",
        "test": "assert solution(\"17 1\") == \"Saturday\"",
        "num_ids": 1883,
        "indeed": false
    },
    {
        "number": 4846,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin.readline())\n    D = int(stdin.readline())\n    X = int(stdin.readline())\n    N = 0\n    M = 0\n    while N < L or N > D:\n        if sum(map(int, str(N))) == X:\n            break\n        N += 1\n    while M < L or M > D:\n        if sum(map(int, str(M))) == X:\n            break\n        M += 1\n    return str(N) + '\\n' + str(M)\n",
        "test": "assert solution('100\\n500\\n12\\n') == '129\\n480'",
        "num_ids": 176,
        "indeed": false
    },
    {
        "number": 4847,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"",
        "num_ids": 93,
        "indeed": false
    },
    {
        "number": 4848,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 1\n    while m * n % 2 == 0:\n        m += 1\n    return str(m)\n",
        "test": "assert solution('30') == '7'",
        "num_ids": 58,
        "indeed": false
    },
    {
        "number": 4849,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\")\n    '1\\nHE GOT AWAY!'\n    \"\"\"\n    cis = set()\n    for line in stdin.splitlines():\n        if \"FBI\" in line:\n            cis.add(line)\n    if cis:\n        return \" \".join(str(i) for i in sorted(cis))\n    return \"HE GOT AWAY!\"\n",
        "test": "assert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"",
        "num_ids": 214,
        "indeed": false
    },
    {
        "number": 4850,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 3 3 3\n   ... 4 5 4''')\n    '8.0'\n    \"\"\"\n   ...",
        "test": "assert solution(\"2\\n3 3 3\\n4 5 4\") == \"6.843530573929037\"",
        "num_ids": 66,
        "indeed": false
    },
    {
        "number": 4851,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    harshad_numbers = []\n    for i in range(1, n + 1):\n        if i % sum(map(int, str(i))) == 0:\n            harshad_numbers.append(i)\n    return min(harshad_numbers)\n",
        "test": "assert solution('25') == '27'",
        "num_ids": 96,
        "indeed": false
    },
    {
        "number": 4852,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1+9+8+4\")\n    7\n    >>> solution(\"1+2+3+4+5+6+7+8+9\")\n    188\n    \"\"\"\n    nums = stdin.split(\"+\")\n    return str(sum(int(num) for num in nums))\n",
        "test": "assert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"",
        "num_ids": 120,
        "indeed": false
    },
    {
        "number": 4853,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 5 2\\n\")\n    '2 5'\n    >>> solution(\"2 2 -4 5\\n\")\n    '5 -2 4'\n    \"\"\"\n    n, *coefficients = map(int, stdin.split())\n    constants = [0] * (n + 1)\n    constants[0] = coefficients[0]\n    for i in range(1, n + 1):\n        constants[i] = constants[i - 1] + coefficients[i - 1]\n    return \" \".join(map(str, constants))\n",
        "test": "assert solution(\"2 2 -4 5\") == \"5 -2 4\"",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 4854,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    return''.join(map(str, arr))",
        "test": "assert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"",
        "num_ids": 101,
        "indeed": false
    },
    {
        "number": 4855,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, i = map(int, stdin.split())\n    return str(max(0, i - a + 1))",
        "test": "assert solution('1 100') == '100'",
        "num_ids": 52,
        "indeed": false
    },
    {
        "number": 4856,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a, b = int(a[::-1]), int(b[::-1])\n    return str(max(a, b))[::-1]",
        "test": "assert solution(\"221 231\") == \"132\"",
        "num_ids": 73,
        "indeed": false
    },
    {
        "number": 4857,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, w = map(int, stdin.split())\n    if l == 0 or w == 0:\n        return \"impossible\"\n    if w < 26:\n        return \"impossible\"\n    if l == 1:\n        return \"a\" * w\n    if w == 26:\n        return \"z\" * l\n    return \"impossible\"",
        "test": "assert solution('7 96') == 'contest'",
        "num_ids": 108,
        "indeed": false
    },
    {
        "number": 4858,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 2 'X'\n   ... X^\n   ... --\n   ...\n   ....X\n   ... --''')\n    '.^\n    --\n    \n    >>> solution('''3 12 'A'\n   ... ABABABABABAC\n   ... BABABABABABB\n   ... ABABABABABAB\n   ...\n   ... BABABABABABA\n   ... BBABABABABAB\n   ... BABABABABABA\n   ... ''')\n    BBABABABABAC\n    BBBABABABABA\n    BBABABABABAB\n    \"\"\"\n    m, n, c = map(ord, stdin.split())\n    m, n = m - 1, n - 1\n    a = [list(stdin[i]) for i in range(m, m + n + 1)]\n    b = [list(stdin[i]) for i in range(m + n + 1, m + 2 * n + 2)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= c:\n                a[i][j] = b[i][j] = c\n    return '\\n'.join(''.join(i) for i in a + b)\n",
        "test": "assert solution('''2 2 'X'",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 4859,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    b, d, c, l = [int(x) for x in stdin.split()]\n    if l % b!= 0:\n        return \"impossible\"\n    if l % (b + d)!= 0:\n        return \"impossible\"\n    if l % (b + c)!= 0:\n        return \"impossible\"\n    if l % (d + c)!= 0:\n        return \"impossible\"\n    if l % (b + d + c)!= 0:\n        return \"impossible\"\n    return \" \".join([str(l // (b + d + c))] + [str(l // (b + d) % b)] + [str(l // (b + c) % d)])\n",
        "test": "assert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 4860,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = [int(stdin) for stdin in stdin.split('\\n')]\n    numbers.sort()\n    for i in range(1, n):\n        if numbers[i] - numbers[i - 1]!= 1:\n            print(numbers[i] - 1)\n            break\n    else:\n        print('good job')\n    return ''",
        "test": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"1\\n3\\n6\\n12\"",
        "num_ids": 183,
        "indeed": false
    },
    {
        "number": 4861,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s, v = [float(x) for x in stdin.split()]\n    return str(round(s * (1 + 1 / n) / v, 6))\n",
        "test": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"",
        "num_ids": 78,
        "indeed": false
    },
    {
        "number": 4862,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)",
        "test": "assert solution('2') == '1'",
        "num_ids": 28,
        "indeed": false
    },
    {
        "number": 4863,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    answers = [stdin.readline() for _ in range(n)]\n    return sum(answers.count(i) for i in 'ABCD')",
        "test": "assert solution(\"4\\nB\\nB\\nB\\nA\") == \"0\"",
        "num_ids": 96,
        "indeed": false
    },
    {
        "number": 4864,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"",
        "num_ids": 89,
        "indeed": false
    },
    {
        "number": 4865,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"F 60 13 20\")\n    14 20\n    \"\"\"\n    # Get the input\n    input_list = stdin.split(\"\\n\")\n    # Get the input\n    for i in range(len(input_list)):\n        input_list[i] = input_list[i].split()\n    # Get the output\n    for i in range(len(input_list)):\n        if input_list[i][0] == \"F\":\n            input_list[i][2] = str(int(input_list[i][2]) + int(input_list[i][1]))\n            if int(input_list[i][2]) > 59:\n                input_list[i][1] = str(int(input_list[i][2]) - 60)\n                input_list[i][2] = \"0\"\n            if int(input_list[i][1]) > 59:\n                input_list[i][0] = str(int(input_list[i][1]) - 60)\n                input_list[i][1] = \"0\"\n        elif input_list[i][0] == \"B\":\n            input_list[i][2] = str(int(input_list[i][2]) - int(input_list[i][1]))\n            if int(input_list[i][2]) < 0:\n                input_list[i][1] = str(int(input_list[i][2]) + 60)\n                input_list[i][2] = \"0\"\n            if int(input_list[i][1]) < 0:\n                input_list[i][0] = str(int(input_list[i][1]) + 60)\n                input_list[i][1] = \"0\"\n    # Get the output\n    for i in range(len(input_list)):\n        input_list[i] = \" \".join(input_list[i])\n    # Return the output\n    return \"\\n\".join(input_list)\n",
        "test": "assert solution(\"B 60 13 20\") == \"13 20\"",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 4866,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"OCT 31\")\n    'yup'\n    >>> solution(\"SEP 9\")\n    'nope'\n    \"\"\"\n    month, day = stdin.split()\n    month = month.upper()\n    day = int(day)\n    if month == \"OCT\" and day == 31:\n        return \"yup\"\n    elif month == \"DEC\" and day == 25:\n        return \"yup\"\n    else:\n        return \"nope\"\n",
        "test": "assert solution(\"OCT 31\") == \"yup\"",
        "num_ids": 143,
        "indeed": true
    },
    {
        "number": 4867,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split(' '))\n    u, l, r, d = map(int, stdin.split(' '))\n    puzzle = [stdin.split('\\n')[i] for i in range(1, m + 1)]\n    result = []\n    for i in range(m):\n        result.append('#' * n)\n    for i in range(m):\n        for j in range(n):\n            if i == 0:\n                if j == 0:\n                    result[i] = result[i][:l] + puzzle[i][j] + result[i][l + 1:]\n                elif j == n - 1:\n                    result[i] = result[i][:l] + puzzle[i][j] + result[i][l + 1:]\n                else:\n                    result[i] = result[i][:l] + puzzle[i][j] + result[i][l + 1:]\n            elif i == m - 1:\n                if j == 0:\n                    result[i] = result[i][:r] + puzzle[i][j] + result[i][r + 1:]\n                elif j == n - 1:\n                    result[i] = result[i][:r] + puzzle[i][j] + result[i][r + 1:]\n                else:\n                    result[i] = result[i][:r] + puzzle[i][j] + result[i][r + 1:]\n            else:\n                if j == 0:\n                    result[i] = result[i][:l] + puzzle[i][j] + result[i][l + 1:]\n                elif j == n - 1:\n                    result[i] = result[i][:l] + puzzle[i][j] + result[i][l + 1:]\n                else:\n                    result[i] = result[i][:l] + puzzle[i][j] + result[i][l + 1:]\n    for i in range(m):\n        if i == 0:\n            result[i] = result[i][:d] + '#' * u + result[i][d + 1:]\n        elif i == m - 1:\n            result[i] = result[i][:d] + '#' * u + result[i][d + 1:]\n        else:\n            result[i] = result[i][:d] + '#' * u + result[i][d + 1:]\n    return '\\n'.join(result)\n",
        "test": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#\"",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 4868,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\")\n    '+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+'\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    white = stdin[0].split(\",\")\n    black = stdin[1].split(\",\")\n    white_pieces = {\n        \"p\": \"Pawn\",\n        \"r\": \"Rook\",\n        \"n\": \"Knight\",\n        \"b\": \"Bishop\",\n        \"q\": \"Queen\",\n        \"k\": \"King\",\n        \"P\": \"Pawn\",\n        \"R\": \"Rook\",\n        \"N\": \"Knight\",\n        \"B\": \"Bishop\",\n        \"Q\": \"Queen\",\n        \"K\": \"King\",\n    }\n    black_pieces = {\n        \"p\": \"Pawn\",\n        \"r\": \"Rook\",\n        \"n\": \"Knight\",\n        \"b\": \"Bishop\",\n        \"q\": \"Queen\",\n        \"k\": \"King\",\n        \"P\": \"Pawn\",\n        \"R\": \"Rook\",\n        \"N\": \"Knight\",\n        \"B\": \"Bishop\",\n        \"Q\": \"Queen\",\n        \"K\": \"King\",\n    }\n    board = []\n    for i in range(8):\n        row = []\n        for j in range(8):\n            if (i + j) % 2 == 0:\n                row.append(white_pieces[white[i * 8 + j]])\n            else:\n                row.append(black_pieces[black[i * 8 + j]])\n        board.append(row)\n    return \"\\n\".join([\"\".join(row) for row in board])\n",
        "test": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\"",
        "num_ids": 1914,
        "indeed": false
    },
    {
        "number": 4869,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, N = map(float, stdin.split())\n    if A < N:\n        return \"Need more materials!\"\n    return \"Diablo is happy!\"",
        "test": "assert solution(\"1.000000 5.000000\") == \"Need more materials!\"",
        "num_ids": 74,
        "indeed": false
    },
    {
        "number": 4870,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    f, s, g, u, d = [int(x) for x in stdin.split()]\n    if s > g:\n        return \"use the stairs\"\n    elif s == g:\n        return 0\n    elif u > f:\n        return \"use the stairs\"\n    elif u == f:\n        return u\n    elif d > f:\n        return \"use the stairs\"\n    elif d == f:\n        return d\n    else:\n        return u + (g - s)",
        "test": "assert solution(\"10 1 10 2 2\") == \"use the stairs\"",
        "num_ids": 153,
        "indeed": false
    },
    {
        "number": 4871,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    scores = [int(x) for x in stdin.readline().split()]\n    scores.sort()\n    group_score = 0\n    for i in range(n):\n        group_score += scores[i] * (4 / 5) ** i\n    group_score /= 5\n    print(group_score)\n    print(sum([(scores[i] * (4 / 5) ** i) / (5 - i) for i in range(n)]) / n)\n    return \"\"",
        "test": "assert solution(\"3\\n500\\n120\\n75\\n100\") == \"89.06666666666666\"",
        "num_ids": 181,
        "indeed": false
    },
    {
        "number": 4872,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = [int(x) for x in stdin.readline().split()]\n    d.sort()\n    count = 0\n    for i in range(n):\n        if d[i] > 20:\n            break\n        count += 1\n    return count",
        "test": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"",
        "num_ids": 92,
        "indeed": false
    },
    {
        "number": 4873,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    width, height = map(int, stdin.split())\n    grid = [list(stdin[i:i + width]) for i in range(0, len(stdin), width)]\n    player_row, player_col = 0, 0\n    for row in range(height):\n        for col in range(width):\n            if grid[row][col] == 'P':\n                player_row, player_col = row, col\n    gold_count = 0\n    for row in range(height):\n        for col in range(width):\n            if grid[row][col] == 'G':\n                gold_count += 1\n                grid[row][col] = '.'\n                if row == player_row:\n                    if col < player_col:\n                        if grid[row][col + 1] == '.':\n                            grid[row][col + 1] = 'T'\n                    elif col > player_col:\n                        if grid[row][col - 1] == '.':\n                            grid[row][col - 1] = 'T'\n                elif row < player_row:\n                    if col == player_col:\n                        if grid[row + 1][col] == '.':\n                            grid[row + 1][col] = 'T'\n                    elif col < player_col:\n                        if grid[row + 1][col + 1] == '.':\n                            grid[row + 1][col + 1] = 'T'\n                    elif col > player_col:\n                        if grid[row + 1][col - 1] == '.':\n                            grid[row + 1][col - 1] = 'T'\n                elif row > player_row:\n                    if col == player_col:\n                        if grid[row - 1][col] == '.':\n                            grid[row - 1][col] = 'T'\n                    elif col < player_col:\n                        if grid[row - 1][col + 1] == '.':\n                            grid[row - 1][col + 1] = 'T'\n                    elif col > player_col:\n                        if grid[row - 1][col - 1] == '.':\n                            grid[row - 1][col - 1] = 'T'\n    return gold_count",
        "test": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"",
        "num_ids": 552,
        "indeed": false
    },
    {
        "number": 4874,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''13 50\n   ... ____$$$_______$$$______$$$________$$$______$$$____\n   ... ____$$$_______$$$______$$$________$$$______$$$____\n   ... _____$_________$________$__________$________$_____\n   ... ___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\n   ... __$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\n   ... _$____$$____$__$__$___$$____$___$__$__$___$$____$_\n   ... $_____$$___$___$__$$_____$_$___$___$__$$_____$_$\n   ... _____$_$______$_$_____$_$_________$_$_____$_$_____\n   ... ____$___$____$___$____$___$______$___$____$___$___\n   ... ___$____$___$_____$___$____$____$_____$___$____$__\n   ... __$_____$___$_____$___$_____$___$_____$___$_____$_\n   ... __$_____$___$_____$___$_____$___$_____$___$_____$_\n   ... _$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\n   ... ''')\n    5\n    \"\"\"\n    n, m = map(int, stdin.split())\n    grid = [list(stdin.split()[i]) for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m)] for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m)] for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m)] for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m)] for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m)] for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m)] for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m)] for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m)] for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m)] for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m)] for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m)] for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m)] for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m)] for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m)] for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m)] for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m)] for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m)] for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m)] for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m)] for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m)] for i in range(n)]\n    grid = [['_' if grid[i][j] == '_' else '$' for j in range(m",
        "test": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == \"5\"",
        "num_ids": 1471,
        "indeed": false
    },
    {
        "number": 4875,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"",
        "num_ids": 33,
        "indeed": false
    },
    {
        "number": 4876,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"Anywhere is fine I guess\"",
        "num_ids": 105,
        "indeed": false
    },
    {
        "number": 4877,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    return h // (a - b) - 1\n",
        "test": "assert solution(\"5 0 15\") == \"3\"",
        "num_ids": 42,
        "indeed": false
    },
    {
        "number": 4878,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    r1, s = map(int, stdin.split())\n    r2 = (r1 + s) // 2\n    return str(r2)",
        "test": "assert solution(\"11 15\") == \"19\"",
        "num_ids": 48,
        "indeed": false
    },
    {
        "number": 4879,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    if a == b or a == c:\n        return \"Yes\"\n    elif a == \"North\" and b == \"East\" and c == \"West\":\n        return \"Yes\"\n    elif a == \"South\" and b == \"West\" and c == \"East\":\n        return \"Yes\"\n    elif a == \"East\" and b == \"North\" and c == \"South\":\n        return \"Yes\"\n    elif a == \"West\" and b == \"South\" and c == \"North\":\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution(\"South West East\") == \"Yes\"",
        "num_ids": 173,
        "indeed": true
    },
    {
        "number": 4880,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    key = stdin[:n]\n    ciphertext = stdin[n:]\n    plaintext = ''\n    for i in range(m):\n        plaintext += chr(ord(ciphertext[i]) - ord(key[i % n]) + ord('a'))\n    return plaintext\n",
        "test": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"",
        "num_ids": 116,
        "indeed": false
    },
    {
        "number": 4881,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "test": "assert solution('2') == 'Odd'",
        "num_ids": 56,
        "indeed": false
    },
    {
        "number": 4882,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 314\n   ... 1\n   ... 5926\n   ... 5\n   ... 35897''')\n    3\n    1\n    4\n    1\n    5\n    \"\"\"\n   ...",
        "test": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"",
        "num_ids": 96,
        "indeed": false
    },
    {
        "number": 4883,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"9 5\\n\"\n   ... \"c t\\n\"\n   ... \"i r\\n\"\n   ... \"k p\\n\"\n   ... \"o c\\n\"\n   ... \"r o\\n\"\n   ... \"t e\\n\"\n   ... \"t f\\n\"\n   ... \"u h\\n\"\n   ... \"w p\\n\"\n   ... \"we we\\n\"\n   ... \"can the\\n\"\n   ... \"work people\\n\"\n   ... \"it of\\n\"\n   ... \"out the\\n\")\n    'yes\\n'\n    \"\"\"\n   ...",
        "test": "assert solution(\"9 5\\n\"",
        "num_ids": 170,
        "indeed": false
    },
    {
        "number": 4884,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin",
        "test": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == 1",
        "num_ids": 30,
        "indeed": false
    },
    {
        "number": 4885,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split('\\n')\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line) for line in board]\n    board = [list(line",
        "test": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"Black: Ke8,Qd8",
        "num_ids": 1899,
        "indeed": false
    },
    {
        "number": 4886,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < n:\n        return \"Your wish is granted!\"\n    return \"You will become a flying monkey!\"",
        "test": "assert solution('8 3') == 'Your wish is granted!'",
        "num_ids": 72,
        "indeed": false
    },
    {
        "number": 4887,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)",
        "test": "assert solution('16') == '16'",
        "num_ids": 18,
        "indeed": false
    },
    {
        "number": 4888,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 180\n   ... 45 30 55 20 80 20''')\n    4\n    \"\"\"\n    n, T = map(int, stdin.split())\n    tasks = list(map(int, stdin.split()))\n    tasks.sort()\n    tasks = tasks[::-1]\n    count = 0\n    for task in tasks:\n        if T >= task:\n            T -= task\n            count += 1\n    return count\n",
        "test": "assert solution(\"4 180\\n45 30 55 20 80 20\") == \"4\"",
        "num_ids": 132,
        "indeed": false
    },
    {
        "number": 4889,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [int(stdin) for stdin in stdin.split('\\n')]\n    l.sort()\n    l.reverse()\n    return sum(l)",
        "test": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"",
        "num_ids": 73,
        "indeed": false
    },
    {
        "number": 4890,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = [int(x) for x in stdin.split()]\n    fridge = [int(x) for x in stdin.split()]\n    fridge.sort()\n    if n > m:\n        return \"impossible\"\n    if n == m:\n        return \" \".join([str(x) for x in fridge])\n    if n == 1:\n        return \" \".join([str(x) for x in fridge])\n    if n == 2:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 3:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 4:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 5:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 6:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 7:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 8:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 9:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 10:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 11:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 12:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 13:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 14:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 15:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 16:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 17:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 18:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 19:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 20:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 21:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 22:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 23:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 24:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 25:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 26:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 27:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 28:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 29:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 30:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"\n    if n == 31:\n        if fridge[0] == d:\n            return \" \".join([str(x) for x in fridge])\n        else:\n            return \"impossible\"",
        "test": "assert solution(\"5 3 3 4\\n0 1 4\\n0 1 4\") == \"impossible\"",
        "num_ids": 1474,
        "indeed": false
    },
    {
        "number": 4891,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return''.join(map(str, solution(stdin.split())))",
        "test": "assert solution(\"0 1 2 2 2 8\") == \"0 0 0 0 0 0\"",
        "num_ids": 65,
        "indeed": false
    },
    {
        "number": 4892,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 123456 0.6666\n   ... qwerty 0.3334''')\n    '1.3334'\n    \"\"\"\n    pass",
        "test": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"",
        "num_ids": 74,
        "indeed": false
    },
    {
        "number": 4893,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split('\\n')]\n    cars = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    return str(min([x for x in cars if x >= p]))\n",
        "test": "assert solution(\"3 1\\n1 2 4\") == \"1\"",
        "num_ids": 85,
        "indeed": false
    },
    {
        "number": 4894,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\")\n    G:\n    F: -------------------------------------*--------------------\n    E:       *   *          *             *   *                  \n    D: ----*-------**-----*-------------*-------*----------------\n    C: * *     *      * *     **    * *           *         ** **\n    B: --------------------------**-----------------*-----*------\n    A:                                                  *        \n    g: -----------------------------------------------*----------\n    f:                                                           \n    e: ----------------------------------------------------------\n    d:                                                           \n    c:                                                           \n    b:                                                           \n    a: ----------------------------------------------------------\n    \"\"\"\n    pass",
        "test": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 4895,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sticks = [int(x) for x in stdin.readline().split()]\n    sticks.sort()\n    if sticks[0] + sticks[1] <= sticks[2]:\n        return \"impossible\"\n    return \"possible\"",
        "test": "assert solution(\"3\\n1 1 1\") == \"possible\"",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 4896,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\"",
        "num_ids": 33,
        "indeed": false
    },
    {
        "number": 4897,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''ASHMEADE 9.90 8.85\n   ... BLAKE 9.69 8.72\n   ... BOLT 9.58 8.43\n   ... CARTER 9.78 8.93\n   ... FRATER 9.88 8.92\n   ... POWELL 9.72 8.61''')\n    '35.54'\n    \"\"\"\n   ...\n",
        "test": "assert solution(\"6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE\"",
        "num_ids": 187,
        "indeed": false
    },
    {
        "number": 4898,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution(\"3\\n1 2\\n2 4\\n5 6\") == \"2\"",
        "num_ids": 33,
        "indeed": false
    },
    {
        "number": 4899,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('hey', 'hee' * 2)",
        "test": "assert solution(\"heeeeee\") == \"heehee\"",
        "num_ids": 40,
        "indeed": false
    },
    {
        "number": 4900,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 0 1 1 2\n   ... 1 0 2 3\n   ... 1 2 0 3\n   ... 2 3 3 0''')\n    '1 2\\n1 3\\n1 4'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    roads = [[0] * n for _ in range(n)]\n    for i in range(n):\n        roads[i][i] = 0\n    for line in stdin.split('\\n')[1:]:\n        u, v, w = map(int, line.split())\n        roads[u - 1][v - 1] = w\n        roads[v - 1][u - 1] = w\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                roads[i][j] = min(roads[i][j], roads[i][k] + roads[k][j])\n    return '\\n'.join(map(lambda x:''.join(map(str, x)), roads))\n",
        "test": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 4901,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Decrypts a string of characters encrypted with the DRM algorithm.\n\n    Args:\n        stdin (str): The encrypted string.\n\n    Returns:\n        str: The decrypted string.\n    \"\"\"\n    # Split the string into two halves.\n    first_half, second_half = stdin[:len(stdin) // 2], stdin[len(stdin) // 2:]\n\n    # Calculate the rotation value for each half.\n    first_half_rotation = sum(ord(char) - ord('A') for char in first_half)\n    second_half_rotation = sum(ord(char) - ord('A') for char in second_half)\n\n    # Rotate each half.\n    first_half_rotated = rotate_string(first_half, first_half_rotation)\n    second_half_rotated = rotate_string(second_half, second_half_rotation)\n\n    # Merge the halves.\n    return rotate_string(first_half_rotated + second_half_rotated, first_half_rotation + second_half_rotation)\n\n\ndef",
        "test": "assert solution(\"WKJKJKJK\") == \"ABCD\"",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 4902,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"abccba\") == 0",
        "num_ids": 23,
        "indeed": false
    },
    {
        "number": 4903,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    aaah = stdin[0]\n    doctor = stdin[1]\n    if len(aaah) < len(doctor):\n        return \"no\"\n    elif len(aaah) == len(doctor):\n        return \"go\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"aaah\") == \"go\"",
        "num_ids": 90,
        "indeed": false
    },
    {
        "number": 4904,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'A' if 'A' * 11 in stdin else 'B'",
        "test": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"",
        "num_ids": 69,
        "indeed": false
    },
    {
        "number": 4905,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the least amount of time Luka needs to make his delivery, if he starts driving $K$ minutes after the arrival of Mister George.\n\n    >>> solution(\"6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\")\n    21\n    \"\"\"\n    n, m, k, g = map(int, stdin.split())\n    intersections = [Intersection(i) for i in range(1, n + 1)]\n    streets = [Street(i, j, k) for i, j, k in zip(stdin.split()[1::3], stdin.split()[2::3], stdin.split()[3::3])]\n    for i in range(m):\n        a, b, l = map(int, stdin.split()[i * 3 + 4::3])\n        streets[i].length = l\n        intersections[a - 1].streets.append(streets[i])\n        intersections[b - 1].streets.append(streets[i])\n    for i in range(g):\n        intersections[i].visited = True\n    intersections[0].visited = True\n    intersections[g - 1].visited = True\n    intersections[0].time = 0\n    intersections[g - 1].time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min_time = 0\n    intersections[g - 1].min_time = 0\n    intersections[0].min",
        "test": "assert solution(\"4 5\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"",
        "num_ids": 1411,
        "indeed": false
    },
    {
        "number": 4906,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"E HHHeellloWooorrrrlld!!\\n\")\n    'H3e2l3o1W1o3r4l2d1!2'\n    \"\"\"\n    command, message = stdin.split(\"\\n\")[0], stdin.split(\"\\n\")[1]\n    if command == \"E\":\n        return run_length_encoding(message)\n    return run_length_decoding(message)\n\n\ndef",
        "test": "assert solution(\"D HHHeellloWooorrrrlld!!\") == \"HHHeellloWooorrrrlld!!\"",
        "num_ids": 187,
        "indeed": false
    },
    {
        "number": 4907,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"Alice\"\n    else:\n        return \"Bob\"",
        "test": "assert solution(\"2\") == \"Alice\"",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4908,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return f'{a}+{b}={c}'",
        "test": "assert solution(\"5 3 8\") == \"5+3=8\"",
        "num_ids": 65,
        "indeed": false
    },
    {
        "number": 4909,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    D = [int(x) for x in stdin.readline().split()]\n    if N == 1:\n        return \"YES\"\n    if N == 2:\n        if D[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if N == 3:\n        if D[0] == 1 and D[1] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if N == 4:\n        if D[0] == 1 and D[1] == 1 and D[2] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if N == 5:\n        if D[0] == 1 and D[1] == 1 and D[2] == 1 and D[3] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if N == 6:\n        if D[0] == 1 and D[1] == 1 and D[2] == 1 and D[3] == 1 and D[4] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if N == 7:\n        if D[0] == 1 and D[1] == 1 and D[2] == 1 and D[3] == 1 and D[4] == 1 and D[5] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if N == 8:\n        if D[0] == 1 and D[1] == 1 and D[2] == 1 and D[3] == 1 and D[4] == 1 and D[5] == 1 and D[6] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if N == 9:\n        if D[0] == 1 and D[1] == 1 and D[2] == 1 and D[3] == 1 and D[4] == 1 and D[5] == 1 and D[6] == 1 and D[7] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if N == 10:\n        if D[0] == 1 and D[1] == 1 and D[2] == 1 and D[3] == 1 and D[4] == 1 and D[5] == 1 and D[6] == 1 and D[7] == 1 and D[8] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if N == 11:\n        if D[0] == 1 and D[1] == 1 and D[2] == 1 and D[3] == 1 and D[4] == 1 and D[5] == 1 and D[6] == 1 and D[7] == 1 and D[8] == 1 and D[9] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if N == 12:\n        if D[0] == 1 and D[1] == 1 and D[2] == 1 and D[3] == 1 and D[4] == 1 and D[5] == 1 and D[6] == 1 and D[7] == 1 and D[8] == 1 and D[9] == 1 and D[10] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if N == 13:\n        if D[0] == 1 and D[1] == 1 and D[2] == 1 and D[3] == 1 and D[4] == 1 and D[5] == 1 and D[6] == 1 and D[7] == 1 and D[8] == 1 and D[9] == 1 and D[10] == 1 and D[11] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if N == 14:\n        if D[0] == 1 and D[1] == 1 and D[2] == 1 and D[3] == 1 and D[4] == 1 and D[5] == 1 and D[6] == 1 and D[7] == 1 and D[8] == 1 and D[9] == 1 and D[10] == 1 and D[11] == 1 and D[12] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if N == 15:\n        if D[0] == 1 and D[1] == 1 and D[2] == 1 and D[3] == 1 and D[4] == 1 and D[5] == 1 and D[6] == 1 and D[7] == 1 and D[8] == 1 and D[9] == 1 and D[10] == 1 and D[11] == 1 and D[12] == 1 and D[13] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if N == 16:\n        if D[0] == 1 and D[1] == 1 and D[2] == 1 and D[3] == 1 and D[4] == 1 and D[5] == 1 and D[6] == 1 and D[7] == 1 and D[8] == 1 and D[9] == 1 and D[10] == 1 and D[11] == 1 and D[12] == 1 and D[13] == 1 and D[14] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if N == 17:\n        if D[0] == 1 and D[1] == 1 and D[2] == 1 and D[3] == 1 and D[4] == 1 and D[5] == 1 and D[6] == 1 and D[7] == 1 and D[8] == 1 and D[9] == 1 and D[10] == 1 and D[11] == 1 and D[12] == 1 and D[13] == 1 and D[14] == 1 and D[15] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if N == 18:\n        if D[0] == 1 and D[1] == 1 and D[2] == 1 and D[3] == 1 and D[4] == 1 and D[5] == 1 and D[6] == 1 and D[7] == 1 and D[8] == 1 and D[9] == 1 and D[10] == 1 and D[11] == 1 and D[12] == 1 and D[13] == 1 and D[14] == 1 and D[15] == 1 and D[16] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if N == 19:\n        if D[0] == 1 and D[1] == 1 and D[2] == 1 and D[3] == 1 and D[",
        "test": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"",
        "num_ids": 1639,
        "indeed": false
    },
    {
        "number": 4910,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n    'ghost'\n    >>> solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\")\n",
        "test": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"mummy\"",
        "num_ids": 1712,
        "indeed": false
    },
    {
        "number": 4911,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\\n\")\n    'Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n'\n    \"\"\"\n    # Get the list of attributes\n    attributes = stdin.split(\"\\n\")[0].split(\" \")\n    # Get the number of songs\n    n = int(stdin.split(\"\\n\")[1])\n    # Get the list of songs\n    songs = stdin.split(\"\\n\")[2:]\n    # Sort the songs by the first attribute\n    songs.sort()\n    # Sort the songs by the second attribute\n    songs.sort(key=lambda x: x.split(\" \")[attributes.index(\"Album\")])\n    # Sort the songs by the third attribute\n    songs.sort(key=lambda x: x.split(\" \")[attributes.index(\"Song_Title\")])\n    # Sort the songs by the fourth attribute\n    songs.sort(key=lambda x: x.split(\" \")[attributes.index(\"Length_seconds\")])\n    # Print the list of attributes followed by the list of songs\n    print(\" \".join(attributes))\n    for song in songs:\n        print(song)\n    return \"\"\n",
        "test": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\\n\") == \"\"\"Artist Album Song_Title Length_seconds",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 4912,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, w, n = map(int, stdin.split())\n    bricks = list(map(int, stdin.split()))\n    bricks.sort()\n    if n < w:\n        return \"NO\"\n    if n == w:\n        return \"YES\"\n    if n > w:\n        if bricks[-1] > w:\n            return \"NO\"\n        else:\n            return \"YES\"",
        "test": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"NO\"",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 4913,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\")\n    'Not Effective'\n    >>> solution(\"10\\nNNNN\\nNNNN\\nNNNN\\nNNNN\\nNNNN\\nNNNN\\nNNNN\\nNNNN\")\n    '66.666667'\n    >>> solution(\"10\\nYYYY\\nYYYY\\nYYYY\\nYYYY\\nYYYY\\nYYYY\\nYYYY\\nYYYY\")\n    '50.000000'\n    \"\"\"\n    vaccinated = 0\n    infected_A = 0\n    infected_B = 0\n    infected_C = 0\n    for line in stdin.splitlines():\n        if line[0] == \"Y\":\n            vaccinated += 1\n        if line[1] == \"Y\":\n            infected_A += 1\n        if line[2] == \"Y\":\n            infected_B += 1\n        if line[3] == \"Y\":\n            infected_C += 1\n    vaccine_efficacy_A = infected_A / vaccinated\n    vaccine_efficacy_B = infected_B / vaccinated\n    vaccine_efficacy_C = infected_C / vaccinated\n    if vaccine_efficacy_A < infected_A / (vaccinated - infected_A):\n        print(\"Not Effective\")\n    else:\n        print(f\"{vaccine_efficacy_A:.6f}\")\n    if vaccine_efficacy_B < infected_B / (vaccinated - infected_B):\n        print(\"Not Effective\")\n    else:\n        print(f\"{vaccine_efficacy_B:.6f}\")\n    if vaccine_efficacy_C < infected_C / (vaccinated - infected_C):\n        print(\"Not Effective\")\n    else:\n        print(f\"{vaccine_efficacy_C:.6f}\")\n",
        "test": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == \"Not Effective\\n66.666667\\n50.000000\"",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 4914,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"AABAA\") == \"Bruno\"",
        "num_ids": 38,
        "indeed": false
    },
    {
        "number": 4915,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    log = []\n    for line in stdin.split('\\n'):\n        if line == '-1':\n            break\n        log.append(line)\n    log = [line.split() for line in log]\n    log = sorted(log, key=lambda x: int(x[0]))\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])\n    log = sorted(log, key=lambda x: x[1])\n    log = sorted(log, key=lambda x: x[2])\n    log = sorted(log, key=lambda x: x[0])",
        "test": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"",
        "num_ids": 1299,
        "indeed": false
    },
    {
        "number": 4916,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return shortest path from start to end.\"\"\"\n    # Get input\n    n, k = map(int, stdin.split())\n    tiles = [list(map(int, stdin.split())) for _ in range(n)]\n\n    # Get start and end tiles\n    start = None\n    end = None\n    for i in range(n):\n        for j in range(n):\n            if tiles[i][j] == 1:\n                start = (i, j)\n            elif tiles[i][j] == k:\n                end = (i, j)\n\n    # Get distance between start and end tiles\n    distance = abs(start[0] - end[0]) + abs(start[1] - end[1])\n\n    # Return shortest path\n    return distance if distance < n ** 2 else -1\n",
        "test": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 4917,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n1 7\\n5 5\")\n    'gunilla has a point'\n    \"\"\"\n   ...",
        "test": "assert solution(\"2\\n5 5\") == \"edward is right\"",
        "num_ids": 68,
        "indeed": false
    },
    {
        "number": 4918,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 11\n   ... t 1 10\n   ... t 1 2\n   ... t 1 3\n   ... s 1\n   ... s 2\n   ... s 3\n   ... s 4\n   ... t 5 6\n   ... s 5\n   ... s 6\n   ... s 10''')\n    '4'\n    \"\"\"\n    n, q = map(int, stdin.split('\\n')[:2])\n    groups = [set() for _ in range(n)]\n    for _ in range(q):\n        query, *args = stdin.split('\\n')[2 * _ + 1: 2 * _ + 3]\n        if query == 't':\n            groups[int(args[0]) - 1].add(int(args[1]) - 1)\n            groups[int(args[1]) - 1].add(int(args[0]) - 1)\n        else:\n            print(len(groups[int(args[0]) - 1]))\n",
        "test": "assert solution(\"10 11\\n\"",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 4919,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... Iceland 2016\n   ... Sweden 2015\n   ... Iceland 1982\n   ... Norway 1999\n   ... 3\n   ... Sweden 1\n   ... Iceland 1\n   ... Iceland 2\n   ... ''')\n    '2016'\n    \"\"\"\n    pass\n",
        "test": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1982\\n2016\"",
        "num_ids": 122,
        "indeed": false
    },
    {
        "number": 4920,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    events = stdin.split()\n    good_itineraries = 0\n    for i in range(len(events)):\n        for j in range(i + 1, len(events)):\n            if events[i]!= events[j] and events[i] + events[j] not in events:\n                good_itineraries += 1\n    return good_itineraries\n",
        "test": "assert solution('abbcccddddeeeee') == 10",
        "num_ids": 105,
        "indeed": false
    },
    {
        "number": 4921,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin",
        "test": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"",
        "num_ids": 125,
        "indeed": false
    },
    {
        "number": 4922,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"satisfactory\"",
        "num_ids": 101,
        "indeed": false
    },
    {
        "number": 4923,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\n1 1 1 5 3 4 6 6\")\n    '4'\n    \"\"\"\n    n = int(stdin.readline())\n    rolls = [int(x) for x in stdin.readline().split()]\n    unique_rolls = set(rolls)\n    if len(unique_rolls) == 1:\n        return \"none\"\n    else:\n        return rolls.index(max(unique_rolls))\n",
        "test": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"none\"",
        "num_ids": 152,
        "indeed": false
    },
    {
        "number": 4924,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    current_time = stdin.split(':')\n    current_time = list(map(int, current_time))\n    explosion_time = stdin.split(':')\n    explosion_time = list(map(int, explosion_time))\n    current_time = current_time[0] * 3600 + current_time[1] * 60 + current_time[2]\n    explosion_time = explosion_time[0] * 3600 + explosion_time[1] * 60 + explosion_time[2]\n    if current_time < explosion_time:\n        return str(explosion_time - current_time)\n    else:\n        return str(24 * 3600 - current_time + explosion_time)",
        "test": "assert solution(\"04:00:00\") == \"08:00:00\"",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 4925,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution(\"31 6\") == \"4\"",
        "num_ids": 22,
        "indeed": false
    },
    {
        "number": 4926,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(1 / factorial(i) for i in range(n)))\n",
        "test": "assert solution('3') == '2.6666666666666665'",
        "num_ids": 46,
        "indeed": false
    },
    {
        "number": 4927,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = [int(x) for x in stdin.split()]\n    if P > Q:\n        return \"paul\"\n    return \"opponent\"",
        "test": "assert solution(\"5 3 0\") == \"opponent\"",
        "num_ids": 69,
        "indeed": false
    },
    {
        "number": 4928,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)",
        "test": "assert solution('1') == 2",
        "num_ids": 16,
        "indeed": false
    },
    {
        "number": 4929,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"123\\n123a\")\n    'Yes'\n    \"\"\"\n    S, P = stdin.split(\"\\n\")\n    return \"Yes\" if P in S or P[::-1] in S or P.lower() in S or P.upper() in S else \"No\"\n",
        "test": "assert solution('123a') == 'No'",
        "num_ids": 95,
        "indeed": true
    },
    {
        "number": 4930,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(stdin.split()).replace('p', 'papa').replace('e', 'epe').replace('i', 'ipi').replace('o', 'opo').replace('u', 'upu')\n",
        "test": "assert solution(\"paprika\") == \"paprika\"",
        "num_ids": 89,
        "indeed": false
    },
    {
        "number": 4931,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == 0:\n        return str(y)\n    if y == 1:\n        return \"IMPOSSIBLE\"\n    if y == 2:\n        return str(x - 1)\n    if y == 3:\n        return str(x + 1)\n    if y == 4:\n        return str(x - 2)\n    if y == 5:\n        return str(x + 2)\n    if y == 6:\n        return str(x - 3)\n    if y == 7:\n        return str(x + 3)\n    if y == 8:\n        return str(x - 4)\n    if y == 9:\n        return str(x + 4)\n    if y == 10:\n        return str(x - 5)\n    if y == 11:\n        return str(x + 5)\n    if y == 12:\n        return str(x - 6)\n    if y == 13:\n        return str(x + 6)\n    if y == 14:\n        return str(x - 7)\n    if y == 15:\n        return str(x + 7)\n    if y == 16:\n        return str(x - 8)\n    if y == 17:\n        return str(x + 8)\n    if y == 18:\n        return str(x - 9)\n    if y == 19:\n        return str(x + 9)\n    if y == 20:\n        return str(x - 10)\n    if y == 21:\n        return str(x + 10)\n    if y == 22:\n        return str(x - 11)\n    if y == 23:\n        return str(x + 11)\n    if y == 24:\n        return str(x - 12)\n    if y == 25:\n        return str(x + 12)\n    if y == 26:\n        return str(x - 13)\n    if y == 27:\n        return str(x + 13)\n    if y == 28:\n        return str(x - 14)\n    if y == 29:\n        return str(x + 14)\n    if y == 30:\n        return str(x - 15)\n    if y == 31:\n        return str(x + 15)\n    if y == 32:\n        return str(x - 16)\n    if y == 33:\n        return str(x + 16)\n    if y == 34:\n        return str(x - 17)\n    if y == 35:\n        return str(x + 17)\n    if y == 36:\n        return str(x - 18)\n    if y == 37:\n        return str(x + 18)\n    if y == 38:\n        return str(x - 19)\n    if y == 39:\n        return str(x + 19)\n    if y == 40:\n        return str(x - 20)\n    if y == 41:\n        return str(x + 20)\n    if y == 42:\n        return str(x - 21)\n    if y == 43:\n        return str(x + 21)\n    if y == 44:\n        return str(x - 22)\n    if y == 45:\n        return str(x + 22)\n    if y == 46:\n        return str(x - 23)\n    if y == 47:\n        return str(x + 23)\n    if y == 48:\n        return str(x - 24)\n    if y == 49:\n        return str(x + 24)\n    if y == 50:\n        return str(x - 25)\n    if y == 51:\n        return str(x + 25)\n    if y == 52:\n        return str(x - 26)\n    if y == 53:\n        return str(x + 26)\n    if y == 54:\n        return str(x - 27)\n    if y == 55:\n        return str(x + 27)\n    if y == 56:\n        return str(x - 28)\n    if y == 57:\n        return str(x + 28)\n    if y == 58:\n        return str(x - 29)\n    if y == 59:\n        return str(x + 29)\n    if y == 60:\n        return str(x - 30)\n    if y == 61:\n        return str(x + 30)\n    if y == 62:\n        return str(x - 31)\n    if y == 63:\n        return str(x + 31)\n    if y == 64:\n        return str(x - 32)\n    if y == 65:\n        return str(x + 32)\n    if y == 66:\n        return str(x - 33)\n    if y == 67:\n        return str(x + 33)\n    if y == 68:\n        return str(x - 34)\n    if y == 69:\n        return str(x + 34)\n    if y == 70:\n        return str(x - 35)\n    if y == 71:\n        return str(x + 35)\n    if y == 72:\n        return str(x - 36)\n    if y == 73:\n        return str(x + 36)\n    if y == 74:\n        return str(x - 37)\n    if y == 75:\n        return str(x + 37)\n    if y == 76:\n        return str(x - 38)\n    if y == 77:\n        return str(x + 38)\n    if y == 78:\n        return str(x - 39)\n    if y == 79:\n        return str(x + 39)\n    if y == 80:\n        return str(x - 40)\n    if y == 81:\n        return str(x + 40)\n    if y == 82:\n        return str(x - 41)\n    if y == 83:\n        return str(x + 41)\n    if y == 84:\n        return str(x - 42)\n    if y == 85:\n        return str(x + 42)\n    if y == 86:\n        return str(x - 43)\n    if y == 87:\n        return str(x + 43)\n    if y == 88:\n        return str(x - 44)\n    if y == 89:\n        return str(x + 44)\n    if y == 90:\n        return str(x - 45)\n    if y == 91:\n        return str(x + 45)\n    if y == 92:\n        return str(x - 46)\n    if y == 93:\n        return str(x + 46)\n    if y == 94:\n        return str(x - 47)\n    if y == 95:\n        return str(x + 47)\n    if y == 96:\n        return str(x - 48)\n    if y == 97:\n        return str(x + 48)\n    if y == 98:\n        return str(x - 49)\n    if y == 99:\n        return str(x + 49)\n    if y == 100:\n        return str(x - 50)\n    if y == 101:\n        return str(x + 50)\n    if y == 102:\n        return str(x - 51)\n    if y == 103:\n        return str(x + 51)\n    if y == 104:\n        return str(x - 52)\n    if y == 105:\n        return str(x + 52)\n    if y == 106:\n        return str(x - 53)\n    ",
        "test": "assert solution(\"32 2\") == \"-32\"",
        "num_ids": 1749,
        "indeed": false
    },
    {
        "number": 4932,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split()]\n    P, M, G = [int(x) for x in stdin.split()]\n    if P < M:\n        if P < G:\n            return \"both\"\n        else:\n            return \"one\"\n    else:\n        if M < G:\n            return \"both\"\n        else:\n            return \"none\"",
        "test": "assert solution(\"1 3 4\") == \"one\"",
        "num_ids": 128,
        "indeed": false
    },
    {
        "number": 4933,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(a + b + c - min(a, b, c))\n",
        "test": "assert solution(\"1 2 3\") == \"4\"",
        "num_ids": 61,
        "indeed": false
    },
    {
        "number": 4934,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, v = map(int, stdin.split())\n    return str(int(h * math.sin(math.radians(v))))\n",
        "test": "assert solution('500 70') == '533'",
        "num_ids": 58,
        "indeed": false
    },
    {
        "number": 4935,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 9\\n69 60\\n100 60\")\n    '39.0\\n30.0'\n    \"\"\"\n    n, g = map(int, stdin.split())\n    d, t = [], []\n    for _ in range(n):\n        d.append(int(stdin.split()[0]))\n        t.append(int(stdin.split()[1]))\n    d.sort()\n    t.sort()\n    t = [i * g * math.cos(math.radians(i)) for i in t]\n    return \"\\n\".join(map(str, [sum(t[:i]) / d[i - 1] for i in range(1, n + 1)]))\n",
        "test": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 4936,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"",
        "num_ids": 29,
        "indeed": false
    },
    {
        "number": 4937,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"3 6\\n1 2 3\") == 2",
        "num_ids": 25,
        "indeed": false
    },
    {
        "number": 4938,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n",
        "test": "assert solution(\"MWWMWMMWM\") == 9",
        "num_ids": 24,
        "indeed": false
    },
    {
        "number": 4939,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    commands = [int(x) for x in stdin.split()[1:]]\n    egg = 0\n    for i in range(k):\n        if commands[i] < 0:\n            egg += commands[i]\n        else:\n            egg += commands[i] % n\n    return str(egg % n)\n",
        "test": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"",
        "num_ids": 117,
        "indeed": false
    },
    {
        "number": 4940,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3\\n1 2 3\\n3 2 1\")\n    '6 7'\n    \"\"\"\n    N, M = map(int, stdin.split())\n    P = [list(map(int, stdin.split())) for _ in range(N)]\n    T = [0] * N\n    for j in range(M):\n        T[0] += P[0][j]\n        for i in range(1, N):\n            T[i] = min(T[i], T[i - 1] + P[i][j])\n    return \" \".join(map(str, T))\n",
        "test": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 4941,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... als mollen mollen mollen mollen mollen mollen\n   ... 4\n   ... als when correct\n   ... mollen moles correct\n   ... mollen destroy correct\n   ... mollen mills incorrect''')\n    '64 correct'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    d = stdin.split('\\n')[2]\n    m = int(stdin.split('\\n')[3])\n    correct = 0\n    incorrect = 0\n    for i in range(m):\n        d, e, c = stdin.split('\\n')[4 + i].split()\n        if d in s and e in s:\n            if c == 'correct':\n                correct += 1\n            else:\n                incorrect += 1\n    if correct == 1:\n        return f'{correct} correct'\n    elif incorrect == 1:\n        return f'{incorrect} incorrect'\n    else:\n        return f'{correct} correct\\n{incorrect} incorrect'\n",
        "test": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 4942,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"4\\n2 3 4 3\") == \"7\"",
        "num_ids": 27,
        "indeed": false
    },
    {
        "number": 4943,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 0 0\n   ... 1 1\n   ... 0 2\n   ... 4\n   ... ''')\n    '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n    \"\"\"\n   ...",
        "test": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"",
        "num_ids": 114,
        "indeed": false
    },
    {
        "number": 4944,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)",
        "test": "assert solution('1') == '1'",
        "num_ids": 28,
        "indeed": false
    },
    {
        "number": 4945,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, m, sigma = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    return str(max(a * x + b * y for x in range(1, m // a + 1) for y in range(1, m // a + 1) if x + y <= m and 2 * x + y >= sigma))\n",
        "test": "assert solution(\"3 1\\n12 16\") == \"34\"",
        "num_ids": 106,
        "indeed": false
    },
    {
        "number": 4946,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    languages = [int(x) for x in stdin.readline().split()]\n    languages.sort()\n    languages.reverse()\n    print(languages)\n    return languages",
        "test": "assert solution(\"4\\n1 2 3 1\") == 3",
        "num_ids": 73,
        "indeed": false
    },
    {
        "number": 4947,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) * 1000 * 5280 // 4854)",
        "test": "assert solution('0.5') == '854'",
        "num_ids": 45,
        "indeed": false
    },
    {
        "number": 4948,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution(\"0 4\\n1 1 1 1\\n2 2 2 2\\n3 3 3 3\\n4 4 4 4\") == \"25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\"",
        "num_ids": 67,
        "indeed": false
    },
    {
        "number": 4949,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3 4\n   ... 3\n   ... 4\n   ... 5\n   ... 6\n   ... 7''')\n    'DA'\n    >>> solution('''5 3 4\n   ... 3\n   ... 4\n   ... 5\n   ... 6\n   ... 7\n   ... 8''')\n    'NE'\n    \"\"\"\n   ...",
        "test": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"",
        "num_ids": 126,
        "indeed": false
    },
    {
        "number": 4950,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution('') == ''",
        "num_ids": 1746,
        "indeed": false
    },
    {
        "number": 4951,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lines = [stdin.readline().split() for _ in range(n)]\n    for i in range(n):\n        if len(lines[i]) == 1:\n            if lines[i][0] == '->':\n                continue\n            else:\n                return str(i + 1)\n        else:\n            if lines[i][0] == '->':\n                if lines[i][1] == lines[i - 1][0]:\n                    continue\n                else:\n                    return str(i + 1)\n            else:\n                return str(i + 1)\n    return 'correct'",
        "test": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\nALICE -> BOB\") == \"1\"",
        "num_ids": 217,
        "indeed": false
    },
    {
        "number": 4952,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\")\n    Connie Froggatt\n    >>> solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\")\n    Runoff!\n    >>> solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\")\n    Penny Franklin\n    \"\"\"\n    votes = stdin.split(\"\\n\")\n    votes = votes[:-1]\n    votes = [vote.split() for vote in votes]\n    votes = [vote for vote in votes if len(vote) > 0]\n    votes = [vote for vote in votes if vote[0]!= \"***\"]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes if len(set(vote)) == len(vote)]\n    votes = [vote for vote in votes if len(set(vote)) > 1]\n    votes = [vote for vote in votes ",
        "test": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"",
        "num_ids": 1832,
        "indeed": false
    },
    {
        "number": 4953,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the size of the smallest set of characters $S$ that should be asked to leave so that all remaining pairs of characters can converse.\"\"\"\n    pass",
        "test": "assert solution('''7",
        "num_ids": 50,
        "indeed": false
    },
    {
        "number": 4954,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''",
        "test": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"",
        "num_ids": 40,
        "indeed": false
    },
    {
        "number": 4955,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    notes = stdin.split()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort()\n    notes = [note.upper() for note in notes]\n    notes.sort",
        "test": "assert solution(\"10\\nC D F D C D F F F C C\") == \"none\"",
        "num_ids": 1498,
        "indeed": false
    },
    {
        "number": 4956,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"dae ae ju traeligt va\" if stdin.count(\"ae\") > len(stdin) * 0.4 else \"haer talar vi rikssvenska\"",
        "test": "assert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"",
        "num_ids": 108,
        "indeed": false
    },
    {
        "number": 4957,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(stdin.split()[i]) for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = 'E'\n    return '\\n'.join(''.join(row) for row in grid)",
        "test": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"",
        "num_ids": 161,
        "indeed": false
    },
    {
        "number": 4958,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"",
        "num_ids": 33,
        "indeed": false
    },
    {
        "number": 4959,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    e, f, c = map(int, stdin.split())\n    return str(e + f + c - 1)\n",
        "test": "assert solution(\"9 0 3\") == \"4\"",
        "num_ids": 43,
        "indeed": false
    },
    {
        "number": 4960,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('1010', '12')",
        "test": "assert solution(\"1010\") == \"12\"",
        "num_ids": 37,
        "indeed": false
    },
    {
        "number": 4961,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    R, S = map(int, stdin.split())\n    seats = [list(stdin.split()[i]) for i in range(R)]\n    handshakes = 0\n    for i in range(R):\n        for j in range(S):\n            if seats[i][j] == 'o':\n                handshakes += 1\n                if i > 0 and seats[i - 1][j] == '.':\n                    seats[i - 1][j] = 'o'\n                    handshakes += 1\n                if j > 0 and seats[i][j - 1] == '.':\n                    seats[i][j - 1] = 'o'\n                    handshakes += 1\n                if i < R - 1 and seats[i + 1][j] == '.':\n                    seats[i + 1][j] = 'o'\n                    handshakes += 1\n                if j < S - 1 and seats[i][j + 1] == '.':\n                    seats[i][j + 1] = 'o'\n                    handshakes += 1\n    return handshakes",
        "test": "assert solution(\"2 3\\n..o\\no..\") == 2",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 4962,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        if a == b:\n            print('LADICA')\n        elif a > b:\n            print('SMECE')\n        else:\n            print('LADICA')\n    return ''\n",
        "test": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"",
        "num_ids": 140,
        "indeed": false
    },
    {
        "number": 4963,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(stdin.readline()) for _ in range(n - 1)]\n    arr.insert(0, 0)\n    arr.append(n - 1)\n    arr.sort()\n    return''.join(map(str, arr))",
        "test": "assert solution(\"3\\n1 2\") == \"2 1 3\"",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 4964,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 3 5\n   ... 0 5 2\n   ... 0 1\n   ... 1 2\n   ... 4 5\n   ... 3 5\n   ... 0 2''')\n    '1'\n    \"\"\"\n    n, h, l = map(int, stdin.split())\n    horrors = set(map(int, stdin.split()[1:]))\n    similars = {tuple(map(int, line.split())) for line in stdin.splitlines()[l:]}\n    return max(\n        (\n            movie\n            for movie in range(n)\n            if movie not in horrors\n            or any(\n                movie in horrors\n                and horror_index(movie, similars) == horror_index(horrors, similars)\n                for horror in similars\n            )\n        ),\n        key=lambda movie: (horror_index(movie, similars), movie),\n    )\n\n\ndef",
        "test": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"0\"",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 4965,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = [int(x) for x in stdin.readline().split()]\n    t.sort()\n    ans = []\n    for i in range(n):\n        ans.append(t[i])\n        if i < n - 1:\n            if abs(t[i] - t[i + 1]) > abs(t[i + 1] - t[i + 2]):\n                ans.append(t[i + 1])\n                ans.append(t[i + 2])\n            else:\n                ans.append(t[i + 2])\n                ans.append(t[i + 1])\n    return''.join(str(x) for x in ans)",
        "test": "assert solution(\"3\\n1 3 4\\n2 2 3\") == \"impossible\"",
        "num_ids": 210,
        "indeed": false
    },
    {
        "number": 4966,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = map(int, stdin.split())\n    t = [int(i) for i in stdin.split()]\n    t.sort()\n    t = [0] + t + [k]\n    t = [t[i] - t[i - 1] for i in range(1, len(t))]\n    t = [i * (100 + p) / 100 for i in t]\n    return str(sum(t))\n",
        "test": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"",
        "num_ids": 129,
        "indeed": false
    },
    {
        "number": 4967,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write",
        "test": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\") == \"5\"",
        "num_ids": 1662,
        "indeed": false
    },
    {
        "number": 4968,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"",
        "test": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'",
        "num_ids": 32,
        "indeed": false
    },
    {
        "number": 4969,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    return str(round(c / (r * 2), 6))\n",
        "test": "assert solution('2 2') == '0.500000'",
        "num_ids": 59,
        "indeed": false
    },
    {
        "number": 4970,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of students who will win the popularity prize.\"\"\"\n    # Your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    ",
        "test": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"",
        "num_ids": 1868,
        "indeed": false
    },
    {
        "number": 4971,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    n = 1\n    while True:\n        if n ** 3 <= m:\n            n += 1\n        else:\n            break\n    return str(n - 1)\n",
        "test": "assert solution(\"1729\") == \"1729\"",
        "num_ids": 74,
        "indeed": false
    },
    {
        "number": 4972,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    k = 0\n    while X > 0:\n        if X % 2 == 0:\n            X //= 2\n            k += 1\n        else:\n            break\n    return str(k)\n",
        "test": "assert solution('65536') == 16",
        "num_ids": 65,
        "indeed": false
    },
    {
        "number": 4973,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(stdin.readline().strip()))\n    k = (0, 0)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'K':\n                k = (i, j)\n                break\n    if k[0] == 0 and k[1] == 0:\n        return '-1'\n    visited = set()\n    queue = deque([(k[0], k[1], 0)])\n    while queue:\n        r, c, steps = queue.popleft()\n        if (r, c) == (1, 1):\n            return steps\n        for dr, dc in [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]:\n            nr, nc = r + dr, c + dc\n            if 1 <= nr <= n and 1 <= nc <= n and (nr, nc) not in visited and matrix[nr - 1][nc - 1]!= '#':\n                visited.add((nr, nc))\n                queue.append((nr, nc, steps + 1))\n    return '-1'\n",
        "test": "assert solution(\"4\\n....\\n....\\n....\\nK\") == \"0\"",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 4974,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.split())\n    rooms = set(map(int, stdin.split()))\n    for i in range(1, r + 1):\n        if i not in rooms:\n            return str(i)\n    return \"too late\"",
        "test": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"",
        "num_ids": 92,
        "indeed": false
    },
    {
        "number": 4975,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    key = stdin.split()\n    table = [\n        [key[0][0], key[0][1]],\n        [key[1][0], key[1][1]],\n        [key[2][0], key[2][1]],\n        [key[3][0], key[3][1]],\n        [key[4][0], key[4][1]],\n        [key[5][0], key[5][1]],\n        [key[6][0], key[6][1]],\n        [key[7][0], key[7][1]],\n        [key[8][0], key[8][1]],\n        [key[9][0], key[9][1]],\n        [key[10][0], key[10][1]],\n        [key[11][0], key[11][1]],\n        [key[12][0], key[12][1]],\n        [key[13][0], key[13][1]],\n        [key[14][0], key[14][1]],\n        [key[15][0], key[15][1]],\n        [key[16][0], key[16][1]],\n        [key[17][0], key[17][1]],\n        [key[18][0], key[18][1]],\n        [key[19][0], key[19][1]],\n        [key[20][0], key[20][1]],\n        [key[21][0], key[21][1]],\n        [key[22][0], key[22][1]],\n        [key[23][0], key[23][1]],\n        [key[24][0], key[24][1]],\n        [key[25][0], key[25][1]],\n        [key[26][0], key[26][1]],\n        [key[27][0], key[27][1]],\n        [key[28][0], key[28][1]],\n        [key[29][0], key[29][1]],\n        [key[30][0], key[30][1]],\n        [key[31][0], key[31][1]],\n        [key[32][0], key[32][1]],\n        [key[33][0], key[33][1]],\n        [key[34][0], key[34][1]],\n        [key[35][0], key[35][1]],\n        [key[36][0], key[36][1]],\n        [key[37][0], key[37][1]],\n        [key[38][0], key[38][1]],\n        [key[39][0], key[39][1]],\n        [key[40][0], key[40][1]],\n        [key[41][0], key[41][1]],\n        [key[42][0], key[42][1]],\n        [key[43][0], key[43][1]],\n        [key[44][0], key[44][1]],\n        [key[45][0], key[45][1]],\n        [key[46][0], key[46][1]],\n        [key[47][0], key[47][1]],\n        [key[48][0], key[48][1]],\n        [key[49][0], key[49][1]],\n        [key[50][0], key[50][1]],\n        [key[51][0], key[51][1]],\n        [key[52][0], key[52][1]],\n        [key[53][0], key[53][1]],\n        [key[54][0], key[54][1]],\n        [key[55][0], key[55][1]],\n        [key[56][0], key[56][1]],\n        [key[57][0], key[57][1]],\n        [key[58][0], key[58][1]],\n        [key[59][0], key[59][1]],\n        [key[60][0], key[60][1]],\n        [key[61][0], key[61][1]],\n        [key[62][0], key[62][1]],\n        [key[63][0], key[63][1]],\n        [key[64][0], key[64][1]],\n        [key[65][0], key[65][1]],\n        [key[66][0], key[66][1]],\n        [key[67][0], key[67][1]],\n        [key[68][0], key[68][1]],\n        [key[69][0], key[69][1]],\n        [key[70][0], key[70][1]],\n        [key[71][0], key[71][1]],\n        [key[72][0], key[72][1]],\n        [key[73][0],",
        "test": "assert solution(\"hide the gold in the tree stump\") == \"HJXWYZUQM\"",
        "num_ids": 1243,
        "indeed": false
    },
    {
        "number": 4976,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\")\n    'The gopher cannot escape.'\n    \"\"\"\n    gopher_pos, dog_pos = stdin.split(\"\\n\")[:2]\n    gopher_pos = gopher_pos.split(\" \")\n    dog_pos = dog_pos.split(\" \")\n    gopher_pos = [float(i) for i in gopher_pos]\n    dog_pos = [float(i) for i in dog_pos]\n    gopher_pos = np.array(gopher_pos)\n    dog_pos = np.array(dog_pos)\n    gopher_pos = gopher_pos.reshape(2, 2)\n    dog_pos = dog_pos.reshape(2, 1)\n    gopher_pos = gopher_pos.T\n    dog_pos = dog_pos.T\n    gopher_pos = gopher_pos[0]\n    dog_pos = dog_pos[0]\n    gopher_pos = gopher_pos.reshape(2, 1)\n    dog_pos = dog_pos.reshape(2, 1)\n    gopher_pos = gopher_pos.T\n    dog_pos = dog_pos.T\n    gopher_pos = gopher_pos[0]\n    dog_pos = dog_pos[0]\n    gopher_pos = gopher_pos.reshape(1, 2)\n    dog_pos = dog_pos.reshape(1, 2)\n    gopher_pos = gopher_pos.T\n    dog_pos = dog_pos.T\n    gopher_pos = gopher_pos[0]\n    dog_pos = dog_pos[0]\n    gopher_pos = gopher_pos.reshape(1, 2)\n    dog_pos = dog_pos.reshape(1, 2)\n    gopher_pos = gopher_pos.T\n    dog_pos = dog_pos.T\n    gopher_pos = gopher_pos[0]\n    dog_pos = dog_pos[0]\n    gopher_pos = gopher_pos.reshape(1, 2)\n    dog_pos = dog_pos.reshape(1, 2)\n    gopher_pos = gopher_pos.T\n    dog_pos = dog_pos.T\n    gopher_pos = gopher_pos[0]\n    dog_pos = dog_pos[0]\n    gopher_pos = gopher_pos.reshape(1, 2)\n    dog_pos = dog_pos.reshape(1, 2)\n    gopher_pos = gopher_pos.T\n    dog_pos = dog_pos.T\n    gopher_pos = gopher_pos[0]\n    dog_pos = dog_pos[0]\n    gopher_pos = gopher_pos.reshape(1, 2)\n    dog_pos = dog_pos.reshape(1, 2)\n    gopher_pos = gopher_pos.T\n    dog_pos = dog_pos.T\n    gopher_pos = gopher_pos[0]\n    dog_pos = dog_pos[0]\n    gopher_pos = gopher_pos.reshape(1, 2)\n    dog_pos = dog_pos.reshape(1, 2)\n    gopher_pos = gopher_pos.T\n    dog_pos = dog_pos.T\n    gopher_pos = gopher_pos[0]\n    dog_pos = dog_pos[0]\n    gopher_pos = gopher_pos.reshape(1, 2)\n    dog_pos = dog_pos.reshape(1, 2)\n    gopher_pos = gopher_pos.T\n    dog_pos = dog_pos.T\n    gopher_pos = gopher_pos[0]\n    dog_pos = dog_pos[0]\n    gopher_pos = gopher_pos.reshape(1, 2)\n    dog_pos = dog_pos.reshape(1, 2)\n    gopher_pos = gopher_pos.T\n    dog_pos = dog_pos.T\n    gopher_pos = gopher_pos[0]\n    dog_pos = dog_pos[0]\n    gopher_pos = gopher_pos.reshape(1, 2)\n    dog_pos = dog_pos.reshape(1, 2)\n    gopher_pos = gopher_pos.T\n    dog_pos = dog_pos.T\n    gopher_pos = gopher_pos[0]\n    dog_pos = dog_pos[0]\n    gopher_pos = gopher_pos.reshape(1, 2)\n    dog_pos = dog_pos.reshape(1, 2)\n    gopher_pos = gopher_pos.T\n    dog_pos = dog_pos.T\n    gopher_pos = gopher_pos[0]\n    dog_pos = dog_pos[0]\n    gopher_pos = gopher_pos.reshape(1, 2)\n    dog_pos = dog_pos.reshape(1, 2)\n    gopher_pos = gopher_pos.T\n    dog_pos = dog_pos.T\n    gopher_pos = gopher_pos[0]\n    dog_pos = dog_pos[0]\n    gopher_pos = gopher_pos.reshape(1, 2)\n    dog_pos = dog_pos.reshape(1, 2)\n    gopher_pos = gopher_pos.T\n    dog_pos = dog_pos.T\n    gopher_pos = gopher_pos[0]\n    dog_pos = dog_pos[0]\n    gopher_pos = gopher_pos.reshape(1, 2)\n    dog_pos = dog_pos.reshape(1, 2)\n    gopher_pos = gopher_pos.T\n    dog_pos = dog_pos.T\n    gopher_pos = gopher_pos[0]\n    dog_pos = dog_pos[0]\n    gopher_pos = gopher_pos.reshape(1, 2)\n    dog_pos = dog_pos.reshape(1, 2)\n    gopher_pos = gopher_pos.T\n    dog_pos = dog_pos.T\n    gopher_pos = gopher_pos[0]\n    dog_pos = dog_pos[0]\n    gopher_pos = gopher_pos.reshape(1, 2)\n    dog_pos = dog_pos.reshape(1, 2)\n    gopher_pos = gopher_pos.T\n    dog_pos = dog_pos.T",
        "test": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\\n1.500 1.500\") == \"The gopher can escape through the hole at (1.500, 1.500).\"",
        "num_ids": 1684,
        "indeed": false
    },
    {
        "number": 4977,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n')[0].split())\n    c, d = map(int, stdin.split('\\n')[1].split())\n    t = int(stdin.split('\\n')[2])\n    return 'Y' if abs(a - c) + abs(b - d) <= t else 'N'",
        "test": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"",
        "num_ids": 125,
        "indeed": false
    },
    {
        "number": 4978,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [stdin.split() for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'V':\n                grid[i][j] = '.'\n                if i > 0 and grid[i - 1][j] == 'V':\n                    grid[i - 1][j] = '.'\n                if i < n - 1 and grid[i + 1][j] == 'V':\n                    grid[i + 1][j] = '.'\n                if j > 0 and grid[i][j - 1] == 'V':\n                    grid[i][j - 1] = '.'\n                if j < m - 1 and grid[i][j + 1] == 'V':\n                    grid[i][j + 1] = '.'\n    return '\\n'.join(''.join(row) for row in grid)\n",
        "test": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 4979,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::-1]",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 30,
        "indeed": false
    },
    {
        "number": 4980,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n",
        "test": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\nPInkpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"",
        "num_ids": 86,
        "indeed": false
    },
    {
        "number": 4981,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a, b, c = int(a), int(b), int(c)\n    if a < b:\n        if b < c:\n            return f\"{a} {b} {c}\"\n        else:\n            return f\"{a} {c} {b}\"\n    else:\n        if a < c:\n            return f\"{b} {a} {c}\"\n        else:\n            return f\"{b} {c} {a}\"\n",
        "test": "assert solution(\"1 5 3\") == \"1 3 5\"",
        "num_ids": 151,
        "indeed": false
    },
    {
        "number": 4982,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''buy 1 15\n   ... split 3\n   ... sell 1 5\n   ... die 4''')\n    '8.0'\n    \"\"\"\n   ...",
        "test": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\") == \"8.0\"",
        "num_ids": 72,
        "indeed": false
    },
    {
        "number": 4983,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    while x > 9:\n        x = sum(int(i) for i in str(x) if i!= '0')\n    return str(x)",
        "test": "assert solution('1') == '1'",
        "num_ids": 67,
        "indeed": false
    },
    {
        "number": 4984,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\")\n    0\n    \"\"\"\n    rows, cols = map(int, stdin.split())\n    grid = [list(stdin.split()[i]) for i in range(rows)]\n    islands = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == \"L\":\n                islands += 1\n                dfs(grid, i, j)\n    return islands\n\n\ndef",
        "test": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0",
        "num_ids": 158,
        "indeed": false
    },
    {
        "number": 4985,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\")\n    '60'\n    \"\"\"\n    hands = stdin.split(\"\\n\")\n    dominant = \"S\"\n    points = 0\n    for hand in hands:\n        hand = hand.split()\n        if hand[1] == dominant:\n            points += int(hand[0])\n        else:\n            points += int(hand[0]) * 2\n    return str(points)\n",
        "test": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"",
        "num_ids": 168,
        "indeed": false
    },
    {
        "number": 4986,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "test": "assert solution(\"thiss iss veery annoying\") == \"se\"",
        "num_ids": 33,
        "indeed": false
    },
    {
        "number": 4987,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, C, K = [int(x) for x in stdin.split()]\n    D = [int(x) for x in stdin.split()]\n    D.sort()\n    ans = 0\n    for i in range(S):\n        if D[i] < K:\n            ans += 1\n        else:\n            break\n    return ans",
        "test": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3",
        "num_ids": 103,
        "indeed": false
    },
    {
        "number": 4988,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 1\n   ... 2\n   ... 3\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 1\n   ... 2\n   ... 3\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 1\n   ... 2\n   ... 3\n   ... ''')\n    '6'\n    \"\"\"\n    return '\\n'.join(map(lambda x: str(factorial(int(x)) % 10), stdin.split('\\n')))\n",
        "test": "assert solution(\"3\\n1\\n2\\n3\\n\") == \"6\"",
        "num_ids": 153,
        "indeed": false
    },
    {
        "number": 4989,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    return str(alice) + \" \" + str(bob)\n",
        "test": "assert solution(\"3 1 2\") == \"4 2\"",
        "num_ids": 114,
        "indeed": false
    },
    {
        "number": 4990,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    b, k, g = [int(x) for x in stdin.split()]\n    return str(b - g + 1)",
        "test": "assert solution(\"5 2 1\") == \"2\"",
        "num_ids": 45,
        "indeed": false
    },
    {
        "number": 4991,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(hailstone(int(stdin))))\n\ndef",
        "test": "assert solution('7') == '288'",
        "num_ids": 39,
        "indeed": false
    },
    {
        "number": 4992,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = [int(x) for x in stdin.split()]\n    s.sort()\n    s.reverse()\n    if n % 2 == 0:\n        return \"impossible\"\n    else:\n        for i in range(n):\n            if s[i] % 2 == 1:\n                return \"impossible\"\n        return \" \".join([str(x) for x in s])",
        "test": "assert solution(\"4\\n2 3 3 1\") == \"impossible\"",
        "num_ids": 139,
        "indeed": false
    },
    {
        "number": 4993,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\")\n    4\n    \"\"\"\n    parts, days = map(int, stdin.split())\n    parts_list = [stdin.split()[i] for i in range(days)]\n    parts_set = set(parts_list)\n    if len(parts_set) == parts:\n        return str(days - 1)\n    return \"paradox avoided\"\n",
        "test": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"",
        "num_ids": 164,
        "indeed": false
    },
    {
        "number": 4994,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = map(int, stdin.split('\\n')[0].split())\n    x2, y2 = map(int, stdin.split('\\n')[1].split())\n    x3, y3 = map(int, stdin.split('\\n')[2].split())\n    x4 = (x1 + x2 + x3) / 3\n    y4 = (y1 + y2 + y3) / 3\n    return f'{x4} {y4}'\n",
        "test": "assert solution(\"5 5\\n5 7\\n7 5\\n7 7\") == \"7 7\"",
        "num_ids": 168,
        "indeed": false
    },
    {
        "number": 4995,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1\n   ... 61''')\n    '1.016666667'\n    \"\"\"\n   ...",
        "test": "assert solution(\"1 61\") == \"1.016666667\"",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4996,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    >>> solution(\"CPMCRYY\")\n    'CALGARY'\n    ",
        "test": "assert solution(\"CPMCRYY\") == \"CALGARY\"",
        "num_ids": 1621,
        "indeed": false
    },
    {
        "number": 4997,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"3\"",
        "test": "assert solution(\"AB\") == \"3\"",
        "num_ids": 26,
        "indeed": false
    },
    {
        "number": 4998,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    return str(max(a * b, c * d, a * c, b * d))\n",
        "test": "assert solution(\"1 2 3 4\") == \"3\"",
        "num_ids": 74,
        "indeed": false
    },
    {
        "number": 4999,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return 0\n    if a > b:\n        return -1\n    if a % 2 == 0:\n        a //= 2\n    else:\n        a += 1\n    return b - a",
        "test": "assert solution('1 1') == '0'",
        "num_ids": 90,
        "indeed": false
    }
]