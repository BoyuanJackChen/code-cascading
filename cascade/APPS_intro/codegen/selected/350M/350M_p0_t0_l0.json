[
    {
        "number": 4000,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"5\"\n    if n == 3:\n        return \"6\"\n    if n == 4:\n        return \"1 8 6\"\n    if n == 5:\n        return \"1 8 6\"\n    if n == 6:\n        return \"1 8 6\"\n    if n == 7:\n        return \"1 8 6\"\n    if n == 8:\n        return \"1 8 6\"\n    if n == 9:\n        return \"1 8 6\"\n    if n == 10:\n        return \"1 8 6\"\n    if n == 11:\n        return \"1 8 6\"\n    if n == 12:\n        return \"1 8 6\"\n    if n == 13:\n        return \"1 8 6\"\n    if n == 14:\n        return \"1 8 6\"\n    if n == 15:\n        return \"1 8 6\"\n    if n == 16:\n        return \"1 8 6\"\n    if n == 17:\n        return \"1 8 6\"\n    if n == 18:\n        return \"1 8 6\"\n    if n == 19:\n        return \"1 8 6\"\n    if n == 20:\n        return \"1 8 6\"\n    if n == 21:\n        return \"1 8 6\"\n    if n == 22:\n        return \"1 8 6\"\n    if n == 23:\n        return \"1 8 6\"\n    if n == 24:\n        return \"1 8 6\"\n    if n == 25:\n        return \"1 8 6\"\n    if n == 26:\n        return \"1 8 6\"\n    if n == 27:\n        return \"1 8 6\"\n    if n == 28:\n        return \"1 8 6\"\n    if n == 29:\n        return \"1 8 6\"\n    if n == 30:\n        return \"1 8 6\"\n    if n == 31:\n        return \"1 8 6\"\n    if n == 32:\n        return \"1 8 6\"\n    if n == 33:\n        return \"1 8 6\"\n    if n == 34:\n        return \"1 8 6\"\n    if n == 35:\n        return \"1 8 6\"\n    if n == 36:\n        return \"1 8 6\"\n    if n == 37:\n        return \"1 8 6\"\n    if n == 38:\n        return \"1 8 6\"\n    if n == 39:\n        return \"1 8 6\"\n    if n == 40:\n        return \"1 8 6\"\n    if n == 41:\n        return \"1 8 6\"\n    if n == 42:\n        return \"1 8 6\"\n    if n == 43:\n        return \"1 8 6\"\n    if n == 44:\n        return \"1 8 6\"\n    if n == 45:\n        return \"1 8 6\"\n    if n == 46:\n        return \"1 8 6\"\n    if n == 47:\n        return \"1 8 6\"\n    if n == 48:\n        return \"1 8 6\"\n    if n == 49:\n        return \"1 8 6\"\n    if n == 50:\n        return \"1 8 6\"\n    if n == 51:\n        return \"1 8 6\"\n    if n == 52:\n        return \"1 8 6\"\n    if n == 53:\n        return \"1 8 6\"\n    if n == 54:\n        return \"1 8 6\"\n    if n == 55:\n        return \"1 8 6\"\n    if n == 56:\n        return \"1 8 6\"\n    if n == 57:\n        return \"1 8 6\"\n    if n == 58:\n        return \"1 8 6\"\n    if n == 59:\n        return \"1 8 6\"\n    if n == 60:\n        return \"1 8 6\"\n    if n == 61:\n        return \"1 8 6\"\n    if n == 62:\n        return \"1 8 6\"\n    if n == 63:\n        return \"1 8 6\"\n    if n == 64:\n        return \"1 8 6\"\n    if n == 65:\n        return \"1 8 6\"\n    if n == 66:\n        return \"1 8 6\"\n    if n == 67:\n        return \"1 8 6\"\n    if n == 68:\n        return \"1 8 6\"\n    if n == 69:\n        return \"1 8 6\"\n    if n == 70:\n        return \"1 8 6\"\n    if n == 71:\n        return \"1 8 6\"\n    if n == 72:\n        return \"1 8 6\"\n    if n == 73:\n        return \"1 8 6\"\n    if n == 74:\n        return \"1 8 6\"\n    if n == 75:\n        return \"1 8 6\"\n    if n == 76:\n        return \"1 8 6\"\n    if n == 77:\n        return \"1 8 6\"\n    if n == 78:\n        return \"1 8 6\"\n    if n == 79:\n        return \"1 8 6\"\n    if n == 80:\n        return \"1 8 6\"\n    if n == 81:\n        return \"1 8 6\"\n    if n == 82:\n        return \"1 8 6\"\n    if n == 83:\n        return \"1 8 6\"\n    if n == 84:\n        return \"1 8 6\"\n    if n == 85:\n        return \"1 8 6\"\n    if n == 86:\n        return \"1 8 6\"\n    if n == 87:\n        return \"1 8 6\"\n    if n == 88:\n        return \"1 8 6\"\n    if n == 89:\n        return \"1 8 6\"\n    if n == 90:\n        return \"1 8 6\"\n    if n == 91:\n        return \"1 8 6\"\n    if n == 92:\n        return \"1 8 6\"\n    if n == 93:\n        return \"1 8 6\"\n    if n == 94:\n        return \"1 8 6\"\n    if n == 95:\n        return \"1 8 6\"\n    if n == 96:\n        return \"1 8 6\"\n    if n == 97:\n        return \"1 8 6\"\n    if n == 98:\n        return \"1",
        "test": "",
        "num_ids": 1470,
        "indeed": false
    },
    {
        "number": 4001,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    divisors = []\n    for i in range(1, n+1):\n        divisors.append(i)\n        for j in range(i, n+1, i):\n            divisors.append(j)\n    divisors.sort()\n    for i in range(n):\n        if divisors[i]!= divisors[i+1]:\n            return divisors[i]\n    return divisors[-1]\n\n-----Constraints-----\n1 <= n <= 10^4\n1 <= d_1, d_2, d_3 <= 10^4\n\n-----Time Limit-----\n1 sec\n\n-----Space Limit-----\n1 sec\n\n-----Tags-----\nFinal\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 185,
        "indeed": false
    },
    {
        "number": 4002,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[int(i) for i in input().split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(",
        "test": "",
        "num_ids": 1648,
        "indeed": false
    },
    {
        "number": 4003,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    k = len(a)\n    s = ''\n    for i in range(k):\n        s += str(a[i])\n    return s\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a[i] <= 10^5\n\n-----Time Limit-----\n\nO(n)\n\nO(n)\n\n-----Space Limit-----\n\nO(n)\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 3 2\n\nSample Output\n\n4\nLRRR\n\nExplanation\n\nThe sequence is strictly increasing.\n\nThe longest sequence is 4.\n\nThe sequence is strictly decreasing.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.\n\nThe sequence is 4.",
        "test": "",
        "num_ids": 1475,
        "indeed": false
    },
    {
        "number": 4004,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    d = 0\n    for i in range(n):\n        if a[i] < 0:\n            d += a[i]\n        else:\n            a[i] = -a[i]\n    if d < 0:\n        return -1\n    else:\n        return d\n",
        "test": "",
        "num_ids": 98,
        "indeed": false
    },
    {
        "number": 4005,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    x_1, y_1 = (x1, y1)\n    x_2, y_2 = (x2, y2)\n    x_3, y_3 = (x3, y3)\n    x_4, y_4 = (x4, y4)\n    x_5, y_5 = (x5, y5)\n    x_6, y_6 = (x6, y6)\n    if (x_1 < x_2 and x_1 < x_3 and x_1 < x_4 and x_1 < x_5 and x_1 < x_6):\n        if (y_1 < y_2 and y_1 < y_3 and y_1 < y_4 and y_1 < y_5 and y_1 < y_6):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n",
        "test": "",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 4006,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    answer = 0\n    for i in range(n):\n        if i == 0:\n            answer += 1\n        else:\n            if nums[i] == nums[i-1]:\n                answer += 1\n            else:\n                answer += 1\n                nums[i] = nums[i-1]\n                nums[i-1] = 0\n    return str(answer)\n\n-----Constraints-----\n\n1 <= n <= 10^4\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Space Limit-----\n\nO(n)\n\n\n-----Submissions-----\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nGuaranteed constraints:\n2 \u2264 n \u2264 10^4\n\n[output] string\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 220,
        "indeed": false
    },
    {
        "number": 4007,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    friends = [int(i) for i in stdin.strip().split()]\n    friends.sort()\n    for i in range(n):\n        if friends[i]!= friends[i+1]:\n            return str(friends[i]) + str(friends[i+1])\n    return str(friends[n-1]) + str(friends[0])\n",
        "test": "",
        "num_ids": 98,
        "indeed": false
    },
    {
        "number": 4008,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    answer = []\n    for i in range(n):\n        answer.append(a[i] * (k - 1) + a[i] - 1)\n    return \"\".join(map(str, answer))\n\ndef",
        "test": "",
        "num_ids": 85,
        "indeed": false
    },
    {
        "number": 4009,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    if n == 0:\n        return str(10**y)\n    if n == 1:\n        return str(10**x)\n    if n == 2:\n        return str(10**x)\n    if n == 3:\n        return str(10**x)\n    if n == 4:\n        return str(10**x)\n    if n == 5:\n        return str(10**x)\n    if n == 6:\n        return str(10**x)\n    if n == 7:\n        return str(10**x)\n    if n == 8:\n        return str(10**x)\n    if n == 9:\n        return str(10**x)\n    if n == 10:\n        return str(10**x)\n    if n == 11:\n        return str(10**x)\n    if n == 12:\n        return str(10**x)\n    if n == 13:\n        return str(10**x)\n    if n == 14:\n        return str(10**x)\n    if n == 15:\n        return str(10**x)\n    if n == 16:\n        return str(10**x)\n    if n == 17:\n        return str(10**x)\n    if n == 18:\n        return str(10**x)\n    if n == 19:\n        return str(10**x)\n    if n == 20:\n        return str(10**x)\n    if n == 21:\n        return str(10**x)\n    if n == 22:\n        return str(10**x)\n    if n == 23:\n        return str(10**x)\n    if n == 24:\n        return str(10**x)\n    if n == 25:\n        return str(10**x)\n    if n == 26:\n        return str(10**x)\n    if n == 27:\n        return str(10**x)\n    if n == 28:\n        return str(10**x)\n    if n == 29:\n        return str(10**x)\n    if n == 30:\n        return str(10**x)\n    if n == 31:\n        return str(10**x)\n    if n == 32:\n        return str(10**x)\n    if n == 33:\n        return str(10**x)\n    if n == 34:\n        return str(10**x)\n    if n == 35:\n        return str(10**x)\n    if n == 36:\n        return str(10**x)\n    if n == 37:\n        return str(10**x)\n    if n == 38:\n        return str(10**x)\n    if n == 39:\n        return str(10**x)\n    if n == 40:\n        return str(10**x)\n    if n == 41:\n        return str(10**x)\n    if n == 42:\n        return str(10**x)\n    if n == 43:\n        return str(10**x)\n    if n == 44:\n        return str(10**x)\n    if n == 45:\n        return str(10**x)\n    if n == 46:\n        return str(10**x)\n    if n == 47:\n        return str(10**x)\n    if n == 48:\n        return str(10**x)\n    if n == 49:\n        return str(10**x)\n    if n == 50:\n        return str(10**x)\n    if n == 51:\n        return str(10**x)\n    if n == 52:\n        return str(10**x)\n    if n == 53:\n        return str(10**x)\n    if n == 54:\n        return str(10**x)\n    if n == 55:\n        return str(10**x)\n    if n == 56:\n        return str(10**x)\n    if n == 57:\n        return str(10**x)\n    if n == 58:\n        return str(10**x)\n    if n == 59:\n        return str(10**x)\n    if n == 60:\n        return str(10**x)\n    if n == 61:\n        return str(10**x)\n    if n == 62:\n        return str(10**x)\n    if n == 63:\n        return str(10**x)\n    if n == 64:\n        return str(10**x)\n    if n == 65:\n        return str(10**x)\n    if n == 66:\n        return str(10**x)\n    if n == 67:\n        return str(10**x)\n    if n == 68:\n        return str(10**x)\n    if n == 69:\n        return str(10**x)\n    if n == 70:\n        return str(10**x)\n    if n == 71:\n        return str(10**x)\n    if n == 72:\n        return str(10**x)\n    if n == 73:\n        return str(10**x)\n    if n == 74:\n        return str(10**x)\n    if n == 75:\n        return str(10**x)\n    if n == 76:\n        return str(10**x)\n    if n == 77:\n        return str(10**x)\n    if n == 78:\n        return str(10**x)\n    if n == 79:\n        return str(10**x)\n    if n == 80:\n        return str(10**x)\n    if n == 81:\n        return str(10**x)\n    if n == 82:\n        return str(10**x)\n    if n == 83:\n        return str(10**x)\n    if n == 84:\n        return str(10**x)\n    if n == 85:\n        return str(10**x)\n    if n == 86:\n        return str(10**x)\n    if n == 87:\n        return str(10**x)\n    if n == 88:\n        return str(10**x)\n    if n == 89:\n        return str(10**x)\n    if n == 90:\n        return str(10**x)\n    if n == 91:\n        return str(10**x)\n    if n == 92:\n        return str(10**x)\n    if n == 93:\n        return str(10**x)\n    if n == 94:\n        return str(10**x)\n    if n == 95:\n        return str(10**x)\n    if n == 96:\n        return str(10**x)\n    if n == 97:\n        return str(10",
        "test": "",
        "num_ids": 1582,
        "indeed": false
    },
    {
        "number": 4010,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    palindrome = []\n    for i in range(n):\n        palindrome.append(a[i] == a[i][::-1])\n    if sum(palindrome) == n:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(input()))\n",
        "test": "",
        "num_ids": 105,
        "indeed": false
    },
    {
        "number": 4011,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    f = lambda x: x % 10\n    f_list = list(map(f, a))\n    f_list.sort()\n    f_list = [str(i) for i in f_list]\n    f_list = ''.join(f_list)\n    return f_list\n",
        "test": "",
        "num_ids": 100,
        "indeed": false
    },
    {
        "number": 4012,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    c = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    c.sort()\n    res = 0\n    for i in range(n):\n        if a[i] % b[i] == 0 and a[i] % c[i] == 0:\n            res += 1\n    print(res)\n    return str(res)\n\n-----Constraints-----\n1 <= t <= 10^4\n1 <= a, b, c <= 10^4\n\n-----Time Limit-----\n1 sec\n\n-----Space Limit-----\n1 sec\n\n-----Tags-----\nFinal\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 200,
        "indeed": false
    },
    {
        "number": 4013,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[:-1]\n    a.sort()\n    a = a[1:]\n    a",
        "test": "",
        "num_ids": 1699,
        "indeed": false
    },
    {
        "number": 4014,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    d = [0] * n\n    c = [0] * n\n    for i in range(n):\n        d[i] = s[i]\n        c[i] = 1\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if s[i] < s[j]:\n                d[j] = max(d[j], d[i] + 1)\n                c[j] += 1\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if s[i] < s[j]:\n                c[j] += 1\n    if c[n - 1] == 0:\n        return '-1'\n    else:\n        return str(n - c[n - 1])\n\ndef",
        "test": "",
        "num_ids": 224,
        "indeed": false
    },
    {
        "number": 4015,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return str(0)\n    if n < m:\n        return str(n * (m - n) + 1)\n    if n % m == 0:\n        return str(n * (m - n) + 1)\n    return str(n * (m - n) + 1)\n\nprint(solution(\"120 51840\"))\nprint(solution(\"42 42\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"48 72\"))\nprint(solution(\"",
        "test": "",
        "num_ids": 1692,
        "indeed": false
    },
    {
        "number": 4016,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    t = s[0]\n    l = len(s)\n    if l < k:\n        return \"\"\n    if l == k:\n        return t\n    for i in range(l):\n        if s[i] == t[i]:\n            continue\n        else:\n            return \"\"\n    return t\n\nprint(solution(input()))\n",
        "test": "",
        "num_ids": 109,
        "indeed": false
    },
    {
        "number": 4017,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    j = 0\n    for i in range(n):\n        if a[i]!= a[i+1]:\n            j += 1\n    return str(j)\n\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\n",
        "test": "",
        "num_ids": 1298,
        "indeed": false
    },
    {
        "number": 4018,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    S = set(s)\n    if len(S) < k:\n        return -1\n    else:\n        return min(len(S) - k, len(S))\n\nprint(solution(stdin))\n",
        "test": "",
        "num_ids": 78,
        "indeed": false
    },
    {
        "number": 4019,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        v1, v2 = map(int, stdin.split())\n        edges.append((v1, v2))\n    edges.sort()\n    visited = [False] * (n + 1)\n    visited[1] = True\n    for v in range(2, n + 1):\n        if not visited[v]:\n            dfs(v, D, edges, visited)\n    return \"YES\" if visited[1] else \"NO\"\n\ndef",
        "test": "",
        "num_ids": 144,
        "indeed": false
    },
    {
        "number": 4020,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    if h < 0 or m < 0:\n        return '0:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n        return '23:59'\n    if h == 23 and m == 0:\n        return '00:00'\n    if h == 23 and m == 59:\n",
        "test": "",
        "num_ids": 1528,
        "indeed": false
    },
    {
        "number": 4021,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n == 159:\n        return 159\n    if n == 160:\n        return 160\n    if n == 161:\n        return 161\n    if n == 162:\n        return 162\n    if n == 163:\n        return 163\n    if n == 164:\n        return 164\n    if n == 165:\n        return 165\n    if n == 166:\n        return 166\n    if n == 167:\n        return 167\n    if n == 168:\n        return 168\n    if n == 169:\n        return 169\n    if n == 170:\n        return 170\n    if n == 171:\n        return 171\n    if n == 172:\n        return 172\n    if n == 173:\n        return 173\n    if n == 174:\n        return 174\n    if n == 175:\n        return 175\n    if n == 176:\n        return 176\n    if n == 177:\n        return 177\n    if n ==",
        "test": "",
        "num_ids": 1961,
        "indeed": false
    },
    {
        "number": 4022,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for _ in range(n):\n        segments.append(list(map(int, stdin.split())))\n    segments.sort(key=lambda x: x[0])\n    segments = [segments[0]] + segments[1:]\n    for i in range(1, n):\n        segments[i][0] = min(segments[i][0], segments[i - 1][0])\n        segments[i][1] = max(segments[i][1], segments[i - 1][1])\n    return str(len(set(segments)))\n\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"3\"))\nprint(solution(\"2\"))\nprint(solution(\"0\"))\nprint(solution(\"1\"))\nprint(solution(\"2\"))\nprint(solution(\"3\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"6\"))\nprint(solution(\"7\"))\n",
        "test": "",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 4023,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] == a[1] == a[2] == a[3] == a[4] == a[5]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(input()))\n",
        "test": "",
        "num_ids": 90,
        "indeed": false
    },
    {
        "number": 4024,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    S = set(s)\n    if len(S) < k:\n        return -1\n    else:\n        return min(len(S) - k, len(S))\n\nprint(solution(\"asdf\"))\nprint(solution(\"aaaaa\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(solution(\"10 100\"))\nprint(s",
        "test": "",
        "num_ids": 1521,
        "indeed": false
    },
    {
        "number": 4025,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a > b and a > c:\n        return str(a-b)\n    elif b > a and b > c:\n        return str(b-a)\n    else:\n        return str(c-b)\n\nprint(solution(\"2 1 1\"))\nprint(solution(\"3 2 2\"))\nprint(solution(\"1 100 1\"))\nprint(solution(\"30 20 10\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20\"))\nprint(solution(\"31 30 20",
        "test": "",
        "num_ids": 1511,
        "indeed": false
    },
    {
        "number": 4026,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tiles = []\n    for _ in range(n):\n        tiles.append(list(map(int, stdin.split())))\n    \n    def check(tiles):\n        for i in range(n):\n            for j in range(m):\n                if tiles[i][j]!= tiles[j][i]:\n                    return False\n        return True\n    \n    for i in range(n):\n        for j in range(m):\n            if check(tiles[i]):\n                tiles[i][j] = 1\n            else:\n                tiles[i][j] = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == 1:\n                tiles[i][j] = 2\n            else:\n                tiles[i][j] = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == 2:\n                tiles[i][j] = 1\n            else:\n                tiles[i][j] = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == 1:\n                tiles[i][j] = 2\n            else:\n                tiles[i][j] = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == 2:\n                tiles[i][j] = 1\n            else:\n                tiles[i][j] = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == 1:\n                tiles[i][j] = 2\n            else:\n                tiles[i][j] = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == 2:\n                tiles[i][j] = 1\n            else:\n                tiles[i][j] = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == 1:\n                tiles[i][j] = 2\n            else:\n                tiles[i][j] = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == 2:\n                tiles[i][j] = 1\n            else:\n                tiles[i][j] = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == 1:\n                tiles[i][j] = 2\n            else:\n                tiles[i][j] = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == 2:\n                tiles[i][j] = 1\n            else:\n                tiles[i][j] = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == 1:\n                tiles[i][j] = 2\n            else:\n                tiles[i][j] = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == 2:\n                tiles[i][j] = 1\n            else:\n                tiles[i][j] = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == 1:\n                tiles[i][j] = 2\n            else:\n                tiles[i][j] = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == 2:\n                tiles[i][j] = 1\n            else:\n                tiles[i][j] = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == 1:\n                tiles[i][j] = 2\n            else:\n                tiles[i][j] = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == 2:\n                tiles[i][j] = 1\n            else:\n                tiles[i][j] = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == 1:\n                tiles[i][j] = 2\n            else:\n                ",
        "test": "",
        "num_ids": 1136,
        "indeed": false
    },
    {
        "number": 4027,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = set(map(int, stdin.split()))\n    B = set(map(int, stdin.split()))\n    A = A - B\n    B = B - A\n    A = abs(sum(A))\n    B = abs(sum(B))\n    return str(min(A, B))\n\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 3 4 5\"))\nprint(solution(\"1 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"",
        "test": "",
        "num_ids": 1662,
        "indeed": false
    },
    {
        "number": 4028,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    s = s.replace(')', ')()')\n    s = s.replace('(', ')()')\n    s = s.replace(')', ')()')\n    s = s.replace('(()', ')()')\n    s = s.replace('()()', ')()')\n    s = s.replace('()()()', ')()()')\n    s = s.replace('()()()()', ')()()')\n    s = s.replace('()()()()()', ')()()')\n    s = s.replace('()()()()()()', ')()()')\n    s = s.replace('()()()()()()()', ')()()')\n    s = s.replace('()()()()()()()()', ')()()')\n    s = s.replace('()()()()()()()()()', ')()()')\n    s = s.replace('()()()()()()()()()()()', ')()()')\n    s = s.replace('()()()()()()()()()()()()()', ')()()')\n    s = s.replace('()()()()()()()()()()()()()()()', ')()()')\n    s = s.replace('()()()()()()()()()()()()()()()()()', ')()()')\n    s = s.replace('()()()()()()()()()()()()()()()()()()', ')()()')\n    s = s.replace('()()()()()()()()()()()()()()()()()()()', ')()()')\n    s = s.replacen\ndef",
        "test": "",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 4029,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return -1\n    else:\n        return len(str(n))\n\ndef",
        "test": "",
        "num_ids": 39,
        "indeed": false
    },
    {
        "number": 4030,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    c = [0] * n\n    for i in range(n):\n        c[i] = int(s[i])\n    c.sort()\n    for i in range(n):\n        if c[i] == 1:\n            c[i] = 2\n        else:\n            c[i] = 1\n    return ''.join(map(str, c))\n",
        "test": "",
        "num_ids": 110,
        "indeed": false
    },
    {
        "number": 4031,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    strings = [stdin[i:i+n] for i in range(0, len(stdin), n)]\n    answer = []\n    for string in strings:\n        answer.append(string)\n    return ''.join(answer)\n\ndef",
        "test": "",
        "num_ids": 71,
        "indeed": false
    },
    {
        "number": 4032,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a",
        "test": "",
        "num_ids": 1473,
        "indeed": false
    },
    {
        "number": 4033,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return '{}'.format(a-b)\n    else:\n        return '{}'.format(b-a)\n\ndef",
        "test": "",
        "num_ids": 55,
        "indeed": false
    },
    {
        "number": 4034,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    if n == 1:\n        return s\n    \n    if n == 2:\n        return \"NO\"\n    \n    if n == 3:\n        return \"YES\"\n    \n    if n == 4:\n        return \"YES\"\n    \n    if n == 5:\n        return \"YES\"\n    \n    if n == 6:\n        return \"YES\"\n    \n    if n == 7:\n        return \"YES\"\n    \n    if n == 8:\n        return \"YES\"\n    \n    if n == 9:\n        return \"YES\"\n    \n    if n == 10:\n        return \"YES\"\n    \n    if n == 11:\n        return \"YES\"\n    \n    if n == 12:\n        return \"YES\"\n    \n    if n == 13:\n        return \"YES\"\n    \n    if n == 14:\n        return \"YES\"\n    \n    if n == 15:\n        return \"YES\"\n    \n    if n == 16:\n        return \"YES\"\n    \n    if n == 17:\n        return \"YES\"\n    \n    if n == 18:\n        return \"YES\"\n    \n    if n == 19:\n        return \"YES\"\n    \n    if n == 20:\n        return \"YES\"\n    \n    if n == 21:\n        return \"YES\"\n    \n    if n == 22:\n        return \"YES\"\n    \n    if n == 23:\n        return \"YES\"\n    \n    if n == 24:\n        return \"YES\"\n    \n    if n == 25:\n        return \"YES\"\n    \n    if n == 26:\n        return \"YES\"\n    \n    if n == 27:\n        return \"YES\"\n    \n    if n == 28:\n        return \"YES\"\n    \n    if n == 29:\n        return \"YES\"\n    \n    if n == 30:\n        return \"YES\"\n    \n    if n == 31:\n        return \"YES\"\n    \n    if n == 32:\n        return \"YES\"\n    \n    if n == 33:\n        return \"YES\"\n    \n    if n == 34:\n        return \"YES\"\n    \n    if n == 35:\n        return \"YES\"\n    \n    if n == 36:\n        return \"YES\"\n    \n    if n == 37:\n        return \"YES\"\n    \n    if n == 38:\n        return \"YES\"\n    \n    if n == 39:\n        return \"YES\"\n    \n    if n == 40:\n        return \"YES\"\n    \n    if n == 41:\n        return \"YES\"\n    \n    if n == 42:\n        return \"YES\"\n    \n    if n == 43:\n        return \"YES\"\n    \n    if n == 44:\n        return \"YES\"\n    \n    if n == 45:\n        return \"YES\"\n    \n    if n == 46:\n        return \"YES\"\n    \n    if n == 47:\n        return \"YES\"\n    \n    if n == 48:\n        return \"YES\"\n    \n    if n == 49:\n        return \"YES\"\n    \n    if n == 50:\n        return \"YES\"\n    \n    if n == 51:\n        return \"YES\"\n    \n    if n == 52:\n        return \"YES\"\n    \n    if n == 53:\n        return \"YES\"\n    \n    if n == 54:\n        return \"YES\"\n    \n    if n == 55:\n        return \"YES\"\n    \n    if n == 56:\n        return \"YES\"\n    \n    if n == 57:\n        return \"YES\"\n    \n    if n == 58:\n        return \"YES\"\n    \n    if n == 59:\n        return \"YES\"\n    \n    if n == 60:\n        return \"YES\"\n    \n    if n == 61:\n        return \"YES\"\n    \n    if n == 62:\n        return \"YES\"\n    \n    if n == 63:\n        return \"YES\"\n    \n    if n == 64:\n        return \"YES\"\n    \n    if n == 65:\n        return \"YES\"\n    \n    if n == 66:\n        return \"YES\"\n    \n    if n == 67:\n        return \"YES\"\n    \n    if n == 68:\n        return \"YES\"\n    \n    if n == 69:\n        return \"YES\"\n    \n    if n == 70:\n        return \"YES\"\n    \n    if n == 71:\n        return \"YES\"\n    \n    if n == 72:\n        return \"YES\"\n    \n    if n == 73:\n        return \"YES\"\n    \n    if n == 74:\n        return \"YES\"\n    \n    if n == 75:\n        return \"YES\"\n    \n    if n == 76:\n        return \"YES\"\n    \n    if n == 77:\n        return \"YES\"\n    \n    if n == 78:\n        return \"YES\"\n    \n    if n == 79:\n        return \"YES\"\n    \n    if n == 80:\n        return \"YES\"\n    \n    if n == 81:\n        return \"YES\"\n    \n    if n == 82:\n        return \"YES\"\n    \n    if n == 83:\n        return \"YES\"\n    \n    if n == 84:\n        return \"YES\"\n    \n    if n == 85:\n        return \"YES\"\n    \n    if n == 86:\n        return \"YES\"\n    \n    if n == 87:\n        return \"YES\"\n    \n    if n == 88:\n        return \"YES\"\n    \n    if n == 89:\n        return \"YES\"\n    \n    if n == 90:\n        return \"YES\"\n    \n    if n == 91:\n        return \"YES\"\n    \n    if n == 92:\n        return \"YES\"\n    \n    if n == 93:\n        return \"YES\"\n    \n    if n == 94:\n        return \"YES\"\n    \n    if n == 95:\n        return \"YES\"\n    \n    if n == 96:\n        return \"YES\"\n    \n    if n == 97:\n        return \"YES\"\n    \n    if n == 98:\n        return \"YES\"\n    \n    if n == 99:\n        return \"YES\"\n    \n    if n == 100:\n        return \"YES\"\n    \n    if n == 101:\n        return \"YES\"\n    \n    if n == 102:\n        return \"YES\"\n    \n    if n == 103:\n        return \"YES\"\n    \n    if n == 104:\n        return \"YES\"\n",
        "test": "",
        "num_ids": 1577,
        "indeed": false
    },
    {
        "number": 4035,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A < B:\n        return str(A)\n    elif A == B:\n        return str(B)\n    else:\n        return str(-1)\n",
        "test": "",
        "num_ids": 56,
        "indeed": false
    },
    {
        "number": 4036,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n == 1:\n        return \"NO\"\n    if n == 2:\n        return \"YES\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"YES\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"YES\"\n    if n == 7:\n        return \"YES\"\n    if n == 8:\n        return \"YES\"\n    if n == 9:\n        return \"YES\"\n    if n == 10:\n        return \"YES\"\n    if n == 11:\n        return \"YES\"\n    if n == 12:\n        return \"YES\"\n    if n == 13:\n        return \"YES\"\n    if n == 14:\n        return \"YES\"\n    if n == 15:\n        return \"YES\"\n    if n == 16:\n        return \"YES\"\n    if n == 17:\n        return \"YES\"\n    if n == 18:\n        return \"YES\"\n    if n == 19:\n        return \"YES\"\n    if n == 20:\n        return \"YES\"\n    if n == 21:\n        return \"YES\"\n    if n == 22:\n        return \"YES\"\n    if n == 23:\n        return \"YES\"\n    if n == 24:\n        return \"YES\"\n    if n == 25:\n        return \"YES\"\n    if n == 26:\n        return \"YES\"\n    if n == 27:\n        return \"YES\"\n    if n == 28:\n        return \"YES\"\n    if n == 29:\n        return \"YES\"\n    if n == 30:\n        return \"YES\"\n    if n == 31:\n        return \"YES\"\n    if n == 32:\n        return \"YES\"\n    if n == 33:\n        return \"YES\"\n    if n == 34:\n        return \"YES\"\n    if n == 35:\n        return \"YES\"\n    if n == 36:\n        return \"YES\"\n    if n == 37:\n        return \"YES\"\n    if n == 38:\n        return \"YES\"\n    if n == 39:\n        return \"YES\"\n    if n == 40:\n        return \"YES\"\n    if n == 41:\n        return \"YES\"\n    if n == 42:\n        return \"YES\"\n    if n == 43:\n        return \"YES\"\n    if n == 44:\n        return \"YES\"\n    if n == 45:\n        return \"YES\"\n    if n == 46:\n        return \"YES\"\n    if n == 47:\n        return \"YES\"\n    if n == 48:\n        return \"YES\"\n    if n == 49:\n        return \"YES\"\n    if n == 50:\n        return \"YES\"\n    if n == 51:\n        return \"YES\"\n    if n == 52:\n        return \"YES\"\n    if n == 53:\n        return \"YES\"\n    if n == 54:\n        return \"YES\"\n    if n == 55:\n        return \"YES\"\n    if n == 56:\n        return \"YES\"\n    if n == 57:\n        return \"YES\"\n    if n == 58:\n        return \"YES\"\n    if n == 59:\n        return \"YES\"\n    if n == 60:\n        return \"YES\"\n    if n == 61:\n        return \"YES\"\n    if n == 62:\n        return \"YES\"\n    if n == 63:\n        return \"YES\"\n    if n == 64:\n        return \"YES\"\n    if n == 65:\n        return \"YES\"\n    if n == 66:\n        return \"YES\"\n    if n == 67:\n        return \"YES\"\n    if n == 68:\n        return \"YES\"\n    if n == 69:\n        return \"YES\"\n    if n == 70:\n        return \"YES\"\n    if n == 71:\n        return \"YES\"\n    if n == 72:\n        return \"YES\"\n    if n == 73:\n        return \"YES\"\n    if n == 74:\n        return \"YES\"\n    if n == 75:\n        return \"YES\"\n    if n == 76:\n        return \"YES\"\n    if n == 77:\n        return \"YES\"\n    if n == 78:\n        return \"YES\"\n    if n == 79:\n        return \"YES\"\n    if n == 80:\n        return \"YES\"\n    if n == 81:\n        return \"YES\"\n    if n == 82:\n        return \"YES\"\n    if n == 83:\n        return \"YES\"\n    if n == 84:\n        return \"YES\"\n    if n == 85:\n        return \"YES\"\n    if n == 86:\n        return \"YES\"\n    if n == 87:\n        return \"YES\"\n    if n == 88:\n        return \"YES\"\n    if n == 89:\n        return \"YES\"\n    if n == 90:\n        return \"YES\"\n    if n == 91:\n        return \"YES\"\n    if n == 92:\n        return \"YES\"\n    if n == 93:\n        return \"YES\"\n    if n == 94:\n        return \"YES\"\n    if n == 95:\n        return \"YES\"\n    if n == 96:\n        return \"YES\"\n    if n == 97:\n        return \"YES\"\n    if n == 98:\n        return \"YES\"\n    if n == 99:\n        return \"YES\"\n    if n == 100:\n        return \"YES\"\n    if n == 101:\n        return \"YES\"\n    if n == 102:\n        return \"YES\"\n    if n == 103:\n        return \"YES\"\n    if n == 104:\n        return \"YES\"\n    if n == 105:\n        return \"YES\"\n    if n == 106:\n        return \"YES\"\n    if n == 107:\n        return \"",
        "test": "",
        "num_ids": 1426,
        "indeed": false
    },
    {
        "number": 4037,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a_i = 0\n    b_i = 0\n    for i in range(n):\n        if a[i] > b[i]:\n            a_i += 1\n        else:\n            b_i += 1\n    if a_i > b_i:\n        return str(a_i)\n    else:\n        return str(b_i)\n",
        "test": "",
        "num_ids": 146,
        "indeed": false
    },
    {
        "number": 4038,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    if len(a) == 1:\n        return \"YES\"\n    if len(a) == 2:\n        return \"YES\"\n    if len(a) == 3:\n        return \"YES\"\n    if len(a) == 4:\n        return \"YES\"\n    if len(a) == 5:\n        return \"YES\"\n    if len(a) == 6:\n        return \"YES\"\n    if len(a) == 7:\n        return \"YES\"\n    if len(a) == 8:\n        return \"YES\"\n    if len(a) == 9:\n        return \"YES\"\n    if len(a) == 10:\n        return \"YES\"\n    if len(a) == 11:\n        return \"YES\"\n    if len(a) == 12:\n        return \"YES\"\n    if len(a) == 13:\n        return \"YES\"\n    if len(a) == 14:\n        return \"YES\"\n    if len(a) == 15:\n        return \"YES\"\n    if len(a) == 16:\n        return \"YES\"\n    if len(a) == 17:\n        return \"YES\"\n    if len(a) == 18:\n        return \"YES\"\n    if len(a) == 19:\n        return \"YES\"\n    if len(a) == 20:\n        return \"YES\"\n    if len(a) == 21:\n        return \"YES\"\n    if len(a) == 22:\n        return \"YES\"\n    if len(a) == 23:\n        return \"YES\"\n    if len(a) == 24:\n        return \"YES\"\n    if len(a) == 25:\n        return \"YES\"\n    if len(a) == 26:\n        return \"YES\"\n    if len(a) == 27:\n        return \"YES\"\n    if len(a) == 28:\n        return \"YES\"\n    if len(a) == 29:\n        return \"YES\"\n    if len(a) == 30:\n        return \"YES\"\n    if len(a) == 31:\n        return \"YES\"\n    if len(a) == 32:\n        return \"YES\"\n    if len(a) == 33:\n        return \"YES\"\n    if len(a) == 34:\n        return \"YES\"\n    if len(a) == 35:\n        return \"YES\"\n    if len(a) == 36:\n        return \"YES\"\n    if len(a) == 37:\n        return \"YES\"\n    if len(a) == 38:\n        return \"YES\"\n    if len(a) == 39:\n        return \"YES\"\n    if len(a) == 40:\n        return \"YES\"\n    if len(a) == 41:\n        return \"YES\"\n    if len(a) == 42:\n        return \"YES\"\n    if len(a) == 43:\n        return \"YES\"\n    if len(a) == 44:\n        return \"YES\"\n    if len(a) == 45:\n        return \"YES\"\n    if len(a) == 46:\n        return \"YES\"\n    if len(a) == 47:\n        return \"",
        "test": "",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 4039,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort(reverse=True)\n    if a[0] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] == b[0]:\n        return \"YES\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] < b[-1]:\n        return \"NO\"\n    if a[-1] > b[0]:\n        return \"NO\"\n    if a[0] == b[-1]:\n        return \"YES\"\n    if a[-1] == b[0]:\n        return \"YES\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] < b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    if a[0] > b[-1]:\n        return \"NO\"\n    if a[-1] <",
        "test": "",
        "num_ids": 1461,
        "indeed": false
    },
    {
        "number": 4040,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c = [int(i) for i in stdin.split()]\n    a = [0] * (n + 1)\n    for i in range(m):\n        a[c[i]] = i + 1\n    for i in range(n - m + 1):\n        a[i + m] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i + 1\n    for i in range(n - m - 1, n + 1):\n        a[i + m - 1] = i",
        "test": "",
        "num_ids": 929,
        "indeed": false
    },
    {
        "number": 4041,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    l = len(s)\n    if l < 2:\n        return 0\n    if l == 2:\n        if s[0] == t[0]:\n            return l\n        else:\n            return 0\n    if s[0] == t[0]:\n        return solution(s[1:])\n    if s[0]!= t[0]:\n        return solution(s[1:])\n    if s[0] == t[1]:\n        return solution(s[2:])\n    if s[0]!= t[1]:\n        return solution(s[2:])\n    if s[0] == t[2]:\n        return solution(s[3:])\n    if s[0]!= t[2]:\n        return solution(s[3:])\n    if s[0] == t[3]:\n        return solution(s[4:])\n    if s[0]!= t[3]:\n        return solution(s[4:])\n    if s[0] == t[4]:\n        return solution(s[5:])\n    if s[0]!= t[4]:\n        return solution(s[5:])\n    if s[0] == t[5]:\n        return solution(s[6:])\n    if s[0]!= t[5]:\n        return solution(s[6:])\n    if s[0] == t[6]:\n        return solution(s[7:])\n    if s[0]!= t[6]:\n        return solution(s[7:])\n    if s[0] == t[7]:\n        return solution(s[8:])\n    if s[0]!= t[7]:\n        return solution(s[8:])\n    if s[0] == t[8]:\n        return solution(s[9:])\n    if s[0]!= t[8]:\n        return solution(s[9:])\n    if s[0] == t[9]:\n        return solution(s[10:])\n    if s[0]!= t[9]:\n        return solution(s[10:])\n    if s[0] == t[10]:\n        return solution(s[11:])\n    if s[0]!= t[10]:\n        return solution(s[11:])\n    if s[0] == t[11]:\n        return solution(s[12:])\n    if s[0]!= t[11]:\n        return solution(s[12:])\n    if s[0] == t[12]:\n        return solution(s[13:])\n    if s[0]!= t[12]:\n        return solution(s[13:])\n    if s[0] == t[13]:\n        return solution(s[14:])\n    if s[0]!= t[13]:\n        return solution(s[14:])\n    if s[0] == t[14]:\n        return solution(s[15:])\n    if s[0]!= t[14]:\n        return solution(s[15:])\n    if s[0] == t[15]:\n        return solution(s[16:])\n    if s[0]!= t[15]:\n        return solution(s[16:])\n    if s[0] == t[16]:\n        return solution(s[17:])\n    if s[0]!= t[16]:\n        return solution(s[17:])\n    if s[0] == t[17]:\n        return solution(s[18:])\n    if s[0]!= t[17]:\n        return solution(s[18:])\n    if s[0] == t[18]:\n        return solution(s[19:])\n    if s[0]!= t[18]:\n        return solution(s[19:])\n    if s[0] == t[19]:\n        return solution(s[20:])\n    if s[0]!= t[19]:\n        return solution(s[20:])\n    if s[0] == t[20]:\n        return solution(s[21:])\n    if s[0]!= t[20]:\n        return solution(s[21:])\n    if s[0] == t[21]:\n        return solution(s[22:])\n    if s[0]!= t[21]:\n        return solution(s[22:])\n    if s[0] == t[22]:\n        return solution(s[23:])\n    if s[0]!= t[22]:\n        return solution(s[23:])\n    if s[0] == t[23]:\n        return solution(s[24:])\n    if s[0]!= t[23]:\n        return solution(s[24:])\n    if s[0] == t[24]:\n        return solution(s[25:])\n    if s[0]!= t[24]:\n        return solution(s[25:])\n    if s[0] == t[25]:\n        return solution(s[26:])\n    if s[0]!= t[25]:\n        return solution(s[26:])\n    if s[0] == t[26]:\n        return solution(s[27:])\n    if s[0]!= t[26]:\n        return solution(s[27:])\n    if s[0] == t[27]:\n        return solution(s[28:])\n    if s[0]!= t[27]:\n        return solution(s[28:])\n    if s[0] == t[28]:\n        return solution(s[29:])\n    if s[0]!= t[28]:\n        return solution(s[29:])\n    if s[0] == t[29]:\n        return solution(s[30:])\n    if s[0]!= t[29]:\n        return solution(s[30:])\n    if s[0] == t[30]:\n        return solution(s[31:])\n    if s[0]!= t[30]:\n        return solution(s[31:])\n    if s[0] == t[31]:\n        return solution(s[32:])\n    if s[0]!= t[31]:\n        return solution(s[32:])\n    if s[0] == t[32]:\n        return solution(s[33:])\n    if s[0]!= t[32]:\n        return solution(s[33:])\n    if s[0] == t[33]:\n        ",
        "test": "",
        "num_ids": 1567,
        "indeed": false
    },
    {
        "number": 4042,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 1 or x > 10:\n        return \"Invalid Input\"\n    if x % 2 == 0:\n        return str(x // 2) + \" \" + str(x % 2)\n    else:\n        return str(x // 2) + \" \" + str(x % 2) + \" \" + str(x % 2)\n",
        "test": "",
        "num_ids": 89,
        "indeed": false
    },
    {
        "number": 4043,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n == 1:\n        return \"NO\"\n    if d > k:\n        return \"NO\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n        return \"YES\"\n    if d == k:\n        return \"YES\"\n    if d > k:\n",
        "test": "",
        "num_ids": 1598,
        "indeed": false
    },
    {
        "number": 4044,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if a + b == x:\n        return '1'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x:\n        return '0'\n    if a + b > x:\n        return '0'\n    if a + b < x:\n        return '0'\n    if a + b == x",
        "test": "",
        "num_ids": 1645,
        "indeed": false
    },
    {
        "number": 4045,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(int, stdin.split())\n    if n == 1:\n        if s == t:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if s == t:\n        return \"YES\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n    if s == t:",
        "test": "",
        "num_ids": 1536,
        "indeed": false
    },
    {
        "number": 4046,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    q = list(map(int, stdin.strip().split()))\n    q.sort()\n    if n == 1:\n        return str(q[0])\n    if n == 2:\n        return str(q[0] + q[1])\n    if n == 3:\n        return str(q[0] + q[1] + q[2])\n    if n == 4:\n        return str(q[0] + q[1] + q[2] + q[3])\n    if n == 5:\n        return str(q[0] + q[1] + q[2] + q[3] + q[4])\n    if n == 6:\n        return str(q[0] + q[1] + q[2] + q[3] + q[4] + q[5])\n    if n == 7:\n        return str(q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6])\n    if n == 8:\n        return str(q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7])\n    if n == 9:\n        return str(q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8])\n    if n == 10:\n        return str(q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9])\n    if n == 11:\n        return str(q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10])\n    if n == 12:\n        return str(q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11])\n    if n == 13:\n        return str(q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12])\n    if n == 14:\n        return str(q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13])\n    if n == 15:\n        return str(q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14])\n    if n == 16:\n        return str(q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15])\n    if n == 17:\n        return str(q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16])\n    if n == 18:\n        return str(q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] + q[17])\n    if n == 19:\n        return str(q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] + q[17] + q[18])\n    if n == 20:\n        return str(q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] + q[17] + q[18] + q[19])\n    if n == 21:\n        return str(q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] + q[17] + q[18] + q[19] + q[20])\n    if n == 22:\n        return str(q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] + q[17] + q[18] + q[19] + q[20] + q[21])\n    if n == 23:\n        return str(q[0] + q[1] + q[2] + q[3] + q[",
        "test": "",
        "num_ids": 1576,
        "indeed": false
    },
    {
        "number": 4047,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(i) for i in stdin.split()]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x",
        "test": "",
        "num_ids": 1532,
        "indeed": false
    },
    {
        "number": 4048,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return \"2\"\n    if N == 3:\n        return \"3\"\n    if N == 4:\n        return \"4\"\n    if N == 5:\n        return \"5\"\n    if N == 6:\n        return \"6\"\n    if N == 7:\n        return \"7\"\n    if N == 8:\n        return \"8\"\n    if N == 9:\n        return \"9\"\n    if N == 10:\n        return \"10\"\n    if N == 11:\n        return \"11\"\n    if N == 12:\n        return \"12\"\n    if N == 13:\n        return \"13\"\n    if N == 14:\n        return \"14\"\n    if N == 15:\n        return \"15\"\n    if N == 16:\n        return \"16\"\n    if N == 17:\n        return \"17\"\n    if N == 18:\n        return \"18\"\n    if N == 19:\n        return \"19\"\n    if N == 20:\n        return \"20\"\n    if N == 21:\n        return \"21\"\n    if N == 22:\n        return \"22\"\n    if N == 23:\n        return \"23\"\n    if N == 24:\n        return \"24\"\n    if N == 25:\n        return \"25\"\n    if N == 26:\n        return \"26\"\n    if N == 27:\n        return \"27\"\n    if N == 28:\n        return \"28\"\n    if N == 29:\n        return \"29\"\n    if N == 30:\n        return \"30\"\n    if N == 31:\n        return \"31\"\n    if N == 32:\n        return \"32\"\n    if N == 33:\n        return \"33\"\n    if N == 34:\n        return \"34\"\n    if N == 35:\n        return \"35\"\n    if N == 36:\n        return \"36\"\n    if N == 37:\n        return \"37\"\n    if N == 38:\n        return \"38\"\n    if N == 39:\n        return \"39\"\n    if N == 40:\n        return \"40\"\n    if N == 41:\n        return \"41\"\n    if N == 42:\n        return \"42\"\n    if N == 43:\n        return \"43\"\n    if N == 44:\n        return \"44\"\n    if N == 45:\n        return \"45\"\n    if N == 46:\n        return \"46\"\n    if N == 47:\n        return \"47\"\n    if N == 48:\n        return \"48\"\n    if N == 49:\n        return \"49\"\n    if N == 50:\n        return \"50\"\n    if N == 51:\n        return \"51\"\n    if N == 52:\n        return \"52\"\n    if N == 53:\n        return \"53\"\n    if N == 54:\n        return \"54\"\n    if N == 55:\n        return \"55\"\n    if N == 56:\n        return \"56\"\n    if N == 57:\n        return \"57\"\n    if N == 58:\n        return \"58\"\n    if N == 59:\n        return \"59\"\n    if N == 60:\n        return \"60\"\n    if N == 61:\n        return \"61\"\n    if N == 62:\n        return \"62\"\n    if N == 63:\n        return \"63\"\n    if N == 64:\n        return \"64\"\n    if N == 65:\n        return \"65\"\n    if N == 66:\n        return \"66\"\n    if N == 67:\n        return \"67\"\n    if N == 68:\n        return \"68\"\n    if N == 69:\n        return \"69\"\n    if N == 70:\n        return \"70\"\n    if N == 71:\n        return \"71\"\n    if N == 72:\n        return \"72\"\n    if N == 73:\n        return \"73\"\n    if N == 74:\n        return \"74\"\n    if N == 75:\n        return \"75\"\n    if N == 76:\n        return \"76\"\n    if N == 77:\n        return \"77\"\n    if N == 78:\n        return \"78\"\n    if N == 79:\n        return \"79\"\n    if N == 80:\n        return \"80\"\n    if N == 81:\n        return \"81\"\n    if N == 82:\n        return \"82\"\n    if N == 83:\n        return \"83\"\n    if N == 84:\n        return \"84\"\n    if N == 85:\n        return \"85\"\n    if N == 86:\n        return \"86\"\n    if N == 87:\n        return \"87\"\n    if N == 88:\n        return \"88\"\n    if N == 89:\n        return \"89\"\n    if N == 90:\n        return \"90\"\n    if N == 91:\n        return \"91\"\n    if N == 92:\n        return \"92\"\n    if N == 93:\n        return \"93\"\n    if N == 94:\n        return \"94\"\n    if N == 95:\n        return \"95\"\n    if N == 96:\n        return \"96\"\n    if N == 97:\n        return \"97\"\n    if N == 98:\n        return \"98\"\n    if N == 99:\n        return \"99\"\n    if N == 100:\n        return \"100\"\n    if N == 101:\n        return \"101\"\n    if N == 102:\n        return \"102\"\n    if N == 103:\n        return \"103\"\n    if N == 104:\n        return \"104\"\n    if N == 105:\n        return \"105\"\n    if N == 106:\n        return \"106\"\n    if N == 107:\n        return \"107\"\n    if N == 108:\n        return \"108\"\n    if N == 109:\n        return \"109\"\n    if N == 110:\n        return \"110\"\n    if N == 111:\n        return \"111\"\n    if N == 112:\n        return \"112\"\n    if N == 113:\n        return \"113\"\n    if N == 114:\n        return \"114\"\n    if N == 115:\n        return \"115\"\n    if N == 116:\n        return \"116\"\n    if N == 117:\n        return \"117\"\n    if N == 118:\n        return \"118\"\n    if N == 119:\n        return \"119\"\n    if N == 120:\n        return \"120\"\n    if N == 121:\n        return \"121\"\n    if N == 122:\n        return \"122\"\n    if N == 123:\n        return \"123\"\n    if N == 124:\n        return \"124\"\n    if N == 125:\n        return \"125\"\n    if N == 126:\n        return \"126\"\n    if N == 127:\n        return \"127\"\n    if N == 128:\n        return \"128\"\n    if N == 129:\n        return \"129\"\n    if N == 130:\n        return \"130\"\n    if N == 131:\n        return \"131\"\n    if N == 132:\n        return \"132\"\n    if N == 133:\n        return \"133\"\n    if N == 134:\n        return \"134\"\n    if N == 135:\n        return \"135\"\n    if N == 136:\n        return \"136\"\n    if N == 137:\n        return \"137\"\n    if N == 138:\n        return \"138\"\n    if N == 139:\n        return \"139\"\n    if N == 140:\n",
        "test": "",
        "num_ids": 1824,
        "indeed": false
    },
    {
        "number": 4049,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_1 = int(stdin.strip())\n    a_2 = int(stdin.strip())\n    a_3 = int(stdin.strip())\n    b_1 = int(stdin.strip())\n    b_2 = int(stdin.strip())\n    b_3 = int(stdin.strip())\n    a_1_min = a_1\n    a_1_max = a_1\n    a_2_min = a_2\n    a_2_max = a_2\n    a_3_min = a_3\n    a_3_max = a_3\n    b_1_min = b_1\n    b_1_max = b_1\n    b_2_min = b_2\n    b_2_max = b_2\n    b_3_min = b_3\n    b_3_max = b_3\n    for i in range(n):\n        if a_1 < a_2:\n            a_1_min = a_1\n            a_1_max = a_1\n            a_2_min = a_2\n            a_2_max = a_2\n            a_3_min = a_3\n            a_3_max = a_3\n        elif a_1 < a_3:\n            a_1_min = a_1\n            a_1_max = a_1\n            a_3_min = a_3\n            a_3_max = a_3\n            a_2_min = a_2\n            a_2_max = a_2\n        elif a_2 < a_3:\n            a_2_min = a_2\n            a_2_max = a_2\n            a_3_min = a_3\n            a_3_max = a_3\n            a_1_min = a_1\n            a_1_max = a_1\n        else:\n            a_1_min = a_1\n            a_1_max = a_1\n            a_2_min = a_2\n            a_2_max = a_2\n            a_3_min = a_3\n            a_3_max = a_3\n            a_1_min = a_1\n            a_1_max = a_1\n            a_2_min = a_2\n            a_2_max = a_2\n            a_3_min = a_3\n            a_3_max = a_3\n    for i in range(n):\n        if b_1 < b_2:\n            b_1_min = b_1\n            b_1_max = b_1\n            b_2_min = b_2\n            b_2_max = b_2\n            b_3_min = b_3\n            b_3_max = b_3\n        elif b_1 < b_3:\n            b_1_min = b_1\n            b_1_max = b_1\n            b_3_min = b_3\n            b_3_max = b_3\n            b_2_min = b_2\n            b_2_max = b_2\n        elif b_2 < b_3:\n            b_2_min = b_2\n            b_2_max = b_2\n            b_3_min = b_3\n            b_3_max = b_3\n            b_1_min = b_1\n            b_1_max = b_1\n        else:\n            b_1_min = b_1\n            b_1_max = b_1\n            b_2_min = b_2\n            b_2_max = b_2\n            b_3_min = b_3\n            b_3_max = b_3\n            b_1_min = b_1\n            b_1_max = b_1\n            b_2_min = b_2\n            b_2_max = b_2\n            b_3_min = b_3\n            b_3_max = b_3\n    for i in range(n):\n        if a_1_min < a_2_min:\n            a_1_min = a_1_min\n            a_1_max = a_1_max\n            a_2_min = a_2_min\n            a_2_max = a_2_max\n            a_3_min = a_3_min\n            a_3_max = a_3_max\n        elif a_1_min < a_3_min:\n            a_1_min = a_1_min\n            a_1_max = a_1_max\n            a_3_min = a_3_min\n            a_3_max = a_3_max\n            a_2_min = a_2_min\n            a_2_max = a_2_max\n        elif a_1_min < a_2_max:\n            a_1_min = a_1_min\n            a_1_max = a_1_max\n            a_2_min = a_2_min\n            a_2_max = a_2_max\n            a_3_min = a_3_min\n            a_3_max = a_3_max\n        elif a_1_min < a_3_min:\n",
        "test": "",
        "num_ids": 1284,
        "indeed": false
    },
    {
        "number": 4050,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    k = 0\n    for i in range(n):\n        if a[i]!= a[i+1]:\n            k += 1\n    return str(k)\n",
        "test": "",
        "num_ids": 73,
        "indeed": false
    },
    {
        "number": 4051,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    if a[-1] - a[0] == 1:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "test": "",
        "num_ids": 68,
        "indeed": false
    },
    {
        "number": 4052,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip().split()\n    t = stdin.strip().split()\n    if len(s)!= len(t):\n        return \"-1\"\n    for i in range(len(s)):\n        s[i] = s[i].lower()\n        t[i] = t[i].lower()\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            s[i] = t[i]\n        else:\n            s[i] = t[i] + s[i]\n    return \"\".join(s)\n\n-----Constraints-----\n\n1 <= n <= 10^4\ns.length == n\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase letter\ns[i] is a lowercase",
        "test": "",
        "num_ids": 1414,
        "indeed": false
    },
    {
        "number": 4053,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    prefixes = set()\n    suffixes = set()\n    for i in range(n):\n        prefixes.add(s[i][0])\n        suffixes.add(s[i][-1])\n    prefixes = sorted(prefixes)\n    suffixes = sorted(suffixes)\n    for i in range(n):\n        if prefixes[i] == suffixes[i]:\n            prefixes[i] = 'P'\n        else:\n            prefixes[i] = 'S'\n    return ''.join(prefixes)\n",
        "test": "",
        "num_ids": 152,
        "indeed": false
    },
    {
        "number": 4054,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(0, 0)\n    a.append(a[-1] + 100)\n    a.sort()\n    a.insert(",
        "test": "",
        "num_ids": 1831,
        "indeed": false
    },
    {
        "number": 4055,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    k = 0\n    for i in range(n):\n        if a[i] == 1:\n            k += 1\n    return str(k)\n\nprint(solution(\"1 1 0 1 1 0 1 0 1 0\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"7\"))\n",
        "test": "",
        "num_ids": 108,
        "indeed": false
    },
    {
        "number": 4056,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    answer = 0\n    for i in range(1, n+1):\n        answer += len(set(a[i-1:i+1]) & set(range(1, n+1)))\n    return str(answer)\n\nprint(solution(stdin))\n",
        "test": "",
        "num_ids": 94,
        "indeed": false
    },
    {
        "number": 4057,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = a[1:]\n    a.sort()\n    a = a[1:]\n    a = a[:n]\n    a.sort()\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]\n    a = a[:n]",
        "test": "",
        "num_ids": 1741,
        "indeed": false
    },
    {
        "number": 4058,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    heaters = list(map(int, stdin.split()))\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i] for i in range(n)]\n    heaters.sort()\n    heaters = [heaters[i]",
        "test": "",
        "num_ids": 1225,
        "indeed": false
    },
    {
        "number": 4059,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 2:\n        return str(N)\n    \n    A, B, C = map(int, stdin.split())\n    \n    if A * B + C == N:\n        return str(A * B * C)\n    \n    return str(A * B * C) + \" \" + solution(str(N - A * B * C))\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 101,
        "indeed": false
    },
    {
        "number": 4060,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(stdin)\n    s.sort()\n    i = 0\n    while i < n:\n        if s[i] == '(':\n            s[i] = ')'\n            i += 1\n        elif s[i] == ')':\n            s[i] = '('\n            i += 1\n        else:\n            i += 1\n    return ''.join(s)\n",
        "test": "",
        "num_ids": 105,
        "indeed": false
    },
    {
        "number": 4061,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    t = stdin.split()\n    l = len(s)\n    r = len(t)\n    if l < r:\n        return 0\n    if l == r:\n        return len(t[l-1])\n    if l == r:\n        return len(s[l-1])\n    if l == r:\n        return len(s[l-1]) + len(t[l-1])\n    if l == r:\n        return len(s[l-1]) + len(t[l-1]) + len(t[l-2])\n    if l == r:\n        return len(s[l-1]) + len(t[l-1]) + len(t[l-2]) + len(t[l-3])\n    if l == r:\n        return len(s[l-1]) + len(t[l-1]) + len(t[l-2]) + len(t[l-3]) + len(t[l-4])\n    if l == r:\n        return len(s[l-1]) + len(t[l-1]) + len(t[l-2]) + len(t[l-3]) + len(t[l-4]) + len(t[l-5])\n    if l == r:\n        return len(s[l-1]) + len(t[l-1]) + len(t[l-2]) + len(t[l-3]) + len(t[l-4]) + len(t[l-5]) + len(t[l-6])\n    if l == r:\n        return len(s[l-1]) + len(t[l-1]) + len(t[l-2]) + len(t[l-3]) + len(t[l-4]) + len(t[l-5]) + len(t[l-6]) + len(t[l-7])\n    if l == r:\n        return len(s[l-1]) + len(t[l-1]) + len(t[l-2]) + len(t[l-3]) + len(t[l-4]) + len(t[l-5]) + len(t[l-6]) + len(t[l-7]) + len(t[l-8])\n    if l == r:\n        return len(s[l-1]) + len(t[l-1]) + len(t[l-2]) + len(t[l-3]) + len(t[l-4]) + len(t[l-5]) + len(t[l-6]) + len(t[l-7]) + len(t[l-8]) + len(t[l-9])\n    if l == r:\n        return len(s[l-1]) + len(t[l-1]) + len(t[l-2]) + len(t[l-3]) + len(t[l-4]) + len(t[l-5]) + len(t[l-6]) + len(t[l-7]) + len(t[l-8]) + len(t[l-9]) + len(t[l-10])\n    if l == r:\n        return len(s[l-1]) + len(t[l-1]) + len(t[l-2]) + len(t[l-3]) + len(t[l-4]) + len(t[l-5]) + len(t[l-6]) + len(t[l-7]) + len(t[l-8]) + len(t[l-9]) + len(t[l-10]) + len(t[l-11])\n    if l == r:\n        return len(s[l-1]) + len(t[l-1]) + len(t[l-2]) + len(t[l-3]) + len(t[l-4]) + len(t[l-5]) + len(t[l-6]) + len(t[l-7]) + len(t[l-8]) + len(t[l-9]) + len(t[l-10]) + len(t[l-11]) + len(t[l-12])\n    if l == r:\n        return len(s[l-1]) + len(t[l-1]) + len(t[l-2]) + len(t[l-3]) + len(t[l-4]) + len(t[l-5]) + len(t[l-6]) + len(t[l-7]) + len(t[l-8]) + len(t[l-9]) + len(t[l-10]) + len(t[l-11]) + len(t[l-12]) + len(t[l-13])\n    if l == r:\n        return len(s[l-1]) + len(t[l-1]) + len(t[l-2]) + len(t[l-3]) + len(t[l-4]) + len(t[l-5]) + len(t[l-6]) + len(t[l-7]) + len(t[l-8]) + len(t[l-9]) + len(t[l-10]) + len(t[l-11]) + len(t[l-12]) + len(t[l-13]) + len(t[l-14])\n    if l == r:\n        return len(s[l-1]) + len(t[l-1]) + len(t[l-2]) + len(t[l-3]) + len(t[l-4]) + len(t[l-5]) + len(t[l-6]) + len(t[l-7]) + len(t[l-8]) + len(t[l-9]) + len(t[l-10]) + len(t[l-11]) + len(t[l-12]) + len(t[l-13]) + len(t[l-14]) + len(t[l-15])\n    if l == r:\n        return len(s[l-1]) + len(t[l-1]) + len(t[l-2]) + len(t[l-3]) + len(t[l-4]) + len(t[l-5]) + len(t[l-6]) + len(t[l-7]) + len(t[l-8]) +",
        "test": "",
        "num_ids": 1522,
        "indeed": false
    },
    {
        "number": 4062,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a * b * c * d == 0:\n        return '0'\n    if a * b * c * d < 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d > 0:\n        return '0'\n    if a * b * c * d",
        "test": "",
        "num_ids": 1834,
        "indeed": false
    },
    {
        "number": 4063,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, d_1, d_2, d_3, d_4, d_5 = map(int, stdin.split())\n    if N % 2 == 0:\n        return str(N // 2)\n    else:\n        return str(N // 2 + 1)\n\ndef",
        "test": "",
        "num_ids": 69,
        "indeed": false
    },
    {
        "number": 4064,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l = map(int, stdin.split())\n    a_1 = h - 1\n    a_2 = l - 1\n    a_3 = a_1 + 1\n    a_4 = a_2 + 1\n    a_5 = a_3 + 1\n    a_6 = a_4 + 1\n    a_7 = a_5 + 1\n    a_8 = a_6 + 1\n    a_9 = a_7 + 1\n    a_10 = a_8 + 1\n    a_11 = a_9 + 1\n    a_12 = a_10 + 1\n    a_13 = a_11 + 1\n    a_14 = a_12 + 1\n    a_15 = a_13 + 1\n    a_16 = a_14 + 1\n    a_17 = a_15 + 1\n    a_18 = a_16 + 1\n    a_19 = a_17 + 1\n    a_20 = a_18 + 1\n    a_21 = a_19 + 1\n    a_22 = a_20 + 1\n    a_23 = a_21 + 1\n    a_24 = a_22 + 1\n    a_25 = a_23 + 1\n    a_26 = a_24 + 1\n    a_27 = a_25 + 1\n    a_28 = a_26 + 1\n    a_29 = a_27 + 1\n    a_30 = a_28 + 1\n    a_31 = a_29 + 1\n    a_32 = a_30 + 1\n    a_33 = a_31 + 1\n    a_34 = a_32 + 1\n    a_35 = a_33 + 1\n    a_36 = a_34 + 1\n    a_37 = a_35 + 1\n    a_38 = a_36 + 1\n    a_39 = a_37 + 1\n    a_40 = a_38 + 1\n    a_41 = a_39 + 1\n    a_42 = a_40 + 1\n    a_43 = a_41 + 1\n    a_44 = a_42 + 1\n    a_45 = a_43 + 1\n    a_46 = a_44 + 1\n    a_47 = a_45 + 1\n    a_48 = a_46 + 1\n    a_49 = a_47 + 1\n    a_50 = a_48 + 1\n    a_51 = a_49 + 1\n    a_52 = a_50 + 1\n    a_53 = a_51 + 1\n    a_54 = a_52 + 1\n    a_55 = a_53 + 1\n    a_56 = a_54 + 1\n    a_57 = a_55 + 1\n    a_58 = a_56 + 1\n    a_59 = a_57 + 1\n    a_60 = a_58 + 1\n    a_61 = a_59 + 1\n    a_62 = a_60 + 1\n    a_63 = a_61 + 1\n    a_64 = a_62 + 1\n    a_65 = a_63 + 1\n    a_66 = a_64 + 1\n    a_67 = a_65 + 1\n    a_68 = a_66 + 1\n    a_69 = a_67 + 1\n    a_70 = a_68 + 1\n    a_71 = a_69 + 1\n    a_72 = a_70 + 1\n    a_73 = a_71 + 1\n    a_74 = a_72 + 1\n    a_75 = a_73 + 1\n    a_76 = a_74 + 1\n    a_77 = a_75 + 1\n    a_78 = a_76 + 1\n    a_79 = a_77 + 1\n    a_80 = a_78 + 1\n    a_81 = a_79 + 1\n    a_82 = a_80 + 1\n    a_83 = a_81 + 1\n    a_84 = a_82 + 1\n    a_85 = a_83 + 1\n    a_86 = a_84 + 1\n    a_87 = a_85 + 1\n    a_88 = a_86 + 1\n    a_89 = a_87 + 1\n    a_90 = a_88 + 1\n    a_91 = a_89 + 1\n    a_92 = a_90 + 1\n    a_93 = a_91 + 1\n    a_94 = a_92 + 1\n    a_95 = a_93 + 1\n    a_96 = a_94 + 1\n    a_97 = a_95 + 1\n    a_98 = a_96 + 1\n    a_99 = a_97 + 1\n    a_100 = a_98 + 1\n    a_101 = a_99 + 1\n    a_102 = a_100 + 1\n    a_103 = a_101 + 1\n    a_104 = a_102 + 1\n    a_105 = a_103 + 1\n    a_106 = a_104 + 1\n    a_107 = a_105 + 1\n    a_108 = a_106 + 1\n    a_109 = a_107 + 1\n    a_110 = a_108 + 1\n    a_111 = a_109 + 1\n    a_112 = a_110 + 1\n    a_113 = a_111 + 1\n    a_114 = a_112 + 1\n    a_115 = a_113 + 1\n    a_116 = a_114 + 1\n    a_117 = a_115 + 1\n    a_118 = a_116 + 1\n    a_119 = a_117 + 1\n    a_120 = a_118 + 1\n    a_121 = a_119 + 1\n    a_122 = a_120 + 1\n    a_123 = a_121 + 1\n    a_124 = a_122 + 1\n    a_125 = a_123 + 1\n",
        "test": "",
        "num_ids": 1389,
        "indeed": false
    },
    {
        "number": 4065,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n",
        "test": "",
        "num_ids": 1354,
        "indeed": false
    },
    {
        "number": 4066,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    lcm = a[0]\n    for i in range(1, n):\n        lcm = lcm * a[i] // gcd(a[i], a[i-1])\n    return str(lcm)\n",
        "test": "",
        "num_ids": 90,
        "indeed": false
    },
    {
        "number": 4067,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    if n % 3 == 0:\n        return s[:n//3] + s[n//3:]\n    else:\n        return s[:n//3] + s[n//3:] + s[n//3:]\n",
        "test": "",
        "num_ids": 75,
        "indeed": false
    },
    {
        "number": 4068,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a_1 = list(map(int, stdin.split()))\n    a_2 = list(map(int, stdin.split()))\n    a_3 = list(map(int, stdin.split()))\n    a_4 = list(map(int, stdin.split()))\n    a_5 = list(map(int, stdin.split()))\n    a_6 = list(map(int, stdin.split()))\n    a_7 = list(map(int, stdin.split()))\n    a_8 = list(map(int, stdin.split()))\n    a_9 = list(map(int, stdin.split()))\n    a_10 = list(map(int, stdin.split()))\n    a_11 = list(map(int, stdin.split()))\n    a_12 = list(map(int, stdin.split()))\n    a_13 = list(map(int, stdin.split()))\n    a_14 = list(map(int, stdin.split()))\n    a_15 = list(map(int, stdin.split()))\n    a_16 = list(map(int, stdin.split()))\n    a_17 = list(map(int, stdin.split()))\n    a_18 = list(map(int, stdin.split()))\n    a_19 = list(map(int, stdin.split()))\n    a_20 = list(map(int, stdin.split()))\n    a_21 = list(map(int, stdin.split()))\n    a_22 = list(map(int, stdin.split()))\n    a_23 = list(map(int, stdin.split()))\n    a_24 = list(map(int, stdin.split()))\n    a_25 = list(map(int, stdin.split()))\n    a_26 = list(map(int, stdin.split()))\n    a_27 = list(map(int, stdin.split()))\n    a_28 = list(map(int, stdin.split()))\n    a_29 = list(map(int, stdin.split()))\n    a_30 = list(map(int, stdin.split()))\n    a_31 = list(map(int, stdin.split()))\n    a_32 = list(map(int, stdin.split()))\n    a_33 = list(map(int, stdin.split()))\n    a_34 = list(map(int, stdin.split()))\n    a_35 = list(map(int, stdin.split()))\n    a_36 = list(map(int, stdin.split()))\n    a_37 = list(map(int, stdin.split()))\n    a_38 = list(map(int, stdin.split()))\n    a_39 = list(map(int, stdin.split()))\n    a_40 = list(map(int, stdin.split()))\n    a_41 = list(map(int, stdin.split()))\n    a_42 = list(map(int, stdin.split()))\n    a_43 = list(map(int, stdin.split()))\n    a_44 = list(map(int, stdin.split()))\n    a_45 = list(map(int, stdin.split()))\n    a_46 = list(map(int, stdin.split()))\n    a_47 = list(map(int, stdin.split()))\n    a_48 = list(map(int, stdin.split()))\n    a_49 = list(map(int, stdin.split()))\n    a_50 = list(map(int, stdin.split()))\n    a_51 = list(map(int, stdin.split()))\n    a_52 = list(map(int, stdin.split()))\n    a_53 = list(map(int, stdin.split()))\n    a_54 = list(map(int, stdin.split()))\n    a_55 = list(map(int, stdin.split()))\n    a_56 = list(map(int, stdin.split()))\n    a_57 = list(map(int, stdin.split()))\n    a_58 = list(map(int, stdin.split()))\n    a_59 = list(map(int, stdin.split()))\n    a_60 = list(map(int, stdin.split()))\n    a_61 = list(map(int, stdin.split()))\n    a_62 = list(map(int, stdin.split()))\n    a_63 = list(map(int, stdin.split()))\n    a_64 = list(map(int, stdin.split()))\n    a_65 = list(map(int, stdin.split()))\n    a_66 = list(map(int, stdin.split()))\n    a_67 = list(map(int, stdin.split()))\n    a_68 = list(map(int, stdin.split()))\n    a_69 = list(map(int, stdin.split()))\n    a_70 = list(map(int, stdin.split()))\n    a_71 = list(map(int, stdin.split()))\n    a_72 = list(map(int, stdin.split()))\n    a_73 = list(map(int, stdin.split()))\n    a_74 = list(map(int, stdin.split()))\n    a_75 = list(map(int, stdin.split()))\n    a_76 = list(map(int, stdin.split()))\n    a_77 = list(map(int, stdin.split()))\n    a_78 = list(map(int, stdin.split()))\n    a_79 = list(map(int, stdin.split()))\n    a_80 = list(map(int, stdin.split()))\n    a_81 = list(map(int, stdin.split()))\n    a_82 = list(map(int, stdin.split()))\n    a_83 = list(map(int, stdin.split()))\n    a_84 = list(map(int, stdin.split()))\n    a_85 = list(map(int, stdin.split()))\n    a_86 = list(map(int, stdin.split()))\n    a_87 = list(map(int, stdin.split()))\n    a_88 = list(map(int, stdin.split()))\n    a_89 = list(map(int, stdin.split()))\n    a_90 = list(map(int, stdin.split()))\n    a_91 = list(map(int, stdin.split()))\n    a_92 = list(map(int, stdin.split()))\n    a",
        "test": "",
        "num_ids": 1674,
        "indeed": false
    },
    {
        "number": 4069,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    if X < 0 or X > 10**15:\n        return \"Error\"\n    if K < 0 or K > 10**15:\n        return \"Error\"\n    if D < 0 or D > 10**15:\n        return \"Error\"\n    return str(abs(X + D - 2))\n\ndef",
        "test": "",
        "num_ids": 90,
        "indeed": false
    },
    {
        "number": 4070,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n == 159:\n        return 159\n    if n == 160:\n        return 160\n    if n == 161:\n        return 161\n    if n == 162:\n        return 162\n    if n == 163:\n        return 163\n    if n == 164:\n        return 164\n    if n == 165:\n        return 165\n    if n == 166:\n        return 166\n    if n == 167:\n        return 167\n    if n == 168:\n        return 168\n    if n == 169:\n        return 169\n    if n == 170:\n        return 170\n    if n == 171:\n        return 171\n    if n == 172:\n        return 172\n    if n == 173:\n        return",
        "test": "",
        "num_ids": 1922,
        "indeed": false
    },
    {
        "number": 4071,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n == 108:\n        return '108'\n    if n == 109:\n        return '109'\n    if n == 110:\n        return '110'\n    if n == 111:\n        return '111'\n    if n == 112:\n        return '112'\n    if n == 113:\n        return '113'\n    if n == 114:\n        return '114'\n    if n == 115:\n        return '115'\n    if n == 116:\n        return '116'\n    if n == 117:\n        return '117'\n    if n == 118:\n        return '118'\n    if n == 119:\n        return '119'\n    if n == 120:\n        return '120'\n    if n == 121:\n        return '121'\n    if n == 122:\n        return '122'\n    if n == 123:\n        return '123'\n    if n == 124:\n        return '124'\n    if n == 125:\n        return '125'\n    if n == 126:\n        return '126'\n    if n == 127:\n        return '127'\n    if n == 128:\n        return '128'\n    if n == 129:\n        return '129'\n    if n == 130:\n        return '130'\n    if n == 131:\n        return '131'\n    if n == 132:\n        return '132'\n    if n == 133:\n        return '133'\n    if n == 134:\n        return '134'\n    if n == 135:\n        return '135'\n    if n == 136:\n        return '136'\n    if n == 137:\n        return '137'\n    if n == 138:\n        return '138'\n    if n == 139:\n        return '139'\n    if n == 140:\n        return '140'\n    if n == 141:\n        return '141'\n    if n == 142:\n        return '142'\n    if n == 143:\n        return '143'\n    if n == 144:\n        return '144'\n    if n == 145:\n        return '145'\n    if n == 146:\n        return '146'\n    if n == 147:\n        return '147'\n    if n == 148:\n        return '148'\n    if n == 149:\n        return '149'\n    if n == 150:\n        return '150'\n    if n == 151:\n        return '151'\n    if n == 152:\n        return '152'\n    if n",
        "test": "",
        "num_ids": 1991,
        "indeed": false
    },
    {
        "number": 4072,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '1'\n    if n == 3:\n        return '1'\n    if n == 4:\n        return '1'\n    if n == 5:\n        return '1'\n    if n == 6:\n        return '1'\n    if n == 7:\n        return '1'\n    if n == 8:\n        return '1'\n    if n == 9:\n        return '1'\n    if n == 10:\n        return '1'\n    if n == 11:\n        return '1'\n    if n == 12:\n        return '1'\n    if n == 13:\n        return '1'\n    if n == 14:\n        return '1'\n    if n == 15:\n        return '1'\n    if n == 16:\n        return '1'\n    if n == 17:\n        return '1'\n    if n == 18:\n        return '1'\n    if n == 19:\n        return '1'\n    if n == 20:\n        return '1'\n    if n == 21:\n        return '1'\n    if n == 22:\n        return '1'\n    if n == 23:\n        return '1'\n    if n == 24:\n        return '1'\n    if n == 25:\n        return '1'\n    if n == 26:\n        return '1'\n    if n == 27:\n        return '1'\n    if n == 28:\n        return '1'\n    if n == 29:\n        return '1'\n    if n == 30:\n        return '1'\n    if n == 31:\n        return '1'\n    if n == 32:\n        return '1'\n    if n == 33:\n        return '1'\n    if n == 34:\n        return '1'\n    if n == 35:\n        return '1'\n    if n == 36:\n        return '1'\n    if n == 37:\n        return '1'\n    if n == 38:\n        return '1'\n    if n == 39:\n        return '1'\n    if n == 40:\n        return '1'\n    if n == 41:\n        return '1'\n    if n == 42:\n        return '1'\n    if n == 43:\n        return '1'\n    if n == 44:\n        return '1'\n    if n == 45:\n        return '1'\n    if n == 46:\n        return '1'\n    if n == 47:\n        return '1'\n    if n == 48:\n        return '1'\n    if n == 49:\n        return '1'\n    if n == 50:\n        return '1'\n    if n == 51:\n        return '1'\n    if n == 52:\n        return '1'\n    if n == 53:\n        return '1'\n    if n == 54:\n        return '1'\n    if n == 55:\n        return '1'\n    if n == 56:\n        return '1'\n    if n == 57:\n        return '1'\n    if n == 58:\n        return '1'\n    if n == 59:\n        return '1'\n    if n == 60:\n        return '1'\n    if n == 61:\n        return '1'\n    if n == 62:\n        return '1'\n    if n == 63:\n        return '1'\n    if n == 64:\n        return '1'\n    if n == 65:\n        return '1'\n    if n == 66:\n        return '1'\n    if n == 67:\n        return '1'\n    if n == 68:\n        return '1'\n    if n == 69:\n        return '1'\n    if n == 70:\n        return '1'\n    if n == 71:\n        return '1'\n    if n == 72:\n        return '1'\n    if n == 73:\n        return '1'\n    if n == 74:\n        return '1'\n    if n == 75:\n        return '1'\n    if n == 76:\n        return '1'\n    if n == 77:\n        return '1'\n    if n == 78:\n        return '1'\n    if n == 79:\n        return '1'\n    if n == 80:\n        return '1'\n    if n == 81:\n        return '1'\n    if n == 82:\n        return '1'\n    if n == 83:\n        return '1'\n    if n == 84:\n        return '1'\n    if n == 85:\n        return '1'\n    if n == 86:\n        return '1'\n    if n == 87:\n        return '1'\n    if n == 88:\n        return '1'\n    if n == 89:\n        return '1'\n    if n == 90:\n        return '1'\n    if n == 91:\n        return '1'\n    if n == 92:\n        return '1'\n    if n == 93:\n        return '1'\n    if n == 94:\n        return '1'\n    if n == 95:\n        return '1'\n    if n == 96:\n        return '1'\n    if n == 97:\n        return '1'\n    if n == 98:\n        return '1'\n    if n == 99:\n        return '1'\n    if n == 100:\n        return '1'\n    if n == 101:\n        return '1'\n    if n == 102:\n        return '1'\n    if n == 103:\n        return '1'\n    if n == 104:\n        return '1'\n    if n == 105:\n        return '1'\n    if n == 106:\n        return '1'\n    if n == 107:\n        return '1'\n    if n == 108:\n        return '1'\n    if n == 109:\n        return '1'\n    if n == 110:\n        return '1'\n    if n == 111:\n        return '1'\n    if n == 112:\n        return '1'\n    if n == 113:\n        return '1'\n    if n == 114:\n        return '1'\n    if n == 115:\n        return '1'\n    if n == 116:\n        return '1'\n    if n == 117:\n        return '1'\n    if n == 118:\n        return '1'\n    if n == 119:\n        return '1'\n    if n == 120:\n        return '1'\n    if n == 121:\n        return '1'\n    if n == 122:\n        return '1'\n    if n == 123:\n        return '1'\n    if n == 124:\n        return '1'\n    if n == 125:\n        return '1'\n    if n == 126:\n        return '1'\n    if n == 127:\n        return '1'\n    if n == 128:\n        return '1'\n    if n == 129:\n        return '1'\n    if n == 130:\n        return '1'\n    if n == 131:\n        return '1'\n    if n == 132:\n        return '1'\n    if n == 133:\n        return '1'\n    if n == 134:\n        return '1'\n    if n == 135:\n        return '1'\n    if n == 136:\n        return '1'\n    if n == 137:\n        return '1'\n    if n == 138:\n        return '1'\n    if n == 139:\n        return '1'\n    if n == 140:\n        return '1'\n    if n == 141:\n        return '1'\n    if n == 142:\n        return '1'\n    if n == 143:\n        return '1'\n    if n == 144:\n        return '1'\n    if n == 145:\n        return '1'\n    if n == 146:\n        return '1'\n    if n == 147:\n        return '1'\n    if n == 148:\n        return '1'\n    if n == 149:\n        return '1'\n    if n == 150:\n        return '",
        "test": "",
        "num_ids": 1970,
        "indeed": false
    },
    {
        "number": 4073,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    answer = 0\n    for i in range(n):\n        answer += a[i] * (a[i] - 1)\n    return str(answer)\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n1 <= a_i <= 10^9\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 106,
        "indeed": false
    },
    {
        "number": 4074,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(n, k))\n\ndef",
        "test": "",
        "num_ids": 29,
        "indeed": false
    },
    {
        "number": 4075,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    k_i = list(map(int, stdin.split()))\n    p_i = list(map(int, stdin.split()))\n    p_i.sort()\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] % 2 for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n    p_i = [p_i[i] for i in range(len(p_i))]\n",
        "test": "",
        "num_ids": 1587,
        "indeed": false
    },
    {
        "number": 4076,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    if A > B:\n        A, B = B, A\n    if H > M:\n        H, M = M, H\n    if A + B > H + M:\n        return '{:.2f}'.format(abs(A - B))\n    else:\n        return '{:.2f}'.format(abs(H - M))\n\ndef",
        "test": "",
        "num_ids": 107,
        "indeed": false
    },
    {
        "number": 4077,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    print(len(set(a)))\n    print(len(set(a[::-1])))\n    print(len(set(a[::-1][:m])))\n    print(len(set(a[::-1][:m][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][:m][::-1][::-1][::-1][::-1])))\n    print(len(set(a[::-1][",
        "test": "",
        "num_ids": 1498,
        "indeed": false
    },
    {
        "number": 4078,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(n):\n        b.append(a[i] - a[i])\n    q = int(m / (n - m))\n    c = []\n    for i in range(q):\n        c.append(b[i] - b[i + q])\n    print(max(c))\n    print(min(c))\n    return str(max(c)) + \" \" + str(min(c))\n\nprint(solution(input()))\n",
        "test": "",
        "num_ids": 150,
        "indeed": false
    },
    {
        "number": 4079,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    strings = []\n    for _ in range(n):\n        strings.append(stdin.strip())\n    for i in range(n):\n        for j in range(n):\n            if strings[i][j]!= strings[j][i]:\n                return \"No\"\n    return \"Yes\"\n",
        "test": "",
        "num_ids": 84,
        "indeed": false
    },
    {
        "number": 4080,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(n):\n        b.append(a[i] - a[i])\n    q = int(m / (n - m))\n    c = []\n    for i in range(q):\n        c.append(b[i] - b[i + q])\n    print(max(c))\n    print(min(c))\n    return str(max(c)) + \" \" + str(min(c))\n\nprint(solution(input()))\n",
        "test": "",
        "num_ids": 150,
        "indeed": false
    },
    {
        "number": 4081,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    k = len(a)\n    s = ''\n    for i in range(k):\n        s += str(a[i])\n    return s\n\ndef",
        "test": "",
        "num_ids": 74,
        "indeed": false
    },
    {
        "number": 4082,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    l = 0\n    r = len(a) - 1\n    while l < r:\n        if a[l] < a[r]:\n            l += 1\n        else:\n            r -= 1\n    return str(l)\n\nprint(solution(\"1 2 5 3 4\"))\nprint(solution(\"6 5 4 3 2 4 3\"))\nprint(solution(\"7 6 5 4 3 2 4 3\"))\n",
        "test": "",
        "num_ids": 131,
        "indeed": false
    },
    {
        "number": 4083,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in",
        "test": "",
        "num_ids": 1665,
        "indeed": false
    },
    {
        "number": 4084,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    if N == 0:\n        return '0'\n    if N == 1:\n        return str(A)\n    if N == 2:\n        return str(B)\n    if N == 3:\n        return str(A + B)\n    if N == 4:\n        return str(A + B + B + B)\n    if N == 5:\n        return str(A + B + B + B + B + B)\n    if N == 6:\n        return str(A + B + B + B + B + B + B + B)\n    if N == 7:\n        return str(A + B + B + B + B + B + B + B + B + B)\n    if N == 8:\n        return str(A + B + B + B + B + B + B + B + B + B + B + B)\n    if N == 9:\n        return str(A + B + B + B + B + B + B + B + B + B + B + B + B + B)\n    if N == 10:\n        return str(A + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B)\n    if N == 11:\n        return str(A + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B)\n    if N == 12:\n        return str(A + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B)\n    if N == 13:\n        return str(A + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B)\n    if N == 14:\n        return str(A + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B + B)\n    if N == 15:\n        return str
        "test": "",
        "num_ids": 1773,
        "indeed": false
    },
    {
        "number": 4085,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    divisors = [int(i) for i in stdin.split()]\n    divisors.sort()\n    for i in range(n):\n        if divisors[i]!= divisors[i+1]:\n            return str(divisors[i])\n    return str(-1)\n\n-----Constraints-----\n1 <= t <= 10^5\n1 <= n <= 10^6\n1 <= d_i <= 10^6\n\n-----Time complexity-----\nO(n log n)\n\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(n)\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 160,
        "indeed": false
    },
    {
        "number": 4086,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a =''.join(map(str, a))\n    return a\n\ndef",
        "test": "",
        "num_ids": 70,
        "indeed": false
    },
    {
        "number": 4087,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 3 == 0:\n        return str(a)\n    else:\n        return str(a + 3)\n",
        "test": "",
        "num_ids": 39,
        "indeed": false
    },
    {
        "number": 4088,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(stdin.strip())\n    b = [0] * n\n    for i in range(n):\n        if s[i] == 'a':\n            b[i] = 1\n        elif s[i] == 'b':\n            b[i] = 2\n        elif s[i] == 'c':\n            b[i] = 3\n    for i in range(n):\n        if b[i] == 1:\n            s[i] = 'a'\n        elif b[i] == 2:\n            s[i] = 'b'\n        elif b[i] == 3:\n            s[i] = 'c'\n    return ''.join(s)\n\ndef",
        "test": "",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 4089,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    answer = ''\n    for i in range(1, N+1):\n        answer += str(i)\n    return answer\n\ndef",
        "test": "",
        "num_ids": 42,
        "indeed": false
    },
    {
        "number": 4090,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    words = [stdin[i:i+n] for i in range(0, n, n)]\n    words.sort()\n    answer = len(words[0])\n    for i in range(1, len(words)):\n        if len(words[i]) < len(words[i-1]):\n            answer = min(answer, len(words[i]))\n    return answer\n\ndef",
        "test": "",
        "num_ids": 107,
        "indeed": false
    },
    {
        "number": 4091,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n == 1:\n        return str(a[0])\n    if n == 2:\n        return str(a[0] + a[1])\n    if n == 3:\n        return str(a[0] + a[1] + a[2])\n    if n == 4:\n        return str(a[0] + a[1] + a[2] + a[3])\n    if n == 5:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4])\n    if n == 6:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5])\n    if n == 7:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6])\n    if n == 8:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7])\n    if n == 9:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8])\n    if n == 10:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9])\n    if n == 11:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10])\n    if n == 12:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11])\n    if n == 13:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12])\n    if n == 14:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13])\n    if n == 15:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14])\n    if n == 16:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15])\n    if n == 17:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16])\n    if n == 18:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17])\n    if n == 19:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17] + a[18])\n    if n == 20:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4]",
        "test": "",
        "num_ids": 1232,
        "indeed": false
    },
    {
        "number": 4092,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a =",
        "test": "",
        "num_ids": 1462,
        "indeed": false
    },
    {
        "number": 4093,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(sum(a))\n\ndef",
        "test": "",
        "num_ids": 49,
        "indeed": false
    },
    {
        "number": 4094,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    if K == 1:\n        return '1'\n    if K % 10 == 7:\n        return '7'\n    if K % 10 == 77:\n        return '77'\n    if K % 10 == 777:\n        return '777'\n    return '-1'\n\ndef",
        "test": "",
        "num_ids": 77,
        "indeed": false
    },
    {
        "number": 4095,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    print(len(set(p)))\n    return str(len(set(p)))\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= p[i] <= 10^5\n\n-----Time complexity-----\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(",
        "test": "",
        "num_ids": 1469,
        "indeed": false
    },
    {
        "number": 4096,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-",
        "test": "",
        "num_ids": 1020,
        "indeed": false
    },
    {
        "number": 4097,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    b.sort()\n    if b[0] == 0:\n        return -1\n    if b[-1] == 0:\n        return -1\n    if b[0] + b[-1] == 0:\n        return -1\n    if b[0] + b[1] == 0:\n        return -1\n    if b[0] + b[2] == 0:\n        return -1\n    if b[0] + b[3] == 0:\n        return -1\n    if b[0] + b[4] == 0:\n        return -1\n    if b[0] + b[5] == 0:\n        return -1\n    if b[0] + b[6] == 0:\n        return -1\n    if b[0] + b[7] == 0:\n        return -1\n    if b[0] + b[8] == 0:\n        return -1\n    if b[0] + b[9] == 0:\n        return -1\n    if b[0] + b[10] == 0:\n        return -1\n    if b[0] + b[11] == 0:\n        return -1\n    if b[0] + b[12] == 0:\n        return -1\n    if b[0] + b[13] == 0:\n        return -1\n    if b[0] + b[14] == 0:\n        return -1\n    if b[0] + b[15] == 0:\n        return -1\n    if b[0] + b[16] == 0:\n        return -1\n    if b[0] + b[17] == 0:\n        return -1\n    if b[0] + b[18] == 0:\n        return -1\n    if b[0] + b[19] == 0:\n        return -1\n    if b[0] + b[20] == 0:\n        return -1\n    if b[0] + b[21] == 0:\n        return -1\n    if b[0] + b[22] == 0:\n        return -1\n    if b[0] + b[23] == 0:\n        return -1\n    if b[0] + b[24] == 0:\n        return -1\n    if b[0] + b[25] == 0:\n        return -1\n    if b[0] + b[26] == 0:\n        return -1\n    if b[0] + b[27] == 0:\n        return -1\n    if b[0] + b[28] == 0:\n        return -1\n    if b[0] + b[29] == 0:\n        return -1\n    if b[0] + b[30] == 0:\n        return -1\n    if b[0] + b[31] == 0:\n        return -1\n    if b[0] + b[32] == 0:\n        return -1\n    if b[0] + b[33] == 0:\n        return -1\n    if b[0] + b[34] == 0:\n        return -1\n    if b[0] + b[35] == 0:\n        return -1\n    if b[0] + b[36] == 0:\n        return -1\n    if b[0] + b[37] == 0:\n        return -1\n    if b[0] + b[38] == 0:\n        return -1\n    if b[0] + b[39] == 0:\n        return -1\n    if b[0] + b[40] == 0:\n        return -1\n    if b[0] + b[41] == 0:\n        return -1\n    if b[0] + b[42] == 0:\n        return -1\n    if b[0] + b[43] == 0:\n        return -1\n    if b[0] + b[44] == 0:\n        return -1\n    if b[0] + b[45] == 0:\n        return -1\n    if b[0] + b[46] == 0:\n        return -1\n    if b[0] + b[47] == 0:\n        return -1\n    if b[0] + b[48] == 0:\n        return -1\n    if b[0] + b[49] == 0:\n        return -1\n    if b[0] + b[50] == 0:\n        return -1\n    if b[0] + b[51] == 0:\n        return -1\n    if b[0] + b[52] == 0:\n        return -1\n    if b[0] + b[53] == 0:\n        return -1\n    if b[0] + b[54] == 0:\n        return -1\n    if b[0] + b[55] == 0:\n        return -1\n    if b[0] + b[56] == 0:\n        return -1\n    if b[0] + b[57] == 0:\n        return -1\n    if b[0] + b[58] == 0:\n        return -1\n    if b[0] + b[59] == 0:\n        return -1\n    if b[0] + b[60] == 0:\n        return -1\n    if b[0] + b[61] == 0:\n        return -1\n    if b[0] + b[62] == 0:\n        return -1\n    if b[0] + b[63] == 0:\n        return -1\n    ",
        "test": "",
        "num_ids": 1345,
        "indeed": false
    },
    {
        "number": 4098,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(",
        "test": "",
        "num_ids": 1591,
        "indeed": false
    },
    {
        "number": 4099,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A.append(M)\n    A.sort()\n    A = A[::-1]\n    A = [0] + A\n    A.append(K)\n    A",
        "test": "",
        "num_ids": 1750,
        "indeed": false
    },
    {
        "number": 4100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    A.append(0)\n    A.sort()\n    A.append(N)\n    A.sort()\n    A.append(K)\n    A.sort()\n    A.append(Q)\n    A.sort()\n    A.append(N-1)\n    A.sort()\n    A.append(K-1)\n    A.sort()\n    A.append(Q-1)\n    A.sort()\n    A.append(N-Q)\n    A.sort()\n    A.append(K-Q)\n    A.sort()\n    A.append(Q-K)\n    A.sort()\n    A.append(N-Q-K)\n    A.sort()\n    A.append(K-Q-N)\n    A.sort()\n    A.append(Q-K-N)\n    A.sort()\n    A.append(N-Q-K-N)\n    A.sort()\n    A.append(K-Q-N-K)\n    A.sort()\n    A.append(Q-K-N-K)\n    A.sort()\n    A.append(N-Q-K-N-K)\n    A.sort()\n    A.append(K-Q-N-K-N)\n    A.sort()\n    A.append(Q-K-N-K-N)\n    A.sort()\n    A.append(N-Q-K-N-K-N)\n    A.sort()\n    A.append(K-Q-N-K-N-K)\n    A.sort()\n    A.append(Q-K-N-K-N-K)\n    A.sort()\n    A.append(N-Q-K-N-K-N-K)\n    A.sort()\n    A.append(K-Q-N-K-N-K-N)\n    A.sort()\n    A.append(Q-K-N-K-N-K-N-K)\n    A.sort()\n    A.append(N-Q-K-N-K-N-K-N)\n    A.sort()\n    A.append(K-Q-N-K-N-K-N-K-N)\n    A.sort()\n    A.append(Q-K-N-K-N-K-N-K-N-K)\n    A.sort()\n    A.append(N-Q-K-N-K-N-K-N-K-N)\n    A.sort()\n    A.append(K-Q-N-K-N-K-N-K-N-K-N)\n    A.sort()\n    A.append(Q-K-N-K-N-K-N-K-N-K-N-K)\n    A.sort()\n    A.append(N-Q-K-N-K-N-K-N-K-N-K-N)\n    A.sort()\n    A.append(K-Q-N-K-N-K-N-K-N-K-N-K-N)\n    A.sort()\n    A.append(Q-K-N-K-N-K-N-K-N-K-N-K-N-K)\n    A.sort()\n    A.append(N-Q-K-N-K-N-K-N-K-N-K-N-K-N)\n    A.sort()\n    A.append(K-Q-N-K-N-K-N-K-N-K-N-K-N-K-N)\n    A.sort()\n    A.append(Q-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K)\n    A.sort()\n    A.append(N-Q-K-N-K-N-K-N-K-N-K-N-K-N-K-N)\n    A.sort()\n    A.append(K-Q-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N)\n    A.sort()\n    A.append(Q-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K)\n    A.sort()\n    A.append(N-Q-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K)\n    A.sort()\n    A.append(K-Q-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N)\n    A.sort()\n    A.append(Q-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K)\n    A.sort()\n    A.append(N-Q-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N)\n    A.sort()\n    A.append(K-Q-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N)\n    A.sort()\n    A.append(Q-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N-K-N)\n    A.sort()\n    A.append(N-Q-K-N-K-N-K-N-K-N-K-",
        "test": "",
        "num_ids": 1493,
        "indeed": false
    },
    {
        "number": 4101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                a[i][j] = 0\n            else:\n                a[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            else:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                a[i][j] = '1'\n            else:\n                a[i][j] = '0'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '0':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '1':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '0':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '1':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '0':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '1':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '0':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '1':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '0':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '1':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '0':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '1':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '0':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '1':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '0':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '1':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '0':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '1':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '0':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '1':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '0':\n                a[i][j] = '0'\n            else:\n                a[i][j] = '1'\n    for i in range(n):\n        for j in range(m):\n            if a[i][",
        "test": "",
        "num_ids": 1468,
        "indeed": false
    },
    {
        "number": 4102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 1 or n > 10:\n        return \"No\"\n    \n    if n % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "",
        "num_ids": 56,
        "indeed": false
    },
    {
        "number": 4103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s_1, s_2, s_3 = map(int, stdin.split())\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3 - 1\n    s_1, s_2, s_3 = s_1 + 1, s_2 + 1, s_3 + 1\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3 - 1\n    s_1, s_2, s_3 = s_1 + 1, s_2 + 1, s_3 + 1\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3 - 1\n    s_1, s_2, s_3 = s_1 + 1, s_2 + 1, s_3 + 1\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3 - 1\n    s_1, s_2, s_3 = s_1 + 1, s_2 + 1, s_3 + 1\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3 - 1\n    s_1, s_2, s_3 = s_1 + 1, s_2 + 1, s_3 + 1\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3 - 1\n    s_1, s_2, s_3 = s_1 + 1, s_2 + 1, s_3 + 1\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3 - 1\n    s_1, s_2, s_3 = s_1 + 1, s_2 + 1, s_3 + 1\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3 - 1\n    s_1, s_2, s_3 = s_1 + 1, s_2 + 1, s_3 + 1\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3 - 1\n    s_1, s_2, s_3 = s_1 + 1, s_2 + 1, s_3 + 1\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3 - 1\n    s_1, s_2, s_3 = s_1 + 1, s_2 + 1, s_3 + 1\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3 - 1\n    s_1, s_2, s_3 = s_1 + 1, s_2 + 1, s_3 + 1\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3 - 1\n    s_1, s_2, s_3 = s_1 + 1, s_2 + 1, s_3 + 1\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3 - 1\n    s_1, s_2, s_3 = s_1 + 1, s_2 + 1, s_3 + 1\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3 - 1\n    s_1, s_2, s_3 = s_1 + 1, s_2 + 1, s_3 + 1\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3 - 1\n    s_1, s_2, s_3 = s_1 + 1, s_2 + 1, s_3 + 1\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3 - 1\n    s_1, s_2, s_3 = s_1 + 1, s_2 + 1, s_3 + 1\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3 - 1\n    s_1, s_2, s_3 = s_1 + 1, s_2 + 1, s_3 + 1\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3 - 1\n    s_1, s_2, s_3 = s_1 + 1, s_2 + 1, s_3 + 1\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3 - 1\n    s_1, s_2, s_3 = s_1 + 1, s_2 + 1, s_3 + 1\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3 - 1\n    s_1, s_2, s_3 = s_1 + 1, s_2 + 1, s_3 + 1\n    s_1, s_2, s_3 = s_1 - 1, s_2 - 1, s_3",
        "test": "",
        "num_ids": 1309,
        "indeed": false
    },
    {
        "number": 4104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    expr = stdin.split()\n    operands = []\n    for i in range(len(expr)):\n        if expr[i] == '+':\n            operands.append(int(expr[i+1]))\n        elif expr[i] == '-':\n            operands.append(-int(expr[i+1]))\n        elif expr[i] == '*':\n            operands.append(int(expr[i+1]))\n        elif expr[i] == '/':\n            operands.append(int(expr[i+1]))\n    return str(sum(operands))\n",
        "test": "",
        "num_ids": 148,
        "indeed": false
    },
    {
        "number": 4105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"NO\"\n    \n    pairs = []\n    for i in range(n):\n        pairs.append(tuple(map(int, stdin.split())))\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if pairs[i][0] == pairs[j][0] and pairs[i][1] == pairs[j][1]:\n                return \"YES\"\n    return \"NO\"\n",
        "test": "",
        "num_ids": 132,
        "indeed": false
    },
    {
        "number": 4106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i",
        "test": "",
        "num_ids": 1543,
        "indeed": false
    },
    {
        "number": 4107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    if n == 1 and k == 1:\n        return '0'\n    if n == 1 and k == 2:\n        return '1'\n    if n == 1 and k == 3:\n        return '0'\n    if n == 1 and k == 4:\n        return '0'\n    if n == 1 and k == 5:\n        return '0'\n    if n == 1 and k == 6:\n        return '0'\n    if n == 1 and k == 7:\n        return '0'\n    if n == 1 and k == 8:\n        return '0'\n    if n == 1 and k == 9:\n        return '0'\n    if n == 1 and k == 10:\n        return '0'\n    if n == 2 and k == 1:\n        return '0'\n    if n == 2 and k == 2:\n        return '0'\n    if n == 2 and k == 3:\n        return '0'\n    if n == 2 and k == 4:\n        return '0'\n    if n == 2 and k == 5:\n        return '0'\n    if n == 2 and k == 6:\n        return '0'\n    if n == 2 and k == 7:\n        return '0'\n    if n == 2 and k == 8:\n        return '0'\n    if n == 2 and k == 9:\n        return '0'\n    if n == 2 and k == 10:\n        return '0'\n    if n == 3 and k == 1:\n        return '0'\n    if n == 3 and k == 2:\n        return '0'\n    if n == 3 and k == 3:\n        return '0'\n    if n == 3 and k == 4:\n        return '0'\n    if n == 3 and k == 5:\n        return '0'\n    if n == 3 and k == 6:\n        return '0'\n    if n == 3 and k == 7:\n        return '0'\n    if n == 3 and k == 8:\n        return '0'\n    if n == 3 and k == 9:\n        return '0'\n    if n == 3 and k == 10:\n        return '0'\n    if n == 4 and k == 1:\n        return '0'\n    if n == 4 and k == 2:\n        return '0'\n    if n == 4 and k == 3:\n        return '0'\n    if n == 4 and k == 4:\n        return '0'\n    if n == 4 and k == 5:\n        return '0'\n    if n == 4 and k == 6:\n        return '0'\n    if n == 4 and k == 7:\n        return '0'\n    if n == 4 and k == 8:\n        return '0'\n    if n == 4 and k == 9:\n        return '0'\n    if n == 4 and k == 10:\n        return '0'\n    if n == 5 and k == 1:\n        return '0'\n    if n == 5 and k == 2:\n        return '0'\n    if n == 5 and k == 3:\n        return '0'\n    if n == 5 and k == 4:\n        return '0'\n    if n == 5 and k == 5:\n        return '0'\n    if n == 5 and k == 6:\n        return '0'\n    if n == 5 and k == 7:\n        return '0'\n    if n == 5 and k == 8:\n        return '0'\n    if n == 5 and k == 9:\n        return '0'\n    if n == 5 and k == 10:\n        return '0'\n    if n == 6 and k == 1:\n        return '0'\n    if n == 6 and k == 2:\n        return '0'\n    if n == 6 and k == 3:\n        return '0'\n    if n == 6 and k == 4:\n        return '0'\n    if n == 6 and k == 5:\n        return '0'\n    if n == 6 and k == 6:\n        return '0'\n    if n == 6 and k == 7:\n        return '0'\n    if n == 6 and k == 8:\n        return '0'\n    if n == 6 and k == 9:\n        return '0'\n    if n == 6 and k == 10:\n        return '0'\n    if n == 7 and k == 1:\n        return '0'\n    if n == 7 and k == 2:\n        return '0'\n    if n == 7 and k == 3:\n        return '0'\n    if n == 7 and k == 4:\n        return '0'\n    if n == 7 and k == 5:\n        return '0'\n    if n == 7 and k == 6:\n        return '0'\n    if n == 7 and k == 7:\n        return '0'\n    if n == 7 and k == 8:\n        return '0'\n    if n == 7 and k == 9:\n        return '0'\n    if n == 7 and k == 10:\n        return '0'\n    if n == 8 and k == 1:\n        return '0'\n    if n == 8 and k == 2:\n        return '0'\n    if n == 8 and k == 3:\n        return '0'\n    if n == 8 and k == 4:\n        return '0'\n    if n == 8 and k == 5:\n        return '0'\n    if n == 8 and k == 6:\n        return '0'\n    if n == 8 and k == 7:\n        return '0'\n    if n == 8 and k == 8:\n        return '0'\n    if n == 8 and k == 9:\n        return '0'\n    if n == 8 and k == 10:",
        "test": "",
        "num_ids": 1378,
        "indeed": false
    },
    {
        "number": 4108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(s: str, t: str) -> str:\n        if len(s)!= len(t):\n            return False\n        if len(s) == len(t):\n            return True\n        if s[0] == t[0]:\n            return solve(s[1:], t[1:])\n        else:\n            return solve(s, t[1:]) or solve(s[1:], t)\n    return solve(stdin, stdin)\n",
        "test": "",
        "num_ids": 113,
        "indeed": false
    },
    {
        "number": 4109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    books = [list(map(int, input().split())) for _ in range(N)]\n    answer = 0\n    for i in range(N):\n        for j in range(M):\n            if books[i][j] == 1:\n                books[i][j] += 1\n                answer = max(answer, books[i][j])\n    return str(answer)\n",
        "test": "",
        "num_ids": 105,
        "indeed": false
    },
    {
        "number": 4110,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    p_1, c_1 = map(int, stdin.split())\n    p_2, c_2 = map(int, stdin.split())\n    p_3, c_3 = map(int, stdin.split())\n    p_4, c_4 = map(int, stdin.split())\n    p_5, c_5 = map(int, stdin.split())\n    p_6, c_6 = map(int, stdin.split())\n    p_7, c_7 = map(int, stdin.split())\n    p_8, c_8 = map(int, stdin.split())\n    p_9, c_9 = map(int, stdin.split())\n    p_10, c_10 = map(int, stdin.split())\n    p_11, c_11 = map(int, stdin.split())\n    p_12, c_12 = map(int, stdin.split())\n    p_13, c_13 = map(int, stdin.split())\n    p_14, c_14 = map(int, stdin.split())\n    p_15, c_15 = map(int, stdin.split())\n    p_16, c_16 = map(int, stdin.split())\n    p_17, c_17 = map(int, stdin.split())\n    p_18, c_18 = map(int, stdin.split())\n    p_19, c_19 = map(int, stdin.split())\n    p_20, c_20 = map(int, stdin.split())\n    p_21, c_21 = map(int, stdin.split())\n    p_22, c_22 = map(int, stdin.split())\n    p_23, c_23 = map(int, stdin.split())\n    p_24, c_24 = map(int, stdin.split())\n    p_25, c_25 = map(int, stdin.split())\n    p_26, c_26 = map(int, stdin.split())\n    p_27, c_27 = map(int, stdin.split())\n    p_28, c_28 = map(int, stdin.split())\n    p_29, c_29 = map(int, stdin.split())\n    p_30, c_30 = map(int, stdin.split())\n    p_31, c_31 = map(int, stdin.split())\n    p_32, c_32 = map(int, stdin.split())\n    p_33, c_33 = map(int, stdin.split())\n    p_34, c_34 = map(int, stdin.split())\n    p_35, c_35 = map(int, stdin.split())\n    p_36, c_36 = map(int, stdin.split())\n    p_37, c_37 = map(int, stdin.split())\n    p_38, c_38 = map(int, stdin.split())\n    p_39, c_39 = map(int, stdin.split())\n    p_40, c_40 = map(int, stdin.split())\n    p_41, c_41 = map(int, stdin.split())\n    p_42, c_42 = map(int, stdin.split())\n    p_43, c_43 = map(int, stdin.split())\n    p_44, c_44 = map(int, stdin.split())\n    p_45, c_45 = map(int, stdin.split())\n    p_46, c_46 = map(int, stdin.split())\n    p_47, c_47 = map(int, stdin.split())\n    p_48, c_48 = map(int, stdin.split())\n    p_49, c_49 = map(int, stdin.split())\n    p_50, c_50 = map(int, stdin.split())\n    p_51, c_51 = map(int, stdin.split())\n    p_52, c_52 = map(int, stdin.split())\n    p_53, c_53 = map(int, stdin.split())\n    p_54, c_54 = map(int, stdin.split())\n    p_55, c_55 = map(int, stdin.split())\n    p_56, c_56 = map(int, stdin.split())\n    p_57, c_57 = map(int, stdin.split())\n    p_58, c_58 = map(int, stdin.split())\n    p_59, c_59 = map(int, stdin.split())\n    p_60, c_60 = map(int, stdin.split())\n    p_61, c_61 = map(int, stdin.split())\n    p_62, c_62 = map(int, stdin.split())\n    p_63, c_63 = map(int, stdin.split())\n    p_64, c_64 = map(int, stdin.split())\n    p_65, c_65 = map(int, stdin.split())\n    p_66, c_66 = map(int, stdin.split())\n    p_67, c_67 = map(int, stdin.split())\n    p_68, c_68 = map(int, stdin.split())\n    p_69, c_69 = map(int, stdin.split())\n    p_70, c_70 = map(int, stdin.split())\n    p_71, c_71 = map(int, stdin.split())\n    p_72, c_72 = map(int, stdin.split())\n    p_73, c_73 = map(int, stdin.split())\n    p_74, c_74 = map(int, stdin.split())\n    p_75, c_75 = map(int, stdin.split())\n    p_76, c_76 = map(int, stdin.split())\n    p_77, c_77 = map(int, stdin.split())\n    p_78, c_78 = map(int, stdin.split())\n",
        "test": "",
        "num_ids": 1498,
        "indeed": false
    },
    {
        "number": 4111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i",
        "test": "",
        "num_ids": 1033,
        "indeed": false
    },
    {
        "number": 4112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i",
        "test": "",
        "num_ids": 1543,
        "indeed": false
    },
    {
        "number": 4113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"No\"\n    if N == 1:\n        return \"Yes\"\n    if N == 2:\n        return \"Yes\"\n    if N == 3:\n        return \"Yes\"\n    if N == 4:\n        return \"Yes\"\n    if N == 5:\n        return \"Yes\"\n    if N == 6:\n        return \"Yes\"\n    if N == 7:\n        return \"Yes\"\n    if N == 8:\n        return \"Yes\"\n    if N == 9:\n        return \"Yes\"\n    if N == 10:\n        return \"Yes\"\n    if N == 11:\n        return \"Yes\"\n    if N == 12:\n        return \"Yes\"\n    if N == 13:\n        return \"Yes\"\n    if N == 14:\n        return \"Yes\"\n    if N == 15:\n        return \"Yes\"\n    if N == 16:\n        return \"Yes\"\n    if N == 17:\n        return \"Yes\"\n    if N == 18:\n        return \"Yes\"\n    if N == 19:\n        return \"Yes\"\n    if N == 20:\n        return \"Yes\"\n    if N == 21:\n        return \"Yes\"\n    if N == 22:\n        return \"Yes\"\n    if N == 23:\n        return \"Yes\"\n    if N == 24:\n        return \"Yes\"\n    if N == 25:\n        return \"Yes\"\n    if N == 26:\n        return \"Yes\"\n    if N == 27:\n        return \"Yes\"\n    if N == 28:\n        return \"Yes\"\n    if N == 29:\n        return \"Yes\"\n    if N == 30:\n        return \"Yes\"\n    if N == 31:\n        return \"Yes\"\n    if N == 32:\n        return \"Yes\"\n    if N == 33:\n        return \"Yes\"\n    if N == 34:\n        return \"Yes\"\n    if N == 35:\n        return \"Yes\"\n    if N == 36:\n        return \"Yes\"\n    if N == 37:\n        return \"Yes\"\n    if N == 38:\n        return \"Yes\"\n    if N == 39:\n        return \"Yes\"\n    if N == 40:\n        return \"Yes\"\n    if N == 41:\n        return \"Yes\"\n    if N == 42:\n        return \"Yes\"\n    if N == 43:\n        return \"Yes\"\n    if N == 44:\n        return \"Yes\"\n    if N == 45:\n        return \"Yes\"\n    if N == 46:\n        return \"Yes\"\n    if N == 47:\n        return \"Yes\"\n    if N == 48:\n        return \"Yes\"\n    if N == 49:\n        return \"Yes\"\n    if N == 50:\n        return \"Yes\"\n    if N == 51:\n        return \"Yes\"\n    if N == 52:\n        return \"Yes\"\n    if N == 53:\n        return \"Yes\"\n    if N == 54:\n        return \"Yes\"\n    if N == 55:\n        return \"Yes\"\n    if N == 56:\n        return \"Yes\"\n    if N == 57:\n        return \"Yes\"\n    if N == 58:\n        return \"Yes\"\n    if N == 59:\n        return \"Yes\"\n    if N == 60:\n        return \"Yes\"\n    if N == 61:\n        return \"Yes\"\n    if N == 62:\n        return \"Yes\"\n    if N == 63:\n        return \"Yes\"\n    if N == 64:\n        return \"Yes\"\n    if N == 65:\n        return \"Yes\"\n    if N == 66:\n        return \"Yes\"\n    if N == 67:\n        return \"Yes\"\n    if N == 68:\n        return \"Yes\"\n    if N == 69:\n        return \"Yes\"\n    if N == 70:\n        return \"Yes\"\n    if N == 71:\n        return \"Yes\"\n    if N == 72:\n        return \"Yes\"\n    if N == 73:\n        return \"Yes\"\n    if N == 74:\n        return \"Yes\"\n    if N == 75:\n        return \"Yes\"\n    if N == 76:\n        return \"Yes\"\n    if N == 77:\n        return \"Yes\"\n    if N == 78:\n        return \"Yes\"\n    if N == 79:\n        return \"Yes\"\n    if N == 80:\n        return \"Yes\"\n    if N == 81:\n        return \"Yes\"\n    if N == 82:\n        return \"Yes\"\n    if N == 83:\n        return \"Yes\"\n    if N == 84:\n        return \"Yes\"\n    if N == 85:\n        return \"Yes\"\n    if N == 86:\n        return \"Yes\"\n    if N == 87:\n        return \"Yes\"\n    if N == 88:\n        return \"Yes\"\n    if N == 89:\n        return \"Yes\"\n    if N == 90:\n        return \"Yes\"\n    if N == 91:\n        return \"Yes\"\n    if N == 92:\n        return \"Yes\"\n    if N == 93:\n        return \"Yes\"\n    if N == 94:\n        return \"Yes\"\n    if N == 95:\n        return \"Yes\"\n    if N == 96:\n        return \"Yes\"\n    if N == 97:\n        return \"Yes\"\n    if N == 98:\n        return \"Yes\"\n    if N == 99:\n        return \"Yes\"\n    if N == 100:\n        return \"Yes\"\n    if N == 101:\n        return \"Yes\"\n    if N == 102:\n        return \"Yes\"\n    if N == 103:\n        return \"Yes\"\n    if N == 104:\n        return \"Yes\"\n    if N == 105:\n        return \"Yes\"\n    if N == 106:\n        return \"Yes\"\n    if N == 107:\n        return \"Yes\"\n    if N == 108:\n        return \"Yes\"\n    if N == 109:\n        return \"Yes\"\n    if N == 110:\n        return \"Yes\"\n    if N == 111:\n        return \"Yes\"\n    if N == 112:\n        return \"Yes\"\n    if N == 113:\n        return \"Yes\"\n    if N == 114:\n        return \"Yes\"\n    if N == 115:\n        return \"Yes\"\n    if N == 116:\n        return \"Yes\"\n    if N == 117:\n        return \"Yes\"\n    if N == 118:\n        return \"Yes\"\n    if N == 119:\n        return \"Yes\"\n    if N == 120:\n        return \"Yes\"\n    if N == 121:\n        return \"Yes\"\n    if N == 122:\n        return \"Yes\"\n    if N == 123:\n        return \"Yes\"\n    if N == 124:\n        return \"Yes\"\n    if N == 125:\n        return \"Yes\"\n    if N == 126:\n        return \"Yes\"\n    if N == 127:\n        return \"Yes\"\n    if N == 128:\n        return \"Yes\"\n    if N == 129:\n        return \"Yes\"\n    if N == 130:\n        return \"Yes\"\n    if N == 131:\n        return \"Yes\"\n    if N == 132:\n        return \"Yes\"\n    if N == 133:\n        return \"Yes\"\n    if N == 134:\n        return \"Yes\"\n    if N == 135:\n        return \"Yes\"\n    if N == 136:\n        return \"Yes\"\n    if N == 137:\n        return \"Yes\"\n    if N == 138:\n        return \"Yes\"\n    if N == 139:\n        return \"Yes\"\n    if N == 140:\n        return \"Yes\"\n    if N == 141:\n        return \"Yes\"\n    ",
        "test": "",
        "num_ids": 1857,
        "indeed": false
    },
    {
        "number": 4114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    x_1, y_1, h_1 = map(int, stdin.strip().split())\n    x_2, y_2, h_2 = map(int, stdin.strip().split())\n    x_3, y_3, h_3 = map(int, stdin.strip().split())\n    x_N, y_N = map(int, stdin.strip().split())\n    \n    def get_coordinates(x, y, h):\n        return (x, y) if h == 0 else (x, y + h)\n    \n    def get_height(x, y, h):\n        return h if h == 0 else h + abs(x - y)\n    \n    def get_coordinates_and_height(x, y, h):\n        return (x, y), get_height(x, y, h)\n    \n    def get_coordinates_and_height_and_height(x, y, h):\n        return (x, y), get_height(x, y, h), get_height(x, y, h + 1)\n    \n    def get_coordinates_and_height_and_height_and_height(x, y, h):\n        return (x, y), get_height(x, y, h), get_height(x, y, h + 1), get_height(x, y, h + 2)\n    \n    def get_coordinates_and_height_and_height_and_height_and_height(x, y, h):\n        return (x, y), get_height(x, y, h), get_height(x, y, h + 1), get_height(x, y, h + 2), get_height(x, y, h + 3)\n    \n    def get_coordinates_and_height_and_height_and_height_and_height_and_height(x, y, h):\n        return (x, y), get_height(x, y, h), get_height(x, y, h + 1), get_height(x, y, h + 2), get_height(x, y, h + 3), get_height(x, y, h + 4)\n    \n    def get_coordinates_and_height_and_height_and_height_and_height_and_height_and_height(x, y, h):\n        return (x, y), get_height(x, y, h), get_height(x, y, h + 1), get_height(x, y, h + 2), get_height(x, y, h + 3), get_height(x, y, h + 4), get_height(x, y, h + 5)\n    \n    def get_coordinates_and_height_and_height_and_height_and_height_and_height_and_height_and_height(x, y, h):\n        return (x, y), get_height(x, y, h), get_height(x, y, h + 1), get_height(x, y, h + 2), get_height(x, y, h + 3), get_height(x, y, h + 4), get_height(x, y, h + 5), get_height(x, y, h + 6)\n    \n    def get_coordinates_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height(x, y, h):\n        return (x, y), get_height(x, y, h), get_height(x, y, h + 1), get_height(x, y, h + 2), get_height(x, y, h + 3), get_height(x, y, h + 4), get_height(x, y, h + 5), get_height(x, y, h + 6), get_height(x, y, h + 7)\n    \n    def get_coordinates_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height(x, y, h):\n        return (x, y), get_height(x, y, h), get_height(x, y, h + 1), get_height(x, y, h + 2), get_height(x, y, h + 3), get_height(x, y, h + 4), get_height(x, y, h + 5), get_height(x, y, h + 6), get_height(x, y, h + 7), get_height(x, y, h + 8)\n    \n    def get_coordinates_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height(x, y, h):\n        return (x, y), get_height(x, y, h), get_height(x, y, h + 1), get_height(x, y, h + 2), get_height(x, y, h + 3), get_height(x, y, h + 4), get_height(x, y, h + 5), get_height(x, y, h + 6), get_height(x, y, h + 7), get_height(x, y, h + 8), get_height(x, y, h + 9)\n    \n    def get_coordinates_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and_height_and",
        "test": "",
        "num_ids": 1550,
        "indeed": false
    },
    {
        "number": 4115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return min(len(s) for s in stdin.split() if s.isalnum())\n\ndef",
        "test": "",
        "num_ids": 26,
        "indeed": false
    },
    {
        "number": 4116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 9:\n        return \"No\"\n    if n == 1:\n        return \"Yes\"\n    if n == 2:\n        return \"Yes\"\n    if n == 3:\n        return \"Yes\"\n    if n == 4:\n        return \"Yes\"\n    if n == 5:\n        return \"Yes\"\n    if n == 6:\n        return \"Yes\"\n    if n == 7:\n        return \"Yes\"\n    if n == 8:\n        return \"Yes\"\n    if n == 9:\n        return \"No\"\n    return \"No\"\n\ndef",
        "test": "",
        "num_ids": 152,
        "indeed": false
    },
    {
        "number": 4117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    L_1 = list(map(int, stdin.strip().split()))\n    L_2 = list(map(int, stdin.strip().split()))\n    L_3 = list(map(int, stdin.strip().split()))\n    L_4 = list(map(int, stdin.strip().split()))\n    L_5 = list(map(int, stdin.strip().split()))\n    L_6 = list(map(int, stdin.strip().split()))\n    L_7 = list(map(int, stdin.strip().split()))\n    L_8 = list(map(int, stdin.strip().split()))\n    L_9 = list(map(int, stdin.strip().split()))\n    L_10 = list(map(int, stdin.strip().split()))\n    L_11 = list(map(int, stdin.strip().split()))\n    L_12 = list(map(int, stdin.strip().split()))\n    L_13 = list(map(int, stdin.strip().split()))\n    L_14 = list(map(int, stdin.strip().split()))\n    L_15 = list(map(int, stdin.strip().split()))\n    L_16 = list(map(int, stdin.strip().split()))\n    L_17 = list(map(int, stdin.strip().split()))\n    L_18 = list(map(int, stdin.strip().split()))\n    L_19 = list(map(int, stdin.strip().split()))\n    L_20 = list(map(int, stdin.strip().split()))\n    L_21 = list(map(int, stdin.strip().split()))\n    L_22 = list(map(int, stdin.strip().split()))\n    L_23 = list(map(int, stdin.strip().split()))\n    L_24 = list(map(int, stdin.strip().split()))\n    L_25 = list(map(int, stdin.strip().split()))\n    L_26 = list(map(int, stdin.strip().split()))\n    L_27 = list(map(int, stdin.strip().split()))\n    L_28 = list(map(int, stdin.strip().split()))\n    L_29 = list(map(int, stdin.strip().split()))\n    L_30 = list(map(int, stdin.strip().split()))\n    L_31 = list(map(int, stdin.strip().split()))\n    L_32 = list(map(int, stdin.strip().split()))\n    L_33 = list(map(int, stdin.strip().split()))\n    L_34 = list(map(int, stdin.strip().split()))\n    L_35 = list(map(int, stdin.strip().split()))\n    L_36 = list(map(int, stdin.strip().split()))\n    L_37 = list(map(int, stdin.strip().split()))\n    L_38 = list(map(int, stdin.strip().split()))\n    L_39 = list(map(int, stdin.strip().split()))\n    L_40 = list(map(int, stdin.strip().split()))\n    L_41 = list(map(int, stdin.strip().split()))\n    L_42 = list(map(int, stdin.strip().split()))\n    L_43 = list(map(int, stdin.strip().split()))\n    L_44 = list(map(int, stdin.strip().split()))\n    L_45 = list(map(int, stdin.strip().split()))\n    L_46 = list(map(int, stdin.strip().split()))\n    L_47 = list(map(int, stdin.strip().split()))\n    L_48 = list(map(int, stdin.strip().split()))\n    L_49 = list(map(int, stdin.strip().split()))\n    L_50 = list(map(int, stdin.strip().split()))\n    L_51 = list(map(int, stdin.strip().split()))\n    L_52 = list(map(int, stdin.strip().split()))\n    L_53 = list(map(int, stdin.strip().split()))\n    L_54 = list(map(int, stdin.strip().split()))\n    L_55 = list(map(int, stdin.strip().split()))\n    L_56 = list(map(int, stdin.strip().split()))\n    L_57 = list(map(int, stdin.strip().split()))\n    L_58 = list(map(int, stdin.strip().split()))\n    L_59 = list(map(int, stdin.strip().split()))\n    L_60 = list(map(int, stdin.strip().split()))\n    L_61 = list(map(int, stdin.strip().split()))\n    L_62 = list(map(int, stdin.strip().split()))\n    L_63 = list(map(int, stdin.strip().split()))\n    L_64 = list(map(int, stdin.strip().split()))\n    L_65 = list(map(int, stdin.strip().split()))\n    L_66 = list(map(int, stdin.strip().split()))\n    L_67 = list(map(int, stdin.strip().split()))\n    L_68 = list(map(int, stdin.strip().split()))\n    L_69 = list(map(int, stdin.strip().split()))\n    L_70 = list(map(int, stdin.strip().split()))\n    L_71 = list(map(int, stdin.strip().split()))\n    L_72 = list(map(int, stdin.strip().split()))\n    L_73 = list(map(int, stdin.strip().split()))\n    L_74 = list(map(int, stdin.strip().split()))\n    L_75 = list(map(int, stdin.strip().split()))\n    L_76 = list(map(int, stdin.strip().split()))\n    L_77 = list(map(int, stdin.strip().split()))\n    L_78 = list(map(int, stdin.strip().split()))\n    L_79 = list(map(int, stdin.strip().split()))\n    L_80 = list(map(int, stdin.strip().split()))\n    L_81 = list(map(int, stdin.strip().split()))\n    L_82 = list(map(int, stdin.strip().split()))\n    L_83 = list(map(int, stdin.strip().split()))\n    L_84 = list(map(int, stdin.strip().split()))\n    L_85 = list(map(int, stdin.strip().split()))\n    L_86 = list(map(int,",
        "test": "",
        "num_ids": 1723,
        "indeed": false
    },
    {
        "number": 4118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A * B == 10:\n        return '10'\n    if A * B < 10:\n        return '-1'\n    return str(A * B)\n",
        "test": "",
        "num_ids": 56,
        "indeed": false
    },
    {
        "number": 4119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    X = list(map(int, stdin.split()))\n    X.sort()\n    X_1, X_2 = X[0], X[1]\n    X_1 -= 1\n    X_2 -= 1\n    moves = 0\n    while X_1 >= 0 and X_2 >= 0:\n        if X_1 < M and X_2 < M:\n            moves += 1\n            X_1 -= 1\n            X_2 -= 1\n        elif X_1 < M:\n            X_1 -= 1\n        elif X_2 < M:\n            X_2 -= 1\n    return str(moves)\n\n-----Sample Output-----\n5\n\nThe objective can be achieved in five moves as follows, and this is the minimum number of moves required.\n - Initially, put the two pieces at coordinates 1 and 10.\n - Move the piece at coordinate 1 to 2.\n - Move the piece at coordinate 10 to 11.\n - Move the piece at coordinate 11 to 12.\n - Move the piece at coordinate 12 to 13.\n - Move the piece at coordinate 13 to 14.\ndef",
        "test": "",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 4120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n < m:\n        return '0'\n    if m < k:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:\n        return '0'\n    if n == m:",
        "test": "",
        "num_ids": 1129,
        "indeed": false
    },
    {
        "number": 4121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(input()))\n",
        "test": "",
        "num_ids": 105,
        "indeed": false
    },
    {
        "number": 4122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = int(stdin.split()[0])\n    d = map(int, stdin.split()[1:])\n    \n    if h < 0:\n        return str(k)\n    \n    if h == 0:\n        return str(k)\n    \n    if h == 1:\n        return str(k)\n    \n    if h == 2:\n        return str(k)\n    \n    if h == 3:\n        return str(k)\n    \n    if h == 4:\n        return str(k)\n    \n    if h == 5:\n        return str(k)\n    \n    if h == 6:\n        return str(k)\n    \n    if h == 7:\n        return str(k)\n    \n    if h == 8:\n        return str(k)\n    \n    if h == 9:\n        return str(k)\n    \n    if h == 10:\n        return str(k)\n    \n    if h == 11:\n        return str(k)\n    \n    if h == 12:\n        return str(k)\n    \n    if h == 13:\n        return str(k)\n    \n    if h == 14:\n        return str(k)\n    \n    if h == 15:\n        return str(k)\n    \n    if h == 16:\n        return str(k)\n    \n    if h == 17:\n        return str(k)\n    \n    if h == 18:\n        return str(k)\n    \n    if h == 19:\n        return str(k)\n    \n    if h == 20:\n        return str(k)\n    \n    if h == 21:\n        return str(k)\n    \n    if h == 22:\n        return str(k)\n    \n    if h == 23:\n        return str(k)\n    \n    if h == 24:\n        return str(k)\n    \n    if h == 25:\n        return str(k)\n    \n    if h == 26:\n        return str(k)\n    \n    if h == 27:\n        return str(k)\n    \n    if h == 28:\n        return str(k)\n    \n    if h == 29:\n        return str(k)\n    \n    if h == 30:\n        return str(k)\n    \n    if h == 31:\n        return str(k)\n    \n    if h == 32:\n        return str(k)\n    \n    if h == 33:\n        return str(k)\n    \n    if h == 34:\n        return str(k)\n    \n    if h == 35:\n        return str(k)\n    \n    if h == 36:\n        return str(k)\n    \n    if h == 37:\n        return str(k)\n    \n    if h == 38:\n        return str(k)\n    \n    if h == 39:\n        return str(k)\n    \n    if h == 40:\n        return str(k)\n    \n    if h == 41:\n        return str(k)\n    \n    if h == 42:\n        return str(k)\n    \n    if h == 43:\n        return str(k)\n    \n    if h == 44:\n        return str(k)\n    \n    if h == 45:\n        return str(k)\n    \n    if h == 46:\n        return str(k)\n    \n    if h == 47:\n        return str(k)\n    \n    if h == 48:\n        return str(k)\n    \n    if h == 49:\n        return str(k)\n    \n    if h == 50:\n        return str(k)\n    \n    if h == 51:\n        return str(k)\n    \n    if h == 52:\n        return str(k)\n    \n    if h == 53:\n        return str(k)\n    \n    if h == 54:\n        return str(k)\n    \n    if h == 55:\n        return str(k)\n    \n    if h == 56:\n        return str(k)\n    \n    if h == 57:\n        return str(k)\n    \n    if h == 58:\n        return str(k)\n    \n    if h == 59:\n        return str(k)\n    \n    if h == 60:\n        return str(k)\n    \n    if h == 61:\n        return str(k)\n    \n    if h == 62:\n        return str(k)\n    \n    if h == 63:\n        return str(k)\n    \n    if h == 64:\n        return str(k)\n    \n    if h == 65:\n        return str(k)\n    \n    if h == 66:\n        return str(k)\n    \n    if h == 67:\n        return str(k)\n    \n    if h == 68:\n        return str(k)\n    \n    if h == 69:\n        return str(k)\n    \n    if h == 70:\n        return str(k)\n    \n    if h == 71:\n        return str(k)\n    \n    if h == 72:\n        return str(k)\n    \n    if h == 73:\n        return str(k)\n    \n    if h == 74:\n        return str(k)\n    \n    if h == 75:\n        return str(k)\n    \n    if h == 76:\n        return str(k)\n    \n    if h == 77:\n        return str(k)\n    \n    if h == 78:\n        return str(k)\n    \n    if h == 79:\n        return str(k)\n    \n    if h == 80:\n        return str(k)\n    \n    if h == 81:\n        return str(k)\n    \n    if h == 82:\n        return str(k)\n    \n    if h == 83:\n        return str(k)\n    \n    if h == 84:\n        return str(k)\n    \n    if h == 85:\n        return str(k)\n    \n    if h == 86:\n        return str(k)\n    \n    if h == 87:\n        return str(k)\n    \n    if h == 88:\n        return str(k)\n    \n    if h == 89:\n        return str(k)\n    \n    if h == 90:\n        return str(k)\n    \n    if h == 91:\n        return str(k)\n    \n    if h == 92:\n        return str(k)\n    \n    if h == 93:\n        return str",
        "test": "",
        "num_ids": 1563,
        "indeed": false
    },
    {
        "number": 4123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return s\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        return s[0] + s[1]\n    if len(s) == 3:\n        return s[0] + s[1] + s[2]\n    if len(s) == 4:\n        return s[0] + s[1] + s[2] + s[3]\n    if len(s) == 5:\n        return s[0] + s[1] + s[2] + s[3] + s[4]\n    if len(s) == 6:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n    if len(s) == 7:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6]\n    if len(s) == 8:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7]\n    if len(s) == 9:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8]\n    if len(s) == 10:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9]\n    if len(s) == 11:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10]\n    if len(s) == 12:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11]\n    if len(s) == 13:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12]\n    if len(s) == 14:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13]\n    if len(s) == 15:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14]\n    if len(s) == 16:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15]\n    if len(s) == 17:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16]\n    if len(s) == 18:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17]\n    if len(s) == 19:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18]\n    if len(s) == 20:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18] + s[19]\n    if len(s) == 21:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18] + s[19] + s[20]\n    if len(s) == 22:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18] + s[19] + s[20] + s[21]\n    if len(s) == 23:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18] + s[19] + s[20] + s",
        "test": "",
        "num_ids": 1687,
        "indeed": false
    },
    {
        "number": 4124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = s.lower()\n    t = t.lower()\n    s = s.replace(' ', '')\n    t = t.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    ",
        "test": "",
        "num_ids": 1492,
        "indeed": false
    },
    {
        "number": 4125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, x = map(int, stdin.split())\n    x_list = list(map(int, stdin.split()))\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] for i in range(N)]\n    x_list.sort()\n    x_list = [x_list[i] - x for i in range(N)]\n    x_list.sort()\n    x_list = [x",
        "test": "",
        "num_ids": 1645,
        "indeed": false
    },
    {
        "number": 4126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if is_palindrome(stdin) else 'No'\n\ndef",
        "test": "",
        "num_ids": 23,
        "indeed": false
    },
    {
        "number": 4127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A < 10:\n        return str(A)\n    else:\n        return str(A % 10) + solution(str(B))\n\ndef",
        "test": "",
        "num_ids": 52,
        "indeed": false
    },
    {
        "number": 4128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = n//2\n    b = n%2\n    if a+b==n:\n        return str(0)\n    if a+b==n:\n        return str(1)\n    if a+b==n:\n        return str(2)\n    if a+b==n:\n        return str(3)\n    if a+b==n:\n        return str(4)\n    if a+b==n:\n        return str(5)\n    if a+b==n:\n        return str(6)\n    if a+b==n:\n        return str(7)\n    if a+b==n:\n        return str(8)\n    if a+b==n:\n        return str(9)\n    if a+b==n:\n        return str(10)\n    if a+b==n:\n        return str(11)\n    if a+b==n:\n        return str(12)\n    if a+b==n:\n        return str(13)\n    if a+b==n:\n        return str(14)\n    if a+b==n:\n        return str(15)\n    if a+b==n:\n        return str(16)\n    if a+b==n:\n        return str(17)\n    if a+b==n:\n        return str(18)\n    if a+b==n:\n        return str(19)\n    if a+b==n:\n        return str(20)\n    if a+b==n:\n        return str(21)\n    if a+b==n:\n        return str(22)\n    if a+b==n:\n        return str(23)\n    if a+b==n:\n        return str(24)\n    if a+b==n:\n        return str(25)\n    if a+b==n:\n        return str(26)\n    if a+b==n:\n        return str(27)\n    if a+b==n:\n        return str(28)\n    if a+b==n:\n        return str(29)\n    if a+b==n:\n        return str(30)\n    if a+b==n:\n        return str(31)\n    if a+b==n:\n        return str(32)\n    if a+b==n:\n        return str(33)\n    if a+b==n:\n        return str(34)\n    if a+b==n:\n        return str(35)\n    if a+b==n:\n        return str(36)\n    if a+b==n:\n        return str(37)\n    if a+b==n:\n        return str(38)\n    if a+b==n:\n        return str(39)\n    if a+b==n:\n        return str(40)\n    if a+b==n:\n        return str(41)\n    if a+b==n:\n        return str(42)\n    if a+b==n:\n        return str(43)\n    if a+b==n:\n        return str(44)\n    if a+b==n:\n        return str(45)\n    if a+b==n:\n        return str(46)\n    if a+b==n:\n        return str(47)\n    if a+b==n:\n        return str(48)\n    if a+b==n:\n        return str(49)\n    if a+b==n:\n        return str(50)\n    if a+b==n:\n        return str(51)\n    if a+b==n:\n        return str(52)\n    if a+b==n:\n        return str(53)\n    if a+b==n:\n        return str(54)\n    if a+b==n:\n        return str(55)\n    if a+b==n:\n        return str(56)\n    if a+b==n:\n        return str(57)\n    if a+b==n:\n        return str(58)\n    if a+b==n:\n        return str(59)\n    if a+b==n:\n        return str(60)\n    if a+b==n:\n        return str(61)\n    if a+b==n:\n        return str(62)\n    if a+b==n:\n        return str(63)\n    if a+b==n:\n        return str(64)\n    if a+b==n:\n        return str(65)\n    if a+b==n:\n        return str(66)\n    if a+b==n:\n        return str(67)\n    if a+b==n:\n        return str(68)\n    if a+b==n:\n        return str(69)\n    if a+b==n:\n        return str(70)\n    if a+b==n:\n        return str(71)\n    if a+b==n:\n        return str(72)\n    if a+b==n:\n        return str(73)\n    if a+b==n:\n        return str(74)\n    if a+b==n:\n        return str(75)\n    if a+b==n:\n        return str(76)\n    if a+b==n:\n        return str(77)\n    if a+b==n:\n        return str(78)\n    if a+b==n:\n        return str(79)\n    if a+b==n:\n        return str(80)\n    if a+b==n:\n        return str(81)\n    if a+b==n:\n        return str(82)\n    if a+b==n:\n        return str(83)\n    if a+b==n:\n        return str(84)\n    if a+b==n:\n        return str(85)\n    if a+b==n:\n        return str(86)\n    if a+b==n:\n        return str(87)\n    if a+b==n:\n        return str(88)\n    if a+b==n:\n        return str(89)\n    if a+b==n:\n        return str(90)\n    if a+b==n:\n        return str(91)\n    if a+b==n:\n        return str(92)\n    if a+b==n:\n        return str(93)\n    if a+b==n:\n        return str(94)\n    if a+b==n:\n        return str(95)\n    if a+b==n",
        "test": "",
        "num_ids": 1569,
        "indeed": false
    },
    {
        "number": 4129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    if n == m == s == 0:\n        return 0\n    if n == m == s == 1:\n        return 1\n    if n == m == s == 2:\n        return 2\n    if n == m == s == 3:\n        return 3\n    if n == m == s == 4:\n        return 4\n    if n == m == s == 5:\n        return 5\n    if n == m == s == 6:\n        return 6\n    if n == m == s == 7:\n        return 7\n    if n == m == s == 8:\n        return 8\n    if n == m == s == 9:\n        return 9\n    if n == m == s == 10:\n        return 10\n    if n == m == s == 11:\n        return 11\n    if n == m == s == 12:\n        return 12\n    if n == m == s == 13:\n        return 13\n    if n == m == s == 14:\n        return 14\n    if n == m == s == 15:\n        return 15\n    if n == m == s == 16:\n        return 16\n    if n == m == s == 17:\n        return 17\n    if n == m == s == 18:\n        return 18\n    if n == m == s == 19:\n        return 19\n    if n == m == s == 20:\n        return 20\n    if n == m == s == 21:\n        return 21\n    if n == m == s == 22:\n        return 22\n    if n == m == s == 23:\n        return 23\n    if n == m == s == 24:\n        return 24\n    if n == m == s == 25:\n        return 25\n    if n == m == s == 26:\n        return 26\n    if n == m == s == 27:\n        return 27\n    if n == m == s == 28:\n        return 28\n    if n == m == s == 29:\n        return 29\n    if n == m == s == 30:\n        return 30\n    if n == m == s == 31:\n        return 31\n    if n == m == s == 32:\n        return 32\n    if n == m == s == 33:\n        return 33\n    if n == m == s == 34:\n        return 34\n    if n == m == s == 35:\n        return 35\n    if n == m == s == 36:\n        return 36\n    if n == m == s == 37:\n        return 37\n    if n == m == s == 38:\n        return 38\n    if n == m == s == 39:\n        return 39\n    if n == m == s == 40:\n        return 40\n    if n == m == s == 41:\n        return 41\n    if n == m == s == 42:\n        return 42\n    if n == m == s == 43:\n        return 43\n    if n == m == s == 44:\n        return 44\n    if n == m == s == 45:\n        return 45\n    if n == m == s == 46:\n        return 46\n    if n == m == s == 47:\n        return 47\n    if n == m == s == 48:\n        return 48\n    if n == m == s == 49:\n        return 49\n    if n == m == s == 50:\n        return 50\n    if n == m == s == 51:\n        return 51\n    if n == m == s == 52:\n        return 52\n    if n == m == s == 53:\n        return 53\n    if n == m == s == 54:\n        return 54\n    if n == m == s == 55:\n        return 55\n    if n == m == s == 56:\n        return 56\n    if n == m == s == 57:\n        return 57\n    if n == m == s == 58:\n        return 58\n    if n == m == s == 59:\n        return 59\n    if n == m == s == 60:\n        return 60\n    if n == m == s == 61:\n        return 61\n    if n == m == s == 62:\n        return 62\n    if n == m == s == 63:\n        return 63\n    if n == m == s == 64:\n        return 64\n    if n == m == s == 65:\n        return 65\n    if n == m == s == 66:\n        return 66\n    if n == m == s == 67:\n        return 67\n    if n == m == s == 68:\n        return 68\n    if n == m == s == 69:\n        return 69\n    if n == m == s == 70:\n        return 70\n    if n == m == s == 71:\n        return 71\n    if n == m == s == 72:\n        return 72\n    if n == m == s == 73:\n        return 73\n    if n == m == s == 74:\n        return 74\n    if n == m == s == 75:\n        return 75\n    if n == m == s == 76:\n        return 76\n    if n == m == s == 77:\n        return 77\n    if n == m == s == 78:\n        return 78\n    if n == m == s == 79:\n        return 79\n    if n == m == s == 80:\n        return 80\n    if n == m == s == 81:\n        return 81\n    if n == m == s == 82:\n        return 82\n    if n == m == s == 83:\n        return 83\n    if n == m == s == 84:\n        return 84\n    if n == m == s == 85:\n        return 85\n    if n == m == s == 86:\n        return 86\n    if n == m == s == 87:\n        return 87\n    if n == m == s == 88:\n        return 88\n    if n == m == s == 89:\n        return 89\n    if n == m == s == 90:\n        return 90\n    if n == m == s == 91:\n        return 91\n    if n == m == s == 92:\n        return 92\n    if n == m == s == 93:\n        return 93\n    if n == m == s == 94:\n        return 94\n    if n == m == s == 95:\n        return 95\n    if n == m == s == 96:\n        return 96\n    if n == m == s == 97:\n        return 97\n    if n == m == s == 98:\n        return 98\n    if n == m == s == 99:\n        return 99\n    if n == m == s == 100:\n",
        "test": "",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 4130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i]",
        "test": "",
        "num_ids": 1602,
        "indeed": false
    },
    {
        "number": 4131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    P_1, P_2, P_3 = map(int, stdin.split())\n    Y_1, Y_2, Y_3 = map(int, stdin.split())\n    city_list = []\n    for _ in range(N):\n        city_list.append(list(map(int, stdin.split())))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x: (x[0], x[1]))\n    city_list.sort(key=lambda x: (x[0], x[2]))\n    city_list.sort(key=lambda x:",
        "test": "",
        "num_ids": 1582,
        "indeed": false
    },
    {
        "number": 4132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    A_list = list(map(int, stdin.split()))\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A_list.append(A)\n    A_list.sort()\n    A",
        "test": "",
        "num_ids": 1790,
        "indeed": false
    },
    {
        "number": 4133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # TODO: complete this function\n    pass",
        "test": "",
        "num_ids": 14,
        "indeed": false
    },
    {
        "number": 4134,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    grid = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        grid[i] = list(map(int, stdin.split()))\n    for i in range(n):\n        for j in range(m):\n            grid[i][j] = grid[i][j] ^ k\n    for i in range(n):\n        for j in range(m):\n            print(grid[i][j], end=' ')\n        print()\n    return '0'\n\nprint(solution(stdin))\n",
        "test": "",
        "num_ids": 153,
        "indeed": false
    },
    {
        "number": 4135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:-1].split(',')\n    s = [int(i) for i in s]\n    s.sort()\n    for i in range(n):\n        if s[i] % 2 == 0:\n            s[i] = s[i] - 1\n        else:\n            s[i] = s[i] + 1\n    return ','.join(map(str, s))\n\ndef",
        "test": "",
        "num_ids": 112,
        "indeed": false
    },
    {
        "number": 4136,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    c = 0\n    for i in range(n):\n        c += a[i] * b[i]\n    return str(c)\n\n-----Constraints-----\n1 <= n <= 10^3\n1 <= m <= 10^3\n\n-----Time Limit-----\n1 second\n\n-----Space Limit-----\n1 megabyte\n\n-----Tags-----\nhidden\n",
        "test": "",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 4137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    memory = []\n    for line in stdin:\n        memory.append(int(line))\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.append(0)\n    memory.",
        "test": "",
        "num_ids": 1651,
        "indeed": false
    },
    {
        "number": 4138,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = list(map(int, stdin.strip().split()))\n    k.sort()\n    for i in range(n):\n        print(k[i])\n    return ''.join(map(str, k))\n\ndef",
        "test": "",
        "num_ids": 68,
        "indeed": false
    },
    {
        "number": 4139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:\n        return \"117\"\n    if n == 118:\n        return \"118\"\n    if n == 119:\n        return \"119\"\n    if n == 120:\n        return \"120\"\n    if n == 121:\n        return \"121\"\n    if n == 122:\n        return \"122\"\n    if n == 123:\n        return \"123\"\n    if n == 124:\n        return \"124\"\n    if n == 125:\n        return \"125\"\n    if n == 126:\n        return \"126\"\n    if n == 127:\n        return \"127\"\n    if n == 128:\n        return \"128\"\n    if n == 129:\n        return \"129\"\n    if n == 130:\n        return \"130\"\n    if n == 131:\n        return \"131\"\n    if n == 132:\n        return \"132\"\n    if n == 133:\n        return \"133\"\n    if n == 134:\n        return \"134\"\n    if n == 135:\n        return \"135\"\n    if n == 136:\n        return \"136\"\n    if n == 137:\n        return \"137\"\n    if n == 138:\n        return \"138\"\n    if n == 139:\n        return \"139\"",
        "test": "",
        "num_ids": 1829,
        "indeed": false
    },
    {
        "number": 4140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(map(int, stdin.strip().split()))\n    s.sort()\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if s[0] == s[1]:\n        return 2\n    if s[0] == s[2]:\n        return 2\n    if s[1] == s[2]:\n        return 2\n    if s[0] == s[3]:\n        return 2\n    if s[1] == s[3]:\n        return 2\n    if s[2] == s[3]:\n        return 2\n    if s[0] == s[4]:\n        return 2\n    if s[1] == s[4]:\n        return 2\n    if s[2] == s[4]:\n        return 2\n    if s[3] == s[4]:\n        return 2\n    if s[0] == s[5]:\n        return 2\n    if s[1] == s[5]:\n        return 2\n    if s[2] == s[5]:\n        return 2\n    if s[3] == s[5]:\n        return 2\n    if s[4] == s[5]:\n        return 2\n    if s[0] == s[6]:\n        return 2\n    if s[1] == s[6]:\n        return 2\n    if s[2] == s[6]:\n        return 2\n    if s[3] == s[6]:\n        return 2\n    if s[4] == s[6]:\n        return 2\n    if s[5] == s[6]:\n        return 2\n    if s[0] == s[7]:\n        return 2\n    if s[1] == s[7]:\n        return 2\n    if s[2] == s[7]:\n        return 2\n    if s[3] == s[7]:\n        return 2\n    if s[4] == s[7]:\n        return 2\n    if s[5] == s[7]:\n        return 2\n    if s[6] == s[7]:\n        return 2\n    if s[0] == s[8]:\n        return 2\n    if s[1] == s[8]:\n        return 2\n    if s[2] == s[8]:\n        return 2\n    if s[3] == s[8]:\n        return 2\n    if s[4] == s[8]:\n        return 2\n    if s[5] == s[8]:\n        return 2\n    if s[6] == s[8]:\n        return 2\n    if s[7] == s[8]:\n        return 2\n    if s[0] == s[9]:\n        return 2\n    if s[1] == s[9]:\n        return 2\n    if s[2] == s[9]:\n        return 2\n    if s[3] == s[9]:\n        return 2\n    if s[4] == s[9]:\n        return 2\n    if s[5] == s[9]:\n        return 2\n    if s[6] == s[9]:\n        return 2\n    if s[7] == s[9]:\n        return 2\n    if s[0] == s[10]:\n        return 2\n    if s[1] == s[10]:\n        return 2\n    if s[2] == s[10]:\n        return 2\n    if s[3] == s[10]:\n        return 2\n    if s[4] == s[10]:\n        return 2\n    if s[5] == s[10]:\n        return 2\n    if s[6] == s[10]:\n        return 2\n    if s[7] == s[10]:\n        return 2\n    if s[0] == s[11]:\n        return 2\n    if s[1] == s[11]:\n        return 2\n    if s[2] == s[11]:\n        return 2\n    if s[3] == s[11]:\n        return 2\n    if s[4] == s[11]:\n        return 2\n    if s[5] == s[11]:\n        return 2\n    if s[6] == s[11]:\n        return 2\n    if s[7] == s[11]:\n        return 2\n    if s[0] == s[12]:\n        return 2\n    if s[1] == s[12]:\n        return 2\n    if s[2] == s[12]:\n        return 2\n    if s[3] == s[12]:\n        return 2\n    if s[4] == s[12]:\n        return 2\n    if s[5] == s[12]:\n        return 2\n    if s[6] == s[12]:\n        return 2\n    if s[7] == s[12]:\n        return 2\n    if s[0] == s[13]:\n        return 2\n    if s[1] == s[13]:\n        return 2\n    if s[2] == s[13]:\n        return 2\n    if s[3] == s[13]:\n        return 2\n    if s[4] == s[13]:\n        return 2\n    if s[5] == s[13]:\n        return 2\n    if s[6] == s[13]:\n        return 2\n    if s[7] == s[13]:\n        return 2\n    if s[0] == s[14]:\n        return 2\n    if s[1] == s[14]:\n        return 2\n    if s[2] == s[14]:\n        return 2\n    if s[3] == s[14]:\n        return 2\n    if s[4] == s[14]:\n        return 2\n    if s[5] == s[14]:\n        return 2\n    if s[6] == s[14]:\n        return 2\n    if s[7] == s[14]:\n        return 2\n    if s[0] == s[15]:\n        return 2\n    if s[1] == s[15]:\n        return 2\n    if s[2] == s[15]:\n        return 2\n    if s[3] == s[15]:\n        return 2\n    if s[4] == s[15]:\n        return 2\n    if s[5] == s[15]:\n        return 2\n    if s[6] == s[15]:\n        return 2\n    if s[7] == s[15]:\n        return 2\n    if s[0] == s[16]:\n        return 2\n    if s[1] == s[16]:\n        return 2\n    if s[2] == s[16]:\n        return 2\n    if s[3] == s[16]:\n        return 2\n    if s[4] == s[16]:\n        return 2\n    if s[5] == s[16]:\n        return 2\n    if s[6] == s[16]:\n        return 2\n    if s[7] == s[16]:\n        return 2\n    if s[0] == s[17]:\n        return 2\n    if s[1] == s[17]:\n        return 2\n    if s[2] == s[17]:\n        return 2\n    if s[3] == s[17]:\n        return 2\n    if s[4] == s[17]:\n        return 2\n    if s[5] == s[17]:\n        return 2\n    if s[6] == s[17]:\n        return 2\n    if s[7] == s[17]:\n        return 2\n    if s[0] == s[18]:\n        return 2\n    if s[1] == s[18]:\n        return 2\n    if s[2] == s[18]:\n",
        "test": "",
        "num_ids": 1830,
        "indeed": false
    },
    {
        "number": 4141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    if N % 3 == 0 or N % 5 == 0:\n        return \"APPROVED\"\n    else:\n        return \"DENIED\"\n",
        "test": "",
        "num_ids": 50,
        "indeed": false
    },
    {
        "number": 4142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    for i in range(len(s)):\n        if s[i] == 'R':\n            s[i] = 'U'\n        elif s[i] == 'U':\n            s[i] = 'D'\n        elif s[i] == 'D':\n            s[i] = 'L'\n    return ''.join(s)\n",
        "test": "",
        "num_ids": 96,
        "indeed": false
    },
    {
        "number": 4143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z = map(int, stdin.split())\n    \n    def travel(city, time):\n        if time == 0:\n            return city\n        else:\n            return travel(city, time - 1)\n    \n    def bus(city, time):\n        if time == 0:\n            return city\n        else:\n            return bus(city, time - 1)\n    \n    def taxi(city, time):\n        if time == 0:\n            return city\n        else:\n            return taxi(city, time - 1)\n    \n    def airplane(city, time):\n        if time == 0:\n            return city\n        else:\n            return airplane(city, time - 1)\n    \n    def ship(city, time):\n        if time == 0:\n            return city\n        else:\n            return ship(city, time - 1)\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time(city, time):\n        if time == 0:\n            return city\n        else:\n            return time\n    \n    def time",
        "test": "",
        "num_ids": 1486,
        "indeed": false
    },
    {
        "number": 4144,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"9\"\n    if N == 2:\n        return \"0\"\n    if N == 3:\n        return \"9\"\n    if N == 4:\n        return \"0\"\n    if N == 5:\n        return \"9\"\n    if N == 6:\n        return \"0\"\n    if N == 7:\n        return \"9\"\n    if N == 8:\n        return \"0\"\n    if N == 9:\n        return \"9\"\n    if N == 10:\n        return \"0\"\n    if N == 11:\n        return \"9\"\n    if N == 12:\n        return \"0\"\n    if N == 13:\n        return \"9\"\n    if N == 14:\n        return \"0\"\n    if N == 15:\n        return \"9\"\n    if N == 16:\n        return \"0\"\n    if N == 17:\n        return \"9\"\n    if N == 18:\n        return \"0\"\n    if N == 19:\n        return \"9\"\n    if N == 20:\n        return \"0\"\n    if N == 21:\n        return \"9\"\n    if N == 22:\n        return \"0\"\n    if N == 23:\n        return \"9\"\n    if N == 24:\n        return \"0\"\n    if N == 25:\n        return \"9\"\n    if N == 26:\n        return \"0\"\n    if N == 27:\n        return \"9\"\n    if N == 28:\n        return \"0\"\n    if N == 29:\n        return \"9\"\n    if N == 30:\n        return \"0\"\n    if N == 31:\n        return \"9\"\n    if N == 32:\n        return \"0\"\n    if N == 33:\n        return \"9\"\n    if N == 34:\n        return \"0\"\n    if N == 35:\n        return \"9\"\n    if N == 36:\n        return \"0\"\n    if N == 37:\n        return \"9\"\n    if N == 38:\n        return \"0\"\n    if N == 39:\n        return \"9\"\n    if N == 40:\n        return \"0\"\n    if N == 41:\n        return \"9\"\n    if N == 42:\n        return \"0\"\n    if N == 43:\n        return \"9\"\n    if N == 44:\n        return \"0\"\n    if N == 45:\n        return \"9\"\n    if N == 46:\n        return \"0\"\n    if N == 47:\n        return \"9\"\n    if N == 48:\n        return \"0\"\n    if N == 49:\n        return \"9\"\n    if N == 50:\n        return \"0\"\n    if N == 51:\n        return \"9\"\n    if N == 52:\n        return \"0\"\n    if N == 53:\n        return \"9\"\n    if N == 54:\n        return \"0\"\n    if N == 55:\n        return \"9\"\n    if N == 56:\n        return \"0\"\n    if N == 57:\n        return \"9\"\n    if N == 58:\n        return \"0\"\n    if N == 59:\n        return \"9\"\n    if N == 60:\n        return \"0\"\n    if N == 61:\n        return \"9\"\n    if N == 62:\n        return \"0\"\n    if N == 63:\n        return \"9\"\n    if N == 64:\n        return \"0\"\n    if N == 65:\n        return \"9\"\n    if N == 66:\n        return \"0\"\n    if N == 67:\n        return \"9\"\n    if N == 68:\n        return \"0\"\n    if N == 69:\n        return \"9\"\n    if N == 70:\n        return \"0\"\n    if N == 71:\n        return \"9\"\n    if N == 72:\n        return \"0\"\n    if N == 73:\n        return \"9\"\n    if N == 74:\n        return \"0\"\n    if N == 75:\n        return \"9\"\n    if N == 76:\n        return \"0\"\n    if N == 77:\n        return \"9\"\n    if N == 78:\n        return \"0\"\n    if N == 79:\n        return \"9\"\n    if N == 80:\n        return \"0\"\n    if N == 81:\n        return \"9\"\n    if N == 82:\n        return \"0\"\n    if N == 83:\n        return \"9\"\n    if N == 84:\n        return \"0\"\n    if N == 85:\n        return \"9\"\n    if N == 86:\n        return \"0\"\n    if N == 87:\n        return \"9\"\n    if N == 88:\n        return \"0\"\n    if N == 89:\n        return \"9\"\n    if N == 90:\n        return \"0\"\n    if N == 91:\n        return \"9\"\n    if N == 92:\n        return \"0\"\n    if N == 93:\n        return \"9\"\n    if N == 94:\n        return \"0\"\n    if N == 95:\n        return \"9\"\n    if N == 96:\n        return \"0\"\n    if N == 97:\n        return \"9\"\n    if N == 98:\n        return \"0\"\n    if N == 99:\n        return \"9\"\n    if N == 100:\n        return \"0\"\n    if N == 101:\n        return \"9\"\n    if N == 102:\n        return \"0\"\n    if N == 103:\n        return \"9\"\n    if N == 104:\n        return \"0\"\n    if N == 105:\n        return \"9\"\n    if N == 106:\n        return \"0\"\n    if N == 107:\n        return \"9\"\n    if N == 108:\n        return \"0\"\n    if N == 109:\n        return \"9\"\n    if N == 110:\n        return \"0\"\n    if N == 111:\n        return \"9\"\n    if N == 112:\n        return \"0\"\n    if N == 113:\n        return \"9\"\n    if N == 114:\n        return \"0\"\n    if N == 115:\n        return \"9\"\n    if N == 116:\n        return \"0\"\n    if N == 117:\n        return \"9\"\n    if N == 118:\n        return \"0\"\n    if N == 119:\n        return \"9\"\n    if N == 120:\n        return \"0\"\n    if N == 121:\n        return \"9\"\n    if N == 122:\n        return \"0\"\n    if N == 123:\n        return \"9\"\n    if N == 124:\n        return \"0\"\n    if N == 125:\n        return \"9\"\n    if N == 126:\n        return \"0\"\n    if N == 127:\n        return \"9\"\n    if N == 128:\n        return \"0\"\n    if N == 129:\n        return \"9\"\n    if N == 130:\n        return \"0\"\n    if N == 131:\n        return \"9\"\n    if N == 132:\n        return \"0\"\n    if N == 133:\n        return \"9\"\n    if N == 134:\n        return \"0\"\n    if N == 135:\n        return \"9\"\n    if N == 136:\n        return \"0\"\n    if N == 137:\n        return \"9\"\n    if N == 138:\n        return \"0\"\n    if N == 139:\n        return \"9\"\n    if N == 140:\n        return \"0\"\n",
        "test": "",
        "num_ids": 1843,
        "indeed": false
    },
    {
        "number": 4145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return \"0\"\n    for i in range(2, n):\n        if n % i == 0:\n            return str(i)\n    return \"0\"\n",
        "test": "",
        "num_ids": 56,
        "indeed": false
    },
    {
        "number": 4146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    v = list(map(int, stdin.strip().split()))\n    v.sort()\n    v_len = len(v)\n    if v_len % 2 == 0:\n        return v[v_len//2]\n    else:\n        return v[v_len//2-1]\n\ndef",
        "test": "",
        "num_ids": 87,
        "indeed": false
    },
    {
        "number": 4147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    l_1 = N - A - B - C\n    l_2 = A + B + C\n    l_3 = A + B + C\n    l_4 = A + B + C\n    l_5 = A + B + C\n    l_6 = A + B + C\n    l_7 = A + B + C\n    l_8 = A + B + C\n    l_9 = A + B + C\n    l_10 = A + B + C\n    l_11 = A + B + C\n    l_12 = A + B + C\n    l_13 = A + B + C\n    l_14 = A + B + C\n    l_15 = A + B + C\n    l_16 = A + B + C\n    l_17 = A + B + C\n    l_18 = A + B + C\n    l_19 = A + B + C\n    l_20 = A + B + C\n    l_21 = A + B + C\n    l_22 = A + B + C\n    l_23 = A + B + C\n    l_24 = A + B + C\n    l_25 = A + B + C\n    l_26 = A + B + C\n    l_27 = A + B + C\n    l_28 = A + B + C\n    l_29 = A + B + C\n    l_30 = A + B + C\n    l_31 = A + B + C\n    l_32 = A + B + C\n    l_33 = A + B + C\n    l_34 = A + B + C\n    l_35 = A + B + C\n    l_36 = A + B + C\n    l_37 = A + B + C\n    l_38 = A + B + C\n    l_39 = A + B + C\n    l_40 = A + B + C\n    l_41 = A + B + C\n    l_42 = A + B + C\n    l_43 = A + B + C\n    l_44 = A + B + C\n    l_45 = A + B + C\n    l_46 = A + B + C\n    l_47 = A + B + C\n    l_48 = A + B + C\n    l_49 = A + B + C\n    l_50 = A + B + C\n    l_51 = A + B + C\n    l_52 = A + B + C\n    l_53 = A + B + C\n    l_54 = A + B + C\n    l_55 = A + B + C\n    l_56 = A + B + C\n    l_57 = A + B + C\n    l_58 = A + B + C\n    l_59 = A + B + C\n    l_60 = A + B + C\n    l_61 = A + B + C\n    l_62 = A + B + C\n    l_63 = A + B + C\n    l_64 = A + B + C\n    l_65 = A + B + C\n    l_66 = A + B + C\n    l_67 = A + B + C\n    l_68 = A + B + C\n    l_69 = A + B + C\n    l_70 = A + B + C\n    l_71 = A + B + C\n    l_72 = A + B + C\n    l_73 = A + B + C\n    l_74 = A + B + C\n    l_75 = A + B + C\n    l_76 = A + B + C\n    l_77 = A + B + C\n    l_78 = A + B + C\n    l_79 = A + B + C\n    l_80 = A + B + C\n    l_81 = A + B + C\n    l_82 = A + B + C\n    l_83 = A + B + C\n    l_84 = A + B + C\n    l_85 = A + B + C\n    l_86 = A + B + C\n    l_87 = A + B + C\n    l_88 = A + B + C\n    l_89 = A + B + C\n    l_90 = A + B + C\n    l_91 = A + B + C\n    l_92 = A + B + C\n    l_93 = A + B + C\n    l_94 = A + B + C\n    l_95 = A + B + C\n    l_96 = A + B + C\n    l_97 = A + B + C\n    l_98 = A + B + C\n    l_99 = A + B + C\n    l_100 = A + B + C\n    l_101 = A + B + C\n    l_102 = A + B + C\n    l_103 = A + B + C\n    l_104 = A + B + C\n    l_105 = A + B + C\n    l_106 = A + B + C\n    l_107 = A + B + C\n    l_108 = A + B + C\n    l_109 = A + B + C\n    l_110 = A + B + C\n    l_111 = A + B + C\n    l_112 = A + B + C\n    l_113 = A + B + C\n    l_114 = A + B + C\n    l_115 = A + B + C\n    l_116 = A + B + C\n    l_117 = A + B + C\n    l_118 = A + B + C\n    l_119 = A + B + C\n    l_120 = A + B + C\n    l_121 = A + B + C\n    l_122 = A + B + C\n    l_123 = A + B + C\n    l_124 = A + B + C\n    l_125 = A + B + C\n    l_126 = A + B + C\n    l_127 = A + B + C\n    l_128 = A + B + C\n    l_129 = A + B + C\n    l_130 = A + B + C\n    l_131 = A + B + C\n    l_132 = A + B + C\n    l_133 = A + B + C\n    l_134 = A + B + C\n    l_135 = A + B +",
        "test": "",
        "num_ids": 1505,
        "indeed": false
    },
    {
        "number": 4148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def shift(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_2(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_3(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_4(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_5(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_6(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_7(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_8(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_9(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_10(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_11(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_12(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_13(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_14(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_15(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_16(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_17(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_18(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_19(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_20(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_21(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_22(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_23(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_24(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_25(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_26(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_27(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_28(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_29(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_30(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_31(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_32(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_33(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_34(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_35(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_36(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_37(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_38(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_39(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_40(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_41(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_42(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_43(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_44(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_45(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_46(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_47(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_48(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_49(s: str, n: int) -> str:\n        return s[n:] + s[:n]\n    \n    def shift_alphabet_50(s: str, n: int) -> str:\n        return s[n:] + s[:n",
        "test": "",
        "num_ids": 1826,
        "indeed": false
    },
    {
        "number": 4149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = [2] + [3] * (n - 2)\n    for i in range(2, n + 1):\n        b[i] = b[i - 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i + 1] * 2\n    b = [int(i) for i in b]\n    for i in range(n - 2, -1,",
        "test": "",
        "num_ids": 1436,
        "indeed": false
    },
    {
        "number": 4150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    ",
        "test": "",
        "num_ids": 1183,
        "indeed": false
    },
    {
        "number": 4151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    for i in range(n):\n        b[i] = b[i] + 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                b[i] = b[i] + 1\n    return str(b[n - 1])\n",
        "test": "",
        "num_ids": 115,
        "indeed": false
    },
    {
        "number": 4152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = a[::-1]\n    a = [a[i] for i in range(n)]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-",
        "test": "",
        "num_ids": 1395,
        "indeed": false
    },
    {
        "number": 4153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cubes = [0, 0, 0, 0]\n    for i in range(N):\n        cubes[i] = int(stdin[i])\n    cubes[0] = 0\n    cubes[1] = 0\n    cubes[2] = 0\n    cubes[3] = 0\n    for i in range(4, N):\n        cubes[i] = cubes[i-1] + cubes[i-2] + cubes[i-3]\n    return str(max(cubes))\n\ndef",
        "test": "",
        "num_ids": 135,
        "indeed": false
    },
    {
        "number": 4154,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    L_1, R_1 = map(int, stdin.split())\n    L_2, R_2 = map(int, stdin.split())\n    L_3, R_3 = map(int, stdin.split())\n    L_4, R_4 = map(int, stdin.split())\n    L_5, R_5 = map(int, stdin.split())\n    L_6, R_6 = map(int, stdin.split())\n    L_7, R_7 = map(int, stdin.split())\n    L_8, R_8 = map(int, stdin.split())\n    L_9, R_9 = map(int, stdin.split())\n    L_10, R_10 = map(int, stdin.split())\n    L_11, R_11 = map(int, stdin.split())\n    L_12, R_12 = map(int, stdin.split())\n    L_13, R_13 = map(int, stdin.split())\n    L_14, R_14 = map(int, stdin.split())\n    L_15, R_15 = map(int, stdin.split())\n    L_16, R_16 = map(int, stdin.split())\n    L_17, R_17 = map(int, stdin.split())\n    L_18, R_18 = map(int, stdin.split())\n    L_19, R_19 = map(int, stdin.split())\n    L_20, R_20 = map(int, stdin.split())\n    L_21, R_21 = map(int, stdin.split())\n    L_22, R_22 = map(int, stdin.split())\n    L_23, R_23 = map(int, stdin.split())\n    L_24, R_24 = map(int, stdin.split())\n    L_25, R_25 = map(int, stdin.split())\n    L_26, R_26 = map(int, stdin.split())\n    L_27, R_27 = map(int, stdin.split())\n    L_28, R_28 = map(int, stdin.split())\n    L_29, R_29 = map(int, stdin.split())\n    L_30, R_30 = map(int, stdin.split())\n    L_31, R_31 = map(int, stdin.split())\n    L_32, R_32 = map(int, stdin.split())\n    L_33, R_33 = map(int, stdin.split())\n    L_34, R_34 = map(int, stdin.split())\n    L_35, R_35 = map(int, stdin.split())\n    L_36, R_36 = map(int, stdin.split())\n    L_37, R_37 = map(int, stdin.split())\n    L_38, R_38 = map(int, stdin.split())\n    L_39, R_39 = map(int, stdin.split())\n    L_40, R_40 = map(int, stdin.split())\n    L_41, R_41 = map(int, stdin.split())\n    L_42, R_42 = map(int, stdin.split())\n    L_43, R_43 = map(int, stdin.split())\n    L_44, R_44 = map(int, stdin.split())\n    L_45, R_45 = map(int, stdin.split())\n    L_46, R_46 = map(int, stdin.split())\n    L_47, R_47 = map(int, stdin.split())\n    L_48, R_48 = map(int, stdin.split())\n    L_49, R_49 = map(int, stdin.split())\n    L_50, R_50 = map(int, stdin.split())\n    L_51, R_51 = map(int, stdin.split())\n    L_52, R_52 = map(int, stdin.split())\n    L_53, R_53 = map(int, stdin.split())\n    L_54, R_54 = map(int, stdin.split())\n    L_55, R_55 = map(int, stdin.split())\n    L_56, R_56 = map(int, stdin.split())\n    L_57, R_57 = map(int, stdin.split())\n    L_58, R_58 = map(int, stdin.split())\n    L_59, R_59 = map(int, stdin.split())\n    L_60, R_60 = map(int, stdin.split())\n    L_61, R_61 = map(int, stdin.split())\n    L_62, R_62 = map(int, stdin.split())\n    L_63, R_63 = map(int, stdin.split())\n    L_64, R_64 = map(int, stdin.split())\n    L_65, R_65 = map(int, stdin.split())\n    L_66, R_66 = map(int, stdin.split())\n    L_67, R_67 = map(int, stdin.split())\n    L_68, R_68 = map(int, stdin.split())\n    L_69, R_69 = map(int, stdin.split())\n    L_70, R_70 = map(int, stdin.split())\n    L_71, R_71 = map(int, stdin.split())\n    L_72, R_72 = map(int, stdin.split())\n    L_73, R_73 = map(int, stdin.split())\n    L_74, R_74 = map(int, stdin.split())\n    L_75, R_75 = map(int, stdin.split())\n    L_76, R_76 = map(int, stdin.split())\n    L_77, R_77 = map(int, stdin.split())\n    L_78, R_78 = map(int, stdin.split())\n    L_79, R_79 = map(int, stdin.split())\n    L_80, R_80 = map(int, stdin.split())\n    L_81, R_81 = map(int, stdin.split())\n    L_82, R_82 = map(int, stdin.split())\n    L_83, R_83 = map(int, stdin.split())\n    L_84, R_84 = map(int, stdin.split())\n    L_85, R_85 = map(int, stdin.split())\n    L_86, R_86 = map(int, stdin.split())\n    L_87, R_87 = map(int, stdin.split())\n    L_88, R_88 = map(int, stdin.split())\n    L_89, R_89 = map(int, stdin.split())\n    L_90, R_90 = map(int, stdin.split())\n    L_91, R_91",
        "test": "",
        "num_ids": 1734,
        "indeed": false
    },
    {
        "number": 4155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    h = list(map(int, stdin.strip().split()))\n    l, r = 0, N-1\n    while l < r:\n        if h[l] < h[r]:\n            h[l], h[r] = h[r], h[l]\n            l += 1\n            r -= 1\n        else:\n            l += 1\n    return str(l)\n\n-----Sample Output-----\nSample Input:\n4\n1 2 2 1\n\nSample Output:\n2\n\n-----Constraints-----\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Input:\n4\n1 2 2 1\n\n-----Output:\n2\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n2\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\leq 100\n - 0 \\leq h_i \\leq 100\n - All values in input are integers.\n\n-----Sample Input:\n4\n1 2 2 1\n\nSample Output:\n1\n\n-----Constraints:\n - 1 \\leq N  \\le",
        "test": "",
        "num_ids": 1730,
        "indeed": false
    },
    {
        "number": 4156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n == 1:\n        return str(a[0])\n    if n == 2:\n        return str(a[0] + a[1])\n    if n == 3:\n        return str(a[0] + a[1] + a[2])\n    if n == 4:\n        return str(a[0] + a[1] + a[2] + a[3])\n    if n == 5:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4])\n    if n == 6:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5])\n    if n == 7:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6])\n    if n == 8:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7])\n    if n == 9:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8])\n    if n == 10:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9])\n    if n == 11:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10])\n    if n == 12:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11])\n    if n == 13:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12])\n    if n == 14:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13])\n    if n == 15:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14])\n    if n == 16:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15])\n    if n == 17:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16])\n    if n == 18:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17])\n    if n == 19:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17] + a[18])\n    if n == 20:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17] + a[18] + a[19])\n    if n == 21:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17] + a[18] + a[19] + a[20])\n    if n == 22:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] +",
        "test": "",
        "num_ids": 1480,
        "indeed": false
    },
    {
        "number": 4157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a = a[::-1]\n    for i in range(n):\n        a[i] = a[i] * 3\n    a = ''.join(map(str, a))\n    return a\n\nprint(solution(\"4 8 6 3 12 9\"))\nprint(solution(\"2\"))\nprint(solution(\"1000000000000000000 3000000000000000000\"))\n",
        "test": "",
        "num_ids": 121,
        "indeed": false
    },
    {
        "number": 4158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(int, stdin.strip().split()))\n    x.sort()\n    m = int(stdin.strip())\n    if m > n:\n        return '0'\n    if m == n:\n        return '0'\n    if m == 1:\n        return '0'\n    if m == 2:\n        return '0'\n    if m == 3:\n        return '0'\n    if m == 4:\n        return '0'\n    if m == 5:\n        return '0'\n    if m == 6:\n        return '0'\n    if m == 7:\n        return '0'\n    if m == 8:\n        return '0'\n    if m == 9:\n        return '0'\n    if m == 10:\n        return '0'\n    if m == 11:\n        return '0'\n    if m == 12:\n        return '0'\n    if m == 13:\n        return '0'\n    if m == 14:\n        return '0'\n    if m == 15:\n        return '0'\n    if m == 16:\n        return '0'\n    if m == 17:\n        return '0'\n    if m == 18:\n        return '0'\n    if m == 19:\n        return '0'\n    if m == 20:\n        return '0'\n    if m == 21:\n        return '0'\n    if m == 22:\n        return '0'\n    if m == 23:\n        return '0'\n    if m == 24:\n        return '0'\n    if m == 25:\n        return '0'\n    if m == 26:\n        return '0'\n    if m == 27:\n        return '0'\n    if m == 28:\n        return '0'\n    if m == 29:\n        return '0'\n    if m == 30:\n        return '0'\n    if m == 31:\n        return '0'\n    if m == 32:\n        return '0'\n    if m == 33:\n        return '0'\n    if m == 34:\n        return '0'\n    if m == 35:\n        return '0'\n    if m == 36:\n        return '0'\n    if m == 37:\n        return '0'\n    if m == 38:\n        return '0'\n    if m == 39:\n        return '0'\n    if m == 40:\n        return '0'\n    if m == 41:\n        return '0'\n    if m == 42:\n        return '0'\n    if m == 43:\n        return '0'\n    if m == 44:\n        return '0'\n    if m == 45:\n        return '0'\n    if m == 46:\n        return '0'\n    if m == 47:\n        return '0'\n    if m == 48:\n        return '0'\n    if m == 49:\n        return '0'\n    if m == 50:\n        return '0'\n    if m == 51:\n        return '0'\n    if m == 52:\n        return '0'\n    if m == 53:\n        return '0'\n    if m == 54:\n        return '0'\n    if m == 55:\n        return '0'\n    if m == 56:\n        return '0'\n    if m == 57:\n        return '0'\n    if m == 58:\n        return '0'\n    if m == 59:\n        return '0'\n    if m == 60:\n        return '0'\n    if m == 61:\n        return '0'\n    if m == 62:\n        return '0'\n    if m == 63:\n        return '0'\n    if m == 64:\n        return '0'\n    if m == 65:\n        return '0'\n    if m == 66:\n        return '0'\n    if m == 67:\n        return '0'\n    if m == 68:\n        return '0'\n    if m == 69:\n        return '0'\n    if m == 70:\n        return '0'\n    if m == 71:\n        return '0'\n    if m == 72:\n        return '0'\n    if m == 73:\n        return '0'\n    if m == 74:\n        return '0'\n    if m == 75:\n        return '0'\n    if m == 76:\n        return '0'\n    if m == 77:\n        return '0'\n    if m == 78:\n        return '0'\n    if m == 79:\n        return '0'\n    if m == 80:\n        return '0'\n    if m == 81:\n        return '0'\n    if m == 82:\n        return '0'\n    if m == 83:\n        return '0'\n    if m == 84:\n        return '0'\n    if m == 85:\n        return '0'\n    if m == 86:\n        return '0'\n    if m == 87:\n        return '0'\n    if m == 88:\n        return '0'\n    if m == 89:\n        return '0'\n    if m == 90:\n        return '0'\n    if m == 91:\n        return '0'\n    if m == 92:\n        return '0'\n    if m == 93:\n        return '0'\n    if m == 94:\n        return '0'\n    if m == 95:\n        return '0'\n    if m == 96:\n        return '0'\n    if m == 97:\n        return '0'\n    if m == 98:\n        return '0'\n    if m == 99:\n        return '0'\n    if m == 100:\n        return '0'\n    if m == 101:\n        return '0'\n    if m == 102:\n        return '0'\n    if m == 103:\n        return '0'\n    if m == 104:\n        return '0'\n    if m == 105:\n        return '0'\n    if m == 106:\n        return '0'\n    if m == 107:\n        return '0'\n    if m == 108:\n        return '0'\n    if m == 109:\n        return '0'\n    if m == 110:\n        return '0'\n    if m == 111:\n        return '0'\n    if m == 112:\n        return '0'\n    if m == 113:\n        return '0'\n    if m == 114:\n",
        "test": "",
        "num_ids": 1549,
        "indeed": false
    },
    {
        "number": 4159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if A > B:\n        A, B = B, A\n    if A == 0:\n        print(0)\n    else:\n        print(A - B)\n    return '0'\n\n-----Sample Input-----\n2 3 3\n\n-----Sample Output-----\n0\n\nAoki will do the following:\n - He has two cookies, so he eats one of them.\n - Now he has one cookie left, and he eats it.\n - Now he has no cookies left, but Aoki has three, so Aoki eats one of them.\nThus, in the end, Aoki will have 0 cookies, and He will have 2.\ndef",
        "test": "",
        "num_ids": 164,
        "indeed": false
    },
    {
        "number": 4160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X < 101:\n        return \"0\"\n    elif X < 102:\n        return \"1\"\n    elif X < 103:\n        return \"2\"\n    else:\n        return \"3\"\n",
        "test": "",
        "num_ids": 61,
        "indeed": false
    },
    {
        "number": 4161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, *a, *b, *c = map(int, stdin.split())\n    gcd = gcd_of_a_b_c(a, b, c)\n    print(gcd)\n    return str(gcd)\n\ndef",
        "test": "",
        "num_ids": 62,
        "indeed": false
    },
    {
        "number": 4162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n",
        "test": "",
        "num_ids": 1799,
        "indeed": false
    },
    {
        "number": 4163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    D = [int(i) for i in stdin.strip().split()]\n    D.sort()\n    for i in range(N):\n        if D[i] == D[i+1] or D[i] == D[i+2]:\n            return 'Yes'\n    return 'No'\n\n-----Sample Output-----\nYes\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 98,
        "indeed": false
    },
    {
        "number": 4164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    if r == 1:\n        return 1\n    else:\n        return r * (r + 1) // 2\n\ndef",
        "test": "",
        "num_ids": 39,
        "indeed": false
    },
    {
        "number": 4165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 3:\n        return \"No\"\n    if n == 3:\n        return \"Yes\"\n    if n == 4:\n        return \"Yes\"\n    if n == 5:\n        return \"Yes\"\n    if n == 6:\n        return \"Yes\"\n    if n == 7:\n        return \"Yes\"\n    if n == 8:\n        return \"Yes\"\n    if n == 9:\n        return \"Yes\"\n    if n == 10:\n        return \"Yes\"\n    if n == 11:\n        return \"Yes\"\n    if n == 12:\n        return \"Yes\"\n    if n == 13:\n        return \"Yes\"\n    if n == 14:\n        return \"Yes\"\n    if n == 15:\n        return \"Yes\"\n    if n == 16:\n        return \"Yes\"\n    if n == 17:\n        return \"Yes\"\n    if n == 18:\n        return \"Yes\"\n    if n == 19:\n        return \"Yes\"\n    if n == 20:\n        return \"Yes\"\n    if n == 21:\n        return \"Yes\"\n    if n == 22:\n        return \"Yes\"\n    if n == 23:\n        return \"Yes\"\n    if n == 24:\n        return \"Yes\"\n    if n == 25:\n        return \"Yes\"\n    if n == 26:\n        return \"Yes\"\n    if n == 27:\n        return \"Yes\"\n    if n == 28:\n        return \"Yes\"\n    if n == 29:\n        return \"Yes\"\n    if n == 30:\n        return \"Yes\"\n    if n == 31:\n        return \"Yes\"\n    if n == 32:\n        return \"Yes\"\n    if n == 33:\n        return \"Yes\"\n    if n == 34:\n        return \"Yes\"\n    if n == 35:\n        return \"Yes\"\n    if n == 36:\n        return \"Yes\"\n    if n == 37:\n        return \"Yes\"\n    if n == 38:\n        return \"Yes\"\n    if n == 39:\n        return \"Yes\"\n    if n == 40:\n        return \"Yes\"\n    if n == 41:\n        return \"Yes\"\n    if n == 42:\n        return \"Yes\"\n    if n == 43:\n        return \"Yes\"\n    if n == 44:\n        return \"Yes\"\n    if n == 45:\n        return \"Yes\"\n    if n == 46:\n        return \"Yes\"\n    if n == 47:\n        return \"Yes\"\n    if n == 48:\n        return \"Yes\"\n    if n == 49:\n        return \"Yes\"\n    if n == 50:\n        return \"Yes\"\n    if n == 51:\n        return \"Yes\"\n    if n == 52:\n        return \"Yes\"\n    if n == 53:\n        return \"Yes\"\n    if n == 54:\n        return \"Yes\"\n    if n == 55:\n        return \"Yes\"\n    if n == 56:\n        return \"Yes\"\n    if n == 57:\n        return \"Yes\"\n    if n == 58:\n        return \"Yes\"\n    if n == 59:\n        return \"Yes\"\n    if n == 60:\n        return \"Yes\"\n    if n == 61:\n        return \"Yes\"\n    if n == 62:\n        return \"Yes\"\n    if n == 63:\n        return \"Yes\"\n    if n == 64:\n        return \"Yes\"\n    if n == 65:\n        return \"Yes\"\n    if n == 66:\n        return \"Yes\"\n    if n == 67:\n        return \"Yes\"\n    if n == 68:\n        return \"Yes\"\n    if n == 69:\n        return \"Yes\"\n    if n == 70:\n        return \"Yes\"\n    if n == 71:\n        return \"Yes\"\n    if n == 72:\n        return \"Yes\"\n    if n == 73:\n        return \"Yes\"\n    if n == 74:\n        return \"Yes\"\n    if n == 75:\n        return \"Yes\"\n    if n == 76:\n        return \"Yes\"\n    if n == 77:\n        return \"Yes\"\n    if n == 78:\n        return \"Yes\"\n    if n == 79:\n        return \"Yes\"\n    if n == 80:\n        return \"Yes\"\n    if n == 81:\n        return \"Yes\"\n    if n == 82:\n        return \"Yes\"\n    if n == 83:\n        return \"Yes\"\n    if n == 84:\n        return \"Yes\"\n    if n == 85:\n        return \"Yes\"\n    if n == 86:\n        return \"Yes\"\n    if n == 87:\n        return \"Yes\"\n    if n == 88:\n        return \"Yes\"\n    if n == 89:\n        return \"Yes\"\n    if n == 90:\n        return \"Yes\"\n    if n == 91:\n        return \"Yes\"\n    if n == 92:\n        return \"Yes\"\n    if n == 93:\n        return \"Yes\"\n    if n == 94:\n        return \"Yes\"\n    if n == 95:\n        return \"Yes\"\n    if n == 96:\n        return \"Yes\"\n    if n == 97:\n        return \"Yes\"\n    if n == 98:\n        return \"Yes\"\n    if n == 99:\n        return \"Yes\"\n    if n == 100:\n        return \"Yes\"\n    if n == 101:\n        return \"Yes\"\n    if n == 102:\n        return \"Yes\"\n    if n == 103:\n        return \"Yes\"\n    if n == 104:\n        return \"Yes\"\n    if n == 105:\n        return \"Yes\"\n    if n == 106:\n        return \"Yes\"\n    if n == 107:\n        return \"Yes\"\n    if n == 108:\n        return \"Yes\"\n    if n == 109:\n        return \"Yes\"\n    if n == 110:\n        return \"Yes\"\n    if n == 111:\n        return \"Yes\"\n    if n == 112:\n        return \"Yes\"\n    if n == 113:\n        return \"Yes\"\n    if n == 114:\n        return \"Yes\"\n    if n == 115:\n        return \"Yes\"\n    if n == 116:\n        return \"Yes\"\n    if n == 117:\n        return \"Yes\"\n    if n == 118:\n        return \"Yes\"\n    if n == 119:\n        return \"Yes\"\n    if n == 120:\n        return \"Yes\"\n    if n == 121:\n        return \"Yes\"\n    if n == 122:\n        return \"Yes\"\n    if n == 123:\n        return \"Yes\"\n    if n == 124:\n        return \"Yes\"\n    if n == 125:\n        return \"Yes\"\n    if n == 126:\n        return \"Yes\"\n    if n == 127:\n        return \"Yes\"\n    if n == 128:\n        return \"Yes\"\n    if n == 129:\n        return \"Yes\"\n    if n == 130:\n        return \"Yes\"\n    if n == 131:\n        return \"Yes\"\n    if n == 132:\n        return \"Yes\"\n    if n == 133:\n        return \"Yes\"\n    if n == 134:\n        return \"Yes\"\n    if n == 135:\n        return \"Yes\"\n    if n == 136:\n        return \"Yes\"\n    if n == 137:\n        return \"Yes\"\n    if n == 138:\n        return \"Yes\"\n    if n",
        "test": "",
        "num_ids": 1796,
        "indeed": false
    },
    {
        "number": 4166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    s_1, c_1 = map(int, stdin.split())\n    s_2, c_2 = map(int, stdin.split())\n    s_3, c_3 = map(int, stdin.split())\n    s_1 = s_1 % 10**9\n    s_2 = s_2 % 10**9\n    s_3 = s_3 % 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 = s_2 // 10**9\n    s_3 = s_3 // 10**9\n    s_1 = s_1 // 10**9\n    s_2 =",
        "test": "",
        "num_ids": 1768,
        "indeed": false
    },
    {
        "number": 4167,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    triples = 0\n    for i in range(1,N+1):\n        for j in range(1,N+1):\n            for k in range(1,N+1):\n                if i+j+k == K:\n                    triples += 1\n    return str(triples)\n\n-----Sample Output-----\n3\n\n(1,1,1),(1,1,3),(1,3,1),(1,3,3),(2,2,2),(3,1,1),(3,1,3),(3,3,1) and (3,3,3) satisfy the condition.\n",
        "test": "",
        "num_ids": 164,
        "indeed": false
    },
    {
        "number": 4168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return '0'\n    if N == 1:\n        return '1'\n    if N == 2:\n        return '2'\n    if N == 3:\n        return '3'\n    if N == 4:\n        return '4'\n    if N == 5:\n        return '5'\n    if N == 6:\n        return '6'\n    if N == 7:\n        return '7'\n    if N == 8:\n        return '8'\n    if N == 9:\n        return '9'\n    if N == 10:\n        return '10'\n    if N == 11:\n        return '11'\n    if N == 12:\n        return '12'\n    if N == 13:\n        return '13'\n    if N == 14:\n        return '14'\n    if N == 15:\n        return '15'\n    if N == 16:\n        return '16'\n    if N == 17:\n        return '17'\n    if N == 18:\n        return '18'\n    if N == 19:\n        return '19'\n    if N == 20:\n        return '20'\n    if N == 21:\n        return '21'\n    if N == 22:\n        return '22'\n    if N == 23:\n        return '23'\n    if N == 24:\n        return '24'\n    if N == 25:\n        return '25'\n    if N == 26:\n        return '26'\n    if N == 27:\n        return '27'\n    if N == 28:\n        return '28'\n    if N == 29:\n        return '29'\n    if N == 30:\n        return '30'\n    if N == 31:\n        return '31'\n    if N == 32:\n        return '32'\n    if N == 33:\n        return '33'\n    if N == 34:\n        return '34'\n    if N == 35:\n        return '35'\n    if N == 36:\n        return '36'\n    if N == 37:\n        return '37'\n    if N == 38:\n        return '38'\n    if N == 39:\n        return '39'\n    if N == 40:\n        return '40'\n    if N == 41:\n        return '41'\n    if N == 42:\n        return '42'\n    if N == 43:\n        return '43'\n    if N == 44:\n        return '44'\n    if N == 45:\n        return '45'\n    if N == 46:\n        return '46'\n    if N == 47:\n        return '47'\n    if N == 48:\n        return '48'\n    if N == 49:\n        return '49'\n    if N == 50:\n        return '50'\n    if N == 51:\n        return '51'\n    if N == 52:\n        return '52'\n    if N == 53:\n        return '53'\n    if N == 54:\n        return '54'\n    if N == 55:\n        return '55'\n    if N == 56:\n        return '56'\n    if N == 57:\n        return '57'\n    if N == 58:\n        return '58'\n    if N == 59:\n        return '59'\n    if N == 60:\n        return '60'\n    if N == 61:\n        return '61'\n    if N == 62:\n        return '62'\n    if N == 63:\n        return '63'\n    if N == 64:\n        return '64'\n    if N == 65:\n        return '65'\n    if N == 66:\n        return '66'\n    if N == 67:\n        return '67'\n    if N == 68:\n        return '68'\n    if N == 69:\n        return '69'\n    if N == 70:\n        return '70'\n    if N == 71:\n        return '71'\n    if N == 72:\n        return '72'\n    if N == 73:\n        return '73'\n    if N == 74:\n        return '74'\n    if N == 75:\n        return '75'\n    if N == 76:\n        return '76'\n    if N == 77:\n        return '77'\n    if N == 78:\n        return '78'\n    if N == 79:\n        return '79'\n    if N == 80:\n        return '80'\n    if N == 81:\n        return '81'\n    if N == 82:\n        return '82'\n    if N == 83:\n        return '83'\n    if N == 84:\n        return '84'\n    if N == 85:\n        return '85'\n    if N == 86:\n        return '86'\n    if N == 87:\n        return '87'\n    if N == 88:\n        return '88'\n    if N == 89:\n        return '89'\n    if N == 90:\n        return '90'\n    if N == 91:\n        return '91'\n    if N == 92:\n        return '92'\n    if N == 93:\n        return '93'\n    if N == 94:\n        return '94'\n    if N == 95:\n        return '95'\n    if N == 96:\n        return '96'\n    if N == 97:\n        return '97'\n    if N == 98:\n        return '98'\n    if N == 99:\n        return '99'\n    if N == 100:\n        return '100'\n    if N == 101:\n        return '101'\n    if N == 102:\n        return '102'\n    if N == 103:\n        return '103'\n    if N == 104:\n        return '104'\n    if N == 105:\n        return '105'\n    if N == 106:\n        return '106'\n    if N == 107:\n        return '107'\n    if N == 108:\n        return '108'\n    if N == 109:\n        return '109'\n    if N == 110:\n        return '110'\n    if N == 111:\n        return '111'\n    if N == 112:\n        return '112'\n    if N == 113:\n        return '113'\n    if N == 114:\n        return '114'\n    if N == 115:\n        return '115'\n    if N == 116:\n        return '116'\n    if N == 117:\n        return '117'\n    if N == 118:\n        return '118'\n    if N == 119:\n        return '119'\n    if N == 120:\n        return '120'\n    if N == 121:\n        return '121'\n    if N == 122:\n        return '122'\n    if N == 123:\n        return '123'\n    if N == 124:\n        return '124'\n    if N == 125:\n        return '125'\n    if N == 126:\n        return '126'\n    if N == 127:\n        return '127'\n    if N == 128:\n        return '128'\n    if N == 129:\n        return '129'\n    if N == 130:\n        return '130'\n    if N == 131:\n        return '131'\n    if N == 132:\n        return '132'\n    if N == 133:\n        return '133'\n    if N == 134:\n        return '134'\n    ",
        "test": "",
        "num_ids": 1766,
        "indeed": false
    },
    {
        "number": 4169,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A_1, B_1 = map(int, stdin.split())\n    A_2, B_2 = map(int, stdin.split())\n    A_3, B_3 = map(int, stdin.split())\n    A_4, B_4 = map(int, stdin.split())\n    A_5, B_5 = map(int, stdin.split())\n    A_6, B_6 = map(int, stdin.split())\n    A_7, B_7 = map(int, stdin.split())\n    A_8, B_8 = map(int, stdin.split())\n    A_9, B_9 = map(int, stdin.split())\n    A_10, B_10 = map(int, stdin.split())\n    A_11, B_11 = map(int, stdin.split())\n    A_12, B_12 = map(int, stdin.split())\n    A_13, B_13 = map(int, stdin.split())\n    A_14, B_14 = map(int, stdin.split())\n    A_15, B_15 = map(int, stdin.split())\n    A_16, B_16 = map(int, stdin.split())\n    A_17, B_17 = map(int, stdin.split())\n    A_18, B_18 = map(int, stdin.split())\n    A_19, B_19 = map(int, stdin.split())\n    A_20, B_20 = map(int, stdin.split())\n    A_21, B_21 = map(int, stdin.split())\n    A_22, B_22 = map(int, stdin.split())\n    A_23, B_23 = map(int, stdin.split())\n    A_24, B_24 = map(int, stdin.split())\n    A_25, B_25 = map(int, stdin.split())\n    A_26, B_26 = map(int, stdin.split())\n    A_27, B_27 = map(int, stdin.split())\n    A_28, B_28 = map(int, stdin.split())\n    A_29, B_29 = map(int, stdin.split())\n    A_30, B_30 = map(int, stdin.split())\n    A_31, B_31 = map(int, stdin.split())\n    A_32, B_32 = map(int, stdin.split())\n    A_33, B_33 = map(int, stdin.split())\n    A_34, B_34 = map(int, stdin.split())\n    A_35, B_35 = map(int, stdin.split())\n    A_36, B_36 = map(int, stdin.split())\n    A_37, B_37 = map(int, stdin.split())\n    A_38, B_38 = map(int, stdin.split())\n    A_39, B_39 = map(int, stdin.split())\n    A_40, B_40 = map(int, stdin.split())\n    A_41, B_41 = map(int, stdin.split())\n    A_42, B_42 = map(int, stdin.split())\n    A_43, B_43 = map(int, stdin.split())\n    A_44, B_44 = map(int, stdin.split())\n    A_45, B_45 = map(int, stdin.split())\n    A_46, B_46 = map(int, stdin.split())\n    A_47, B_47 = map(int, stdin.split())\n    A_48, B_48 = map(int, stdin.split())\n    A_49, B_49 = map(int, stdin.split())\n    A_50, B_50 = map(int, stdin.split())\n    A_51, B_51 = map(int, stdin.split())\n    A_52, B_52 = map(int, stdin.split())\n    A_53, B_53 = map(int, stdin.split())\n    A_54, B_54 = map(int, stdin.split())\n    A_55, B_55 = map(int, stdin.split())\n    A_56, B_56 = map(int, stdin.split())\n    A_57, B_57 = map(int, stdin.split())\n    A_58, B_58 = map(int, stdin.split())\n    A_59, B_59 = map(int, stdin.split())\n    A_60, B_60 = map(int, stdin.split())\n    A_61, B_61 = map(int, stdin.split())\n    A_62, B_62 = map(int, stdin.split())\n    A_63, B_63 = map(int, stdin.split())\n    A_64, B_64 = map(int, stdin.split())\n    A_65, B_65 = map(int, stdin.split())\n    A_66, B_66 = map(int, stdin.split())\n    A_67, B_67 = map(int, stdin.split())\n    A_68, B_68 = map(int, stdin.split())\n    A_69, B_69 = map(int, stdin.split())\n    A_70, B_70 = map(int, stdin.split())\n    A_71, B_71 = map(int, stdin.split())\n    A_72, B_72 = map(int, stdin.split())\n    A_73, B_73 = map(int, stdin.split())\n    A_74, B_74 = map(int, stdin.split())\n    A_75, B_75 = map(int, stdin.split())\n    A_76, B_76 = map(int, stdin.split())\n    A_77, B_77 = map(int, stdin.split())\n    A_78, B_78 = map(int, stdin.split())\n    A_79, B_79 = map(int, stdin.split())\n    A_80, B_80 = map(int, stdin.split())\n    A_81, B_81 = map(int, stdin.split())\n    A_82, B_82 = map(int, stdin.split())\n    A_83, B_83 = map(int, stdin.split())\n    A_84, B_84 = map(int, stdin.split())\n    A_85, B_85 = map(int, stdin.split())\n    A_86, B_86 = map(int, stdin.split())\n    A_87, B_87 = map(int, stdin.split())\n    A_88, B_88 = map(int, stdin.split())\n    A_89, B_89 = map(int, stdin.split())\n    A_90, B_",
        "test": "",
        "num_ids": 1714,
        "indeed": false
    },
    {
        "number": 4170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, H = map(int, stdin.split())\n    H_list = list(map(int, stdin.split()))\n    H_list.sort()\n    answer = 0\n    for i in range(N):\n        answer += H_list[i]\n        if i == N - 1:\n            answer += 1\n    return str(answer)\n\n-----Sample Output-----\n5\n10 4 8 7 3\n\n-----Sample Explanation-----\nThe maximum number of times you can move is 2.\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 125,
        "indeed": false
    },
    {
        "number": 4171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a",
        "test": "",
        "num_ids": 1659,
        "indeed": false
    },
    {
        "number": 4172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    m = 0\n    for i in range(n):\n        if a[i] == a[i+1]:\n            m += 1\n    return str(m)\n\nprint(solution(input()))\n",
        "test": "",
        "num_ids": 88,
        "indeed": false
    },
    {
        "number": 4173,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n == 1:\n        print(a)\n        print(b)\n        return\n    if n == 2:\n        print(a)\n        print(b)\n        return\n    if n == 3:\n        print(a)\n        print(b)\n        return\n    if n == 4:\n        print(a)\n        print(b)\n        return\n    if n == 5:\n        print(a)\n        print(b)\n        return\n    if n == 6:\n        print(a)\n        print(b)\n        return\n    if n == 7:\n        print(a)\n        print(b)\n        return\n    if n == 8:\n        print(a)\n        print(b)\n        return\n    if n == 9:\n        print(a)\n        print(b)\n        return\n    if n == 10:\n        print(a)\n        print(b)\n        return\n    if n == 11:\n        print(a)\n        print(b)\n        return\n    if n == 12:\n        print(a)\n        print(b)\n        return\n    if n == 13:\n        print(a)\n        print(b)\n        return\n    if n == 14:\n        print(a)\n        print(b)\n        return\n    if n == 15:\n        print(a)\n        print(b)\n        return\n    if n == 16:\n        print(a)\n        print(b)\n        return\n    if n == 17:\n        print(a)\n        print(b)\n        return\n    if n == 18:\n        print(a)\n        print(b)\n        return\n    if n == 19:\n        print(a)\n        print(b)\n        return\n    if n == 20:\n        print(a)\n        print(b)\n        return\n    if n == 21:\n        print(a)\n        print(b)\n        return\n    if n == 22:\n        print(a)\n        print(b)\n        return\n    if n == 23:\n        print(a)\n        print(b)\n        return\n    if n == 24:\n        print(a)\n        print(b)\n        return\n    if n == 25:\n        print(a)\n        print(b)\n        return\n    if n == 26:\n        print(a)\n        print(b)\n        return\n    if n == 27:\n        print(a)\n        print(b)\n        return\n    if n == 28:\n        print(a)\n        print(b)\n        return\n    if n == 29:\n        print(a)\n        print(b)\n        return\n    if n == 30:\n        print(a)\n        print(b)\n        return\n    if n == 31:\n        print(a)\n        print(b)\n        return\n    if n == 32:\n        print(a)\n        print(b)\n        return\n    if n == 33:\n        print(a)\n        print(b)\n        return\n    if n == 34:\n        print(a)\n        print(b)\n        return\n    if n == 35:\n        print(a)\n        print(b)\n        return\n    if n == 36:\n        print(a)\n        print(b)\n        return\n    if n == 37:\n        print(a)\n        print(b)\n        return\n    if n == 38:\n        print(a)\n        print(b)\n        return\n    if n == 39:\n        print(a)\n        print(b)\n        return\n    if n == 40:\n        print(a)\n        print(b)\n        return\n    if n == 41:\n        print(a)\n        print(b)\n        return\n    if n == 42:\n        print(a)\n        print(b)\n        return\n    if n == 43:\n        print(a)\n        print(b)\n        return\n    if n == 44:\n        print(a)\n        print(b)\n        return\n    if n == 45:\n        print(a)\n        print(b)\n        return\n    if n == 46:\n        print(a)\n        print(b)\n        return\n    if n == 47:\n        print(a)\n        print(b)\n        return\n    if n == 48:\n        print(a)\n        print(b)\n        return\n    if n == 49:\n        print(a)\n        print(b)\n        return\n    if n == 50:\n        print(a)\n        print(b)\n        return\n    if n == 51:\n        print(a)\n        print(b)\n        return\n    if n == 52:\n        print(a)\n        print(b)\n        return\n    if n == 53:\n        print(a)\n        print(b)\n        return\n    if n == 54:\n        print(a)\n        print(b)\n        return\n    if n == 55:\n        print(a)\n        print(b)\n        return\n    if n == 56:\n        print(a)\n        print(b)\n        return\n    if n == 57:\n        print(a)\n        print(b)\n        return\n    if n == 58:\n        print(a)\n        print(b)\n        return\n    if n == 59:\n        print(a)\n        print(b)\n        return\n    if n == 60:\n        print(a)\n        print(b)\n        return\n    if n == 61:\n        print(a)\n        print(b)\n        return\n    if n == 62:\n        print(a)\n        print(b)\n        return\n    if n == 63:\n        print(a)\n        print(b)\n        return\n    if n == 64:\n        print(a)\n        print(b)\n        return\n    if n == 65:\n        print(a)\n        print(b)\n        return\n    if n == 66:\n        print(a)\n        print(b)\n        return\n    if n == 67:\n        print(a)\n        print(b)\n        return\n    if n == 68:\n        print(a)\n        print(b)\n        return\n    if n == 69:\n        print(a)\n        print(b)\n        return\n    if n == 70:\n        print(a)\n        print(",
        "test": "",
        "num_ids": 1552,
        "indeed": false
    },
    {
        "number": 4174,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L_1, L_2, L_3, L_4, L_5, L_6, L_7, L_8, L_9, L_10, L_11, L_12, X = map(int, stdin.split())\n    if N == 1:\n        return str(0)\n    if L_1 == L_2 == L_3 == L_4 == L_5 == L_6 == L_7 == L_8 == L_9 == L_10 == L_11 == L_12 == X:\n        return str(0)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(1)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(2)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(3)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(4)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(5)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(6)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(7)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(8)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(9)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(10)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(11)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(12)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(13)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(14)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(15)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(16)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(17)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(18)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(19)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(20)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(21)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(22)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(23)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(24)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(25)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(26)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7 < L_8 < L_9 < L_10 < L_11 < L_12 < X:\n        return str(27)\n    if L_1 < L_2 < L_3 < L_4 < L_5 < L_6 < L_7",
        "test": "",
        "num_ids": 1787,
        "indeed": false
    },
    {
        "number": 4175,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, W_1, W_2, W_N = map(int, stdin.split())\n    if N == 0:\n        return \"No\"\n    if W_1 == W_2:\n        return \"No\"\n    if W_1 == W_N:\n        return \"Yes\"\n    if W_2 == W_N:\n        return \"Yes\"\n    if W_1 < W_2:\n        return \"Yes\"\n    if W_1 > W_2:\n        return \"No\"\n    return \"No\"\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 135,
        "indeed": false
    },
    {
        "number": 4176,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return \"A\"\n    elif A % B == 0:\n        return \"B\"\n    else:\n        return \"A\"\n\nprint(solution(input()))\n",
        "test": "",
        "num_ids": 65,
        "indeed": false
    },
    {
        "number": 4177,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(lambda x: x.replace('x', 'x'), stdin))\n",
        "test": "",
        "num_ids": 25,
        "indeed": false
    },
    {
        "number": 4178,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    H = [int(i) for i in stdin.strip().split()]\n    H.sort()\n    for i in range(N):\n        if i == 0:\n            H[i] = H[i] - 1\n        else:\n            H[i] = H[i] - 1\n            if H[i] < 0:\n                H[i] = 0\n    if H[0] < 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n\nprint(solution(input()))\n",
        "test": "",
        "num_ids": 138,
        "indeed": false
    },
    {
        "number": 4179,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    A = [list(map(int, input().split())) for _ in range(N)]\n    B = [list(map(int, input().split())) for _ in range(M)]\n    C = [list(map(int, input().split())) for _ in range(C)]\n    for i in range(N):\n        for j in range(M):\n            for k in range(M):\n                if A[i][j] + A[i][k] + B[j][k] > 0:\n                    A[i][j] += B[j][k]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] -= C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] += C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] -= C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] += C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] -= C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] += C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] -= C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] += C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] -= C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] += C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] -= C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] += C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] -= C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] += C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] -= C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] += C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] -= C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] += C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] -= C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] += C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] -= C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] += C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] -= C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] += C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] -= C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] += C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] -= C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] += C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] -= C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] += C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] -= C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] += C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] -= C[i]\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                A[i][j] += C[i]\n    for i in range(",
        "test": "",
        "num_ids": 1623,
        "indeed": false
    },
    {
        "number": 4180,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1000:\n        return str(N)\n    else:\n        return str(N - 1000)\n\ndef",
        "test": "",
        "num_ids": 39,
        "indeed": false
    },
    {
        "number": 4181,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    A_i = A\n    B_i = B\n    A_i_monsters = 0\n    B_i_monsters = 0\n    for i in range(N):\n        if A_i < A:\n            A_i += B\n            A_i_monsters += 1\n        elif A_i > A:\n            A_i -= B\n            A_i_monsters += 1\n        if B_i < B:\n            B_i += A\n            B_i_monsters += 1\n        elif B_i > B:\n            B_i -= A\n            B_i_monsters += 1\n    return str(A_i_monsters * B_i_monsters)\n\n-----Sample Output-----\n2\n3 5 2\n4 5\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 1 \\leq A_i \\leq 10^9\n - 1 \\leq B_i \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_{N+1}\nB_1 B_2... B_N\n\n-----Output-----\nPrint the maximum total number of monsters the heroes can defeat.\n\n-----Sample Input-----\n2\n3 5 2\n4 5\n\n-----Sample Output-----\n9\n\nIf the heroes choose the monsters to defeat as follows, they can defeat nine monsters in total, which is the maximum result.\n - The first hero defeats two monsters attacking the first town and two monsters attacking the second town.\n - The second hero defeats three monsters attacking the second town and two monsters attacking the third town.\ndef",
        "test": "",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 4182,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n    x_1, x_2,..., x_N = map(int, stdin.split())\n    y_1, y_2,..., y_M = map(int, stdin.split())\n    if X < Y:\n        print('No War')\n    elif x_1 < x_2:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War')\n    elif x_1 < x_2 and x_2 < x_1:\n        print('No War",
        "test": "",
        "num_ids": 1584,
        "indeed": false
    },
    {
        "number": 4183,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T_1, T_2 = map(int, stdin.split())\n    return str(T_1 + T_2)\n\ndef",
        "test": "",
        "num_ids": 37,
        "indeed": false
    },
    {
        "number": 4184,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, W_1, W_2, W_3, W_4, W_5, W_6, W_7, W_8, W_9, W_10, W_11, W_12, W_13, W_14, W_15, W_16, W_17, W_18, W_19, W_20, W_21, W_22, W_23, W_24, W_25, W_26, W_27, W_28, W_29, W_30, W_31, W_32, W_33, W_34, W_35, W_36, W_37, W_38, W_39, W_40, W_41, W_42, W_43, W_44, W_45, W_46, W_47, W_48, W_49, W_50, W_51, W_52, W_53, W_54, W_55, W_56, W_57, W_58, W_59, W_60, W_61, W_62, W_63, W_64, W_65, W_66, W_67, W_68, W_69, W_70, W_71, W_72, W_73, W_74, W_75, W_76, W_77, W_78, W_79, W_80, W_81, W_82, W_83, W_84, W_85, W_86, W_87, W_88, W_89, W_90, W_91, W_92, W_93, W_94, W_95, W_96, W_97, W_98, W_99, W_100, W_101, W_102, W_103, W_104, W_105, W_106, W_107, W_108, W_109, W_110, W_111, W_112, W_113, W_114, W_115, W_116, W_117, W_118, W_119, W_120, W_121, W_122, W_123, W_124, W_125, W_126, W_127, W_128, W_129, W_130, W_131, W_132, W_133, W_134, W_135, W_136, W_137, W_138, W_139, W_140, W_141, W_142, W_143, W_144, W_145, W_146, W_147, W_148, W_149, W_150, W_151, W_152, W_153, W_154, W_155, W_156, W_157, W_158, W_159, W_160, W_161, W_162, W_163, W_164, W_165, W_166, W_167, W_168, W_169, W_170, W_171, W_172, W_173, W_174, W_175, W_176, W_177, W_178, W_179, W_180, W_181, W_182, W_183, W_184, W_185, W_186, W_187, W_188, W_189, W_190, W_191, W_192, W_193, W_194, W_195, W_196, W_197, W_198, W_199, W_200, W_201, W_202, W_203, W_204, W_205, W_206, W_207, W_208, W_209, W_210, W_211, W_212, W_213, W_214, W_215, W_216, W_217, W_218, W_219, W_220, W_221, W_222, W_223, W_224, W_225, W_226, W_227, W_228, W_229, W_230, W_231, W_232, W_233, W_234, W_235, W_236, W_237, W_238, W_239, W_240, W_241, W_242, W_243, W_244, W_245, W_246, W_247, W_248, W_249, W_250, W_251, W_252, W_253, W_254, W_255, W_256, W_257, W_258, W_259, W_260, W_261, W_262, W_263, W_264, W_265, W_266, W_267, W_268, W_269, W_270, W_271, W_272, W_273, W_274, W_275, W_276, W_277, W_278, W_279, W_280, W_281, W_282, W_283, W_284, W_285, W_286, W_287, W_288, W_289, W_290, W_291, W_292, W_293, W_294, W_295, W_296, W_297, W_298, W_299, W_300, W_301, W_302, W_303, W_304, W_305, W_306, W_307, W_308, W_309, W_310, W_311, W_312, W_313, W_314, W_315, W_316, W_317, W_318, W_319, W_320, W_321, W_322, W_323, W_324, W_325, W_326, W_327, W_328, W_329, W_330, W_331, W_332, W_333, W_334, W_335, W_336, W_337, W_338, W_339, W_340, W_341, W_342, W_343, W_344, W_345, W_346, W_347, W_348, W_349, W_350, W_351, W_352, W_353, W_354, W_355, W_356, W_357, W_358, W_359, W_360, W_361, W_362, W_363, W_364, W_365, W_366, W_367, W_368, W_369, W_370, W_371, W_372, W_373, W_374, W_375, W_376, W_377, W_378, W_379, W_380, W_381, W_382, W_383, W_384, W_385, W_386, W_387, W_388, W_389, W_390, W_391, W_392, W_393, W_394, W_395, W_396, W_397, W_398, W_399, W_400, W_401, W_402, W_403, W_404, W_405, W_406, W_407, W_408, W_409, W_410, W_411, W_412, W_413, W_414, W_415, W_416, W_417, W_418, W_419, W_420, W_421, W_422, W_423, W_424, W_425, W_426, W_427, W_428, W_429, W_430, W_431, W_432, W_433, W_434, W_435, W_436, W_437, W_438, W_439, W_440, W_441, W_442,",
        "test": "",
        "num_ids": 1772,
        "indeed": false
    },
    {
        "number": 4185,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n):\n        a[i + 1][0] = i + 1\n    for i in range(m):\n        a[0][i + 1] = i + 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            a[i][j] = a[i - 1][j] + a[i][j - 1]\n    return str(a[n][m])\n\nprint(solution(stdin))\n",
        "test": "",
        "num_ids": 157,
        "indeed": false
    },
    {
        "number": 4186,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i",
        "test": "",
        "num_ids": 1598,
        "indeed": false
    },
    {
        "number": 4187,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [0] * n\n    for i in range(n):\n        a[i] = int(stdin[i])\n    a.sort()\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        else:\n            a[i] = 0\n    return str(sum(a))\n\nprint(solution(\"1 0 1 0 1\"))\nprint(solution(\"6\"))\nprint(solution(\"7\"))\nprint(solution(\"3\"))\nprint(solution(\"0\"))\n",
        "test": "",
        "num_ids": 141,
        "indeed": false
    },
    {
        "number": 4188,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(int, stdin.split())))\n\nInput\n1\n\nOutput\n1\n\nInput\n7\n\nOutput\n0\ndef",
        "test": "",
        "num_ids": 39,
        "indeed": false
    },
    {
        "number": 4189,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    stdin = [int(i) for i in stdin]\n    stdin.sort()\n    stdin = [str(i) for i in stdin]\n    stdin = \"\".join(stdin)\n    stdin = stdin.split(\" \")\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\".\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\",\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\".\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    stdin = [i for i in stdin if i!= \"\"]\n    stdin = [i.split(\"-\") for i in stdin]\n    ",
        "test": "",
        "num_ids": 1873,
        "indeed": false
    },
    {
        "number": 4190,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    c = []\n    for i in range(n):\n        c.append(a[i] + b[i])\n    c.sort()\n    return''.join(map(str, c))\n",
        "test": "",
        "num_ids": 95,
        "indeed": false
    },
    {
        "number": 4191,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[0]) + int(stdin[1]))\n\n-----Constraints-----\n1 <= stdin.length <= 100\n0 <= stdin[i] <= 9\n\n-----Time Limit-----\n1 second\n\n-----Space Limit-----\n1 megabyte\n\n-----Tags-----\nNone\n\n-----Side Effects-----\nYou are not responsible for creating any brand new objects.\n\n-----Returns-----\nstring\n\n-----Example Inputs-----\n\nInput:\n0\n1\n1\n0\n\nOutput:\n0\ndef",
        "test": "",
        "num_ids": 125,
        "indeed": false
    },
    {
        "number": 4192,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    if D > 10000 or T > 10000 or S > 10000:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if T > S:\n        return \"No\"\n    if D > S:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if T > S:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        return \"No\"\n    if D > T:\n        ",
        "test": "",
        "num_ids": 1815,
        "indeed": false
    },
    {
        "number": 4193,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if a[i] == b[i]:\n            print('Yes')\n        else:\n            print('No')\n    return ''\n\n-----Sample Output-----\nNo\n\nWe will mark A_{1, 1}, A_{2, 1}, A_{2, 2}, A_{3, 3}, and complete the diagonal from the top-left to the bottom-right.\ndef",
        "test": "",
        "num_ids": 154,
        "indeed": false
    },
    {
        "number": 4194,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    answer = 0\n    for i in range(N):\n        answer += A[i]\n    return str(answer)\n",
        "test": "",
        "num_ids": 67,
        "indeed": false
    },
    {
        "number": 4195,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str(N)\n    if N == 0:\n        return str(0)\n    if N == 1:\n        return str(1)\n    if N == 2:\n        return str(2)\n    if N == 3:\n        return str(3)\n    if N == 4:\n        return str(4)\n    if N == 5:\n        return str(5)\n    if N == 6:\n        return str(6)\n    if N == 7:\n        return str(7)\n    if N == 8:\n        return str(8)\n    if N == 9:\n        return str(9)\n    if N == 10:\n        return str(10)\n    if N == 11:\n        return str(11)\n    if N == 12:\n        return str(12)\n    if N == 13:\n        return str(13)\n    if N == 14:\n        return str(14)\n    if N == 15:\n        return str(15)\n    if N == 16:\n        return str(16)\n    if N == 17:\n        return str(17)\n    if N == 18:\n        return str(18)\n    if N == 19:\n        return str(19)\n    if N == 20:\n        return str(20)\n    if N == 21:\n        return str(21)\n    if N == 22:\n        return str(22)\n    if N == 23:\n        return str(23)\n    if N == 24:\n        return str(24)\n    if N == 25:\n        return str(25)\n    if N == 26:\n        return str(26)\n    if N == 27:\n        return str(27)\n    if N == 28:\n        return str(28)\n    if N == 29:\n        return str(29)\n    if N == 30:\n        return str(30)\n    if N == 31:\n        return str(31)\n    if N == 32:\n        return str(32)\n    if N == 33:\n        return str(33)\n    if N == 34:\n        return str(34)\n    if N == 35:\n        return str(35)\n    if N == 36:\n        return str(36)\n    if N == 37:\n        return str(37)\n    if N == 38:\n        return str(38)\n    if N == 39:\n        return str(39)\n    if N == 40:\n        return str(40)\n    if N == 41:\n        return str(41)\n    if N == 42:\n        return str(42)\n    if N == 43:\n        return str(43)\n    if N == 44:\n        return str(44)\n    if N == 45:\n        return str(45)\n    if N == 46:\n        return str(46)\n    if N == 47:\n        return str(47)\n    if N == 48:\n        return str(48)\n    if N == 49:\n        return str(49)\n    if N == 50:\n        return str(50)\n    if N == 51:\n        return str(51)\n    if N == 52:\n        return str(52)\n    if N == 53:\n        return str(53)\n    if N == 54:\n        return str(54)\n    if N == 55:\n        return str(55)\n    if N == 56:\n        return str(56)\n    if N == 57:\n        return str(57)\n    if N == 58:\n        return str(58)\n    if N == 59:\n        return str(59)\n    if N == 60:\n        return str(60)\n    if N == 61:\n        return str(61)\n    if N == 62:\n        return str(62)\n    if N == 63:\n        return str(63)\n    if N == 64:\n        return str(64)\n    if N == 65:\n        return str(65)\n    if N == 66:\n        return str(66)\n    if N == 67:\n        return str(67)\n    if N == 68:\n        return str(68)\n    if N == 69:\n        return str(69)\n    if N == 70:\n        return str(70)\n    if N == 71:\n        return str(71)\n    if N == 72:\n        return str(72)\n    if N == 73:\n        return str(73)\n    if N == 74:\n        return str(74)\n    if N == 75:\n        return str(75)\n    if N == 76:\n        return str(76)\n    if N == 77:\n        return str(77)\n    if N == 78:\n        return str(78)\n    if N == 79:\n        return str(79)\n    if N == 80:\n        return str(80)\n    if N == 81:\n        return str(81)\n    if N == 82:\n        return str(82)\n    if N == 83:\n        return str(83)\n    if N == 84:\n        return str(84)\n    if N == 85:\n        return str(85)\n    if N == 86:\n        return str(86)\n    if N == 87:\n        return str(87)\n    if N == 88:\n        return str(88)\n    if N == 89:\n        return str(89)\n    if N == 90:\n        return str(90)\n    if N == 91:\n        return str(91)\n    if N == 92:\n        return str(92)\n    if N == 93:\n        return str(93)\n    if N == 94:\n        return str(94)\n    if N == 95:\n        return str(95)\n    if N == 96:\n        return str(96)\n    if N == 97:\n        return str(97)\n    if N == 98:\n        return str(98)\n    if N == 99:\n        return str(99)\n    if N == 100:\n        return str(100)\n    if N == 101:\n        return str(101)\n    if N == 102:\n        return str(102)\n    if N == 103:\n        return str(103)\n    if N == 104:\n        return str(104)\n    if N == 105:\n        return str(105)\n    if N == 106:\n        return str(106)\n    if N == 107:\n        return str(107)\n    if N == 108:\n        return str(108)\n    if N == 109:\n        return str(109)\n    if N == 110:\n        return str(110)\n    if N == 111:\n        return str(111)\n    if N == 112:\n        return str(112)\n    if N == 113:\n        return str(113)\n    if N == 114:\n        return str(114)\n    if N == 115:\n        return str(115)\n    if N == 116:\n        return str(116)\n    if N == 117:\n        return str(117)\n    if N == 118:\n        return str(118)\n    if N == 119:\n        return str(119)\n    if N == 120:\n        return str(120)\n    if N == 121:\n        return str(121)\n    if N == 122:\n        return str(122)\n    if N == 123:\n        return str(123)\n    if N == 124:\n        return str(124)\n    if N == 125:\n        return str(125)\n    if N == 126",
        "test": "",
        "num_ids": 1799,
        "indeed": false
    },
    {
        "number": 4196,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    for i in range(n):\n        if a[i] % 2 == 0:\n            a[i] = a[i] // 2\n        else:\n            a[i] = a[i] // 3\n    return str(max(a))\n\n-----Sample Output-----\n3\n\n-----Sample Input-----\n3\n
        "test": "",
        "num_ids": 1799,
        "indeed": false
    },
    {
        "number": 4197,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [0] * n\n    for i in range(n):\n        a[i] = int(stdin[i])\n    a.sort()\n    for i in range(n):\n        if a[i] == a[i-1]:\n            a[i] = a[i-1] + 1\n        else:\n            a[i] = 1\n    return''.join(map(str, a))\n",
        "test": "",
        "num_ids": 110,
        "indeed": false
    },
    {
        "number": 4198,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if A > 10**9 or B > 10**9 or X > 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0\n    if A == 10**9:\n        return B\n    if B == 10**9:\n        return A\n    if X == 10**18:\n        return 0",
        "test": "",
        "num_ids": 1719,
        "indeed": false
    },
    {
        "number": 4199,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h_i = map(int, stdin.split())\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i = sorted(h_i)\n    h_i =",
        "test": "",
        "num_ids": 1824,
        "indeed": false
    },
    {
        "number": 4200,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    if M > len(A):\n        return 'No'\n    if M == 1:\n        return 'Yes'\n    if M == len(A):\n        return 'No'\n    if M % 4 == 0:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))\n",
        "test": "",
        "num_ids": 116,
        "indeed": false
    },
    {
        "number": 4201,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    c = [c for c in map(str, range(1, H + 1))]\n    for _ in range(K):\n        r, c = map(int, stdin.split())\n        c[r - 1], c[c - 1] = '#', '#'\n    return ''.join(c)\n",
        "test": "",
        "num_ids": 94,
        "indeed": false
    },
    {
        "number": 4202,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    if L > R:\n        return str(L % R)\n    else:\n        return str(L % R) + str(R % L)\n\ndef",
        "test": "",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4203,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    if len(s) == 1:\n        return 'WA'\n    if len(s) == 2:\n        return 'AC'\n    if len(s) == 3:\n        return 'AC'\n    if len(s) == 4:\n        return 'AC'\n    if len(s) == 5:\n        return 'AC'\n    if len(s) == 6:\n        return 'AC'\n    if len(s) == 7:\n        return 'AC'\n    if len(s) == 8:\n        return 'AC'\n    if len(s) == 9:\n        return 'AC'\n    if len(s) == 10:\n        return 'AC'\n    if len(s) == 11:\n        return 'AC'\n    if len(s) == 12:\n        return 'AC'\n    if len(s) == 13:\n        return 'AC'\n    if len(s) == 14:\n        return 'AC'\n    if len(s) == 15:\n        return 'AC'\n    if len(s) == 16:\n        return 'AC'\n    if len(s) == 17:\n        return 'AC'\n    if len(s) == 18:\n        return 'AC'\n    if len(s) == 19:\n        return 'AC'\n    if len(s) == 20:\n        return 'AC'\n    if len(s) == 21:\n        return 'AC'\n    if len(s) == 22:\n        return 'AC'\n    if len(s) == 23:\n        return 'AC'\n    if len(s) == 24:\n        return 'AC'\n    if len(s) == 25:\n        return 'AC'\n    if len(s) == 26:\n        return 'AC'\n    if len(s) == 27:\n        return 'AC'\n    if len(s) == 28:\n        return 'AC'\n    if len(s) == 29:\n        return 'AC'\n    if len(s) == 30:\n        return 'AC'\n    if len(s) == 31:\n        return 'AC'\n    if len(s) == 32:\n        return 'AC'\n    if len(s) == 33:\n        return 'AC'\n    if len(s) == 34:\n        return 'AC'\n    if len(s) == 35:\n        return 'AC'\n    if len(s) == 36:\n        return 'AC'\n    if len(s) == 37:\n        return 'AC'\n    if len(s) == 38:\n        return 'AC'\n    if len(s) == 39:\n        return 'AC'\n    if len(s) == 40:\n        return 'AC'\n    if len(s) == 41:\n        return 'AC'\n    if len(s) == 42:\n        return 'AC'\n    if len(s) == 43:\n        return 'AC'\n    if len(s) == 44:\n        return 'AC'\n    if len(s) == 45:\n        return 'AC'\n    if len(s) == 46:\n        return 'AC'\n    if len(s) == 47:\n        return 'AC'\n    if len(s) == 48:\n        return 'AC'\n    if len(s) == 49:\n        return 'AC'\n    if len(s) == 50:\n        return 'AC'\n    if len(s) == 51:\n        return 'AC'\n    if len(s) == 52:\n        return 'AC'\n    if len(s) == 53:\n        return 'AC'\n    if len(s) == 54:\n        return 'AC'\n    if len(s) == 55:\n        return 'AC'\n    if len(s) == 56:\n        return 'AC'\n    if len(s) == 57:\n        return 'AC'\n    if len(s) == 58:\n        return 'AC'\n    if len(s) == 59:\n        return 'AC'\n    if len(s) == 60:\n        return 'AC'\n    if len(s) == 61:\n        return 'AC'\n    if len(s) == 62:\n        return 'AC'\n    if len(s) == 63:\n        return 'AC'\n    if len(s) == 64:\n        return 'AC'\n    if len(s) == 65:\n        return 'AC'\n    if len(s) == 66:\n        return 'AC'\n    if len(s) == 67:\n        return 'AC'\n    if len(s) == 68:\n        return 'AC'\n    if len(s) == 69:\n        return 'AC'\n    if len(s) == 70:\n        return 'AC'\n    if len(s) == 71:\n        return 'AC'\n    if len(s) == 72:\n        return 'AC'\n    if len(s) == 73:\n        return 'AC'\n    if len(s) == 74:\n        return 'AC'\n    if len(s) == 75:\n        return 'AC'\n    if len(s) == 76:\n        return 'AC'\n    if len(s) == 77:\n        return 'AC'\n    if len(s) == 78:\n        return 'AC'\n    if len(s) == 79:\n        return 'AC'\n    if len(s) == 80:\n        return 'AC'\n    if len(s) == 81:\n        return 'AC'\n    if len(s) == 82:\n        return 'AC'\n    if len(s) == 83:\n        return 'AC'\n    if len(s) == 84:\n        return 'AC'\n    if len(s) == 85:\n        return 'AC'\n    if len(s) == 86:\n        return 'AC'\n    if len(s) == 87:\n        return 'AC'\n    if len(s) == 88:\n        return 'AC'\n    if len(s) == 89:\n        return 'AC'\n    if len(s) == 90:\n        return 'AC'\n    if len(s) == 91:\n        return 'AC'\n    if len(s) == 92:\n        return 'AC'\n    if len(s) == 93:\n        return 'AC'\n    if len(s) == 94:\n        return 'AC'\n    if len(s) == 95:\n        return 'AC'\n    if len(s) == 96:\n        return 'AC'\n    if len(s) == 97:\n        return 'AC'\n    if len(s) == 98:\n        return 'AC'\n    if len(s) == 99:\n        return 'AC'\n    if len(s) == 100:\n        return 'AC'\n    if len(s) == 101:\n        return 'AC'\n    if len(s) == 102:\n        return 'AC'\n    if len(s) == 103:\n        return 'AC'\n    if len(s) == 104:\n        return 'AC'\n    if len(s) == 105:\n        return 'AC'\n    if len(s) == 106:\n        return 'AC'\n    if len(s) == 107:\n        return 'AC'\n    if len(s) == 108:\n        return 'AC'\n    if len(s) == 109:\n        return 'AC'\n    if len(s) == 110:\n        return 'AC'\n    if len(s) == 111:\n        return 'AC'\n    if len(s) == 112:\n        return 'AC'\n    if len(s) == 113:",
        "test": "",
        "num_ids": 1811,
        "indeed": false
    },
    {
        "number": 4204,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split()[-1])\n    S = stdin.split()[:-1]\n    for i in range(len(S)):\n        S[i] = int(S[i])\n    return S[K-1]\n",
        "test": "",
        "num_ids": 63,
        "indeed": false
    },
    {
        "number": 4205,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    p = list(map(int, stdin.split()))\n    p.sort()\n    for i in range(len(p)):\n        if p[i]!= i+1:\n            p[i], p[i+1] = p[i+1], p[i]\n    return \"YES\" if sorted(p) == p else \"NO\"\n",
        "test": "",
        "num_ids": 88,
        "indeed": false
    },
    {
        "number": 4206,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 3 == 0:\n        return str(n//3)\n    else:\n        return str(n//3) + \"|\" + str(n%3)\n\ndef",
        "test": "",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4207,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = []\n    for i in range(n):\n        c.append(a[i] + b[i])\n    c.sort()\n    return str(c.count(0))\n\nprint(solution(\"3 2 3 4 5\"))\nprint(solution(\"3 2 -1\"))\nprint(solution(\"3 2 -1 -6 -12 6\"))\nprint(solution(\"3 2 -1 -6 -12 6 -1\"))\nprint(solution(\"3 2 -1 -6 -12 6 -1 -1\"))\nprint(solution(\"3 2 -1 -6 -12 6 -1 -1 -1\"))\n",
        "test": "",
        "num_ids": 188,
        "indeed": false
    },
    {
        "number": 4208,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = list(map(str, stdin.strip().split()))\n    r = list(map(str, stdin.strip().split()))\n    l.sort()\n    r.sort()\n    l_i = 0\n    r_i = 0\n    k = 0\n    for i in range(n):\n        if l[i] == r[i]:\n            k += 1\n        else:\n            if l[i] == '?':\n                l_i = i\n            else:\n                r_i = i\n    if k == n:\n        return '0'\n    else:\n        return str(k) +'' + str(l[l_i]) +'' + str(r[r_i])\n",
        "test": "",
        "num_ids": 184,
        "indeed": false
    },
    {
        "number": 4209,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    k = 0\n    for i in range(n):\n        if a[i]!= a[i+1]:\n            k += 1\n    return str(k)\n",
        "test": "",
        "num_ids": 73,
        "indeed": false
    },
    {
        "number": 4210,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if a[i] % k == 0 and a[j] % k == 0:\n                count += 1\n    return str(count)\n\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19 3 3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"3 7 19",
        "test": "",
        "num_ids": 1567,
        "indeed": false
    },
    {
        "number": 4211,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    max_sum = 0\n    for i in range(n):\n        max_sum += A[i]\n    return str(max_sum)\n\ndef",
        "test": "",
        "num_ids": 71,
        "indeed": false
    },
    {
        "number": 4212,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q, Q_ = map(int, stdin.split())\n    A = [int(i) for i in stdin.split()]\n    A.sort()\n    A_ = [0] * N\n    for i in range(N):\n        A_[i] = A[i]\n    for i in range(N):\n        for j in range(i + 1, N):\n            if A[i] - A[j] == Q:\n                A_[j] = A[i]\n    A_ = sorted(A_)\n    for i in range(N):\n        if A_[i] == M:\n            return str(A_[i])\n    return str(0)\n\ndef",
        "test": "",
        "num_ids": 174,
        "indeed": false
    },
    {
        "number": 4213,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = list(map(int, stdin.strip().split()))\n    A.sort()\n    A.append(A[-1])\n    A.sort()\n    A.pop()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort()\n    A.pop()\n    A.sort",
        "test": "",
        "num_ids": 1869,
        "indeed": false
    },
    {
        "number": 4214,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    x_1, y_1 = map(int, stdin.strip().split())\n    x_N, y_N = map(int, stdin.strip().split())\n    x_1, y_1 = x_1, y_1\n    x_N, y_N = x_N, y_N\n    x_1, y_1 = x_1 - 1, y_1 - 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 + 1, y_1 + 1\n    x_N, y_N = x_N + 1, y_N + 1\n    x_1, y_1 = x_1 - 1, y_1 + 1\n    x_N, y_N = x_N - 1, y_N + 1\n    x_1, y_1 = x_1 + 1, y_1 - 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 + 1, y_1 - 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 - 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 + 1, y_1 + 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 + 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 + 1, y_1 + 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 - 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 + 1, y_1 - 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 + 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 + 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 - 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 + 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 - 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 + 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 - 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 + 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 - 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 + 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 - 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 + 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 - 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 + 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 - 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 + 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 - 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 + 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 - 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 + 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 - 1\n    x_N, y_N = x_N - 1, y_N - 1\n    x_1, y_1 = x_1 - 1, y_1 + 1\n    x",
        "test": "",
        "num_ids": 1455,
        "indeed": false
    },
    {
        "number": 4215,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        A, B = B, A\n    if A % B == 0:\n        return str(A // B)\n    else:\n        return str(A // B + 1)\n",
        "test": "",
        "num_ids": 65,
        "indeed": false
    },
    {
        "number": 4216,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    if n == m:\n        return str(max(a) * max(b))\n    if n > m:\n        return str(max(a) * max(b))\n    if n < m:\n        return str(max(a) * max(b))\n    return str(max(a) * max(b))\n\ndef",
        "test": "",
        "num_ids": 139,
        "indeed": false
    },
    {
        "number": 4217,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    K = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    A.sort()\n    answer = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if A[i] == A[j] and A[i] == A[k]:\n                    answer += 1\n    return str(answer)\n\n-----Sample Input-----\n3 4\n2 1 3\n3 1 2 3\n2 3 2\n\n-----Sample Output-----\n1\n\nAs only the third food is liked by all the three people, 1 should be printed.\ndef",
        "test": "",
        "num_ids": 179,
        "indeed": false
    },
    {
        "number": 4218,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 4:\n        return \"0\"\n    odd = 0\n    for i in range(1, N + 1):\n        if i % 2 == 0:\n            odd += 1\n    return str(odd / 4)\n\ndef",
        "test": "",
        "num_ids": 66,
        "indeed": false
    },
    {
        "number": 4219,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A_1 = list(map(int, stdin.strip().split()))\n    A_2 = list(map(int, stdin.strip().split()))\n    A_N = list(map(int, stdin.strip().split()))\n    A_1.sort()\n    A_2.sort()\n    A_N.sort()\n    A_1 = set(A_1)\n    A_2 = set(A_2)\n    A_N = set(A_N)\n    A_1 = A_1.difference(A_2)\n    A_2 = A_2.difference(A_1)\n    A_N = A_N.difference(A_1)\n    A_1 = A_1.union(A_2)\n    A_2 = A_2.union(A_1)\n    A_N = A_N.union(A_1)\n    A_1 = list(A_1)\n    A_2 = list(A_2)\n    A_N = list(A_N)\n    A_1.sort()\n    A_2.sort()\n    A_N.sort()\n    A_1 = set(A_1)\n    A_2 = set(A_2)\n    A_N = set(A_N)\n    A_1 = A_1.difference(A_2)\n    A_2 = A_2.difference(A_1)\n    A_N = A_N.difference(A_1)\n    A_1 = A_1.union(A_2)\n    A_2 = A_2.union(A_1)\n    A_N = A_N.union(A_1)\n    A_1 = list(A_1)\n    A_2 = list(A_2)\n    A_N = list(A_N)\n    A_1.sort()\n    A_2.sort()\n    A_N.sort()\n    A_1 = set(A_1)\n    A_2 = set(A_2)\n    A_N = set(A_N)\n    A_1 = A_1.difference(A_2)\n    A_2 = A_2.difference(A_1)\n    A_N = A_N.difference(A_1)\n    A_1 = A_1.union(A_2)\n    A_2 = A_2.union(A_1)\n    A_N = A_N.union(A_1)\n    A_1 = list(A_1)\n    A_2 = list(A_2)\n    A_N = list(A_N)\n    A_1.sort()\n    A_2.sort()\n    A_N.sort()\n    A_1 = set(A_1)\n    A_2 = set(A_2)\n    A_N = set(A_N)\n    A_1 = A_1.difference(A_2)\n    A_2 = A_2.difference(A_1)\n    A_N = A_N.difference(A_1)\n    A_1 = A_1.union(A_2)\n    A_2 = A_2.union(A_1)\n    A_N = A_N.union(A_1)\n    A_1 = list(A_1)\n    A_2 = list(A_2)\n    A_N = list(A_N)\n    A_1.sort()\n    A_2.sort()\n    A_N.sort()\n    A_1 = set(A_1)\n    A_2 = set(A_2)\n    A_N = set(A_N)\n    A_1 = A_1.difference(A_2)\n    A_2 = A_2.difference(A_1)\n    A_N = A_N.difference(A_1)\n    A_1 = A_1.union(A_2)\n    A_2 = A_2.union(A_1)\n    A_N = A_N.union(A_1)\n    A_1 = list(A_1)\n    A_2 = list(A_2)\n    A_N = list(A_N)\n    A_1.sort()\n    A_2.sort()\n    A_N.sort()\n    A_1 = set(A_1)\n    A_2 = set(A_2)\n    A_N = set(A_N)\n    A_1 = A_1.difference(A_2)\n    A_2 = A_2.difference(A_1)\n    A_N = A_N.difference(A_1)\n    A_1 = A_1.union(A_2)\n    A_2 = A_2.union(A_1)\n    A_N = A_N.union(A_1)\n    A_1 = list(A_1)\n    A_2 = list(A_2)\n    A_N = list(A_N)\n    A_1.sort()\n    A_2.sort()\n    A_N.sort()\n    A_1 = set(A_1)\n    A_2 = set(A_2)\n    A_N = set(A_N)\n    A_1 = A_1.difference(A_2)\n    A_2 = A_2.difference(A_1)\n    A_N = A_N.difference(A_1)\n    A_1 = A_1.union(A_2)\n    A_2 = A_2.union(A_1)\n    A_N = A_N.union(A_1)\n    A_1 = list(A_1)\n    A_2 = list(A_2)\n    A_N = list(A_N)\n    A_1.sort()\n    A_2.sort()\n    A_N.sort()\n    A_1 = set(A_1)\n    A_2 = set(A_2)\n    A_N = set(A_N)\n    A_1 = A_1.difference(A_2)\n    A_2 = A_2.difference(A_1)\n    A_N = A_N.difference(A_1)\n    A_1 = A_1.union(A_2)\n    A_2 = A_2.union(A_1)\n    A_N = A_N.",
        "test": "",
        "num_ids": 1589,
        "indeed": false
    },
    {
        "number": 4220,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('niko', 'nikoand')\n\ndef",
        "test": "",
        "num_ids": 19,
        "indeed": false
    },
    {
        "number": 4221,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    if s[0][-1] =='s':\n        s[0] = s[0][:-1] + 'es'\n    else:\n        s[0] = s[0][:-1] + 'ies'\n    return''.join(s)\n\n-----Sample Output-----\napple\napple ends with e, so its plural form is apples.\ndef",
        "test": "",
        "num_ids": 94,
        "indeed": false
    },
    {
        "number": 4222,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    d_1, A_1 = map(int, stdin.split())\n    d_2, A_2 = map(int, stdin.split())\n    d_3, A_3 = map(int, stdin.split())\n    d_1 = d_1 - 1\n    d_2 = d_2 - 1\n    d_3 = d_3 - 1\n    A_1 = A_1 - 1\n    A_2 = A_2 - 1\n    A_3 = A_3 - 1\n    if A_1 < A_2:\n        A_1, A_2 = A_2, A_1\n    if A_1 < A_3:\n        A_1, A_3 = A_3, A_1\n    if A_2 < A_3:\n        A_2, A_3 = A_3, A_2\n    if A_1 < d_1:\n        A_1, d_1 = d_1, A_1\n    if A_2 < d_2:\n        A_2, d_2 = d_2, A_2\n    if A_3 < d_3:\n        A_3, d_3 = d_3, A_3\n    if A_1 < d_1:\n        A_1, d_1 = d_1, A_1\n    if A_2 < d_2:\n        A_2, d_2 = d_2, A_2\n    if A_3 < d_3:\n        A_3, d_3 = d_3, A_3\n    if A_1 < A_2:\n        A_1, A_2 = A_2, A_1\n    if A_2 < A_3:\n        A_2, A_3 = A_3, A_2\n    if A_3 < A_1:\n        A_3, A_1 = A_1, A_3\n    if A_1 < A_2:\n        A_1, A_2 = A_2, A_1\n    if A_2 < A_3:\n        A_2, A_3 = A_3, A_2\n    if A_3 < A_1:\n        A_3, A_1 = A_1, A_3\n    if A_1 < d_1:\n        A_1, d_1 = d_1, A_1\n    if A_2 < d_2:\n        A_2, d_2 = d_2, A_2\n    if A_3 < d_3:\n        A_3, d_3 = d_3, A_3\n    if A_1 < d_1:\n        A_1, d_1 = d_1, A_1\n    if A_2 < d_2:\n        A_2, d_2 = d_2, A_2\n    if A_3 < d_3:\n        A_3, d_3 = d_3, A_3\n    if A_1 < A_2:\n        A_1, A_2 = A_2, A_1\n    if A_2 < A_3:\n        A_2, A_3 = A_3, A_2\n    if A_3 < A_1:\n        A_3, A_1 = A_1, A_3\n    if A_1 < d_1:\n        A_1, d_1 = d_1, A_1\n    if A_2 < d_2:\n        A_2, d_2 = d_2, A_2\n    if A_3 < d_3:\n        A_3, d_3 = d_3, A_3\n    if A_1 < d_1:\n        A_1, d_1 = d_1, A_1\n    if A_2 < d_2:\n        A_2, d_2 = d_2, A_2\n    if A_3 < d_3:\n        A_3, d_3 = d_3, A_3\n    if A_1 < A_2:\n        A_1, A_2 = A_2, A_1\n    if A_2 < A_3:\n        A_2, A_3 = A_3, A_2\n    if A_3 < A_1:\n        A_3, A_1 = A_1, A_3\n    if A_1 < d_1:\n        A_1, d_1 = d_1, A_1\n    if A_2 < d_2:\n        A_2, d_2 = d_2, A_2\n    if A_3 < d_3:\n        A_3, d_3 = d_3, A_3\n    if A_1 < d_1:\n        A_1, d_1 = d_1, A_1\n    if A_2 < d_2:\n        A_2, d_2 = d_2, A_2\n    if A_3 < d_3:\n        A_3, d_3 = d_3, A_3\n    if A_1 < A_2:\n        A_1, A_2 = A_2, A_1\n    if A_2 < A_3:\n        A_2, A_3 = A_3, A_2\n    if A_3 < A_1:\n        A_3, A_1 = A_1, A_3\n    if A_1 < d_1:\n        A_1, d_1 = d_1, A_1\n    if A_2 < d_2:\n        A_2, d_2 = d_2, A_2\n    if A_3 < d_3:\n        A_3, d_3 = d_3, A_3\n    if A_1 < d_1:\n        A_1, d_1 = d_1, A_1\n    if A_2 < d_2:\n        A_2, d_2 = d_2, A_2\n    if A_3 < d_3:\n        A_3, d_3 = d_3, A_3\n    if A_1 < A_2:\n        A_1, A_2 = A_2, A_1\n    if A_2 < A_3:\n        A_2, A_3 = A_3, A_2\n    if A_3 < A_1:\n        A_3, A_1 = A_1, A_3\n    if A_1 < d_1:\n        A_1, d_1 = d_1, A_1\n    if A_2 < d_2:\n        A_2, d_2 = d_2, A_2\n    if A_3 < d_3:\n        A_3, d_3 = d_3, A_3\n    if A_1 < d_1:\n        A_1, d_1 = d_1, A_1\n    if A_",
        "test": "",
        "num_ids": 1683,
        "indeed": false
    },
    {
        "number": 4223,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = stdin.strip()\n    adjacent_slimes = []\n    for i in range(N):\n        adjacent_slimes.append(S[i:i+N])\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 0]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 1]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 0]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 1]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 0]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 1]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 0]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 1]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 0]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 1]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 0]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 1]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 0]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 1]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 0]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 1]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 0]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 1]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 0]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 1]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 0]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent_slimes = list(adjacent_slimes)\n    adjacent_slimes.sort()\n    adjacent_slimes = [adjacent_slimes[i] for i in range(len(adjacent_slimes)) if i % 2 == 1]\n    adjacent_slimes = set(adjacent_slimes)\n    adjacent",
        "test": "",
        "num_ids": 1814,
        "indeed": false
    },
    {
        "number": 4224,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a_1 = int(stdin[0])\n    a_2 = int(stdin[1])\n    a_3 = int(stdin[2])\n    a_N = a_1 * a_2 * a_3\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int(a_N)\n    a_N = str(a_N)\n    a_N = a_N[::-1]\n    a_N = int",
        "test": "",
        "num_ids": 1618,
        "indeed": false
    },
    {
        "number": 4225,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    A = A - 1\n    B = B - 1\n    C = C - 1\n    K = K - 1\n    if A + B + C + K > 2 * 10 ** 9:\n        return str(2 * 10 ** 9)\n    if A + B + C + K == 0:\n        return str(0)\n    if A + B + C + K == 1:\n        return str(1)\n    if A + B + C + K == 2:\n        return str(2)\n    if A + B + C + K == 3:\n        return str(3)\n    if A + B + C + K == 4:\n        return str(4)\n    if A + B + C + K == 5:\n        return str(5)\n    if A + B + C + K == 6:\n        return str(6)\n    if A + B + C + K == 7:\n        return str(7)\n    if A + B + C + K == 8:\n        return str(8)\n    if A + B + C + K == 9:\n        return str(9)\n    if A + B + C + K == 10:\n        return str(10)\n    if A + B + C + K == 11:\n        return str(11)\n    if A + B + C + K == 12:\n        return str(12)\n    if A + B + C + K == 13:\n        return str(13)\n    if A + B + C + K == 14:\n        return str(14)\n    if A + B + C + K == 15:\n        return str(15)\n    if A + B + C + K == 16:\n        return str(16)\n    if A + B + C + K == 17:\n        return str(17)\n    if A + B + C + K == 18:\n        return str(18)\n    if A + B + C + K == 19:\n        return str(19)\n    if A + B + C + K == 20:\n        return str(20)\n    if A + B + C + K == 21:\n        return str(21)\n    if A + B + C + K == 22:\n        return str(22)\n    if A + B + C + K == 23:\n        return str(23)\n    if A + B + C + K == 24:\n        return str(24)\n    if A + B + C + K == 25:\n        return str(25)\n    if A + B + C + K == 26:\n        return str(26)\n    if A + B + C + K == 27:\n        return str(27)\n    if A + B + C + K == 28:\n        return str(28)\n    if A + B + C + K == 29:\n        return str(29)\n    if A + B + C + K == 30:\n        return str(30)\n    if A + B + C + K == 31:\n        return str(31)\n    if A + B + C + K == 32:\n        return str(32)\n    if A + B + C + K == 33:\n        return str(33)\n    if A + B + C + K == 34:\n        return str(34)\n    if A + B + C + K == 35:\n        return str(35)\n    if A + B + C + K == 36:\n        return str(36)\n    if A + B + C + K == 37:\n        return str(37)\n    if A + B + C + K == 38:\n        return str(38)\n    if A + B + C + K == 39:\n        return str(39)\n    if A + B + C + K == 40:\n        return str(40)\n    if A + B + C + K == 41:\n        return str(41)\n    if A + B + C + K == 42:\n        return str(42)\n    if A + B + C + K == 43:\n        return str(43)\n    if A + B + C + K == 44:\n        return str(44)\n    if A + B + C + K == 45:\n        return str(45)\n    if A + B + C + K == 46:\n        return str(46)\n    if A + B + C + K == 47:\n        return str(47)\n    if A + B + C + K == 48:\n        return str(48)\n    if A + B + C + K == 49:\n        return str(49)\n    if A + B + C + K == 50:\n        return str(50)\n    if A + B + C + K == 51:\n        return str(51)\n    if A + B + C + K == 52:\n        return str(52)\n    if A + B + C + K == 53:\n        return str(53)\n    if A + B + C + K == 54:\n        return str(54)\n    if A + B + C + K == 55:\n        return str(55)\n    if A + B + C + K == 56:\n        return str(56)\n    if A + B + C + K == 57:\n        return str(57)\n    if A + B + C + K == 58:\n        return str(58)\n    if A + B + C + K == 59:\n        return str(59)\n    if A + B + C + K == 60:\n        return str(60)\n    if A + B + C + K == 61:\n        return str(61)\n    if A + B + C + K == 62:\n        return str(62)\n    if A + B + C + K == 63:\n        return str(63)\n    if A + B + C + K == 64:\n        return str(64)\n    if A + B + C + K == 65:\n        return str(65)\n    if A + B + C + K == 66:\n        return str(66)\n    if A + B + C + K == 67:\n        return str(67)\n    if A + B + C + K == 68:\n        return str(68)\n    if A + B + C + K == 69:\n        return str(69)\n    if A + B + C + K == 70:\n        return str(70)\n    if A + B + C + K == 71:\n        return str(71)\n    if A + B + C + K == 72:\n        return str(72)\n    if A + B + C + K == 73:\n        return str(73)\n    if A + B + C + K == 74:\n        return str(74)\n    if A + B + C + K == 75:\n        return str(75)\n    if A + B + C + K == 76:\n        return str(76)\n    if A + B + C + K == 77:\n        return str(77)\n    if A + B + C + K == 78:\n        return str(78)\n    if A + B + C + K == 79:\n        return str(79)\n    if A + B + C + K == 80:\n        return str(80)\n    if A + B + C + K == 81:\n        return str(81)\n    if A + B + C + K == 82:\n        return str(82)\n    if A + B + C + K == 83:\n        return str(83)\n    if A + B + C + K == 84:\n        return str(84)\n    if A + B + C + K == 85:\n        return str(85)\n    if A + B + C + K == 86:\n        return str(86)\n    if A + B + C +",
        "test": "",
        "num_ids": 1824,
        "indeed": false
    },
    {
        "number": 4226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if X == Y:\n        return \"Yes\"\n    elif X > Y:\n        return \"No\"\n    else:\n        return \"No\"\n",
        "test": "",
        "num_ids": 53,
        "indeed": false
    },
    {
        "number": 4227,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    graph = [[] for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = [False for _ in range(N)]\n    paths = []\n    for i in range(N):\n        if not visited[i]:\n            paths.append(dfs(i, visited))\n    return '\\n'.join(paths)\n\ndef",
        "test": "",
        "num_ids": 138,
        "indeed": false
    },
    {
        "number": 4228,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = list(map(int, stdin.split()))\n    apples.sort()\n    answer = 0\n    for i in range(N-1):\n        answer += min(apples[i+1]-apples[i], L-apples[i])\n    return str(answer)\n",
        "test": "",
        "num_ids": 88,
        "indeed": false
    },
    {
        "number": 4229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a
        "test": "",
        "num_ids": 1726,
        "indeed": false
    },
    {
        "number": 4230,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split())\n    p_1, p_2 = map(int, stdin.split())\n    p_1 = sorted(list(set(map(int, p_1))))\n    p_2 = sorted(list(set(map(int, p_2))))\n    p_1 = [i for i in p_1 if i <= X]\n    p_2 = [i for i in p_2 if i <= X]\n    if len(p_1) == 0:\n        return str(min(p_2))\n    elif len(p_2) == 0:\n        return str(min(p_1))\n    else:\n        return str(min(p_1) + min(p_2))\n",
        "test": "",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 4231,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    h, w = H, W\n    if h == 1 or w == 1:\n        return 1\n    if h == w:\n        return 1\n    if h > w:\n        h, w = w, h\n    if w > h:\n        w, h = h, w\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w == h:\n        return 1\n    if w > h:\n        w, h = h, w\n    if h > w:\n        h, w = w, h\n    if w == h:\n        return 1\n    if w ==",
        "test": "",
        "num_ids": 1826,
        "indeed": false
    },
    {
        "number": 4232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if k < len(a):\n        return \"-1\"\n    if k == len(a):\n        return str(a[k-1])\n    for i in range(k):\n        if a[i] < a[i+1]:\n            return str(a[i])\n    return str(a[k-1])\n\nprint(solution(\"7 4\"))\nprint(solution(\"7 2\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5 1 10 3 20\"))\nprint(solution(\"3 7 5",
        "test": "",
        "num_ids": 1627,
        "indeed": false
    },
    {
        "number": 4233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for _ in range(n):\n        grid.append(stdin.split())\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '",
        "test": "",
        "num_ids": 1330,
        "indeed": false
    },
    {
        "number": 4234,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    if len(s) % 2 == 0:\n        return solution(s[:len(s)//2]) + solution(s[len(s)//2:])\n    else:\n        return solution(s[:len(s)//2])\n\n-----Constraints-----\n1 <= n <= 10^5\ns[i] is a lowercase Latin letter.\n\nTime Limit: 1 sec\n\nExample 1:\n\nInput\n\n4\ngood\n\nOutput\n\n0\ngood\n\nExplanation\n\nThe string is good, so we delete the minimum number of characters from it.\n\nExample 2:\n\nInput\n\n4\naabc\n\nOutput\n\n2\nab\n\nExplanation\n\nThe string is bad, because the characters are different.\n\nExample 3:\n\nInput\n\n4\naabc\n\nOutput\n\n3\ndef",
        "test": "",
        "num_ids": 219,
        "indeed": false
    },
    {
        "number": 4235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    def dfs(u, visited):\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                dfs(v, visited)\n    \n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            dfs(i, visited)\n    \n    answer = \"\"\n    for i in range(n):\n        if not visited[i]:\n            answer += \"0\"\n        else:\n            answer += \"1\"\n    return answer\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n\n-----Time Limit: 1 sec\n\n-----Space Limit: 1 GB\n\n-----Input Format\n\nThe first line contains two integers $n$ and $m$ ($2 \\le n \\le 2 \\cdot 10^5$, $n - 1 \\le m \\le 2 \\cdot 10^5$) \u2014 the number of vertices and edges, respectively.\n\nThe following $m$ lines contain edges: edge $i$ is given as a pair of vertices $u_i$, $v_i$ ($1 \\le u_i, v_i \\le n$, $u_i \\ne v_i$). There are no multiple edges in the given graph, i. e. for each pair ($u_i, v_i$) there are no other pairs ($u_i, v_i$) and ($v_i, u_i$) in the list of edges. It is also guaranteed that the given graph is connected (there is a path between any pair of vertex in the given graph).\n\nOutput\n\nPrint \"YES\" if it is possible to direct edges of the given graph in such a way that the obtained directed graph does not contain paths of length at least two, print \"NO\" in the first line.\n\nOtherwise print \"YES\" in the first line, and then print any suitable orientation of edges: a binary string (the string consisting only of '0' and '1') of length $m$. The $i$-th element of this string should be '0' if the $i$-th edge of the graph should be directed from $u_i$ to $v_i$, and '1' otherwise. Edges are numbered in the order they are given in the input.\n\nConstraints\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Output Format\n\nPrint \"YES\" if it is possible to direct edges of the given graph in such a way that the obtained directed graph does not contain paths of length at least two, print \"NO\" in the first line.\n\nOtherwise print \"YES\" in the first line, and then print any suitable orientation of edges: a binary string (the string consisting only of '0' and '1') of length $m$. The $i$-th element of this string should be '0' if the $i$-th edge of the graph should be directed from $u_i$ to $v_i$, and '1' otherwise. Edges are numbered in the order they are given in the input.\n\n-----Example\nInput\n6 5\n1 5\n2 1\n1 4\n3 1\n6 1\n\nOutput\nYES\n10100\n\nExplanation\n\nThe picture corresponding to the first example: [Image]\n\nAnd one of possible answers: $\\text{of}$\ndef",
        "test": "",
        "num_ids": 882,
        "indeed": false
    },
    {
        "number": 4236,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l_i, r_i = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        segments.append((l_i + i, r_i + i))\n    for i in range(m):\n        segments.append((l_i + i, r_i + i))\n    for i in range(n):\n        if i == 0:\n            if segments[i][0] < segments[i + 1][0]:\n                segments[i][0], segments[i + 1][0] = segments[i + 1][0], segments[i][0]\n            if segments[i][1] < segments[i + 1][1]:\n                segments[i][1], segments[i + 1][1] = segments[i + 1][1], segments[i][1]\n        elif i == n - 1:\n            if segments[i][0] > segments[i - 1][0]:\n                segments[i][0], segments[i - 1][0] = segments[i - 1][0], segments[i][0]\n            if segments[i][1] > segments[i - 1][1]:\n                segments[i][1], segments[i - 1][1] = segments[i - 1][1], segments[i][1]\n        else:\n            if segments[i][0] > segments[i - 1][0] and segments[i][1] > segments[i - 1][1]:\n                segments[i][0], segments[i - 1][0] = segments[i - 1][0], segments[i][0]\n                segments[i][1], segments[i - 1][1] = segments[i - 1][1], segments[i][1]\n    for i in range(n):\n        if i == 0:\n            if segments[i][0] < segments[i + 1][0]:\n                segments[i][0], segments[i + 1][0] = segments[i + 1][0], segments[i][0]\n            if segments[i][1] < segments[i + 1][1]:\n                segments[i][1], segments[i + 1][1] = segments[i + 1][1], segments[i][1]\n        elif i == n - 1:\n            if segments[i][0] > segments[i - 1][0]:\n                segments[i][0], segments[i - 1][0] = segments[i - 1][0], segments[i][0]\n            if segments[i][1] > segments[i - 1][1]:\n                segments[i][1], segments[i - 1][1] = segments[i - 1][1], segments[i][1]\n        else:\n            if segments[i][0] > segments[i - 1][0] and segments[i][1] > segments[i - 1][1]:\n                segments[i][0], segments[i - 1][0] = segments[i - 1][0], segments[i][0]\n                segments[i][1], segments[i - 1][1] = segments[i - 1][1], segments[i][1]\n    for i in range(n):\n        if i == 0:\n            if segments[i][0] < segments[i + 1][0]:\n                segments[i][0], segments[i + 1][0] = segments[i + 1][0], segments[i][0]\n            if segments[i][1] < segments[i + 1][1]:\n                segments[i][1], segments[i + 1][1] = segments[i + 1][1], segments[i][1]\n        elif i == n - 1:\n            if segments[i][0] > segments[i - 1][0]:\n                segments[i][0], segments[i - 1][0] = segments[i - 1][0], segments[i][0]\n            if segments[i][1] > segments[i - 1][1]:\n                segments[i][1], segments[i - 1][1] = segments[i - 1][1], segments[i][1]\n        else:\n            if segments[i][0] > segments[i - 1][0] and segments[i][1] > segments[i - 1][1]:\n                segments[i][0], segments[i - 1][0] = segments[i - 1][0], segments[i][0]\n                segments[i][1], segments[i - 1][1] = segments[i - 1][1], segments[i][1]\n    for i in range(n):\n        if i == 0:\n            if segments[i][0] < segments[i + 1][0]:\n                segments[i][0], segments[i + 1][0] = segments[i + 1][0], segments[i][0]\n            if segments[i][1] < segments[i + 1][1]:\n                segments[i][1], segments[i + 1][1] = segments[i + 1][1], segments[i][1]\n        elif i == n - 1:\n            if segments[i][0] > segments[i - 1][0]:\n                segments[i][0], segments[i - 1][0] = segments[i - 1][0], segments[i][0]\n            if segments[i][1] > segments[i - 1][1]:\n                segments[i][1], segments[i - 1][1] = segments[i - 1][1], segments[i][1]\n        else:\n            if segments[i][0] > segments[i - 1][0] and segments[i][1] > segments[i - 1][1]:\n                segments[i][0], segments[i - 1][0] = segments[i - 1][0], segments[i][0]\n                segments[i][1], segments[i - 1][1] = segments[i - 1][1], segments[i][1]\n    for i in range(n):\n        if i == 0:\n            if segments[i][0] < segments[i + 1][0]:\n                segments[i][0], segments[i + 1][0] = segments[i + 1][0], segments[i][0]\n            if segments[i][1] < segments[i + 1][1]:\n                segments[i][1], segments[i + 1][1] = segments",
        "test": "",
        "num_ids": 1511,
        "indeed": false
    },
    {
        "number": 4237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 10 == 0:\n        return str(n // 10)\n    else:\n        return str(n % 10)\n\ndef",
        "test": "",
        "num_ids": 45,
        "indeed": false
    },
    {
        "number": 4238,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef",
        "test": "",
        "num_ids": 37,
        "indeed": false
    },
    {
        "number": 4239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N < 1:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return \"2\"\n    if N == 3:\n        return \"3\"\n    if N == 4:\n        return \"4\"\n    if N == 5:\n        return \"5\"\n    if N == 6:\n        return \"6\"\n    if N == 7:\n        return \"7\"\n    if N == 8:\n        return \"8\"\n    if N == 9:\n        return \"9\"\n    if N == 10:\n        return \"10\"\n    if N == 11:\n        return \"11\"\n    if N == 12:\n        return \"12\"\n    if N == 13:\n        return \"13\"\n    if N == 14:\n        return \"14\"\n    if N == 15:\n        return \"15\"\n    if N == 16:\n        return \"16\"\n    if N == 17:\n        return \"17\"\n    if N == 18:\n        return \"18\"\n    if N == 19:\n        return \"19\"\n    if N == 20:\n        return \"20\"\n    if N == 21:\n        return \"21\"\n    if N == 22:\n        return \"22\"\n    if N == 23:\n        return \"23\"\n    if N == 24:\n        return \"24\"\n    if N == 25:\n        return \"25\"\n    if N == 26:\n        return \"26\"\n    if N == 27:\n        return \"27\"\n    if N == 28:\n        return \"28\"\n    if N == 29:\n        return \"29\"\n    if N == 30:\n        return \"30\"\n    if N == 31:\n        return \"31\"\n    if N == 32:\n        return \"32\"\n    if N == 33:\n        return \"33\"\n    if N == 34:\n        return \"34\"\n    if N == 35:\n        return \"35\"\n    if N == 36:\n        return \"36\"\n    if N == 37:\n        return \"37\"\n    if N == 38:\n        return \"38\"\n    if N == 39:\n        return \"39\"\n    if N == 40:\n        return \"40\"\n    if N == 41:\n        return \"41\"\n    if N == 42:\n        return \"42\"\n    if N == 43:\n        return \"43\"\n    if N == 44:\n        return \"44\"\n    if N == 45:\n        return \"45\"\n    if N == 46:\n        return \"46\"\n    if N == 47:\n        return \"47\"\n    if N == 48:\n        return \"48\"\n    if N == 49:\n        return \"49\"\n    if N == 50:\n        return \"50\"\n    if N == 51:\n        return \"51\"\n    if N == 52:\n        return \"52\"\n    if N == 53:\n        return \"53\"\n    if N == 54:\n        return \"54\"\n    if N == 55:\n        return \"55\"\n    if N == 56:\n        return \"56\"\n    if N == 57:\n        return \"57\"\n    if N == 58:\n        return \"58\"\n    if N == 59:\n        return \"59\"\n    if N == 60:\n        return \"60\"\n    if N == 61:\n        return \"61\"\n    if N == 62:\n        return \"62\"\n    if N == 63:\n        return \"63\"\n    if N == 64:\n        return \"64\"\n    if N == 65:\n        return \"65\"\n    if N == 66:\n        return \"66\"\n    if N == 67:\n        return \"67\"\n    if N == 68:\n        return \"68\"\n    if N == 69:\n        return \"69\"\n    if N == 70:\n        return \"70\"\n    if N == 71:\n        return \"71\"\n    if N == 72:\n        return \"72\"\n    if N == 73:\n        return \"73\"\n    if N == 74:\n        return \"74\"\n    if N == 75:\n        return \"75\"\n    if N == 76:\n        return \"76\"\n    if N == 77:\n        return \"77\"\n    if N == 78:\n        return \"78\"\n    if N == 79:\n        return \"79\"\n    if N == 80:\n        return \"80\"\n    if N == 81:\n        return \"81\"\n    if N == 82:\n        return \"82\"\n    if N == 83:\n        return \"83\"\n    if N == 84:\n        return \"84\"\n    if N == 85:\n        return \"85\"\n    if N == 86:\n        return \"86\"\n    if N == 87:\n        return \"87\"\n    if N == 88:\n        return \"88\"\n    if N == 89:\n        return \"89\"\n    if N == 90:\n        return \"90\"\n    if N == 91:\n        return \"91\"\n    if N == 92:\n        return \"92\"\n    if N == 93:\n        return \"93\"\n    if N == 94:\n        return \"94\"\n    if N == 95:\n        return \"95\"\n    if N == 96:\n        return \"96\"\n    if N == 97:\n        return \"97\"\n    if N == 98:\n        return \"98\"\n    if N == 99:\n        return \"99\"\n    if N == 100:\n        return \"100\"\n    if N == 101:\n        return \"101\"\n    if N == 102:\n        return \"102\"\n    if N == 103:\n        return \"103\"\n    if N == 104:\n        return \"104\"\n    if N == 105:\n        return \"105\"\n    if N == 106:\n        return \"106\"\n    if N == 107:\n        return \"107\"\n    if N == 108:\n        return \"108\"\n    if N == 109:\n        return \"109\"\n    if N == 110:\n        return \"110\"\n    if N == 111:\n        return \"111\"\n    if N == 112:\n        return \"112\"\n    if N == 113:\n        return \"113\"\n    if N == 114:\n        return \"114\"\n    if N == 115:\n        return \"115\"\n    if N == 116:\n        return \"116\"\n    if N == 117:\n        return \"117\"\n    if N == 118:\n        return \"118\"\n    if N == 119:\n        return \"119\"\n    if N == 120:\n        return \"120\"\n    if N == 121:\n        return \"121\"\n    if N == 122:\n        return \"122\"\n    if N == 123:\n        return \"123\"\n    if N == 124:\n        return \"124\"\n    if N == 125:\n        return \"125\"\n    if N == 126:\n        return \"126\"\n    if N == 127:\n        return \"127\"\n    if N == 128:\n        return \"128\"\n    if N == 129:\n        return \"129\"\n    if N == 130:\n        return \"130\"\n    if N == 131:\n        return \"131\"\n    if N == 132:\n        return \"132\"\n    if N == 133:\n        return \"133\"\n    if N == 134:\n        return \"134\"\n    if N == 135:\n        return \"135\"\n    if N == 136:\n        return \"136\"\n    if N == 137:",
        "test": "",
        "num_ids": 1799,
        "indeed": false
    },
    {
        "number": 4240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = len(s)\n    if n == 1:\n        return 'Yes'\n    if n == 2:\n        return 'No'\n    if n == 3:\n        return 'Yes'\n    if n == 4:\n        return 'No'\n    if n == 5:\n        return 'Yes'\n    if n == 6:\n        return 'No'\n    if n == 7:\n        return 'Yes'\n    if n == 8:\n        return 'No'\n    if n == 9:\n        return 'Yes'\n    if n == 10:\n        return 'No'\n    if n == 11:\n        return 'Yes'\n    if n == 12:\n        return 'No'\n    if n == 13:\n        return 'Yes'\n    if n == 14:\n        return 'No'\n    if n == 15:\n        return 'Yes'\n    if n == 16:\n        return 'No'\n    if n == 17:\n        return 'Yes'\n    if n == 18:\n        return 'No'\n    if n == 19:\n        return 'Yes'\n    if n == 20:\n        return 'No'\n    if n == 21:\n        return 'Yes'\n    if n == 22:\n        return 'No'\n    if n == 23:\n        return 'Yes'\n    if n == 24:\n        return 'No'\n    if n == 25:\n        return 'Yes'\n    if n == 26:\n        return 'No'\n    if n == 27:\n        return 'Yes'\n    if n == 28:\n        return 'No'\n    if n == 29:\n        return 'Yes'\n    if n == 30:\n        return 'No'\n    if n == 31:\n        return 'Yes'\n    if n == 32:\n        return 'No'\n    if n == 33:\n        return 'Yes'\n    if n == 34:\n        return 'No'\n    if n == 35:\n        return 'Yes'\n    if n == 36:\n        return 'No'\n    if n == 37:\n        return 'Yes'\n    if n == 38:\n        return 'No'\n    if n == 39:\n        return 'Yes'\n    if n == 40:\n        return 'No'\n    if n == 41:\n        return 'Yes'\n    if n == 42:\n        return 'No'\n    if n == 43:\n        return 'Yes'\n    if n == 44:\n        return 'No'\n    if n == 45:\n        return 'Yes'\n    if n == 46:\n        return 'No'\n    if n == 47:\n        return 'Yes'\n    if n == 48:\n        return 'No'\n    if n == 49:\n        return 'Yes'\n    if n == 50:\n        return 'No'\n    if n == 51:\n        return 'Yes'\n    if n == 52:\n        return 'No'\n    if n == 53:\n        return 'Yes'\n    if n == 54:\n        return 'No'\n    if n == 55:\n        return 'Yes'\n    if n == 56:\n        return 'No'\n    if n == 57:\n        return 'Yes'\n    if n == 58:\n        return 'No'\n    if n == 59:\n        return 'Yes'\n    if n == 60:\n        return 'No'\n    if n == 61:\n        return 'Yes'\n    if n == 62:\n        return 'No'\n    if n == 63:\n        return 'Yes'\n    if n == 64:\n        return 'No'\n    if n == 65:\n        return 'Yes'\n    if n == 66:\n        return 'No'\n    if n == 67:\n        return 'Yes'\n    if n == 68:\n        return 'No'\n    if n == 69:\n        return 'Yes'\n    if n == 70:\n        return 'No'\n    if n == 71:\n        return 'Yes'\n    if n == 72:\n        return 'No'\n    if n == 73:\n        return 'Yes'\n    if n == 74:\n        return 'No'\n    if n == 75:\n        return 'Yes'\n    if n == 76:\n        return 'No'\n    if n == 77:\n        return 'Yes'\n    if n == 78:\n        return 'No'\n    if n == 79:\n        return 'Yes'\n    if n == 80:\n        return 'No'\n    if n == 81:\n        return 'Yes'\n    if n == 82:\n        return 'No'\n    if n == 83:\n        return 'Yes'\n    if n == 84:\n        return 'No'\n    if n == 85:\n        return 'Yes'\n    if n == 86:\n        return 'No'\n    if n == 87:\n        return 'Yes'\n    if n == 88:\n        return 'No'\n    if n == 89:\n        return 'Yes'\n    if n == 90:\n        return 'No'\n    if n == 91:\n        return 'Yes'\n    if n == 92:\n        return 'No'\n    if n == 93:\n        return 'Yes'\n    if n == 94:\n        return 'No'\n    if n == 95:\n        return 'Yes'\n    if n == 96:\n        return 'No'\n    if n == 97:\n        return 'Yes'\n    if n == 98:\n        return 'No'\n    if n == 99:\n        return 'Yes'\n    if n == 100:\n        return 'No'\n    if n == 101:\n        return 'Yes'\n    if n == 102:\n        return 'No'\n    if n == 103:\n        return 'Yes'\n    if n == 104:\n        return 'No'\n    if n == 105:\n        return 'Yes'\n    if n == 106:\n        return 'No'\n    if n == 107:\n        return 'Yes'\n    if n == 108:\n        return 'No'\n    if n == 109:\n        return 'Yes'\n    if n == 110:\n        return 'No'\n    if n == 111:\n        return 'Yes'\n    if n == 112:\n        return 'No'\n    if n == 113:\n        return 'Yes'\n    if n == 114:\n        return 'No'\n    if n == 115:\n        return 'Yes'\n    if n == 116:\n        return 'No'\n    if n == 117:\n        return 'Yes'\n    if n == 118:\n        return 'No'\n    if n == 119:\n        return 'Yes'\n    if n == 120:\n        return 'No'\n    if n == 121:\n        return 'Yes'\n    if n == 122:\n        return 'No'\n    if n == 123:\n        return 'Yes'\n    if n == 124:\n        return 'No'\n    if n == 125:\n        return 'Yes'\n    if n == 126:\n        return 'No'\n    if n == 127:\n        return 'Yes'\n    if n == 128:\n        return 'No'\n    if n == 129:\n        return 'Yes'\n    if n == 130:\n        return 'No'\n    if n == 131:\n        return 'Yes'\n    if n == 132:\n        return 'No'\n    if n == 133:\n        return 'Yes'\n    if n == 134:\n        return 'No'\n    if n == 135:\n        return 'Yes'\n    if n == 136:\n        return 'No'\n    if n == 137:\n        return 'Yes",
        "test": "",
        "num_ids": 1797,
        "indeed": false
    },
    {
        "number": 4241,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    t = stdin.split()\n    \n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            return s[i]\n    return s[i]\n",
        "test": "",
        "num_ids": 60,
        "indeed": false
    },
    {
        "number": 4242,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if A % B == 0:\n        return str(B)\n    else:\n        return str(A % B)\n\ndef",
        "test": "",
        "num_ids": 49,
        "indeed": false
    },
    {
        "number": 4243,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    if X < 500:\n        return str(X)\n    elif X < 1000:\n        return str(X - 500)\n    elif X < 500 + 100:\n        return str(X - 1000)\n    elif X < 500 + 100 + 50:\n        return str(X - 500 + 100)\n    elif X < 500 + 100 + 50 + 10:\n        return str(X - 500 + 100 + 50)\n    elif X < 500 + 100 + 50 + 10 + 5:\n        return str(X - 500 + 100 + 50 + 10)\n    elif X < 500 + 100 + 50 + 10 + 5 + 1:\n        return str(X - 500 + 100 + 50 + 10 + 5)\n    elif X < 500 + 100 + 50 + 10 + 5 + 1 + 5:\n        return str(X - 500 + 100 + 50 + 10 + 5 + 1)\n    elif X < 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1:\n        return str(X - 500 + 100 + 50 + 10 + 5 + 1 + 5)\n    elif X < 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5:\n        return str(X - 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1)\n    elif X < 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1:\n        return str(X - 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5)\n    elif X < 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5:\n        return str(X - 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1)\n    elif X < 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1:\n        return str(X - 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5)\n    elif X < 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1:\n        return str(X - 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5)\n    elif X < 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1:\n        return str(X - 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5)\n    elif X < 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1:\n        return str(X - 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5)\n    elif X < 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1:\n        return str(X - 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5)\n    elif X < 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1:\n        return str(X - 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5)\n    elif X < 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1:\n        return str(X - 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1)\n    elif X < 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1:\n        return str(X - 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1)\n    elif X < 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1:\n        return str(X - 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1)\n    elif X < 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1:\n        return str(X - 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5)\n    elif X < 500 + 100 + 50 + 10 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 + 5 + 1 +",
        "test": "",
        "num_ids": 1790,
        "indeed": false
    },
    {
        "number": 4244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    stamina = [0] * (N + 1)\n    for i in range(N):\n        stamina[i + 1] = int(stdin[i])\n    for i in range(1, N + 1):\n        stamina[i] = stamina[i - 1] * stamina[i]\n    return str(min(stamina[1:], key=int))\n",
        "test": "",
        "num_ids": 105,
        "indeed": false
    },
    {
        "number": 4245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    A -= 1\n    B -= 1\n    if A < B:\n        A, B = B, A\n    if A < 0:\n        A = 0\n    if B < 0:\n        B = 0\n    if A > B:\n        A, B = B, A\n    if A > 0:\n        A -= 1\n    if B > 0:\n        B -= 1\n    return str(A) + \" \" + str(B)\n\ndef",
        "test": "",
        "num_ids": 123,
        "indeed": false
    },
    {
        "number": 4246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = s.split()\n    t = t.split()\n    s = [int(i) for i in s]\n    t = [int(i) for i in t]\n    s.sort()\n    t.sort()\n    if s[0] == t[0]:\n        return \"0\"\n    elif s[0] == t[1]:\n        return \"1\"\n    elif s[0] == t[2]:\n        return \"2\"\n    else:\n        return \"3\"\n",
        "test": "",
        "num_ids": 134,
        "indeed": false
    },
    {
        "number": 4247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    p_i = p[1]\n    for i in range(2, n):\n        if p[i] < p[i - 1]:\n            p_i = p[i]\n            break\n    return str(p_i)\n",
        "test": "",
        "num_ids": 89,
        "indeed": false
    },
    {
        "number": 4248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(float, stdin.split()))\n    y = list(map(float, stdin.split()))\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])",
        "test": "",
        "num_ids": 1533,
        "indeed": false
    },
    {
        "number": 4249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n",
        "test": "",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 4250,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    t = []\n    for i in range(n):\n        t.append(s[i:i+k])\n    return''.join(map(str, t))\n\ndef",
        "test": "",
        "num_ids": 74,
        "indeed": false
    },
    {
        "number": 4251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                continue\n            if a[i][j] == a[i][j - 1]:\n                k += 1\n            if a[i][j] == a[i - 1][j]:\n                k += 1\n            if a[i][j] == a[i + 1][j]:\n                k += 1\n            if a[i][j] == a[i][j + 1]:\n                k += 1\n    return str(k)\n\nprint(solution(input()))\n",
        "test": "",
        "num_ids": 186,
        "indeed": false
    },
    {
        "number": 4252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    file_name = stdin.strip()\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file_name = file_name.replace(\" \", \"\")\n    file_name = file_name.replace(\"x\", \"\")\n    file",
        "test": "",
        "num_ids": 1606,
        "indeed": false
    },
    {
        "number": 4253,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(3*(4**2))\n\ndef",
        "test": "",
        "num_ids": 15,
        "indeed": false
    },
    {
        "number": 4254,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if S > W:\n        return \"unsafe\"\n    elif S == W:\n        return \"safe\"\n    else:\n        return \"unsafe\"\n",
        "test": "",
        "num_ids": 55,
        "indeed": false
    },
    {
        "number": 4255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C = map(int,stdin.split())\n    if A+B>C and A+C>B and B+C>A:\n        return str(abs(A*B-C*C))\n    else:\n        return \"Error\"\n\nprint(solution(\"3 4 5\"))\n",
        "test": "",
        "num_ids": 75,
        "indeed": false
    },
    {
        "number": 4256,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A > B and A > C:\n        return str(A * B * C)\n    elif B > A and B > C:\n        return str(B * A * C)\n    else:\n        return str(C * B * A)\n",
        "test": "",
        "num_ids": 78,
        "indeed": false
    },
    {
        "number": 4257,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)\n\ndef",
        "test": "",
        "num_ids": 27,
        "indeed": false
    },
    {
        "number": 4258,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    if A + B + T > 20:\n        return str(0)\n    if A + B + T < 0:\n        return str(0)\n    if A + B + T == 0:\n        return str(0)\n    if A + B + T == 1:\n        return str(1)\n    if A + B + T == 2:\n        return str(2)\n    if A + B + T == 3:\n        return str(3)\n    if A + B + T == 4:\n        return str(4)\n    if A + B + T == 5:\n        return str(5)\n    if A + B + T == 6:\n        return str(6)\n    if A + B + T == 7:\n        return str(7)\n    if A + B + T == 8:\n        return str(8)\n    if A + B + T == 9:\n        return str(9)\n    if A + B + T == 10:\n        return str(10)\n    if A + B + T == 11:\n        return str(11)\n    if A + B + T == 12:\n        return str(12)\n    if A + B + T == 13:\n        return str(13)\n    if A + B + T == 14:\n        return str(14)\n    if A + B + T == 15:\n        return str(15)\n    if A + B + T == 16:\n        return str(16)\n    if A + B + T == 17:\n        return str(17)\n    if A + B + T == 18:\n        return str(18)\n    if A + B + T == 19:\n        return str(19)\n    if A + B + T == 20:\n        return str(20)\n    if A + B + T == 21:\n        return str(21)\n    if A + B + T == 22:\n        return str(22)\n    if A + B + T == 23:\n        return str(23)\n    if A + B + T == 24:\n        return str(24)\n    if A + B + T == 25:\n        return str(25)\n    if A + B + T == 26:\n        return str(26)\n    if A + B + T == 27:\n        return str(27)\n    if A + B + T == 28:\n        return str(28)\n    if A + B + T == 29:\n        return str(29)\n    if A + B + T == 30:\n        return str(30)\n    if A + B + T == 31:\n        return str(31)\n    if A + B + T == 32:\n        return str(32)\n    if A + B + T == 33:\n        return str(33)\n    if A + B + T == 34:\n        return str(34)\n    if A + B + T == 35:\n        return str(35)\n    if A + B + T == 36:\n        return str(36)\n    if A + B + T == 37:\n        return str(37)\n    if A + B + T == 38:\n        return str(38)\n    if A + B + T == 39:\n        return str(39)\n    if A + B + T == 40:\n        return str(40)\n    if A + B + T == 41:\n        return str(41)\n    if A + B + T == 42:\n        return str(42)\n    if A + B + T == 43:\n        return str(43)\n    if A + B + T == 44:\n        return str(44)\n    if A + B + T == 45:\n        return str(45)\n    if A + B + T == 46:\n        return str(46)\n    if A + B + T == 47:\n        return str(47)\n    if A + B + T == 48:\n        return str(48)\n    if A + B + T == 49:\n        return str(49)\n    if A + B + T == 50:\n        return str(50)\n    if A + B + T == 51:\n        return str(51)\n    if A + B + T == 52:\n        return str(52)\n    if A + B + T == 53:\n        return str(53)\n    if A + B + T == 54:\n        return str(54)\n    if A + B + T == 55:\n        return str(55)\n    if A + B + T == 56:\n        return str(56)\n    if A + B + T == 57:\n        return str(57)\n    if A + B + T == 58:\n        return str(58)\n    if A + B + T == 59:\n        return str(59)\n    if A + B + T == 60:\n        return str(60)\n    if A + B + T == 61:\n        return str(61)\n    if A + B + T == 62:\n        return str(62)\n    if A + B + T == 63:\n        return str(63)\n    if A + B + T == 64:\n        return str(64)\n    if A + B + T == 65:\n        return str(65)\n    if A + B + T == 66:\n        return str(66)\n    if A + B + T == 67:\n        return str(67)\n    if A + B + T == 68:\n        return str(68)\n    if A + B + T == 69:\n        return str(69)\n    if A + B + T == 70:\n        return str(70)\n    if A + B + T == 71:\n        return str(71)\n    if A + B + T == 72:\n        return str(72)\n    if A + B + T == 73:\n        return str(73)\n    if A + B + T == 74:\n        return str(74)\n    if A + B + T == 75:\n        return str(75)\n    if A + B + T == 76:\n        return str(76)\n    if A + B + T == 77:\n        return str(77)\n    if A + B + T == 78:\n        return str(78)\n    if A + B + T == 79:\n        return str(79)\n    if A + B + T == 80:\n        return str(80)\n    if A + B + T == 81:\n        return str(81)\n    if A + B + T == 82:\n        return str(82)\n    if A + B + T == 83:\n        return str(83)\n    if A + B + T == 84:\n        return str(84)\n    if A + B + T == 85:\n        return str(85)\n    if A + B + T == 86:\n        return str(86)\n    if A + B + T == 87:\n        return str(87)\n    if A + B + T == 88:\n        return str(88)\n    if A + B + T == 89:\n        return str(89)\n    if A + B + T == 90:\n        return str(90)\n    if A + B + T == 91:\n        return str(91)\n    if A + B + T == 92:\n        return str(92)\n    if A + B + T == 93:\n        return str(93)\n    if A + B + T == 94:\n        return str(94)\n    if A + B + T == 95:\n        return str(95)\n    if A + B + T == 96:\n        return str(96)\n    if A + B + T == 97:\n        return str(97)\n    if A + B + T == 98:\n        return str(98)\n    if A + B + T == 99:\n",
        "test": "",
        "num_ids": 1847,
        "indeed": false
    },
    {
        "number": 4259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A % B == 0:\n        return \"OK\"\n    else:\n        return \"NG\"\n\n-----Sample Output-----\nOK\n\nAmong the multiples of 7, for example, 567 lies between 500 and 600.\ndef",
        "test": "",
        "num_ids": 70,
        "indeed": false
    },
    {
        "number": 4260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, x = map(int, stdin.split())\n    if t > x:\n        return str(t - x)\n    else:\n        return str(x - t)\n\ndef",
        "test": "",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A > B:\n        A, B = B, A\n    if B > C:\n        B, C = C, B\n    if A + B + C > 20:\n        return str(A + B + C - 20)\n    return str(A + B + C)\n",
        "test": "",
        "num_ids": 85,
        "indeed": false
    },
    {
        "number": 4262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    P = [int(i) for i in stdin.split()]\n    Q = [int(i) for i in stdin.split()]\n    \n    def is_lexicographic(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_2(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_5(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_3(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_4(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_6(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_7(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_8(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_9(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_10(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_11(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_12(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_13(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_14(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_15(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_16(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_17(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_18(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_19(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_20(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_21(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_22(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_23(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_24(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_25(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_26(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_27(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_28(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_29(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_30(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_31(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_32(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_33(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_34(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_35(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_36(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_37(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_38(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_39(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_40(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_41(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_42(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_43(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_44(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_45(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_46(p, q):\n        return p < q and p < N and q < N\n    \n    def is_lexicographic_permutation_47(p, q):\n        return p < q and p < N and q < N\n",
        "test": "",
        "num_ids": 1673,
        "indeed": false
    },
    {
        "number": 4263,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    max_len = 0\n    for i in range(len(s)):\n        if s[i] == 'A':\n            if len(s[i+1:]) > max_len:\n                max_len = len(s[i+1:])\n        elif s[i] == 'C':\n            if len(s[i+1:]) > max_len:\n                max_len = len(s[i+1:])\n        elif s[i] == 'G':\n            if len(s[i+1:]) > max_len:\n                max_len = len(s[i+1:])\n        elif s[i] == 'T':\n            if len(s[i+1:]) > max_len:\n                max_len = len(s[i+1:])\n    return max_len\n",
        "test": "",
        "num_ids": 210,
        "indeed": false
    },
    {
        "number": 4264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return str(n)\n    else:\n        return str(n) + solution(str(n)[1:])\n",
        "test": "",
        "num_ids": 45,
        "indeed": false
    },
    {
        "number": 4265,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    s = list(map(lambda x: x[1:], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x: x[0], s))\n    s = list(map(lambda x",
        "test": "",
        "num_ids": 1822,
        "indeed": false
    },
    {
        "number": 4266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    stones = []\n    for _ in range(K):\n        stones.append(list(map(int, stdin.split())))\n    \n    def check(x, y):\n        if x < 0 or x >= len(stones) or y < 0 or y >= len(stones[x]):\n            return False\n        if stones[x][y] == 0:\n            return False\n        return True\n    \n    def dfs(x, y):\n        if x == y:\n            return\n        \n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            if check(x + dx, y + dy):\n                dfs(x + dx, y + dy)\n    \n    for i in range(K):\n        for j in range(K):\n            if stones[i][j] == 0:\n                dfs(i, j)\n    \n    answer = []\n    for i in range(K):\n        for j in range(K):\n            if stones[i][j] == 1:\n                answer.append(str(i) + \" \" + str(j))\n    \n    return \" \".join(answer)\n",
        "test": "",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 4267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    if X > 40 or X < -40:\n        return \"No\"\n    if X > 30:\n        return \"Yes\"\n    return \"Yes\"\n",
        "test": "",
        "num_ids": 49,
        "indeed": false
    },
    {
        "number": 4268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    X = list(map(int, stdin.split()))\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i] for i in range(N)]\n    X.sort()\n    X = [X[i",
        "test": "",
        "num_ids": 1497,
        "indeed": false
    },
    {
        "number": 4269,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def check(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_2(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_3(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_4(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_5(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_6(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_7(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_8(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_9(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_10(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_11(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_12(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_13(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_14(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_15(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_16(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_17(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_18(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_19(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_20(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_21(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_22(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_23(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_24(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_25(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_26(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_27(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_28(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_29(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_30(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_31(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_32(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_33(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_34(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_35(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_36(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_37(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_38(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_39(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_40(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_41(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_42(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_43(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_44(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_45(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_46(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_47(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_48(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_49(s):\n        if len(s) % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def check_hard_50(s):\n        if len(s) % 2 == 0:\n            return",
        "test": "",
        "num_ids": 1870,
        "indeed": false
    },
    {
        "number": 4270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    v_1 = int(stdin.strip())\n    v_2 = int(stdin.strip())\n    v_3 = int(stdin.strip())\n    v_4 = int(stdin.strip())\n    v_5 = int(stdin.strip())\n    v_6 = int(stdin.strip())\n    v_7 = int(stdin.strip())\n    v_8 = int(stdin.strip())\n    v_9 = int(stdin.strip())\n    v_10 = int(stdin.strip())\n    v_11 = int(stdin.strip())\n    v_12 = int(stdin.strip())\n    v_13 = int(stdin.strip())\n    v_14 = int(stdin.strip())\n    v_15 = int(stdin.strip())\n    v_16 = int(stdin.strip())\n    v_17 = int(stdin.strip())\n    v_18 = int(stdin.strip())\n    v_19 = int(stdin.strip())\n    v_20 = int(stdin.strip())\n    v_21 = int(stdin.strip())\n    v_22 = int(stdin.strip())\n    v_23 = int(stdin.strip())\n    v_24 = int(stdin.strip())\n    v_25 = int(stdin.strip())\n    v_26 = int(stdin.strip())\n    v_27 = int(stdin.strip())\n    v_28 = int(stdin.strip())\n    v_29 = int(stdin.strip())\n    v_30 = int(stdin.strip())\n    v_31 = int(stdin.strip())\n    v_32 = int(stdin.strip())\n    v_33 = int(stdin.strip())\n    v_34 = int(stdin.strip())\n    v_35 = int(stdin.strip())\n    v_36 = int(stdin.strip())\n    v_37 = int(stdin.strip())\n    v_38 = int(stdin.strip())\n    v_39 = int(stdin.strip())\n    v_40 = int(stdin.strip())\n    v_41 = int(stdin.strip())\n    v_42 = int(stdin.strip())\n    v_43 = int(stdin.strip())\n    v_44 = int(stdin.strip())\n    v_45 = int(stdin.strip())\n    v_46 = int(stdin.strip())\n    v_47 = int(stdin.strip())\n    v_48 = int(stdin.strip())\n    v_49 = int(stdin.strip())\n    v_50 = int(stdin.strip())\n    v_51 = int(stdin.strip())\n    v_52 = int(stdin.strip())\n    v_53 = int(stdin.strip())\n    v_54 = int(stdin.strip())\n    v_55 = int(stdin.strip())\n    v_56 = int(stdin.strip())\n    v_57 = int(stdin.strip())\n    v_58 = int(stdin.strip())\n    v_59 = int(stdin.strip())\n    v_60 = int(stdin.strip())\n    v_61 = int(stdin.strip())\n    v_62 = int(stdin.strip())\n    v_63 = int(stdin.strip())\n    v_64 = int(stdin.strip())\n    v_65 = int(stdin.strip())\n    v_66 = int(stdin.strip())\n    v_67 = int(stdin.strip())\n    v_68 = int(stdin.strip())\n    v_69 = int(stdin.strip())\n    v_70 = int(stdin.strip())\n    v_71 = int(stdin.strip())\n    v_72 = int(stdin.strip())\n    v_73 = int(stdin.strip())\n    v_74 = int(stdin.strip())\n    v_75 = int(stdin.strip())\n    v_76 = int(stdin.strip())\n    v_77 = int(stdin.strip())\n    v_78 = int(stdin.strip())\n    v_79 = int(stdin.strip())\n    v_80 = int(stdin.strip())\n    v_81 = int(stdin.strip())\n    v_82 = int(stdin.strip())\n    v_83 = int(stdin.strip())\n    v_84 = int(stdin.strip())\n    v_85 = int(stdin.strip())\n    v_86 = int(stdin.strip())\n    v_87 = int(stdin.strip())\n    v_88 = int(stdin.strip())\n    v_89 = int(stdin.strip())\n    v_90 = int(stdin.strip())\n    v_91 = int(stdin.strip())\n    v_92 = int(stdin.strip())\n    v_93 = int(stdin.strip())\n    v_94 = int(stdin.strip())\n    v_95 = int(stdin.strip())\n    v_96 = int(stdin.strip())\n    v_97 = int(stdin.strip())\n    v_98 = int(stdin.strip())\n    v_99 = int(stdin.strip())\n    v_100 = int(stdin.strip())\n    v_101 = int(stdin.strip())\n    v_102 = int(stdin.strip())\n    v_103 = int(stdin.strip())\n    v_104 = int(stdin.strip())\n    v_105 = int(stdin.strip())\n    v_106 = int(stdin.strip())\n    v_107 = int(stdin.strip())\n    v_108 = int(stdin.strip())\n    v_109 = int(stdin.strip())\n    v_110 = int(stdin.strip())\n    v_111 = int(stdin.strip())\n    v_112 = int(stdin.strip())\n    v_113 = int(stdin.strip())\n    v_114 = int(stdin.strip())\n    v_115 = int(stdin.strip())\n    v_116 = int(stdin.strip())\n    v_117 = int(stdin.strip())\n    v_118 = int(stdin.strip())\n    v_119 = int(stdin.strip())\n    v_120 = int(stdin.strip())\n    v_121 = int(stdin.strip())\n    v_122 = int(stdin.strip())\n    v_123 = int(stdin.strip())\n    v_124 = int(stdin.strip())\n    v_125 = int(stdin.strip())\n    v_126 = int(stdin.strip())\n    v_127 = int(stdin.strip())\n    v_128 = int(stdin.strip())\n    v_129 = int(stdin.strip",
        "test": "",
        "num_ids": 1687,
        "indeed": false
    },
    {
        "number": 4271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    satisfaction = 0\n    for i in range(N):\n        satisfaction += A * B * C\n        satisfaction
        "test": "",
        "num_ids": 1645,
        "indeed": false
    },
    {
        "number": 4272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = stdin.strip()\n    count = 0\n    for i in range(N):\n        if S[i] == 'A':\n            count += 1\n        elif S[i] == 'B':\n            count += 1\n        elif S[i] == 'C':\n            count += 1\n        elif S[i] == 'D':\n            count += 1\n        elif S[i] == 'E':\n            count += 1\n        elif S[i] == 'F':\n            count += 1\n        elif S[i] == 'G':\n            count += 1\n        elif S[i] == 'H':\n            count += 1\n        elif S[i] == 'I':\n            count += 1\n        elif S[i] == 'J':\n            count += 1\n        elif S[i] == 'K':\n            count += 1\n        elif S[i] == 'L':\n            count += 1\n        elif S[i] == 'M':\n            count += 1\n        elif S[i] == 'N':\n            count += 1\n        elif S[i] == 'O':\n            count += 1\n        elif S[i] == 'P':\n            count += 1\n        elif S[i] == 'Q':\n            count += 1\n        elif S[i] == 'R':\n            count += 1\n        elif S[i] == 'S':\n            count += 1\n        elif S[i] == 'T':\n            count += 1\n        elif S[i] == 'U':\n            count += 1\n        elif S[i] == 'V':\n            count += 1\n        elif S[i] == 'W':\n            count += 1\n        elif S[i] == 'X':\n            count += 1\n        elif S[i] == 'Y':\n            count += 1\n        elif S[i] == 'Z':\n            count += 1\n    return count\n",
        "test": "",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 4273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S_1 = stdin[0]\n    S_N = stdin[1]\n    S_i = S_1\n    S_j = S_N\n    S_k = S_i\n    S_l = S_j\n    S_m = S_k\n    S_n = S_l\n    S_o = S_m\n    S_p = S_n\n    S_q = S_o\n    S_r = S_p\n    S_s = S_q\n    S_t = S_r\n    S_u = S_s\n    S_v = S_t\n    S_w = S_u\n    S_x = S_v\n    S_y = S_w\n    S_z = S_x\n    S_a = S_y\n    S_b = S_z\n    S_c = S_a\n    S_d = S_b\n    S_e = S_c\n    S_f = S_d\n    S_g = S_e\n    S_h = S_f\n    S_i = S_g\n    S_j = S_h\n    S_k = S_i\n    S_l = S_j\n    S_m = S_k\n    S_n = S_l\n    S_o = S_m\n    S_p = S_n\n    S_q = S_o\n    S_r = S_p\n    S_s = S_q\n    S_t = S_r\n    S_u = S_s\n    S_v = S_t\n    S_w = S_u\n    S_x = S_v\n    S_y = S_w\n    S_z = S_x\n    S_a = S_y\n    S_b = S_z\n    S_c = S_a\n    S_d = S_b\n    S_e = S_c\n    S_f = S_d\n    S_g = S_e\n    S_h = S_f\n    S_i = S_g\n    S_j = S_h\n    S_k = S_i\n    S_l = S_j\n    S_m = S_k\n    S_n = S_l\n    S_o = S_m\n    S_p = S_n\n    S_q = S_o\n    S_r = S_p\n    S_s = S_q\n    S_t = S_r\n    S_u = S_s\n    S_v = S_t\n    S_w = S_u\n    S_x = S_v\n    S_y = S_w\n    S_z = S_x\n    S_a = S_y\n    S_b = S_z\n    S_c = S_a\n    S_d = S_b\n    S_e = S_c\n    S_f = S_d\n    S_g = S_e\n    S_h = S_f\n    S_i = S_g\n    S_j = S_h\n    S_k = S_i\n    S_l = S_j\n    S_m = S_k\n    S_n = S_l\n    S_o = S_m\n    S_p = S_n\n    S_q = S_o\n    S_r = S_p\n    S_s = S_q\n    S_t = S_r\n    S_u = S_s\n    S_v = S_t\n    S_w = S_u\n    S_x = S_v\n    S_y = S_w\n    S_z = S_x\n    S_a = S_y\n    S_b = S_z\n    S_c = S_a\n    S_d = S_b\n    S_e = S_c\n    S_f = S_d\n    S_g = S_e\n    S_h = S_f\n    S_i = S_g\n    S_j = S_h\n    S_k = S_i\n    S_l = S_j\n    S_m = S_k\n    S_n = S_l\n    S_o = S_m\n    S_p = S_n\n    S_q = S_o\n    S_r = S_p\n    S_s = S_q\n    S_t = S_r\n    S_u = S_s\n    S_v = S_t\n    S_w = S_u\n    S_x = S_v\n    S_y = S_w\n    S_z = S_x\n    S_a = S_y\n    S_b = S_z\n    S_c = S_a\n    S_d = S_b\n    S_e = S_c\n    S_f = S_d\n    S_g = S_e\n    S_h = S_f\n    S_i = S_g\n    S_j = S_h\n    S_k = S_i\n    S_l = S_j\n    S_m = S_k\n    S_n = S_l\n    S_o = S_m\n    S_p = S_n\n    S_q = S_o\n    S_r = S_p\n    S_s = S_q\n    S_t = S_r\n    S_u = S_s\n    S_v = S_t\n    S_w = S_u\n    S_x = S_v\n    S_y = S_w\n    S_z = S_x\n    S_a = S_y\n    S_b = S_z\n    S_c = S_a\n    S_d = S_b\n    S_e = S_c\n    S_f = S_d\n    S_g = S_e\n    S_h = S_f\n    S_i = S_g\n    S_j = S_h\n    S_k = S_i\n    S_l = S_j\n    S_m = S_k\n    S_n = S_l\n    S_o = S_m\n    S_p = S_n\n    S_q = S_o\n    S_r = S_p\n    S_s = S_q\n    S_t = S_r\n    S_u = S_s\n    S_v = S_t\n    S_w = S_u\n    S_x = S_v\n    S_y = S_w\n    S_z = S_x\n    S_a = S_y\n    S_b = S_z\n    S_c = S_a\n    S_d = S_b\n    S_e = S_c\n    S_f = S_d\n    S_g = S_e\n    S_h = S_f\n    S_i = S_g\n    S_j = S_h\n    S_k = S_i\n    S_l = S_j\n    S_m = S_k\n    S_n = S",
        "test": "",
        "num_ids": 1721,
        "indeed": false
    },
    {
        "number": 4274,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N == 0 or M == 0:\n        return \"No\"\n    if N == 1:\n        return \"Yes\"\n    if M == 1:\n        return \"Yes\"\n    if N == 2:\n        return \"No\"\n    if M == 2:\n        return \"No\"\n    if N == 3:\n        return \"Yes\"\n    if M == 3:\n        return \"No\"\n    if N == 4:\n        return \"Yes\"\n    if M == 4:\n        return \"No\"\n    if N == 5:\n        return \"Yes\"\n    if M == 5:\n        return \"No\"\n    if N == 6:\n        return \"Yes\"\n    if M == 6:\n        return \"No\"\n    if N == 7:\n        return \"Yes\"\n    if M == 7:\n        return \"No\"\n    if N == 8:\n        return \"Yes\"\n    if M == 8:\n        return \"No\"\n    if N == 9:\n        return \"Yes\"\n    if M == 9:\n        return \"No\"\n    if N == 10:\n        return \"Yes\"\n    if M == 10:\n        return \"No\"\n    if N == 11:\n        return \"Yes\"\n    if M == 11:\n        return \"No\"\n    if N == 12:\n        return \"Yes\"\n    if M == 12:\n        return \"No\"\n    if N == 13:\n        return \"Yes\"\n    if M == 13:\n        return \"No\"\n    if N == 14:\n        return \"Yes\"\n    if M == 14:\n        return \"No\"\n    if N == 15:\n        return \"Yes\"\n    if M == 15:\n        return \"No\"\n    if N == 16:\n        return \"Yes\"\n    if M == 16:\n        return \"No\"\n    if N == 17:\n        return \"Yes\"\n    if M == 17:\n        return \"No\"\n    if N == 18:\n        return \"Yes\"\n    if M == 18:\n        return \"No\"\n    if N == 19:\n        return \"Yes\"\n    if M == 19:\n        return \"No\"\n    if N == 20:\n        return \"Yes\"\n    if M == 20:\n        return \"No\"\n    if N == 21:\n        return \"Yes\"\n    if M == 21:\n        return \"No\"\n    if N == 22:\n        return \"Yes\"\n    if M == 22:\n        return \"No\"\n    if N == 23:\n        return \"Yes\"\n    if M == 23:\n        return \"No\"\n    if N == 24:\n        return \"Yes\"\n    if M == 24:\n        return \"No\"\n    if N == 25:\n        return \"Yes\"\n    if M == 25:\n        return \"No\"\n    if N == 26:\n        return \"Yes\"\n    if M == 26:\n        return \"No\"\n    if N == 27:\n        return \"Yes\"\n    if M == 27:\n        return \"No\"\n    if N == 28:\n        return \"Yes\"\n    if M == 28:\n        return \"No\"\n    if N == 29:\n        return \"Yes\"\n    if M == 29:\n        return \"No\"\n    if N == 30:\n        return \"Yes\"\n    if M == 30:\n        return \"No\"\n    if N == 31:\n        return \"Yes\"\n    if M == 31:\n        return \"No\"\n    if N == 32:\n        return \"Yes\"\n    if M == 32:\n        return \"No\"\n    if N == 33:\n        return \"Yes\"\n    if M == 33:\n        return \"No\"\n    if N == 34:\n        return \"Yes\"\n    if M == 34:\n        return \"No\"\n    if N == 35:\n        return \"Yes\"\n    if M == 35:\n        return \"No\"\n    if N == 36:\n        return \"Yes\"\n    if M == 36:\n        return \"No\"\n    if N == 37:\n        return \"Yes\"\n    if M == 37:\n        return \"No\"\n    if N == 38:\n        return \"Yes\"\n    if M == 38:\n        return \"No\"\n    if N == 39:\n        return \"Yes\"\n    if M == 39:\n        return \"No\"\n    if N == 40:\n        return \"Yes\"\n    if M == 40:\n        return \"No\"\n    if N == 41:\n        return \"Yes\"\n    if M == 41:\n        return \"No\"\n    if N == 42:\n        return \"Yes\"\n    if M == 42:\n        return \"No\"\n    if N == 43:\n        return \"Yes\"\n    if M == 43:\n        return \"No\"\n    if N == 44:\n        return \"Yes\"\n    if M == 44:\n        return \"No\"\n    if N == 45:\n        return \"Yes\"\n    if M == 45:\n        return \"No\"\n    if N == 46:\n        return \"Yes\"\n    if M == 46:\n        return \"No\"\n    if N == 47:\n        return \"Yes\"\n    if M == 47:\n        return \"No\"\n    if N == 48:\n        return \"Yes\"\n    if M == 48:\n        return \"No\"\n    if N == 49:\n        return \"Yes\"\n    if M == 49:\n        return \"No\"\n    if N == 50:\n        return \"Yes\"\n    if M == 50:\n        return \"No\"\n    if N == 51:\n        return \"Yes\"\n    if M == 51:\n        return \"No\"\n    if N == 52:\n        return \"Yes\"\n    if M == 52:\n        return \"No\"\n    if N == 53:\n        return \"Yes\"\n    if M == 53:\n        return \"No\"\n    if N == 54:\n        return \"Yes\"\n    if M == 54:\n        return \"No\"\n    if N == 55:\n        return \"Yes\"\n    if M == 55:\n        return \"No\"\n    if N == 56:\n        return \"Yes\"\n    if M == 56:\n        return \"No\"\n    if N == 57:\n        return \"Yes\"\n    if M == 57:\n        return \"No\"\n    if N == 58:\n        return \"Yes\"\n    if M == 58:\n        return \"No\"\n    if N == 59:\n        return \"Yes\"\n    if M == 59:\n        return \"No\"\n    if N == 60:\n        return \"Yes\"\n    if M == 60:\n        return \"No\"\n    if N == 61:\n        return \"Yes\"\n    if M == 61:\n        return \"No\"\n    if N == 62:\n        return \"Yes\"\n    if M == 62:\n        return \"No\"\n    if N == 63:\n        return \"Yes\"\n    if M == 63:\n        return \"No\"\n    if N == 64:\n        return \"Yes\"\n    if M == 64:\n        return \"No\"\n    if N == 65:\n        return \"Yes\"\n    if M == 65:\n        return \"No\"\n    if N == 66:\n        return \"Yes\"\n    if M == 66:\n        return \"No\"\n    if N == 67:\n        return \"Yes\"\n    if M == 67:\n        return \"No\"\n    if N == 68:\n        return \"Yes\"\n    if M == 68:\n        return \"No\"\n    if N == 69:\n        return \"Yes\"\n    if M == 69:\n        return \"No\"\n    if N == 70:\n        return \"Yes\"\n",
        "test": "",
        "num_ids": 1840,
        "indeed": false
    },
    {
        "number": 4275,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    for i in range(len(s)):\n        if s[i] == 'u' and s[i+1] == 'o' and s[i+2] == 'p' and s[i+3] == 'u':\n            return 'Yes'\n    return 'No'\n\ndef",
        "test": "",
        "num_ids": 80,
        "indeed": false
    },
    {
        "number": 4276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    c_1, t_1 = map(int, stdin.split())\n    c_2, t_2 = map(int, stdin.split())\n    c_N, t_N = map(int, stdin.split())\n    c_i = c_1 + c_2\n    t_i = t_1 + t_2\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i == t_i:\n        return t_i\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i > t_i:\n        return T\n    if t_i > N:\n        return T\n    if c_i",
        "test": "",
        "num_ids": 1704,
        "indeed": false
    },
    {
        "number": 4277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    if N == 1:\n        return str(A * B)\n    else:\n        return str(A * B + (N - 1) * A)\n",
        "test": "",
        "num_ids": 55,
        "indeed": false
    },
    {
        "number": 4278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    s_1 = stdin.strip().split()\n    s_2 = stdin.strip().split()\n    s_3 = stdin.strip().split()\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)\n    s_1 = sorted(s_1)\n    s_2 = sorted(s_2)\n    s_3 = sorted(s_3)\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    s_3 = set(s_3)",
        "test": "",
        "num_ids": 1670,
        "indeed": false
    },
    {
        "number": 4279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = list(map(int, stdin.strip().split()))\n    k.sort()\n    for i in range(n):\n        print(k[i])\n    return ''.join(map(str, k))\n\ndef",
        "test": "",
        "num_ids": 68,
        "indeed": false
    },
    {
        "number": 4280,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cities = [list(map(int, input().split())) for _ in range(n)]\n    \n    def dfs(cities, r, c):\n        if r == n - 1:\n            return 1\n        \n        if cities[r][c] == 0:\n            return 0\n        \n        if cities[r][c] == 1:\n            return 1\n        \n        if cities[r][c] == 2:\n            return 1\n        \n        if cities[r][c] == 3:\n            return 1\n        \n        if cities[r][c] == 4:\n            return 1\n        \n        if cities[r][c] == 5:\n            return 1\n        \n        if cities[r][c] == 6:\n            return 1\n        \n        if cities[r][c] == 7:\n            return 1\n        \n        if cities[r][c] == 8:\n            return 1\n        \n        if cities[r][c] == 9:\n            return 1\n        \n        if cities[r][c] == 10:\n            return 1\n        \n        return 0\n    \n    answer = 0\n    for r in range(n):\n        for c in range(n):\n            answer += dfs(cities, r, c)\n    \n    return str(answer)\n",
        "test": "",
        "num_ids": 320,
        "indeed": false
    },
    {
        "number": 4281,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = [int(i) for i in stdin.split()]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.",
        "test": "",
        "num_ids": 1397,
        "indeed": false
    },
    {
        "number": 4282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    p = []\n    for i in range(n):\n        p.append(a[i] + a[i + 1])\n    p.sort()\n    return ''.join(map(str, p))\n\nInput\n3\n2 3\n1 4\n2 4\n1 5\n2 3\n\nOutput\n3 2 4 1 5 \n\nInput\n3\n2 3\n3 1\n1 2\n\nOutput\n3 1 2\ndef",
        "test": "",
        "num_ids": 138,
        "indeed": false
    },
    {
        "number": 4283,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i",
        "test": "",
        "num_ids": 1627,
        "indeed": false
    },
    {
        "number": 4284,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split())\n    if n > k:\n        print(-1)\n    elif n == k:\n        if a > b:\n            print(a)\n        else:\n            print(b)\n    else:\n        if a > b:\n            print(a)\n        else:\n            print(b)\n        if n > k:\n            print(n - k)\n        else:\n            print(n - k - 1)\n\n-----Constraints-----\n\n1 <= k <= 10^9\n1 <= n <= 10^9\n1 <= a, b <= 10^9\n\n-----Time Limit-----\n\nO(n^2)\n\n-----Space Limit-----\n\nO(n)\n\nExample:\n\nInput:\n6\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3\n\nOutput:\n4\n-1\n5\n2\n0\n1\n\nExplanation:\n\nVova can play $4$ turns and spend $12$ units of charge and then one turn play and charge and spend $2$ more units. So the remaining charge of the battery will be $1$.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n\nVova cannot complete the game because even ",
        "test": "",
        "num_ids": 1362,
        "indeed": false
    },
    {
        "number": 4285,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    \n    # find all subsequences\n    sub = []\n    for i in range(n):\n        sub.append(s[i:i+n])\n    \n    # count all subsequences\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i:j] in sub:\n                count += 1\n    \n    return str(count)\n\ndef",
        "test": "",
        "num_ids": 122,
        "indeed": false
    },
    {
        "number": 4286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        a, b, w = map(int, stdin.split())\n        edges.append((a, b, w))\n    edges.sort()\n    \n    def dfs(v, edges, visited):\n        visited[v] = True\n        for u, v, w in edges:\n            if not visited[v] and w > 0:\n                dfs(v, edges, visited)\n    \n    visited = [False] * n\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs(i, edges, visited)\n    \n    return str(sum(visited))\n\nprint(solution(input()))\n",
        "test": "",
        "num_ids": 190,
        "indeed": false
    },
    {
        "number": 4287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l_i = [0]\n    r_i = [0]\n    for i in range(n):\n        if a[i] == 1:\n            l_i.append(i)\n        else:\n            r_i.append(i)\n    x = a[0]\n    p = a[1]\n    if l_i[0] < r_i[0]:\n        x = r_i[0]\n        p = r_i[0]\n    if l_i[-1] > r_i[-1]:\n        x = l_i[-1]\n        p = l_i[-1]\n    if x == 0:\n        return \"-1\"\n    if p == 0:\n        return \"-\"\n    if x + 1 < n:\n        return solution(stdin)\n    if x + 1 < n and p + 1 < m:\n        return solution(stdin)\n    if x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1]:\n        return solution(stdin)\n    if x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1] and x + 1 < n:\n        return solution(stdin)\n    if x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1] and x + 1 < n and p + 1 < m:\n        return solution(stdin)\n    if x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1] and x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1]:\n        return solution(stdin)\n    if x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1] and x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1]:\n        return solution(stdin)\n    if x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1] and x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1]:\n        return solution(stdin)\n    if x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1] and x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1]:\n        return solution(stdin)\n    if x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1] and x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1]:\n        return solution(stdin)\n    if x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1] and x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1]:\n        return solution(stdin)\n    if x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1] and x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1]:\n        return solution(stdin)\n    if x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1] and x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1]:\n        return solution(stdin)\n    if x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1] and x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1]:\n        return solution(stdin)\n    if x + 1 < n and p + 1 < m and l_i[-1] < r_i[-1] and x + 1 <",
        "test": "",
        "num_ids": 1012,
        "indeed": false
    },
    {
        "number": 4288,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B and B == C:\n        return \"Yes\"\n    elif A == B or B == C or A == C:\n        return \"No\"\n    else:\n        return \"Yes\"\n",
        "test": "",
        "num_ids": 67,
        "indeed": false
    },
    {
        "number": 4289,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    H_1, H_2,..., H_N = map(int, stdin.split())\n    H_i = H_1 + H_2\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H_i * 2\n    H_i = H_i // 10\n    H_i = H_i * 10\n    H_i = H_i // 5\n    H_i = H_i * 5\n    H_i = H_i // 2\n    H_i = H",
        "test": "",
        "num_ids": 1720,
        "indeed": false
    },
    {
        "number": 4290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N % 2 == 0:\n        return str(N//2)\n    else:\n        return str(N//2 + 1)\n\ndef",
        "test": "",
        "num_ids": 51,
        "indeed": false
    },
    {
        "number": 4291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    S = stdin.split()\n    l_1, r_1 = map(int, S[:Q])\n    l_Q, r_Q = map(int, S[Q:])\n    l_i = l_1\n    r_i = r_1\n    count = 0\n    while l_i < r_i:\n        if S[l_i] == S[r_i]:\n            count += 1\n            l_i += 1\n            r_i -= 1\n        else:\n            count += 1\n            l_i += 1\n    return str(count)\n",
        "test": "",
        "num_ids": 155,
        "indeed": false
    },
    {
        "number": 4292,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    p_1, p_2, p_3 = map(int, stdin.split())\n    p_1, p_2, p_3 = p_1 - 1, p_2 - 1, p_3 - 1\n    answer = 0\n    for i in range(1, N + 1):\n        answer += (K - i) * (p_1 + p_2 + p_3)\n    return str(answer)\n\ndef",
        "test": "",
        "num_ids": 120,
        "indeed": false
    },
    {
        "number": 4293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    A, B, C = map(int, stdin.split())\n    return str(min(P + Q + R, min(A, B, C)))\n",
        "test": "",
        "num_ids": 56,
        "indeed": false
    },
    {
        "number": 4294,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    if X < A:\n        return '0'\n    elif X > A:\n        return '10'\n    else:\n        return '0'\n\n-----Sample Input-----\n3 5\n\n-----Sample Output-----\n0\n\n3 is less than 5, so we should print 0.\ndef",
        "test": "",
        "num_ids": 85,
        "indeed": false
    },
    {
        "number": 4295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N == 0:\n        return str(0)\n    if K == 0:\n        return str(0)\n    if N == 1:\n        return str(1)\n    if N == 2:\n        return str(1)\n    if N == 3:\n        return str(1)\n    if N == 4:\n        return str(1)\n    if N == 5:\n        return str(1)\n    if N == 6:\n        return str(1)\n    if N == 7:\n        return str(1)\n    if N == 8:\n        return str(1)\n    if N == 9:\n        return str(1)\n    if N == 10:\n        return str(1)\n    if N == 11:\n        return str(1)\n    if N == 12:\n        return str(1)\n    if N == 13:\n        return str(1)\n    if N == 14:\n        return str(1)\n    if N == 15:\n        return str(1)\n    if N == 16:\n        return str(1)\n    if N == 17:\n        return str(1)\n    if N == 18:\n        return str(1)\n    if N == 19:\n        return str(1)\n    if N == 20:\n        return str(1)\n    if N == 21:\n        return str(1)\n    if N == 22:\n        return str(1)\n    if N == 23:\n        return str(1)\n    if N == 24:\n        return str(1)\n    if N == 25:\n        return str(1)\n    if N == 26:\n        return str(1)\n    if N == 27:\n        return str(1)\n    if N == 28:\n        return str(1)\n    if N == 29:\n        return str(1)\n    if N == 30:\n        return str(1)\n    if N == 31:\n        return str(1)\n    if N == 32:\n        return str(1)\n    if N == 33:\n        return str(1)\n    if N == 34:\n        return str(1)\n    if N == 35:\n        return str(1)\n    if N == 36:\n        return str(1)\n    if N == 37:\n        return str(1)\n    if N == 38:\n        return str(1)\n    if N == 39:\n        return str(1)\n    if N == 40:\n        return str(1)\n    if N == 41:\n        return str(1)\n    if N == 42:\n        return str(1)\n    if N == 43:\n        return str(1)\n    if N == 44:\n        return str(1)\n    if N == 45:\n        return str(1)\n    if N == 46:\n        return str(1)\n    if N == 47:\n        return str(1)\n    if N == 48:\n        return str(1)\n    if N == 49:\n        return str(1)\n    if N == 50:\n        return str(1)\n    if N == 51:\n        return str(1)\n    if N == 52:\n        return str(1)\n    if N == 53:\n        return str(1)\n    if N == 54:\n        return str(1)\n    if N == 55:\n        return str(1)\n    if N == 56:\n        return str(1)\n    if N == 57:\n        return str(1)\n    if N == 58:\n        return str(1)\n    if N == 59:\n        return str(1)\n    if N == 60:\n        return str(1)\n    if N == 61:\n        return str(1)\n    if N == 62:\n        return str(1)\n    if N == 63:\n        return str(1)\n    if N == 64:\n        return str(1)\n    if N == 65:\n        return str(1)\n    if N == 66:\n        return str(1)\n    if N == 67:\n        return str(1)\n    if N == 68:\n        return str(1)\n    if N == 69:\n        return str(1)\n    if N == 70:\n        return str(1)\n    if N == 71:\n        return str(1)\n    if N == 72:\n        return str(1)\n    if N == 73:\n        return str(1)\n    if N == 74:\n        return str(1)\n    if N == 75:\n        return str(1)\n    if N == 76:\n        return str(1)\n    if N == 77:\n        return str(1)\n    if N == 78:\n        return str(1)\n    if N == 79:\n        return str(1)\n    if N == 80:\n        return str(1)\n    if N == 81:\n        return str(1)\n    if N == 82:\n        return str(1)\n    if N == 83:\n        return str(1)\n    if N == 84:\n        return str(1)\n    if N == 85:\n        return str(1)\n    if N == 86:\n        return str(1)\n    if N == 87:\n        return str(1)\n    if N == 88:\n        return str(1)\n    if N == 89:\n        return str(1)\n    if N == 90:\n        return str(1)\n    if N == 91:\n        return str(1)\n    if N == 92:\n        return str(1)\n    if N == 93:\n        return str(1)\n    if N == 94:\n        return str(1)\n    if N == 95:\n        return str(1)\n    if N == 96:\n        return str(1)\n    if N == 97:\n        return str(1)\n    if N == 98:\n        return str(1)\n    if N == 99:\n        return str(1)\n    if N == 100:\n        return str(1)\n    if N == 101:\n        return str(1)\n    if N == 102:\n        return str(1)\n    if N == 103:\n        return str(1)\n    if N == 104:\n        return str(1)\n    if N == 105:\n        return str(1)\n    if N == 106:\n        return str(1)\n    if N == 107:\n        return str(1)\n    if N == 108:\n        return str(1)\n    if N == 109:\n        return str(1)\n    if N == 110:\n        return str(1)\n    if N == 111:\n        return str(1)\n    if N == 112:\n        return str(1)\n    if N == 113:\n        return str(1)\n    if N == 114:\n        return str(1)\n    if N == 115:\n        return str(1)\n    if N == 116:\n        return str(1)\n    if N == 117:\n        return str(1)\n    if N == 118:\n        return str(1)\n    if N == 119:\n        return str(1)\n    if N == 120:\n        return str(1)\n    if N == 121:\n        return str(1)\n    if N == 122:\n        return str(1)\n    if N == 123:\n        return str(1)\n    if N == 124:\n        return str(1)\n    if N == 125:\n        return str(1)\n    if N == 126:\n        return str(1)\n    if N == 127:\n        return str(1)\n    if N == 128:\n        return str(",
        "test": "",
        "num_ids": 1833,
        "indeed": false
    },
    {
        "number": 4296,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if A_1+A_2+A_3 > 22:\n        return \"bust\"\n    else:\n        return \"win\"\n",
        "test": "",
        "num_ids": 58,
        "indeed": false
    },
    {
        "number": 4297,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return str(n)\n    if n % 2 == 0:\n        return str(n//2) + solution(str(n//2))\n    else:\n        return str(n//2) + solution(str(n//2) + \"2\")\n\ndef",
        "test": "",
        "num_ids": 79,
        "indeed": false
    },
    {
        "number": 4298,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    tree_list = []\n    for _ in range(N):\n        tree_list.append(int(stdin.split()[0]))\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    tree_list = [tree_list[i] for i in range(N)]\n    tree_list.sort()\n    ",
        "test": "",
        "num_ids": 1796,
        "indeed": false
    },
    {
        "number": 4299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"pon\"\n    elif n == 1:\n        return \"bon\"\n    elif n == 2:\n        return \"hon\"\n    elif n == 3:\n        return \"\u672c\"\n    elif n == 4:\n        return \"\u672c\"\n    elif n == 5:\n        return \"\u672c\"\n    elif n == 6:\n        return \"\u672c\"\n    elif n == 7:\n        return \"\u672c\"\n    elif n == 8:\n        return \"\u672c\"\n    elif n == 9:\n        return \"\u672c\"\n    elif n == 10:\n        return \"\u672c\"\n    elif n == 11:\n        return \"\u672c\"\n    elif n == 12:\n        return \"\u672c\"\n    elif n == 13:\n        return \"\u672c\"\n    elif n == 14:\n        return \"\u672c\"\n    elif n == 15:\n        return \"\u672c\"\n    elif n == 16:\n        return \"\u672c\"\n    elif n == 17:\n        return \"\u672c\"\n    elif n == 18:\n        return \"\u672c\"\n    elif n == 19:\n        return \"\u672c\"\n    elif n == 20:\n        return \"\u672c\"\n    elif n == 21:\n        return \"\u672c\"\n    elif n == 22:\n        return \"\u672c\"\n    elif n == 23:\n        return \"\u672c\"\n    elif n == 24:\n        return \"\u672c\"\n    elif n == 25:\n        return \"\u672c\"\n    elif n == 26:\n        return \"\u672c\"\n    elif n == 27:\n        return \"\u672c\"\n    elif n == 28:\n        return \"\u672c\"\n    elif n == 29:\n        return \"\u672c\"\n    elif n == 30:\n        return \"\u672c\"\n    elif n == 31:\n        return \"\u672c\"\n    elif n == 32:\n        return \"\u672c\"\n    elif n == 33:\n        return \"\u672c\"\n    elif n == 34:\n        return \"\u672c\"\n    elif n == 35:\n        return \"\u672c\"\n    elif n == 36:\n        return \"\u672c\"\n    elif n == 37:\n        return \"\u672c\"\n    elif n == 38:\n        return \"\u672c\"\n    elif n == 39:\n        return \"\u672c\"\n    elif n == 40:\n        return \"\u672c\"\n    elif n == 41:\n        return \"\u672c\"\n    elif n == 42:\n        return \"\u672c\"\n    elif n == 43:\n        return \"\u672c\"\n    elif n == 44:\n        return \"\u672c\"\n    elif n == 45:\n        return \"\u672c\"\n    elif n == 46:\n        return \"\u672c\"\n    elif n == 47:\n        return \"\u672c\"\n    elif n == 48:\n        return \"\u672c\"\n    elif n == 49:\n        return \"\u672c\"\n    elif n == 50:\n        return \"\u672c\"\n    elif n == 51:\n        return \"\u672c\"\n    elif n == 52:\n        return \"\u672c\"\n    elif n == 53:\n        return \"\u672c\"\n    elif n == 54:\n        return \"\u672c\"\n    elif n == 55:\n        return \"\u672c\"\n    elif n == 56:\n        return \"\u672c\"\n    elif n == 57:\n        return \"\u672c\"\n    elif n == 58:\n        return \"\u672c\"\n    elif n == 59:\n        return \"\u672c\"\n    elif n == 60:\n        return \"\u672c\"\n    elif n == 61:\n        return \"\u672c\"\n    elif n == 62:\n        return \"\u672c\"\n    elif n == 63:\n        return \"\u672c\"\n    elif n == 64:\n        return \"\u672c\"\n    elif n == 65:\n        return \"\u672c\"\n    elif n == 66:\n        return \"\u672c\"\n    elif n == 67:\n        return \"\u672c\"\n    elif n == 68:\n        return \"\u672c\"\n    elif n == 69:\n        return \"\u672c\"\n    elif n == 70:\n        return \"\u672c\"\n    elif n == 71:\n        return \"\u672c\"\n    elif n == 72:\n        return \"\u672c\"\n    elif n == 73:\n        return \"\u672c\"\n    elif n == 74:\n        return \"\u672c\"\n    elif n == 75:\n        return \"\u672c\"\n    elif n == 76:\n        return \"\u672c\"\n    elif n == 77:\n        return \"\u672c\"\n    elif n == 78:\n        return \"\u672c\"\n    elif n == 79:\n        return \"\u672c\"\n    elif n == 80:\n        return \"\u672c\"\n    elif n == 81:\n        return \"\u672c\"\n    elif n == 82:\n        return \"\u672c\"\n    elif n == 83:\n        return \"\u672c\"\n    elif n == 84:\n        return \"\u672c\"\n    elif n == 85:\n        return \"\u672c\"\n    elif n == 86:\n        return \"\u672c\"\n    elif n == 87:\n        return \"\u672c\"\n    elif n == 88:\n        return \"\u672c\"\n    elif n == 89:\n        return \"\u672c\"\n    elif n == 90:\n        return \"\u672c\"\n    elif n == 91:\n        return \"\u672c\"\n    elif n == 92:\n        return \"\u672c\"\n    elif n == 93:\n        return \"\u672c\"\n    elif n == 94:\n        return \"\u672c\"\n    elif n == 95:\n        return \"\u672c\"\n    elif n == 96:\n        return \"\u672c\"\n    elif n == 97:\n        return \"\u672c\"\n    elif n == 98:\n        return \"\u672c\"\n    elif n == 99:\n        return \"\u672c\"\n    elif n == 100:\n        return \"\u672c\"\n    elif n == 101:\n        return \"\u672c\"\n    elif n == 102:\n        return \"\u672c\"\n    elif n == 103:\n        return \"\u672c\"\n    elif n == 104:\n        return \"\u672c\"\n    elif n == 105:\n        return \"\u672c\"\n    elif n == 106:\n        return \"\u672c\"\n    elif n == 107:\n        return \"\u672c\"\n    elif n == 108:\n        return \"\u672c\"\n    elif n == 109:\n        return \"\u672c\"\n    elif n == 110:\n        return \"\u672c\"\n    elif n == 111:\n        return \"\u672c\"\n    elif n == 112:\n        return \"\u672c\"\n    elif n == 113:\n        return \"\u672c\"\n    elif n == 114:\n        return \"\u672c\"\n    elif n == 115:\n        return \"\u672c\"\n    elif n == 116:\n        return \"\u672c\"\n    elif n == 117:\n",
        "test": "",
        "num_ids": 1770,
        "indeed": false
    },
    {
        "number": 4300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d_1 = list(map(int, stdin.split()))\n    d_2 = list(map(int, stdin.split()))\n    d_3 = list(map(int, stdin.split()))\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 = [0] + d_2\n    d_3 = [0] + d_3\n    d_1 = [0] + d_1\n    d_2 =",
        "test": "",
        "num_ids": 1666,
        "indeed": false
    },
    {
        "number": 4301,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    A.sort()\n    max_val = A[n-1]\n    for i in range(n-2, -1, -1):\n        if A[i] > max_val:\n            max_val = A[i]\n    return str(max_val)\n",
        "test": "",
        "num_ids": 92,
        "indeed": false
    },
    {
        "number": 4302,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return str(A - B)\n    else:\n        return str(B - A)\n\ndef",
        "test": "",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4303,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x_1, x_2, x_3, x_4 = map(int, stdin.split())\n    x_1, x_2, x_3, x_4 = sorted([x_1, x_2, x_3, x_4])\n    x_1 = x_1 - 1\n    x_2 = x_2 - 1\n    x_3 = x_3 - 1\n    x_4 = x_4 - 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 + 1\n    x_1 = x_1 + 1\n    x_2 = x_2 + 1\n    x_3 = x_3 + 1\n    x_4 = x_4 +",
        "test": "",
        "num_ids": 1705,
        "indeed": false
    },
    {
        "number": 4304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return str(a-b)\n    else:\n        return str(b-a)\n\ndef",
        "test": "",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    if H < 0 or A < 0:\n        return '0'\n    if H == 0:\n        return '1'\n    if A == 0:\n        return '2'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n        return '0'\n    if A > H:\n",
        "test": "",
        "num_ids": 1808,
        "indeed": false
    },
    {
        "number": 4306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A == 0 and B == 0 and C == 0 and D == 0:\n        return 'inf'\n    if A == 0 and B == 0 and C == 0 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 0:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        return 'inf'\n    if A == 0 and B == 0 and C == 100 and D == 100:\n        ",
        "test": "",
        "num_ids": 1740,
        "indeed": false
    },
    {
        "number": 4307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 200:\n        return \"0\"\n    count = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            count += 1\n        if i % 3 == 0:\n            count += 1\n        if i % 5 == 0:\n            count += 1\n        if i % 7 == 0:\n            count += 1\n    return str(count)\n",
        "test": "",
        "num_ids": 108,
        "indeed": false
    },
    {
        "number": 4308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    if N == 0 or K == 0:\n        return \"0\"\n    if N == 1:\n        return str(K)\n    if K == 1:\n        return str(N)\n    if N > 1:\n        return str(N-1) + \" \" + str(K)\n    if K > 1:\n        return str(N) + \" \" + str(K-1)\n    return str(N-1) + \" \" + str(K)\n",
        "test": "",
        "num_ids": 126,
        "indeed": false
    },
    {
        "number": 4309,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return \"11\"\n    if N == 3:\n        return \"111\"\n    if N == 4:\n        return \"1111\"\n    if N == 5:\n        return \"11111\"\n    if N == 6:\n        return \"11111111\"\n    if N == 7:\n        return \"111111111111\"\n    if N == 8:\n        return \"1111111111111111\"\n    if N == 9:\n        return \"11111111111111111111\"\n    if N == 10:\n        return \"111111111111111111111111\"\n    if N == 11:\n        return \"1111111111111111111111111111\"\n    if N == 12:\n        return \"11111111111111111111111111111111\"\n    if N == 13:\n        return \"111111111111111111111111111111111111\"\n    if N == 14:\n        return \"1111111111111111111111111111111111111111\"\n    if N == 15:\n        return \"11111111111111111111111111111111111111111111\"\n    if N == 16:\n        return \"111111111111111111111111111111111111111111111111\"\n    if N == 17:\n        return \"1111111111111111111111111111111111111111111111111111\"\n    if N == 18:\n        return \"11111111111111111111111111111111111111111111111111111111\"\n    if N == 19:\n        return \"111111111111111111111111111111111111111111111111111111111111\"\n    if N == 20:\n        return \"1111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 21:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 22:\n        return \"111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 23:\n        return \"1111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 24:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 25:\n        return \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 26:\n        return \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 27:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 28:\n        return \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 29:\n        return \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 30:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 31:\n        return \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 32:\n        return \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 33:\n        return \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 34:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 35:\n        return \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 36:\n        return \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 37:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 38:\n        return \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 39:\n        return \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 40:\n        return \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n    if N == 41:\n        return \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "test": "",
        "num_ids": 1851,
        "indeed": false
    },
    {
        "number": 4310,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    A_1 = abs(A_1)\n    A_2 = abs(A_2)\n    A_3 = abs(A_3)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A_2 = min(A_1, A_2)\n    A_3 = min(A_1, A_2)\n    A_1 = min(A_1, A_2, A_3)\n    A",
        "test": "",
        "num_ids": 1798,
        "indeed": false
    },
    {
        "number": 4311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_5 = [int(i) for i in stdin.split()]\n    a_5.sort()\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a_5[::-1]\n    a_5 = [i for i in a_5 if i > 0]\n    a_5 = a",
        "test": "",
        "num_ids": 1751,
        "indeed": false
    },
    {
        "number": 4312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A > B:\n        if A > C:\n            if A > D:\n                return 'Yes'\n            else:\n                return 'No'\n        else:\n            if B > D:\n                return 'Yes'\n            else:\n                return 'No'\n    else:\n        if B > C:\n            if B > D:\n                return 'Yes'\n            else:\n                return 'No'\n        else:\n            if C > D:\n                return 'Yes'\n            else:\n                return 'No'\n",
        "test": "",
        "num_ids": 145,
        "indeed": false
    },
    {
        "number": 4313,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, C = map(int, stdin.split())\n    X = 0\n    Y = 0\n    for i in range(N):\n        X += int(stdin[i])\n        Y += C * int(stdin[i])\n    return str(X-Y)\n\n-----Sample Output-----\n5\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 81,
        "indeed": false
    },
    {
        "number": 4314,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    a = [list(map(int, input().split())) for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 1:\n                a[i][j] = 0\n            elif a[i][j] == 2:\n                a[i][j] = 0\n            elif a[i][j] == 3:\n                a[i][j] = 0\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 0:\n                a[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '.':\n                a[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '#':\n                a[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '.':\n                a[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '#':\n                a[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '.':\n                a[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '#':\n                a[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '.':\n                a[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '#':\n                a[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '.':\n                a[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '#':\n                a[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '.':\n                a[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '#':\n                a[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '.':\n                a[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '#':\n                a[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '.':\n                a[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '#':\n                a[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '.':\n                a[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '#':\n                a[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '.':\n                a[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '#':\n                a[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '.':\n                a[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '#':\n                a[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '.':\n                a[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '#':\n                a[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '.':\n                a[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '#':\n                a[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '.':\n                a[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '#':\n                a[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '.':\n                a[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '#':\n                a[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '.':\n                a[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '#':\n                a[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '.':\n                a[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '#':\n                a[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '",
        "test": "",
        "num_ids": 1639,
        "indeed": false
    },
    {
        "number": 4315,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(int(stdin))/10**2)\n\ndef",
        "test": "",
        "num_ids": 20,
        "indeed": false
    },
    {
        "number": 4316,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    if len(s)!= 2:\n        return \"No\"\n    if s[0]!= s[1]:\n        return \"No\"\n    return \"Yes\"\n\ndef",
        "test": "",
        "num_ids": 53,
        "indeed": false
    },
    {
        "number": 4317,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(max(A + B, A - B, A * B))\n    return str(max(A + B, A - B, A * B))\n\ndef",
        "test": "",
        "num_ids": 55,
        "indeed": false
    },
    {
        "number": 4318,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    H_1 = int(stdin.strip())\n    H_2 = int(stdin.strip())\n    H_3 = int(stdin.strip())\n    H_4 = int(stdin.strip())\n    H_5 = int(stdin.strip())\n    H_6 = int(stdin.strip())\n    H_7 = int(stdin.strip())\n    H_8 = int(stdin.strip())\n    H_9 = int(stdin.strip())\n    H_10 = int(stdin.strip())\n    H_11 = int(stdin.strip())\n    H_12 = int(stdin.strip())\n    H_13 = int(stdin.strip())\n    H_14 = int(stdin.strip())\n    H_15 = int(stdin.strip())\n    H_16 = int(stdin.strip())\n    H_17 = int(stdin.strip())\n    H_18 = int(stdin.strip())\n    H_19 = int(stdin.strip())\n    H_20 = int(stdin.strip())\n    H_21 = int(stdin.strip())\n    H_22 = int(stdin.strip())\n    H_23 = int(stdin.strip())\n    H_24 = int(stdin.strip())\n    H_25 = int(stdin.strip())\n    H_26 = int(stdin.strip())\n    H_27 = int(stdin.strip())\n    H_28 = int(stdin.strip())\n    H_29 = int(stdin.strip())\n    H_30 = int(stdin.strip())\n    H_31 = int(stdin.strip())\n    H_32 = int(stdin.strip())\n    H_33 = int(stdin.strip())\n    H_34 = int(stdin.strip())\n    H_35 = int(stdin.strip())\n    H_36 = int(stdin.strip())\n    H_37 = int(stdin.strip())\n    H_38 = int(stdin.strip())\n    H_39 = int(stdin.strip())\n    H_40 = int(stdin.strip())\n    H_41 = int(stdin.strip())\n    H_42 = int(stdin.strip())\n    H_43 = int(stdin.strip())\n    H_44 = int(stdin.strip())\n    H_45 = int(stdin.strip())\n    H_46 = int(stdin.strip())\n    H_47 = int(stdin.strip())\n    H_48 = int(stdin.strip())\n    H_49 = int(stdin.strip())\n    H_50 = int(stdin.strip())\n    H_51 = int(stdin.strip())\n    H_52 = int(stdin.strip())\n    H_53 = int(stdin.strip())\n    H_54 = int(stdin.strip())\n    H_55 = int(stdin.strip())\n    H_56 = int(stdin.strip())\n    H_57 = int(stdin.strip())\n    H_58 = int(stdin.strip())\n    H_59 = int(stdin.strip())\n    H_60 = int(stdin.strip())\n    H_61 = int(stdin.strip())\n    H_62 = int(stdin.strip())\n    H_63 = int(stdin.strip())\n    H_64 = int(stdin.strip())\n    H_65 = int(stdin.strip())\n    H_66 = int(stdin.strip())\n    H_67 = int(stdin.strip())\n    H_68 = int(stdin.strip())\n    H_69 = int(stdin.strip())\n    H_70 = int(stdin.strip())\n    H_71 = int(stdin.strip())\n    H_72 = int(stdin.strip())\n    H_73 = int(stdin.strip())\n    H_74 = int(stdin.strip())\n    H_75 = int(stdin.strip())\n    H_76 = int(stdin.strip())\n    H_77 = int(stdin.strip())\n    H_78 = int(stdin.strip())\n    H_79 = int(stdin.strip())\n    H_80 = int(stdin.strip())\n    H_81 = int(stdin.strip())\n    H_82 = int(stdin.strip())\n    H_83 = int(stdin.strip())\n    H_84 = int(stdin.strip())\n    H_85 = int(stdin.strip())\n    H_86 = int(stdin.strip())\n    H_87 = int(stdin.strip())\n    H_88 = int(stdin.strip())\n    H_89 = int(stdin.strip())\n    H_90 = int(stdin.strip())\n    H_91 = int(stdin.strip())\n    H_92 = int(stdin.strip())\n    H_93 = int(stdin.strip())\n    H_94 = int(stdin.strip())\n    H_95 = int(stdin.strip())\n    H_96 = int(stdin.strip())\n    H_97 = int(stdin.strip())\n    H_98 = int(stdin.strip())\n    H_99 = int(stdin.strip())\n    H_100 = int(stdin.strip())\n    H_101 = int(stdin.strip())\n    H_102 = int(stdin.strip())\n    H_103 = int(stdin.strip())\n    H_104 = int(stdin.strip())\n    H_105 = int(stdin.strip())\n    H_106 = int(stdin.strip())\n    H_107 = int(stdin.strip())\n    H_108 = int(stdin.strip())\n    H_109 = int(stdin.strip())\n    H_110 = int(stdin.strip())\n    H_111 = int(stdin.strip())\n    H_112 = int(stdin.strip())\n    H_113 = int(stdin.strip())\n    H_114 = int(stdin.strip())\n    H_115 = int(stdin.strip())\n    H_116 = int(stdin.strip())\n    H_117 = int(stdin.strip())\n    H_118 = int(stdin.strip())\n    H_119 = int(stdin.strip())\n    H_120 = int(stdin.strip())\n    H_121 = int(stdin.strip())\n    H_122 = int(stdin.strip())\n    H_123 = int(stdin.strip())\n    H_124 = int(stdin.strip())\n    H_125 = int(stdin.strip())\n    H_126 = int(stdin.strip())\n    H_127 = int(stdin.strip())\n    H_128 = int(stdin.strip())\n    H_129 = int(stdin.strip())\n    H_130 = int(stdin.strip())\n    H_131 = int(stdin.strip())\n    H_132 = int(stdin.strip())\n    H_133 = int(stdin.strip",
        "test": "",
        "num_ids": 1739,
        "indeed": false
    },
    {
        "number": 4319,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    t = 0\n    for i in range(n):\n        if a[i] == a[i-1]:\n            t += 1\n        else:\n            t = 0\n    return str(t)\n",
        "test": "",
        "num_ids": 85,
        "indeed": false
    },
    {
        "number": 4320,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return str(n)\n    else:\n        return solution(n-1) + solution(n-2) + solution(n-3) + solution(n-4) + solution(n-5)\n\ndef",
        "test": "",
        "num_ids": 67,
        "indeed": false
    },
    {
        "number": 4321,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % 10 == 0:\n        return str(n // 10)\n    else:\n        return str(n // 10) + '0' + str(n % 10)\n\ndef",
        "test": "",
        "num_ids": 60,
        "indeed": false
    },
    {
        "number": 4322,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a.append(a[-1] + 2)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.sort()\n    a.",
        "test": "",
        "num_ids": 1439,
        "indeed": false
    },
    {
        "number": 4323,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    if sum(a) + sum(b) > m:\n        return \"-1\"\n    if sum(a) + sum(b) == m:\n        return min(a) + min(b)\n    return min(a) + min(b)\n",
        "test": "",
        "num_ids": 120,
        "indeed": false
    },
    {
        "number": 4324,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    s = stdin.split()\n    s = [s[i:i+a] for i in range(0, len(s), a)]\n    s = ''.join(s)\n    s = s.lower()\n    s = s.replace(' ', '')\n    s = s.replace('\\n', '')\n    s = s.replace('\\t', '')\n    s = s.replace(' ', '')\n    s = s.replace('\\u00A0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('\\u00C0', '')\n    s = s.replace('",
        "test": "",
        "num_ids": 1534,
        "indeed": false
    },
    {
        "number": 4325,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    takoyaki = [int(i) for i in stdin.split()]\n    takoyaki.sort()\n    answer = 0\n    for i in range(N):\n        answer += takoyaki[i] * (T - 1)\n    return str(answer)\n\ndef",
        "test": "",
        "num_ids": 86,
        "indeed": false
    },
    {
        "number": 4326,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 3!= 0:\n        return 0\n    else:\n        return N // 3\n\ndef",
        "test": "",
        "num_ids": 36,
        "indeed": false
    },
    {
        "number": 4327,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    if A > P:\n        return str(A - P)\n    else:\n        return str(P - A)\n",
        "test": "",
        "num_ids": 45,
        "indeed": false
    },
    {
        "number": 4328,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A % B == 0:\n        return str(A + B)\n    else:\n        return str(B - A)\n",
        "test": "",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4329,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    if len(s)!= 2:\n        return \"No\"\n    if s[0]!= \"chokudai\" or s[1]!= \"chokudaiz\":\n        return \"No\"\n    return \"Yes\"\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 71,
        "indeed": false
    },
    {
        "number": 4330,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return 'IMPOSSIBLE'\n    if A > B:\n        return 'IMPOSSIBLE'\n    if A == B:\n        return str(B - A)\n    if A < B:\n        return str(B - A) +'' + str(A - B)\n    return str(B - A) +'' + str(A - B) +'' + str(B - A)\n\n-----Sample Output-----\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16\n\n2 16",
        "test": "",
        "num_ids": 1860,
        "indeed": false
    },
    {
        "number": 4331,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 7 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "",
        "num_ids": 35,
        "indeed": false
    },
    {
        "number": 4332,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nIn this input, N=12.\nAs S(12) = 1 + 2 = 3, S(N) does not divide N.\ndef",
        "test": "",
        "num_ids": 68,
        "indeed": false
    },
    {
        "number": 4333,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1,y_1,x_2,y_2 = map(int,stdin.split())\n    x_3,y_3,x_4,y_4 = map(int,(x_1,y_1,x_2,y_2))\n    if x_3 > x_4:\n        x_3,x_4 = x_4,x_3\n    if y_3 > y_4:\n        y_3,y_4 = y_4,y_3\n    if x_3 == x_4:\n        x_3,y_3 = y_4,x_3\n    if y_3 == y_4:\n        y_3,y_4 = x_4,y_3\n    if x_3 < x_4:\n        x_3,x_4 = x_4,x_3\n    if y_3 < y_4:\n        y_3,y_4 = y_4,y_3\n    if x_3 > x_4:\n        x_3,x_4 = x_4,x_3\n    if y_3 > y_4:\n        y_3,y_4 = y_4,y_3\n    print(x_3,y_3,x_4,y_4)\n    return str(x_3)+','+str(y_3)+','+str(x_4)+','+str(y_4)\n",
        "test": "",
        "num_ids": 344,
        "indeed": false
    },
    {
        "number": 4334,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    S = S.lower()\n    T = T.lower()\n    A, B = map(int, S.split())\n    U = T.split()\n    U = U[0]\n    U = U.lower()\n    A = A - 1\n    B = B - 1\n    if A < 0 or B < 0 or A > 10 or B > 10:\n        return \"0\"\n    if U == T:\n        return \"0\"\n    if U in U:\n        return \"0\"\n    if A == B:\n        return \"0\"\n    if A < B:\n        return \"0\"\n    if A > B:\n        return \"0\"\n    if A < B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n    if A > B < A + B:\n        return \"0\"\n",
        "test": "",
        "num_ids": 1785,
        "indeed": false
    },
    {
        "number": 4335,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = stdin.strip()\n    if len(S) == N:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef",
        "test": "",
        "num_ids": 49,
        "indeed": false
    },
    {
        "number": 4336,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x = map(int, stdin.split())\n    if W > H:\n        return \"0\"\n    if x > H:\n        return \"0\"\n    if x > W:\n        return \"0\"\n    if x > 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x < 0:\n        return \"0\"\n    if x",
        "test": "",
        "num_ids": 1737,
        "indeed": false
    },
    {
        "number": 4337,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(map(int, stdin.strip().split()))\n    s.sort()\n    for i in range(n):\n        if s[i] == s[i+1]:\n            return 'Four'\n        elif s[i] == s[i+2]:\n            return 'Four'\n        elif s[i] == s[i+3]:\n            return 'Four'\n    return 'Three'\n\ndef",
        "test": "",
        "num_ids": 115,
        "indeed": false
    },
    {
        "number": 4338,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a_i = int(stdin.split()[1])\n    b_i = int(stdin.split()[2])\n    max_b = max(b_i, a_i)\n    if max_b == 0:\n        return str(0)\n    if max_b == 1:\n        return str(1)\n    if max_b == 2:\n        return str(2)\n    if max_b == 3:\n        return str(3)\n    if max_b == 4:\n        return str(4)\n    if max_b == 5:\n        return str(5)\n    if max_b == 6:\n        return str(6)\n    if max_b == 7:\n        return str(7)\n    if max_b == 8:\n        return str(8)\n    if max_b == 9:\n        return str(9)\n    if max_b == 10:\n        return str(10)\n    if max_b == 11:\n        return str(11)\n    if max_b == 12:\n        return str(12)\n    if max_b == 13:\n        return str(13)\n    if max_b == 14:\n        return str(14)\n    if max_b == 15:\n        return str(15)\n    if max_b == 16:\n        return str(16)\n    if max_b == 17:\n        return str(17)\n    if max_b == 18:\n        return str(18)\n    if max_b == 19:\n        return str(19)\n    if max_b == 20:\n        return str(20)\n    if max_b == 21:\n        return str(21)\n    if max_b == 22:\n        return str(22)\n    if max_b == 23:\n        return str(23)\n    if max_b == 24:\n        return str(24)\n    if max_b == 25:\n        return str(25)\n    if max_b == 26:\n        return str(26)\n    if max_b == 27:\n        return str(27)\n    if max_b == 28:\n        return str(28)\n    if max_b == 29:\n        return str(29)\n    if max_b == 30:\n        return str(30)\n    if max_b == 31:\n        return str(31)\n    if max_b == 32:\n        return str(32)\n    if max_b == 33:\n        return str(33)\n    if max_b == 34:\n        return str(34)\n    if max_b == 35:\n        return str(35)\n    if max_b == 36:\n        return str(36)\n    if max_b == 37:\n        return str(37)\n    if max_b == 38:\n        return str(38)\n    if max_b == 39:\n        return str(39)\n    if max_b == 40:\n        return str(40)\n    if max_b == 41:\n        return str(41)\n    if max_b == 42:\n        return str(42)\n    if max_b == 43:\n        return str(43)\n    if max_b == 44:\n        return str(44)\n    if max_b == 45:\n        return str(45)\n    if max_b == 46:\n        return str(46)\n    if max_b == 47:\n        return str(47)\n    if max_b == 48:\n        return str(48)\n    if max_b == 49:\n        return str(49)\n    if max_b == 50:\n        return str(50)\n    if max_b == 51:\n        return str(51)\n    if max_b == 52:\n        return str(52)\n    if max_b == 53:\n        return str(53)\n    if max_b == 54:\n        return str(54)\n    if max_b == 55:\n        return str(55)\n    if max_b == 56:\n        return str(56)\n    if max_b == 57:\n        return str(57)\n    if max_b == 58:\n        return str(58)\n    if max_b == 59:\n        return str(59)\n    if max_b == 60:\n        return str(60)\n    if max_b == 61:\n        return str(61)\n    if max_b == 62:\n        return str(62)\n    if max_b == 63:\n        return str(63)\n    if max_b == 64:\n        return str(64)\n    if max_b == 65:\n        return str(65)\n    if max_b == 66:\n        return str(66)\n    if max_b == 67:\n        return str(67)\n    if max_b == 68:\n        return str(68)\n    if max_b == 69:\n        return str(69)\n    if max_b == 70:\n        return str(70)\n    if max_b == 71:\n        return str(71)\n    if max_b == 72:\n        return str(72)\n    if max_b == 73:\n        return str(73)\n    if max_b == 74:\n        return str(74)\n    if max_b == 75:\n        return str(75)\n    if max_b == 76:\n        return str(76)\n    if max_b == 77:\n        return str(77)\n    if max_b == 78:\n        return str(78)\n    if max_b == 79:\n        return str(79)\n    if max_b == 80:\n        return str(80)\n    if max_b == 81:\n        return str(81)\n    if max_b == 82:\n        return str(82)\n    if max_b == 83:\n        return str(83)\n    if max_b == 84:\n        return str(84)\n    if max_b == 85:\n        return str(85)\n    if max_b == 86:\n        return str(86)\n    if max_b == 87:\n        return str(87)\n    if max_b == 88:\n        return str(88)\n    if max_b == 89:\n        return str(89)\n    ",
        "test": "",
        "num_ids": 1507,
        "indeed": false
    },
    {
        "number": 4339,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    good = 0\n    for i in range(n):\n        if a[i] + b[i] > b[i] + a[i]:\n            good += 1\n    return str(good)\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i, b_i <= 10^9\n\n-----Time Limit-----\n1 sec\n\n-----Space Limit-----\n1 sec\n\n-----Alternatives-----\n\nThe time complexity of the above algorithm is O(n log n).\nThe space complexity of the above algorithm is O(n).\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 195,
        "indeed": false
    },
    {
        "number": 4340,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    answer = ''\n    for i in range(n):\n        answer += str(a[i])\n    return answer\n\n-----Example-----\n\nInput\n5\n1 2 4 5 10\n\nOutput\n1 1 3 5 9\n\nInput\n10\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\n\nOutput\n9999 9 50605065 1 5 89 5 999999999 60506055 999999999\n\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a[i] <= 10^9\n\n-----Time Limit-----\nO(n)\n\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 10\n\nSample Output\n\n1 1 3 5 9\n\nExplanation\n\nMishka's algorithm is applied to the array $a$ and replaces the occurrences of $1$ with $2$ and replaces the occurrences of $2$ with $1$.\n\nMishka's algorithm is applied to the array $a$ and replaces the occurrences of $3$ with $4$ and replaces the occurrences of $4$ with $3$.\n\nMishka's algorithm is applied to the array $a$ and replaces the occurrences of $5$ with $6$ and replaces the occurrences of $6$ with $5$.\n\nMishka's algorithm is applied to the array $a$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$.\n\nMishka's algorithm is applied to the array $a$ and replaces the occurrences of $10^9$ with $10^9 - 1$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$.\n\nMishka's algorithm is applied to the array $a$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$.\n\nMishka's algorithm is applied to the array $a$ and replaces the occurrences of $10^9$ with $10^9 - 1$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$.\n\nMishka's algorithm is applied to the array $a$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$.\n\nMishka's algorithm is applied to the array $a$ and replaces the occurrences of $10^9$ with $10^9 - 1$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$.\n\nMishka's algorithm is applied to the array $a$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$.\n\nMishka's algorithm is applied to the array $a$ and replaces the occurrences of $10^9$ with $10^9 - 1$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$.\n\nMishka's algorithm is applied to the array $a$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$.\n\nMishka's algorithm is applied to the array $a$ and replaces the occurrences of $10^9$ with $10^9 - 1$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$.\n\nMishka's algorithm is applied to the array $a$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$.\n\nMishka's algorithm is applied to the array $a$ and replaces the occurrences of $10^9$ with $10^9 - 1$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$.\n\nMishka's algorithm is applied to the array $a$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$.\n\nMishka's algorithm is applied to the array $a$ and replaces the occurrences of $10^9$ with $10^9 - 1$ and replaces the occurrences of $10^9 - 1$ with $10^9 - 1$.\n\nMishka's",
        "test": "",
        "num_ids": 1089,
        "indeed": false
    },
    {
        "number": 4341,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        edges.append(tuple(map(int, stdin.split())))\n    \n    visited = [False] * (n + 1)\n    visited[0] = True\n    \n    def dfs(v):\n        visited[v] = True\n        for u in range(n):\n            if not visited[u] and edges[u][0] == v:\n                dfs(u)\n        return visited\n    \n    answer = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            answer += 1\n            visited = dfs(i)\n    return answer\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 185,
        "indeed": false
    },
    {
        "number": 4342,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(",
        "test": "",
        "num_ids": 1369,
        "indeed": false
    },
    {
        "number": 4343,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    s = stdin.strip().split()\n    t = stdin.strip().split()\n    s.sort()\n    t.sort()\n    if len(s) % 2 == 1:\n        return s[int(len(s)/2)]\n    else:\n        return s[int(len(s)/2) - 1] + t[int(len(t)/2)]\n",
        "test": "",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 4344,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    students = list(map(int, stdin.split()))\n    students.sort()\n    answer = []\n    for i in range(k):\n        answer.append(students[i])\n    return \"YES\" if len(set(answer)) == k else \"NO\"\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= k <= n\n1 <= a_i <= 100\n\n-----Time Limit Exceeded-----\n\nTime Limit: 1 second\n\n-----Space Limit Exceeded-----\n\nTime Limit: 1 second\n\n-----Submissions Limit Exceeded-----\n\nTime Limit: 1 second\n\n-----Alternatives for this problem.\n\nTime Limit: 1 second\n\n-----Submissions for this problem.\n\nTime Limit: 1 second\n\n-----Constraints for this problem.\n\nTime Limit: 1 second\n\n-----Input for Coding Question.\n\nThe first line contains an integer $n$ and $k$ ($1 \\le k \\le n \\le 100$) \u2014 the number of students and the size of the team you have to form.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe third line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe fourth line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe fifth line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe sixth line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe seventh line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe eighth line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe ninth line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe tenth line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe eleventh line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe twelfth line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe thirteenth line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe fourteenth line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe fifteenth line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe sixteenth line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe seventeenth line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe eighteenth line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe nineteenth line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe twentieth line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe twentieth line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe twentieth line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe twentieth line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe twentieth line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the rating of $i$-th student.\n\nThe twentieth line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_",
        "test": "",
        "num_ids": 1591,
        "indeed": false
    },
    {
        "number": 4345,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    if a[0] > a[1]:\n        return \"NO\"\n    if a[-1] < a[0]:\n        return \"NO\"\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "",
        "num_ids": 110,
        "indeed": false
    },
    {
        "number": 4346,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = list(map(int, stdin.strip().split()))\n    l.sort()\n    answer = 0\n    for i in range(n):\n        answer += l[i] * (i + 1)\n    return str(answer)\n\ndef",
        "test": "",
        "num_ids": 73,
        "indeed": false
    },
    {
        "number": 4347,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(n//2)\n    else:\n        return str(n//2) + str(n//2)\n",
        "test": "",
        "num_ids": 48,
        "indeed": false
    },
    {
        "number": 4348,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    s = list(s)\n    s = [s[i] for i in range(n)]\n    s = ''.join(s)\n    s = s.replace('u', '')\n    s = s.replace('c', '')\n    s = s.replace('b', '')\n    s = s.replace('a', '')\n    s = s.replace(' ', '')\n    s = s.replace('\\n', '')\n    s = s.replace('\\t', '')\n    s = s.replace('\\r', '')\n    s = s.replace('\\x0b', '')\n    s = s.replace('\\x0c', '')\n    s = s.replace('\\x0d', '')\n    s = s.replace('\\x0e', '')\n    s = s.replace('\\x0f', '')\n    s = s.replace('\\x10', '')\n    s = s.replace('\\x11', '')\n    s = s.replace('\\x12', '')\n    s = s.replace('\\x13', '')\n    s = s.replace('\\x14', '')\n    s = s.replace('\\x15', '')\n    s = s.replace('\\x16', '')\n    s = s.replace('\\x17', '')\n    s = s.replace('\\x18', '')\n    s = s.replace('\\x19', '')\n    s = s.replace('\\x1a', '')\n    s = s.replace('\\x1b', '')\n    s = s.replace('\\x1c', '')\n    s = s.replace('\\x1d', '')\n    s = s.replace('\\x1e', '')\n    s = s.replace('\\x1f', '')\n    s = s.replace('\\x20', '')\n    s = s.replace('\\x21', '')\n    s = s.replace('\\x22', '')\n    s = s.replace('\\x23', '')\n    s = s.replace('\\x24', '')\n    s = s.replace('\\x25', '')\n    s = s.replace('\\x26', '')\n    s = s.replace('\\x27', '')\n    s = s.replace('\\x28', '')\n    s = s.replace('\\x29', '')\n    s = s.replace('\\x2a', '')\n    s = s.replace('\\x2b', '')\n    s = s.replace('\\x2c', '')\n    s = s.replace('\\x2d', '')\n    s = s.replace('\\x2e', '')\n    s = s.replace('\\x2f', '')\n    s = s.replace('\\x30', '')\n    s = s.replace('\\x31', '')\n    s = s.replace('\\x32', '')\n    s = s.replace('\\x33', '')\n    s = s.replace('\\x34', '')\n    s = s.replace('\\x35', '')\n    s = s.replace('\\x36', '')\n    s = s.replace('\\x37', '')\n    s = s.replace('\\x38', '')\n    s = s.replace('\\x39', '')\n    s = s.replace('\\x3a', '')\n    s = s.replace('\\x3b', '')\n    s = s.replace('\\x3c', '')\n    s = s.replace('\\x3d', '')\n    s = s.replace('\\x3e', '')\n    s = s.replace('\\x3f', '')\n    s = s.replace('\\x40', '')\n    s = s.replace('\\x41', '')\n    s = s.replace('\\x42', '')\n    s = s.replace('\\x43', '')\n    s = s.replace('\\x44', '')\n    s = s.replace('\\x45', '')\n    s = s.replace('\\x46', '')\n    s = s.replace('\\x47', '')\n    s = s.replace('\\x48', '')\n    s = s.replace('\\x49', '')\n    s = s.replace('\\x4a', '')\n    s = s.replace('\\x4b', '')\n    s = s.replace('\\x4c', '')\n    s = s.replace('\\x4d', '')\n    s = s.replace('\\x4e', '')\n    s = s.replace('\\x4f', '')\n    s = s.replace('\\x50', '')\n    s = s.replace('\\x51', '')\n    s = s.replace('\\x52', '')\n    s = s.replace('\\x53', '')\n    s = s.replace('\\x54', '')\n    s = s.replace('\\x55', '')\n    s = s.replace('\\x56', '')\n    s = s.replace('\\x57', '')\n    s = s.replace('\\x58', '')\n    s = s.replace('\\x59', '')\n    s = s.replace('\\x5a', '')\n    s = s.replace('\\x5b', '')\n    s = s.replace('\\x5c', '')\n    s = s.replace('\\x5d', '')\n    s = s.replace('\\x5e', '')\n    s = s.replace('\\x5f', '')\n    s = s.replace('\\x60', '')\n    s = s.replace('\\x61', '')\n    s = s.replace('\\x62', '')\n    s = s.replace('\\x63', '')\n    s = s.replace('\\x64', '')\n    s = s.replace('\\x65', '')\n    s = s.replace('\\x66', '')\n    s = s.replace('\\x67', '')\n    s = s.replace('\\x68', '')\n    s = s.replace('\\x69', '')\n    s = s.replace('\\x6a', '')\n    s = s.replace('\\x6b', '')\n    s = s.replace('\\x6c', '')\n    s = s.replace('\\x6d', '')\n    s = s.replace('\\x6e', '')\n    s = s.replace('\\x6f', '')\n    s = s.replace('\\x70', '')\n    s = s.replace('\\x71', '')\n    s = s.replace('\\x72', '')\n    s = s.replace('\\",
        "test": "",
        "num_ids": 1662,
        "indeed": false
    },
    {
        "number": 4349,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k_1, k_2, d_j = map(int, stdin.split())\n    k_i = k_1 + k_2\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i",
        "test": "",
        "num_ids": 1344,
        "indeed": false
    },
    {
        "number": 4350,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for _ in range(n):\n        grid.append(stdin.split())\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '*'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = '",
        "test": "",
        "num_ids": 1330,
        "indeed": false
    },
    {
        "number": 4351,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 100:\n        return \"Yes\"\n    if n % 10 == 0:\n        return \"Yes\"\n    if n % 10 == 1:\n        return \"No\"\n    if n % 10 == 2:\n        return \"No\"\n    if n % 10 == 3:\n        return \"No\"\n    if n % 10 == 4:\n        return \"No\"\n    if n % 10 == 5:\n        return \"No\"\n    if n % 10 == 6:\n        return \"No\"\n    if n % 10 == 7:\n        return \"No\"\n    if n % 10 == 8:\n        return \"No\"\n    if n % 10 == 9:\n        return \"No\"\n    if n % 10 == 0:\n        return \"No\"\n    if n % 10 == 1:\n        return \"No\"\n    if n % 10 == 2:\n        return \"No\"\n    if n % 10 == 3:\n        return \"No\"\n    if n % 10 == 4:\n        return \"No\"\n    if n % 10 == 5:\n        return \"No\"\n    if n % 10 == 6:\n        return \"No\"\n    if n % 10 == 7:\n        return \"No\"\n    if n % 10 == 8:\n        return \"No\"\n    if n % 10 == 9:\n        return \"No\"\n    if n % 10 == 0:\n        return \"No\"\n    if n % 10 == 1:\n        return \"No\"\n    if n % 10 == 2:\n        return \"No\"\n    if n % 10 == 3:\n        return \"No\"\n    if n % 10 == 4:\n        return \"No\"\n    if n % 10 == 5:\n        return \"No\"\n    if n % 10 == 6:\n        return \"No\"\n    if n % 10 == 7:\n        return \"No\"\n    if n % 10 == 8:\n        return \"No\"\n    if n % 10 == 9:\n        return \"No\"\n    if n % 10 == 0:\n        return \"No\"\n    if n % 10 == 1:\n        return \"No\"\n    if n % 10 == 2:\n        return \"No\"\n    if n % 10 == 3:\n        return \"No\"\n    if n % 10 == 4:\n        return \"No\"\n    if n % 10 == 5:\n        return \"No\"\n    if n % 10 == 6:\n        return \"No\"\n    if n % 10 == 7:\n        return \"No\"\n    if n % 10 == 8:\n        return \"No\"\n    if n % 10 == 9:\n        return \"No\"\n    if n % 10 == 0:\n        return \"No\"\n    if n % 10 == 1:\n        return \"No\"\n    if n % 10 == 2:\n        return \"No\"\n    if n % 10 == 3:\n        return \"No\"\n    if n % 10 == 4:\n        return \"No\"\n    if n % 10 == 5:\n        return \"No\"\n    if n % 10 == 6:\n        return \"No\"\n    if n % 10 == 7:\n        return \"No\"\n    if n % 10 == 8:\n        return \"No\"\n    if n % 10 == 9:\n        return \"No\"\n    if n % 10 == 0:\n        return \"No\"\n    if n % 10 == 1:\n        return \"No\"\n    if n % 10 == 2:\n        return \"No\"\n    if n % 10 == 3:\n        return \"No\"\n    if n % 10 == 4:\n        return \"No\"\n    if n % 10 == 5:\n        return \"No\"\n    if n % 10 == 6:\n        return \"No\"\n    if n % 10 == 7:\n        return \"No\"\n    if n % 10 == 8:\n        return \"No\"\n    if n % 10 == 9:\n        return \"No\"\n    if n % 10 == 0:\n        return \"No\"\n    if n % 10 == 1:\n        return \"No\"\n    if n % 10 == 2:\n        return \"No\"\n    if n % 10 == 3:\n        return \"No\"\n    if n % 10 == 4:\n        return \"No\"\n    if n % 10 == 5:\n        return \"No\"\n    if n % 10 == 6:\n        return \"No\"\n    if n % 10 == 7:\n        return \"No\"\n    if n % 10 == 8:\n        return \"No\"\n    if n % 10 == 9:\n        return \"No\"\n    if n % 10 == 0:\n        return \"No\"\n    if n % 10 == 1:\n        return \"No\"\n    if n % 10 == 2:\n        return \"No\"\n    if n % 10 == 3:\n        return \"No\"\n    if n % 10 == 4:\n        return \"No\"\n    if n % 10 == 5:\n        return \"No\"\n    if n % 10 == 6:\n        return \"No\"\n    if n % 10 == 7:\n        return \"No\"\n    if n % 10 == 8:\n        return \"No\"\n    if n % 10 == 9:\n        return \"No\"\n    if n % 10 == 0:\n        return \"No\"\n    if n % 10 == 1:\n        return \"No\"\n    if n % 10 == 2:\n        return \"No\"\n    if n % 10 == 3:\n        return \"No\"\n    if n % 10 == 4:\n        return \"No\"\n    if n % 10 == 5:\n        return \"No\"\n    if n % 10 == 6:\n        return \"No\"\n    if n % 10 == 7:\n        return \"No\"\n    if n % 10 == 8:\n        return \"No\"\n    if n % 10 == 9:\n        return \"No\"\n    if n % 10 == 0:\n        return \"No\"\n    if n % 10 == 1:\n        return \"No\"\n    if n % 10 == 2:\n        return \"No\"\n    if n % 10 == 3:\n        return \"No\"\n    if n % 10 == 4:\n        return \"No\"\n    if n % 10 == 5:\n        return \"No\"\n    if n % 10 == 6:\n        return \"No\"\n    if n % 10 == 7:\n        return \"No\"\n    if n % 10 == 8:\n        return \"No\"\n    if n % 10 == 9:\n        return \"No\"\n    if n % 10 == 0:\n        return \"No\"\n    if n % 10 == 1:\n        return \"No\"\n    if n % 10 == 2:\n        return \"No\"\n    if n % 10 == 3:\n        return \"No\"\n    if n % 10 == 4:\n        return \"No\"\n    if n % 10 == 5:\n        return \"No\"\n    if n % 10 == 6:\n        return \"No\"\n    if n % 10 == 7:\n        return \"No\"\n    if n % 10 == 8:\n        return \"No\"\n    if n % 10 == 9:\n        return \"No\"\n    if n % 10 == 0:\n        return \"No\"\n    if n % 10 == 1:\n        return \"No\"\n    if n % 10 == 2:\n        return \"No\"\n    if n % 10 == 3:\n        return \"No\"\n    if n % 10 == 4:\n        return \"No\"\n    if n % 10 == 5:\n        return \"No\"\n    if n % 10 == 6:\n        return \"No\"\n    if n % 10 == 7:\n        return \"No\"\n    if n % 10 == 8:\n        return \"No\"\n    if n % 10 == 9:\n        return \"No\"\n    if n % 10 == 0:\n        return \"No\"\n    if n % 10 == 1:\n        return \"No\"\n    if n % 10 == 2:\n        return \"No\"\n    if n % 10 == 3",
        "test": "",
        "num_ids": 1875,
        "indeed": false
    },
    {
        "number": 4352,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return 'Alice'\n    elif A < B:\n        return 'Bob'\n    else:\n        return 'Draw'\n\n-----Sample Output-----\nDraw\n\n-----Sample Input-----\n8 6\n\n-----Sample Output-----\nBob\n\n8 is written on Bob's card, and 6 is written on Alice's card.\nBob has the stronger card, and thus the output should be Bob.\ndef",
        "test": "",
        "num_ids": 113,
        "indeed": false
    },
    {
        "number": 4353,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\",\")\n    s = [s[0].replace(\",\",\" \"),s[1].replace(\",\",\" \"),s[2].replace(\",\",\" \")]\n    s = \" \".join(s)\n    return s\n\ndef",
        "test": "",
        "num_ids": 63,
        "indeed": false
    },
    {
        "number": 4354,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a_1, b_1 = map(int, stdin.split())\n    c_1, d_1 = map(int, stdin.split())\n    a_N, b_N = map(int, stdin.split())\n    c_M, d_M = map(int, stdin.split())\n    \n    # print(N, M)\n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(c_M, d_M)\n    \n    # print(a_1, b_1)\n    # print(c_1, d_1)\n    # print(a_N, b_N)\n    # print(",
        "test": "",
        "num_ids": 1496,
        "indeed": false
    },
    {
        "number": 4355,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 2:\n        return str(2)\n    else:\n        return str(a + a**2 + a**3)\n",
        "test": "",
        "num_ids": 43,
        "indeed": false
    },
    {
        "number": 4356,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n    B = [list(map(int, input().split())) for _ in range(m)]\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                for k in range(i, n):\n                    if B[k][j] == 1:\n                        for l in range(j, m):\n                            if A[k][l] == 1:\n                                return 'Yes'\n    return 'No'\n",
        "test": "",
        "num_ids": 150,
        "indeed": false
    },
    {
        "number": 4357,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(max(A+B+C, A+B+C+A))\n\ndef",
        "test": "",
        "num_ids": 41,
        "indeed": false
    },
    {
        "number": 4358,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, p_1, p_2, p_N = map(int, stdin.split())\n    if N % 2 == 0:\n        N = N // 2\n    else:\n        N = N - 1\n    p_1 = p_1 / 2\n    p_2 = p_2 / 2\n    p_N = p_N / 2\n    p_1 = p_1 * N\n    p_2 = p_2 * N\n    p_N = p_N * N\n    return str(p_1 + p_2 + p_N)\n",
        "test": "",
        "num_ids": 136,
        "indeed": false
    },
    {
        "number": 4359,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    dishes = []\n    for _ in range(n):\n        dishes.append(list(map(int, stdin.strip().split())))\n    dishes.sort()\n    answer = 0\n    for i in range(n):\n        if i == 0:\n            answer = max(answer, dishes[i][0])\n        else:\n            answer = max(answer, max(dishes[i][0], answer))\n    return str(answer)\n",
        "test": "",
        "num_ids": 120,
        "indeed": false
    },
    {
        "number": 4360,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        else:\n            a[i] = a[i] / a[i-1]\n    for i in range(n-1):\n        if a[i] == 0:\n            a[i] = 1\n        else:\n            a[i] = a[i] / a[i+1]\n    return str(sum(a))\n\n-----Sample Output-----\n7.5\n\n\\frac{1}{\\frac{1}{10} + \\frac{1}{30}} = \\frac{1}{\\frac{4}{30}} = \\frac{30}{4} = 7.5.\nPrinting 7.50001, 7.49999, and so on will also be accepted.\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\endcond\n\n\\",
        "test": "",
        "num_ids": 1741,
        "indeed": false
    },
    {
        "number": 4361,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h_1 = map(int, stdin.split())\n    h_2 = map(int, stdin.split())\n    h_N = map(int, stdin.split())\n    h_max = max(h_1)\n    h_min = min(h_2)\n    h_N = sorted(h_N)\n    h_max = max(h_N)\n    h_min = min(h_N)\n    if h_max - h_min == 2:\n        return str(h_max)\n    else:\n        return str(h_min)\n\n-----Sample Output-----\n2\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 169,
        "indeed": false
    },
    {
        "number": 4362,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin.split()\n    for i in range(len(alpha)):\n        if alpha[i].isupper():\n            print('A')\n        else:\n            print(alpha[i])\n    return ''\n\n-----Sample Output-----\nA\n\nB is uppercase, so we should print A.\ndef",
        "test": "",
        "num_ids": 77,
        "indeed": false
    },
    {
        "number": 4363,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    X, Y, Z = map(int, stdin.split())\n    if (X + Y + Z) % S == 0:\n        return str(X + Y + Z)\n    else:\n        return \"No\"\n",
        "test": "",
        "num_ids": 69,
        "indeed": false
    },
    {
        "number": 4364,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    if len(s)!= 3:\n        return \"NA\"\n    if s[0] == \"Y\" and s[1] == \"M\":\n        return \"NA\"\n    if s[0] == \"M\" and s[1] == \"Y\":\n        return \"NA\"\n    if s[0] == \"M\" and s[1] == \"M\":\n        return \"NA\"\n    if s[0] == \"M\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"M\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"Y\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[1] == \"A\":\n        return \"NA\"\n    if s[0] == \"A\" and s[",
        "test": "",
        "num_ids": 1781,
        "indeed": false
    },
    {
        "number": 4365,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(2)\n    else:\n        return str(3)\n\ndef",
        "test": "",
        "num_ids": 39,
        "indeed": false
    },
    {
        "number": 4366,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'\n    if A > B:\n        A, B = B, A\n    if A < B:\n        A, B = B, A\n    if A == B:\n        return '21'",
        "test": "",
        "num_ids": 1828,
        "indeed": false
    },
    {
        "number": 4367,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    K = 10\n    if N < 10:\n        return str(R)\n    else:\n        return str(R - (10 - K) * (10 - K) * (10 - K))\n",
        "test": "",
        "num_ids": 63,
        "indeed": false
    },
    {
        "number": 4368,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(bin(n).count('1'))[2:]\n\ndef",
        "test": "",
        "num_ids": 35,
        "indeed": false
    },
    {
        "number": 4369,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1:\n        return \"\"\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return \"2\"\n    if N == 3:\n        return \"3\"\n    if N == 4:\n        return \"4\"\n    if N == 5:\n        return \"5\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "",
        "num_ids": 1865,
        "indeed": false
    },
    {
        "number": 4370,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    if a[0] + b[0] == m:\n        return \"Yay!\"\n    else:\n        return \"Not Yay!\"\n\nprint(solution(\"5 4\"))\nprint(solution(\"5 4 2\"))\nprint(solution(\"5 4 3\"))\nprint(solution(\"5 4 4\"))\nprint(solution(\"5 4 5\"))\nprint(solution(\"5 4 6\"))\nprint(solution(\"5 4 7\"))\nprint(solution(\"5 4 8\"))\nprint(solution(\"5 4 9\"))\nprint(solution(\"5 4 10\"))\nprint(solution(\"5 4 11\"))\nprint(solution(\"5 4 12\"))\nprint(solution(\"5 4 13\"))\nprint(solution(\"5 4 14\"))\nprint(solution(\"5 4 15\"))\nprint(solution(\"5 4 16\"))\nprint(solution(\"5 4 17\"))\nprint(solution(\"5 4 18\"))\nprint(solution(\"5 4 19\"))\nprint(solution(\"5 4 20\"))\nprint(solution(\"5 4 21\"))\nprint(solution(\"5 4 22\"))\nprint(solution(\"5 4 23\"))\nprint(solution(\"5 4 24\"))\nprint(solution(\"5 4 25\"))\nprint(solution(\"5 4 26\"))\nprint(solution(\"5 4 27\"))\nprint(solution(\"5 4 28\"))\nprint(solution(\"5 4 29\"))\nprint(solution(\"5 4 30\"))\nprint(solution(\"5 4 31\"))\nprint(solution(\"5 4 32\"))\nprint(solution(\"5 4 33\"))\nprint(solution(\"5 4 34\"))\nprint(solution(\"5 4 35\"))\nprint(solution(\"5 4 36\"))\nprint(solution(\"5 4 37\"))\nprint(solution(\"5 4 38\"))\nprint(solution(\"5 4 39\"))\nprint(solution(\"5 4 40\"))\nprint(solution(\"5 4 41\"))\nprint(solution(\"5 4 42\"))\nprint(solution(\"5 4 43\"))\nprint(solution(\"5 4 44\"))\nprint(solution(\"5 4 45\"))\nprint(solution(\"5 4 46\"))\nprint(solution(\"5 4 47\"))\nprint(solution(\"5 4 48\"))\nprint(solution(\"5 4 49\"))\nprint(solution(\"5 4 50\"))\nprint(solution(\"5 4 51\"))\nprint(solution(\"5 4 52\"))\nprint(solution(\"5 4 53\"))\nprint(solution(\"5 4 54\"))\nprint(solution(\"5 4 55\"))\nprint(solution(\"5 4 56\"))\nprint(solution(\"5 4 57\"))\nprint(solution(\"5 4 58\"))\nprint(solution(\"5 4 59\"))\nprint(solution(\"5 4 60\"))\nprint(solution(\"5 4 61\"))\nprint(solution(\"5 4 62\"))\nprint(solution(\"5 4 63\"))\nprint(solution(\"5 4 64\"))\nprint(solution(\"5 4 65\"))\nprint(solution(\"5 4 66\"))\nprint(solution(\"5 4 67\"))\nprint(solution(\"5 4 68\"))\nprint(solution(\"5 4 69\"))\nprint(solution(\"5 4 70\"))\nprint(solution(\"5 4 71\"))\nprint(solution(\"5 4 72\"))\nprint(solution(\"5 4 73\"))\nprint(solution(\"5 4 74\"))\nprint(solution(\"5 4 75\"))\nprint(solution(\"5 4 76\"))\nprint(solution(\"5 4 77\"))\nprint(solution(\"5 4 78\"))\nprint(solution(\"5 4 79\"))\nprint(solution(\"5 4 80\"))\nprint(solution(\"5 4 81\"))\nprint(solution(\"5 4 82\"))\nprint(solution(\"5 4 83\"))\nprint(solution(\"5 4 84\"))\nprint(solution(\"5 4 85\"))\nprint(solution(\"5 4 86\"))\nprint(solution(\"5 4 87\"))\nprint(solution(\"5 4 88\"))\nprint(solution(\"5 4 89\"))\nprint(solution(\"5 4 90\"))\nprint(solution(\"5 4 91\"))\nprint(solution(\"5 4 92\"))\nprint(solution(\"5 4 93\"))\nprint(solution(\"5 4 94\"))\nprint(solution(\"5 4 95\"))\nprint(solution(\"5 4 96\"))\nprint(solution(\"5 4 97\"))\nprint(solution(\"5 4 98\"))\nprint(solution(\"5 4 99\"))\nprint(solution(\"5 4 100\"))\nprint(solution(\"5 4 101\"))\nprint(solution(\"5 4 102\"))\nprint(solution(\"5 4 103\"))\nprint(solution(\"5 4 104\"))\nprint(solution(\"5 4 105\"))\nprint(solution(\"5 4 106\"))\nprint(solution(\"5 4 107\"))\nprint(solution(\"5 4 108\"))\nprint(solution(\"5 4 109\"))\nprint(solution(\"5 4 110\"))\nprint(solution(\"5 4 111\"))\nprint(solution(\"5 4 112\"))\nprint(solution(\"5 4 113\"))\nprint(solution(\"5 4 114\"))\nprint(solution(\"5 4 115\"))\nprint(solution(\"5 4 116\"))\nprint(solution(\"5 4 117\"))\nprint(solution(\"5 4 118\"))\nprint(solution(\"5 4 119\"))\nprint(solution(\"5 4 120\"))\nprint(solution(\"5 4 121\"))\nprint(solution(\"5 4 122\"))\nprint(solution(\"5 4 123\"))\nprint(solution(\"5 4 124\"))\nprint(solution(\"5 4 125\"))\nprint(solution(\"5 4 126\"))\nprint(solution(\"5 4 127\"))\nprint(solution(\"5 4 128\"))\nprint(solution(\"5 4 129\"))\nprint(solution(\"5 4 130\"))\nprint(solution(\"5 4 131\"))\nprint(solution(\"5 4 132\"))\nprint(solution(\"5 4 133\"))\nprint(solution(\"5 4 134\"))\nprint(solution(\"5 4 135\"))\nprint(solution(\"5 4 136\"))\nprint(solution(\"5 4 137\"))\nprint(solution(\"5 4 138\"))\nprint(solution(\"5 4 139\"))\nprint(solution(\"5 4 140\"))\nprint(solution(\"5 4 141\"))\nprint(solution(\"5 4 142\"))\nprint(solution(\"5 4 143\"))\nprint(solution(\"5 4 144\"))\nprint(solution(\"5 4 145\"))\nprint(solution(\"5 4 146\"))\nprint(solution(\"5 4 147\"))\nprint(solution(\"5 4 148\"))\nprint(solution(\"5 4 149\"))\nprint(solution(\"5 4 150\"))\nprint(solution(\"5 4 151\"))\nprint(solution(\"5 4 152\"))\nprint(solution(\"5 4 153\"))\nprint(solution(\"5 4 154\"))\nprint(solution(\"5 4 155\"))\nprint(solution(\"5 4 156\"))\nprint(solution(\"5 4 157\"))\nprint(solution(\"5 4 158\"))\nprint(solution(\"5 4 159\"))\nprint(solution(\"5 4 160\"))\nprint(solution(\"5 4 161\"))\nprint(solution(\"5 4 162\"))\nprint(solution(\"5 4 163\"))\nprint(solution(\"5 4 164\"))\nprint(solution(\"5 4 165\"))\nprint(solution(\"5 4 166\"))\nprint(solution(\"5 4 167\"))\nprint(solution(\"5 4 168\"))\nprint(solution(\"5 4 169\"))\nprint(solution(\"5 4 170\"))\nprint(solution(\"",
        "test": "",
        "num_ids": 1799,
        "indeed": false
    },
    {
        "number": 4371,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()\n    X = int(S[0])\n    for i in range(1, len(S)):\n        if S[i] == '0':\n            X = X - X % 10\n        else:\n            X = X + X % 10\n    return str(X)\n",
        "test": "",
        "num_ids": 74,
        "indeed": false
    },
    {
        "number": 4372,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    y = 0\n    z = 0\n    for i in range(n):\n        if a[i] == a[i+1]:\n            y += 1\n        else:\n            z += 1\n    return str(y) + str(z)\n\ndef",
        "test": "",
        "num_ids": 97,
        "indeed": false
    },
    {
        "number": 4373,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    contests = [list(map(int, input().split())) for _ in range(n)]\n    contests.sort(key=lambda x: x[0])\n    contests.sort(key=lambda x: x[1])\n    contests.sort(key=lambda x: x[2])\n    contests.sort(key=lambda x: x[3])\n    contests.sort(key=lambda x: x[4])\n    contests.sort(key=lambda x: x[5])\n    contests.sort(key=lambda x: x[6])\n    contests.sort(key=lambda x: x[7])\n    contests.sort(key=lambda x: x[8])\n    contests.sort(key=lambda x: x[9])\n    contests.sort(key=lambda x: x[10])\n    contests.sort(key=lambda x: x[11])\n    contests.sort(key=lambda x: x[12])\n    contests.sort(key=lambda x: x[13])\n    contests.sort(key=lambda x: x[14])\n    contests.sort(key=lambda x: x[15])\n    contests.sort(key=lambda x: x[16])\n    contests.sort(key=lambda x: x[17])\n    contests.sort(key=lambda x: x[18])\n    contests.sort(key=lambda x: x[19])\n    contests.sort(key=lambda x: x[20])\n    contests.sort(key=lambda x: x[21])\n    contests.sort(key=lambda x: x[22])\n    contests.sort(key=lambda x: x[23])\n    contests.sort(key=lambda x: x[24])\n    contests.sort(key=lambda x: x[25])\n    contests.sort(key=lambda x: x[26])\n    contests.sort(key=lambda x: x[27])\n    contests.sort(key=lambda x: x[28])\n    contests.sort(key=lambda x: x[29])\n    contests.sort(key=lambda x: x[30])\n    contests.sort(key=lambda x: x[31])\n    contests.sort(key=lambda x: x[32])\n    contests.sort(key=lambda x: x[33])\n    contests.sort(key=lambda x: x[34])\n    contests.sort(key=lambda x: x[35])\n    contests.sort(key=lambda x: x[36])\n    contests.sort(key=lambda x: x[37])\n    contests.sort(key=lambda x: x[38])\n    contests.sort(key=lambda x: x[39])\n    contests.sort(key=lambda x: x[40])\n    contests.sort(key=lambda x: x[41])\n    contests.sort(key=lambda x: x[42])\n    contests.sort(key=lambda x: x[43])\n    contests.sort(key=lambda x: x[44])\n    contests.sort(key=lambda x: x[45])\n    contests.sort(key=lambda x: x[46])\n    contests.sort(key=lambda x: x[47])\n    contests.sort(key=lambda x: x[48])\n    contests.sort(key=lambda x: x[49])\n    contests.sort(key=lambda x: x[50])\n    contests.sort(key=lambda x: x[51])\n    contests.sort(key=lambda x: x[52])\n    contests.sort(key=lambda x: x[53])\n    contests.sort(key=lambda x: x[54])\n    contests.sort(key=lambda x: x[55])\n    contests.sort(key=lambda x: x[56])\n    contests.sort(key=lambda x: x[57])\n    contests.sort(key=lambda x: x[58])\n    contests.sort(key=lambda x: x[59])\n    contests.sort(key=lambda x: x[60])\n    contests.sort(key=lambda x: x[61])\n    contests.sort(key=lambda x: x[62])\n    contests.sort(key=lambda x: x[63])\n    contests.sort(key=lambda x: x[64])\n    contests.sort(key=lambda x: x[65])\n    contests.sort(key=lambda x: x[66])\n    contests.sort(key=lambda x: x[67])\n    contests.sort(key=lambda x: x[68])\n    contests.sort(key=lambda x: x[69])\n    contests.sort(key=lambda x: x[70])\n    contests.sort(key=lambda x: x[71])\n    contests.sort(key=lambda x: x[72])\n    contests.sort(key=lambda x: x[73])\n    contests.sort(key=lambda x: x[74])\n    contests.sort(key=lambda x: x[75])\n    contests.sort(key=lambda x: x[76])\n    contests.sort(key=lambda x: x[77])\n    contests.sort(key=lambda x: x[78])\n    contests.sort(key=lambda x: x[79])\n    contests.sort(key=lambda x: x[80])\n    contests.sort(key=lambda x: x[81])\n    contests.sort(key=lambda x: x[82])\n    contests.sort(key=lambda x: x[83])\n    contests.sort(key=lambda x: x[84])\n    contests.sort(key=lambda x: x[85])\n    contests.sort(key=lambda x: x[86])\n    contests.sort(key=lambda x: x[87])\n    contests.sort(key=lambda x: x[88])\n    contests.sort(key=lambda x: x[89])\n    contests.sort(key=lambda x: x[90])\n    contests.sort(key=lambda x: x[91])\n    contests.sort(key=lambda x: x[92])\n    contests.sort(key=lambda x: x[93])\n    contests.sort(key=lambda x: x[94])\n    contests.sort(key=lambda x: x[95])\n    contests.sort(key=lambda x: x[96])\n    contests.sort(key=lambda x: x[97])\n    contests.sort(key=lambda x: x[98])\n    contests.sort(key=lambda x: x[99])\n    contests.sort(key=lambda x: x[100])\n    contests.sort(key",
        "test": "",
        "num_ids": 1659,
        "indeed": false
    },
    {
        "number": 4374,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        graph[v].append(u)\n        graph[u].append(v)\n    \n    diameter = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if len(graph[i]) == len(graph[j]):\n                diameter = max(diameter, len(graph[i]))\n    \n    return str(diameter)\n\n-----Constraints-----\n\n1 <= n <= 1000\n1 <= m <= n - 1\n\n-----Time Limit: 1 second\n\n-----Space Limit: 1 GB\n\n-----Input Format\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 1000$, $0 \\le m \\le n - 1$) \u2014 the number of vertices of the graph and the number of edges, respectively.\n\nEach of the next $m$ lines contains two integers $v$ and $u$ ($1 \\le v, u \\le n$, $v \\ne u$) \u2014 the descriptions of the edges.\n\nIt is guaranteed that the given graph is a forest.\n\n-----Output Format\n\nPrint the diameter of the resulting tree.\n\nFor $m = n - 1$ no edges are added, thus the output consists of a single integer \u2014 diameter of the given tree.\n\nIf there are multiple correct answers, print any of them.\n\nSample Input\n\n4 2\n1 2\n2 3\n\nSample Output\n\n2\n4 2\n\nExplanation\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a forest.\n\nThe diameter of the resulting tree is 2.\n\nThe graph is a tree.\n\nThe diameter of the resulting tree is 2.\n\nThe graph",
        "test": "",
        "num_ids": 1532,
        "indeed": false
    },
    {
        "number": 4375,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a",
        "test": "",
        "num_ids": 1583,
        "indeed": false
    },
    {
        "number": 4376,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a_1, a_2, a_3 = map(int, stdin.split())\n    b_1, b_2, b_3 = map(int, stdin.split())\n    a_f = a_1 + a_2 + a_3\n    b_f = b_1 + b_2 + b_3\n    a_k = a_f - a_1\n    b_k = b_f - b_1\n    a_k = a_k % n\n    b_k = b_k % n\n    print(a_k, b_k)\n    return '{} {}'.format(a_k, b_k)\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= a_1, a_2, a_3 <= 10^10\n1 <= b_1, b_2, b_3 <= 10^10\n\n-----Time Limit Exceeded-----\nTime Limit: 1 second\n\n-----Example 1-----\nInput\n3 6\n10 15 12\n1 9 12 23 26 37\n\nOutput\n1 1\n1 9\n2 2\n2 13\n3 1\n3 12\n\n-----Example 2-----\nInput\n2 3\n5 10000000000\n5 6 9999999999\n\nOutput\n1 5\n2 1\n2 9999999994\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= a_1, a_2, a_3 <= 10^10\n1 <= b_1, b_2, b_3 <= 10^10\n\n-----Time Limit Exceeded-----\nTime Limit: 1 second\n\n-----Example 3-----\nInput\n2 3\n5 10000000000\n5 6 9999999999\n\nOutput\n1 5\n2 1\n2 9999999994\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= a_1, a_2, a_3 <= 10^10\n1 <= b_1, b_2, b_3 <= 10^10\n\n-----Time Limit Exceeded-----\nTime Limit: 1 second\n\n-----Example 4-----\nInput\n2 3\n5 10000000000\n5 6 9999999999\n\nOutput\n1 5\n2 1\n2 9999999994\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= a_1, a_2, a_3 <= 10^10\n1 <= b_1, b_2, b_3 <= 10^10\n\n-----Time Limit Exceeded-----\nTime Limit: 1 second\n\n-----Example 5-----\nInput\n2 3\n5 10000000000\n5 6 9999999999\n\nOutput\n1 5\n2 1\n2 9999999994\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= a_1, a_2, a_3 <= 10^10\n1 <= b_1, b_2, b_3 <= 10^10\n\n-----Time Limit Exceeded-----\nTime Limit: 1 second\n\n-----Example 6-----\nInput\n2 3\n5 10000000000\n5 6 9999999999\n\nOutput\n1 5\n2 1\n2 9999999994\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= a_1, a_2, a_3 <= 10^10\n1 <= b_1, b_2, b_3 <= 10^10\n\n-----Time Limit Exceeded-----\nTime Limit: 1 second\n\n-----Example 7-----\nInput\n2 3\n5 10000000000\n5 6 9999999999\n\nOutput\n1 5\n2 1\n2 9999999994\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= a_1, a_2, a_3 <= 10^10\n1 <= b_1, b_2, b_3 <= 10^10\n\n-----Time Limit Exceeded-----\nTime Limit: 1 second\n\n-----Example 8-----\nInput\n2 3\n5 10000000000\n5 6 9999999999\n\nOutput\n1 5\n2 1\n2 9999999994\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= a_1, a_2, a_3 <= 10^10\n1 <= b_1, b_2, b_3 <= 10^10\n\n-----Time Limit Exceeded-----\nTime Limit: 1 second\n\n-----Example 9-----\nInput\n2 3\n5 10000000000\n5 6 9999999999\n\nOutput\n1 5\n2 1\n2 9999999994\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= a_1, a_2, a_3 <= 10^10\n1 <= b_1, b_2, b_3 <= 10^10\n\n-----Time Limit Exceeded-----\nTime Limit: 1 second\n\n-----Example 10-----\nInput\n2 3\n5 10000000000\n5 6 9999999999\n\nOutput\n1 5\n2 1\n2 9999999994\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= a_1, a_2, a_3 <= 10^10\n1 <= b_1, b_2, b_3 <= 10^10\n\n-----Time Limit Exceeded-----",
        "test": "",
        "num_ids": 1283,
        "indeed": false
    },
    {
        "number": 4377,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(i) for i in stdin.split()]\n    numbers.sort()\n    answer = []\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i]+numbers[j]+numbers[k] == numbers[j]*numbers[k]:\n                    answer.append(numbers[i]+numbers[j]+numbers[k])\n    return''.join(map(str, answer))\n",
        "test": "",
        "num_ids": 140,
        "indeed": false
    },
    {
        "number": 4378,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    l = len(s)\n    if l < 2:\n        return \"0\"\n    if l == 2:\n        return \"1\"\n    if l == 3:\n        return \"2\"\n    if l == 4:\n        return \"3\"\n    if l == 5:\n        return \"4\"\n    if l == 6:\n        return \"5\"\n    if l == 7:\n        return \"6\"\n    if l == 8:\n        return \"7\"\n    if l == 9:\n        return \"8\"\n    if l == 10:\n        return \"9\"\n    if l == 11:\n        return \"10\"\n    if l == 12:\n        return \"11\"\n    if l == 13:\n        return \"12\"\n    if l == 14:\n        return \"13\"\n    if l == 15:\n        return \"14\"\n    if l == 16:\n        return \"15\"\n    if l == 17:\n        return \"16\"\n    if l == 18:\n        return \"17\"\n    if l == 19:\n        return \"18\"\n    if l == 20:\n        return \"19\"\n    if l == 21:\n        return \"20\"\n    if l == 22:\n        return \"21\"\n    if l == 23:\n        return \"22\"\n    if l == 24:\n        return \"23\"\n    if l == 25:\n        return \"24\"\n    if l == 26:\n        return \"25\"\n    if l == 27:\n        return \"26\"\n    if l == 28:\n        return \"27\"\n    if l == 29:\n        return \"28\"\n    if l == 30:\n        return \"29\"\n    if l == 31:\n        return \"30\"\n    if l == 32:\n        return \"31\"\n    if l == 33:\n        return \"32\"\n    if l == 34:\n        return \"33\"\n    if l == 35:\n        return \"34\"\n    if l == 36:\n        return \"35\"\n    if l == 37:\n        return \"36\"\n    if l == 38:\n        return \"37\"\n    if l == 39:\n        return \"38\"\n    if l == 40:\n        return \"39\"\n    if l == 41:\n        return \"40\"\n    if l == 42:\n        return \"41\"\n    if l == 43:\n        return \"42\"\n    if l == 44:\n        return \"43\"\n    if l == 45:\n        return \"44\"\n    if l == 46:\n        return \"45\"\n    if l == 47:\n        return \"46\"\n    if l == 48:\n        return \"47\"\n    if l == 49:\n        return \"48\"\n    if l == 50:\n        return \"49\"\n    if l == 51:\n        return \"50\"\n    if l == 52:\n        return \"51\"\n    if l == 53:\n        return \"52\"\n    if l == 54:\n        return \"53\"\n    if l == 55:\n        return \"54\"\n    if l == 56:\n        return \"55\"\n    if l == 57:\n        return \"56\"\n    if l == 58:\n        return \"57\"\n    if l == 59:\n        return \"58\"\n    if l == 60:\n        return \"59\"\n    if l == 61:\n        return \"60\"\n    if l == 62:\n        return \"61\"\n    if l == 63:\n        return \"62\"\n    if l == 64:\n        return \"63\"\n    if l == 65:\n        return \"64\"\n    if l == 66:\n        return \"65\"\n    if l == 67:\n        return \"66\"\n    if l == 68:\n        return \"67\"\n    if l == 69:\n        return \"68\"\n    if l == 70:\n        return \"69\"\n    if l == 71:\n        return \"70\"\n    if l == 72:\n        return \"71\"\n    if l == 73:\n        return \"72\"\n    if l == 74:\n        return \"73\"\n    if l == 75:\n        return \"74\"\n    if l == 76:\n        return \"75\"\n    if l == 77:\n        return \"76\"\n    if l == 78:\n        return \"77\"\n    if l == 79:\n        return \"78\"\n    if l == 80:\n        return \"79\"\n    if l == 81:\n        return \"80\"\n    if l == 82:\n        return \"81\"\n    if l == 83:\n        return \"82\"\n    if l == 84:\n        return \"83\"\n    if l == 85:\n        return \"84\"\n    if l == 86:\n        return \"85\"\n    if l == 87:\n        return \"86\"\n    if l == 88:\n        return \"87\"\n    if l == 89:\n        return \"88\"\n    if l == 90:\n        return \"89\"\n    if l == 91:\n        return \"90\"\n    if l == 92:\n        return \"91\"\n    if l == 93:\n        return \"92\"\n    if l == 94:\n        return \"93\"\n    if l == 95:\n        return \"94\"\n    if l == 96:\n        return \"95\"\n    if l == 97:\n        return \"96\"\n    if l == 98:\n        return \"97\"\n    if l == 99:\n        return \"98\"\n    if l == 100:\n        return \"99\"\n    if l == 101:\n        return \"100\"\n    if l == 102:\n        return \"101\"\n    if l == 103:\n        return \"102\"\n    if l == 104:\n        return \"103\"\n    if l == 105:\n        return \"104\"\n    if l == 106:\n        return \"105\"\n    if l == 107:\n        return \"106\"\n    if l == 108:\n        return \"107\"\n    if l == 109:\n        return \"108\"\n    if l == 110:\n        return \"109\"\n    if l == 111:\n        return \"110\"\n    if l == 112:\n        return \"111\"\n    if l == 113:\n        return \"112\"\n    if l == 114:\n        return \"113\"\n    if l == 115:\n        return \"114\"\n    if l == 116:\n        return \"115\"\n    if l == 117:\n        return \"116\"\n    if l == 118:\n        return \"117\"\n    ",
        "test": "",
        "num_ids": 1564,
        "indeed": false
    },
    {
        "number": 4379,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    answer = 0\n    for i in range(k):\n        answer += a[i]\n    print(answer)\n    return str(answer)\n\nprint(solution(stdin))\n",
        "test": "",
        "num_ids": 83,
        "indeed": false
    },
    {
        "number": 4380,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    C = 3 * A * B\n    if C % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n-----Sample Input-----\n3 1\n\n-----Sample Output-----\nNo\n\ndef",
        "test": "",
        "num_ids": 69,
        "indeed": false
    },
    {
        "number": 4381,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if X % 2 == 0:\n        X = X // 2\n    if Y % 2 == 0:\n        Y = Y // 2\n    if X + Y == 100:\n        return str(X) + \" \u2044 \" + str(Y)\n    else:\n        return str(X) + \" \u2044 \" + str(Y) + \" \u2044 \" + str(X + Y)\n",
        "test": "",
        "num_ids": 110,
        "indeed": false
    },
    {
        "number": 4382,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1 or N > 9:\n        return \"0\"\n    \n    def is_digit(s):\n        return s.isdigit()\n    \n    def is_valid(s):\n        return all(is_digit(c) for c in s)\n    \n    def is_valid_password(s):\n        return all(is_valid(c) for c in s)\n    \n    def is_valid_password_2(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_3(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_4(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_5(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_6(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_7(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_8(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_9(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_10(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_11(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_12(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_13(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_14(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_15(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_16(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_17(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_18(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_19(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_20(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_21(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_22(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_23(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_24(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_25(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_26(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_27(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_28(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_29(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_30(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_31(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_32(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_33(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_34(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_35(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_36(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_37(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_38(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_39(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_40(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_41(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_42(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_43(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_44(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_45(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_46(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_47(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_48(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_49(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_50(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_51(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_52(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_53(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_54(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_55(s):\n        return all(is_valid_password(c) for c in s)\n    \n    def is_valid_password_56(s):\n",
        "test": "",
        "num_ids": 1900,
        "indeed": false
    },
    {
        "number": 4383,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    if X % 7 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n-----Sample Output-----\nNO\n\nThe growth of a five-year-old child will not be celebrated.\ndef",
        "test": "",
        "num_ids": 63,
        "indeed": false
    },
    {
        "number": 4384,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0:3]\n",
        "test": "",
        "num_ids": 11,
        "indeed": false
    },
    {
        "number": 4385,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    if a + b + c + d + e + k < 123:\n        return 'Yay!'\n    else:\n        return 'No'\n\ndef",
        "test": "",
        "num_ids": 60,
        "indeed": false
    },
    {
        "number": 4386,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        print(stdin)\n    else:\n        print('red')\n\n-----Sample Input-----\n3200\npink\n\n-----Sample Output-----\npink\n\na = 3200 is not less than 3200, so we print s = pink.\ndef",
        "test": "",
        "num_ids": 77,
        "indeed": false
    },
    {
        "number": 4387,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin.strip())\n    if R < 4208:\n        return \"ABC\"\n    elif R < 1200:\n        return \"ARC\"\n    elif R < 2800:\n        return \"AGC\"\n    else:\n        return \"ARC\"\n",
        "test": "",
        "num_ids": 66,
        "indeed": false
    },
    {
        "number": 4388,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_list = list(str(n))\n    for i in range(len(n_list)):\n        if n_list[i] == '1':\n            n_list[i] = '9'\n        elif n_list[i] == '9':\n            n_list[i] = '1'\n    n_list = ''.join(n_list)\n    return n_list\n",
        "test": "",
        "num_ids": 107,
        "indeed": true
    },
    {
        "number": 4389,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = a.lower()\n    b = b.lower()\n    if len(a) > len(b):\n        return a\n    else:\n        return b\n\ndef",
        "test": "",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a % b!= 0:\n        return str(n)\n    else:\n        return str(n + 1)\n\n-----Constraints-----\n1 <= t <= 10^4\n0 <= a, b <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Space Limit-----\n1 megabyte\n\n-----Tags-----\nSeconds\n\n-----Constraints Accepted-----\n0\n",
        "test": "",
        "num_ids": 111,
        "indeed": false
    },
    {
        "number": 4391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a_1, a_2, a_3, a_4 = map(int, stdin.split())\n    res = 0\n    for i in range(n):\n        res += (a_1 + a_2 + a_3 + a_4) * (i + 1) / (n + k)\n    return str(res)\n\n-----Constraints-----\n1 <= n <= 5000\n1 <= k <= n\n1 <= a_1, a_2, a_3, a_4 <= 5000\n\n-----Time Limit-----\nO(n)\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 152,
        "indeed": false
    },
    {
        "number": 4392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1]\n    p.sort()\n    p.reverse()\n    p = p[::-1",
        "test": "",
        "num_ids": 1322,
        "indeed": false
    },
    {
        "number": 4393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    t = s.split()\n    for i in range(n):\n        t[i] = t[i].lower()\n    return ''.join(t)\n\nprint(solution(input()))\n",
        "test": "",
        "num_ids": 70,
        "indeed": false
    },
    {
        "number": 4394,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        edges.append((u, v, w))\n    edges.sort()\n    visited = [False] * (n + 1)\n    visited[0] = True\n    cost = 0\n    for u, v, w in edges:\n        if not visited[u]:\n            cost += w\n            visited[u] = True\n        if not visited[v]:\n            cost += w\n            visited[v] = True\n    return str(cost)\n\ndef",
        "test": "",
        "num_ids": 160,
        "indeed": false
    },
    {
        "number": 4395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    l = []\n    for i in range(n):\n        l.append(s[i])\n    l.sort()\n    for i in range(n):\n        if l[i] == 'R':\n            l[i] = 'G'\n        elif l[i] == 'G':\n            l[i] = 'B'\n        elif l[i] == 'B':\n            l[i] = 'R'\n    return ''.join(l)\n\nprint(solution(input()))\n",
        "test": "",
        "num_ids": 144,
        "indeed": false
    },
    {
        "number": 4396,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, u_1, u_2, u_N = map(int, stdin.split())\n    x_1, x_2 = map(float, stdin.split())\n    if u_1 == u_2:\n        return str(round(x_1 * (1 + x_2) * (1 + x_1) * (1 + x_2), 5))\n    else:\n        return str(round(x_1 * (1 + x_2) * (1 + x_1) * (1 + x_2), 5)) + \".\" + str(round(x_1 * (1 + x_2) * (1 + x_1) * (1 + x_2), 5))\n\ndef",
        "test": "",
        "num_ids": 171,
        "indeed": false
    },
    {
        "number": 4397,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    cars = list(map(int, stdin.split()))\n    cars.sort()\n    answer = ''\n    for j in range(N):\n        if j == 0:\n            answer += str(cars[j])\n        else:\n            answer += str(cars[j]) +''\n    return answer\n\nprint(solution(\"4 2\"))\nprint(solution(\"4 3\"))\nprint(solution(\"4 4\"))\nprint(solution(\"4 5\"))\nprint(solution(\"4 6\"))\nprint(solution(\"4 7\"))\nprint(solution(\"4 8\"))\nprint(solution(\"4 9\"))\nprint(solution(\"4 10\"))\nprint(solution(\"4 11\"))\nprint(solution(\"4 12\"))\nprint(solution(\"4 13\"))\nprint(solution(\"4 14\"))\nprint(solution(\"4 15\"))\nprint(solution(\"4 16\"))\nprint(solution(\"4 17\"))\nprint(solution(\"4 18\"))\nprint(solution(\"4 19\"))\nprint(solution(\"4 20\"))\nprint(solution(\"4 21\"))\nprint(solution(\"4 22\"))\nprint(solution(\"4 23\"))\nprint(solution(\"4 24\"))\nprint(solution(\"4 25\"))\nprint(solution(\"4 26\"))\nprint(solution(\"4 27\"))\nprint(solution(\"4 28\"))\nprint(solution(\"4 29\"))\nprint(solution(\"4 30\"))\nprint(solution(\"4 31\"))\nprint(solution(\"4 32\"))\nprint(solution(\"4 33\"))\nprint(solution(\"4 34\"))\nprint(solution(\"4 35\"))\nprint(solution(\"4 36\"))\nprint(solution(\"4 37\"))\nprint(solution(\"4 38\"))\nprint(solution(\"4 39\"))\nprint(solution(\"4 40\"))\nprint(solution(\"4 41\"))\nprint(solution(\"4 42\"))\nprint(solution(\"4 43\"))\nprint(solution(\"4 44\"))\nprint(solution(\"4 45\"))\nprint(solution(\"4 46\"))\nprint(solution(\"4 47\"))\nprint(solution(\"4 48\"))\nprint(solution(\"4 49\"))\nprint(solution(\"4 50\"))\nprint(solution(\"4 51\"))\nprint(solution(\"4 52\"))\nprint(solution(\"4 53\"))\nprint(solution(\"4 54\"))\nprint(solution(\"4 55\"))\nprint(solution(\"4 56\"))\nprint(solution(\"4 57\"))\nprint(solution(\"4 58\"))\nprint(solution(\"4 59\"))\nprint(solution(\"4 60\"))\nprint(solution(\"4 61\"))\nprint(solution(\"4 62\"))\nprint(solution(\"4 63\"))\nprint(solution(\"4 64\"))\nprint(solution(\"4 65\"))\nprint(solution(\"4 66\"))\nprint(solution(\"4 67\"))\nprint(solution(\"4 68\"))\nprint(solution(\"4 69\"))\nprint(solution(\"4 70\"))\nprint(solution(\"4 71\"))\nprint(solution(\"4 72\"))\nprint(solution(\"4 73\"))\nprint(solution(\"4 74\"))\nprint(solution(\"4 75\"))\nprint(solution(\"4 76\"))\nprint(solution(\"4 77\"))\nprint(solution(\"4 78\"))\nprint(solution(\"4 79\"))\nprint(solution(\"4 80\"))\nprint(solution(\"4 81\"))\nprint(solution(\"4 82\"))\nprint(solution(\"4 83\"))\nprint(solution(\"4 84\"))\nprint(solution(\"4 85\"))\nprint(solution(\"4 86\"))\nprint(solution(\"4 87\"))\nprint(solution(\"4 88\"))\nprint(solution(\"4 89\"))\nprint(solution(\"4 90\"))\nprint(solution(\"4 91\"))\nprint(solution(\"4 92\"))\nprint(solution(\"4 93\"))\nprint(solution(\"4 94\"))\nprint(solution(\"4 95\"))\nprint(solution(\"4 96\"))\nprint(solution(\"4 97\"))\nprint(solution(\"4 98\"))\nprint(solution(\"4 99\"))\nprint(solution(\"4 100\"))\nprint(solution(\"4 101\"))\nprint(solution(\"4 102\"))\nprint(solution(\"4 103\"))\nprint(solution(\"4 104\"))\nprint(solution(\"4 105\"))\nprint(solution(\"4 106\"))\nprint(solution(\"4 107\"))\nprint(solution(\"4 108\"))\nprint(solution(\"4 109\"))\nprint(solution(\"4 110\"))\nprint(solution(\"4 111\"))\nprint(solution(\"4 112\"))\nprint(solution(\"4 113\"))\nprint(solution(\"4 114\"))\nprint(solution(\"4 115\"))\nprint(solution(\"4 116\"))\nprint(solution(\"4 117\"))\nprint(solution(\"4 118\"))\nprint(solution(\"4 119\"))\nprint(solution(\"4 120\"))\nprint(solution(\"4 121\"))\nprint(solution(\"4 122\"))\nprint(solution(\"4 123\"))\nprint(solution(\"4 124\"))\nprint(solution(\"4 125\"))\nprint(solution(\"4 126\"))\nprint(solution(\"4 127\"))\nprint(solution(\"4 128\"))\nprint(solution(\"4 129\"))\nprint(solution(\"4 130\"))\nprint(solution(\"4 131\"))\nprint(solution(\"4 132\"))\nprint(solution(\"4 133\"))\nprint(solution(\"4 134\"))\nprint(solution(\"4 135\"))\nprint(solution(\"4 136\"))\nprint(solution(\"4 137\"))\nprint(solution(\"4 138\"))\nprint(solution(\"4 139\"))\nprint(solution(\"4 140\"))\nprint(solution(\"4 141\"))\nprint(solution(\"4 142\"))\nprint(solution(\"4 143\"))\nprint(solution(\"4 144\"))\nprint(solution(\"4 145\"))\nprint(solution(\"4 146\"))\nprint(solution(\"4 147\"))\nprint(solution(\"4 148\"))\nprint(solution(\"4 149\"))\nprint(solution(\"4 150\"))\nprint(solution(\"4 151\"))\nprint(solution(\"4 152\"))\nprint(solution(\"4 153\"))\nprint(solution(\"4 154\"))\nprint(solution(\"4 155\"))\nprint(solution(\"4 156\"))\nprint(solution(\"4 157\"))\nprint(solution(\"4 158\"))\nprint(solution(\"4 159\"))\nprint(solution(\"4 160\"))\nprint(solution(\"4 161\"))\nprint(solution(\"4 162\"))\nprint(solution(\"4 163\"))\nprint(solution(\"4 164\"))\nprint(solution(\"4 165\"))\nprint(solution(\"4 166\"))\nprint(solution(\"4 167\"))\nprint(solution(\"4 168\"))\nprint(solution(\"4 169\"))\nprint(solution(\"4 170\"))\nprint(solution(\"4 171\"))\nprint(solution(\"4 172\"))\nprint(solution(\"4 173\"))\nprint(solution(\"4 174\"))\nprint(solution(\"4 175\"))\nprint(solution(\"4 176\"))\nprint(solution(\"4 177\"))\nprint(solution(\"4 178\"))\nprint(solution(\"4 179\"))\nprint(solution(\"4 180\"))\nprint(solution(\"4 181\"))\nprint(solution(\"4 182\"))\nprint(solution(\"4 183\"))\nprint(solution(\"4 184\"))\nprint(solution(\"4 185\"))\nprint(solution(\"4 186\"))\nprint(solution(\"4 187\"))\nprint(solution(\"4 188\"))\nprint(solution(\"4 189\"))\nprint(solution(\"4 190\"))\nprint(solution(\"4 191\"))\nprint(solution(\"4 192\"))\nprint(solution(\"4 193\"))\nprint(solution(\"4 194\"))\nprint(solution(\"4 195\"))\nprint(solution(\"4 196\"))\nprint(solution(\"4 197\"))\nprint(solution(\"4 198\"))\nprint(solution(\"4 199\"))\nprint(solution(\"4 200\"))\nprint(solution(\"",
        "test": "",
        "num_ids": 1886,
        "indeed": false
    },
    {
        "number": 4398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    t = stdin.split()\n    \n    for i in range(len(s)):\n        s[i] = s[i].lower()\n        t[i] = t[i].lower()\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace(' ', '')\n        t[i] = t[i].replace(' ', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('-', '')\n        t[i] = t[i].replace('-', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('.', '')\n        t[i] = t[i].replace('.', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace(',', '')\n        t[i] = t[i].replace(',', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('!', '')\n        t[i] = t[i].replace('!', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('?', '')\n        t[i] = t[i].replace('?', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('.', '')\n        t[i] = t[i].replace('.', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace(':', '')\n        t[i] = t[i].replace(':', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace(';', '')\n        t[i] = t[i].replace(';', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('<', '')\n        t[i] = t[i].replace('<', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('>', '')\n        t[i] = t[i].replace('>', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('=', '')\n        t[i] = t[i].replace('=', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('+', '')\n        t[i] = t[i].replace('+', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('-', '')\n        t[i] = t[i].replace('-', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('.', '')\n        t[i] = t[i].replace('.', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace(',', '')\n        t[i] = t[i].replace(',', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('!', '')\n        t[i] = t[i].replace('!', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('?', '')\n        t[i] = t[i].replace('?', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('.', '')\n        t[i] = t[i].replace('.', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace(':', '')\n        t[i] = t[i].replace(':', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('<', '')\n        t[i] = t[i].replace('<', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('>', '')\n        t[i] = t[i].replace('>', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('=', '')\n        t[i] = t[i].replace('=', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('+', '')\n        t[i] = t[i].replace('+', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('-', '')\n        t[i] = t[i].replace('-', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('.', '')\n        t[i] = t[i].replace('.', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace(',', '')\n        t[i] = t[i].replace(',', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('!', '')\n        t[i] = t[i].replace('!', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('?', '')\n        t[i] = t[i].replace('?', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('.', '')\n        t[i] = t[i].replace('.', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace(':', '')\n        t[i] = t[i].replace(':', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('<', '')\n        t[i] = t[i].replace('<', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('>', '')\n        t[i] = t[i].replace('>', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('=', '')\n        t[i] = t[i].replace('=', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('+', '')\n        t[i] = t[i].replace('+', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('-', '')\n        t[i] = t[i].replace('-', '')\n    \n    for i in range(len(s)):\n        s[i] = s[i].replace('.', '')\n        t[i] = t[i].replace('.', '')\n    \n    for i in range(len(s)):\n        s[i",
        "test": "",
        "num_ids": 1851,
        "indeed": false
    },
    {
        "number": 4399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    stations = []\n    for i in range(n):\n        stations.append(list(map(str, input().strip().split())))\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if stations[i][0] == stations[j][0] and stations[i][1] == stations[j][1]:\n                return \"Yes\"\n    return \"No\"\n\ndef",
        "test": "",
        "num_ids": 115,
        "indeed": false
    },
    {
        "number": 4400,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    rain = [0] * n\n    for i in range(n):\n        rain[i] = stdin.strip().split()[1]\n    rain.sort()\n    max_rain = 0\n    for i in range(n):\n        if rain[i] == 'R':\n            max_rain += 1\n    return str(max_rain)\n\ndef",
        "test": "",
        "num_ids": 98,
        "indeed": false
    },
    {
        "number": 4401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    C = list(map(int, stdin.split()))\n    \n    A.sort()\n    B.sort()\n    C.sort()\n    \n    for i in range(len(A)):\n        A[i] = A[i] * -1\n    for i in range(len(B)):\n        B[i] = B[i] * -1\n    for i in range(len(C)):\n        C[i] = C[i] * -1\n    \n    for i in range(len(A)):\n        A[i] = A[i] + B[i]\n        A[i] = A[i] + C[i]\n    \n    return''.join(map(str, A))\n",
        "test": "",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 4402,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A % 2 == 0:\n        return str(B * (B + 1) // 2)\n    else:\n        return str(B * (B + 1) // 2 + 1)\n",
        "test": "",
        "num_ids": 61,
        "indeed": false
    },
    {
        "number": 4403,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(stdin.strip())\n    for i in range(n):\n        if s[i] == '+':\n            s[i] = '-'\n        elif s[i] == '-':\n            s[i] = '+'\n    return ''.join(s)\n",
        "test": "",
        "num_ids": 83,
        "indeed": false
    },
    {
        "number": 4404,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    year, month, day = map(int, stdin.split('/'))\n    if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n        if month > 2:\n            month -= 2\n        else:\n            month = 12\n    else:\n        if month > 2:\n            month -= 2\n        else:\n            month = 1\n    if month == 2:\n        if day > 29:\n            day -= 29\n        else:\n            day = 28\n    else:\n        if day > 28:\n            day -= 28\n        else:\n            day = 31\n    return str(day) + '/' + str(month) + '/' + str(year)\n",
        "test": "",
        "num_ids": 168,
        "indeed": false
    },
    {
        "number": 4405,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    ",
        "test": "",
        "num_ids": 1503,
        "indeed": false
    },
    {
        "number": 4406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"0\"\n    \n    conversations = []\n    for _ in range(n):\n        conversations.append(list(map(int, stdin.split())))\n    \n    conversations.sort(key=lambda x: x[0])\n    \n    answer = 0\n    for i in range(k):\n        answer += len(conversations[i])\n    \n    return str(answer)\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\n-----Time Limit: 1 second\n\n-----Space Limit: 1 megabyte\n\n-----Input Format\n\nThe first line contains an integer $n$ and $k$ ($1 \\le n, k \\le 200)$ \u2014 the number of messages and the number of conversations your smartphone can show.\n\nThe second line contains $n$ integers $id_1, id_2, \\dots, id_n$ ($1 \\le id_i \\le 10^9$), where $id_i$ is the ID of the friend which sends you the $i$-th message.\n\nThe third line contains $n$ integers $ids_1, ids_2, \\dots, ids_m$, where $ids_i$ should be equal to the ID of the friend corresponding to the conversation displayed on the position $i$ after receiving all $n$ messages.\n\nThe fourth line contains $n$ integers $ids_1, ids_2, \\dots, ids_m$, where $ids_i$ should be equal to the ID of the friend corresponding to the conversation displayed on the position $i$ after receiving all $n$ messages.\n\nThe fifth line contains $n$ integers $ids_1, ids_2, \\dots, ids_m$, where $ids_i$ should be equal to the ID of the friend corresponding to the conversation displayed on the position $i$ after receiving all $n$ messages.\n\nThe sixth line contains $n$ integers $ids_1, ids_2, \\dots, ids_m$, where $ids_i$ should be equal to the ID of the friend corresponding to the conversation displayed on the position $i$ after receiving all $n$ messages.\n\nThe seventh line contains $n$ integers $ids_1, ids_2, \\dots, ids_m$, where $ids_i$ should be equal to the ID of the friend corresponding to the conversation displayed on the position $i$ after receiving all $n$ messages.\n\nThe eighth line contains $n$ integers $ids_1, ids_2, \\dots, ids_m$, where $ids_i$ should be equal to the ID of the friend corresponding to the conversation displayed on the position $i$ after receiving all $n$ messages.\n\nThe ninth line contains $n$ integers $ids_1, ids_2, \\dots, ids_m$, where $ids_i$ should be equal to the ID of the friend corresponding to the conversation displayed on the position $i$ after receiving all $n$ messages.\n\nThe tenth line contains $n$ integers $ids_1, ids_2, \\dots, ids_m$, where $ids_i$ should be equal to the ID of the friend corresponding to the conversation displayed on the position $i$ after receiving all $n$ messages.\n\nThe eleventh line contains $n$ integers $ids_1, ids_2, \\dots, ids_m$, where $ids_i$ should be equal to the ID of the friend corresponding to the conversation displayed on the position $i$ after receiving all $n$ messages.\n\nThe twelfth line contains $n$ integers $ids_1, ids_2, \\dots, ids_m$, where $ids_i$ should be equal to the ID of the friend corresponding to the conversation displayed on the position $i$ after receiving all $n$ messages.\n\nThe thirteenth line contains $n$ integers $ids_1, ids_2, \\dots, ids_m$, where $ids_i$ should be equal to the ID of the friend corresponding to the conversation displayed on the position $i$ after receiving all $n$ messages.\n\nThe fourteenth line contains $n$ integers $ids_1, ids_2, \\dots, ids_m$, where $ids_i$ should be equal to the ID of the friend corresponding to the conversation displayed on the position $i$ after receiving all $n$ messages.\n\nThe fifteenth line contains $n$ integers $ids_1, ids_2, \\dots, ids_m$, where $ids_i$ should be equal to the ID of the friend corresponding to the conversation displayed on the position $i$ after receiving all $n$ messages.\n\nThe sixteenth line contains $n$ integers $ids_1, ids_2, \\dots, ids_m$, where $ids_i$ should be equal to the ID of the friend corresponding to the conversation displayed on the position $i$ after receiving all $n$ messages.\n\nThe seventeenth line contains $n$ integers $ids_1, ids_2, \\dots, ids_m$, where $ids_i$ should be equal",
        "test": "",
        "num_ids": 1202,
        "indeed": false
    },
    {
        "number": 4407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    ans = []\n    for i in range(q):\n        ans.append(a[i]*b[i])\n    return str(min(ans))\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= q <= 10^5\n1 <= a[i] <= 10^9\n1 <= b[i] <= 10^9\n\n-----Time complexity-----\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO(n*q)\nO",
        "test": "",
        "num_ids": 1550,
        "indeed": false
    },
    {
        "number": 4408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    cards.sort()\n    f = [0] * (k + 1)\n    f[0] = cards[0]\n    for i in range(1, k + 1):\n        f[i] = cards[i - 1] + f[i - 1]\n    for i in range(n - 1):\n        f[cards[i]] -= 1\n        f[cards[i + 1]] += 1\n    return str(max(f))\n\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 3\"))\nprint",
        "test": "",
        "num_ids": 1291,
        "indeed": false
    },
    {
        "number": 4409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i",
        "test": "",
        "num_ids": 1385,
        "indeed": false
    },
    {
        "number": 4410,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    t = len(s)\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return \"0\"\n    if t < n:\n        return",
        "test": "",
        "num_ids": 1199,
        "indeed": false
    },
    {
        "number": 4411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        segments.append(list(map(int, stdin.split())))\n    \n    def check(segment):\n        for i in range(len(segment)):\n            if segment[i] < segment[i+1]:\n                return False\n        return True\n    \n    def remove_segments(segment):\n        for i in range(len(segment)):\n            if check(segment[i:i+k]):\n                segment[i:i+k] = []\n    \n    for i in range(n):\n        remove_segments(segments[i])\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if check(segments[i][:j] + segments[j][:i] + segments[i][j:]):\n                segments[i] = segments[i][:j] + segments[j][:i] + segments[i][j:]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if check(segments[i][:j] + segments[j][:i] + segments[i][j:]):\n                segments[i] = segments[i][:j] + segments[j][:i] + segments[i][j:]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if check(segments[i][:j] + segments[j][:i] + segments[i][j:]):\n                segments[i] = segments[i][:j] + segments[j][:i] + segments[i][j:]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if check(segments[i][:j] + segments[j][:i] + segments[i][j:]):\n                segments[i] = segments[i][:j] + segments[j][:i] + segments[i][j:]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if check(segments[i][:j] + segments[j][:i] + segments[i][j:]):\n                segments[i] = segments[i][:j] + segments[j][:i] + segments[i][j:]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if check(segments[i][:j] + segments[j][:i] + segments[i][j:]):\n                segments[i] = segments[i][:j] + segments[j][:i] + segments[i][j:]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if check(segments[i][:j] + segments[j][:i] + segments[i][j:]):\n                segments[i] = segments[i][:j] + segments[j][:i] + segments[i][j:]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if check(segments[i][:j] + segments[j][:i] + segments[i][j:]):\n                segments[i] = segments[i][:j] + segments[j][:i] + segments[i][j:]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if check(segments[i][:j] + segments[j][:i] + segments[i][j:]):\n                segments[i] = segments[i][:j] + segments[j][:i] + segments[i][j:]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if check(segments[i][:j] + segments[j][:i] + segments[i][j:]):\n                segments[i] = segments[i][:j] + segments[j][:i] + segments[i][j:]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if check(segments[i][:j] + segments[j][:i] + segments[i][j:]):\n                segments[i] = segments[i][:j] + segments[j][:i] + segments[i][j:]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if check(segments[i][:j] + segments[j][:i] + segments[i][j:]):\n                segments[i] = segments[i][:j] + segments[j][:i] + segments[i][j:]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if check(segments[i][:j] + segments[j][:i] + segments[i][j:]):\n                segments[i] = segments[i][:j] + segments[j][:i] + segments[i][j:]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if check(segments[i][:j] + segments[j][:i] + segments[i][j:]):\n                segments[i] = segments[i][:j] + segments[j][:i] + segments[i][j:]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if check(segments[i][:j] + segments[j][:i] + segments[i][j:]):\n                segments[i] = segments[i][:j] + segments[j][:i] + segments[i][j:]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if check(segments[i][:j] + segments[j][:i] + segments[i][j:]):\n                segments[i] = segments[i][:j] + segments[j][:i] + segments[i][j:]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if check(segments[i][:j] + segments[j][:i] + segments[i][j:]):\n                ",
        "test": "",
        "num_ids": 1554,
        "indeed": false
    },
    {
        "number": 4412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2 == 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2!= 0]\n    a.sort()\n    a = [a[i] for i in range(len(a)) if i % 2",
        "test": "",
        "num_ids": 1510,
        "indeed": false
    },
    {
        "number": 4413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    answer = 0\n    for i in range(q):\n        if a[i] == a[i+1]:\n            answer += 1\n        else:\n            answer += 2\n    return str(answer)\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 92,
        "indeed": false
    },
    {
        "number": 4414,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, n, s = map(int, stdin.split())\n    if n == 1:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 2:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 3:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 4:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 5:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 6:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 7:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 8:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 9:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 10:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 11:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 12:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 13:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 14:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 15:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 16:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 17:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 18:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 19:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 20:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 21:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 22:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 23:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 24:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 25:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 26:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 27:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 28:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 29:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 30:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 31:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 32:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 33:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 34:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 35:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 36:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 37:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 38:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 39:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 40:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 41:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 42:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 43:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 44:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 45:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 46:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 47:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 48:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 49:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 50:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 51:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 52:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 53:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 54:\n        if a == b:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 55:\n        if a",
        "test": "",
        "num_ids": 1652,
        "indeed": false
    },
    {
        "number": 4415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    if a[0] > a[1]:\n        return \"NO\"\n    if a[0] == a[1]:\n        return \"YES\"\n    if a[0] == a[2]:\n        return \"YES\"\n    if a[0] == a[3]:\n        return \"YES\"\n    if a[0] == a[4]:\n        return \"YES\"\n    if a[0] == a[5]:\n        return \"YES\"\n    if a[0] == a[6]:\n        return \"YES\"\n    if a[0] == a[7]:\n        return \"YES\"\n    if a[0] == a[8]:\n        return \"YES\"\n    if a[0] == a[9]:\n        return \"YES\"\n    if a[0] == a[10]:\n        return \"YES\"\n    if a[0] == a[11]:\n        return \"YES\"\n    if a[0] == a[12]:\n        return \"YES\"\n    if a[0] == a[13]:\n        return \"YES\"\n    if a[0] == a[14]:\n        return \"YES\"\n    if a[0] == a[15]:\n        return \"YES\"\n    if a[0] == a[16]:\n        return \"YES\"\n    if a[0] == a[17]:\n        return \"YES\"\n    if a[0] == a[18]:\n        return \"YES\"\n    if a[0] == a[19]:\n        return \"YES\"\n    if a[0] == a[20]:\n        return \"YES\"\n    if a[0] == a[21]:\n        return \"YES\"\n    if a[0] == a[22]:\n        return \"YES\"\n    if a[0] == a[23]:\n        return \"YES\"\n    if a[0] == a[24]:\n        return \"YES\"\n    if a[0] == a[25]:\n        return \"YES\"\n    if a[0] == a[26]:\n        return \"YES\"\n    if a[0] == a[27]:\n        return \"YES\"\n    if a[0] == a[28]:\n        return \"YES\"\n    if a[0] == a[29]:\n        return \"YES\"\n    if a[0] == a[30]:\n        return \"YES\"\n    if a[0] == a[31]:\n        return \"YES\"\n    if a[0] == a[32]:\n        return \"YES\"\n    if a[0] == a[33]:\n        return \"YES\"\n    if a[0] == a[34]:\n        return \"YES\"\n    if a[0] == a[35]:\n        return \"YES\"\n    if a[0] == a[36]:\n        return \"YES\"\n    if a[0] == a[37]:\n        return \"YES\"\n    if a[0] == a[38]:\n        return \"YES\"\n    if a[0] == a[39]:\n        return \"YES\"\n    if a[0] == a[40]:\n        return \"YES\"\n    if a[0] == a[41]:\n        return \"YES\"\n    if a[0] == a[42]:\n        return \"YES\"\n    if a[0] == a[43]:\n        return \"YES\"\n    if a[0] == a[44]:\n        return \"YES\"\n    if a[0] == a[45]:\n        return \"YES\"\n    if a[0] == a[46]:\n        return \"YES\"\n    if a[0] == a[47]:\n        return \"YES\"\n    if a[0] == a[48]:\n        return \"YES\"\n    if a[0] == a[49]:\n        return \"YES\"\n    if a[0] == a[50]:\n        return \"YES\"\n    if a[0] == a[51]:\n        return \"YES\"\n    if a[0] == a[52]:\n        return \"YES\"\n    if a[0] == a[53]:\n        return \"YES\"\n    if a[0] == a[54]:\n        return \"YES\"\n    if a[0] == a[55]:\n        return \"YES\"\n    if a[0] == a[56]:\n        return \"YES\"\n    if a[0] == a[57]:\n        return \"YES\"\n    if a[0] == a[58]:\n        return \"YES\"\n    if a[0] == a[59]:\n        return \"YES\"\n    if a[0] == a[60]:\n        return \"YES\"\n    if a[0] == a[61]:\n        ",
        "test": "",
        "num_ids": 1147,
        "indeed": false
    },
    {
        "number": 4416,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = [list(map(int, input().split())) for _ in range(n)]\n    books.sort(key=lambda x: (x[0], x[1]))\n    book_set = set(books)\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set.remove(books[-1])\n    book_set.remove(books[0])\n    book_set",
        "test": "",
        "num_ids": 1361,
        "indeed": false
    },
    {
        "number": 4417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i]\n    for i in range(n):\n        for j in range(i + 1, n):\n            b[j] = max(b[j], b[i] - b[j])\n    return str(max(b))\n\ndef",
        "test": "",
        "num_ids": 116,
        "indeed": false
    },
    {
        "number": 4418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    k = len(a) // 6\n    if k % 6!= 0:\n        return 0\n    if k == 0:\n        return 0\n    if k == 1:\n        return a[0]\n    if k == 2:\n        return a[0] + a[1]\n    if k == 3:\n        return a[0] + a[1] + a[2]\n    if k == 4:\n        return a[0] + a[1] + a[2] + a[3]\n    if k == 5:\n        return a[0] + a[1] + a[2] + a[3] + a[4]\n    if k == 6:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5]\n    if k == 7:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6]\n    if k == 8:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7]\n    if k == 9:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8]\n    if k == 10:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9]\n    if k == 11:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10]\n    if k == 12:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11]\n    if k == 13:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12]\n    if k == 14:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13]\n    if k == 15:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14]\n    if k == 16:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15]\n    if k == 17:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16]\n    if k == 18:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17]\n    if k == 19:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17] + a[18]\n    if k == 20:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17] + a[18] + a[19]\n    if k == 21:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17] + a[18] + a[19] + a[20]\n    if k == 22:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] +",
        "test": "",
        "num_ids": 1479,
        "indeed": false
    },
    {
        "number": 4419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    answer = 0\n    for i in range(n):\n        if a[i] < b[i]:\n            answer += 1\n        elif a[i] > b[i]:\n            answer -= 1\n    return str(answer)\n\n-----Constraints-----\n\n1 <= t <= 10^4\n1 <= a, b <= 10^9\n\n-----Time Limit-----\n\nO(t * n)\n\n-----Space Limit-----\n\nO(n)\n\n-----Submissions-----\n\nSample Input\n\n6\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n\nSample Output\n\n0\n3\n2\n92\n87654322\n9150\n\nExplanation\n\nIn the first test case of the example, you don't need to do anything.\n\nIn the second test case of the example, the following sequence of moves can be applied: $13 \\rightarrow 23 \\rightarrow 32 \\rightarrow 42$ (add $10$, add $9$, add $10$).\n\nIn the third test case of the example, the following sequence of moves can be applied: $18 \\rightarrow 10 \\rightarrow 4$ (subtract $8$, subtract $6$).\n\nIn the fourth test case of the example, the following sequence of moves can be applied: $13 \\rightarrow 10 \\rightarrow 4$ (add $8$, add $6$).\n\nIn the fifth test case of the example, the following sequence of moves can be applied: $18 \\rightarrow 10 \\rightarrow 4$ (subtract $8$, subtract $6$).\n\nIn the sixth test case of the example, the following sequence of moves can be applied: $13 \\rightarrow 10 \\rightarrow 4$ (add $8$, add $6$).\n\nIn the seventh test case of the example, the following sequence of moves can be applied: $18 \\rightarrow 10 \\rightarrow 4$ (subtract $8$, subtract $6$).\n\nIn the eighth test case of the example, the following sequence of moves can be applied: $13 \\rightarrow 10 \\rightarrow 4$ (add $8$, add $6$).\n\nIn the ninth test case of the example, the following sequence of moves can be applied: $18 \\rightarrow 10 \\rightarrow 4$ (subtract $8$, subtract $6$).\n\nIn the tenth test case of the example, the following sequence of moves can be applied: $13 \\rightarrow 10 \\rightarrow 4$ (add $8$, add $6$).\n\nIn the eleventh test case of the example, the following sequence of moves can be applied: $18 \\rightarrow 10 \\rightarrow 4$ (subtract $8$, subtract $6$).\n\nIn the twelfth test case of the example, the following sequence of moves can be applied: $13 \\rightarrow 10 \\rightarrow 4$ (add $8$, add $6$).\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "test": "",
        "num_ids": 739,
        "indeed": false
    },
    {
        "number": 4420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    n = n % k\n    if n == 0:\n        return str(k)\n    else:\n        return str(n) + solution(str(x) + \" \" + str(y) + \" \" + str(n))\n\nprint(solution(stdin))\n",
        "test": "",
        "num_ids": 96,
        "indeed": false
    },
    {
        "number": 4421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    boxes = list(map(int, stdin.split()))\n    boxes.sort()\n    answer = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if boxes[i] + boxes[j] == k:\n                answer += 1\n    return str(answer)\n\nprint(solution(stdin))\n",
        "test": "",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 4422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(stdin[0], stdin[0].lower())\n",
        "test": "",
        "num_ids": 21,
        "indeed": false
    },
    {
        "number": 4423,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P = map(int, stdin.split())\n    city_list = []\n    for _ in range(N):\n        city_list.append(input().split())\n    city_list.sort(key=lambda x: (x[1], x[0]))\n    answer = []\n    for i in range(N):\n        answer.append(city_list[i][0])\n    for i in range(N):\n        answer.append(city_list[i][1])\n    for i in range(N):\n        answer.append(city_list[i][2])\n    for i in range(N):\n        answer.append(city_list[i][3])\n    for i in range(N):\n        answer.append(city_list[i][4])\n    for i in range(N):\n        answer.append(city_list[i][5])\n    return '\\n'.join(answer)\n\ndef",
        "test": "",
        "num_ids": 223,
        "indeed": false
    },
    {
        "number": 4424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    if K > X:\n        return \"No\"\n    if K == X:\n        return \"Yes\"\n    if K > X:\n        return \"No\"\n    if K < X:\n        return \"Yes\"\n    return \"No\"\n",
        "test": "",
        "num_ids": 74,
        "indeed": false
    },
    {
        "number": 4425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N < K:\n        return '0'\n    elif N == K:\n        return '1'\n    else:\n        return '0'\n",
        "test": "",
        "num_ids": 53,
        "indeed": false
    },
    {
        "number": 4426,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = 0\n    for i in range(len(stdin)):\n        if stdin[i] == 'S':\n            days += 1\n    return str(days)\n",
        "test": "",
        "num_ids": 43,
        "indeed": false
    },
    {
        "number": 4427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n    x_2001 = r - D\n    x_2002 = r - D\n    x_2003 = r - D\n    x_2004 = r - D\n    x_2005 = r - D\n    x_2006 = r - D\n    x_2007 = r - D\n    x_2008 = r - D\n    x_2009 = r - D\n    x_2010 = r - D\n    x_2011 = r - D\n    x_2012 = r - D\n    x_2013 = r - D\n    x_2014 = r - D\n    x_2015 = r - D\n    x_2016 = r - D\n    x_2017 = r - D\n    x_2018 = r - D\n    x_2019 = r - D\n    x_2020 = r - D\n    x_2021 = r - D\n    x_2022 = r - D\n    x_2023 = r - D\n    x_2024 = r - D\n    x_2025 = r - D\n    x_2026 = r - D\n    x_2027 = r - D\n    x_2028 = r - D\n    x_2029 = r - D\n    x_2030 = r - D\n    x_2031 = r - D\n    x_2032 = r - D\n    x_2033 = r - D\n    x_2034 = r - D\n    x_2035 = r - D\n    x_2036 = r - D\n    x_2037 = r - D\n    x_2038 = r - D\n    x_2039 = r - D\n    x_2040 = r - D\n    x_2041 = r - D\n    x_2042 = r - D\n    x_2043 = r - D\n    x_2044 = r - D\n    x_2045 = r - D\n    x_2046 = r - D\n    x_2047 = r - D\n    x_2048 = r - D\n    x_2049 = r - D\n    x_2050 = r - D\n    x_2051 = r - D\n    x_2052 = r - D\n    x_2053 = r - D\n    x_2054 = r - D\n    x_2055 = r - D\n    x_2056 = r - D\n    x_2057 = r - D\n    x_2058 = r - D\n    x_2059 = r - D\n    x_2060 = r - D\n    x_2061 = r - D\n    x_2062 = r - D\n    x_2063 = r - D\n    x_2064 = r - D\n    x_2065 = r - D\n    x_2066 = r - D\n    x_2067 = r - D\n    x_2068 = r - D\n    x_2069 = r - D\n    x_2070 = r - D\n    x_2071 = r - D\n    x_2072 = r - D\n    x_2073 = r - D\n    x_2074 = r - D\n    x_2075 = r - D\n    x_2076 = r - D\n    x_2077 = r - D\n    x_2078 = r - D\n    x_2079 = r - D\n    x_2080 = r - D\n    x_2081 = r - D\n    x_2082 = r - D\n    x_2083 = r - D\n    x_2084 = r - D\n    x_2085 = r - D\n    x_2086 = r - D\n    x_2087 = r - D\n    x_2088 = r - D\n    x_2089 = r - D\n    x_2090 = r - D\n    x_2091 = r - D\n    x_2092 = r - D\n    x_2093 = r - D\n    x_2094 = r - D\n    x_2095 = r - D\n    x_2096 = r - D\n    x_2097 = r - D\n    x_2098 = r - D\n    x_2099 = r - D\n    x_2100 = r - D\n    x_2101 = r - D\n    x_2102 = r - D\n    x_2103 = r - D\n    x_2104 = r - D\n    x_2105 = r - D\n    x_2106 = r - D\n    x_2107 = r - D\n    x_2108 = r - D\n    x_2109 = r - D\n    x_2110 = r - D\n    x_2111 = r - D\n    x_2112 = r - D\n    x_2113 = r - D\n    x_2114 = r - D\n    x_2115 = r - D\n    x_2116 = r - D\n    x_2117 = r - D\n    x_2118 = r - D\n    x_2119 = r - D\n    x_2120 = r - D\n    x_2121 = r - D\n    x_2122 = r - D\n    x_2123 = r - D\n    x_2124 = r - D\n    x_2125 = r - D\n    x_2126 = r - D\n    x_2127 = r - D\n    x_2128 = r - D\n    x_2129 = r - D\n    x_2130 = r - D\n    x_2131 = r - D\n    x_2132 = r - D\n    x_2133 = r - D\n    x_2134 = r - D\n    x_2135 = r - D\n    x_2136 = r - D\n    x_2137 = r - D\n    x_2138 = r - D\n    x_2139 = r - D\n    x_2140 = r - D\n    x_2141 = r - D\n    x_2142 = r - D\n    x_2143 = r - D\n    x_2144 = r - D\n    x_2145 = r - D\n    x_2146 = r - D\n    x_2147 = r - D\n    x_2148 = r - D\n    x_2149 = r - D\n    x_2150 = r - D\n    x_2151 = r - D\n    x_2152 = r - D\n    x_2153 = r - D\n    x_2154 = r - D\n    x_2155 = r - D\n    x_2156 = r - D\n    x_2157 = r - D\n    x_2158 = r - D\n    x_2159 = r - D\n    x_2160 = r - D\n    x_2161 = r - D\n    x_2162 = r - D\n    x_2163 = r - D\n    x_2164 = r - D\n    x_2165 = r - D\n    x_2166 = r - D\n    x_2167 = r - D\n    x_2168 = r - D\n    x_2169 = r - D\n    x_2170 = r - D\n    x_2171 = r - D\n    x_2172 = r - D\n    x_2173 = r - D\n    x_2174 = r - D\n    x_2175 = r - D\n    x_2176 = r - D\n    ",
        "test": "",
        "num_ids": 1761,
        "indeed": false
    },
    {
        "number": 4428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = [int(i) for i in stdin.split()]\n    sum_1 = sum(d)\n    if sum_1 == 0:\n        return '0'\n    if sum_1 == sum(d):\n        return '0'\n    if sum_1 == sum(d[::-1]):\n        return '0'\n    if sum_1 == sum(d[::-2]):\n        return '0'\n    if sum_1 == sum(d[::-3]):\n        return '0'\n    if sum_1 == sum(d[::-4]):\n        return '0'\n    if sum_1 == sum(d[::-5]):\n        return '0'\n    if sum_1 == sum(d[::-6]):\n        return '0'\n    if sum_1 == sum(d[::-7]):\n        return '0'\n    if sum_1 == sum(d[::-8]):\n        return '0'\n    if sum_1 == sum(d[::-9]):\n        return '0'\n    if sum_1 == sum(d[::-10]):\n        return '0'\n    if sum_1 == sum(d[::-11]):\n        return '0'\n    if sum_1 == sum(d[::-12]):\n        return '0'\n    if sum_1 == sum(d[::-13]):\n        return '0'\n    if sum_1 == sum(d[::-14]):\n        return '0'\n    if sum_1 == sum(d[::-15]):\n        return '0'\n    if sum_1 == sum(d[::-16]):\n        return '0'\n    if sum_1 == sum(d[::-17]):\n        return '0'\n    if sum_1 == sum(d[::-18]):\n        return '0'\n    if sum_1 == sum(d[::-19]):\n        return '0'\n    if sum_1 == sum(d[::-20]):\n        return '0'\n    if sum_1 == sum(d[::-21]):\n        return '0'\n    if sum_1 == sum(d[::-22]):\n        return '0'\n    if sum_1 == sum(d[::-23]):\n        return '0'\n    if sum_1 == sum(d[::-24]):\n        return '0'\n    if sum_1 == sum(d[::-25]):\n        return '0'\n    if sum_1 == sum(d[::-26]):\n        return '0'\n    if sum_1 == sum(d[::-27]):\n        return '0'\n    if sum_1 == sum(d[::-28]):\n        return '0'\n    if sum_1 == sum(d[::-29]):\n        return '0'\n    if sum_1 == sum(d[::-30]):\n        return '0'\n    if sum_1 == sum(d[::-31]):\n        return '0'\n    if sum_1 == sum(d[::-32]):\n        return '0'\n    if sum_1 == sum(d[::-33]):\n        return '0'\n    if sum_1 == sum(d[::-34]):\n        return '0'\n    if sum_1 == sum(d[::-35]):\n        return '0'\n    if sum_1 == sum(d[::-36]):\n        return '0'\n    if sum_1 == sum(d[::-37]):\n        return '0'\n    if sum_1 == sum(d[::-38]):\n        return '0'\n    if sum_1 == sum(d[::-39]):\n        return '0'\n    if sum_1 == sum(d[::-40]):\n        return '0'\n    if sum_1 == sum(d[::-41]):\n        return '0'\n    if sum_1 == sum(d[::-42]):\n        return '0'\n    if sum_1 == sum(d[::-43]):\n        return '0'\n    if sum_1 == sum(d[::-44]):\n        return '0'\n    if sum_1 == sum(d[::-45]):\n        return '0'\n    if sum_1 == sum(d[::-46]):\n        return '0'\n    if sum_1 == sum(d[::-47]):\n        return '0'\n    if sum_1 == sum(d[::-48]):\n        return '0'\n    if sum_1 == sum(d[::-49]):\n        return '0'\n    if sum_1 == sum(d[::-50]):\n        return '0'\n    if sum_1 == sum(d[::-51]):\n        return '0'\n    if sum_1 == sum(d[::-52]):\n        return '0'\n    if sum_1 == sum(d[::-53]):\n        return '0'\n    if sum_1 == sum(d[::-54]):\n        return '0'\n    if sum_1 == sum(d[::-55]):\n        return '0'\n    if sum_1 == sum(d[::-56]):\n        return '0'\n    if sum_1 == sum(d[::-57]):\n        return '0'\n    if sum_1 == sum(d[::-58]):\n        return '0'\n    if sum_1 == sum(d[::-59]):\n        return '",
        "test": "",
        "num_ids": 1365,
        "indeed": false
    },
    {
        "number": 4429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    c.sort()\n    if a[0] > b[0] and a[0] > c[0]:\n        return \"YES\"\n    elif b[0] > a[0] and b[0] > c[0]:\n        return \"YES\"\n    elif c[0] > a[0] and c[0] > b[0]:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "",
        "num_ids": 174,
        "indeed": false
    },
    {
        "number": 4430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = a[::-1]\n    a = a[:m]\n    a.sort()\n    a = a[::-1]\n    a = a[:k]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n",
        "test": "",
        "num_ids": 1315,
        "indeed": false
    },
    {
        "number": 4431,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    c = list(map(str, range(1, n + 1)))\n    c.sort()\n    c = ''.join(c)\n    c = c.replace('a', 'a')\n    c = c.replace('b', 'b')\n    c = c.replace('c', 'c')\n    c = c.replace('d', 'd')\n    c = c.replace('e', 'e')\n    c = c.replace('f', 'f')\n    c = c.replace('g', 'g')\n    c = c.replace('h', 'h')\n    c = c.replace('i', 'i')\n    c = c.replace('j', 'j')\n    c = c.replace('k', 'k')\n    c = c.replace('l', 'l')\n    c = c.replace('m','m')\n    c = c.replace('n', 'n')\n    c = c.replace('o', 'o')\n    c = c.replace('p', 'p')\n    c = c.replace('q', 'q')\n    c = c.replace('r', 'r')\n    c = c.replace('s','s')\n    c = c.replace('t', 't')\n    c = c.replace('u', 'u')\n    c = c.replace('v', 'v')\n    c = c.replace('w', 'w')\n    c = c.replace('x', 'x')\n    c = c.replace('y', 'y')\n    c = c.replace('z', 'z')\n    c = c.replace('A', 'a')\n    c = c.replace('B', 'b')\n    c = c.replace('C', 'c')\n    c = c.replace('D', 'd')\n    c = c.replace('E', 'e')\n    c = c.replace('F', 'f')\n    c = c.replace('G', 'g')\n    c = c.replace('H', 'h')\n    c = c.replace('I', 'i')\n    c = c.replace('J', 'j')\n    c = c.replace('K', 'k')\n    c = c.replace('L', 'l')\n    c = c.replace('M','m')\n    c = c.replace('N', 'n')\n    c = c.replace('O', 'o')\n    c = c.replace('P', 'p')\n    c = c.replace('Q', 'q')\n    c = c.replace('R', 'r')\n    c = c.replace('S','s')\n    c = c.replace('T', 't')\n    c = c.replace('U', 'u')\n    c = c.replace('V', 'v')\n    c = c.replace('W', 'w')\n    c = c.replace('X', 'x')\n    c = c.replace('Y', 'y')\n    c = c.replace('Z', 'z')\n    c = c.replace('a', 'a')\n    c = c.replace('b', 'b')\n    c = c.replace('c', 'c')\n    c = c.replace('d', 'd')\n    c = c.replace('e', 'e')\n    c = c.replace('f', 'f')\n    c = c.replace('g', 'g')\n    c = c.replace('h', 'h')\n    c = c.replace('i', 'i')\n    c = c.replace('j', 'j')\n    c = c.replace('k', 'k')\n    c = c.replace('l', 'l')\n    c = c.replace('m','m')\n    c = c.replace('n', 'n')\n    c = c.replace('o', 'o')\n    c = c.replace('p', 'p')\n    c = c.replace('q', 'q')\n    c = c.replace('r', 'r')\n    c = c.replace('s','s')\n    c = c.replace('t', 't')\n    c = c.replace('u', 'u')\n    c = c.replace('v', 'v')\n    c = c.replace('w', 'w')\n    c = c.replace('x', 'x')\n    c = c.replace('y', 'y')\n    c = c.replace('z', 'z')\n    c = c.replace('A', 'a')\n    c = c.replace('B', 'b')\n    c = c.replace('C', 'c')\n    c = c.replace('D', 'd')\n    c = c.replace('E', 'e')\n    c = c.replace('F', 'f')\n    c = c.replace('G', 'g')\n    c = c.replace('H', 'h')\n    c = c.replace('I', 'i')\n    c = c.replace('J', 'j')\n    c = c.replace('K', 'k')\n    c = c.replace('L', 'l')\n    c = c.replace('M','m')\n    c = c.replace('N', 'n')\n    c = c.replace('O', 'o')\n    c = c.replace('P', 'p')\n    c = c.replace('Q', 'q')\n    c = c.replace('R', 'r')\n    c = c.replace('S','s')\n    c = c.replace('T', 't')\n    c = c.replace('U', 'u')\n    c = c.replace('V', 'v')\n    c = c.replace('W', 'w')\n    c = c.replace('X', 'x')\n    c = c.replace('Y', 'y')\n    c = c.replace('Z', 'z')",
        "test": "",
        "num_ids": 1402,
        "indeed": false
    },
    {
        "number": 4432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    answer = 0\n    for i in range(n):\n        answer += a[i]\n    return str(answer)\n\ndef",
        "test": "",
        "num_ids": 67,
        "indeed": false
    },
    {
        "number": 4433,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        v1, v2 = map(int, stdin.split())\n        edges.append((v1, v2))\n    edges.sort()\n    visited = [False] * n\n    answer = []\n    def dfs(v, visited):\n        visited[v] = True\n        for u in range(n):\n            if not visited[u] and edges[u][0] == v:\n                answer.append(edges[u][1])\n                dfs(edges[u][1], visited)\n    dfs(0, visited)\n    return '\\n'.join(map(str, answer))\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= v <= n\n0 <= u <= n\n\n-----Time Limit: 1 sec (py3)-----\n\nRuntime: 32 ms (32.09%)\nMemory Usage: 14.2 MB (14.2.02%)\n\n-----Submissions-----\n\nSubmissions\n\nTime Limit: 1 sec (py3)\n\nMemory Usage: 14.2 MB (14.2.02%)\n\n-----Alternatives-----\n\nAlternatives\n\nTime Limit: 1 sec (py3)\n\nMemory Usage: 14.2 MB (14.2.02%)\n\n-----Ideas-----\n\nIdeas\n\nTime Limit: 1 sec (py3)\n\nMemory Usage: 14.2 MB (14.2.02%)\n\n-----Submissions-----\n\nSubmissions\n\nTime Limit: 1 sec (py3)\n\nMemory Usage: 14.2 MB (14.2.02%)\n\n-----Constraints-----\n\n0 <= v <= n\n0 <= u <= n\n\n-----Alternatives-----\n\nAlternatives\n\nTime Limit: 1 sec (py3)\n\nMemory Usage: 14.2 MB (14.2.02%)\n\n-----Constraints-----\n\n0 <= v <= n\n0 <= u <= n\n\n-----Sample Input-1:\n\n5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n\nSample Output-1:\n\n3 5\n2 1\n3 2\n3 4\n4 1\n\nSample Input-2:\n\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n3 4\n\nSample Output-2:\n\n4 1\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n3 4\n\n-----Sample Input-3:\n\n8 9\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3",
        "test": "",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 4434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2!= 0:\n        return 0\n    n = n // 2\n    m = n * (n + 1) // 2\n    return m\n\ndef",
        "test": "",
        "num_ids": 52,
        "indeed": false
    },
    {
        "number": 4435,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.insert(0, 0)\n    a.append(n)\n    a.sort()\n    a.insert(n, n)\n    a.sort()\n    a.",
        "test": "",
        "num_ids": 1637,
        "indeed": false
    },
    {
        "number": 4436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    c = list(map(int, stdin.strip().split()))\n    for i in range(n):\n        if a[i]!= b[i] or a[i]!= c[i]:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "",
        "num_ids": 111,
        "indeed": false
    },
    {
        "number": 4437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    l = len(s)\n    if l % 2 == 0:\n        return solution(s[1:l//2]) + solution(s[l//2:])\n    else:\n        return solution(s[1:l//2]) + solution(s[l//2:l//2+1])\n\ndef",
        "test": "",
        "num_ids": 95,
        "indeed": false
    },
    {
        "number": 4438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n",
        "test": "",
        "num_ids": 1330,
        "indeed": false
    },
    {
        "number": 4439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return '2'\n    elif a == 3:\n        return '2'\n    elif a == 1:\n        return '2'\n    else:\n        return '1'\n\ndef",
        "test": "",
        "num_ids": 69,
        "indeed": false
    },
    {
        "number": 4440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    if L < 0:\n        return \"Error\"\n    if L == 0:\n        return \"Error\"\n    if L == 1:\n        return \"Error\"\n    if L == 2:\n        return \"Error\"\n    if L == 3:\n        return \"Error\"\n    if L == 4:\n        return \"Error\"\n    if L == 5:\n        return \"Error\"\n    if L == 6:\n        return \"Error\"\n    if L == 7:\n        return \"Error\"\n    if L == 8:\n        return \"Error\"\n    if L == 9:\n        return \"Error\"\n    if L == 10:\n        return \"Error\"\n    if L == 11:\n        return \"Error\"\n    if L == 12:\n        return \"Error\"\n    if L == 13:\n        return \"Error\"\n    if L == 14:\n        return \"Error\"\n    if L == 15:\n        return \"Error\"\n    if L == 16:\n        return \"Error\"\n    if L == 17:\n        return \"Error\"\n    if L == 18:\n        return \"Error\"\n    if L == 19:\n        return \"Error\"\n    if L == 20:\n        return \"Error\"\n    if L == 21:\n        return \"Error\"\n    if L == 22:\n        return \"Error\"\n    if L == 23:\n        return \"Error\"\n    if L == 24:\n        return \"Error\"\n    if L == 25:\n        return \"Error\"\n    if L == 26:\n        return \"Error\"\n    if L == 27:\n        return \"Error\"\n    if L == 28:\n        return \"Error\"\n    if L == 29:\n        return \"Error\"\n    if L == 30:\n        return \"Error\"\n    if L == 31:\n        return \"Error\"\n    if L == 32:\n        return \"Error\"\n    if L == 33:\n        return \"Error\"\n    if L == 34:\n        return \"Error\"\n    if L == 35:\n        return \"Error\"\n    if L == 36:\n        return \"Error\"\n    if L == 37:\n        return \"Error\"\n    if L == 38:\n        return \"Error\"\n    if L == 39:\n        return \"Error\"\n    if L == 40:\n        return \"Error\"\n    if L == 41:\n        return \"Error\"\n    if L == 42:\n        return \"Error\"\n    if L == 43:\n        return \"Error\"\n    if L == 44:\n        return \"Error\"\n    if L == 45:\n        return \"Error\"\n    if L == 46:\n        return \"Error\"\n    if L == 47:\n        return \"Error\"\n    if L == 48:\n        return \"Error\"\n    if L == 49:\n        return \"Error\"\n    if L == 50:\n        return \"Error\"\n    if L == 51:\n        return \"Error\"\n    if L == 52:\n        return \"Error\"\n    if L == 53:\n        return \"Error\"\n    if L == 54:\n        return \"Error\"\n    if L == 55:\n        return \"Error\"\n    if L == 56:\n        return \"Error\"\n    if L == 57:\n        return \"Error\"\n    if L == 58:\n        return \"Error\"\n    if L == 59:\n        return \"Error\"\n    if L == 60:\n        return \"Error\"\n    if L == 61:\n        return \"Error\"\n    if L == 62:\n        return \"Error\"\n    if L == 63:\n        return \"Error\"\n    if L == 64:\n        return \"Error\"\n    if L == 65:\n        return \"Error\"\n    if L == 66:\n        return \"Error\"\n    if L == 67:\n        return \"Error\"\n    if L == 68:\n        return \"Error\"\n    if L == 69:\n        return \"Error\"\n    if L == 70:\n        return \"Error\"\n    if L == 71:\n        return \"Error\"\n    if L == 72:\n        return \"Error\"\n    if L == 73:\n        return \"Error\"\n    if L == 74:\n        return \"Error\"\n    if L == 75:\n        return \"Error\"\n    if L == 76:\n        return \"Error\"\n    if L == 77:\n        return \"Error\"\n    if L == 78:\n        return \"Error\"\n    if L == 79:\n        return \"Error\"\n    if L == 80:\n        return \"Error\"\n    if L == 81:\n        return \"Error\"\n    if L == 82:\n        return \"Error\"\n    if L == 83:\n        return \"Error\"\n    if L == 84:\n        return \"Error\"\n    if L == 85:\n        return \"Error\"\n    if L == 86:\n        return \"Error\"\n    if L == 87:\n        return \"Error\"\n    if L == 88:\n        return \"Error\"\n    if L == 89:\n        return \"Error\"\n    if L == 90:\n        return \"Error\"\n    if L == 91:\n        return \"Error\"\n    if L == 92:\n        return \"Error\"\n    if L == 93:\n        return \"Error\"\n    if L == 94:\n        return \"Error\"\n    if L == 95:\n        return \"Error\"\n    if L == 96:\n        return \"Error\"\n    if L == 97:\n        return \"Error\"\n    if L == 98:\n        return \"Error\"\n    if L == 99:\n        return \"Error\"\n    if L == 100:\n        return \"Error\"\n    if L == 101:\n        return \"Error\"\n    if L == 102:\n        return \"Error\"\n    if L == 103:\n        return \"Error\"\n    if L == 104:\n        return \"Error\"\n    if L == 105:\n        return \"Error\"\n    if L == 106:\n        return \"Error\"\n    if L == 107:\n        return \"Error\"\n    if L == 108:\n        return \"Error\"\n    if L == 109:\n        return \"Error\"\n    if L == 110:\n        return \"Error\"\n    if L == 111:\n        return \"Error\"\n    if L == 112:\n        return \"Error\"\n    if L == 113:\n        return \"Error\"\n    if L == 114:\n        return \"Error\"\n    if L == 115:\n        return \"Error\"\n    if L == 116:\n        return \"Error\"\n    if L == 117:\n        return \"Error\"\n    if L == 118:\n        return \"Error\"\n    if L == 119:\n        return \"Error\"\n    if L == 120:\n        return \"Error\"\n    if L == 121:\n        return \"Error\"\n    if L == 122:\n        return \"Error\"\n    if L == 123:\n        return \"Error\"\n    if L == 124:\n        return \"Error\"\n    if L == 125:\n        return \"Error\"\n    if L == 126:\n        return \"Error\"\n    if L == 127:\n        return \"Error\"\n    if L == 128:\n        return \"Error\"\n    if L == 129:\n        return \"Error\"\n    if L == 130:\n        return \"Error\"\n    if L == 131:\n        return \"Error\"\n    if L == 132:\n        return \"Error\"\n    if L == 133:\n        return \"Error\"\n    if L == 134:\n        return \"Error\"\n    if L == 135:\n        return \"Error\"\n    if L == 136:\n        return \"Error\"\n    if L == 137:\n        return \"Error\"\n    if L == 138:\n        return \"Error\"\n    if L",
        "test": "",
        "num_ids": 1833,
        "indeed": false
    },
    {
        "number": 4441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 1:\n        return \"Hello World\"\n    elif N == 2:\n        return str(A+B)\n    else:\n        return solution(stdin)\n\ndef",
        "test": "",
        "num_ids": 57,
        "indeed": false
    },
    {
        "number": 4442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return '3333'\n    if a > b:\n        return '444'\n    return '444'\n",
        "test": "",
        "num_ids": 48,
        "indeed": false
    },
    {
        "number": 4443,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[-1]\n",
        "test": "",
        "num_ids": 13,
        "indeed": false
    },
    {
        "number": 4444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n",
        "test": "",
        "num_ids": 9,
        "indeed": false
    },
    {
        "number": 4445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    answer = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            answer += a[i]\n        else:\n            answer -= a[i]\n    return str(answer)\n",
        "test": "",
        "num_ids": 89,
        "indeed": false
    },
    {
        "number": 4446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    h = [int(i) for i in stdin.split()]\n    h.sort()\n    \n    def get_max_points(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_2(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_3(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_4(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_5(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_6(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_7(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_8(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_9(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_10(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_11(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_12(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_13(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_14(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_15(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_16(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_17(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_18(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_19(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_20(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_21(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_22(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_23(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_24(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_25(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_26(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i] >= 0:\n                points += h[i]\n        return points\n    \n    def get_max_points_27(h):\n        points = 0\n        for i in range(len(h)):\n            if h[i]",
        "test": "",
        "num_ids": 1484,
        "indeed": false
    },
    {
        "number": 4447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = [0] * n\n    for i in range(n):\n        c[i] = a[i] % m\n    for i in range(n):\n        if c[i] == 0:\n            c[i] = m\n    for i in range(n):\n        if c[i] == m:\n            c[i] = 0\n    return str(min(c))\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^9\n\n-----Time Limit-----\n1 sec\n\n-----Space Limit-----\n1 sec\n\n-----Tags-----\nFinal\n\n'''",
        "test": "",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 4448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k_1, k_2, d_j = map(int, stdin.split())\n    k_i = k_1 + k_2\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, n)\n    k_i = max(k_i, 1)\n    k_i = min(k_i, m)\n    k_i = max(k_i, 1)\n",
        "test": "",
        "num_ids": 1368,
        "indeed": false
    },
    {
        "number": 4449,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip())\n    for _ in range(q):\n        n, a = map(int, stdin.strip().split())\n        if n == 0:\n            print(\"NO\")\n            continue\n        if n == 1:\n            print(\"YES\")\n            continue\n        if n == 2:\n            print(\"YES\")\n            continue\n        if n == 3:\n            print(\"YES\")\n            continue\n        if n == 4:\n            print(\"YES\")\n            continue\n        if n == 5:\n            print(\"YES\")\n            continue\n        if n == 6:\n            print(\"YES\")\n            continue\n        if n == 7:\n            print(\"YES\")\n            continue\n        if n == 8:\n            print(\"YES\")\n            continue\n        if n == 9:\n            print(\"YES\")\n            continue\n        if n == 10:\n            print(\"YES\")\n            continue\n        if n == 11:\n            print(\"YES\")\n            continue\n        if n == 12:\n            print(\"YES\")\n            continue\n        if n == 13:\n            print(\"YES\")\n            continue\n        if n == 14:\n            print(\"YES\")\n            continue\n        if n == 15:\n            print(\"YES\")\n            continue\n        if n == 16:\n            print(\"YES\")\n            continue\n        if n == 17:\n            print(\"YES\")\n            continue\n        if n == 18:\n            print(\"YES\")\n            continue\n        if n == 19:\n            print(\"YES\")\n            continue\n        if n == 20:\n            print(\"YES\")\n            continue\n        if n == 21:\n            print(\"YES\")\n            continue\n        if n == 22:\n            print(\"YES\")\n            continue\n        if n == 23:\n            print(\"YES\")\n            continue\n        if n == 24:\n            print(\"YES\")\n            continue\n        if n == 25:\n            print(\"YES\")\n            continue\n        if n == 26:\n            print(\"YES\")\n            continue\n        if n == 27:\n            print(\"YES\")\n            continue\n        if n == 28:\n            print(\"YES\")\n            continue\n        if n == 29:\n            print(\"YES\")\n            continue\n        if n == 30:\n            print(\"YES\")\n            continue\n        if n == 31:\n            print(\"YES\")\n            continue\n        if n == 32:\n            print(\"YES\")\n            continue\n        if n == 33:\n            print(\"YES\")\n            continue\n        if n == 34:\n            print(\"YES\")\n            continue\n        if n == 35:\n            print(\"YES\")\n            continue\n        if n == 36:\n            print(\"YES\")\n            continue\n        if n == 37:\n            print(\"YES\")\n            continue\n        if n == 38:\n            print(\"YES\")\n            continue\n        if n == 39:\n            print(\"YES\")\n            continue\n        if n == 40:\n            print(\"YES\")\n            continue\n        if n == 41:\n            print(\"YES\")\n            continue\n        if n == 42:\n            print(\"YES\")\n            continue\n        if n == 43:\n            print(\"YES\")\n            continue\n        if n == 44:\n            print(\"YES\")\n            continue\n        if n == 45:\n            print(\"YES\")\n            continue\n        if n == 46:\n            print(\"YES\")\n            continue\n        if n == 47:\n            print(\"YES\")\n            continue\n        if n == 48:\n            print(\"YES\")\n            continue\n        if n == 49:\n            print(\"YES\")\n            continue\n        if n == 50:\n            print(\"YES\")\n            continue\n        if n == 51:\n            print(\"YES\")\n            continue\n        if n == 52:\n            print(\"YES\")\n            continue\n        if n == 53:\n            print(\"YES\")\n            continue\n        if n == 54:\n            print(\"YES\")\n            continue\n        if n == 55:\n            print(\"YES\")\n            continue\n        if n == 56:\n            print(\"YES\")\n            continue\n        if n == 57:\n            print(\"YES\")\n            continue\n        if n == 58:\n            print(\"YES\")\n            continue\n        if n == 59:\n            print(\"YES\")\n            continue\n        if n == 60:\n            print(\"YES\")\n            continue\n        if n == 61:\n            print(\"YES\")\n            continue\n        if n == 62:\n            print(\"YES\")\n            continue\n        if n == 63:\n            print(\"YES\")\n            continue\n        if n == 64:\n            print(\"YES\")\n            continue\n        if n == 65:\n            print(\"YES\")\n            continue\n        if n == 66:\n            print(\"YES\")\n            continue\n        if n == 67:\n            print(\"YES\")\n            continue\n        if n == 68:\n            print(\"YES\")\n            continue\n        if n == 69:\n            print(\"YES\")\n            continue\n        if n == 70:\n            print(\"YES\")\n            continue\n        if n == 71:\n            print(\"YES\")\n            continue\n        if n == 72:\n            print(\"YES\")\n            continue\n        if n == 73:\n            print(\"YES\")\n            continue\n        if n == 74:\n            print(\"YES\")\n            continue\n        if n == 75:\n            print(\"YES\")\n            continue\n        if n == 76:\n            print(\"YES\")\n            continue\n        if n == 77:\n            print(\"YES\")\n            continue\n        if n == 78:\n            print(\"YES\")\n            continue\n        if n == 79:\n            print(\"YES\")\n            continue\n        if n == 80:\n            print(\"YES\")\n            continue\n        if n == 81:\n            print(\"YES\")\n            continue\n        if n == 82:\n            print(\"YES\")\n            continue\n        if n == 83:\n            print(\"YES\")\n            continue\n        if n == 84:\n            print(\"YES\")\n            continue\n        if n == 85:\n            print(\"YES\")\n            continue\n        if n == 86:\n            print(\"YES\")\n            continue\n        if n == 87:\n            print(\"YES\")\n            continue\n        if n == 88:\n            print(\"YES\")\n            continue\n        if n == 89:\n            print(\"YES\")\n            continue\n        if n == 90:\n            print(\"YES\")\n            continue\n        if n == 91:\n            print(\"YES\")\n            continue\n        if n == 92:\n            print(\"YES\")\n            continue\n        if n == 93:\n            print(\"YES\")\n            continue\n        if n == 94:\n            print(\"YES\")\n            continue\n        if n == 95:\n            print(\"YES\")\n            continue\n        if n == 96:\n            print(\"YES\")\n            continue\n        if n == 97:\n            print(\"YES\")\n            ",
        "test": "",
        "num_ids": 1604,
        "indeed": false
    },
    {
        "number": 4450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y, w = map(int, stdin.split())\n        graph[x].append((y, w))\n        graph[y].append((x, w))\n    \n    def dfs(v, visited):\n        visited[v] = True\n        for w in graph[v]:\n            if not visited[w[0]]:\n                dfs(w[0], visited)\n    \n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            dfs(i, visited)\n    \n    def dfs_rec(v, visited):\n        visited[v] = True\n        for w in graph[v]:\n            if not visited[w[0]]:\n                dfs_rec(w[0], visited)\n    \n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            dfs_rec(i, visited)\n    \n    def dfs_iter(v, visited):\n        visited[v] = True\n        for w in graph[v]:\n            if not visited[w[0]]:\n                dfs_iter(w[0], visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs_iter(i, visited",
        "test": "",
        "num_ids": 1401,
        "indeed": false
    },
    {
        "number": 4451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = sorted(a)\n    res = 0\n    for i in range(n):\n        res += a[i] - a[i-1]\n    return str(res)\n\nprint(solution(\"1 1 3 4 2\"))\nprint(solution(\"6\"))\nprint(solution(\"10\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15\"))\nprint(solution(\"10 5 12 13 2 15",
        "test": "",
        "num_ids": 1284,
        "indeed": false
    },
    {
        "number": 4452,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1:\n        return ''\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '1'\n    if n == 3:\n        return '1'\n    if n == 4:\n        return '1'\n    if n == 5:\n        return '1'\n    if n == 6:\n        return '1'\n    if n == 7:\n        return '1'\n    if n == 8:\n        return '1'\n    if n == 9:\n        return '1'\n    if n == 10:\n        return '1'\n    if n == 11:\n        return '1'\n    if n == 12:\n        return '1'\n    if n == 13:\n        return '1'\n    if n == 14:\n        return '1'\n    if n == 15:\n        return '1'\n    if n == 16:\n        return '1'\n    if n == 17:\n        return '1'\n    if n == 18:\n        return '1'\n    if n == 19:\n        return '1'\n    if n == 20:\n        return '1'\n    if n == 21:\n        return '1'\n    if n == 22:\n        return '1'\n    if n == 23:\n        return '1'\n    if n == 24:\n        return '1'\n    if n == 25:\n        return '1'\n    if n == 26:\n        return '1'\n    if n == 27:\n        return '1'\n    if n == 28:\n        return '1'\n    if n == 29:\n        return '1'\n    if n == 30:\n        return '1'\n    if n == 31:\n        return '1'\n    if n == 32:\n        return '1'\n    if n == 33:\n        return '1'\n    if n == 34:\n        return '1'\n    if n == 35:\n        return '1'\n    if n == 36:\n        return '1'\n    if n == 37:\n        return '1'\n    if n == 38:\n        return '1'\n    if n == 39:\n        return '1'\n    if n == 40:\n        return '1'\n    if n == 41:\n        return '1'\n    if n == 42:\n        return '1'\n    if n == 43:\n        return '1'\n    if n == 44:\n        return '1'\n    if n == 45:\n        return '1'\n    if n == 46:\n        return '1'\n    if n == 47:\n        return '1'\n    if n == 48:\n        return '1'\n    if n == 49:\n        return '1'\n    if n == 50:\n        return '1'\n    if n == 51:\n        return '1'\n    if n == 52:\n        return '1'\n    if n == 53:\n        return '1'\n    if n == 54:\n        return '1'\n    if n == 55:\n        return '1'\n    if n == 56:\n        return '1'\n    if n == 57:\n        return '1'\n    if n == 58:\n        return '1'\n    if n == 59:\n        return '1'\n    if n == 60:\n        return '1'\n    if n == 61:\n        return '1'\n    if n == 62:\n        return '1'\n    if n == 63:\n        return '1'\n    if n == 64:\n        return '1'\n    if n == 65:\n        return '1'\n    if n == 66:\n        return '1'\n    if n == 67:\n        return '1'\n    if n == 68:\n        return '1'\n    if n == 69:\n        return '1'\n    if n == 70:\n        return '1'\n    if n == 71:\n        return '1'\n    if n == 72:\n        return '1'\n    if n == 73:\n        return '1'\n    if n == 74:\n        return '1'\n    if n == 75:\n        return '1'\n    if n == 76:\n        return '1'\n    if n == 77:\n        return '1'\n    if n == 78:\n        return '1'\n    if n == 79:\n        return '1'\n    if n == 80:\n        return '1'\n    if n == 81:\n        return '1'\n    if n == 82:\n        return '1'\n    if n == 83:\n        return '1'\n    if n == 84:\n        return '1'\n    if n == 85:\n        return '1'\n    if n == 86:\n        return '1'\n    if n == 87:\n        return '1'\n    if n == 88:\n        return '1'\n    if n == 89:\n        return '1'\n    if n == 90:\n        return '1'\n    if n == 91:\n        return '1'\n    if n == 92:\n        return '1'\n    if n == 93:\n        return '1'\n    if n == 94:\n        return '1'\n    if n == 95:\n        return '1'\n    if n == 96:\n        return '1'\n    if n == 97:\n        return '1'\n    if n == 98:\n        return '1'\n    if n == 99:\n        return '1'\n    if n == 100:\n        return '1'\n    if n == 101:\n        return '1'\n    if n == 102:\n        return '1'\n    if n == 103:\n        return '1'\n    if n == 104:\n        return '1'\n    if n == 105:\n        return '1'\n    if n == 106:\n        return '1'\n    if n == 107:\n        return '1'\n    if n == 108:\n        return '1'\n    if n == 109:\n        return '1'\n    if n == 110:\n        return '1'\n    if n == 111:\n        return '1'\n    if n == 112:\n        return '1'\n    if n == 113:\n        return '1'\n    if n == 114:\n        return '1'\n    if n == 115:\n        return '1'\n    if n == 116:\n        return '1'\n    if n == 117:\n        return '1'\n    if n == 118:\n        return '1'\n    if n == 119:\n        return '1'\n    if n == 120:\n        return '1'\n    if n == 121:\n        return '1'\n    if n == 122:\n        return '1'\n    if n == 123:\n        return '1'\n    if n == 124:\n        return '1'\n    if n == 125:\n",
        "test": "",
        "num_ids": 1640,
        "indeed": false
    },
    {
        "number": 4453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    p_list = list(map(int, stdin.split()))\n    p_list.sort()\n    answer = 0\n    for i in range(n):\n        answer += p_list[i] * (i + 1)\n    return str(answer)\n\nprint(solution(stdin))\n",
        "test": "",
        "num_ids": 89,
        "indeed": false
    },
    {
        "number": 4454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(q):\n        a_i = a[i]\n        a_i_min = a_i\n        for j in range(i+1, q):\n            a_i_min = min(a_i_min, a[j])\n        a_i_min = a_i_min + a_i\n        a.remove(a_i)\n        a.append(a_i_min)\n    return str(min(a))\n\n-----Constraints-----\n1 <= q <= 10^5\n1 <= n <= 10^5\n1 <= a[i] <= 10^7\n\n-----Time complexity-----\nO(n^2)\n\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(n)\n\n\"\"\"\n\nclass Solution:\n    def minEatingSpeed(self, piles: List[int], speed: List[int]) -> int:\n        piles.sort()\n        speed.sort()\n        \n        for i in range(len(piles)):\n            piles[i] += speed[i]\n            \n        for i in range(len(piles)):\n            piles[i] -= speed[i]\n            \n        return min(piles)\n",
        "test": "",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 4455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    pairs = []\n    for i in range(n):\n        pairs.append(map(int, stdin.split()))\n    pairs.sort(key=lambda x: x[0])\n    for i in range(n):\n        for j in range(i+1, n):\n            if pairs[i][0] < pairs[j][0] and pairs[i][1] < pairs[j][1]:\n                pairs[i], pairs[j] = pairs[j], pairs[i]\n    return str(len(pairs))\n\ndef",
        "test": "",
        "num_ids": 148,
        "indeed": false
    },
    {
        "number": 4456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    q = list(map(int, stdin.split()))\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q):\n        return \"NO\"\n    \n    if len(p)!= len(q",
        "test": "",
        "num_ids": 1500,
        "indeed": false
    },
    {
        "number": 4457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    cans = [int(stdin.split()[i]) for i in range(n)]\n    cans.sort()\n    answer = 0\n    for i in range(n):\n        answer += cans[i] * (n - i)\n    return str(answer)\n\nprint(solution(\"3 2\"))\nprint(solution(\"4\"))\nprint(solution(\"6\"))\nprint(solution(\"2 1 4 3\"))\nprint(solution(\"2 1 4 5\"))\nprint(solution(\"2 1 4 5 6\"))\nprint(solution(\"2 1 4 5 6 7\"))\nprint(solution(\"2 1 4 5 6 7 8\"))\nprint(solution(\"2 1 4 5 6 7 8 9\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\"))\nprint(solution(\"2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22",
        "test": "",
        "num_ids": 1415,
        "indeed": false
    },
    {
        "number": 4458,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return str(n)\n    \n    p = [0] * n\n    p[0] = 1\n    p[1] = 1\n    for i in range(2, n):\n        p[i] = p[i - 1] + p[i - 2]\n    \n    for i in range(2, n):\n        p[i] = p[i - 1] + p[i - 2]\n    \n    return str(p[n - 1])\n\n-----Sample Output-----\nSample Input:\n5\n4 2 5 1 3\n\nSample Output:\n3\n\ni=1, 2, and 4 satisfy the condition, but i=3 does not - for example, P_i > P_j holds for j = 1.\n\nSample Input:\n5\n4 2 5 1 3\n\nSample Output:\n3\n\ni=1, 2, and 4 satisfy the condition, but i=3 does not - for example, P_i > P_j holds for j = 1.\n\nSample Input:\n5\n4 2 5 1 3\n\nSample Output:\n3\n\ni=1, 2, and 4 satisfy the condition, but i=3 does not - for example, P_i > P_j holds for j = 1.\n\n-----Constraints-----\n - 1 \\leq N \\leq 2 \\times 10^5\n - P_1, \\ldots, P_N is a permutation of 1, \\ldots, N.  \n - All values in input are integers.\n\n-----Time Complexity-----\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\nO(N",
        "test": "",
        "num_ids": 1771,
        "indeed": false
    },
    {
        "number": 4459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = a[n:]\n    a = [a[i] for i in range(n)]\n    a.sort()\n    return str(len(a))\n\ndef",
        "test": "",
        "num_ids": 73,
        "indeed": false
    },
    {
        "number": 4460,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    if x_1 == 0 and x_2 == 0 and x_3 == 0 and x_4 == 0 and x_5 == 0:\n        return str(0)\n    else:\n        return str(1)\n\ndef",
        "test": "",
        "num_ids": 85,
        "indeed": false
    },
    {
        "number": 4461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    if H < W:\n        return '0'\n    if H == W:\n        return str(H)\n    if H % 2 == 0:\n        return str(H // 2) +'' + solution(stdin)\n    else:\n        return str(H // 2) +'' + solution(stdin) +'' + solution(stdin)\n\ndef",
        "test": "",
        "num_ids": 100,
        "indeed": false
    },
    {
        "number": 4462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    for i in range(N):\n        if a[i] % 4 == 0:\n            a[i] = a[i] * 2\n    return \"Yes\" if a[N - 1] % 4 == 0 else \"No\"\n\ndef",
        "test": "",
        "num_ids": 93,
        "indeed": false
    },
    {
        "number": 4463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    t = stdin.split()\n    N = len(s)\n    M = len(t)\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n    if N < M:\n        return \"No\"\n    if N == M:\n        return \"Yes\"\n",
        "test": "",
        "num_ids": 1647,
        "indeed": false
    },
    {
        "number": 4464,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A % B == 0:\n        return 'YES'\n    else:\n        return 'NO'\n\n-----Sample Output-----\nNO\n\nFor example, if you select 7 and 14, the sum 21 is congruent to 1 modulo 5.\ndef",
        "test": "",
        "num_ids": 77,
        "indeed": false
    },
    {
        "number": 4465,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        A, B = B, A\n    return str(A * B)\n\ndef",
        "test": "",
        "num_ids": 43,
        "indeed": false
    },
    {
        "number": 4466,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    if X > Y + 2 * Z:\n        return '0'\n    elif X > Y + Z:\n        return '0'\n    else:\n        return str(X + Y + Z)\n\nprint(solution(\"3 3 1\"))\n",
        "test": "",
        "num_ids": 77,
        "indeed": false
    },
    {
        "number": 4467,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a_1, b_1, c_1, d_1 = map(int, stdin.split())\n    a_2, b_2, c_2, d_2 = map(int, stdin.split())\n    a_N, b_N, c_N, d_N = map(int, stdin.split())\n    a_1, b_1, c_1, d_1 = sorted([a_1, b_1, c_1, d_1])\n    a_2, b_2, c_2, d_2 = sorted([a_2, b_2, c_2, d_2])\n    a_N, b_N, c_N, d_N = sorted([a_N, b_N, c_N, d_N])\n    a_N = a_N - 1\n    b_N = b_N - 1\n    c_N = c_N - 1\n    d_N = d_N - 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    c_N = c_N + 1\n    d_N = d_N + 1\n    a_N = a_N - 1\n    b_N = b_N - 1\n    c_N = c_N - 1\n    d_N = d_N - 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    c_N = c_N + 1\n    d_N = d_N + 1\n    a_N = a_N - 1\n    b_N = b_N - 1\n    c_N = c_N - 1\n    d_N = d_N - 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    c_N = c_N + 1\n    d_N = d_N + 1\n    a_N = a_N - 1\n    b_N = b_N - 1\n    c_N = c_N - 1\n    d_N = d_N - 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    c_N = c_N + 1\n    d_N = d_N + 1\n    a_N = a_N - 1\n    b_N = b_N - 1\n    c_N = c_N - 1\n    d_N = d_N - 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    c_N = c_N + 1\n    d_N = d_N + 1\n    a_N = a_N - 1\n    b_N = b_N - 1\n    c_N = c_N - 1\n    d_N = d_N - 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    c_N = c_N + 1\n    d_N = d_N + 1\n    a_N = a_N - 1\n    b_N = b_N - 1\n    c_N = c_N - 1\n    d_N = d_N - 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    c_N = c_N + 1\n    d_N = d_N + 1\n    a_N = a_N - 1\n    b_N = b_N - 1\n    c_N = c_N - 1\n    d_N = d_N - 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    c_N = c_N + 1\n    d_N = d_N + 1\n    a_N = a_N - 1\n    b_N = b_N - 1\n    c_N = c_N - 1\n    d_N = d_N - 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    c_N = c_N + 1\n    d_N = d_N + 1\n    a_N = a_N - 1\n    b_N = b_N - 1\n    c_N = c_N - 1\n    d_N = d_N - 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    c_N = c_N + 1\n    d_N = d_N + 1\n    a_N = a_N - 1\n    b_N = b_N - 1\n    c_N = c_N - 1\n    d_N = d_N - 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    c_N = c_N + 1\n    d_N = d_N + 1\n    a_N = a_N - 1\n    b_N = b_N - 1\n    c_N = c_N - 1\n    d_N = d_N - 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    c_N = c_N + 1\n    d_N = d_N + 1\n    a_N = a_N - 1\n    b_N = b_N - 1\n    c_N = c_N - 1\n    d_N = d_N - 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    c_N = c_N + 1\n    d_N = d_N + 1\n    a_N = a_N - 1\n    b_N = b_N - 1\n    c_N = c_N - 1\n    d_N = d_N - 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    c_N = c_N + 1\n    d_N = d_N + 1\n    a_N = a_N - 1\n    b_N = b_N - 1\n    c_N = c_N - 1\n    d_N = d_N - 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    c_N = c_N + 1\n    d_N = d_N + 1\n    a_N = a_N - 1\n    b_N = b_N - 1\n    c_N = c_N - 1\n    d_N = d_N - 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    c_N = c_N + 1\n    d_N = d_N + 1\n    a_N = a_N - 1\n    b_N = b_N - 1\n    c_N = c_N - 1\n    d_",
        "test": "",
        "num_ids": 1645,
        "indeed": false
    },
    {
        "number": 4468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    t_1, t_2, t_3 = map(int, stdin.split())\n    t_1 = t_1 + t_2 + t_3\n    t_2 = t_1 + t_3\n    t_3 = t_1 + t_2\n    t_4 = t_1 + t_3\n    t_5 = t_2 + t_3\n    t_6 = t_1 + t_3\n    t_7 = t_2 + t_3\n    t_8 = t_1 + t_3\n    t_9 = t_2 + t_3\n    t_10 = t_1 + t_3\n    t_11 = t_2 + t_3\n    t_12 = t_1 + t_3\n    t_13 = t_2 + t_3\n    t_14 = t_1 + t_3\n    t_15 = t_2 + t_3\n    t_16 = t_1 + t_3\n    t_17 = t_2 + t_3\n    t_18 = t_1 + t_3\n    t_19 = t_2 + t_3\n    t_20 = t_1 + t_3\n    t_21 = t_2 + t_3\n    t_22 = t_1 + t_3\n    t_23 = t_2 + t_3\n    t_24 = t_1 + t_3\n    t_25 = t_2 + t_3\n    t_26 = t_1 + t_3\n    t_27 = t_2 + t_3\n    t_28 = t_1 + t_3\n    t_29 = t_2 + t_3\n    t_30 = t_1 + t_3\n    t_31 = t_2 + t_3\n    t_32 = t_1 + t_3\n    t_33 = t_2 + t_3\n    t_34 = t_1 + t_3\n    t_35 = t_2 + t_3\n    t_36 = t_1 + t_3\n    t_37 = t_2 + t_3\n    t_38 = t_1 + t_3\n    t_39 = t_2 + t_3\n    t_40 = t_1 + t_3\n    t_41 = t_2 + t_3\n    t_42 = t_1 + t_3\n    t_43 = t_2 + t_3\n    t_44 = t_1 + t_3\n    t_45 = t_2 + t_3\n    t_46 = t_1 + t_3\n    t_47 = t_2 + t_3\n    t_48 = t_1 + t_3\n    t_49 = t_2 + t_3\n    t_50 = t_1 + t_3\n    t_51 = t_2 + t_3\n    t_52 = t_1 + t_3\n    t_53 = t_2 + t_3\n    t_54 = t_1 + t_3\n    t_55 = t_2 + t_3\n    t_56 = t_1 + t_3\n    t_57 = t_2 + t_3\n    t_58 = t_1 + t_3\n    t_59 = t_2 + t_3\n    t_60 = t_1 + t_3\n    t_61 = t_2 + t_3\n    t_62 = t_1 + t_3\n    t_63 = t_2 + t_3\n    t_64 = t_1 + t_3\n    t_65 = t_2 + t_3\n    t_66 = t_1 + t_3\n    t_67 = t_2 + t_3\n    t_68 = t_1 + t_3\n    t_69 = t_2 + t_3\n    t_70 = t_1 + t_3\n    t_71 = t_2 + t_3\n    t_72 = t_1 + t_3\n    t_73 = t_2 + t_3\n    t_74 = t_1 + t_3\n    t_75 = t_2 + t_3\n    t_76 = t_1 + t_3\n    t_77 = t_2 + t_3\n    t_78 = t_1 + t_3\n    t_79 = t_2 + t_3\n    t_80 = t_1 + t_3\n    t_81 = t_2 + t_3\n    t_82 = t_1 + t_3\n    t_83 = t_2 + t_3\n    t_84 = t_1 + t_3\n    t_85 = t_2 + t_3\n    t_86 = t_1 + t_3\n    t_87 = t_2 + t_3\n    t_88 = t_1 + t_3\n    t_89 = t_2 + t_3\n    t_90 = t_1 + t_3\n    t_91 = t_2 + t_3\n    t_92 = t_1 + t_3\n    t_93 = t_2 + t_3\n    t_94 = t_1 + t_3\n    t_95 = t_2 + t_3\n    t_96 = t_1 + t_3\n    t_97 = t_2 + t_3\n    t_98 = t_1 + t_3\n    t_99 = t_2 + t_3\n    t_100 = t_1 + t_3\n    t_101 = t_2 + t_3\n    t_102 = t_1 + t_3\n    t_103 = t_2 + t_3\n    t_104 = t_1 + t_3\n    t_105 = t_2 + t_3\n    t_106 = t_1 + t_3\n    t_107 = t_2 + t_3\n    t_108 = t_1 + t_3\n    t_109 = t_2 + t_3\n    t_110 = t_1 + t_3\n    t_111 = t_2 + t_3\n    t_112 = t_1 + t_3\n    t_113 = t_2 + t_3\n    t_114 = t_1 + t_3\n    t_115 = t_2 + t_3\n    t_116 = t_1 + t_3\n    t_117 = t_2 + t_3\n    t_118 = t_1 + t_3\n    t_119 = t_2 + t_3\n    t_120 = t_1 + t_3\n    t_121 = t_2 + t_3\n    t_122 = t_1 + t_3\n    t_123 = t_2 + t_3\n    t_124 = t_1 + t_3\n    t_125 = t_2 + t_3\n    t_126 = t_1 + t_3\n    t_127 = t_2 + t_3\n    t_128 = t_1 + t_3\n    t_129 = t_2 + t_3\n    t_130 = t_1 + t_3\n    t_131 = t_2 + t_3\n    t",
        "test": "",
        "num_ids": 1748,
        "indeed": false
    },
    {
        "number": 4469,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip())\n    \n    for i in range(q):\n        stdin = stdin.strip()\n        \n        if stdin[0] == '?':\n            stdin = stdin[1:]\n            \n        if stdin[0] == 'L':\n            stdin = stdin[1:]\n            \n            if len(stdin) == 0:\n                return '0'\n            \n            if stdin[0] == '?':\n                stdin = stdin[1:]\n                \n            if stdin[0] == 'R':\n                stdin = stdin[1:]\n                \n                if len(stdin) == 0:\n                    return '0'\n                \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin = stdin[1:]\n                    \n                if stdin[0] == '?':\n                    stdin =",
        "test": "",
        "num_ids": 1049,
        "indeed": false
    },
    {
        "number": 4470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(n//2)\n    else:\n        return str(n//3)\n\n-----Constraints-----\n1 <= q <= 10^5\n\n-----Time Limit-----\n1 second\n\n-----Memory Limit-----\n16 MB\n\n-----Algorithm-----\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 85,
        "indeed": false
    },
    {
        "number": 4471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[",
        "test": "",
        "num_ids": 1274,
        "indeed": false
    },
    {
        "number": 4472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = stdin.strip().split()\n    b = stdin.strip().split()\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i",
        "test": "",
        "num_ids": 1212,
        "indeed": false
    },
    {
        "number": 4473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a, b, k = map(int, stdin.strip().split())\n    a, b, k = a - 1, b - 1, k - 1\n    answer = 0\n    for i in range(n):\n        answer += (a + b + k) // 2\n        a, b, k = a + k // 2, b + k // 2, a + b + k // 2\n    return str(answer)\n\ndef",
        "test": "",
        "num_ids": 113,
        "indeed": false
    },
    {
        "number": 4474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n < m:\n        return '1000000000000000000'\n    if n == m:\n        return str(n)\n    if n % m == 0:\n        return str(n//m) + '000000000000000000'\n    if n % m == 1:\n        return str(n//m) + '000000000000000000' + str(n//m)\n    if n % m == 2:\n        return str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000'\n    if n % m == 3:\n        return str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m)\n    if n % m == 4:\n        return str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000'\n    if n % m == 5:\n        return str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000'\n    if n % m == 6:\n        return str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000'\n    if n % m == 7:\n        return str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000'\n    if n % m == 8:\n        return str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000'\n    if n % m == 9:\n        return str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000'\n    if n % m == 10:\n        return str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000'\n    if n % m == 11:\n        return str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000'\n    if n % m == 12:\n        return str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000'\n    if n % m == 13:\n        return str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000'\n    if n % m == 14:\n        return str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000'\n    if n % m == 15:\n        return str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000'\n    if n % m == 16:\n        return str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000'\n    if n % m == 17:\n        return str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000'\n    if n % m == 18:\n        return str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000' + str(n//m) + '000000000000000000'",
        "test": "",
        "num_ids": 1479,
        "indeed": false
    },
    {
        "number": 4475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    x = a[0]\n    y = b[0]\n    n = n - 1\n    for i in range(n):\n        a[i] = a[i] - x\n        b[i] = b[i] - y\n    for i in range(n):\n        a[i] = a[i] * b[i]\n    return str(min(a))\n\ndef",
        "test": "",
        "num_ids": 142,
        "indeed": false
    },
    {
        "number": 4476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    c = 0\n    for i in range(n):\n        if a[i] % 2 == 1:\n            c += 1\n        if b[i] % 2 == 0:\n            c += 1\n    return str(c)\n\ndef",
        "test": "",
        "num_ids": 117,
        "indeed": false
    },
    {
        "number": 4477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    def is_digit(s):\n        return s.isdigit()\n    \n    def is_valid(s):\n        return s.isdigit() and len(s) == 1\n    \n    def is_valid_answer(s):\n        return is_digit(s) and is_valid(s)\n    \n    def is_valid_answer_2(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_3(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_4(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_5(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_6(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_7(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_8(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_9(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_10(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_11(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_12(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_13(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_14(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_15(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_16(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_17(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_18(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_19(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_20(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_21(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_22(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_23(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_24(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_25(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_26(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s)\n    \n    def is_valid_answer_27(s):\n        return is_valid_answer(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid(s) and is_valid",
        "test": "",
        "num_ids": 1617,
        "indeed": false
    },
    {
        "number": 4478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    seq.sort()\n    i = 0\n    j = 0\n    while i < n:\n        if seq[i] + seq[j] == k:\n            seq.pop(i)\n            seq.pop(j)\n            i -= 1\n            j -= 1\n        else:\n            i += 1\n            j += 1\n    if len(seq) == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n\nprint(solution(input()))\n",
        "test": "",
        "num_ids": 146,
        "indeed": false
    },
    {
        "number": 4479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    K = int(stdin.split()[-1])\n    A.sort()\n    for i in range(K):\n        A[i] = -A[i]\n    return str(sum(A))\n",
        "test": "",
        "num_ids": 68,
        "indeed": false
    },
    {
        "number": 4480,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    A.sort()\n    if sum(A) % 3!= 0:\n        return \"false\"\n    if len(A) % 3!= 0:\n        return \"false\"\n    if sum(A[:3])!= sum(A[3:]):\n        return \"false\"\n    return \"true\"\n",
        "test": "",
        "num_ids": 92,
        "indeed": false
    },
    {
        "number": 4481,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S_1 = stdin.strip().split()\n    S_N = stdin.strip().split()\n    S_1 = [x.lower() for x in S_1]\n    S_N = [x.lower() for x in S_N]\n    S_1 = [x for x in S_1 if x not in S_N]\n    S_N = [x for x in S_N if x not in S_1]\n    S_1 = sorted(S_1)\n    S_N = sorted(S_N)\n    S_1 = ''.join(S_1)\n    S_N = ''.join(S_N)\n    if len(S_1) > len(S_N):\n        S_1 = S_1[:len(S_N)]\n    elif len(S_1) < len(S_N):\n        S_N = S_N[:len(S_1)]\n    print(S_1)\n    print(S_N)\n    return S_1 + S_N\n\nprint(solution(\"7\"))\n",
        "test": "",
        "num_ids": 272,
        "indeed": false
    },
    {
        "number": 4482,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = a[n-1:]\n    a.sort()\n    a = a[n-1:]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::",
        "test": "",
        "num_ids": 1800,
        "indeed": false
    },
    {
        "number": 4483,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A + B)\n\ndef",
        "test": "",
        "num_ids": 27,
        "indeed": false
    },
    {
        "number": 4484,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    dogs = list(map(int, stdin.split()))\n    monkeys = list(map(int, stdin.split()))\n    dogs.sort()\n    monkeys.sort()\n    answer = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if dogs[i] + monkeys[j] == M:\n                answer += 1\n    return str(answer % (10**9+7))\n\ndef",
        "test": "",
        "num_ids": 125,
        "indeed": false
    },
    {
        "number": 4485,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a_1, b_1 = map(int, stdin.split())\n    a_2, b_2 = map(int, stdin.split())\n    a_M, b_M = map(int, stdin.split())\n    \n    if a_1 == a_2 and b_1 == b_2:\n        return \"POSSIBLE\"\n    \n    if a_1 == a_2 or b_1 == b_2:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_2 or b_1 < b_2:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M or b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M:\n        return \"IMPOSSIBLE\"\n    \n    if a_1 < a_M and b_1 < b_M",
        "test": "",
        "num_ids": 1711,
        "indeed": false
    },
    {
        "number": 4486,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    answer = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            answer += s[i]\n        else:\n            answer += s[i] + s[i + 1]\n    return answer\n",
        "test": "",
        "num_ids": 67,
        "indeed": false
    },
    {
        "number": 4487,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    A = A.lower()\n    B = B.lower()\n    C = C.lower()\n    if A == B == C:\n        return \"YES\"\n    if A == B:\n        return \"NO\"\n    if B == C:\n        return \"NO\"\n    if A == B:\n        return \"NO\"\n    if A == C:\n        return \"NO\"\n    return \"NO\"\n\nprint(solution(input()))\n",
        "test": "",
        "num_ids": 121,
        "indeed": false
    },
    {
        "number": 4488,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        print('GREATER')\n    elif a < b:\n        print('LESS')\n    else:\n        print('EQUAL')\n",
        "test": "",
        "num_ids": 56,
        "indeed": false
    },
    {
        "number": 4489,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, s, t = map(int, stdin.split())\n    s_1, s_2, s_3 = map(str, stdin.split())\n    t_1, t_2, t_3 = map(str, stdin.split())\n    s_1 = s_1.lower()\n    s_2 = s_2.lower()\n    s_3 = s_3.lower()\n    t_1 = t_1.lower()\n    t_2 = t_2.lower()\n    t_3 = t_3.lower()\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    t_1 = t_1.replace(' ', '')\n    t_2 = t_2.replace(' ', '')\n    t_3 = t_3.replace(' ', '')\n    s_1 = s_1.replace('a', '1')\n    s_2 = s_2.replace('a', '1')\n    s_3 = s_3.replace('a', '1')\n    t_1 = t_1.replace('a', '1')\n    t_2 = t_2.replace('a', '1')\n    t_3 = t_3.replace('a', '1')\n    s_1 = s_1.replace('g', '2')\n    s_2 = s_2.replace('g', '2')\n    s_3 = s_3.replace('g', '2')\n    t_1 = t_1.replace('g', '2')\n    t_2 = t_2.replace('g', '2')\n    t_3 = t_3.replace('g', '2')\n    s_1 = s_1.replace('b', '3')\n    s_2 = s_2.replace('b', '3')\n    s_3 = s_3.replace('b', '3')\n    t_1 = t_1.replace('b', '3')\n    t_2 = t_2.replace('b', '3')\n    t_3 = t_3.replace('b', '3')\n    s_1 = s_1.replace('o', '4')\n    s_2 = s_2.replace('o', '4')\n    s_3 = s_3.replace('o', '4')\n    t_1 = t_1.replace('o', '4')\n    t_2 = t_2.replace('o', '4')\n    t_3 = t_3.replace('o', '4')\n    s_1 = s_1.replace('p', '5')\n    s_2 = s_2.replace('p', '5')\n    s_3 = s_3.replace('p', '5')\n    t_1 = t_1.replace('p', '5')\n    t_2 = t_2.replace('p', '5')\n    t_3 = t_3.replace('p', '5')\n    s_1 = s_1.replace('r', '6')\n    s_2 = s_2.replace('r', '6')\n    s_3 = s_3.replace('r', '6')\n    t_1 = t_1.replace('r', '6')\n    t_2 = t_2.replace('r', '6')\n    t_3 = t_3.replace('r', '6')\n    s_1 = s_1.replace('s', '7')\n    s_2 = s_2.replace('s', '7')\n    s_3 = s_3.replace('s', '7')\n    t_1 = t_1.replace('s', '7')\n    t_2 = t_2.replace('s', '7')\n    t_3 = t_3.replace('s', '7')\n    s_1 = s_1.replace('t', '8')\n    s_2 = s_2.replace('t', '8')\n    s_3 = s_3.replace('t', '8')\n    t_1 = t_1.replace('t', '8')\n    t_2 = t_2.replace('t', '8')\n    t_3 = t_3.replace('t', '8')\n    s_1 = s_1.replace('u', '9')\n    s_2 = s_2.replace('u', '9')\n    s_3 = s_3.replace('u', '9')\n    t_1 = t_1.replace('u', '9')\n    t_2 = t_2.replace('u', '9')\n    t_3 = t_3.replace('u', '9')\n    s_1 = s_1.replace('v', '10')\n    s_2 = s_2.replace('v', '10')\n    s_3 = s_3.replace('v', '10')\n    t_1 = t_1.replace('v', '10')\n    t_2 = t_2.replace('v', '10')\n    t_3 = t_3.replace('v', '10')\n    s_1 = s_1.replace('w', '11')\n    s_2 = s_2.replace('w', '11')\n    s_3 = s_3.replace('w', '11')\n    t_1 = t_1.replace('w', '11')\n    t_2 = t_2.replace('w', '11')\n    t_3 = t_3.replace('w', '11')\n    s_1 = s_1.replace('x', '12')\n    s_2 = s_2.replace('x', '12')\n    s_3 = s_3.replace('x', '12')\n    t_1 = t_1.replace('x', '12')\n    t_2 = t_2.replace('x', '12')\n    t_3 = t_3.replace('x', '12')\n    s_1 = s_1.replace('y', '13')\n    s_2 = s_2.replace('y', '13')\n    s_3 = s_3.replace('y', '13')\n    t_1 = t_1.replace('y', '13')\n    t_2 = t_2.replace('y', '13')\n    t_3 = t_3.replace('y', '13')\n    s_1 = s_1.replace('z', '14')\n    s_2 = s_2.replace('z', '14')\n    s_3 = s_3.replace('z', '14')\n    t_1 = t_1.replace('z', '14')\n    t_2 =",
        "test": "",
        "num_ids": 1627,
        "indeed": false
    },
    {
        "number": 4490,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin.split()[0]\n    return b[b.find(b[0])+1:]\n",
        "test": "",
        "num_ids": 29,
        "indeed": false
    },
    {
        "number": 4491,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A = [int(i) for i in stdin.strip().split()]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N)]\n    A.sort()\n    A = [A[i] for i in range(N",
        "test": "",
        "num_ids": 1680,
        "indeed": false
    },
    {
        "number": 4492,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    x = a[n-1]\n    for i in range(n-2, -1, -1):\n        if a[i] < x:\n            x = a[i]\n    print(x)\n    return str(x)\n\n-----Sample Output-----\n3\n\n-----Constraints-----\n - 2 \u2264 N \u2264 10^5\n - 0 \u2264 a_i \u2264 10^9\n - 0 \u2264 x \u2264 10^9\n\n-----Input-----\n3 3\n2 2 2\n\n-----Output-----\n1\n\nEat one candy in the second box.\nThen, the number of candies in each box becomes (2, 1, 2).\ndef",
        "test": "",
        "num_ids": 187,
        "indeed": false
    },
    {
        "number": 4493,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    c = []\n    for i in range(3):\n        c.append(int(stdin[i]))\n    c.sort()\n    for i in range(3):\n        if c[i] == 0:\n            return \"No\"\n        elif c[i] == 1:\n            return \"Yes\"\n    return \"No\"\n",
        "test": "",
        "num_ids": 83,
        "indeed": false
    },
    {
        "number": 4494,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip().replace('ABC', 'ARC').replace('ARC', 'ABC')\n",
        "test": "",
        "num_ids": 23,
        "indeed": false
    },
    {
        "number": 4495,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)\n\n-----Sample Input-----\n4 8 2\n\n-----Sample Output-----\n3\n\nThere are three integers between 4 and 8, inclusive, that are divisible by 2: 4, 6 and 8.\ndef",
        "test": "",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 4496,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    if D == 25:\n        return \"Christmas\"\n    elif D == 24:\n        return \"Christmas Eve\"\n    elif D == 23:\n        return \"Christmas Eve Eve\"\n    elif D == 22:\n        return \"Christmas Eve Eve\"\n    else:\n        return \"Christmas Eve Eve Eve\"\n",
        "test": "",
        "num_ids": 83,
        "indeed": false
    },
    {
        "number": 4497,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"1\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:",
        "test": "",
        "num_ids": 1819,
        "indeed": false
    },
    {
        "number": 4498,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a + b + c + d <= 100:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "",
        "num_ids": 49,
        "indeed": false
    },
    {
        "number": 4499,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s_1, s_2, s_3 = stdin.split()\n    s_1 = s_1.upper()\n    s_2 = s_2.upper()\n    s_3 = s_3.upper()\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ', '')\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_3 = s_3.replace(' ',",
        "test": "",
        "num_ids": 1853,
        "indeed": false
    },
    {
        "number": 4500,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A + B + C == 150:\n        return \"Yes\"\n    elif A + B + C == 100:\n        return \"No\"\n    else:\n        return \"No\"\n",
        "test": "",
        "num_ids": 63,
        "indeed": false
    },
    {
        "number": 4501,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    x_1, x_2, x_3, x_4 = map(int, stdin.split())\n    x_1 = x_1 - 1\n    x_2 = x_2 - 1\n    x_3 = x_3 - 1\n    x_4 = x_4 - 1\n    if N == 1:\n        return str(1)\n    if N == 2:\n        return str(2)\n    if N == 3:\n        return str(3)\n    if N == 4:\n        return str(4)\n    if N == 5:\n        return str(5)\n    if N == 6:\n        return str(6)\n    if N == 7:\n        return str(7)\n    if N == 8:\n        return str(8)\n    if N == 9:\n        return str(9)\n    if N == 10:\n        return str(10)\n    if N == 11:\n        return str(11)\n    if N == 12:\n        return str(12)\n    if N == 13:\n        return str(13)\n    if N == 14:\n        return str(14)\n    if N == 15:\n        return str(15)\n    if N == 16:\n        return str(16)\n    if N == 17:\n        return str(17)\n    if N == 18:\n        return str(18)\n    if N == 19:\n        return str(19)\n    if N == 20:\n        return str(20)\n    if N == 21:\n        return str(21)\n    if N == 22:\n        return str(22)\n    if N == 23:\n        return str(23)\n    if N == 24:\n        return str(24)\n    if N == 25:\n        return str(25)\n    if N == 26:\n        return str(26)\n    if N == 27:\n        return str(27)\n    if N == 28:\n        return str(28)\n    if N == 29:\n        return str(29)\n    if N == 30:\n        return str(30)\n    if N == 31:\n        return str(31)\n    if N == 32:\n        return str(32)\n    if N == 33:\n        return str(33)\n    if N == 34:\n        return str(34)\n    if N == 35:\n        return str(35)\n    if N == 36:\n        return str(36)\n    if N == 37:\n        return str(37)\n    if N == 38:\n        return str(38)\n    if N == 39:\n        return str(39)\n    if N == 40:\n        return str(40)\n    if N == 41:\n        return str(41)\n    if N == 42:\n        return str(42)\n    if N == 43:\n        return str(43)\n    if N == 44:\n        return str(44)\n    if N == 45:\n        return str(45)\n    if N == 46:\n        return str(46)\n    if N == 47:\n        return str(47)\n    if N == 48:\n        return str(48)\n    if N == 49:\n        return str(49)\n    if N == 50:\n        return str(50)\n    if N == 51:\n        return str(51)\n    if N == 52:\n        return str(52)\n    if N == 53:\n        return str(53)\n    if N == 54:\n        return str(54)\n    if N == 55:\n        return str(55)\n    if N == 56:\n        return str(56)\n    if N == 57:\n        return str(57)\n    if N == 58:\n        return str(58)\n    if N == 59:\n        return str(59)\n    if N == 60:\n        return str(60)\n    if N == 61:\n        return str(61)\n    if N == 62:\n        return str(62)\n    if N == 63:\n        return str(63)\n    if N == 64:\n        return str(64)\n    if N == 65:\n        return str(65)\n    if N == 66:\n        return str(66)\n    if N == 67:\n        return str(67)\n    if N == 68:\n        return str(68)\n    if N == 69:\n        return str(69)\n    if N == 70:\n        return str(70)\n    if N == 71:\n        return str(71)\n    if N == 72:\n        return str(72)\n    if N == 73:\n        return str(73)\n    if N == 74:\n        return str(74)\n    if N == 75:\n        return str(75)\n    if N == 76:\n        return str(76)\n    if N == 77:\n        return str(77)\n    if N == 78:\n        return str(78)\n    if N == 79:\n        return str(79)\n    if N == 80:\n        return str(80)\n    if N == 81:\n        return str(81)\n    if N == 82:\n        return str(82)\n    if N == 83:\n        return str(83)\n    if N == 84:\n        return str(84)\n    if N == 85:\n        return str(85)\n    if N == 86:\n        return str(86)\n    if N == 87:\n        return str(87)\n    if N == 88:\n        return str(88)\n    if N == 89:\n        return str(89)\n    if N == 90:\n        return str(90)\n    if N == 91:\n        return str(91)\n    if N == 92:\n        return str(92)\n    if N == 93:\n        return str(93)\n    if N == 94:\n        return str(94)\n    if N == 95:\n        return str(95)\n    if N == 96:\n        return str(96)\n    if N == 97:\n        return str(97)\n    if N == 98:\n        return str(98)\n    if N == 99:\n        return str(99)\n    if N == 100:\n        return str(100)\n    if N == 101:\n        return str(101)\n    if N == 102:\n        return str(102)\n    if N == 103:\n        return str(103)\n    if N == 104:\n        return str(104)\n    if N == 105:\n        return str(105)\n    if N == 106:\n        return str(106)\n    if N == 107:\n        return str(107)\n    if N == 108:\n        return str(108)\n    if N == 109:\n        return str(109)\n    if N == 110:\n        return str(110)\n    if N == 111:\n        return str(111)\n    if N == 112:\n        return str(112)\n    if N == 113:\n        return str(113)\n    if N == 114:\n        return str(114)\n    if N == 115:\n        return str(115)\n    if N == 116:\n        return str(116)",
        "test": "",
        "num_ids": 1710,
        "indeed": false
    },
    {
        "number": 4502,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = []\n    for i in range(n):\n        b.append(int(stdin[i]))\n    b.reverse()\n    for i in range(n):\n        print(b[i], end=\" \")\n    return \"\".join(str(i) for i in b)\n\n-----Sample Output-----\n4 2 1 3\n\n-----Constraints-----\n - 1 \\leq n \\leq 2\\times 10^5\n - 0 \\leq a_i \\leq 10^9\n - n and a_i are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\na_1 a_2... a_n\n\n-----Output-----\nPrint n integers in a line with spaces in between.\nThe i-th operation is as follows:\n - Append a_i to the end of b.\n - Reverse the order of the elements in b.\nFind the sequence b obtained after these n operations.\n\n-----Sample Input-----\n4\n1 2 3 4\n\n-----Sample Output-----\n4 2 1 3\n\n - After step 1 of the first operation, b becomes: 1.\n - After step 2 of the first operation, b becomes: 1.\n - After step 1 of the second operation, b becomes: 1, 2.\n - After step 2 of the second operation, b becomes: 2, 1.\n - After step 1 of the third operation, b becomes: 2, 1, 3.\n - After step 2 of the third operation, b becomes: 3, 1, 2.\n - After step 1 of the fourth operation, b becomes: 3, 1, 2, 4.\n - After step 2 of the fourth operation, b becomes: 4, 2, 1, 3.\nThus, the answer is 4 2 1 3.\ndef",
        "test": "",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 4503,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    a.sort()\n    a.pop(0)\n    a.pop(0)\n    ",
        "test": "",
        "num_ids": 1777,
        "indeed": false
    },
    {
        "number": 4504,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    n = len(s)\n    max_len = 0\n    for i in range(n):\n        if s[i] % 2 == 0:\n            max_len = max(max_len, i - n + 1)\n    return str(max_len)\n",
        "test": "",
        "num_ids": 73,
        "indeed": false
    },
    {
        "number": 4505,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def permute(s):\n        if len(s) == 1:\n            return [s]\n        else:\n            return [s[0] + s[1]] + permute(s[1:])\n    return 'Yes' if permute(stdin) == stdin else 'No'\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 76,
        "indeed": false
    },
    {
        "number": 4506,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:n]\n    b = b[:n]\n    a = a[::-1]\n    b = b[",
        "test": "",
        "num_ids": 1595,
        "indeed": false
    },
    {
        "number": 4507,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m)]\n    a.sort()\n    a = [a[i] for i in range(n + m, n + m + k)]\n    a.sort()\n    a = [a[i] for i in range(n + m + k, n + m + k + m)]\n    a.sort()\n    a = [a[i] for i in range(n + m + k + m, n + m + k + m + k)]\n    a.sort()\n    a = [a[i] for i in range(n + m + k + m + k, n + m + k + m + k + m)]\n    a.sort()\n    a = [a[i] for i in range(n + m + k + m + k + m, n + m + k + m + k + m + k)]\n    a.sort()\n    a = [a[i] for i in range(n + m + k + m + k + m + k, n + m + k + m + k + m + k + m + k)]\n    a.sort()\n    a = [a[i] for i in range(n + m + k + m + k + m + k, n + m + k + m + k + m + k + m + k + m + k)]\n    a.sort()\n    a = [a[i] for i in range(n + m + k + m + k + m + k + m + k, n + m + k + m + k + m + k + m + k + m + k + m + k)]\n    a.sort()\n    a = [a[i] for i in range(n + m + k + m + k + m + k + m + k + m + k, n + m + k + m + k + m + k + m + k + m + k + m + k + m + k)]\n    a.sort()\n    a = [a[i] for i in range(n + m + k + m + k + m + k + m + k + m + k + m + k, n + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m + k + m +",
        "test": "",
        "num_ids": 1145,
        "indeed": false
    },
    {
        "number": 4508,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = []\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n    edges.sort()\n    edges = [edge for edge in edges if edge[0] < edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = [",
        "test": "",
        "num_ids": 1626,
        "indeed": false
    },
    {
        "number": 4509,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    for i in range(k):\n        if nums[i] % n!= 0:\n            nums[i] = nums[i] + 1\n    return str(nums[k-1])\n",
        "test": "",
        "num_ids": 90,
        "indeed": false
    },
    {
        "number": 4510,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"0\"\n    \n    conversations = []\n    for _ in range(n):\n        conversations.append(list(map(int, stdin.split())))\n    \n    conversations.sort(key=lambda x: x[0])\n    \n    answer = 0\n    for i in range(n):\n        if i == 0:\n            answer += 1\n        else:\n            answer += len(conversations[i])\n            conversations[i].pop(0)\n            conversations[i].append(i)\n    \n    return str(answer)\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^5\n\n-----Time Limit: O(n)-----\n\nSample Input 1:\n\n7 2\n1 2 3 2 1 3 2\n\nSample Output 1:\n\n2\n2 1 \n\nSample Input 2:\n\n10 4\n2 3 3 1 1 2 1 2 3 3\n\nSample Output 2:\n\n3\n1 3 2 \n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^5\n\n1 <= id_i <= 10^9\n\n1 <= id_i < id_n\n\n1 <= id_i <= 10^9\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <= id_i < id_n\n\n1 <=",
        "test": "",
        "num_ids": 1193,
        "indeed": false
    },
    {
        "number": 4511,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = [list(map(int, input().split())) for _ in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(key=lambda x: x[0])\n    cards = [cards[i][1:] for i in range(n)]\n    cards.sort(",
        "test": "",
        "num_ids": 1430,
        "indeed": false
    },
    {
        "number": 4512,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    q = int(s[0])\n    q = q - 1\n    s = s[1:]\n    s = [int(i) for i in s]\n    s = sorted(s)\n    s = [str(i) for i in s]\n    s = ''.join(s)\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(' ', '')\n",
        "test": "",
        "num_ids": 1562,
        "indeed": false
    },
    {
        "number": 4513,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    for t in range(int(stdin)):\n        n = int(stdin.strip())\n        sudoku = [list(map(int, input().strip().split())) for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 1:\n                    sudoku[i][j] = 9\n                elif sudoku[i][j] == 2:\n                    sudoku[i][j] = 9\n                elif sudoku[i][j] == 3:\n                    sudoku[i][j] = 9\n                elif sudoku[i][j] == 4:\n                    sudoku[i][j] = 9\n                elif sudoku[i][j] == 5:\n                    sudoku[i][j] = 9\n                elif sudoku[i][j] == 6:\n                    sudoku[i][j] = 9\n                elif sudoku[i][j] == 7:\n                    sudoku[i][j] = 9\n                elif sudoku[i][j] == 8:\n                    sudoku[i][j] = 9\n                elif sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i in range(n):\n            for j in range(n):\n                if sudoku[i][j] == 9:\n                    sudoku[i][j] = 9\n        for i",
        "test": "",
        "num_ids": 1547,
        "indeed": false
    },
    {
        "number": 4514,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    p_2, p_3, p_n = map(int, stdin.split())\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n    p_2, p_3, p_n = sorted([p_2, p_3, p_n])\n",
        "test": "",
        "num_ids": 879,
        "indeed": false
    },
    {
        "number": 4515,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    c = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    c.sort()\n    if a[0] + b[0] + c[0] == n:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "",
        "num_ids": 120,
        "indeed": false
    },
    {
        "number": 4516,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    pos = [0] * n\n    for i in range(n):\n        pos[i] = x.index(x[i])\n    pos = sorted(pos)\n    for i in range(m):\n        pos[pos[i]] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] += 1\n    for i in range(n):\n        pos[i] +=",
        "test": "",
        "num_ids": 872,
        "indeed": false
    },
    {
        "number": 4517,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n    \n    visited = [False] * (n + 1)\n    visited[1] = True\n    \n    def dfs(u, visited):\n        if u == n:\n            return True\n        \n        for v in range(n):\n            if visited[v] == False and dfs(v, visited) == True:\n                return True\n        \n        return False\n    \n    for i in range(1, n + 1):\n        if visited[i] == False and dfs(i, visited) == True:\n            return \"YES\"\n    \n    return \"NO\"\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 200,
        "indeed": false
    },
    {
        "number": 4518,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n < 5000:\n        return \"NO\"\n    \n    distances = [0] * (n + 1)\n    distances[0] = 1\n    for i in range(1, n + 1):\n        distances[i] = distances[i - 1] + distances[i - 2]\n    \n    for i in range(n - 1):\n        distances[i + 1] = distances[i] + distances[i + 1]\n    \n    for i in range(n - 1):\n        distances[i + 2] = distances[i] + distances[i + 2]\n    \n    for i in range(n - 1):\n        distances[i + 3] = distances[i] + distances[i + 3]\n    \n    for i in range(n - 1):\n        distances[i + 4] = distances[i] + distances[i + 4]\n    \n    for i in range(n - 1):\n        distances[i + 5] = distances[i] + distances[i + 5]\n    \n    for i in range(n - 1):\n        distances[i + 6] = distances[i] + distances[i + 6]\n    \n    for i in range(n - 1):\n        distances[i + 7] = distances[i] + distances[i + 7]\n    \n    for i in range(n - 1):\n        distances[i + 8] = distances[i] + distances[i + 8]\n    \n    for i in range(n - 1):\n        distances[i + 9] = distances[i] + distances[i + 9]\n    \n    for i in range(n - 1):\n        distances[i + 10] = distances[i] + distances[i + 10]\n    \n    for i in range(n - 1):\n        distances[i + 11] = distances[i] + distances[i + 11]\n    \n    for i in range(n - 1):\n        distances[i + 12] = distances[i] + distances[i + 12]\n    \n    for i in range(n - 1):\n        distances[i + 13] = distances[i] + distances[i + 13]\n    \n    for i in range(n - 1):\n        distances[i + 14] = distances[i] + distances[i + 14]\n    \n    for i in range(n - 1):\n        distances[i + 15] = distances[i] + distances[i + 15]\n    \n    for i in range(n - 1):\n        distances[i + 16] = distances[i] + distances[i + 16]\n    \n    for i in range(n - 1):\n        distances[i + 17] = distances[i] + distances[i + 17]\n    \n    for i in range(n - 1):\n        distances[i + 18] = distances[i] + distances[i + 18]\n    \n    for i in range(n - 1):\n        distances[i + 19] = distances[i] + distances[i + 19]\n    \n    for i in range(n - 1):\n        distances[i + 20] = distances[i] + distances[i + 20]\n    \n    for i in range(n - 1):\n        distances[i + 21] = distances[i] + distances[i + 21]\n    \n    for i in range(n - 1):\n        distances[i + 22] = distances[i] + distances[i + 22]\n    \n    for i in range(n - 1):\n        distances[i + 23] = distances[i] + distances[i + 23]\n    \n    for i in range(n - 1):\n        distances[i + 24] = distances[i] + distances[i + 24]\n    \n    for i in range(n - 1):\n        distances[i + 25] = distances[i] + distances[i + 25]\n    \n    for i in range(n - 1):\n        distances[i + 26] = distances[i] + distances[i + 26]\n    \n    for i in range(n - 1):\n        distances[i + 27] = distances[i] + distances[i + 27]\n    \n    for i in range(n - 1):\n        distances[i + 28] = distances[i] + distances[i + 28]\n    \n    for i in range(n - 1):\n        distances[i + 29] = distances[i] + distances[i + 29]\n    \n    for i in range(n - 1):\n        distances[i + 30] = distances[i] + distances[i + 30]\n    \n    for i in range(n - 1):\n        distances[i + 31] = distances[i] + distances[i + 31]\n    \n    for i in range(n - 1):\n        distances[i + 32] = distances[i] + distances[i + 32]\n    \n    for i in range(n - 1):\n        distances[i + 33] = distances[i] + distances[i + 33]\n    \n    for i in range(n - 1):\n        distances[i + 34] = distances[i] + distances[i + 34]\n    \n    for i in range(n - 1):\n        distances[i + 35] = distances[i] + distances[i + 35]\n    \n    for i in range(n - 1):\n        distances[i + 36] = distances[i] + distances[i + 36]\n    \n    for i in range(n - 1):\n        distances[i + 37] = distances[i] + distances[i + 37]\n    \n    for i in range(n - 1):\n        distances[i + 38] = distances[i] + distances[i + 38]\n    \n    for i in range(n - 1):\n        distances[i + 39] = distances[i] + distances[i + 39]\n    \n    for i in range(n -",
        "test": "",
        "num_ids": 1426,
        "indeed": false
    },
    {
        "number": 4519,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    return ''.join(map(str, nums[:k] + nums[k+1:]))\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 71,
        "indeed": false
    },
    {
        "number": 4520,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        segments.append(list(map(int, stdin.split())))\n    \n    def check(segment):\n        for i in range(len(segment)):\n            if segment[i] > segment[i+1]:\n                return False\n        return True\n    \n    def remove_segments(segment):\n        for i in range(len(segment)):\n            if check(segment[i:i+k]):\n                segment.pop(i)\n                remove_segments(segment)\n    \n    remove_segments(segments)\n    \n    for i in range(len(segments)):\n        if len(segments[i]) < k:\n            print(i)\n            return\n        \n    print(len(segments))\n    return\n\n-----Constraints-----\n\n1 <= n <= 200\n1 <= k <= n\n1 <= l_i, r_i <= 200\n\n------Time complexity-----\n\nO(n)\n\nO(n)\n\n------Space complexity-----\n\nO(n)\n\n------Algorithm-----\n\n1. Sort the segments by the endpoints.\n2. For each segment, check if it is inside the segment.\n3. If it is, remove it.\n4. If it is not, add it to the list.\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\n------Algorithm-----\n\n1. Sort the segments by the endpoints.\n2. For each segment, check if it is inside the segment.\n3. If it is, remove it.\n4. If it is not, add it to the list.\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\n------Algorithm-----\n\n1. Sort the segments by the endpoints.\n2. For each segment, check if it is inside the segment.\n3. If it is, remove it.\n4. If it is not, add it to the list.\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\n------Algorithm-----\n\n1. Sort the segments by the endpoints.\n2. For each segment, check if it is inside the segment.\n3. If it is, remove it.\n4. If it is not, add it to the list.\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\n------Algorithm-----\n\n1. Sort the segments by the endpoints.\n2. For each segment, check if it is inside the segment.\n3. If it is, remove it.\n4. If it is not, add it to the list.\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\n------Algorithm-----\n\n1. Sort the segments by the endpoints.\n2. For each segment, check if it is inside the segment.\n3. If it is, remove it.\n4. If it is not, add it to the list.\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\n------Algorithm-----\n\n1. Sort the segments by the endpoints.\n2. For each segment, check if it is inside the segment.\n3. If it is, remove it.\n4. If it is not, add it to the list.\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\n------Algorithm-----\n\n1. Sort the segments by the endpoints.\n2. For each segment, check if it is inside the segment.\n3. If it is, remove it.\n4. If it is not, add it to the list.\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\n------Algorithm-----\n\n1. Sort the segments by the endpoints.\n2. For each segment, check if it is inside the segment.\n3. If it is, remove it.\n4. If it is not, add it to the list.\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\n------Algorithm-----\n\n1. Sort the segments by the endpoints.\n2. For each segment, check if it is inside the segment.\n3. If it is, remove it.\n4. If it is not, add it to the list.\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\n------Algorithm-----\n\n1. Sort the segments by the endpoints.\n2. For each segment, check if it is inside the segment.\n3. If it is, remove it.\n4. If it is not, add it to the list.\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\n------Algorithm-----\n\n1. Sort the segments by the endpoints.\n2. For each segment, check if it is inside the segment.\n3. If it is, remove it.\n4. If it is not, add it to the list.\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\n------Algorithm-----\n\n1. Sort the segments by the endpoints.\n2. For each segment, check if it is inside the segment.\n3. If it is, remove it.\n4. If it is not, add it to the list.\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\n------Algorithm-----\n\n1. Sort the segments by the endpoints.\n2. For each segment, check if it is inside the segment.\n3. If it is, remove it.\n4. If it is not, add it to the list.\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\n------Algorithm-----\n\n1. Sort the segments by the endpoints.\n2. For each segment, check if it is inside the segment.\n3. If it is, remove it.\n4. If it is not, add it to the list.\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\n------Algorithm-----\n\n1. Sort the segments by the endpoints.\n2. For each segment, check if it is inside the segment.\n3. If it is, remove it.\n4. If it is not, add it to the list.\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\n------Algorithm-----\n\n1. Sort the segments by the endpoints.\n2. For each segment, check if it is inside the segment.\n3. If it is, remove it.\n4. If it is not, add it to the list.\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\n------Algorithm-----\n\n1. Sort the segments by the endpoints.\n2. For each segment, check if it is",
        "test": "",
        "num_ids": 1566,
        "indeed": false
    },
    {
        "number": 4521,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(int, stdin.strip().split()))\n    v = list(map(int, stdin.strip().split()))\n    x.sort()\n    v.sort()\n    d = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            d += abs(x[i]-x[j])\n    return str(d)\n",
        "test": "",
        "num_ids": 108,
        "indeed": false
    },
    {
        "number": 4522,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        edges.append((u, v, w))\n    \n    def dfs(u, v, w):\n        if u == v:\n            return 0\n        \n        if w > edges[u][2]:\n            return dfs(u, v, w)\n        \n        return w + edges[u][2]\n    \n    return str(dfs(0, 0, 0))\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= q_i <= 2 * 10^5\n\n-----Time Limit: 1 sec (py3)-----\n\nRuntime: 32 ms (32.09%)\nMemory Usage: 14.2 MB (49.04%)\n\n\"\"\"",
        "test": "",
        "num_ids": 214,
        "indeed": false
    },
    {
        "number": 4523,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    if a[0] == a[1]:\n        return \"YES\"\n    if a[0] == a[2]:\n        return \"YES\"\n    if a[0] == a[3]:\n        return \"YES\"\n    if a[0] == a[4]:\n        return \"YES\"\n    if a[1] == a[2]:\n        return \"YES\"\n    if a[1] == a[3]:\n        return \"YES\"\n    if a[1] == a[4]:\n        return \"YES\"\n    if a[2] == a[3]:\n        return \"YES\"\n    if a[2] == a[4]:\n        return \"YES\"\n    if a[3] == a[4]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] and a[1]",
        "test": "",
        "num_ids": 1486,
        "indeed": false
    },
    {
        "number": 4524,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]\n    a = a[::-1]",
        "test": "",
        "num_ids": 1239,
        "indeed": false
    },
    {
        "number": 4525,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [0] * (n + 1)\n    for i in range(2, n + 1):\n        a[i] = a[i - 1] + a[i - 2]\n    for i in range(n):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i + 1] = a[i] + a[i + 1]\n    for i in range(n - 1, -1, -1):\n        a[i",
        "test": "",
        "num_ids": 1541,
        "indeed": false
    },
    {
        "number": 4526,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    answer = 0\n    for i in range(n):\n        if a[i] == a[i+1]:\n            answer += 1\n    return str(answer)\n\n-----Constraints-----\n1 <= t <= 10^4\n1 <= n <= 10^4\n1 <= a_i <= n\na_i = 1\n\n-----Time Limit-----\n1 sec\n\n-----Space Limit-----\n1 sec\n\n-----Alternatives-----\n\n1. Use a stack to store the elements of the array.\n2. Use a queue to store the elements of the array.\n3. Use a stack to store the elements of the array.\n4. Use a queue to store the elements of the array.\n5. Use a stack to store the elements of the array.\n6. Use a queue to store the elements of the array.\n7. Use a stack to store the elements of the array.\n8. Use a queue to store the elements of the array.\n9. Use a stack to store the elements of the array.\n10. Use a queue to store the elements of the array.\n11. Use a stack to store the elements of the array.\n12. Use a queue to store the elements of the array.\n13. Use a stack to store the elements of the array.\n14. Use a queue to store the elements of the array.\n15. Use a stack to store the elements of the array.\n16. Use a queue to store the elements of the array.\n17. Use a stack to store the elements of the array.\n18. Use a queue to store the elements of the array.\n19. Use a stack to store the elements of the array.\n20. Use a queue to store the elements of the array.\n21. Use a stack to store the elements of the array.\n22. Use a queue to store the elements of the array.\n23. Use a stack to store the elements of the array.\n24. Use a queue to store the elements of the array.\n25. Use a stack to store the elements of the array.\n26. Use a queue to store the elements of the array.\n27. Use a stack to store the elements of the array.\n28. Use a queue to store the elements of the array.\n29. Use a stack to store the elements of the array.\n30. Use a queue to store the elements of the array.\n31. Use a stack to store the elements of the array.\n32. Use a queue to store the elements of the array.\n33. Use a stack to store the elements of the array.\n34. Use a queue to store the elements of the array.\n35. Use a stack to store the elements of the array.\n36. Use a queue to store the elements of the array.\n37. Use a stack to store the elements of the array.\n38. Use a queue to store the elements of the array.\n39. Use a stack to store the elements of the array.\n40. Use a queue to store the elements of the array.\n41. Use a stack to store the elements of the array.\n42. Use a queue to store the elements of the array.\n43. Use a stack to store the elements of the array.\n44. Use a queue to store the elements of the array.\n45. Use a stack to store the elements of the array.\n46. Use a queue to store the elements of the array.\n47. Use a stack to store the elements of the array.\n48. Use a queue to store the elements of the array.\n49. Use a stack to store the elements of the array.\n50. Use a queue to store the elements of the array.\n51. Use a stack to store the elements of the array.\n52. Use a queue to store the elements of the array.\n53. Use a stack to store the elements of the array.\n54. Use a queue to store the elements of the array.\n55. Use a stack to store the elements of the array.\n56. Use a queue to store the elements of the array.\n57. Use a stack to store the elements of the array.\n58. Use a queue to store the elements of the array.\n59. Use a stack to store the elements of the array.\n60. Use a queue to store the elements of the array.\n61. Use a stack to store the elements of the array.\n62. Use a queue to store the elements of the array.\n63. Use a stack to store the elements of the array.\n64. Use a queue to store the elements of the array.\n65. Use a stack to store the elements of the array.\n66. Use a queue to store the elements of the array.\n67. Use a stack to store the elements of the array.\n68. Use a queue to store the elements of the array.\n69. Use a stack to store the elements of the array.\n70. Use a queue to store the elements of the array.\n71. Use a stack to store the elements of the array.\n72. Use a queue to store the elements of the array.\n73. Use a stack to store the elements of the array.\n74. Use a queue to store the elements of the array.\n75. Use a stack to store the elements of the array.\n76. Use a stack to store the elements of the array.\n77. Use a stack to store the elements of the array.\n78. Use a stack to store the elements of the array.\n79. Use a stack to store the elements of the array.\n80. Use a stack to store the elements of the array.\n81. Use a stack to store the elements of the array.\n82. Use a stack to store the elements of the array.\n83. Use a stack to store the elements of the array.\n84. Use a stack to store the elements of the array",
        "test": "",
        "num_ids": 1312,
        "indeed": false
    },
    {
        "number": 4527,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for _ in range(m):\n        segments.append(list(map(int, stdin.split())))\n    segments.sort(key=lambda x: x[0])\n    segments = [segments[i][1:] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i][:2] for i in range(len(segments))]\n    segments = [segments[i",
        "test": "",
        "num_ids": 1324,
        "indeed": false
    },
    {
        "number": 4528,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    for _ in range(t):\n        h, m = map(int, input().strip().split())\n        if h < 24 and m < 60:\n            print(60 - m)\n        else:\n            print(60 - (60 * 60 - m) % 60)\n",
        "test": "",
        "num_ids": 76,
        "indeed": false
    },
    {
        "number": 4529,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    s = list(s)\n    s.sort()\n    l = 0\n    r = n - 1\n    while l < r:\n        if s[l] == s[r]:\n            l += 1\n            r -= 1\n        else:\n            break\n    if l == r:\n        return -1\n    if l == 0:\n        return r + 1\n    if l == n - 1:\n        return l\n    return l + 1\n",
        "test": "",
        "num_ids": 127,
        "indeed": false
    },
    {
        "number": 4530,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    if len(a) == 1:\n        return str(a[0])\n    if len(a) == 2:\n        return str(a[0]) + str(a[1])\n    if len(a) == 3:\n        return str(a[0]) + str(a[1]) + str(a[2])\n    if len(a) == 4:\n        return str(a[0]) + str(a[1]) + str(a[2]) + str(a[3])\n    if len(a) == 5:\n        return str(a[0]) + str(a[1]) + str(a[2]) + str(a[3]) + str(a[4])\n    if len(a) == 6:\n        return str(a[0]) + str(a[1]) + str(a[2]) + str(a[3]) + str(a[4]) + str(a[5])\n    if len(a) == 7:\n        return str(a[0]) + str(a[1]) + str(a[2]) + str(a[3]) + str(a[4]) + str(a[5]) + str(a[6])\n    if len(a) == 8:\n        return str(a[0]) + str(a[1]) + str(a[2]) + str(a[3]) + str(a[4]) + str(a[5]) + str(a[6]) + str(a[7])\n    if len(a) == 9:\n        return str(a[0]) + str(a[1]) + str(a[2]) + str(a[3]) + str(a[4]) + str(a[5]) + str(a[6]) + str(a[7]) + str(a[8])\n    if len(a) == 10:\n        return str(a[0]) + str(a[1]) + str(a[2]) + str(a[3]) + str(a[4]) + str(a[5]) + str(a[6]) + str(a[7]) + str(a[8]) + str(a[9])\n    if len(a) == 11:\n        return str(a[0]) + str(a[1]) + str(a[2]) + str(a[3]) + str(a[4]) + str(a[5]) + str(a[6]) + str(a[7]) + str(a[8]) + str(a[9]) + str(a[10])\n    if len(a) == 12:\n        return str(a[0]) + str(a[1]) + str(a[2]) + str(a[3]) + str(a[4]) + str(a[5]) + str(a[6]) + str(a[7]) + str(a[8]) + str(a[9]) + str(a[10]) + str(a[11])\n    if len(a) == 13:\n        return str(a[0]) + str(a[1]) + str(a[2]) + str(a[3]) + str(a[4]) + str(a[5]) + str(a[6]) + str(a[7]) + str(a[8]) + str(a[9]) + str(a[10]) + str(a[11]) + str(a[12])\n    if len(a) == 14:\n        return str(a[0]) + str(a[1]) + str(a[2]) + str(a[3]) + str(a[4]) + str(a[5]) + str(a[6]) + str(a[7]) + str(a[8]) + str(a[9]) + str(a[10]) + str(a[11]) + str(a[12]) + str(a[13])\n    if len(a) == 15:\n        return str(a[0]) + str(a[1]) + str(a[2]) + str(a[3]) + str(a[4]) + str(a[5]) + str(a[6]) + str(a[7]) + str(a[8]) + str(a[9]) + str(a[10]) + str(a[11]) + str(a[12]) + str(a[13]) + str(a[14])\n    if len(a) == 16:\n        return str(a[0]) + str(a[1]) + str(a[2]) + str(a[3]) + str(a[4]) + str(a[5]) + str(a[6]) + str(a[7]) + str(a[8]) + str(a[9]) + str(a[10]) + str(a[11]) + str(a[12]) + str(a[13]) + str(a[14]) + str(a[15])\n    if len(a) == 17:\n        return str(a[0]) + str(a[1]) + str(a[2]) + str(a[3]) + str(a[4]) + str(a[5]) + str(a[6]) + str(a[7]) + str(a[8]) + str(a[9]) + str(a[10",
        "test": "",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 4531,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(n)",
        "test": "",
        "num_ids": 1457,
        "indeed": false
    },
    {
        "number": 4532,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    x = 0\n    for i in range(n):\n        x += a[i]\n        if x % k!= 0:\n            x += 1\n    return str(x)\n\ndef",
        "test": "",
        "num_ids": 84,
        "indeed": false
    },
    {
        "number": 4533,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    g = [0] * (n + 1)\n    for i in range(1, n + 1):\n        g[i] = int(stdin.strip())\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if g[i] > g[j]:\n                g[i] = g[j]\n    \n    answer = 0\n    for i in range(1, n + 1):\n        answer += g[i]\n    \n    return str(answer)\n\n\"\"\"\n\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        \n        g.sort()\n        s.sort()\n        \n        i = 0\n        j = 0\n        \n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n            else:\n                j += 1\n                \n        return i - j\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        ",
        "test": "",
        "num_ids": 1731,
        "indeed": false
    },
    {
        "number": 4534,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "",
        "num_ids": 1933,
        "indeed": false
    },
    {
        "number": 4535,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin, 2)\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return str(count)\n",
        "test": "",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4536,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    digits = list(map(int, stdin))\n    digits.sort(reverse=True)\n    answer = []\n    for i in range(len(digits)):\n        answer.append(str(digits[i]))\n    return ''.join(answer)\n\ndef",
        "test": "",
        "num_ids": 69,
        "indeed": false
    },
    {
        "number": 4537,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(max(A+B, A-B, A*B))\n    return str(max(A+B, A-B, A*B))\n\n-----Sample Input-----\n3 1\n\n-----Sample Output-----\n4\n\n3+1=4, 3-1=2 and 3 \\times 1=3. The largest among them is 4.\ndef",
        "test": "",
        "num_ids": 99,
        "indeed": false
    },
    {
        "number": 4538,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    X_1, Y_1 = map(int, stdin.split())\n    X_2, Y_2 = map(int, stdin.split())\n    X_3, Y_3 = map(int, stdin.split())\n    X_4, Y_4 = map(int, stdin.split())\n    X_5, Y_5 = map(int, stdin.split())\n    X_6, Y_6 = map(int, stdin.split())\n    X_7, Y_7 = map(int, stdin.split())\n    X_8, Y_8 = map(int, stdin.split())\n    X_9, Y_9 = map(int, stdin.split())\n    X_10, Y_10 = map(int, stdin.split())\n    X_11, Y_11 = map(int, stdin.split())\n    X_12, Y_12 = map(int, stdin.split())\n    X_13, Y_13 = map(int, stdin.split())\n    X_14, Y_14 = map(int, stdin.split())\n    X_15, Y_15 = map(int, stdin.split())\n    X_16, Y_16 = map(int, stdin.split())\n    X_17, Y_17 = map(int, stdin.split())\n    X_18, Y_18 = map(int, stdin.split())\n    X_19, Y_19 = map(int, stdin.split())\n    X_20, Y_20 = map(int, stdin.split())\n    X_21, Y_21 = map(int, stdin.split())\n    X_22, Y_22 = map(int, stdin.split())\n    X_23, Y_23 = map(int, stdin.split())\n    X_24, Y_24 = map(int, stdin.split())\n    X_25, Y_25 = map(int, stdin.split())\n    X_26, Y_26 = map(int, stdin.split())\n    X_27, Y_27 = map(int, stdin.split())\n    X_28, Y_28 = map(int, stdin.split())\n    X_29, Y_29 = map(int, stdin.split())\n    X_30, Y_30 = map(int, stdin.split())\n    X_31, Y_31 = map(int, stdin.split())\n    X_32, Y_32 = map(int, stdin.split())\n    X_33, Y_33 = map(int, stdin.split())\n    X_34, Y_34 = map(int, stdin.split())\n    X_35, Y_35 = map(int, stdin.split())\n    X_36, Y_36 = map(int, stdin.split())\n    X_37, Y_37 = map(int, stdin.split())\n    X_38, Y_38 = map(int, stdin.split())\n    X_39, Y_39 = map(int, stdin.split())\n    X_40, Y_40 = map(int, stdin.split())\n    X_41, Y_41 = map(int, stdin.split())\n    X_42, Y_42 = map(int, stdin.split())\n    X_43, Y_43 = map(int, stdin.split())\n    X_44, Y_44 = map(int, stdin.split())\n    X_45, Y_45 = map(int, stdin.split())\n    X_46, Y_46 = map(int, stdin.split())\n    X_47, Y_47 = map(int, stdin.split())\n    X_48, Y_48 = map(int, stdin.split())\n    X_49, Y_49 = map(int, stdin.split())\n    X_50, Y_50 = map(int, stdin.split())\n    X_51, Y_51 = map(int, stdin.split())\n    X_52, Y_52 = map(int, stdin.split())\n    X_53, Y_53 = map(int, stdin.split())\n    X_54, Y_54 = map(int, stdin.split())\n    X_55, Y_55 = map(int, stdin.split())\n    X_56, Y_56 = map(int, stdin.split())\n    X_57, Y_57 = map(int, stdin.split())\n    X_58, Y_58 = map(int, stdin.split())\n    X_59, Y_59 = map(int, stdin.split())\n    X_60, Y_60 = map(int, stdin.split())\n    X_61, Y_61 = map(int, stdin.split())\n    X_62, Y_62 = map(int, stdin.split())\n    X_63, Y_63 = map(int, stdin.split())\n    X_64, Y_64 = map(int, stdin.split())\n    X_65, Y_65 = map(int, stdin.split())\n    X_66, Y_66 = map(int, stdin.split())\n    X_67, Y_67 = map(int, stdin.split())\n    X_68, Y_68 = map(int, stdin.split())\n    X_69, Y_69 = map(int, stdin.split())\n    X_70, Y_70 = map(int, stdin.split())\n    X_71, Y_71 = map(int, stdin.split())\n    X_72, Y_72 = map(int, stdin.split())\n    X_73, Y_73 = map(int, stdin.split())\n    X_74, Y_74 = map(int, stdin.split())\n    X_75, Y_75 = map(int, stdin.split())\n    X_76, Y_76 = map(int, stdin.split())\n    X_77, Y_77 = map(int, stdin.split())\n    X_78, Y_78 = map(int, stdin.split())\n    X_79, Y_79 = map(int, stdin.split())\n    X_80, Y_80 = map(int, stdin.split())\n    X_81, Y_81 = map(int, stdin.split())\n    X_82, Y_82 = map(int, stdin.split())\n    X_83, Y_83 = map(int, stdin.split())\n    X_84, Y_84 = map(int, stdin.split())\n    X_85, Y_85 = map(int, stdin.split())\n    X_86, Y_86 = map(int, stdin.split())\n    X_87, Y_87 = map(int, stdin",
        "test": "",
        "num_ids": 1665,
        "indeed": false
    },
    {
        "number": 4539,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef",
        "test": "",
        "num_ids": 37,
        "indeed": false
    },
    {
        "number": 4540,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    A_list = list(map(int, stdin.split()))\n    A_list.sort()\n    answer = 0\n    for i in range(N):\n        answer += A_list[i] * (i + 1)\n    print(answer)\n    return str(answer)\n\n-----Sample Output-----\n3\n8\n10\n\nSample Input\n3\n3 5 -1\n\nSample Output\n12\n8\n10\n\nExplanation\nFor i = 1, the course of the trip is 0 \\rightarrow 5 \\rightarrow -1 \\rightarrow 0 and the total cost of travel is 5 + 6 + 1 = 12 yen.\nFor i = 2, the course of the trip is 0 \\rightarrow 3 \\rightarrow -1 \\rightarrow 0 and the total cost of travel is 3 + 4 + 1 = 8 yen.\nFor i = 3, the course of the trip is 0 \\rightarrow 3 \\rightarrow 5 \\rightarrow 0 and the total cost of travel is 3 + 2 + 5 = 10 yen.\n\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.answer = 0\n        self.visited = set()\n        self.visited.add(0)\n        self.visited.add(1)\n        self.visited.add(2)\n        self.visited.add(3)\n        self.visited.add(4)\n        self.visited.add(5)\n        self.visited.add(6)\n        self.visited.add(7)\n        self.visited.add(8)\n        self.visited.add(9)\n        self.visited.add(10)\n        self.visited.add(11)\n        self.visited.add(12)\n        self.visited.add(13)\n        self.visited.add(14)\n        self.visited.add(15)\n        self.visited.add(16)\n        self.visited.add(17)\n        self.visited.add(18)\n        self.visited.add(19)\n        self.visited.add(20)\n        self.visited.add(21)\n        self.visited.add(22)\n        self.visited.add(23)\n        self.visited.add(24)\n        self.visited.add(25)\n        self.visited.add(26)\n        self.visited.add(27)\n        self.visited.add(28)\n        self.visited.add(29)\n        self.visited.add(30)\n        self.visited.add(31)\n        self.visited.add(32)\n        self.visited.add(33)\n        self.visited.add(34)\n        self.visited.add(35)\n        self.visited.add(36)\n        self.visited.add(37)\n        self.visited.add(38)\n        self.visited.add(39)\n        self.visited.add(40)\n        self.visited.add(41)\n        self.visited.add(42)\n        self.visited.add(43)\n        self.visited.add(44)\n        self.visited.add(45)\n        self.visited.add(46)\n        self.visited.add(47)\n        self.visited.add(48)\n        self.visited.add(49)\n        self.visited.add(50)\n        self.visited.add(51)\n        self.visited.add(52)\n        self.visited.add(53)\n        self.visited.add(54)\n        self.visited.add(55)\n        self.visited.add(56)\n        self.visited.add(57)\n        self.visited.add(58)\n        self.visited.add(59)\n        self.visited.add(60)\n        self.visited.add(61)\n        self.visited.add(62)\n        self.visited.add(63)\n        self.visited.add(64)\n        self.visited.add(65)\n        self.visited.add(66)\n        self.visited.add(67)\n        self.visited.add(68)\n        self.visited.add(69)\n        self.visited.add(70)\n        self.visited.add(71)\n        self.visited.add(72)\n        self.visited.add(73)\n        self.visited.add(74)\n        self.visited.add(75)\n        self.visited.add(76)\n        self.visited.add(77)\n        self.visited.add(78)\n        self.visited.add(79)\n        self.visited.add(80)\n        self.visited.add(81)\n        self.visited.add(82)\n        self.visited.add(83)\n        self.visited.add(84)\n        self.visited.add(85)\n        self.visited.add(86)\n        self.visited.add(87)\n        self.visited.add(88)\n        self.visited.add(89)\n        self.visited.add(90)\n        self.visited.add(91)\n        self.visited.add(92)\n        self.visited.add(93)\n        self.visited.add(94)\n        self.visited.add(95)\n        self.visited.add(96)\n        self.visited.add(97)\n        self.visited.add(98)\n        self.visited.add(99)\n        self.visited.add(100)\n        self.visited.add(101)\n        self.visited.add(102)\n        self.visited.add(103)\n        self.visited.add(104)\n        self.visited.add(105)\n        self.visited.add(106)\n        self.visited.add(107)\n        self.visited.add(108)\n        self.visited.add(",
        "test": "",
        "num_ids": 1488,
        "indeed": false
    },
    {
        "number": 4541,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip()\n    if c.isalpha():\n        return c.lower()\n    else:\n        return c.upper()\n",
        "test": "",
        "num_ids": 36,
        "indeed": false
    },
    {
        "number": 4542,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    stones = [list(map(int, input().split())) for _ in range(int(stdin))]\n    black_stones = 0\n    white_stones = 0\n    for stone in stones:\n        if stone[0] == 'B':\n            black_stones += 1\n        else:\n            white_stones += 1\n    return str(min(black_stones, white_stones))\n",
        "test": "",
        "num_ids": 93,
        "indeed": false
    },
    {
        "number": 4543,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a * b == 121:\n        return 'Yes'\n    else:\n        return 'No'\n\ndef",
        "test": "",
        "num_ids": 43,
        "indeed": false
    },
    {
        "number": 4544,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    x = a[n-1]\n    count = 0\n    for i in range(n-1):\n        if a[i] + a[i+1] == x:\n            count += 1\n    return str(count)\n\ndef",
        "test": "",
        "num_ids": 89,
        "indeed": false
    },
    {
        "number": 4545,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    grid = []\n    for _ in range(N):\n        grid.append(list(map(int, stdin.split())))\n    \n    def paint(x, y, color):\n        if x < 0 or x >= N or y < 0 or y >= N:\n            return\n        if grid[x][y] == 0:\n            grid[x][y] = color\n            paint(x-1, y, color)\n            paint(x, y-1, color)\n            paint(x+1, y, color)\n            paint(x, y+1, color)\n    \n    for i in range(N):\n        for j in range(N):\n            paint(i, j, A)\n    \n    return str(len(set(grid)))\n\nprint(solution(input()))\n",
        "test": "",
        "num_ids": 211,
        "indeed": false
    },
    {
        "number": 4546,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return \"YES\"\n    if a == b or b == c or a == c:\n        return \"NO\"\n    if a - b == c - a:\n        return \"YES\"\n    return \"NO\"\n",
        "test": "",
        "num_ids": 77,
        "indeed": false
    },
    {
        "number": 4547,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 9:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef",
        "test": "",
        "num_ids": 37,
        "indeed": false
    },
    {
        "number": 4548,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append(M)\n    A = [0] + A\n    A.append(N)\n    A.append",
        "test": "",
        "num_ids": 1671,
        "indeed": false
    },
    {
        "number": 4549,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    s = []\n    for i in range(H):\n        s.append(list(map(int, stdin.split())))\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == 1:\n                s[i][j] = '*'\n            else:\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '.':\n                s[i][j] = '*'\n            else:\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '.':\n                s[i][j] = '*'\n            else:\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '.'\n            else:\n                s[i][j] = '*'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '.':\n                s[i][j] = '*'\n            else:\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '.'\n            else:\n                s[i][j] = '*'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '.':\n                s[i][j] = '*'\n            else:\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '.'\n            else:\n                s[i][j] = '*'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '.':\n                s[i][j] = '*'\n            else:\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '.'\n            else:\n                s[i][j] = '*'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '.':\n                s[i][j] = '*'\n            else:\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '.'\n            else:\n                s[i][j] = '*'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '.':\n                s[i][j] = '*'\n            else:\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '.'\n            else:\n                s[i][j] = '*'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '.':\n                s[i][j] = '*'\n            else:\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '.'\n            else:\n                s[i][j] = '*'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '.':\n                s[i][j] = '*'\n            else:\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '.'\n            else:\n                s[i][j] = '*'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '.':\n                s[i][j] = '*'\n            else:\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '.'\n            else:\n                s[i][j] = '*'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '.':\n                s[i][j] = '*'\n            else:\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '.'\n            else:\n                s[i][j] = '*'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '.':\n                s[i][j] = '*'\n            else:\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '*':\n                s[i][j] = '.'\n            else:\n                s[i][j] = '*'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '.':\n                s[i][j] = '*'\n            else:\n                s[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '.':\n                s[i][j] = '*'\n            else:\n                s[i][j] = '.'\n    for i in range",
        "test": "",
        "num_ids": 1602,
        "indeed": false
    },
    {
        "number": 4550,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c == 30:\n        return 'Yes'\n    elif a + b + c == 20:\n        return 'No'\n    else:\n        return 'No'\n",
        "test": "",
        "num_ids": 63,
        "indeed": false
    },
    {
        "number": 4551,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = map(int,stdin.split())\n    if A>B:\n        if A>C:\n            if A>D:\n                return \"Left\"\n            else:\n                return \"Balanced\"\n        else:\n            if A>D:\n                return \"Right\"\n            else:\n                return \"Balanced\"\n    else:\n        if B>C:\n            if B>D:\n                return \"Right\"\n            else:\n                return \"Balanced\"\n        else:\n            if B>D:\n                return \"Left\"\n            else:\n                return \"Balanced\"\n\n-----Sample Output-----\nLeft\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nRight\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nLeft\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nRight\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nBalanced\n\nThe total weight of the masses on the left pan is 11, and the",
        "test": "",
        "num_ids": 1763,
        "indeed": false
    },
    {
        "number": 4552,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, F, P = map(int, stdin.split())\n    F_list = list(map(int, stdin.split()))\n    P_list = list(map(int, stdin.split()))\n    F_list.sort()\n    P_list.sort()\n    profit = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if F_list[i] + F_list[j] + F_list[k] == P_list[i] + P_list[j] + P_list[k]:\n                    profit += P_list[i] + P_list[j] + P_list[k]\n    return str(profit)\n\n-----Sample Output-----\n8\n\nIf her shop is open only during the periods when Shop 1 is opened, the profit will be 8, which is the maximum possible profit.\ndef",
        "test": "",
        "num_ids": 224,
        "indeed": false
    },
    {
        "number": 4553,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A+B == A+B+1:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "",
        "num_ids": 45,
        "indeed": false
    },
    {
        "number": 4554,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    if W == 1:\n        return str(1)\n    if a == 1:\n        return str(b)\n    if b == 1:\n        return str(a)\n    if a + b == W:\n        return str(a + b)\n    if a + b > W:\n        return str(a + b)\n    return str(a + b + 1)\n\ndef",
        "test": "",
        "num_ids": 109,
        "indeed": false
    },
    {
        "number": 4555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if A < B:\n        A, B = B, A\n    if A < K:\n        A, K = K, A\n    if B < K:\n        B, K = K, B\n    if B < A:\n        B, A = A, B\n    if B < K:\n        B, K = K, B\n    print(A, B, K)\n    return str(A) + str(B) + str(K)\n",
        "test": "",
        "num_ids": 125,
        "indeed": false
    },
    {
        "number": 4556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) == 1:\n        return s\n    else:\n        return s[0].upper() + solution(s[1:])\n",
        "test": "",
        "num_ids": 45,
        "indeed": false
    },
    {
        "number": 4557,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if A + B == X:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "",
        "num_ids": 43,
        "indeed": false
    },
    {
        "number": 4558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    return str(X*t)\n\ndef",
        "test": "",
        "num_ids": 27,
        "indeed": false
    },
    {
        "number": 4559,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10**18:\n        return str(n)\n    else:\n        return -1\n\ndef",
        "test": "",
        "num_ids": 37,
        "indeed": false
    },
    {
        "number": 4560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 0:\n        return \"No\"\n    if n == 0:\n        return \"Yes\"\n    if n == 1:\n        return \"No\"\n    if n == 2:\n        return \"No\"\n    if n == 3:\n        return \"No\"\n    if n == 4:\n        return \"No\"\n    if n == 5:\n        return \"No\"\n    if n == 6:\n        return \"No\"\n    if n == 7:\n        return \"No\"\n    if n == 8:\n        return \"No\"\n    if n == 9:\n        return \"No\"\n    if n == 10:\n        return \"No\"\n    if n == 11:\n        return \"No\"\n    if n == 12:\n        return \"No\"\n    if n == 13:\n        return \"No\"\n    if n == 14:\n        return \"No\"\n    if n == 15:\n        return \"No\"\n    if n == 16:\n        return \"No\"\n    if n == 17:\n        return \"No\"\n    if n == 18:\n        return \"No\"\n    if n == 19:\n        return \"No\"\n    if n == 20:\n        return \"No\"\n    if n == 21:\n        return \"No\"\n    if n == 22:\n        return \"No\"\n    if n == 23:\n        return \"No\"\n    if n == 24:\n        return \"No\"\n    if n == 25:\n        return \"No\"\n    if n == 26:\n        return \"No\"\n    if n == 27:\n        return \"No\"\n    if n == 28:\n        return \"No\"\n    if n == 29:\n        return \"No\"\n    if n == 30:\n        return \"No\"\n    if n == 31:\n        return \"No\"\n    if n == 32:\n        return \"No\"\n    if n == 33:\n        return \"No\"\n    if n == 34:\n        return \"No\"\n    if n == 35:\n        return \"No\"\n    if n == 36:\n        return \"No\"\n    if n == 37:\n        return \"No\"\n    if n == 38:\n        return \"No\"\n    if n == 39:\n        return \"No\"\n    if n == 40:\n        return \"No\"\n    if n == 41:\n        return \"No\"\n    if n == 42:\n        return \"No\"\n    if n == 43:\n        return \"No\"\n    if n == 44:\n        return \"No\"\n    if n == 45:\n        return \"No\"\n    if n == 46:\n        return \"No\"\n    if n == 47:\n        return \"No\"\n    if n == 48:\n        return \"No\"\n    if n == 49:\n        return \"No\"\n    if n == 50:\n        return \"No\"\n    if n == 51:\n        return \"No\"\n    if n == 52:\n        return \"No\"\n    if n == 53:\n        return \"No\"\n    if n == 54:\n        return \"No\"\n    if n == 55:\n        return \"No\"\n    if n == 56:\n        return \"No\"\n    if n == 57:\n        return \"No\"\n    if n == 58:\n        return \"No\"\n    if n == 59:\n        return \"No\"\n    if n == 60:\n        return \"No\"\n    if n == 61:\n        return \"No\"\n    if n == 62:\n        return \"No\"\n    if n == 63:\n        return \"No\"\n    if n == 64:\n        return \"No\"\n    if n == 65:\n        return \"No\"\n    if n == 66:\n        return \"No\"\n    if n == 67:\n        return \"No\"\n    if n == 68:\n        return \"No\"\n    if n == 69:\n        return \"No\"\n    if n == 70:\n        return \"No\"\n    if n == 71:\n        return \"No\"\n    if n == 72:\n        return \"No\"\n    if n == 73:\n        return \"No\"\n    if n == 74:\n        return \"No\"\n    if n == 75:\n        return \"No\"\n    if n == 76:\n        return \"No\"\n    if n == 77:\n        return \"No\"\n    if n == 78:\n        return \"No\"\n    if n == 79:\n        return \"No\"\n    if n == 80:\n        return \"No\"\n    if n == 81:\n        return \"No\"\n    if n == 82:\n        return \"No\"\n    if n == 83:\n        return \"No\"\n    if n == 84:\n        return \"No\"\n    if n == 85:\n        return \"No\"\n    if n == 86:\n        return \"No\"\n    if n == 87:\n        return \"No\"\n    if n == 88:\n        return \"No\"\n    if n == 89:\n        return \"No\"\n    if n == 90:\n        return \"No\"\n    if n == 91:\n        return \"No\"\n    if n == 92:\n        return \"No\"\n    if n == 93:\n        return \"No\"\n    if n == 94:\n        return \"No\"\n    if n == 95:\n        return \"No\"\n    if n == 96:\n        return \"No\"\n    if n == 97:\n        return \"No\"\n    if n == 98:\n        return \"No\"\n    if n == 99:\n        return \"No\"\n    if n == 100:\n        return \"No\"\n    if n == 101:\n        return \"No\"\n    if n == 102:\n        return \"No\"\n    if n == 103:\n        return \"No\"\n    if n == 104:\n        return \"No\"\n    if n == 105:\n        return \"No\"\n    if n == 106:\n        return \"No\"\n    if n == 107:\n        return \"No\"\n    if n == 108:\n        return \"No\"\n    if n == 109:\n        return \"No\"\n    if n == 110:\n        return \"No\"\n    if n == 111:\n        return \"No\"\n    if n == 112:\n        return \"No\"\n    if n == 113:\n        return \"No\"\n    if n == 114:\n        return \"No\"\n    if n == 115:\n        return \"No\"\n    if n == 116:\n        return \"No\"\n    if n == 117:\n        return \"No\"\n    if n == 118:\n        return \"No\"\n    if n == 119:\n        return \"No\"\n    if n == 120:\n        return \"No\"\n    if n == 121:\n        return \"No\"\n    if n == 122:\n        return \"No\"\n    if n == 123:\n        return \"No\"\n    if n == 124:\n        return \"No\"\n    if n == 125:\n        return \"No\"\n    if n == 126:\n        return \"No\"\n    if n == 127:\n        return \"No\"\n    if n == 128:\n        return \"No\"\n    if n == 129:\n        return \"No\"\n    if n == 130:\n        return \"No\"\n    if n == 131:\n        return \"No\"\n    if n == 132:\n        return \"No\"\n    if n == 133:\n        return \"No\"\n    if n == 134:\n        return \"No\"\n    if n == 135:\n        return \"No\"\n    if n == 136:\n        return \"No\"\n    if n == 137:\n        return \"No\"\n    if n == 138:\n        return \"No\"\n    if n == 139:\n        return \"No\"\n    if n == 140:\n        return \"No\"\n    ",
        "test": "",
        "num_ids": 1859,
        "indeed": false
    },
    {
        "number": 4561,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    if A > X:\n        return \"safe\"\n    elif A < X:\n        return \"dangerous\"\n    elif B > X:\n        return \"dangerous\"\n    elif B < X:\n        return \"safe\"\n    else:\n        return \"safe\"\n",
        "test": "",
        "num_ids": 85,
        "indeed": false
    },
    {
        "number": 4562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return str(n)\n    else:\n        return str(n**2)\n\ndef",
        "test": "",
        "num_ids": 39,
        "indeed": false
    },
    {
        "number": 4563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T_1, T_2, A_1, A_2 = map(int, stdin.split())\n    if N == T_1 + T_2:\n        return str(min(A_1, A_2))\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T_2)\n    if N < T_1 + T_2:\n        return str(T_1 + T",
        "test": "",
        "num_ids": 1640,
        "indeed": false
    },
    {
        "number": 4564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if stdin[i]!= stdin[i-1]:\n            return 'no'\n    return 'yes'\n",
        "test": "",
        "num_ids": 43,
        "indeed": false
    },
    {
        "number": 4565,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = list(map(str, stdin.split()))\n    S.sort()\n    answer = 0\n    for i in range(N):\n        if S[i] == 'E':\n            answer += 1\n        else:\n            answer -= 1\n    return str(answer)\n\n-----Sample Output-----\n1\n\nInput:\n5\nWEEWW\n\nOutput:\n1\n\nExplanation:\nThe first person from the west is facing east.\nThe other people do not need to change their directions, so the number of people who have to change their directions is 1.\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 149,
        "indeed": false
    },
    {
        "number": 4566,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a_1, b_1 = map(int, stdin.split())\n    a_2, b_2 = map(int, stdin.split())\n    a_3, b_3 = map(int, stdin.split())\n    a_4, b_4 = map(int, stdin.split())\n    answer = 0\n    for i in range(N):\n        answer += (a_1 - a_2) * (b_1 - b_2) * (a_3 - a_4) * (b_3 - b_4)\n    return str(answer)\n",
        "test": "",
        "num_ids": 156,
        "indeed": false
    },
    {
        "number": 4567,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, s_1, s_2, s_N = map(int, stdin.split())\n    if N == 1:\n        return str(s_1 + s_2)\n    if N == 2:\n        return str(s_1 + s_2 + s_N)\n    if N == 3:\n        return str(s_1 + s_2 + s_N + s_N)\n    if N == 4:\n        return str(s_1 + s_2 + s_N + s_N + s_N)\n    if N == 5:\n        return str(s_1 + s_2 + s_N + s_N + s_N + s_N)\n    if N == 6:\n        return str(s_1 + s_2 + s_N + s_N + s_N + s_N + s_N + s_N)\n    if N == 7:\n        return str(s_1 + s_2 + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N)\n    if N == 8:\n        return str(s_1 + s_2 + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N)\n    if N == 9:\n        return str(s_1 + s_2 + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N)\n    if N == 10:\n        return str(s_1 + s_2 + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N)\n    if N == 11:\n        return str(s_1 + s_2 + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N)\n    if N == 12:\n        return str(s_1 + s_2 + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N)\n    if N == 13:\n        return str(s_1 + s_2 + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N)\n    if N == 14:\n        return str(s_1 + s_2 + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N)\n    if N == 15:\n        return str(s_1 + s_2 + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N + s_N",
        "test": "",
        "num_ids": 1724,
        "indeed": false
    },
    {
        "number": 4568,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = stdin.strip()\n    X = S[:N//2]\n    Y = S[N//2:]\n    X_count = 0\n    Y_count = 0\n    for i in range(len(X)):\n        if X[i]!= Y[i]:\n            X_count += 1\n    for i in range(len(Y)):\n        if Y[i]!= X[i]:\n            Y_count += 1\n    return max(X_count, Y_count)\n",
        "test": "",
        "num_ids": 133,
        "indeed": false
    },
    {
        "number": 4569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Cloudy'\n",
        "test": "",
        "num_ids": 8,
        "indeed": false
    },
    {
        "number": 4570,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n == 1:\n        return str(a*b)\n    elif n == 2:\n        return str(a*b)\n    else:\n        return str(a*b) + str(a*b) + str(a*b)\n",
        "test": "",
        "num_ids": 78,
        "indeed": false
    },
    {
        "number": 4571,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N == 0 or M == 0:\n        return \"0\"\n    if N == 1:\n        return str(M)\n    if M == 1:\n        return str(N)\n    if N == 2:\n        return str(M) + str(N)\n    if M == 2:\n        return str(N) + str(M)\n    if N == 3:\n        return str(M) + str(N) + str(M)\n    if M == 3:\n        return str(N) + str(M) + str(N)\n    if N == 4:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 4:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 5:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 5:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 6:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 6:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 7:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 7:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 8:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 8:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 9:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 9:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 10:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 10:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 11:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 11:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 12:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 12:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 13:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 13:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 14:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 14:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 15:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 15:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 16:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 16:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 17:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 17:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 18:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 18:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 19:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 19:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 20:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 20:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 21:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 21:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 22:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 22:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 23:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 23:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 24:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 24:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 25:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 25:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 26:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 26:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 27:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 27:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 28:\n        return str(M) + str(N) + str(M) + str(N)\n    if M == 28:\n        return str(N) + str(M) + str(N) + str(M)\n    if N == 29:",
        "test": "",
        "num_ids": 1603,
        "indeed": false
    },
    {
        "number": 4572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    for i in range(len(s)):\n        if s[i] not in s[i+1:]:\n            return s[i]\n    return None\n",
        "test": "",
        "num_ids": 49,
        "indeed": false
    },
    {
        "number": 4573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    X_list = list(map(int, stdin.split()))\n    B_list = [0] * N\n    for i in range(N):\n        B_list[i] = X_list[i]\n    B_list.sort()\n    for i in range(N):\n        B_list[i] = B_list[i] // 2\n    for i in range(N):\n        print(B_list[i], end=' ')\n    return '\\n'.join(map(str, B_list))\n",
        "test": "",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 4574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = [int(i) for i in stdin.split()]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A = [A[i] for i in range(n)]\n    A.sort()\n    A",
        "test": "",
        "num_ids": 1842,
        "indeed": false
    },
    {
        "number": 4575,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D, X = map(int, stdin.split())\n    A_1 = list(map(int, stdin.split()))\n    A_2 = list(map(int, stdin.split()))\n    A_N = list(map(int, stdin.split()))\n    A_1.sort()\n    A_2.sort()\n    A_N.sort()\n    A_1 = [1] + A_1\n    A_2 = [2] + A_2\n    A_N = [3] + A_N\n    A_1 = [1] + A_1\n    A_2 = [2] + A_2\n    A_N = [3] + A_N\n    A_1 = sorted(A_1)\n    A_2 = sorted(A_2)\n    A_N = sorted(A_N)\n    A_1 = A_1[D:]\n    A_2 = A_2[D:]\n    A_N = A_N[D:]\n    A_1 = A_1[:D]\n    A_2 = A_2[:D]\n    A_N = A_N[:D]\n    A_1 = sorted(A_1)\n    A_2 = sorted(A_2)\n    A_N = sorted(A_N)\n    A_1 = A_1[:X]\n    A_2 = A_2[:X]\n    A_N = A_N[:X]\n    A_1 = sorted(A_1)\n    A_2 = sorted(A_2)\n    A_N = sorted(A_N)\n    A_1 = A_1[:A_N[0]]\n    A_2 = A_2[:A_N[0]]\n    A_N = A_N[:A_N[0]]\n    A_1 = sorted(A_1)\n    A_2 = sorted(A_2)\n    A_N = sorted(A_N)\n    A_1 = A_1[:A_N[0]]\n    A_2 = A_2[:A_N[0]]\n    A_N = A_N[:A_N[0]]\n    A_1 = sorted(A_1)\n    A_2 = sorted(A_2)\n    A_N = sorted(A_N)\n    A_1 = A_1[:A_N[0]]\n    A_2 = A_2[:A_N[0]]\n    A_N = A_N[:A_N[0]]\n    A_1 = sorted(A_1)\n    A_2 = sorted(A_2)\n    A_N = sorted(A_N)\n    A_1 = A_1[:A_N[0]]\n    A_2 = A_2[:A_N[0]]\n    A_N = A_N[:A_N[0]]\n    A_1 = sorted(A_1)\n    A_2 = sorted(A_2)\n    A_N = sorted(A_N)\n    A_1 = A_1[:A_N[0]]\n    A_2 = A_2[:A_N[0]]\n    A_N = A_N[:A_N[0]]\n    A_1 = sorted(A_1)\n    A_2 = sorted(A_2)\n    A_N = sorted(A_N)\n    A_1 = A_1[:A_N[0]]\n    A_2 = A_2[:A_N[0]]\n    A_N = A_N[:A_N[0]]\n    A_1 = sorted(A_1)\n    A_2 = sorted(A_2)\n    A_N = sorted(A_N)\n    A_1 = A_1[:A_N[0]]\n    A_2 = A_2[:A_N[0]]\n    A_N = A_N[:A_N[0]]\n    A_1 = sorted(A_1)\n    A_2 = sorted(A_2)\n    A_N = sorted(A_N)\n    A_1 = A_1[:A_N[0]]\n    A_2 = A_2[:A_N[0]]\n    A_N = A_N[:A_N[0]]\n    A_1 = sorted(A_1)\n    A_2 = sorted(A_2)\n    A_N = sorted(A_N)\n    A_1 = A_1[:A_N[0]]\n    A_2 = A_2[:A_N[0]]\n    A_N = A_N[:A_N[0]]\n    A_1 = sorted(A_1)\n    A_2 = sorted(A_2)\n    A_N = sorted(A_N)\n    A_1 = A_1[:A_N[0]]\n    A_2 = A_2[:A_N[0]]\n    A_N = A_N[:A_N[0]]\n    A_1 = sorted(A_1)\n    A_2 = sorted(A_2)\n    A_N = sorted(A_N)\n    A_1 = A_1[:A_N[0]]\n    A_2 = A_2[:A_N[0]]\n    A_N = A_N[:A_N[0]]\n    A_1 = sorted(A_1)\n    A_2 = sorted(A_2)\n    A_N = sorted(A_N)\n    A_1 = A_1[:A_N[0]]\n    A_2 = A_2[:A_N[0]]\n    A_N = A_N[:A_N[0]]\n    A_1 = sorted(A_1)\n    A_2 = sorted(A_2)\n    A_N = sorted(A_N)\n    A_1 = A_1[:A_N[0]]\n    A_2 = A_2[:A_N[0]]\n    A_N = A_N[:A_N[0]]\n    A_1 = sorted(A_1)\n    A_2 = sorted(A_2)\n    A_N = sorted(A_N)\n    A_1 = A_1[:A_N[0]]\n    A_2 = A_2[:A_N[0]]\n    A_N = A_N[:A_N[0]]\n    A_1 = sorted(A_1)\n    A_2 = sorted(A_2)\n    A_N = sorted(A_N)\n    A_1 = A_1[:",
        "test": "",
        "num_ids": 1624,
        "indeed": false
    },
    {
        "number": 4576,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n    if A + B + C == X:\n        return \"1\"\n    if A + B + C == X + 100:\n        return \"2\"\n    if A + B + C == X + 100 + 50:\n        return \"3\"\n    if A + B + C == X + 100 + 50 + 100:\n        return \"4\"\n    if A + B + C == X + 100 + 50 + 100 + 50:\n        return \"5\"\n    if A + B + C == X + 100 + 50 + 100 + 50:\n        return \"6\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100:\n        return \"7\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100:\n        return \"8\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"9\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"10\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"11\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"12\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"13\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"14\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"15\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"16\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"17\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"18\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"19\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"20\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"21\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"22\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"23\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"24\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"25\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"26\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"27\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"28\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"29\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"30\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"31\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"32\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"33\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"34\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"35\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"36\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"37\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"38\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"39\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"40\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"41\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"42\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"43\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"44\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"45\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"46\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"47\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"48\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"49\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"50\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"51\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"52\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"53\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"54\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"55\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"56\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"57\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"58\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"59\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"60\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        return \"61\"\n    if A + B + C == X + 100 + 50 + 100 + 50 + 100 + 100:\n        ",
        "test": "",
        "num_ids": 1765,
        "indeed": false
    },
    {
        "number": 4577,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C < A or B < A:\n        return 'No'\n    if C > B:\n        return 'No'\n    return 'Yes'\n",
        "test": "",
        "num_ids": 54,
        "indeed": true
    },
    {
        "number": 4578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, m_1, m_2, m_N = map(int, stdin.split())\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 = m_1 if m_1 > 0 else 1\n    m_2 = m_2 if m_2 > 0 else 1\n    m_N = m_N if m_N > 0 else 1\n    m_1 =",
        "test": "",
        "num_ids": 1612,
        "indeed": false
    },
    {
        "number": 4579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S_1 = stdin.strip().split()\n    S_N = []\n    for i in range(N):\n        S_N.append(stdin.strip().split()[i])\n    return str(len(set(S_1)))\n\ndef",
        "test": "",
        "num_ids": 74,
        "indeed": false
    },
    {
        "number": 4580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a_list = list(map(int, stdin.strip().split()))\n    a_list.sort()\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_list = ''.join(a_list)\n    a_list = a_list.split(' ')\n    a_list = [int(i) for i in a_list]\n    a_",
        "test": "",
        "num_ids": 1707,
        "indeed": false
    },
    {
        "number": 4581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(price(stdin))\n\ndef",
        "test": "",
        "num_ids": 13,
        "indeed": false
    },
    {
        "number": 4582,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(str, stdin.split())\n    if a == 'H':\n        if b == 'H':\n            return 'H'\n        else:\n            return 'D'\n    else:\n        if b == 'D':\n            return 'D'\n        else:\n            return 'H'\n\n-----Sample Output-----\nD\n\nIn this input, AtCoDeer is dishonest. Hence, as he says, TopCoDeer is dishonest.\ndef",
        "test": "",
        "num_ids": 111,
        "indeed": false
    },
    {
        "number": 4583,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        return \"No solution\"\n    if n == 0:\n        return \"No solution\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:\n        return \"117\"\n    if n == 118:\n        return \"118\"\n    if n == 119:\n        return \"119\"\n    if n == 120:\n        return \"120\"\n    if n == 121:\n        return \"121\"\n    if n == 122:\n        return \"122\"\n    if n == 123:\n        return \"123\"\n    if n == 124:\n        return \"124\"\n    if n == 125:\n        return \"125\"\n    if n == 126:\n        return \"126\"\n    if n == 127:\n        return \"127\"\n    if n == 128:\n        return \"128\"\n    if n == 129:\n        return \"129\"\n    if n == 130:\n        return \"130\"\n    if n == 131:\n        return \"131\"\n    if n == 132:\n        return \"132\"\n    if n == 133:\n        return \"133\"\n    if n == 134:\n        return \"134\"\n    if n == 135:\n        return \"135\"",
        "test": "",
        "num_ids": 1792,
        "indeed": false
    },
    {
        "number": 4584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [0] * n\n    for i in range(n):\n        a[i] = int(stdin[i])\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] == a[j]:\n                a[i] += 1\n    \n    for i in range(n):\n        if a[i] == 1:\n            print(i+1, end=\" \")\n    \n    return \"0\"\n",
        "test": "",
        "num_ids": 127,
        "indeed": false
    },
    {
        "number": 4585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"3\"\n    if x == 4:\n        return \"4\"\n    if x == 5:\n        return \"5\"\n    if x == 6:\n        return \"6\"\n    if x == 7:\n        return \"7\"\n    if x == 8:\n        return \"8\"\n    if x == 9:\n        return \"9\"\n    if x == 10:\n        return \"10\"\n    if x == 11:\n        return \"11\"\n    if x == 12:\n        return \"12\"\n    if x == 13:\n        return \"13\"\n    if x == 14:\n        return \"14\"\n    if x == 15:\n        return \"15\"\n    if x == 16:\n        return \"16\"\n    if x == 17:\n        return \"17\"\n    if x == 18:\n        return \"18\"\n    if x == 19:\n        return \"19\"\n    if x == 20:\n        return \"20\"\n    if x == 21:\n        return \"21\"\n    if x == 22:\n        return \"22\"\n    if x == 23:\n        return \"23\"\n    if x == 24:\n        return \"24\"\n    if x == 25:\n        return \"25\"\n    if x == 26:\n        return \"26\"\n    if x == 27:\n        return \"27\"\n    if x == 28:\n        return \"28\"\n    if x == 29:\n        return \"29\"\n    if x == 30:\n        return \"30\"\n    if x == 31:\n        return \"31\"\n    if x == 32:\n        return \"32\"\n    if x == 33:\n        return \"33\"\n    if x == 34:\n        return \"34\"\n    if x == 35:\n        return \"35\"\n    if x == 36:\n        return \"36\"\n    if x == 37:\n        return \"37\"\n    if x == 38:\n        return \"38\"\n    if x == 39:\n        return \"39\"\n    if x == 40:\n        return \"40\"\n    if x == 41:\n        return \"41\"\n    if x == 42:\n        return \"42\"\n    if x == 43:\n        return \"43\"\n    if x == 44:\n        return \"44\"\n    if x == 45:\n        return \"45\"\n    if x == 46:\n        return \"46\"\n    if x == 47:\n        return \"47\"\n    if x == 48:\n        return \"48\"\n    if x == 49:\n        return \"49\"\n    if x == 50:\n        return \"50\"\n    if x == 51:\n        return \"51\"\n    if x == 52:\n        return \"52\"\n    if x == 53:\n        return \"53\"\n    if x == 54:\n        return \"54\"\n    if x == 55:\n        return \"55\"\n    if x == 56:\n        return \"56\"\n    if x == 57:\n        return \"57\"\n    if x == 58:\n        return \"58\"\n    if x == 59:\n        return \"59\"\n    if x == 60:\n        return \"60\"\n    if x == 61:\n        return \"61\"\n    if x == 62:\n        return \"62\"\n    if x == 63:\n        return \"63\"\n    if x == 64:\n        return \"64\"\n    if x == 65:\n        return \"65\"\n    if x == 66:\n        return \"66\"\n    if x == 67:\n        return \"67\"\n    if x == 68:\n        return \"68\"\n    if x == 69:\n        return \"69\"\n    if x == 70:\n        return \"70\"\n    if x == 71:\n        return \"71\"\n    if x == 72:\n        return \"72\"\n    if x == 73:\n        return \"73\"\n    if x == 74:\n        return \"74\"\n    if x == 75:\n        return \"75\"\n    if x == 76:\n        return \"76\"\n    if x == 77:\n        return \"77\"\n    if x == 78:\n        return \"78\"\n    if x == 79:\n        return \"79\"\n    if x == 80:\n        return \"80\"\n    if x == 81:\n        return \"81\"\n    if x == 82:\n        return \"82\"\n    if x == 83:\n        return \"83\"\n    if x == 84:\n        return \"84\"\n    if x == 85:\n        return \"85\"\n    if x == 86:\n        return \"86\"\n    if x == 87:\n        return \"87\"\n    if x == 88:\n        return \"88\"\n    if x == 89:\n        return \"89\"\n    if x == 90:\n        return \"90\"\n    if x == 91:\n        return \"91\"\n    if x == 92:\n        return \"92\"\n    if x == 93:\n        return \"93\"\n    if x == 94:\n        return \"94\"\n    if x == 95:\n        return \"95\"\n    if x == 96:\n        return \"96\"\n    if x == 97:\n        return \"97\"\n    if x == 98:\n        return \"98\"\n    if x == 99:\n        return \"99\"\n    if x == 100:\n        return \"100\"\n    if x == 101:\n        return \"101\"\n    if x == 102:\n        return \"102\"\n    if x == 103:\n        return \"103\"\n    if x == 104:\n        return \"104\"\n    if x == 105:\n        return \"105\"\n    if x == 106:\n        return \"106\"\n    if x == 107:\n        return \"107\"\n    if x == 108:\n        return \"108\"\n    if x == 109:\n        return \"109\"\n    if x == 110:\n        return \"110\"\n    if x == 111:\n        return \"111\"\n    if x == 112:\n        return \"112\"\n    if x == 113:\n        return \"113\"\n    if x == 114:\n        return \"114\"\n    if x == 115:\n        return \"115\"\n    if x == 116:\n        return \"116\"\n    if x == 117:\n        return \"117\"\n    if x == 118:\n        return \"118\"\n    if x == 119:\n        return \"119\"\n    if x == 120:\n        return \"120\"\n    if x == 121:\n        return \"121\"\n    if x == 122:\n        return \"122\"\n    if x == 123:\n        return \"123\"\n    if x == 124:\n        return \"124\"\n    if x == 125:\n        return \"125\"\n    if x == 126:\n        return \"126\"\n    if x == 127:\n        return \"127\"\n    if x == 128:\n        return \"128\"\n    if x == 129:\n        return \"129\"\n    if x == 130:\n        return \"130\"\n    if x == 131:\n        return \"131\"\n    if x == 132:\n        return \"132\"\n    if x == 133:\n        return \"133\"\n    if x == 134:\n        return \"134\"\n    if x == 135:\n        return \"135\"\n    if x == 136:\n        return \"136\"\n    ",
        "test": "",
        "num_ids": 1792,
        "indeed": false
    },
    {
        "number": 4586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 100 == 0:\n        return \"Yes\"\n    if n % 1000 == 0:\n        return \"No\"\n    if n % 100 == 0 and n % 1000!= 0:\n        return \"No\"\n    if n % 100 == 0 and n % 1000 == 0:\n        return \"Yes\"\n    return \"No\"\n\ndef",
        "test": "",
        "num_ids": 91,
        "indeed": false
    },
    {
        "number": 4587,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    if N < 1 or N > 10**5:\n        return \"0\"\n    if A < 1 or A > 10**9:\n        return \"0\"\n    if B < 1 or B > 10**9:\n        return \"0\"\n    if C < 1 or C > 10**9:\n        return \"0\"\n    if A + B + C > N:\n        return \"0\"\n    if A + B + C == N:\n        return \"1\"\n    if A + B + C == N + 1:\n        return \"2\"\n    if A + B + C == N + 2:\n        return \"3\"\n    if A + B + C == N + 3:\n        return \"4\"\n    if A + B + C == N + 4:\n        return \"5\"\n    if A + B + C == N + 5:\n        return \"6\"\n    if A + B + C == N + 6:\n        return \"7\"\n    if A + B + C == N + 7:\n        return \"8\"\n    if A + B + C == N + 8:\n        return \"9\"\n    if A + B + C == N + 9:\n        return \"10\"\n    if A + B + C == N + 10:\n        return \"11\"\n    if A + B + C == N + 11:\n        return \"12\"\n    if A + B + C == N + 12:\n        return \"13\"\n    if A + B + C == N + 13:\n        return \"14\"\n    if A + B + C == N + 14:\n        return \"15\"\n    if A + B + C == N + 15:\n        return \"16\"\n    if A + B + C == N + 16:\n        return \"17\"\n    if A + B + C == N + 17:\n        return \"18\"\n    if A + B + C == N + 18:\n        return \"19\"\n    if A + B + C == N + 19:\n        return \"20\"\n    if A + B + C == N + 20:\n        return \"21\"\n    if A + B + C == N + 21:\n        return \"22\"\n    if A + B + C == N + 22:\n        return \"23\"\n    if A + B + C == N + 23:\n        return \"24\"\n    if A + B + C == N + 24:\n        return \"25\"\n    if A + B + C == N + 25:\n        return \"26\"\n    if A + B + C == N + 26:\n        return \"27\"\n    if A + B + C == N + 27:\n        return \"28\"\n    if A + B + C == N + 28:\n        return \"29\"\n    if A + B + C == N + 29:\n        return \"30\"\n    if A + B + C == N + 30:\n        return \"31\"\n    if A + B + C == N + 31:\n        return \"32\"\n    if A + B + C == N + 32:\n        return \"33\"\n    if A + B + C == N + 33:\n        return \"34\"\n    if A + B + C == N + 34:\n        return \"35\"\n    if A + B + C == N + 35:\n        return \"36\"\n    if A + B + C == N + 36:\n        return \"37\"\n    if A + B + C == N + 37:\n        return \"38\"\n    if A + B + C == N + 38:\n        return \"39\"\n    if A + B + C == N + 39:\n        return \"40\"\n    if A + B + C == N + 40:\n        return \"41\"\n    if A + B + C == N + 41:\n        return \"42\"\n    if A + B + C == N + 42:\n        return \"43\"\n    if A + B + C == N + 43:\n        return \"44\"\n    if A + B + C == N + 44:\n        return \"45\"\n    if A + B + C == N + 45:\n        return \"46\"\n    if A + B + C == N + 46:\n        return \"47\"\n    if A + B + C == N + 47:\n        return \"48\"\n    if A + B + C == N + 48:\n        return \"49\"\n    if A + B + C == N + 49:\n        return \"50\"\n    if A + B + C == N + 50:\n        return \"51\"\n    if A + B + C == N + 51:\n        return \"52\"\n    if A + B + C == N + 52:\n        return \"53\"\n    if A + B + C == N + 53:\n        return \"54\"\n    if A + B + C == N + 54:\n        return \"55\"\n    if A + B + C == N + 55:\n        return \"56\"\n    if A + B + C == N + 56:\n        return \"57\"\n    if A + B + C == N + 57:\n        return \"58\"\n    if A + B + C == N + 58:\n        return \"59\"\n    if A + B + C == N + 59:\n        return \"60\"\n    if A + B + C == N + 60:\n        return \"61\"\n    if A + B + C == N + 61:\n        return \"62\"\n    if A + B + C == N + 62:\n        return \"63\"\n    if A + B + C == N + 63:\n        return \"64\"\n    if A + B + C == N + 64:\n        return \"65\"\n    if A + B + C == N + 65:\n        return \"66\"\n    if A + B + C == N + 66:\n        return \"67\"\n    if A + B + C == N + 67:\n        return \"68\"\n    if A + B + C == N + 68:\n        return \"69\"\n    if A + B + C == N + 69:\n        return \"70\"\n    if A + B + C == N + 70:\n        return \"71\"\n    if A + B + C == N + 71:\n        return \"72\"\n    if A + B + C == N + 72:\n        return \"73\"\n    if A + B + C == N + 73:\n        return \"74\"\n    if A + B + C == N + 74:\n        return \"75\"\n    if A + B + C == N + 75:\n        return \"76\"\n    if A + B + C ==",
        "test": "",
        "num_ids": 1563,
        "indeed": false
    },
    {
        "number": 4588,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x > y:\n        print('>')\n    elif x == y:\n        print('=')\n    else:\n        print('<')\n    return ''\n\n-----Sample Output-----\n<\n\n10 < 11.\ndef",
        "test": "",
        "num_ids": 72,
        "indeed": false
    },
    {
        "number": 4589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    S_1 = stdin.split()\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i) for i in S_1]\n    S_1 = [list(i)",
        "test": "",
        "num_ids": 1585,
        "indeed": false
    },
    {
        "number": 4590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    A_i = 0\n    B_i = 0\n    while A_i < N:\n        A_i += 1\n        while B_i < M:\n            B_i += 1\n            if A[A_i] == B[B_i]:\n                A_i += 1\n                B_i += 1\n            else:\n                break\n    return str(len(A) - A_i)\n",
        "test": "",
        "num_ids": 147,
        "indeed": false
    },
    {
        "number": 4591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    if A + B + C > X + Y:\n        return str(A + B + C - X - Y)\n    else:\n        return str(A + B + C - X - Y) + \"Y\"\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 78,
        "indeed": false
    },
    {
        "number": 4592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = [1]\n    for i in range(2, n+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n    return str(len(divisors))\n\ndef",
        "test": "",
        "num_ids": 76,
        "indeed": false
    },
    {
        "number": 4593,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X < 1:\n        return \"0\"\n    if X == 1:\n        return \"1\"\n    if X == 2:\n        return \"2\"\n    if X == 3:\n        return \"3\"\n    if X == 4:\n        return \"4\"\n    if X == 5:\n        return \"5\"\n    if X == 6:\n        return \"6\"\n    if X == 7:\n        return \"7\"\n    if X == 8:\n        return \"8\"\n    if X == 9:\n        return \"9\"\n    if X % 2 == 0:\n        return \"2\"\n    if X % 3 == 0:\n        return \"3\"\n    if X % 4 == 0:\n        return \"4\"\n    if X % 5 == 0:\n        return \"5\"\n    if X % 6 == 0:\n        return \"6\"\n    if X % 7 == 0:\n        return \"7\"\n    if X % 8 == 0:\n        return \"8\"\n    if X % 9 == 0:\n        return \"9\"\n    if X % 10 == 0:\n        return \"10\"\n    return \"0\"\n",
        "test": "",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 4594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, d_1, d_N = map(int, stdin.split())\n    if N < 1 or N > 100:\n        return \"Error\"\n    if d_1 < 1 or d_1 > 100:\n        return \"Error\"\n    if d_N < 1 or d_N > 100:\n        return \"Error\"\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return \"2\"\n    if N == 3:\n        return \"3\"\n    if N == 4:\n        return \"4\"\n    if N == 5:\n        return \"5\"\n    if N == 6:\n        return \"6\"\n    if N == 7:\n        return \"7\"\n    if N == 8:\n        return \"8\"\n    if N == 9:\n        return \"9\"\n    if N == 10:\n        return \"10\"\n    if N == 11:\n        return \"11\"\n    if N == 12:\n        return \"12\"\n    if N == 13:\n        return \"13\"\n    if N == 14:\n        return \"14\"\n    if N == 15:\n        return \"15\"\n    if N == 16:\n        return \"16\"\n    if N == 17:\n        return \"17\"\n    if N == 18:\n        return \"18\"\n    if N == 19:\n        return \"19\"\n    if N == 20:\n        return \"20\"\n    if N == 21:\n        return \"21\"\n    if N == 22:\n        return \"22\"\n    if N == 23:\n        return \"23\"\n    if N == 24:\n        return \"24\"\n    if N == 25:\n        return \"25\"\n    if N == 26:\n        return \"26\"\n    if N == 27:\n        return \"27\"\n    if N == 28:\n        return \"28\"\n    if N == 29:\n        return \"29\"\n    if N == 30:\n        return \"30\"\n    if N == 31:\n        return \"31\"\n    if N == 32:\n        return \"32\"\n    if N == 33:\n        return \"33\"\n    if N == 34:\n        return \"34\"\n    if N == 35:\n        return \"35\"\n    if N == 36:\n        return \"36\"\n    if N == 37:\n        return \"37\"\n    if N == 38:\n        return \"38\"\n    if N == 39:\n        return \"39\"\n    if N == 40:\n        return \"40\"\n    if N == 41:\n        return \"41\"\n    if N == 42:\n        return \"42\"\n    if N == 43:\n        return \"43\"\n    if N == 44:\n        return \"44\"\n    if N == 45:\n        return \"45\"\n    if N == 46:\n        return \"46\"\n    if N == 47:\n        return \"47\"\n    if N == 48:\n        return \"48\"\n    if N == 49:\n        return \"49\"\n    if N == 50:\n        return \"50\"\n    if N == 51:\n        return \"51\"\n    if N == 52:\n        return \"52\"\n    if N == 53:\n        return \"53\"\n    if N == 54:\n        return \"54\"\n    if N == 55:\n        return \"55\"\n    if N == 56:\n        return \"56\"\n    if N == 57:\n        return \"57\"\n    if N == 58:\n        return \"58\"\n    if N == 59:\n        return \"59\"\n    if N == 60:\n        return \"60\"\n    if N == 61:\n        return \"61\"\n    if N == 62:\n        return \"62\"\n    if N == 63:\n        return \"63\"\n    if N == 64:\n        return \"64\"\n    if N == 65:\n        return \"65\"\n    if N == 66:\n        return \"66\"\n    if N == 67:\n        return \"67\"\n    if N == 68:\n        return \"68\"\n    if N == 69:\n        return \"69\"\n    if N == 70:\n        return \"70\"\n    if N == 71:\n        return \"71\"\n    if N == 72:\n        return \"72\"\n    if N == 73:\n        return \"73\"\n    if N == 74:\n        return \"74\"\n    if N == 75:\n        return \"75\"\n    if N == 76:\n        return \"76\"\n    if N == 77:\n        return \"77\"\n    if N == 78:\n        return \"78\"\n    if N == 79:\n        return \"79\"\n    if N == 80:\n        return \"80\"\n    if N == 81:\n        return \"81\"\n    if N == 82:\n        return \"82\"\n    if N == 83:\n        return \"83\"\n    if N == 84:\n        return \"84\"\n    if N == 85:\n        return \"85\"\n    if N == 86:\n        return \"86\"\n    if N == 87:\n        return \"87\"\n    if N == 88:\n        return \"88\"\n    if N == 89:\n        return \"89\"\n    if N == 90:\n        return \"90\"\n    if N == 91:\n        return \"91\"\n    if N == 92:\n        return \"92\"\n    if N == 93:\n        return \"93\"\n    if N == 94:\n        return \"94\"\n    if N == 95:\n        return \"95\"\n    if N == 96:\n        return \"96\"\n    if N == 97:\n        return \"97\"\n    if N == 98:\n        return \"98\"\n    if N == 99:\n        return \"99\"\n    if N == 100:\n        return \"100\"\n    if N == 101:\n        return \"101\"\n    if N == 102:\n        return \"102\"\n    if N == 103:\n        return \"103\"\n    if N == 104:\n        return \"104\"\n    if N == 105:\n        return \"105\"\n    if N == 106:\n        return \"106\"\n    if N == 107:\n        return \"107\"\n    if N == 108:\n        return \"108\"\n    if N == 109:\n        return \"109\"\n    if N == 110:\n        return \"110\"\n    if N == 111:\n        return \"111\"\n    if N == 112:\n        return \"112\"\n    if N == 113:\n        return \"113\"\n    if N == 114:\n        return \"114\"\n    if N == 115:\n        return \"115\"\n    if N == 116:\n        return \"116\"\n    if N == 117:\n        return \"117\"\n    if N == 118:\n        return \"118\"\n    if N == 119:\n        return \"119\"\n    if N == 120:\n        return \"120\"\n    if N == 121:\n        return \"121\"\n    if N == 122:\n        return \"122\"\n    if N == 123:\n        return \"123\"\n    if N == 124:\n        return \"",
        "test": "",
        "num_ids": 1690,
        "indeed": false
    },
    {
        "number": 4595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    if len(s) == 1:\n        return len(s[0])\n    else:\n        return len(s[0]) - len(s[1])\n",
        "test": "",
        "num_ids": 49,
        "indeed": false
    },
    {
        "number": 4596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"2\"\n    else:\n        return \"1\"\n\ndef",
        "test": "",
        "num_ids": 37,
        "indeed": false
    },
    {
        "number": 4597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    power = 1\n    for i in range(1, N+1):\n        power *= i\n    return str(power % 10**9+7)\n",
        "test": "",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4598,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    candy = [0] * N\n    for i in range(N):\n        candy[i] = int(stdin.strip())\n    candy.sort()\n    return str(len(candy)) +'' + str(candy[0]) +'' + str(candy[-1])\n\ndef",
        "test": "",
        "num_ids": 86,
        "indeed": false
    },
    {
        "number": 4599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a_1 = int(stdin.strip())\n    a_2 = int(stdin.strip())\n    a_3 = int(stdin.strip())\n    a_1_sum = a_1\n    a_2_sum = a_2\n    a_3_sum = a_3\n    for i in range(N):\n        a_1_sum += int(stdin.strip())\n        a_2_sum += int(stdin.strip())\n        a_3_sum += int(stdin.strip())\n    a_1_sum -= a_1\n    a_2_sum -= a_2\n    a_3_sum -= a_3\n    if a_1_sum > a_2_sum and a_1_sum > a_3_sum:\n        return str(a_1_sum - a_2_sum - a_3_sum)\n    elif a_2_sum > a_1_sum and a_2_sum > a_3_sum:\n        return str(a_2_sum - a_1_sum - a_3_sum)\n    else:\n        return str(a_3_sum - a_2_sum - a_1_sum)\n\nprint(solution(\"2 3 1\"))\nprint(solution(\"2 3 2\"))\nprint(solution(\"2 3 3\"))\nprint(solution(\"2 3 4\"))\nprint(solution(\"2 3 5\"))\nprint(solution(\"2 3 6\"))\nprint(solution(\"2 3 7\"))\nprint(solution(\"2 3 8\"))\nprint(solution(\"2 3 9\"))\nprint(solution(\"2 3 10\"))\nprint(solution(\"2 3 11\"))\nprint(solution(\"2 3 12\"))\nprint(solution(\"2 3 13\"))\nprint(solution(\"2 3 14\"))\nprint(solution(\"2 3 15\"))\nprint(solution(\"2 3 16\"))\nprint(solution(\"2 3 17\"))\nprint(solution(\"2 3 18\"))\nprint(solution(\"2 3 19\"))\nprint(solution(\"2 3 20\"))\nprint(solution(\"2 3 21\"))\nprint(solution(\"2 3 22\"))\nprint(solution(\"2 3 23\"))\nprint(solution(\"2 3 24\"))\nprint(solution(\"2 3 25\"))\nprint(solution(\"2 3 26\"))\nprint(solution(\"2 3 27\"))\nprint(solution(\"2 3 28\"))\nprint(solution(\"2 3 29\"))\nprint(solution(\"2 3 30\"))\nprint(solution(\"2 3 31\"))\nprint(solution(\"2 3 32\"))\nprint(solution(\"2 3 33\"))\nprint(solution(\"2 3 34\"))\nprint(solution(\"2 3 35\"))\nprint(solution(\"2 3 36\"))\nprint(solution(\"2 3 37\"))\nprint(solution(\"2 3 38\"))\nprint(solution(\"2 3 39\"))\nprint(solution(\"2 3 40\"))\nprint(solution(\"2 3 41\"))\nprint(solution(\"2 3 42\"))\nprint(solution(\"2 3 43\"))\nprint(solution(\"2 3 44\"))\nprint(solution(\"2 3 45\"))\nprint(solution(\"2 3 46\"))\nprint(solution(\"2 3 47\"))\nprint(solution(\"2 3 48\"))\nprint(solution(\"2 3 49\"))\nprint(solution(\"2 3 50\"))\nprint(solution(\"2 3 51\"))\nprint(solution(\"2 3 52\"))\nprint(solution(\"2 3 53\"))\nprint(solution(\"2 3 54\"))\nprint(solution(\"2 3 55\"))\nprint(solution(\"2 3 56\"))\nprint(solution(\"2 3 57\"))\nprint(solution(\"2 3 58\"))\nprint(solution(\"2 3 59\"))\nprint(solution(\"2 3 60\"))\nprint(solution(\"2 3 61\"))\nprint(solution(\"2 3 62\"))\nprint(solution(\"2 3 63\"))\nprint(solution(\"2 3 64\"))\nprint(solution(\"2 3 65\"))\nprint(solution(\"2 3 66\"))\nprint(solution(\"2 3 67\"))\nprint(solution(\"2 3 68\"))\nprint(solution(\"2 3 69\"))\nprint(solution(\"2 3 70\"))\nprint(solution(\"2 3 71\"))\nprint(solution(\"2 3 72\"))\nprint(solution(\"2 3 73\"))\nprint(solution(\"2 3 74\"))\nprint(solution(\"2 3 75\"))\nprint(solution(\"2 3 76\"))\nprint(solution(\"2 3 77\"))\nprint(solution(\"2 3 78\"))\nprint(solution(\"2 3 79\"))\nprint(solution(\"2 3 80\"))\nprint(solution(\"2 3 81\"))\nprint(solution(\"2 3 82\"))\nprint(solution(\"2 3 83\"))\nprint(solution(\"2 3 84\"))\nprint(solution(\"2 3 85\"))\nprint(solution(\"2 3 86\"))\nprint(solution(\"2 3 87\"))\nprint(solution(\"2 3 88\"))\nprint(solution(\"2 3 89\"))\nprint(solution(\"2 3 90\"))\nprint(solution(\"2 3 91\"))\nprint(solution(\"2 3 92\"))\nprint(solution(\"2 3 93\"))\nprint(solution(\"2 3 94\"))\nprint(solution(\"2 3 95\"))\nprint(solution(\"2 3 96\"))\nprint(solution(\"2 3 97\"))\nprint(solution(\"2 3 98\"))\nprint(solution(\"2 3 99\"))\nprint(solution(\"2 3 100\"))\nprint(solution(\"2 3 101\"))\nprint(solution(\"2 3 102\"))\nprint(solution(\"2 3 103\"))\nprint(solution(\"2 3 104\"))\nprint(solution(\"2 3 105\"))\nprint(solution(\"2 3 106\"))\nprint(solution(\"2 3 107\"))\nprint(solution(\"2 3 108\"))\nprint(solution(\"2 3 109\"))\nprint(solution(\"2 3 110\"))\nprint(solution(\"2 3 111\"))\nprint(solution(\"2 3 112\"))\nprint(solution(\"2 3 113\"))\nprint(solution(\"2 3 114\"))\nprint(solution(\"2 3 115\"))\nprint(solution(\"2 3 116\"))\nprint(solution(\"2 3 117\"))\nprint(solution(\"2 3 118\"))\nprint(solution(\"2 3 119\"))\nprint(solution(\"2 3 120\"))\nprint(solution(\"2 3 121\"))\nprint(solution(\"2 3 122\"))\nprint(solution(\"2 3 123\"))\nprint(solution(\"2 3 124\"))\nprint(solution(\"2 3 125\"))\nprint(solution(\"2 3 126\"))\nprint(solution(\"2 3 127\"))\nprint(solution(\"2 3 128\"))\nprint(solution(\"2 3 129\"))\nprint(solution(\"2 3 130\"))\nprint(solution(\"2 3 131\"))\nprint(solution(\"2 3 132\"))\nprint(solution(\"2 3 133\"))\nprint(solution(\"2 3 134\"))\nprint(solution(\"2 3 135\"))\nprint(solution(\"2 3 136\"))\nprint(solution(\"2 3 137\"))\nprint(solution(\"2 3 138\"))\nprint(solution(\"2 3 139\"))\nprint(solution(\"2 3 140\"))\nprint(solution(\"2 3 141\"))\nprint(solution(\"2 3 142\"))\nprint(solution(\"2 3 143\"))\nprint(solution(\"2 3 144\"))\nprint(solution(\"2 3 145\"))\nprint(solution(\"2 3 146\"))\nprint(solution",
        "test": "",
        "num_ids": 1764,
        "indeed": false
    },
    {
        "number": 4600,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, p_1, p_2 = map(int, stdin.split())\n    if N == 0 or M == 0 or p_1 == 0 or p_2 == 0:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    if p_1 > p_2:\n        return \"0\"\n    if p_1 < p_2:\n        return \"0\"\n    if p_1 == p_2:\n        return \"0\"\n    ",
        "test": "",
        "num_ids": 1652,
        "indeed": false
    },
    {
        "number": 4601,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    H_1, H_2, H_3 = map(int, stdin.split())\n    H_1 -= 1\n    H_2 -= 1\n    H_3 -= 1\n    H_1 += 1\n    H_2 += 1\n    H_3 += 1\n    H_1 = min(H_1, H_2, H_3)\n    H_2 = min(H_1, H_3)\n    H_3 = min(H_1, H_2)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_3)\n    H_3 = max(H_1, H_2)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max(H_1, H_2)\n    H_3 = max(H_1, H_2, H_3)\n    H_1 = max(H_1, H_2, H_3)\n    H_2 = max",
        "test": "",
        "num_ids": 1723,
        "indeed": false
    },
    {
        "number": 4602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x_1, x_2, x_3, x_4 = map(int, stdin.split())\n    ball_list = [x_1, x_2, x_3, x_4]\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball_list.sort()\n    ball_list.append(ball_list[-1] + K)\n    ball",
        "test": "",
        "num_ids": 1472,
        "indeed": false
    },
    {
        "number": 4603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A > B:\n        if C > D:\n            return str(C + D)\n        else:\n            return str(C)\n    else:\n        if B > C:\n            return str(B + C)\n        else:\n            return str(B)\n",
        "test": "",
        "num_ids": 85,
        "indeed": false
    },
    {
        "number": 4604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    A.sort()\n    A_left = A[0]\n    A_right = A[-1]\n    A_diff = abs(A_left - A_right)\n    A_diff_mod = A_diff % 10**9 + 7\n    A_diff_mod_mod = A_diff_mod % 10**9 + 7\n    A_diff_mod_mod_mod = A_diff_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod = A_diff_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7\n    A_diff_mod_mod_mod_mod_mod_mod = A_diff_mod_mod_mod_mod_mod % 10**9 + 7",
        "test": "",
        "num_ids": 1710,
        "indeed": false
    },
    {
        "number": 4605,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n < a or n < b:\n        return '0'\n    if a < b:\n        return '0'\n    if a == b:\n        return str(a)\n    if a > b:\n        return str(a) + '0' + str(b)\n    if a > n:\n        return str(a) + '0' + str(n)\n    if a < n:\n        return str(a) + '0' + str(n) + '0' + str(b)\n    if a < n < b:\n        return str(a) + '0' + str(n) + '0' + str(b)\n    if a < n < b < n:\n        return str(a) + '0' + str(n) + '0' + str(b)\n    if a < n < b < n < b:\n        return str(a) + '0' + str(n) + '0' + str(b) + '0' + str(n)\n    if a < n < b < n < b < n:\n        return str(a) + '0' + str(n) + '0' + str(b) + '0' + str(n) + '0' + str(b)\n    if a < n < b < n < b < n < b:\n        return str(a) + '0' + str(n) + '0' + str(b) + '0' + str(n) + '0' + str(b) + '0' + str(n)\n    if a < n < b < n < b < n < b < n:\n        return str(a) + '0' + str(n) + '0' + str(b) + '0' + str(n) + '0' + str(b) + '0' + str(n) + '0' + str(b)\n    if a < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n < b < n <",
        "test": "",
        "num_ids": 1834,
        "indeed": false
    },
    {
        "number": 4606,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + 1)\n",
        "test": "",
        "num_ids": 14,
        "indeed": false
    },
    {
        "number": 4607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    if a % b == 0:\n        return str(a//b) + \"-\" + str(a%b)\n    else:\n        return str(a//b) + \"-\" + str(a%b) + \"-\" + str(a//b)\n\ndef",
        "test": "",
        "num_ids": 95,
        "indeed": false
    },
    {
        "number": 4608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a_1 = int(stdin.strip().split()[1])\n    a_2 = int(stdin.strip().split()[2])\n    a_N = int(stdin.strip().split()[3])\n    \n    if a_1 == a_2:\n        return -1\n    \n    if a_1 == a_N:\n        return a_1\n    \n    if a_2 == a_N:\n        return a_2\n    \n    if a_1 < a_2:\n        return a_1\n    \n    if a_1 > a_2:\n        return a_2\n    \n    return a_1\n\n-----Sample Output-----\n2\n\nPress Button 1, then Button 3.\ndef",
        "test": "",
        "num_ids": 187,
        "indeed": false
    },
    {
        "number": 4609,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A_1, A_N = map(int, stdin.split())\n    A_1 = list(map(int, A_1.split()))\n    A_N = list(map(int, A_N.split()))\n    A_N.sort()\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N.sort()\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    A_N = A_N[::-1]\n    A_N = A_N[:N]\n    ",
        "test": "",
        "num_ids": 1724,
        "indeed": false
    },
    {
        "number": 4610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    answer = 0\n    for i in range(N):\n        answer += A[i] * (K - 1)\n    return str(answer)\n",
        "test": "",
        "num_ids": 73,
        "indeed": false
    },
    {
        "number": 4611,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, t_1, t_2, t_N = map(int, stdin.split())\n    x_1, y_1 = map(int, stdin.split())\n    x_2, y_2 = map(int, stdin.split())\n    x_N, y_N = map(int, stdin.split())\n    t_N = t_N + 1\n    x_1 = x_1 - 1\n    y_1 = y_1 - 1\n    x_2 = x_2 - 1\n    y_2 = y_2 - 1\n    x_N = x_N - 1\n    y_N = y_N - 1\n    if t_1 < t_N:\n        t_1 = t_1 + 1\n    if t_2 < t_N:\n        t_2 = t_2 + 1\n    if t_N < t_1 + t_2:\n        return \"Yes\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_2 < t_1 + t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n    if t_1 < t_2:\n        return \"No\"\n",
        "test": "",
        "num_ids": 1657,
        "indeed": false
    },
    {
        "number": 4612,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = round(a/b)\n    return str(x)\n\ndef",
        "test": "",
        "num_ids": 35,
        "indeed": false
    },
    {
        "number": 4613,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    edges = []\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        edges.append((a, b))\n    edges.sort()\n    visited = [False] * N\n    visited[0] = True\n    count = 0\n    for i in range(N):\n        if not visited[i]:\n            count += 1\n            for j in range(i+1, N):\n                if not visited[j]:\n                    count += 1\n                    visited[j] = True\n                    break\n    return str(count)\n\n-----Sample Output-----\n4\n\nThe figure below shows the given graph:\nThe edges shown in red are bridges. There are four of them.\ndef",
        "test": "",
        "num_ids": 189,
        "indeed": false
    },
    {
        "number": 4614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B and B == C:\n        return str(A)\n    if A == B or B == C:\n        return str(A)\n    if A == B or B == C:\n        return str(B)\n    if A == B or B == C:\n        return str(C)\n    return str(A)\n\ndef",
        "test": "",
        "num_ids": 99,
        "indeed": false
    },
    {
        "number": 4615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n    if A + B > F:\n        return '0'\n    elif A + C > F:\n        return '0'\n    elif A + D > F:\n        return '0'\n    elif A + E > F:\n        return '0'\n    elif A + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B + C + D + E + F > F:\n        return '0'\n    elif A + B",
        "test": "",
        "num_ids": 1477,
        "indeed": false
    },
    {
        "number": 4616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    s = s.lower()\n    s = s.split()\n    s = [i for i in s if i!= '']\n    s = ''.join(s)\n    s = s.replace('i', 'i18n')\n    return s\n",
        "test": "",
        "num_ids": 71,
        "indeed": false
    },
    {
        "number": 4617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    grid = []\n    for i in range(n):\n        grid.append(stdin.strip().split(' '))\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):",
        "test": "",
        "num_ids": 1834,
        "indeed": false
    },
    {
        "number": 4618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    K = int(s[0])\n    n = len(s)\n    if n < K:\n        return ''\n    if n == K:\n        return s[K-1]\n    for i in range(K, n):\n        if s[i] > s[i-1]:\n            return s[i]\n    return s[K-1]\n\n-----Sample Output-----\nSample Input:\naba\n4\nSample Output:\nb\n\ns has five substrings: a, b, ab, ba and aba.\nAmong them, we should print the fourth smallest one, b.\nNote that we do not count a twice.\ndef",
        "test": "",
        "num_ids": 160,
        "indeed": false
    },
    {
        "number": 4619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, H, N = map(int, stdin.split())\n    x_1, y_1 = map(int, stdin.split())\n    x_2, y_2 = map(int, stdin.split())\n    a_1 = 1\n    a_2 = 4\n    x_N, y_N = map(int, stdin.split())\n    x_N = x_N - x_1\n    y_N = y_N - y_1\n    x_N = x_N * 2\n    y_N = y_N * 2\n    x_N = x_N + x_2\n    y_N = y_N + y_2\n    area = (x_N * y_N) - (a_1 * a_2)\n    print(area)\n    return str(area)\n\n-----Sample Output-----\n5 4 2\n2 1 1\n3 3 4\n\n-----Constraints-----\n - 1 \u2266 W, H \u2266 100\n - 1 \u2266 N \u2266 100\n - 0 \u2266 x_i \u2266 W (1 \u2266 i \u2266 N)\n - 0 \u2266 y_i \u2266 H (1 \u2266 i \u2266 N)\n - W, H (21:32, added), x_i and y_i are integers.\n - a_i (1 \u2266 i \u2266 N) is 1, 2, 3 or 4.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nW H N\nx_1 y_1 a_1\nx_2 y_2 a_2\n:\nx_N y_N a_N\n\n-----Output-----\nPrint the area of the white region within the rectangle after Snuke finished painting.\n\n-----Sample Input-----\n5 4 2\n2 1 1\n3 3 4\n\n-----Sample Output-----\n9\n\nThe figure below shows the rectangle before Snuke starts painting.\nFirst, as (x_1, y_1) = (2, 1) and a_1 = 1, he paints the region satisfying x < 2 within the rectangle:\nThen, as (x_2, y_2) = (3, 3) and a_2 = 4, he paints the region satisfying y > 3 within the rectangle:\nNow, the area of the white region within the rectangle is 9.\ndef",
        "test": "",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 4620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, C_1, S_1, F_1 = map(int, stdin.split())\n    C_i = C_1\n    S_i = S_1\n    F_i = F_1\n    for i in range(N):\n        C_i = C_i % F_1\n        S_i = S_i % F_1\n        F_i = F_i % C_1\n        if C_i == 0:\n            break\n        if S_i == 0:\n            break\n        if F_i == 0:\n            break\n        if S_i % F_i == 0:\n            break\n    print(S_i)\n    return str(S_i)\n\n-----Sample Output-----\n3\n6 5 1\n1 10 1\n\n-----Sample Input-----\n3\n6 5 1\n1 10 1\n\n-----Sample Output-----\n0\n0\n\nWe will travel from Station 1 as follows:\n - 5 seconds after the beginning: take the train to Station 2.\n - 11 seconds: arrive at Station 2.\n - 11 seconds: take the train to Station 3.\n - 12 seconds: arrive at Station 3.\nWe will travel from Station 2 as follows:\n - 10 seconds: take the train to Station 3.\n - 11 seconds: arrive at Station 3.\nNote that we should print 0 for Station 3.\ndef",
        "test": "",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 4621,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_height(s):\n        return len(s) // 2\n\n    def get_width(s):\n        return len(s) // 2\n\n    def get_char(s):\n        return s[0]\n\n    def get_char_count(s):\n        return len(s)\n\n    def get_char_count_2(s):\n        return len(s) // 2\n\n    def get_char_count_3(s):\n        return len(s) // 3\n\n    def get_char_count_4(s):\n        return len(s) // 4\n\n    def get_char_count_5(s):\n        return len(s) // 5\n\n    def get_char_count_6(s):\n        return len(s) // 6\n\n    def get_char_count_7(s):\n        return len(s) // 7\n\n    def get_char_count_8(s):\n        return len(s) // 8\n\n    def get_char_count_9(s):\n        return len(s) // 9\n\n    def get_char_count_10(s):\n        return len(s) // 10\n\n    def get_char_count_11(s):\n        return len(s) // 11\n\n    def get_char_count_12(s):\n        return len(s) // 12\n\n    def get_char_count_13(s):\n        return len(s) // 13\n\n    def get_char_count_14(s):\n        return len(s) // 14\n\n    def get_char_count_15(s):\n        return len(s) // 15\n\n    def get_char_count_16(s):\n        return len(s) // 16\n\n    def get_char_count_17(s):\n        return len(s) // 17\n\n    def get_char_count_18(s):\n        return len(s) // 18\n\n    def get_char_count_19(s):\n        return len(s) // 19\n\n    def get_char_count_20(s):\n        return len(s) // 20\n\n    def get_char_count_21(s):\n        return len(s) // 21\n\n    def get_char_count_22(s):\n        return len(s) // 22\n\n    def get_char_count_23(s):\n        return len(s) // 23\n\n    def get_char_count_24(s):\n        return len(s) // 24\n\n    def get_char_count_25(s):\n        return len(s) // 25\n\n    def get_char_count_26(s):\n        return len(s) // 26\n\n    def get_char_count_27(s):\n        return len(s) // 27\n\n    def get_char_count_28(s):\n        return len(s) // 28\n\n    def get_char_count_29(s):\n        return len(s) // 29\n\n    def get_char_count_30(s):\n        return len(s) // 30\n\n    def get_char_count_31(s):\n        return len(s) // 31\n\n    def get_char_count_32(s):\n        return len(s) // 32\n\n    def get_char_count_33(s):\n        return len(s) // 33\n\n    def get_char_count_34(s):\n        return len(s) // 34\n\n    def get_char_count_35(s):\n        return len(s) // 35\n\n    def get_char_count_36(s):\n        return len(s) // 36\n\n    def get_char_count_37(s):\n        return len(s) // 37\n\n    def get_char_count_38(s):\n        return len(s) // 38\n\n    def get_char_count_39(s):\n        return len(s) // 39\n\n    def get_char_count_40(s):\n        return len(s) // 40\n\n    def get_char_count_41(s):\n        return len(s) // 41\n\n    def get_char_count_42(s):\n        return len(s) // 42\n\n    def get_char_count_43(s):\n        return len(s) // 43\n\n    def get_char_count_44(s):\n        return len(s) // 44\n\n    def get_char_count_45(s):\n        return len(s) // 45\n\n    def get_char_count_46(s):\n        return len(s) // 46\n\n    def get_char_count_47(s):\n        return len(s) // 47\n\n    def get_char_count_48(s):\n        return len(s) // 48\n\n    def get_char_count_49(s):\n        return len(s) // 49\n\n    def get_char_count_50(s):\n        return len(s) // 50\n\n    def get_char_count_51(s):\n        return len(s) // 51\n\n    def get_char_count_52(s):\n        return len(s) // 52\n\n    def get_char_count_53(s):\n        return len(s) // 53\n\n    def get_char_count_54(s):\n        return len(s) // 54\n\n    def get_char_count_55(s):\n        return len(s) // 55\n\n    def get_char_count_56(s):\n        return len(s) // 56\n\n    def get_char_count_57(s):\n        return len(s) // 57\n\n    def get_char_count_58(s):\n        return len(s) // 58\n\n    def get_char_count_59(s):\n        return len(s) // 59\n\n    def get_char_count_60(s):\n        return len(s) // 60\n\n    def get_char_count_61(s):\n        return len(s) // 61\n\n    def get_char_count_62(s):\n        return len(s) // 62\n\n    def get_char_count_63(s):\n        return len(s) // 63\n\n    def get_char_count_64(s):\n        return len(s) // 64\n\n    def get_char_count_65(s):\n        return len(s) // 65\n\n    def get_char_count_66(s):\n        return len(s) // 66\n\n    def get_char_count_67(s):\n        return len(s) // 67\n\n    def get_char_count_68(s):\n        return len(s) // 68\n\n    def get_char_count_69(s):\n        return len(s) // 69\n\n    def get_char_count_70(s):\n        return len(s) // 70\n\n    def get_char_count_71(s):\n        return len(s) // 71\n\n    def get_char_count_72(s):\n        return len(s) // 72\n\n    def get_char_count_73(s):\n        return len(s) // 73\n\n    def get_char_count_74(s):\n        return len(s) // 74\n\n    def get_char_count_75(s):\n        return len(s) // 75\n\n    def get_char_count_76(s):\n        return len(s) // 76\n\n    def get_char_count_77(s):\n        return len(s) // 77\n\n    def get_char_count_78(s):\n        return len(s) // 78\n\n    def get_char_count_79(s):\n        return len(s)",
        "test": "",
        "num_ids": 1784,
        "indeed": false
    },
    {
        "number": 4622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    if len(a) == 1:\n        return \"YES\"\n    if len(a) == 2:\n        return \"NO\"\n    if a[0] == a[1]:\n        return \"NO\"\n    if a[0] == a[2]:\n        return \"NO\"\n    if a[0] == a[3]:\n        return \"NO\"\n    if a[1] == a[2]:\n        return \"NO\"\n    if a[1] == a[3]:\n        return \"NO\"\n    if a[2] == a[3]:\n        return \"NO\"\n    return \"NO\"\n",
        "test": "",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 4623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    s = sum(w)\n    if s % k!= 0:\n        return '0'\n    if s == 0:\n        return '0'\n    if s == 1:\n        return '1'\n    if s == 2:\n        return '2'\n    if s == 3:\n        return '3'\n    if s == 4:\n        return '4'\n    if s == 5:\n        return '5'\n    if s == 6:\n        return '6'\n    if s == 7:\n        return '7'\n    if s == 8:\n        return '8'\n    if s == 9:\n        return '9'\n    if s == 10:\n        return '10'\n    if s == 11:\n        return '11'\n    if s == 12:\n        return '12'\n    if s == 13:\n        return '13'\n    if s == 14:\n        return '14'\n    if s == 15:\n        return '15'\n    if s == 16:\n        return '16'\n    if s == 17:\n        return '17'\n    if s == 18:\n        return '18'\n    if s == 19:\n        return '19'\n    if s == 20:\n        return '20'\n    if s == 21:\n        return '21'\n    if s == 22:\n        return '22'\n    if s == 23:\n        return '23'\n    if s == 24:\n        return '24'\n    if s == 25:\n        return '25'\n    if s == 26:\n        return '26'\n    if s == 27:\n        return '27'\n    if s == 28:\n        return '28'\n    if s == 29:\n        return '29'\n    if s == 30:\n        return '30'\n    if s == 31:\n        return '31'\n    if s == 32:\n        return '32'\n    if s == 33:\n        return '33'\n    if s == 34:\n        return '34'\n    if s == 35:\n        return '35'\n    if s == 36:\n        return '36'\n    if s == 37:\n        return '37'\n    if s == 38:\n        return '38'\n    if s == 39:\n        return '39'\n    if s == 40:\n        return '40'\n    if s == 41:\n        return '41'\n    if s == 42:\n        return '42'\n    if s == 43:\n        return '43'\n    if s == 44:\n        return '44'\n    if s == 45:\n        return '45'\n    if s == 46:\n        return '46'\n    if s == 47:\n        return '47'\n    if s == 48:\n        return '48'\n    if s == 49:\n        return '49'\n    if s == 50:\n        return '50'\n    if s == 51:\n        return '51'\n    if s == 52:\n        return '52'\n    if s == 53:\n        return '53'\n    if s == 54:\n        return '54'\n    if s == 55:\n        return '55'\n    if s == 56:\n        return '56'\n    if s == 57:\n        return '57'\n    if s == 58:\n        return '58'\n    if s == 59:\n        return '59'\n    if s == 60:\n        return '60'\n    if s == 61:\n        return '61'\n    if s == 62:\n        return '62'\n    if s == 63:\n        return '63'\n    if s == 64:\n        return '64'\n    if s == 65:\n        return '65'\n    if s == 66:\n        return '66'\n    if s == 67:\n        return '67'\n    if s == 68:\n        return '68'\n    if s == 69:\n        return '69'\n    if s == 70:\n        return '70'\n    if s == 71:\n        return '71'\n    if s == 72:\n        return '72'\n    if s == 73:\n        return '73'\n    if s == 74:\n        return '74'\n    if s == 75:\n        return '75'\n    if s == 76:\n        return '76'\n    if s == 77:\n        return '77'\n    if s == 78:\n        return '78'\n    if s == 79:\n        return '79'\n    if s == 80:\n        return '80'\n    if s == 81:\n        return '81'\n    if s == 82:\n        return '82'\n    if s == 83:\n        return '83'\n    if s == 84:\n        return '84'\n    if s == 85:\n        return '85'\n    if s == 86:\n        return '86'\n    if s == 87:\n        return '87'\n    if s == 88:\n        return '88'\n    if s == 89:\n        return '89'\n    if s == 90:\n        return '90'\n    if s == 91:\n        return '91'\n    if s == 92:\n        return '92'\n    if s == 93:\n        return '93'\n    if s == 94:\n        return '94'\n    if s == 95:\n        return '95'\n    if s == 96:",
        "test": "",
        "num_ids": 1310,
        "indeed": false
    },
    {
        "number": 4624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    apartments = [int(i) for i in stdin.split()]\n    apartments.sort()\n    floor = 0\n    for i in range(n):\n        floor += apartments[i]\n    floor += x\n    floor = floor % (floor + 1)\n    return str(floor)\n\n-----Constraints-----\n\n1 <= t <= 1000\n0 <= n <= 1000\n0 <= x <= 1000\n\n-----Time Limit: 1 second\n\n-----Space Limit: 1 GB\n\n-----Alternatives\n\n1. Use a stack to store the numbers of apartments on each floor.\n2. Use a queue to store the numbers of apartments on each floor.\n3. Use a stack to store the numbers of apartments on each floor.\n4. Use a queue to store the numbers of apartments on each floor.\n5. Use a stack to store the numbers of apartments on each floor.\n6. Use a queue to store the numbers of apartments on each floor.\n7. Use a stack to store the numbers of apartments on each floor.\n8. Use a queue to store the numbers of apartments on each floor.\n\n-----Submissions\n\nTime Limit: 1 second\n\nSpace Limit: 1 GB\n\nAlternatives\n\n1. Use a stack to store the numbers of apartments on each floor.\n2. Use a queue to store the numbers of apartments on each floor.\n3. Use a stack to store the numbers of apartments on each floor.\n4. Use a queue to store the numbers of apartments on each floor.\n5. Use a stack to store the numbers of apartments on each floor.\n6. Use a queue to store the numbers of apartments on each floor.\n7. Use a stack to store the numbers of apartments on each floor.\n8. Use a queue to store the numbers of apartments on each floor.\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 4625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.split()\n    p = [int(i) for i in s]\n    t = 0\n    for i in range(n):\n        t += p[i]\n        if t > m:\n            t -= m\n            t += p[i]\n        else:\n            t += p[i]\n    return str(t)\n\ndef",
        "test": "",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 4626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip())\n    for _ in range(q):\n        a, b, c = map(int, input().split())\n        if a == b == c:\n            print(0)\n        elif a == b or b == c or a == c:\n            print(0)\n        else:\n            print(abs(a - b) + abs(a - c) + abs(b - c))\n",
        "test": "",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 4627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    if n % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef",
        "test": "",
        "num_ids": 63,
        "indeed": false
    },
    {
        "number": 4628,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    districts = [int(stdin.split()[i]) for i in range(n)]\n    districts.sort()\n    couriers = [int(stdin.split()[i+1]) for i in range(m)]\n    couriers.sort()\n    \n    districts_cost = 0\n    for i in range(n):\n        districts_cost += districts[i] * (k - 1)\n    \n    couriers_cost = 0\n    for i in range(m):\n        couriers_cost += couriers[i] * (k - 1)\n    \n    districts_cost += districts_cost\n    couriers_cost += couriers_cost\n    \n    return str(districts_cost + couriers_cost)\n\n-----Constraints-----\n0 < stdin.length <= 1000\n1 <= n, m <= 1000\n1 <= k <= 1000\n1 <= a_i, b_i <= n\n1 <= x_i, y_i <= n\n1 <= w_i <= 1000\n\n-----Time Limit: 1 sec (py3)-----\n\nRuntime: 32 ms (32.09%)\nMemory Usage: 14.3 MB (49.04%)\n\nAccepted\n2\n\nSubmissions\n2\n\nExplanation\nThe problem is solved using the following algorithm:\n\n1. Initialize the variables:\n    districts = [districts[i] for i in range(n)]\n    couriers = [couriers[i] for i in range(m)]\n    districts_cost = 0\n    couriers_cost = 0\n    districts_cost += districts[0] * (k - 1)\n    couriers_cost += couriers[0] * (k - 1)\n    districts_cost += districts[1] * (k - 1)\n    couriers_cost += couriers[1] * (k - 1)\n    districts_cost += districts[2] * (k - 1)\n    couriers_cost += couriers[2] * (k - 1)\n    districts_cost += districts[3] * (k - 1)\n    couriers_cost += couriers[3] * (k - 1)\n    districts_cost += districts[4] * (k - 1)\n    couriers_cost += couriers[4] * (k - 1)\n    districts_cost += districts[5] * (k - 1)\n    couriers_cost += couriers[5] * (k - 1)\n    districts_cost += districts[6] * (k - 1)\n    couriers_cost += couriers[6] * (k - 1)\n    districts_cost += districts[7] * (k - 1)\n    couriers_cost += couriers[7] * (k - 1)\n    districts_cost += districts[8] * (k - 1)\n    couriers_cost += couriers[8] * (k - 1)\n    districts_cost += districts[9] * (k - 1)\n    couriers_cost += couriers[9] * (k - 1)\n    districts_cost += districts[10] * (k - 1)\n    couriers_cost += couriers[10] * (k - 1)\n    districts_cost += districts[11] * (k - 1)\n    couriers_cost += couriers[11] * (k - 1)\n    districts_cost += districts[12] * (k - 1)\n    couriers_cost += couriers[12] * (k - 1)\n    districts_cost += districts[13] * (k - 1)\n    couriers_cost += couriers[13] * (k - 1)\n    districts_cost += districts[14] * (k - 1)\n    couriers_cost += couriers[14] * (k - 1)\n    districts_cost += districts[15] * (k - 1)\n    couriers_cost += couriers[15] * (k - 1)\n    districts_cost += districts[16] * (k - 1)\n    couriers_cost += couriers[16] * (k - 1)\n    districts_cost += districts[17] * (k - 1)\n    couriers_cost += couriers[17] * (k - 1)\n    districts_cost += districts[18] * (k - 1)\n    couriers_cost += couriers[18] * (k - 1)\n    districts_cost += districts[19] * (k - 1)\n",
        "test": "",
        "num_ids": 1118,
        "indeed": false
    },
    {
        "number": 4629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min(n, m))\n\n-----Constraints-----\n1 <= q <= 10^4\n1 <= n <= 10^4\n1 <= m <= 10^4\n\n-----Time Limit-----\n1 sec\n\n-----Space Limit-----\n1 sec\n\n-----Alternatives-----\n\ndef",
        "test": "",
        "num_ids": 84,
        "indeed": false
    },
    {
        "number": 4630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    p = list(map(int, p.split()))\n    p.sort()\n    q = int(stdin.split()[1])\n    for i in range(q):\n        print(solution(stdin.split()[i+2]))\n        \n",
        "test": "",
        "num_ids": 80,
        "indeed": false
    },
    {
        "number": 4631,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    x.sort()\n    y.sort()\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if x[i] - y[j] == 0:\n                res += 1\n    return str(res)\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= x_i <= 10^9\n0 <= y_j <= 2 * 10^9\n\n-----Time Limit: 1 sec (S)-----\nclass Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        m = len(word1)\n        n = len(word2)\n        dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n        for i in range(m+1):\n            dp[i][0] = i\n        for j in range(n+1):\n            dp[0][j] = j\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if word1[i-1] == word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        return dp[m][n]\n",
        "test": "",
        "num_ids": 395,
        "indeed": false
    },
    {
        "number": 4632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    t = int(stdin.strip())\n    if t == 0:\n        return \"NO\"\n    if t == 1:\n        return \"YES\"\n    if t == 2:\n        return \"YES\"\n    if t == 3:\n        return \"YES\"\n    if t == 4:\n        return \"YES\"\n    if t == 5:\n        return \"YES\"\n    if t == 6:\n        return \"YES\"\n    if t == 7:\n        return \"YES\"\n    if t == 8:\n        return \"YES\"\n    if t == 9:\n        return \"YES\"\n    if t == 10:\n        return \"YES\"\n    if t == 11:\n        return \"YES\"\n    if t == 12:\n        return \"YES\"\n    if t == 13:\n        return \"YES\"\n    if t == 14:\n        return \"YES\"\n    if t == 15:\n        return \"YES\"\n    if t == 16:\n        return \"YES\"\n    if t == 17:\n        return \"YES\"\n    if t == 18:\n        return \"YES\"\n    if t == 19:\n        return \"YES\"\n    if t == 20:\n        return \"YES\"\n    if t == 21:\n        return \"YES\"\n    if t == 22:\n        return \"YES\"\n    if t == 23:\n        return \"YES\"\n    if t == 24:\n        return \"YES\"\n    if t == 25:\n        return \"YES\"\n    if t == 26:\n        return \"YES\"\n    if t == 27:\n        return \"YES\"\n    if t == 28:\n        return \"YES\"\n    if t == 29:\n        return \"YES\"\n    if t == 30:\n        return \"YES\"\n    if t == 31:\n        return \"YES\"\n    if t == 32:\n        return \"YES\"\n    if t == 33:\n        return \"YES\"\n    if t == 34:\n        return \"YES\"\n    if t == 35:\n        return \"YES\"\n    if t == 36:\n        return \"YES\"\n    if t == 37:\n        return \"YES\"\n    if t == 38:\n        return \"YES\"\n    if t == 39:\n        return \"YES\"\n    if t == 40:\n        return \"YES\"\n    if t == 41:\n        return \"YES\"\n    if t == 42:\n        return \"YES\"\n    if t == 43:\n        return \"YES\"\n    if t == 44:\n        return \"YES\"\n    if t == 45:\n        return \"YES\"\n    if t == 46:\n        return \"YES\"\n    if t == 47:\n        return \"YES\"\n    if t == 48:\n        return \"YES\"\n    if t == 49:\n        return \"YES\"\n    if t == 50:\n        return \"YES\"\n    if t == 51:\n        return \"YES\"\n    if t == 52:\n        return \"YES\"\n    if t == 53:\n        return \"YES\"\n    if t == 54:\n        return \"YES\"\n    if t == 55:\n        return \"YES\"\n    if t == 56:\n        return \"YES\"\n    if t == 57:\n        return \"YES\"\n    if t == 58:\n        return \"YES\"\n    if t == 59:\n        return \"YES\"\n    if t == 60:\n        return \"YES\"\n    if t == 61:\n        return \"YES\"\n    if t == 62:\n        return \"YES\"\n    if t == 63:\n        return \"YES\"\n    if t == 64:\n        return \"YES\"\n    if t == 65:\n        return \"YES\"\n    if t == 66:\n        return \"YES\"\n    if t == 67:\n        return \"YES\"\n    if t == 68:\n        return \"YES\"\n    if t == 69:\n        return \"YES\"\n    if t == 70:\n        return \"YES\"\n    if t == 71:\n        return \"YES\"\n    if t == 72:\n        return \"YES\"\n    if t == 73:\n        return \"YES\"\n    if t == 74:\n        return \"YES\"\n    if t == 75:\n        return \"YES\"\n    if t == 76:\n        return \"YES\"\n    if t == 77:\n        return \"YES\"\n    if t == 78:\n        return \"YES\"\n    if t == 79:\n        return \"YES\"\n    if t == 80:\n        return \"YES\"\n    if t == 81:\n        return \"YES\"\n    if t == 82:\n        return \"YES\"\n    if t == 83:\n        return \"YES\"\n    if t == 84:\n        return \"YES\"\n    if t == 85:\n        return \"YES\"\n    if t == 86:\n        return \"YES\"\n    if t == 87:\n        return \"YES\"\n    if t == 88:\n        return \"YES\"\n    if t == 89:\n        return \"YES\"\n    if t == 90:\n        return \"YES\"\n    if t == 91:\n        return \"YES\"\n    if t == 92:\n        return \"YES\"\n    if t == 93:\n        return \"YES\"\n    if t == 94:\n        return \"YES\"\n    if t == 95:\n        return \"YES\"\n    if t == 96:\n        return \"YES\"\n    ",
        "test": "",
        "num_ids": 1294,
        "indeed": false
    },
    {
        "number": 4633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    if n < s:\n        return str(n)\n    return str(s)\n",
        "test": "",
        "num_ids": 37,
        "indeed": false
    },
    {
        "number": 4634,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0] + a\n    a.sort()\n    a = [0",
        "test": "",
        "num_ids": 1061,
        "indeed": false
    },
    {
        "number": 4635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    s = [''.join(s[i:i+k]) for i in range(0, len(s), k)]\n    return ''.join(s)\n\ndef",
        "test": "",
        "num_ids": 65,
        "indeed": false
    },
    {
        "number": 4636,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    a = sorted(a)\n    b = sorted(b)\n    a_len = len(a)\n    b_len = len(b)\n    a_sum = sum(a)\n    b_sum = sum(b)\n    if a_sum > b_sum:\n        a_sum = b_sum\n    if a_sum < b_sum:\n        b_sum = a_sum\n    if a_sum == b_sum:\n        return str(a_sum)\n    if a_sum > b_sum:\n        a_sum = b_sum\n    if a_sum < b_sum:\n        b_sum = a_sum\n    if a_sum == b_sum:\n        return str(a_sum)\n    if a_sum > b_sum:\n        a_sum = b_sum\n    if a_sum < b_sum:\n        b_sum = a_sum\n    if a_sum == b_sum:\n        return str(a_sum)\n    if a_sum > b_sum:\n        a_sum = b_sum\n    if a_sum < b_sum:\n        b_sum = a_sum\n    if a_sum == b_sum:\n        return str(a_sum)\n    if a_sum > b_sum:\n        a_sum = b_sum\n    if a_sum < b_sum:\n        b_sum = a_sum\n    if a_sum == b_sum:\n        return str(a_sum)\n    if a_sum > b_sum:\n        a_sum = b_sum\n    if a_sum < b_sum:\n        b_sum = a_sum\n    if a_sum == b_sum:\n        return str(a_sum)\n    if a_sum > b_sum:\n        a_sum = b_sum\n    if a_sum < b_sum:\n        b_sum = a_sum\n    if a_sum == b_sum:\n        return str(a_sum)\n    if a_sum > b_sum:\n        a_sum = b_sum\n    if a_sum < b_sum:\n        b_sum = a_sum\n    if a_sum == b_sum:\n        return str(a_sum)\n    if a_sum > b_sum:\n        a_sum = b_sum\n    if a_sum < b_sum:\n        b_sum = a_sum\n    if a_sum == b_sum:\n        return str(a_sum)\n    if a_sum > b_sum:\n        a_sum = b_sum\n    if a_sum < b_sum:\n        b_sum = a_sum\n    if a_sum == b_sum:\n        return str(a_sum)\n    if a_sum > b_sum:\n        a_sum = b_sum\n    if a_sum < b_sum:\n        b_sum = a_sum\n    if a_sum == b_sum:\n        return str(a_sum)\n    if a_sum > b_sum:\n        a_sum = b_sum\n    if a_sum < b_sum:\n        b_sum = a_sum\n    if a_sum == b_sum:\n        return str(a_sum)\n    if a_sum > b_sum:\n        a_sum = b_sum\n    if a_sum < b_sum:\n        b_sum = a_sum\n    if a_sum == b_sum:\n        return str(a_sum)\n    if a_sum > b_sum:\n        a_sum = b_sum\n    if a_sum < b_sum:\n        b_sum = a_sum\n    if a_sum == b_sum:\n        return str(a_sum)\n    if a_sum > b_sum:\n        a_sum = b_sum\n    if a_sum < b_sum:\n        b_sum = a_sum\n    if a_sum == b_sum:\n        return str(a_sum)\n    if a_sum > b",
        "test": "",
        "num_ids": 981,
        "indeed": false
    },
    {
        "number": 4637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    if n > k:\n        return str(max(a[k-1], b[k-1]))\n    else:\n        return str(max(a[n-1], b[n-1]))\n\nprint(solution(stdin))\n",
        "test": "",
        "num_ids": 121,
        "indeed": false
    },
    {
        "number": 4638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    c = c * (n - 1)\n    a = [a[i] + a[i + 1] for i in range(n - 1)]\n    b = [b[i] + b[i + 1] for i in range(n - 1)]\n    a.sort()\n    b.sort()\n    c = c + sum(a) + sum(b)\n    return str(c)\n\nprint(solution(stdin))\n",
        "test": "",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 4639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s.sort()\n    return ''.join(map(str, s[k-1:k]))\n",
        "test": "",
        "num_ids": 58,
        "indeed": false
    },
    {
        "number": 4640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    x_min, y_min = min(x, y), min(x, y)\n    x_max, y_max = max(x, y), max(x, y)\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min, y_min = x_min - k, y_min - k\n    x_max, y_max = x_max + k, y_max + k\n    x_min",
        "test": "",
        "num_ids": 1171,
        "indeed": false
    },
    {
        "number": 4641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(q):\n        x = int(input())\n        if x == 0:\n            print(a[-1])\n        else:\n            a.append(a[-1] + x)\n    return str(max(a))\n\ndef",
        "test": "",
        "num_ids": 100,
        "indeed": false
    },
    {
        "number": 4642,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a",
        "test": "",
        "num_ids": 1510,
        "indeed": false
    },
    {
        "number": 4643,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    nums = list(map(int, stdin.strip().split()))\n    nums.sort()\n    return''.join(map(str, nums))\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Example 1-----\nInput\n3 3 1 2\n\nOutput\n1 2 3 \n\n-----Example 2-----\nInput\n3 3 1 2\n\nOutput\n1 2 3 \n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Example 3-----\nInput\n3 3 1 2\n\nOutput\n1 2 3 \n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Example 4-----\nInput\n3 3 1 2\n\nOutput\n1 2 3 \n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Example 5-----\nInput\n3 3 1 2\n\nOutput\n1 2 3 \n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n\nO(nlogn)\n\n\n-----Constraints-----\n\n1 <=",
        "test": "",
        "num_ids": 1848,
        "indeed": false
    },
    {
        "number": 4644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    if a[-1] % 2!= 0:\n        return \"NO\"\n    if a[0] + a[-1] == n:\n        return \"YES\"\n    for i in range(n):\n        if a[i] + a[i + 1] == n:\n            return \"YES\"\n    return \"NO\"\n",
        "test": "",
        "num_ids": 116,
        "indeed": false
    },
    {
        "number": 4645,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return -1\n    p = [int(i) for i in stdin.split()]\n    p.sort()\n    for i in range(n-1):\n        if p[i] + p[i+1] == 4:\n            return str(p[i])\n    return '-1'\n",
        "test": "",
        "num_ids": 90,
        "indeed": false
    },
    {
        "number": 4646,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range",
        "test": "",
        "num_ids": 1434,
        "indeed": false
    },
    {
        "number": 4647,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    res = 0\n    for i in range(n):\n        if a[i] == 0:\n            res += 1\n        else:\n            res -= 1\n    return str(res)\n\ndef",
        "test": "",
        "num_ids": 83,
        "indeed": false
    },
    {
        "number": 4648,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 6 == 0:\n        return str(n // 6)\n    else:\n        return str(n // 6) + \"0\"\n\ndef",
        "test": "",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4649,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    for i in range(n):\n        s[i] = s[i].replace('R', 'G')\n        s[i] = s[i].replace('G', 'B')\n        s[i] = s[i].replace('B', 'R')\n        s[i] = s[i].replace('R', 'B')\n        s[i] = s[i].replace('B', 'G')\n    return ''.join(s)\n\ndef",
        "test": "",
        "num_ids": 135,
        "indeed": false
    },
    {
        "number": 4650,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i",
        "test": "",
        "num_ids": 1534,
        "indeed": false
    },
    {
        "number": 4651,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = list(map(int, stdin.strip().split()))\n    q = list(map(int, stdin.strip().split()))\n    p.sort()\n    q.sort()\n    i = 0\n    j = 0\n    while i < n:\n        if p[i] < q[j]:\n            i += 1\n        else:\n            j += 1\n    return str(i) + \" \" + str(j)\n\ndef",
        "test": "",
        "num_ids": 120,
        "indeed": false
    },
    {
        "number": 4652,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"NO\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"YES\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"YES\"\n    if n == 7:\n        return \"YES\"\n    if n == 8:\n        return \"YES\"\n    if n == 9:\n        return \"YES\"\n    if n == 10:\n        return \"YES\"\n    if n == 11:\n        return \"YES\"\n    if n == 12:\n        return \"YES\"\n    if n == 13:\n        return \"YES\"\n    if n == 14:\n        return \"YES\"\n    if n == 15:\n        return \"YES\"\n    if n == 16:\n        return \"YES\"\n    if n == 17:\n        return \"YES\"\n    if n == 18:\n        return \"YES\"\n    if n == 19:\n        return \"YES\"\n    if n == 20:\n        return \"YES\"\n    if n == 21:\n        return \"YES\"\n    if n == 22:\n        return \"YES\"\n    if n == 23:\n        return \"YES\"\n    if n == 24:\n        return \"YES\"\n    if n == 25:\n        return \"YES\"\n    if n == 26:\n        return \"YES\"\n    if n == 27:\n        return \"YES\"\n    if n == 28:\n        return \"YES\"\n    if n == 29:\n        return \"YES\"\n    if n == 30:\n        return \"YES\"\n    if n == 31:\n        return \"YES\"\n    if n == 32:\n        return \"YES\"\n    if n == 33:\n        return \"YES\"\n    if n == 34:\n        return \"YES\"\n    if n == 35:\n        return \"YES\"\n    if n == 36:\n        return \"YES\"\n    if n == 37:\n        return \"YES\"\n    if n == 38:\n        return \"YES\"\n    if n == 39:\n        return \"YES\"\n    if n == 40:\n        return \"YES\"\n    if n == 41:\n        return \"YES\"\n    if n == 42:\n        return \"YES\"\n    if n == 43:\n        return \"YES\"\n    if n == 44:\n        return \"YES\"\n    if n == 45:\n        return \"YES\"\n    if n == 46:\n        return \"YES\"\n    if n == 47:\n        return \"YES\"\n    if n == 48:\n        return \"YES\"\n    if n == 49:\n        return \"YES\"\n    if n == 50:\n        return \"YES\"\n    if n == 51:\n        return \"YES\"\n    if n == 52:\n        return \"YES\"\n    if n == 53:\n        return \"YES\"\n    if n == 54:\n        return \"YES\"\n    if n == 55:\n        return \"YES\"\n    if n == 56:\n        return \"YES\"\n    if n == 57:\n        return \"YES\"\n    if n == 58:\n        return \"YES\"\n    if n == 59:\n        return \"YES\"\n    if n == 60:\n        return \"YES\"\n    if n == 61:\n        return \"YES\"\n    if n == 62:\n        return \"YES\"\n    if n == 63:\n        return \"YES\"\n    if n == 64:\n        return \"YES\"\n    if n == 65:\n        return \"YES\"\n    if n == 66:\n        return \"YES\"\n    if n == 67:\n        return \"YES\"\n    if n == 68:\n        return \"YES\"\n    if n == 69:\n        return \"YES\"\n    if n == 70:\n        return \"YES\"\n    if n == 71:\n        return \"YES\"\n    if n == 72:\n        return \"YES\"\n    if n == 73:\n        return \"YES\"\n    if n == 74:\n        return \"YES\"\n    if n == 75:\n        return \"YES\"\n    if n == 76:\n        return \"YES\"\n    if n == 77:\n        return \"YES\"\n    if n == 78:\n        return \"YES\"\n    if n == 79:\n        return \"YES\"\n    if n == 80:\n        return \"YES\"\n    if n == 81:\n        return \"YES\"\n    if n == 82:\n        return \"YES\"\n    if n == 83:\n        return \"YES\"\n    if n == 84:\n        return \"YES\"\n    if n == 85:\n        return \"YES\"\n    if n == 86:\n        return \"YES\"\n    if n == 87:\n        return \"YES\"\n    if n == 88:\n        return \"YES\"\n    if n == 89:\n        return \"YES\"\n    if n == 90:\n        return \"YES\"\n    if n == 91:\n        return \"YES\"\n    if n == 92:\n        return \"YES\"\n    if n == 93:\n        return \"YES\"\n    if n == 94:\n        return \"YES\"\n    if n == 95:\n        return \"YES\"\n    if n == 96:\n        return \"YES\"\n    if n == 97:\n        return \"YES\"\n    if n == 98:\n        return \"YES\"\n    if n == 99:\n        return \"YES\"\n    if n == 100:\n        return \"YES\"\n    if n == 101:\n        return \"YES\"\n    if n == 102:\n        return \"YES\"\n    if n == 103:\n        return \"YES\"\n    if n == 104:\n        return \"YES\"\n    if n == 105:\n        return \"YES\"\n    if n == 106:\n        return \"YES\"\n    if n == 107:\n        return \"YES\"\n    if n == 108:\n        return \"YES\"\n    if n == 109:\n        return \"YES\"\n    ",
        "test": "",
        "num_ids": 1434,
        "indeed": false
    },
    {
        "number": 4653,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = b = 1\n    for i in range(n):\n        a, b = a + 1, b + 1\n        if a > k:\n            a = 1\n        if b > k:\n            b = 1\n    return str(a) + str(b)\n",
        "test": "",
        "num_ids": 81,
        "indeed": false
    },
    {
        "number": 4654,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(k):\n        if a[i] % 2 == 0:\n            a[i] = a[i] // 2\n        else:\n            a[i] = a[i] * 2\n    for i in range(n):\n        if a[i] % 2 == 0:\n            a[i] = a[i] // 2\n        else:\n            a[i] = a[i] * 2\n    return ''.join(map(str, a))\n",
        "test": "",
        "num_ids": 153,
        "indeed": false
    },
    {
        "number": 4655,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip())\n    for _ in range(q):\n        a, b, c = map(int, input().split())\n        if a > b:\n            a, b = b, a\n        if a > c:\n            a, c = c, a\n        if b > c:\n            b, c = c, b\n        if a + b + c == 10000000000000000:\n            print(a)\n            return\n        if a + b + c > 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        if a + b + c < 10000000000000000:\n            print(a)\n            return\n        ",
        "test": "",
        "num_ids": 1450,
        "indeed": false
    },
    {
        "number": 4656,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    s = [list(map(str, input())) for _ in range(n)]\n    answer = 0\n    for i in range(n):\n        for j in range(n):\n            if s[i][j] == 'a':\n                answer += k\n            elif s[i][j] == 'b':\n                answer += k\n            elif s[i][j] == 'c':\n                answer += k\n            elif s[i][j] == 'd':\n                answer += k\n            elif s[i][j] == 'e':\n                answer += k\n            elif s[i][j] == 'f':\n                answer += k\n            elif s[i][j] == 'g':\n                answer += k\n            elif s[i][j] == 'h':\n                answer += k\n            elif s[i][j] == 'i':\n                answer += k\n            elif s[i][j] == 'j':\n                answer += k\n            elif s[i][j] == 'k':\n                answer += k\n            elif s[i][j] == 'l':\n                answer += k\n            elif s[i][j] =='m':\n                answer += k\n            elif s[i][j] == 'n':\n                answer += k\n            elif s[i][j] == 'o':\n                answer += k\n            elif s[i][j] == 'p':\n                answer += k\n            elif s[i][j] == 'q':\n                answer += k\n            elif s[i][j] == 'r':\n                answer += k\n            elif s[i][j] =='s':\n                answer += k\n            elif s[i][j] == 't':\n                answer += k\n            elif s[i][j] == 'u':\n                answer += k\n            elif s[i][j] == 'v':\n                answer += k\n            elif s[i][j] == 'w':\n                answer += k\n            elif s[i][j] == 'x':\n                answer += k\n            elif s[i][j] == 'y':\n                answer += k\n            elif s[i][j] == 'z':\n                answer += k\n            else:\n                answer += 1\n    return str(answer)\n\nprint(solution(stdin))\n",
        "test": "",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 4657,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n % k!= 0:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"YES\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"YES\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"YES\"\n    if n == 7:\n        return \"YES\"\n    if n == 8:\n        return \"YES\"\n    if n == 9:\n        return \"YES\"\n    if n == 10:\n        return \"YES\"\n    if n == 11:\n        return \"YES\"\n    if n == 12:\n        return \"YES\"\n    if n == 13:\n        return \"YES\"\n    if n == 14:\n        return \"YES\"\n    if n == 15:\n        return \"YES\"\n    if n == 16:\n        return \"YES\"\n    if n == 17:\n        return \"YES\"\n    if n == 18:\n        return \"YES\"\n    if n == 19:\n        return \"YES\"\n    if n == 20:\n        return \"YES\"\n    if n == 21:\n        return \"YES\"\n    if n == 22:\n        return \"YES\"\n    if n == 23:\n        return \"YES\"\n    if n == 24:\n        return \"YES\"\n    if n == 25:\n        return \"YES\"\n    if n == 26:\n        return \"YES\"\n    if n == 27:\n        return \"YES\"\n    if n == 28:\n        return \"YES\"\n    if n == 29:\n        return \"YES\"\n    if n == 30:\n        return \"YES\"\n    if n == 31:\n        return \"YES\"\n    if n == 32:\n        return \"YES\"\n    if n == 33:\n        return \"YES\"\n    if n == 34:\n        return \"YES\"\n    if n == 35:\n        return \"YES\"\n    if n == 36:\n        return \"YES\"\n    if n == 37:\n        return \"YES\"\n    if n == 38:\n        return \"YES\"\n    if n == 39:\n        return \"YES\"\n    if n == 40:\n        return \"YES\"\n    if n == 41:\n        return \"YES\"\n    if n == 42:\n        return \"YES\"\n    if n == 43:\n        return \"YES\"\n    if n == 44:\n        return \"YES\"\n    if n == 45:\n        return \"YES\"\n    if n == 46:\n        return \"YES\"\n    if n == 47:\n        return \"YES\"\n    if n == 48:\n        return \"YES\"\n    if n == 49:\n        return \"YES\"\n    if n == 50:\n        return \"YES\"\n    if n == 51:\n        return \"YES\"\n    if n == 52:\n        return \"YES\"\n    if n == 53:\n        return \"YES\"\n    if n == 54:\n        return \"YES\"\n    if n == 55:\n        return \"YES\"\n    if n == 56:\n        return \"YES\"\n    if n == 57:\n        return \"YES\"\n    if n == 58:\n        return \"YES\"\n    if n == 59:\n        return \"YES\"\n    if n == 60:\n        return \"YES\"\n    if n == 61:\n        return \"YES\"\n    if n == 62:\n        return \"YES\"\n    if n == 63:\n        return \"YES\"\n    if n == 64:\n        return \"YES\"\n    if n == 65:\n        return \"YES\"\n    if n == 66:\n        return \"YES\"\n    if n == 67:\n        return \"YES\"\n    if n == 68:\n        return \"YES\"\n    if n == 69:\n        return \"YES\"\n    if n == 70:\n        return \"YES\"\n    if n == 71:\n        return \"YES\"\n    if n == 72:\n        return \"YES\"\n    if n == 73:\n        return \"YES\"\n    if n == 74:\n        return \"YES\"\n    if n == 75:\n        return \"YES\"\n    if n == 76:\n        return \"YES\"\n    if n == 77:\n        return \"YES\"\n    if n == 78:\n        return \"YES\"\n    if n == 79:\n        return \"YES\"\n    if n == 80:\n        return \"YES\"\n    if n == 81:\n        return \"YES\"\n    if n == 82:\n        return \"YES\"\n    if n == 83:\n        return \"YES\"\n    if n == 84:\n        return \"YES\"\n    if n == 85:\n        ",
        "test": "",
        "num_ids": 1154,
        "indeed": false
    },
    {
        "number": 4658,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin, 2)\n    answer = ''\n    while n:\n        answer += str(n % 2)\n        n //= 2\n    return answer[::-1]\n",
        "test": "",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4659,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    for i in range(1, int(stdin) + 1):\n        answer.append([1])\n        for j in range(1, i):\n            answer[i].append(answer[i-1][j-1] + answer[i-1][j])\n    return answer[int(stdin)]\n",
        "test": "",
        "num_ids": 79,
        "indeed": false
    },
    {
        "number": 4660,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "",
        "num_ids": 1696,
        "indeed": false
    },
    {
        "number": 4661,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cubes = [0, 1, 1]\n    for i in range(2, n + 1):\n        cubes.append(cubes[i - 1] * cubes[i - 2])\n    return str(cubes[n])\n\n=====Sample Input-1=====\n3\n\n=====Sample Output-1=====\n[0, 1, 1]\n\n=====Sample Input-2=====\n5\n\n=====Sample Output-2=====\n[0, 1, 1, 1, 1]\n\n=====Sample Input-3=====\n10\n\n=====Sample Output-3=====\n[0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n=====Sample Input-4=====\n100\n\n=====Sample Output-4=====\n[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "test": "",
        "num_ids": 1695,
        "indeed": false
    },
    {
        "number": 4662,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return 0\n    \n    # create a stack\n    stack = []\n    \n    # push the root\n    stack.append(1)\n    \n    # iterate through the XML document\n    for i in range(n):\n        # pop the top of the stack\n        top = stack.pop()\n        \n        # if the top of the stack is a node\n        if top == 1:\n            # if the top of the stack is a child\n            if stack:\n                # if the top of the stack is a child\n                if stack[-1] == 1:\n                    # push the top of the stack\n                    stack.append(2)\n                # if the top of the stack is a child\n                else:\n                    # pop the top of the stack\n                    top = stack.pop()\n                    # if the top of the stack is a child\n                    if top == 2:\n                        # if the top of the stack is a child\n                        if stack:\n                            # if the top of the stack is a child\n                            if stack[-1] == 2:\n                                # push the top of the stack\n                                stack.append(3)\n                            # if the top of the stack is a child\n                            else:\n                                # pop the top of the stack\n                                top = stack.pop()\n                                # if the top of the stack is a child\n                                if top == 3:\n                                    # if the top of the stack is a child\n                                    if stack:\n                                        # if the top of the stack is a child\n                                        if stack[-1] == 3:\n                                            # push the top of the stack\n                                            stack.append(4)\n                                        # if the top of the stack is a child\n                                        else:\n                                            # pop the top of the stack\n                                            top = stack.pop()\n                                            # if the top of the stack is a child\n                                            if top == 4:\n                                                # if the top of the stack is a child\n                                                if stack:\n                                                    # if the top of the stack is a child\n                                                    if stack[-1] == 4:\n                                                        # push the top of the stack\n                                                        stack.append(5)\n                                                # if the top of the stack is a child\n                                                else:\n                                                    # pop the top of the stack\n                                                    top = stack.pop()\n                                                    # if the top of the stack is a child\n                                                    if top == 5:\n                                                        # if the top of the stack is a child\n                                                        if stack:\n                                                            # if the top of the stack is a child\n                                                            if stack[-1] == 5:\n                                                                # push the top of the stack\n                                                                stack.append(6)\n                                                        # if the top of the stack is a child\n                                                        else:\n                                                                # pop the top of the stack\n                                                                top = stack.pop()\n                                                                # if the top of the stack is a child\n                                                                if top == 6:\n                                                                    # if the top of the stack is a child\n                                                                    if stack:\n                                                                        # if the top of the stack is a child\n                                                                        if stack[-1] == 6:\n                                                                            # push the top of the stack\n                                                                            stack.append(7)\n                                                                        # if the top of the stack is a child\n                                                                        else:\n                                                                            # pop the top of the stack\n                                                                            top = stack.pop()\n                                                                            # if the top of the stack is a child\n                                                                            if top == 7:\n                                                                                # if the top of the stack is a child\n                                                                                if stack:\n                                                                                    # if the top of the stack is a child\n                                                                                    if stack[-1] == 7:\n                                                                                        # push the top of the stack\n                                                                                        stack.append(8)\n                                                                                    # if the top of the stack is a child\n                                                                                    else:\n                                                                                        # pop the top of the stack\n                                                                                        top = stack.pop()\n                                                                                        # if the top of the stack is a child\n                                                                                        if top == 8:\n                                                                                            # if the top of the stack is a child\n                                                                                            if stack:\n                                                                                                # if the top of the stack is a child\n                                                                                                if stack[-1] == 8:\n                                                                                              # push the top of the stack\n                                                                                              stack.append(9)\n                                                                                              # if the top of the stack is a child\n                                                                                              if stack[-1] == 9:\n                                                                                                    # pop the top of the stack\n                                                                                                    top = stack.pop()\n                                                                                                    # if the top of the stack is a child\n                                                                                                    if top == 9:\n                                                                                                            # if the top of the stack is a child\n                                                                                                            if stack:\n                                                                                                                # if the top of the stack is a child\n                                                                                                                if stack[-1] == 9:\n                                                                                                                    # push the top of the stack\n                                                                                                                    stack.append(10)\n                                                                                                                # if the top of the stack is a child\n                                                                                                                else:\n                                                                                                                    # pop the top of the stack\n                                                                                                                    top = stack.pop()\n                                                                                                                    # if the top of the stack is a child\n                                                                                                                    if top == 10:\n                                                                                                                        # if the top of the stack is a child\n                                                                                                                        if stack:\n                                                                                                                            # if the top of the stack is a child\n                                                                                                                            if stack[-1] == 10:\n                                                                                                                                # push the top of the stack\n                                                                                                                                stack.append(11)\n                                                                                                                            # if the top of the stack is a child\n                                                                                                                            else:\n                                                                                                                                # pop the top of the stack\n                                                                                                                                top = stack.pop()\n                                                                                                                                # if the top of the stack is a child\n                                                                                                                                if top == 11:\n                                                                                                                                    # if the top of the stack is a child\n                                                                                                                                    if stack:\n                                                                                                                                        # if the top of the stack is a child\n                                                                                                                                        if stack[-1] == 11:\n                                                                                                                                            # push the top of the stack\n                                                                                                                                            stack.append(12)\n                                                                                                                                        # if the top of the stack is a child\n                                                                                                                                        else:\n                                                                                                                                            # pop the top of the stack\n                                                                                                                                            top = stack.pop()\n                                                                                                                                            # if the top of the stack is a child\n                                                                                                                                            if top == 12:\n                                                                                                                                        # if the top of the stack is a child\n                                                                                               ",
        "test": "",
        "num_ids": 1582,
        "indeed": false
    },
    {
        "number": 4663,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        if len(line)!= 10:\n            return \"NO\"\n        if line[0]!= 7 and line[0]!= 8 and line[0]!= 9:\n            return \"NO\"\n    return \"YES\"\n\n=====Output Format=====\nFor every string listed, print \"YES\" if it is a valid mobile number and \"NO\" if it is not on separate lines. Do not print the quotes.\n\ndef",
        "test": "",
        "num_ids": 109,
        "indeed": false
    },
    {
        "number": 4664,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split())\n    print(*sorted(set(map(int, stdin.split())) - set(map(int, stdin.split()))))\n    return ''\n\n=====Sample Input-1=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-1\n1 2 3 4 5 6 7\n\n=====Sample Input-2=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-2\n1 2 3 4 5 6 7\n\n=====Sample Input-3=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-3\n1 2 3 4 5 6 7\n\n=====Sample Input-4=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-4\n1 2 3 4 5 6 7\n\n=====Sample Input-5=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-5\n1 2 3 4 5 6 7\n\n=====Sample Input-6=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-6\n1 2 3 4 5 6 7\n\n=====Sample Input-7=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-7\n1 2 3 4 5 6 7\n\n=====Sample Input-8=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-8\n1 2 3 4 5 6 7\n\n=====Sample Input-9=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-9\n1 2 3 4 5 6 7\n\n=====Sample Input-10=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-10\n1 2 3 4 5 6 7\n\n=====Sample Input-11=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-11\n1 2 3 4 5 6 7\n\n=====Sample Input-12=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-12\n1 2 3 4 5 6 7\n\n=====Sample Input-13=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-13\n1 2 3 4 5 6 7\n\n=====Sample Input-14=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-14\n1 2 3 4 5 6 7\n\n=====Sample Input-15=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-15\n1 2 3 4 5 6 7\n\n=====Sample Input-16=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-16\n1 2 3 4 5 6 7\n\n=====Sample Input-17=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-17\n1 2 3 4 5 6 7\n\n=====Sample Input-18=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-18\n1 2 3 4 5 6 7\n\n=====Sample Input-19=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-19\n1 2 3 4 5 6 7\n\n=====Sample Input-20=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-20\n1 2 3 4 5 6 7\n\n=====Sample Input-21=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-21\n1 2 3 4 5 6 7\n\n=====Sample Input-22=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-22\n1 2 3 4 5 6 7\n\n=====Sample Input-23=====\n3\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\nSample Output-23\n1 2 3 4 5 6 7",
        "test": "",
        "num_ids": 1040,
        "indeed": false
    },
    {
        "number": 4665,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    student_marks = []\n    for _ in range(n):\n        student_marks.append(list(map(int, stdin.strip().split())))\n    student_marks.sort()\n    total_marks = sum(student_marks[1:])\n    return str(round(total_marks / n))\n\n=====Output Format=====\nPrint the average marks of the list corrected to 2 decimal places.\ndef",
        "test": "",
        "num_ids": 109,
        "indeed": false
    },
    {
        "number": 4666,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        print(\"Weird\")\n    elif n % 2 == 1 and n in range(2, 6):\n        print(\"Not Weird\")\n    elif n % 2 == 1 and n in range(6, 21):\n        print(\"Not Weird\")\n    else:\n        print(\"Weird\")\n",
        "test": "",
        "num_ids": 87,
        "indeed": false
    },
    {
        "number": 4667,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    score = 0\n    for i in range(n):\n        line = stdin.strip().split()\n        if line[0] == '<':\n            score += len(line)\n        else:\n            score += len(line[1])\n    return str(score)\n\n=====Sample Input 1=====\n3\n<root>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<child>\n<",
        "test": "",
        "num_ids": 1925,
        "indeed": false
    },
    {
        "number": 4668,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(float, stdin.split())\n    phi = (a*b*c)/(a*b*d*c)\n    print(round(phi, 2))\n    return str(round(phi, 2))\n\n=====Sample Input 1=====\n3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3",
        "test": "",
        "num_ids": 1855,
        "indeed": false
    },
    {
        "number": 4669,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    words = [stdin.strip() for _ in range(n)]\n    score = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            score += 2\n        else:\n            score += 1\n    return str(score)\n\n=====Sample Input 1=====\n3\na\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na a\na",
        "test": "",
        "num_ids": 1750,
        "indeed": false
    },
    {
        "number": 4670,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # ===Modify codes below=============\n    # \uc870\uac74\uc5d0 \ub530\ub77c \ubcc0\ud658\ub418\uc5b4\uc57c \ud560 \uacb0\uacfc\ub97c result \ubcc0\uc218\uc5d0 \ud560\ub2f9\n    result = True\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    \n    # ===Modify codes below=============\n    ",
        "test": "",
        "num_ids": 1916,
        "indeed": false
    },
    {
        "number": 4671,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n    return '\\n'.join(map(str, numbers))\n\n=====Sample Input 1=====\n3\n1 2 3 4 5\n\nSample Output 1:\n1 2 3 4 5\n\n=====Sample Input 2=====\n3\n1 2 3 4 5\n\nSample Output 2:\n1 2 3 4 5\n\n=====Sample Input 3=====\n3\n1 2 3 4 5\n\nSample Output 3:\n1 2 3 4 5\n\n=====Sample Input 4=====\n3\n1 2 3 4 5\n\nSample Output 4:\n1 2 3 4 5\n\n=====Sample Input 5=====\n3\n1 2 3 4 5\n\nSample Output 5:\n1 2 3 4 5\n\n=====Sample Input 6=====\n3\n1 2 3 4 5\n\nSample Output 6:\n1 2 3 4 5\n\n=====Sample Input 7=====\n3\n1 2 3 4 5\n\nSample Output 7:\n1 2 3 4 5\n\n=====Sample Input 8=====\n3\n1 2 3 4 5\n\nSample Output 8:\n1 2 3 4 5\n\n=====Sample Input 9=====\n3\n1 2 3 4 5\n\nSample Output 9:\n1 2 3 4 5\n\n=====Sample Input 10=====\n3\n1 2 3 4 5\n\nSample Output 10:\n1 2 3 4 5\n\n=====Sample Input 11=====\n3\n1 2 3 4 5\n\nSample Output 11:\n1 2 3 4 5\n\n=====Sample Input 12=====\n3\n1 2 3 4 5\n\nSample Output 12:\n1 2 3 4 5\n\n=====Sample Input 13=====\n3\n1 2 3 4 5\n\nSample Output 13:\n1 2 3 4 5\n\n=====Sample Input 14=====\n3\n1 2 3 4 5\n\nSample Output 14:\n1 2 3 4 5\n\n=====Sample Input 15=====\n3\n1 2 3 4 5\n\nSample Output 15:\n1 2 3 4 5\n\n=====Sample Input 16=====\n3\n1 2 3 4 5\n\nSample Output 16:\n1 2 3 4 5\n\n=====Sample Input 17=====\n3\n1 2 3 4 5\n\nSample Output 17:\n1 2 3 4 5\n\n=====Sample Input 18=====\n3\n1 2 3 4 5\n\nSample Output 18:\n1 2 3 4 5\n\n=====Sample Input 19=====\n3\n1 2 3 4 5\n\nSample Output 19:\n1 2 3 4 5\n\n=====Sample Input 20=====\n3\n1 2 3 4 5\n\nSample Output 20:\n1 2 3 4 5\n\n=====Sample Input 21=====\n3\n1 2 3 4 5\n\nSample Output 21:\n1 2 3 4 5\n\n=====Sample Input 22=====\n3\n1 2 3 4 5\n\nSample Output 22:\n1 2 3 4 5\n\n=====Sample Input 23=====\n3\n1 2 3 4 5\n\nSample Output 23:\n1 2 3 4 5\n\n=====Sample Input 24=====\n3\n1 2 3 4 5\n\nSample Output 24:\n1 2 3 4 5\n\n=====Sample Input 25=====\n3\n1 2 3 4 5\n\nSample Output 25:\n1 2 3 4 5\n\n=====Sample Input 26=====\n3\n1 2 3 4 5\n\nSample Output 26:\n1 2 3 4 5\n\n=====Sample Input 27=====\n3\n1 2 3 4 5\n\nSample Output 27:\n1 2 3 4 5\n\n=====Sample Input 28=====\n3\n1 2 3 4 5\n\nSample Output 28:\n1 2 3 4 5\n\n=====Sample Input 29=====\n3\n1 2 3 4 5\n\nSample Output 29:\n1 2 3 4 5\n\n=====Sample Input 30=====\n3\n1 2 3 4 5\n\nSample Output 30:\n1 2 3 4 5\n\n=====Sample Input 31=====\n3\n1 2 3 4 5\n\nSample Output 31:\n1 2 3 4 5\n\n=====Sample Input 32=====\n3\n1 2 3 4 5\n\nSample Output 32:\n1 2 3 4 5\n\n=====Sample Input 33=====\n3\n1 2 3 4 5\n\nSample Output 33:\n1 2 3 4 5\n\n=====Sample Input 34=====\n3\n1 2 3 4 5\n\nSample Output 34:\n1 2 3 4 5\n\n=====Sample Input 35=====\n3\n1 2 3 4 5\n\nSample Output 35:\n1 2 3 4 5\n\n=====Sample Input 36=====\n3\n1 2 3 4 5\n\nSample Output 36:\n1 2 3 4 5\n\n=====Sample Input 37=====\n3\n1 2 3 4 5\n\nSample Output 37:\n1 2 3 4 5\n\n=====Sample Input 38=====\n3\n1 2 3 4 5\n\nSample Output 38:\n1 2 3 4 5\n\n=====Sample Input 39=====\n3\n1 2 3 4 5\n\nSample Output 39:\n1 2 3 4 5\n\n=====Sample Input 40=====\n3\n1 2 3 4 5\n\nSample Output 40:\n1 2 3 4 5\n\n=====Sample Input 41=====\n3\n1 2 3 4 5\n\nSample Output 41:\n1 2 3 4 5\n\n=====Sample Input 42=====\n3\n1 2 3 4 5\n\nSample Output 42:\n1 2 3 4 5\n\n=====Sample Input 43=====\n3\n1 2 3 4 5\n\nSample Output 43:\n1 2 3 4 5\n\n=====Sample Input 44=====\n3\n1 2 3 4 5\n\nSample Output 44:\n1 2 3 4 5\n\n=====Sample Input 45=====\n3\n1 2 3 4 5\n\nSample Output 45:\n1 2 3 4 5\n\n=====Sample Input 46=====\n3\n1 2 3 4 5\n\nSample Output 46:\n1 2 3 4 5\n\n=====Sample Input 47=====\n3\n1 2 3 4 5\n\nSample Output 47:\n1 2 3 4 5\n\n=====Sample Input 48=====\n3\n1 2 3 4 5\n\nSample Output 48:\n1 2 3 4 5\n\n=====Sample Input 49=====\n3\n1 2 3 4 5\n\nSample Output 49:\n1 2 3 4 5\n\n=====Sample Input 50=====\n3\n1 2 3 4 5\n\nSample Output 50:\n1 2 3 4 5\n\n=====Sample Input 51=====\n3\n1 2 3 4 5\n\nSample Output 51:\n1 2 3 4 5\n\n=====Sample Input 52=====\n3\n1 2 3 4 5\n\nSample Output 52:\n1 2 3 4 5\n\n=====Sample Input 53=====\n3\n1 2 3 4 5\n\nSample Output 53:\n1 2 3 4 5\n\n=====Sample Input 54=====\n3\n1 2 3 4 5\n\nSample Output 54:\n1 2 3 4 5\n\n=====Sample Input 55=====\n3\n1 2 3 4 5\n\nSample Output 55:\n1 2 3 4 5\n\n=====Sample Input 56=====\n3\n1 2 3 4 5\n\nSample Output 56:\n1 2 3 4 5\n\n=====Sample Input 57=====\n3\n1 2 3 4 5\n\nSample Output 57:\n1 2 3 4 5\n\n=====Sample Input 58=====\n3\n1 2 3 4 5\n\nSample Output 58:\n1 2 3 4 5\n\n=====Sample Input 59=====\n3\n1 2 3 4 5\n\nSample Output 59:\n1 2 3 4 5\n\n=====Sample Input 60=====\n3\n1 2 3 4 5\n\nSample Output 60:\n1 2 3 4 5\n\n=====Sample Input 61=====\n3\n1 2 3 4 5\n\nSample Output 61:\n1 2 3 4 5\n\n=====Sample Input 62=====\n3\n1 2 3 4 5\n\nSample Output 62:\n1 2 3 4 5\n\n=====Sample Input 63=====\n3\n1 2 3 4 5\n\nSample Output 63:\n1 2 3 4 5\n\n=====Sample Input 64=====\n3\n1 2 3 4 5",
        "test": "",
        "num_ids": 1891,
        "indeed": false
    },
    {
        "number": 4672,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    marks = []\n    for i in range(n):\n        name, marks = stdin.split()\n        marks = list(map(int, marks.split()))\n        marks.sort()\n        marks = sum(marks) / len(marks)\n        marks = round(marks, 2)\n        marks = str(marks)\n        marks = marks.replace('.', ',')\n        marks = marks.replace(',', ',')\n        marks = marks.replace(' ', '')\n        marks = marks.replace('[', '')\n        marks = marks.replace(']', '')\n        marks = marks.replace('(', '')\n        marks = marks.replace(')', '')\n        marks = marks.replace(' ', '')\n        marks = marks.replace('{', '')\n        marks = marks.replace('}', '')\n        marks = marks.replace(';', '')\n        marks = marks.replace(' ', '')\n        marks = marks.replace('\\n', '')\n        marks = marks.replace('\\t', '')\n        marks = marks.replace('\\r', '')\n        marks = marks.replace('\\f', '')\n        marks = marks.replace('\\v', '')\n        marks = marks.replace('\\b', '')\n        marks = marks.replace('\\xa0', '')\n        marks = marks.replace('\\u00a0', '')\n        marks = marks.replace('\\u00c0', '')\n        marks = marks.replace('\\u00b0', '')\n        marks = marks.replace('\\u00a1', '')\n        marks = marks.replace('\\u00c1', '')\n        marks = marks.replace('\\u00b1', '')\n        marks = marks.replace('\\u00a2', '')\n        marks = marks.replace('\\u00c2', '')\n        marks = marks.replace('\\u00b2', '')\n        marks = marks.replace('\\u00a3', '')\n        marks = marks.replace('\\u00c3', '')\n        marks = marks.replace('\\u00b3', '')\n        marks = marks.replace('\\u00a4', '')\n        marks = marks.replace('\\u00c4', '')\n        marks = marks.replace('\\u00b4', '')\n        marks = marks.replace('\\u00a5', '')\n        marks = marks.replace('\\u00c5', '')\n        marks = marks.replace('\\u00b5', '')\n        marks = marks.replace('\\u00a6', '')\n        marks = marks.replace('\\u00c6', '')\n        marks = marks.replace('\\u00b6', '')\n        marks = marks.replace('\\u00a7', '')\n        marks = marks.replace('\\u00c7', '')\n        marks = marks.replace('\\u00b7', '')\n        marks = marks.replace('\\u00a8', '')\n        marks = marks.replace('\\u00c8', '')\n        marks = marks.replace('\\u00b8', '')\n        marks = marks.replace('\\u00a9', '')\n        marks = marks.replace('\\u00c9', '')\n        marks = marks.replace('\\u00b9', '')\n        marks = marks.replace('\\u00aa', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb', '')\n        marks = marks.replace('\\u00ac', '')\n        marks = marks.replace('\\u00cb', '')\n        marks = marks.replace('\\u00bb',",
        "test": "",
        "num_ids": 1791,
        "indeed": false
    },
    {
        "number": 4673,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    names = []\n    for i in range(n):\n        name = stdin.split()\n        names.append(name[0])\n        names.append(name[1])\n        names.append(name[2])\n        names.append(name[3])\n    names.sort(key=lambda x: int(x[2]))\n    for i in range(n):\n        print(names[i])\n    return names[0]\n\n=====Output Format=====\nOutput N names on separate lines in the format described above in ascending order of age.\ndef",
        "test": "",
        "num_ids": 142,
        "indeed": false
    },
    {
        "number": 4674,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, n = map(int, stdin.split())\n    cubes = []\n    for i in range(x):\n        for j in range(y):\n            for k in range(z):\n                if i + j + k!= n:\n                    cubes.append([i, j, k])\n    return str(cubes)\n\n=====Output=====\n[0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n=====Sample Input=====\n3\n1\n1\n2\n3\nSample Output\n[[0, 0, 0], [0, 0, 1], [0, 0, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [3, 2, 0], [3, 2, 1], [3, 2, 2]]\n\n=====Sample Output=====\n[0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n=====Time complexity=====\nO(n^3)\n\n=====Space complexity=====\nO(n^2)\n\n=====Description=====\nThe list of permutations of [i,j,k] is given by (i,j,k) on a 3D grid. Print a list of all possible coordinates given by (i,j,k) on a 3D grid where the sum of i+j+k is not equal to n.\n\nExample 1:\n\nInput\n[\"Solution\",\"solution\"]\n[[[1,2,3]],[1,3,2]]\nOutput\n[[[0,0,0],[0,0,1],[0,0,2],[1,0,0],[1,0,1],[1,0,2],[2,0,0],[2,0,1],[2,0,2],[3,0,0],[3,0,1],[3,0,2],[3,1,0],[3,1,1],[3,1,2],[3,2,0],[3,2,1],[3,2,2],[4,0,0],[4,0,1],[4,0,2],[4,1,0],[4,1,1],[4,1,2],[4,2,0],[4,2,1],[4,2,2],[4,3,0],[4,3,1],[4,3,2],[4,4,0],[4,4,1],[4,4,2],[4,5,0],[4,5,1],[4,5,2],[4,6,0],[4,6,1],[4,6,2],[4,7,0],[4,7,1],[4,7,2],[4,8,0],[4,8,1],[4,8,2],[4,9,0],[4,9,1],[4,9,2],[4,10,0],[4,10,1],[4,10,2],[4,11,0],[4,11,1],[4,11,2],[4,12,0],[4,12,1],[4,12,2],[4,13,0],[4,13,1],[4,13,2],[4,14,0],[4,14,1],[4,14,2],[4,15,0],[4,15,1],[4,15,2],[4,16,0],[4,16,1],[4,16,2],[4,17,0],[4,17,1],[4,17,2],[4,18,0],[4,18,1],[4,18,2],[4,19,0],[4,19,1],[4,19,2],[4,20,0],[4,20,1],[4,20,2],[4,21,0],[4,21,1],[4,21,2],[4,22,0],[4,22,1],[4,22,2],[4,23,0],[4,23,1],[4,23,2],[4,24,0],[4,24,1],[4,24,2],[4,25,0],[4,25,1],[4,25,2],[4,26,0],[4,26,1],[4,26,2],[4,27,0],[4,27,1],[4,27,2],[4,28,0],[4,28,1],[4,28,2],[4,29,0],[4,29,1],[4,29,2],[4,30,0],[4,30,1],[4,30,2],[4,31,0],[4,31,1],[4,31,2],[4,32,0],[4,32,1],[4,32,2],[4,33,0],[4,33,1],[4,33,2],[4,34,0],[4,34,1],[4,34,2],[4,35,0],[4,35,1],[4,35,2],[4,36,0],[4,36,1],[4,36,2],[4,37,0],[4,37,1],[4,37,2],[4,38,0],[4,38,1],[4,38,2],[4,39,0],[4,39,1],[4,39,2],[4,40,0],[4,40,1],[4,40,2],[4,41,0],[4,41,1],[4,41,2],[4,42,0],[4,42,1],[4,42,2],[4,43,0],[4,43,1],[4,43,2],[4,44,0],[4,44,1],[4,44,2],[4,45,0],[4,45,1],[4,45,2],[4,46,0],[4,46,1],[4,46,2],[4,47,0],[4,47,1],[4,47,2],[4,48,0],[4,48,1],[4,48,2],[4,49,0],[4,49,1],[4,49,2],[4,50,0],[4,50,1],[4,50,2],[4,51,0],[4,51,1],[4,51,2],[4,52,0],[4,52,1],[4,52,2],[4,53,0],[4,53,1],[4,53,2],[4,54,0],[4,54,1],[4,54,2],[4,55,0],[4,55,1],[4,55,2],[4,56,0],[4,56,1],[4,56,2],[4,57,0],[4,57,1],[4,57,2],[4,58,0],[4,58,1],[4,58,2],[4,59,0],[4,59,1],[4,59,",
        "test": "",
        "num_ids": 1697,
        "indeed": false
    },
    {
        "number": 4675,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    if a < 0 and b < 0:\n        return '0.00+Bi'\n    if a < 0:\n        return '0.00-Bi'\n    if b < 0:\n        return '0.00+Bi'\n    if a == 0:\n        return '0.00'\n    if b == 0:\n        return '0.00'\n    if a == b:\n        return '0.00'\n    if a < b:\n        return '0.00+Bi'\n    if a > b:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        return '0.00+Bi'\n    if a % b == 0:\n        return '0.00-Bi'\n    if a % b == 0:\n        ",
        "test": "",
        "num_ids": 1794,
        "indeed": false
    },
    {
        "number": 4676,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    O,E = stdin.split()\n    O = O.split()\n    E = E.split()\n    O = [i for i in O if i not in E]\n    E = [i for i in E if i not in O]\n    return ''.join(O+E)\n",
        "test": "",
        "num_ids": 71,
        "indeed": false
    },
    {
        "number": 4677,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    answer = ''\n    for i in range(len(s)):\n        if s[i] == '0':\n            answer += '0'\n        elif s[i] == '1':\n            answer += '1'\n        else:\n            answer += 'B'\n    return answer\n\n-----Sample Output-----\n01B0\n\n-----Sample Input-----\n01B0\n\n-----Sample Output-----\n00\n\nThe correct answer is 00.\n\n-----Constraints-----\n - 1 \u2264 |s| \u2264 10\n - s consists of the letters 0, 1 and B.\n - The correct answer is not an empty string.\n\n-----Time Limit: 1.5 seconds\n-----Memory Limit: 256 MB\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        s = stdin.split()\n        answer = ''\n        for i in range(len(s)):\n            if s[i] == '0':\n                answer += '0'\n            elif s[i] == '1':\n                answer += '1'\n            else:\n                answer += 'B'\n        return answer\n\n-----Sample Output-----\n01B0\n\n-----Sample Input-----\n01B0\n\n-----Sample Output-----\n00\n\nThe correct answer is 00.\n\n-----Constraints-----\n - 1 \u2264 |s| \u2264 10\n - s consists of the letters 0, 1 and B.\n - The correct answer is not an empty string.\n\n-----Time Limit: 1.5 seconds\n-----Memory Limit: 256 MB\n",
        "test": "",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 4678,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A = list(map(int, stdin.strip().split()))\n    A.sort()\n    stools = [0] * N\n    for i in range(N):\n        stools[i] = A[i]\n    for i in range(N):\n        for j in range(i + 1, N):\n            if stools[i] > stools[j]:\n                stools[i], stools[j] = stools[j], stools[i]\n    return str(sum(stools))\n\n-----Sample Output-----\nSample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Input:\n3\n2 1 5 4 3\n\n-----Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Sample Input:\n5\n2 1 5 4 3\n\nSample Output:\n4\n\n-----Constraints:\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq A_i \\leq 10^9\n",
        "test": "",
        "num_ids": 1762,
        "indeed": false
    },
    {
        "number": 4679,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(str, stdin.split())\n    a = a.split()\n    b = b.split()\n    c = c.split()\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c = [c[i] for i in range(len(c))]\n    a = [a[i] for i in range(len(a))]\n    b = [b[i] for i in range(len(b))]\n    c =",
        "test": "",
        "num_ids": 1508,
        "indeed": false
    },
    {
        "number": 4680,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A + B + C == 10:\n        return \"YES\"\n    elif A + B + C == 15:\n        return \"NO\"\n    else:\n        return \"NO\"\n",
        "test": "",
        "num_ids": 63,
        "indeed": false
    },
    {
        "number": 4681,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return str(n)\n    else:\n        return solution(n-1) + solution(n-2)\n\ndef",
        "test": "",
        "num_ids": 46,
        "indeed": false
    },
    {
        "number": 4682,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    if a + b > h:\n        return 'Impossible'\n    if a + b == h:\n        return str(a*b/2)\n    return str(a*b/2) +'' + str(h - a - b)\n\ndef",
        "test": "",
        "num_ids": 78,
        "indeed": false
    },
    {
        "number": 4683,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(i) for i in stdin.split()]\n    A.sort()\n    sum = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            sum += A[i] * A[j]\n    return str(sum % (10**9+7))\n\n-----Sample Input-----\n3\n1 2 3\n\n-----Sample Output-----\n11\n\nWe have 1 + 2 + 3 = 11.\ndef",
        "test": "",
        "num_ids": 121,
        "indeed": false
    },
    {
        "number": 4684,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 4 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "",
        "num_ids": 35,
        "indeed": false
    },
    {
        "number": 4685,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 1 or n > 50 or k < 1 or k > 10:\n        return \"Error\"\n    if k == 1:\n        return str(n)\n    if k == 2:\n        return str(n) + str(n)\n    if k == 3:\n        return str(n) + str(n) + str(n)\n    if k == 4:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 5:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 6:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 7:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 8:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 9:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 10:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 11:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 12:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 13:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 14:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 15:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 16:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 17:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 18:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 19:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 20:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 21:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 22:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 23:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 24:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 25:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 26:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 27:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 28:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 29:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 30:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 31:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 32:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 33:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 34:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 35:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 36:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 37:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 38:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 39:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 40:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 41:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 42:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 43:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 44:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 45:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 46:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 47:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 48:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 49:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 50:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 51:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 52:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 53:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 54:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 55:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 56:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 57:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 58:\n        return str(n) + str(n) + str(n) + str(n)\n    if k == 59:\n        return str(n) + str(n) + str(n) + str(",
        "test": "",
        "num_ids": 1719,
        "indeed": false
    },
    {
        "number": 4686,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    w = stdin.strip()\n    count = 0\n    for i in range(len(w)):\n        if w[i].isalpha():\n            count += 1\n    if count % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "",
        "num_ids": 67,
        "indeed": true
    },
    {
        "number": 4687,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    a_1, b_1 = map(int, stdin.split())\n    a_N, b_N = map(int, stdin.split())\n    a_N = a_N + 1\n    b_1 = b_1 + 1\n    a_1 = a_1 + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_1 = a_1 + 1\n    b_1 = b_1 + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a_N = a_N + 1\n    b_N = b_N + 1\n    a",
        "test": "",
        "num_ids": 1772,
        "indeed": false
    },
    {
        "number": 4688,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    balls = [list(map(int, stdin.split())) for _ in range(N)]\n    answer = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if balls[i][0] == balls[j][1]:\n                answer += 1\n    return str(answer)\n\ndef",
        "test": "",
        "num_ids": 97,
        "indeed": false
    },
    {
        "number": 4689,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, N = map(int, stdin.split())\n    A_1, A_2, A_3 = map(int, stdin.split())\n    A_1, A_2, A_3 = A_1 - 1, A_2 - 1, A_3 - 1\n    dist = 0\n    for i in range(N):\n        dist += abs(A_1 - A_2) + abs(A_2 - A_3) + abs(A_3 - A_1)\n        A_1, A_2, A_3 = A_1 + 1, A_2 + 1, A_3 + 1\n    return str(dist)\n\ndef",
        "test": "",
        "num_ids": 160,
        "indeed": false
    },
    {
        "number": 4690,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A > B and A > C and A > D:\n        return str(A*B*C*D)\n    elif B > A and B > C and B > D:\n        return str(B*A*C*D)\n    elif C > A and C > B and C > D:\n        return str(C*A*B*D)\n    elif D > A and D > B and D > C:\n        return str(D*A*B*C)\n    else:\n        return \"Error\"\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be 15, the larger area.\n\n-----Sample Input-----\n3 5 2 7\n\n-----Sample Output-----\nError\n\nThe first rectangle has an area of 3\u00d75=15, and the second rectangle has an area of 2\u00d77=14.\nThus, the output should be",
        "test": "",
        "num_ids": 1774,
        "indeed": false
    },
    {
        "number": 4691,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"AC\"\n    elif n == 1:\n        return \"WA\"\n    elif n == 2:\n        return \"TLE\"\n    elif n == 3:\n        return \"RE\"\n    else:\n        return \"AC x \" + str(n-1) + \" x \" + str(n-2) + \" x \" + str(n-3)\n\ndef",
        "test": "",
        "num_ids": 108,
        "indeed": false
    },
    {
        "number": 4692,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = 0\n    for i in range(len(stdin)):\n        if stdin[i] == 'M':\n            x += 24\n        elif stdin[i] == 'D':\n            x += 30\n        elif stdin[i] == 'T':\n            x += 1\n    return str(x)\n",
        "test": "",
        "num_ids": 79,
        "indeed": false
    },
    {
        "number": 4693,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A + B > 10:\n        return str(A + B)\n    else:\n        return str(A + B)\n",
        "test": "",
        "num_ids": 47,
        "indeed": false
    },
    {
        "number": 4694,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a_list = list(map(int, stdin.strip().split()))\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(1, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(2, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(3, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(4, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(5, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(6, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(7, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(8, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(9, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(10, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(11, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(12, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(13, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(14, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(15, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(16, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(17, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(18, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(19, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(20, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(21, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(22, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(23, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(24, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(25, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(26, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(27, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(28, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(29, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(30, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(31, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(32, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(33, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(34, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(35, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(36, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(37, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(38, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(39, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(40, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(41, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(42, N+1)]\n    a_list.sort()\n    a_list = [a_list[i] - a_list[i-1] for i in range(43, N+1)]\n    a_list.",
        "test": "",
        "num_ids": 1800,
        "indeed": false
    },
    {
        "number": 4695,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == y:\n        return 'Yes'\n    if x > y:\n        return 'No'\n    if x < y:\n        return 'No'\n    if x % y == 0:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "",
        "num_ids": 80,
        "indeed": false
    },
    {
        "number": 4696,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % 2 == 0 and b % 2 == 0:\n        return \"Even\"\n    elif a % 2 == 0 and b % 2!= 0:\n        return \"Odd\"\n    else:\n        return \"Odd\"\n\n-----Sample Input-----\n3 4\n\n-----Sample Output-----\nOdd\n\n-----Constraints-----\n - 1 \u2264 a,b \u2264 10000\n - a and b are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na b\n\n-----Output-----\nIf the product is odd, print Odd; if it is even, print Even.\n\n-----Sample Input-----\n3 4\n\n-----Sample Output-----\nEven\n\nAs 3 \u00d7 4 = 12 is even, print Even.\ndef",
        "test": "",
        "num_ids": 189,
        "indeed": false
    },
    {
        "number": 4697,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    scc = []\n    for _ in range(N):\n        scc.append(list(map(int, stdin.split())))\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            for k in range(M):\n                if i == k:\n                    continue\n                if scc[i][j] + scc[k][j] == M:\n                    scc[i][j] += scc[k][j]\n    return str(len(scc))\n\ndef",
        "test": "",
        "num_ids": 147,
        "indeed": false
    },
    {
        "number": 4698,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T_i, M, P_i, X_i = map(int, stdin.split())\n    \n    def solution(N, T_i, M, P_i, X_i):\n        if T_i == 0:\n            return 0\n        if T_i == 1:\n            return X_i\n        if T_i == 2:\n            return X_i + M\n        if T_i == 3:\n            return X_i + M + P_i\n        if T_i == 4:\n            return X_i + M + P_i + X_i\n        if T_i == 5:\n            return X_i + M + P_i + X_i + M\n        if T_i == 6:\n            return X_i + M + P_i + X_i + M + P_i\n        if T_i == 7:\n            return X_i + M + P_i + X_i + M + P_i + X_i + M + P_i\n        if T_i == 8:\n            return X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i\n        if T_i == 9:\n            return X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M + P_i + X_i + M",
        "test": "",
        "num_ids": 1548,
        "indeed": false
    },
    {
        "number": 4699,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    D_1, D_2, D_3, D_4, D_5, D_6, D_7, D_8, D_9 = map(int, stdin.split())\n    D_1 = D_1 - 1\n    D_2 = D_2 - 1\n    D_3 = D_3 - 1\n    D_4 = D_4 - 1\n    D_5 = D_5 - 1\n    D_6 = D_6 - 1\n    D_7 = D_7 - 1\n    D_8 = D_8 - 1\n    D_9 = D_9 - 1\n    D_10 = D_10 - 1\n    D_11 = D_11 - 1\n    D_12 = D_12 - 1\n    D_13 = D_13 - 1\n    D_14 = D_14 - 1\n    D_15 = D_15 - 1\n    D_16 = D_16 - 1\n    D_17 = D_17 - 1\n    D_18 = D_18 - 1\n    D_19 = D_19 - 1\n    D_20 = D_20 - 1\n    D_21 = D_21 - 1\n    D_22 = D_22 - 1\n    D_23 = D_23 - 1\n    D_24 = D_24 - 1\n    D_25 = D_25 - 1\n    D_26 = D_26 - 1\n    D_27 = D_27 - 1\n    D_28 = D_28 - 1\n    D_29 = D_29 - 1\n    D_30 = D_30 - 1\n    D_31 = D_31 - 1\n    D_32 = D_32 - 1\n    D_33 = D_33 - 1\n    D_34 = D_34 - 1\n    D_35 = D_35 - 1\n    D_36 = D_36 - 1\n    D_37 = D_37 - 1\n    D_38 = D_38 - 1\n    D_39 = D_39 - 1\n    D_40 = D_40 - 1\n    D_41 = D_41 - 1\n    D_42 = D_42 - 1\n    D_43 = D_43 - 1\n    D_44 = D_44 - 1\n    D_45 = D_45 - 1\n    D_46 = D_46 - 1\n    D_47 = D_47 - 1\n    D_48 = D_48 - 1\n    D_49 = D_49 - 1\n    D_50 = D_50 - 1\n    D_51 = D_51 - 1\n    D_52 = D_52 - 1\n    D_53 = D_53 - 1\n    D_54 = D_54 - 1\n    D_55 = D_55 - 1\n    D_56 = D_56 - 1\n    D_57 = D_57 - 1\n    D_58 = D_58 - 1\n    D_59 = D_59 - 1\n    D_60 = D_60 - 1\n    D_61 = D_61 - 1\n    D_62 = D_62 - 1\n    D_63 = D_63 - 1\n    D_64 = D_64 - 1\n    D_65 = D_65 - 1\n    D_66 = D_66 - 1\n    D_67 = D_67 - 1\n    D_68 = D_68 - 1\n    D_69 = D_69 - 1\n    D_70 = D_70 - 1\n    D_71 = D_71 - 1\n    D_72 = D_72 - 1\n    D_73 = D_73 - 1\n    D_74 = D_74 - 1\n    D_75 = D_75 - 1\n    D_76 = D_76 - 1\n    D_77 = D_77 - 1\n    D_78 = D_78 - 1\n    D_79 = D_79 - 1\n    D_80 = D_80 - 1\n    D_81 = D_81 - 1\n    D_82 = D_82 - 1\n    D_83 = D_83 - 1\n    D_84 = D_84 - 1\n    D_85 = D_85 - 1\n    D_86 = D_86 - 1\n    D_87 = D_87 - 1\n    D_88 = D_88 - 1\n    D_89 = D_89 - 1\n    D_90 = D_90 - 1\n    D_91 = D_91 - 1\n    D_92 = D_92 - 1\n    D_93 = D_93 - 1\n    D_94 = D_94 - 1\n    D_95 = D_95 - 1\n    D_96 = D_96 - 1\n    D_97 = D_97 - 1\n    D_98 = D_98 - 1\n    D_99 = D_99 - 1\n    D_100 = D_100 - 1\n    D_101 = D_101 - 1\n    D_102 = D_102 - 1\n    D_103 = D_103 - 1\n    D_104 = D_104 - 1\n    D_105 = D_105 - 1\n    D_106 = D_106 - 1\n    D_107 = D_107 - 1\n    D_108 = D_108 - 1\n    D_109 = D_109 - 1\n    D_110 = D_110 - 1\n    D_111 = D_111 - 1\n    D_112 = D_112 - 1\n    D_113 = D_113 - 1\n    D_114 = D_114 - 1\n    D_115 = D_115 - 1\n    D_116 = D_116 - 1\n    D_117 = D_117 - 1\n    D_118 = D_118 - 1\n    D_119 = D_119 - 1\n    D_120 = D_120 - 1\n    D_121 = D_121 - 1\n    D_122 = D_122 - 1\n    D_123 = D_123 - 1\n    D_124 = D_124 - 1\n    D_125 = D_125 - 1\n    D_126 = D_126 - 1\n    D_127 = D_127 - 1\n    D_128 = D_128 - 1\n    D_129 = D_129 - 1\n    D_130 = D_130 - 1\n    D_131 = D_131 - 1\n    D_132 = D_132 - 1\n    D_133 = D_133 - 1\n    D_134 = D_134 - 1\n    D_135 = D_135 - 1\n    D_136 = D_136 - 1\n    D_137 = D_137 - 1\n    D_138 = D_138 - 1\n    D_139 = D_139 - 1\n    D_140 = D_140 - 1\n    D_141 = D_141 - 1\n    D_142 = D_142 - 1\n    D_143 = D_143 - 1\n    D_144 = D_144 - 1\n    D_145 = D_145 - 1\n    D_146 = D_146 - 1\n    D_147 = D_147 - 1\n    D_148 = D_148 -",
        "test": "",
        "num_ids": 1689,
        "indeed": false
    },
    {
        "number": 4700,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    H = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    A.sort()\n    B.sort()\n    good = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if H[i] > H[j]:\n                good += 1\n    for i in range(M):\n        for j in range(i+1, M):\n            if A[i] > A[j]:\n                good += 1\n    for i in range(M):\n        for j in range(i+1, M):\n            if B[i] > B[j]:\n                good += 1\n    return str(good)\n\n-----Sample Output-----\n2\n\n-----Constraints-----\n - 2 \\leq N \\leq 10^5\n - 1 \\leq M \\leq 10^5\n - 1 \\leq H_i \\leq 10^9\n - 1 \\leq A_i,B_i \\leq N\n - A_i \\neq B_i\n - Multiple roads may connect the same pair of observatories.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nH_1 H_2... H_N\nA_1 B_1\nA_2 B_2\n:\nA_M B_M\n\n-----Output-----\nPrint the number of good observatories.\n\n-----Sample Input-----\n4 3\n1 2 3 4\n1 3\n2 3\n2 4\n\n-----Sample Output-----\n2\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 415,
        "indeed": false
    },
    {
        "number": 4701,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    board = [int(i) for i in stdin.split()]\n    board = [i * 2 for i in board]\n    board = [i + K for i in board]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board if i!= 0]\n    board = [i for i in board",
        "test": "",
        "num_ids": 1941,
        "indeed": false
    },
    {
        "number": 4702,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0:\n        return '0'\n    elif x == 1:\n        return '1'\n    else:\n        return solution(str(x))\n",
        "test": "",
        "num_ids": 50,
        "indeed": false
    },
    {
        "number": 4703,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin.split())))\n",
        "test": "",
        "num_ids": 18,
        "indeed": false
    },
    {
        "number": 4704,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a_1, a_2, a_3, a_4 = map(int, stdin.split())\n    x = 10\n    y = 11\n    for i in range(N):\n        x = x - a_1\n        y = y - a_2\n        x = x - a_3\n        y = y - a_4\n    return str(min(x, y))\n\n-----Sample Output-----\n1\n\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^5\n - -10^{9} \\leq a_i \\leq 10^{9}\n - a_i is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 a_2... a_{N}\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n6\n1 2 3 4 5 6\n\n-----Sample Output-----\n1\n\nIf Snuke takes four cards from the top, and Raccoon takes the remaining two cards, x=10, y=11, and thus |x-y|=1. This is the minimum possible value.\ndef",
        "test": "",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 4705,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x = 0\n    y = 0\n    for i in range(N):\n        x, y = map(int, stdin.split())\n        x -= y\n        y -= x\n        if x > y:\n            x, y = y, x\n        print(x, y)\n    return str(x)\n\ndef",
        "test": "",
        "num_ids": 87,
        "indeed": false
    },
    {
        "number": 4706,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    c = []\n    for i in range(len(stdin)):\n        c.append(stdin[i])\n    c.sort()\n    for i in range(len(c)):\n        if i == 0:\n            c[i] = c[i] + c[i+1]\n        elif i == len(c)-1:\n            c[i] = c[i] + c[i-1]\n        else:\n            c[i] = c[i] + c[i+1] + c[i-1]\n    return ''.join(c)\n",
        "test": "",
        "num_ids": 141,
        "indeed": false
    },
    {
        "number": 4707,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s_1 = stdin.split()\n    s_2 = stdin.split()\n    s_3 = stdin.split()\n    s_1 = [int(i) for i in s_1]\n    s_2 = [int(i) for i in s_2]\n    s_3 = [int(i) for i in s_3]\n    s_1.sort()\n    s_2.sort()\n    s_3.sort()\n    answer = 0\n    for i in range(len(s_1)):\n        if s_1[i] == 1 and s_2[i] == 1 and s_3[i] == 1:\n            answer += 1\n    return str(answer)\n\n-----Sample Output-----\nSample Input:\n101\n\nSample Output:\n2\n\n-----Constraints-----\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s_2, s_3 <= 100\n\n-----Input:\nInput from Standard Input\n\n-----Output:\nSample Input:\n101\n\n-----Output:\n2\n\n-----Constraints:\n - 1 <= s_1, s",
        "test": "",
        "num_ids": 1871,
        "indeed": false
    },
    {
        "number": 4708,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    X, Y = map(int, stdin.split())\n    if N == 1:\n        print(K)\n        return\n    if K == 1:\n        print(X)\n        return\n    if K == 2:\n        print(X + Y)\n        return\n    if K == 3:\n        print(X + Y + K)\n        return\n    if K == 4:\n        print(X + Y + K + K)\n        return\n    if K == 5:\n        print(X + Y + K + K + K)\n        return\n    if K == 6:\n        print(X + Y + K + K + K + K)\n        return\n    if K == 7:\n        print(X + Y + K + K + K + K + K)\n        return\n    if K == 8:\n        print(X + Y + K + K + K + K + K + K)\n        return\n    if K == 9:\n        print(X + Y + K + K + K + K + K + K + K)\n        return\n    if K == 10:\n        print(X + Y + K + K + K + K + K + K + K + K)\n        return\n    if K == 11:\n        print(X + Y + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 12:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 13:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 14:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 15:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 16:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 17:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 18:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 19:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 20:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 21:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 22:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 23:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 24:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 25:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 26:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 27:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 28:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 29:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 30:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 31:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 32:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 33:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 34:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 35:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K)\n        return\n    if K == 36:\n        print(X + Y + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K + K)",
        "test": "",
        "num_ids": 1787,
        "indeed": false
    },
    {
        "number": 4709,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    op = \"+\" if A > B else \"-\n    print(eval(f\"{A} {op} {B}\"))\n",
        "test": "",
        "num_ids": 46,
        "indeed": false
    },
    {
        "number": 4710,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 1200:\n        return 'ABC'\n    else:\n        return 'ARC'\n\n-----Sample Output-----\nABC\n\nSmeke's current rating is less than 1200, thus the output should be ABC.\ndef",
        "test": "",
        "num_ids": 62,
        "indeed": false
    },
    {
        "number": 4711,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a > b and a > c:\n        return str(a)\n    elif b > a and b > c:\n        return str(b)\n    else:\n        return str(c)\n",
        "test": "",
        "num_ids": 66,
        "indeed": false
    },
    {
        "number": 4712,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    a_list = []\n    for _ in range(H):\n        a_list.append(stdin.split())\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '.':\n                a_list[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '.':\n                a_list[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '.':\n                a_list[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '.':\n                a_list[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '.':\n                a_list[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '.':\n                a_list[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '.':\n                a_list[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '.':\n                a_list[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '.':\n                a_list[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '.':\n                a_list[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a_list[i][j] == '#':\n                a_list[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if a",
        "test": "",
        "num_ids": 1824,
        "indeed": false
    },
    {
        "number": 4713,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(map(int, stdin.strip().split()))\n    x = 0\n    for i in range(n):\n        x += s[i]\n    return str(x)\n\ndef",
        "test": "",
        "num_ids": 61,
        "indeed": false
    },
    {
        "number": 4714,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    c = []\n    for i in range(n):\n        c.append(str(a[i]**b[i]))\n    c = ''.join(c)\n    return c\n\ndef",
        "test": "",
        "num_ids": 96,
        "indeed": false
    },
    {
        "number": 4715,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return '3'\n    if a == b or b == c or a == c:\n        return '1'\n    return '4'\n",
        "test": "",
        "num_ids": 60,
        "indeed": false
    },
    {
        "number": 4716,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    l_1, l_2, l_3 = map(int, stdin.split())\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n    l_2 += l_3\n    l_3 += l_1\n    l_1 += l_2\n",
        "test": "",
        "num_ids": 1830,
        "indeed": false
    },
    {
        "number": 4717,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    if a == b:\n        return 'B'\n    if a > b:\n        return 'A'\n    return 'B'\n\ndef",
        "test": "",
        "num_ids": 52,
        "indeed": false
    },
    {
        "number": 4718,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('/', '-')\n",
        "test": "",
        "num_ids": 14,
        "indeed": false
    },
    {
        "number": 4719,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    strings = [stdin[i:i+n] for i in range(0, len(stdin), n)]\n    strings.sort()\n    return strings[-1]\n",
        "test": "",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    l_1, r_1 = map(int, stdin.strip().split())\n    l_N, r_N = map(int, stdin.strip().split())\n    l_N = l_N - 1\n    r_N = r_N - 1\n    l_i = l_1\n    r_i = r_1\n    answer = 0\n    while l_i <= r_i:\n        if l_i == r_i:\n            answer += 1\n            break\n        if l_i == l_N:\n            answer += r_N\n            break\n        if r_i == r_N:\n            answer += l_N\n            break\n        if l_i < l_N:\n            answer += l_i\n            l_i += 1\n        if r_i < r_N:\n            answer += r_i\n            r_i += 1\n    return str(answer)\n\ndef",
        "test": "",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 4721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1 and m == 1:\n        return '1'\n    if n == 1:\n        return '1' + solution(stdin + '1')\n    if m == 1:\n        return '1' + solution(stdin + '0')\n    if n == m:\n        return '1' + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1') + solution(stdin + '0') + solution(stdin + '1')\n    if n == m:\n        return '1' + solution(stdin + '0') + solution(stdin +",
        "test": "",
        "num_ids": 1892,
        "indeed": false
    },
    {
        "number": 4722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A + B == 100:\n        return \"Possible\"\n    elif A + B == 100:\n        return \"Impossible\"\n    else:\n        return \"Impossible\"\n\n-----Example 1 -----\nInput\n\n4 5\n\nOutput\n\nImpossible\n\nExplanation\n\nSnuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Sample Input-----\n4 5\n\n-----Sample Output-----\nPossible\n\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n-----Constraints-----\n - 1 \\leq A,B \\leq 100\n - Both A and B are integers.\n\n-----Input-----\nInput",
        "test": "",
        "num_ids": 1830,
        "indeed": false
    },
    {
        "number": 4723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('?', '?')\n\ndef",
        "test": "",
        "num_ids": 16,
        "indeed": false
    },
    {
        "number": 4724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, G = map(int, stdin.split())\n    if R == G:\n        return str(G)\n    else:\n        return str(int(G) + int(R))\n",
        "test": "",
        "num_ids": 48,
        "indeed": false
    },
    {
        "number": 4725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin.lower())))\n",
        "test": "",
        "num_ids": 16,
        "indeed": false
    },
    {
        "number": 4726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    if t == 1:\n        return 'AC'\n    elif t == 2:\n        return 'TLE'\n    else:\n        return 'AC'\n",
        "test": "",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4727,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    board = [list(map(int, input().split())) for _ in range(n)]\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    def dfs(x, y):\n        if x < 0 or x >= n or y < 0 or y >= m:\n            return\n        if board[x][y] == 0:\n            return\n        if board[x][y] == 2:\n            board[x][y] = 0\n            dfs(x-1, y)\n            dfs(x+1, y)\n            dfs(x, y-1)\n            dfs(x, y+1)\n            return\n        board[x][y] = 0\n        dfs(x-1, y)\n        dfs(x+1, y)\n        dfs(x, y-1)\n        dfs(x, y+1)\n    dfs(0, 0)\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 0:\n                board[i][j] = 2\n                dfs(i, j)\n    answer = ''\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 0:\n                answer += '0'\n            else:\n                answer += str(board[i][j])\n    return answer\n",
        "test": "",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 4728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = n\n    while m > 0:\n        m -= 1\n        if m % 2 == 0:\n            m = m // 2\n        else:\n            m = m // 2 + 1\n    return str(m)\n",
        "test": "",
        "num_ids": 65,
        "indeed": false
    },
    {
        "number": 4729,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "test": "",
        "num_ids": 4,
        "indeed": false
    },
    {
        "number": 4730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin.strip())\n    if L < 1 or L > 200:\n        return \"ok so far\"\n    \n    stack = []\n    for i in range(L):\n        if stdin[i] == '(':\n            stack.append(i)\n        elif stdin[i] == ')':\n            if len(stack) == 0:\n                return \"ok so far\"\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return \"ok so far\"\n    else:\n        return \"ok so far\"\n\ndef",
        "test": "",
        "num_ids": 139,
        "indeed": false
    },
    {
        "number": 4731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    word = []\n    for i in range(n):\n        word.append(stdin.strip().split(' ')[i])\n    word.sort()\n    for i in range(n):\n        if word[i][0]!= word[i][-1]:\n            return 'Player 1 lost'\n    return 'Player 1 won'\n",
        "test": "",
        "num_ids": 92,
        "indeed": false
    },
    {
        "number": 4732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 0:\n        return str(B)\n    if A == 1:\n        return str(B * 10)\n    if A == 2:\n        return str(B * 100)\n    if A == 3:\n        return str(B * 1000)\n    return str(B * 10) + solution(stdin)\n",
        "test": "",
        "num_ids": 93,
        "indeed": false
    },
    {
        "number": 4733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return \"in\"\n    else:\n        return \"out\"\n\ndef",
        "test": "",
        "num_ids": 39,
        "indeed": false
    },
    {
        "number": 4734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    y, p = stdin.split()\n    y = y.lower()\n    p = p.lower()\n    if y[-1] == 'e':\n        y = y[:-1]\n    if y[-1] == 'i':\n        y = y[:-1]\n    if y[-1] == 'o':\n        y = y[:-1]\n    if y[-1] == 'u':\n        y = y[:-1]\n    if y[-1] == 'x':\n        y = y[:-1]\n    if y[-1] =='m':\n        y = y[:-1]\n    if y[-1] == 'l':\n        y = y[:-1]\n    if y[-1] == 'o':\n        y = y[:-1]\n    if y[-1] == 'u':\n        y = y[:-1]\n    if y[-1] == 'x':\n        y = y[:-1]\n    if y[-1] =='m':\n        y = y[:-1]\n    if y[-1] == 'l':\n        y = y[:-1]\n    if y[-1] == 'p':\n        y = y[:-1]\n    if y[-1] == 'e':\n        y = y[:-1]\n    if y[-1] == 'i':\n        y = y[:-1]\n    if y[-1] == 'o':\n        y = y[:-1]\n    if y[-1] == 'u':\n        y = y[:-1]\n    if y[-1] == 'x':\n        y = y[:-1]\n    if y[-1] =='m':\n        y = y[:-1]\n    if y[-1] == 'l':\n        y = y[:-1]\n    if y[-1] == 'p':\n        y = y[:-1]\n    if y[-1] == 'e':\n        y = y[:-1]\n    if y[-1] == 'i':\n        y = y[:-1]\n    if y[-1] == 'o':\n        y = y[:-1]\n    if y[-1] == 'u':\n        y = y[:-1]\n    if y[-1] == 'x':\n        y = y[:-1]\n    if y[-1] =='m':\n        y = y[:-1]\n    if y[-1] == 'l':\n        y = y[:-1]\n    if y[-1] == 'p':\n        y = y[:-1]\n    if y[-1] == 'e':\n        y = y[:-1]\n    if y[-1] == 'i':\n        y = y[:-1]\n    if y[-1] == 'o':\n        y = y[:-1]\n    if y[-1] == 'u':\n        y = y[:-1]\n    if y[-1] == 'x':\n        y = y[:-1]\n    if y[-1] =='m':\n        y = y[:-1]\n    if y[-1] == 'l':\n        y = y[:-1]\n    if y[-1] == 'p':\n        y = y[:-1]\n    if y[-1] == 'e':\n        y = y[:-1]\n    if y[-1] == 'i':\n        y = y[:-1]\n    if y[-1] == 'o':\n        y = y[:-1]\n    if y[-1] == 'u':\n        y = y[:-1]\n    if y[-1] == 'x':\n        y = y[:-1]\n    if y[-1] =='m':\n        y = y[:-1]\n    if y[-1] == 'l':\n        y = y[:-1]\n    if y[-1] == 'p':\n        y = y[:-1]\n    if y[-1] == 'e':\n        y = y[:-1]\n    if y[-1] == 'i':\n        y = y[:-1]\n    if y[-1] == 'o':\n        y = y[:-1]\n    if y[-1] == 'u':\n        y = y[:-1]\n    if y[-1] == 'x':\n        y = y[:-1]\n    if y[-1] =='m':\n        y = y[:-1]\n    if y[-1] == 'l':\n        y = y[:-1]\n    if y[-1] == 'p':\n        y = y[:-1]\n    if y[-1] == 'e':\n        y = y[:-1]\n    if y[-1] == 'i':\n        y = y[:-1]\n    if y[-1] == 'o':\n        y = y[:-1]\n    if y[-1] == 'u':\n        y = y[:-1]\n    if y[-1] == 'x':\n        y = y[:-1]\n    if y[-1] =='m':\n        y = y[:-1]\n    if y[-1] == 'l':\n        y = y[:-1]\n    if y[-1] == 'p':\n        y = y[:-1]\n    if y[-1] == 'e':\n        y = y[:-1]\n    if y[-1] == 'i':\n        y = y[:-1]\n    if y[-1] == 'o':\n        y = y[:-1]\n    if y[-1] == 'u':\n        y = y[:-1]\n    if y[-1] == 'x':\n        y = y[:-1]\n    if y[-1] =='m':\n        y = y[:-1]\n    if y[-1] == 'l':\n        y = y[:-1]\n    if y[-1] == 'p':\n        y = y[:-1]\n    if y[-1] == 'e':\n        y = y[:-1]\n    if y[-1] == 'i':\n        y = y[:-1]\n    if y[-1] == 'o':\n        y = y[:-1]\n    if y[-1] == 'u':",
        "test": "",
        "num_ids": 1551,
        "indeed": false
    },
    {
        "number": 4735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return 'yes'\n            else:\n                return 'no'\n        else:\n            return 'no'\n    else:\n        return 'no'\n",
        "test": "",
        "num_ids": 73,
        "indeed": false
    },
    {
        "number": 4736,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    \n    def solve(nums, k):\n        if k == 0:\n            return 1\n        \n        if k == 1:\n            return solve(nums, k - 1) + solve(nums, k - 2)\n        \n        return solve(nums, k - 1) + solve(nums, k - 2) + solve(nums, k - 3)\n    \n    return str(solve(nums, k))\n",
        "test": "",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 4737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if n == 1:\n        return str(p)\n    if p == 1:\n        return str(n)\n    if p == 2:\n        return str(n) + str(n)\n    if p == 3:\n        return str(n) + str(n) + str(n)\n    if p == 4:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 5:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 6:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 7:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 8:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 9:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 10:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 11:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 12:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 13:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 14:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 15:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 16:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 17:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 18:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 19:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 20:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 21:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 22:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 23:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 24:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 25:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 26:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 27:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 28:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 29:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 30:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 31:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 32:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 33:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 34:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 35:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 36:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 37:\n        return str(n) + str(n) + str(n) + str(n)\n    if p == 38:\n        return str(n) + str(n) + str(n) +",
        "test": "",
        "num_ids": 1097,
        "indeed": false
    },
    {
        "number": 4738,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return str(n//2)\n    else:\n        return str(n//2) + str(n//2)\n",
        "test": "",
        "num_ids": 50,
        "indeed": false
    },
    {
        "number": 4739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    T = list(map(int, stdin.split()))\n    X = list(map(int, stdin.split()))\n    \n    def get_dist(x, y):\n        return abs(x - y)\n    \n    def get_dist_list(x, y):\n        return [get_dist(x, y), get_dist(x, y + 1), get_dist(x, y + 2), get_dist(x, y + 3), get_dist(x, y + 4), get_dist(x, y + 5), get_dist(x, y + 6), get_dist(x, y + 7), get_dist(x, y + 8), get_dist(x, y + 9), get_dist(x, y + 10)]\n    \n    def get_dist_list_2(x, y):\n        return [get_dist(x, y + 1), get_dist(x, y + 2), get_dist(x, y + 3), get_dist(x, y + 4), get_dist(x, y + 5), get_dist(x, y + 6), get_dist(x, y + 7), get_dist(x, y + 8), get_dist(x, y + 9), get_dist(x, y + 10)]\n    \n    def get_dist_list_3(x, y):\n        return [get_dist(x, y + 1), get_dist(x, y + 2), get_dist(x, y + 3), get_dist(x, y + 4), get_dist(x, y + 5), get_dist(x, y + 6), get_dist(x, y + 7), get_dist(x, y + 8), get_dist(x, y + 9), get_dist(x, y + 10)]\n    \n    def get_dist_list_4(x, y):\n        return [get_dist(x, y + 1), get_dist(x, y + 2), get_dist(x, y + 3), get_dist(x, y + 4), get_dist(x, y + 5), get_dist(x, y + 6), get_dist(x, y + 7), get_dist(x, y + 8), get_dist(x, y + 9), get_dist(x, y + 10)]\n    \n    def get_dist_list_5(x, y):\n        return [get_dist(x, y + 1), get_dist(x, y + 2), get_dist(x, y + 3), get_dist(x, y + 4), get_dist(x, y + 5), get_dist(x, y + 6), get_dist(x, y + 7), get_dist(x, y + 8), get_dist(x, y + 9), get_dist(x, y + 10)]\n    \n    def get_dist_list_6(x, y):\n        return [get_dist(x, y + 1), get_dist(x, y + 2), get_dist(x, y + 3), get_dist(x, y + 4), get_dist(x, y + 5), get_dist(x, y + 6), get_dist(x, y + 7), get_dist(x, y + 8), get_dist(x, y + 9), get_dist(x, y + 10)]\n    \n    def get_dist_list_7(x, y):\n        return [get_dist(x, y + 1), get_dist(x, y + 2), get_dist(x, y + 3), get_dist(x, y + 4), get_dist(x, y + 5), get_dist(x, y + 6), get_dist(x, y + 7), get_dist(x, y + 8), get_dist(x, y + 9), get_dist(x, y + 10)]\n    \n    def get_dist_list_8(x, y):\n        return [get_dist(x, y + 1), get_dist(x, y + 2), get_dist(x, y + 3), get_dist(x, y + 4), get_dist(x, y + 5), get_dist(x, y + 6), get_dist(x, y + 7), get_dist(x, y + 8), get_dist(x, y + 9), get_dist(x, y + 10)]\n    \n    def get_dist_list_9(x, y):\n        return [get_dist(x, y + 1), get_dist(x, y + 2), get_dist(x, y + 3), get_dist(x, y + 4), get_dist(x, y + 5), get_dist(x, y + 6), get_dist(x, y + 7), get_dist(x, y + 8), get_dist(x, y + 9), get_dist(x, y + 10)]\n    \n    def get_dist_list_10(x, y):\n        return [get_dist(x, y + 1), get_dist(x, y + 2), get_dist(x, y + 3), get_dist(x, y + 4), get_dist(x, y + 5), get_dist(x, y + 6), get_dist(x, y + 7), get_dist(x, y + 8), get_dist(x, y + 9), get_dist(x, y + 10)]\n    \n    def get_dist_list_11(x, y):\n        return [get_dist(x, y + 1), get_dist(x, y + 2), get_dist(x, y + 3), get_dist(x, y + 4), get_dist(x, y + 5), get_dist(x, y + 6), get_dist(x, y + 7), get_dist(x, y + 8), get_dist(x, y + 9), get_dist(x, y + 10)]\n    \n    def get_dist_list_12(x, y):\n        return [get_dist(x, y + 1), get_dist(x, y + 2), get_dist(x, y + 3), get_dist(x, y + 4), get_dist(x, y + 5), get_dist(x, y + 6), get_dist(x, y + 7), get_dist(x, y + 8), get_dist(x, y + 9), get_dist(x, y + 10)]\n    \n    def get_dist_list_13(x, y):\n        return [get_dist(x, y + 1), get_dist(x, y",
        "test": "",
        "num_ids": 1565,
        "indeed": false
    },
    {
        "number": 4740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 7 == 0:\n        return '1'\n    else:\n        return '0'\n\ndef",
        "test": "",
        "num_ids": 37,
        "indeed": false
    },
    {
        "number": 4741,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 0:\n        return str(b)\n    else:\n        return str(b) + \"-\" + str(a)\n",
        "test": "",
        "num_ids": 49,
        "indeed": false
    },
    {
        "number": 4742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = []\n    for i in range(n):\n        m.append(list(map(int, input().split())))\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 1:\n                m[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if m[j][i] == 1:\n                m[j][i] = -1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == -1:\n                m[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 0:\n                m[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 1:\n                m[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == -1:\n                m[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 0:\n                m[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 1:\n                m[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == -1:\n                m[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 0:\n                m[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 1:\n                m[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == -1:\n                m[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 0:\n                m[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 1:\n                m[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == -1:\n                m[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 0:\n                m[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 1:\n                m[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == -1:\n                m[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 0:\n                m[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 1:\n                m[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == -1:\n                m[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 0:\n                m[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 1:\n                m[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == -1:\n                m[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 0:\n                m[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 1:\n                m[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == -1:\n                m[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 0:\n                m[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 1:\n                m[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == -1:\n                m[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 0:\n                m[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 1:\n                m[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == -1:\n                m[i][j]",
        "test": "",
        "num_ids": 1383,
        "indeed": false
    },
    {
        "number": 4743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin.split(), key=lambda x: x.lower()))\n\nSample Input 4:\nI love ba-na-na\nSample Output 4:\nI love ba-na-na\n\nSample Input 5:\nI love ba-na-na\nSample Output 5:\nI love ba-na-na\n\nSample Input 6:\nI love ba-na-na\nSample Output 6:\nI love ba-na-na\n\nSample Input 7:\nI love ba-na-na\nSample Output 7:\nI love ba-na-na\n\nSample Input 8:\nI love ba-na-na\nSample Output 8:\nI love ba-na-na\n\nSample Input 9:\nI love ba-na-na\nSample Output 9:\nI love ba-na-na\n\nSample Input 10:\nI love ba-na-na\nSample Output 10:\nI love ba-na-na\n\nSample Input 11:\nI love ba-na-na\nSample Output 11:\nI love ba-na-na\n\nSample Input 12:\nI love ba-na-na\nSample Output 12:\nI love ba-na-na\n\nSample Input 13:\nI love ba-na-na\nSample Output 13:\nI love ba-na-na\n\nSample Input 14:\nI love ba-na-na\nSample Output 14:\nI love ba-na-na\n\nSample Input 15:\nI love ba-na-na\nSample Output 15:\nI love ba-na-na\n\nSample Input 16:\nI love ba-na-na\nSample Output 16:\nI love ba-na-na\n\nSample Input 17:\nI love ba-na-na\nSample Output 17:\nI love ba-na-na\n\nSample Input 18:\nI love ba-na-na\nSample Output 18:\nI love ba-na-na\n\nSample Input 19:\nI love ba-na-na\nSample Output 19:\nI love ba-na-na\n\nSample Input 20:\nI love ba-na-na\nSample Output 20:\nI love ba-na-na\n\nSample Input 21:\nI love ba-na-na\nSample Output 21:\nI love ba-na-na\n\nSample Input 22:\nI love ba-na-na\nSample Output 22:\nI love ba-na-na\n\nSample Input 23:\nI love ba-na-na\nSample Output 23:\nI love ba-na-na\n\nSample Input 24:\nI love ba-na-na\nSample Output 24:\nI love ba-na-na\n\nSample Input 25:\nI love ba-na-na\nSample Output 25:\nI love ba-na-na\n\nSample Input 26:\nI love ba-na-na\nSample Output 26:\nI love ba-na-na\n\nSample Input 27:\nI love ba-na-na\nSample Output 27:\nI love ba-na-na\n\nSample Input 28:\nI love ba-na-na\nSample Output 28:\nI love ba-na-na\n\nSample Input 29:\nI love ba-na-na\nSample Output 29:\nI love ba-na-na\n\nSample Input 30:\nI love ba-na-na\nSample Output 30:\nI love ba-na-na\n\nSample Input 31:\nI love ba-na-na\nSample Output 31:\nI love ba-na-na\n\nSample Input 32:\nI love ba-na-na\nSample Output 32:\nI love ba-na-na\n\nSample Input 33:\nI love ba-na-na\nSample Output 33:\nI love ba-na-na\n\nSample Input 34:\nI love ba-na-na\nSample Output 34:\nI love ba-na-na\n\nSample Input 35:\nI love ba-na-na\nSample Output 35:\nI love ba-na-na\n\nSample Input 36:\nI love ba-na-na\nSample Output 36:\nI love ba-na-na\n\nSample Input 37:\nI love ba-na-na\nSample Output 37:\nI love ba-na-na\n\nSample Input 38:\nI love ba-na-na\nSample Output 38:\nI love ba-na-na\n\nSample Input 39:\nI love ba-na-na\nSample Output 39:\nI love ba-na-na\n\nSample Input 40:\nI love ba-na-na\nSample Output 40:\nI love ba-na-na\n\nSample Input 41:\nI love ba-na-na\nSample Output 41:\nI love ba-na-na\n\nSample Input 42:\nI love ba-na-na\nSample Output 42:\nI love ba-na-na\n\nSample Input 43:\nI love ba-na-na\nSample Output 43:\nI love ba-na-na\n\nSample Input 44:\nI love ba-na-na\nSample Output 44:\nI love ba-na-na\n\nSample Input 45:\nI love ba-na-na\nSample Output 45:\nI love ba-na-na\n\nSample Input 46:\nI love ba-na-na\nSample Output 46:\nI love ba-na-na\n\nSample Input 47:\nI love ba-na-na\nSample Output 47:\nI love ba-na-na\n\nSample Input 48:\nI love ba-na-na\nSample Output 48:\nI love ba-na-na\n\nSample Input 49:\nI love ba-na-na\nSample Output 49:\nI love ba-na-na\n\nSample Input 50:\nI love ba-na-na\nSample Output 50:\nI love ba-na-na\n\nSample Input 51:\nI love ba-na-na\nSample Output 51:\nI love ba-na-na\n\nSample Input 52:\nI love ba-na-na\nSample Output 52:\nI love ba-na-na\n\nSample Input 53:\nI love ba-na-na\nSample Output 53:\nI love ba-na-na\n\nSample Input 54:\nI love ba-na-na\nSample Output 54:\nI love ba-na-na\n\nSample Input 55:\nI love ba-na-na\nSample Output 55:\nI love ba-na-na\n\nSample Input 56:\nI love ba-na-na\nSample Output 56:\nI love ba-na-na\n\nSample Input 57:\nI love ba-na-na\nSample Output 57:\nI love ba-na-na\n\nSample Input 58:\nI love ba-na-na\nSample Output 58:\nI love ba-na-na",
        "test": "",
        "num_ids": 1510,
        "indeed": false
    },
    {
        "number": 4744,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:\n        return \"117\"\n    if n == 118:\n        return \"118\"\n    if n == 119:\n        return \"119\"\n    if n == 120:\n        return \"120\"\n    if n == 121:\n        return \"121\"\n    if n == 122:\n        return \"122\"\n    if n == 123:\n        return \"123\"\n    if n == 124:\n        return \"124\"\n    if n == 125:\n        return \"125\"\n    if n == 126:\n        return \"126\"\n    if n == 127:\n        return \"127\"\n    if n == 128:\n        return \"128\"\n    if n == 129:\n        return \"129\"\n    if n == 130:",
        "test": "",
        "num_ids": 1693,
        "indeed": false
    },
    {
        "number": 4745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    if n < 10**9:\n        return str(n)\n    if n < 10**9:\n        return str(n) +'' + solution(stdin +'' + str(x))\n    if n < 10**9:\n        return str(n) +'' + solution(stdin +'' + str(x) +'' + str(x))\n    if n < 10**9:\n        return str(n) +'' + solution(stdin +'' + str(x) +'' + str(x) +'' + str(x))\n",
        "test": "",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 4746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, capacity, people, stations = map(int, stdin.split())\n    if n < capacity or people < 0 or stations < 0:\n        return \"impossible\"\n    \n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.\n    # The number of people in the train is the same as the number of stations.",
        "test": "",
        "num_ids": 1563,
        "indeed": false
    },
    {
        "number": 4747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(round(sum(map(lambda x: (x**(1/k))/(1+x), range(1, n+1)))/(1+k), 2))\n\ndef",
        "test": "",
        "num_ids": 61,
        "indeed": false
    },
    {
        "number": 4748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 0 and m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0",
        "test": "",
        "num_ids": 1585,
        "indeed": false
    },
    {
        "number": 4749,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    grid = []\n    for _ in range(n):\n        grid.append(stdin.strip().split())\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                grid[i][j] = 'W'\n            elif grid[i][j] == 'W':\n                grid[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] ==",
        "test": "",
        "num_ids": 1722,
        "indeed": false
    },
    {
        "number": 4750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip().split()[0])\n    for _ in range(q):\n        l, r = map(int, stdin.strip().split())\n        print(l, r)\n        print(l, r, l < r)\n        print(l, r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r)\n        print(l, r, l < r, l < r, l < r",
        "test": "",
        "num_ids": 1477,
        "indeed": false
    },
    {
        "number": 4751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    head = list(map(int, stdin.split()))\n    pos = -1\n    for i in range(len(head)):\n        if head[i] == -1:\n            pos = i\n            break\n    if pos == -1:\n        return \"No cycle\"\n    else:\n        slow = head[pos]\n        fast = head[pos]\n        while fast!= slow:\n            slow = head[slow]\n            fast = head[fast]\n        return \"Yes\"\n",
        "test": "",
        "num_ids": 119,
        "indeed": false
    },
    {
        "number": 4752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    target = int(stdin.split()[1])\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return []\n\ndef",
        "test": "",
        "num_ids": 95,
        "indeed": false
    },
    {
        "number": 4753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 1:\n        return \"0\"\n    if N == 2:\n        return \"1\"\n    if N == 3:\n        return \"2\"\n    if N == 4:\n        return \"3\"\n    if N == 5:\n        return \"4\"\n    if N == 6:\n        return \"5\"\n    if N == 7:\n        return \"6\"\n    if N == 8:\n        return \"7\"\n    if N == 9:\n        return \"8\"\n    if N == 10:\n        return \"9\"\n    if N == 11:\n        return \"10\"\n    if N == 12:\n        return \"11\"\n    if N == 13:\n        return \"12\"\n    if N == 14:\n        return \"13\"\n    if N == 15:\n        return \"14\"\n    if N == 16:\n        return \"15\"\n    if N == 17:\n        return \"16\"\n    if N == 18:\n        return \"17\"\n    if N == 19:\n        return \"18\"\n    if N == 20:\n        return \"19\"\n    if N == 21:\n        return \"20\"\n    if N == 22:\n        return \"21\"\n    if N == 23:\n        return \"22\"\n    if N == 24:\n        return \"23\"\n    if N == 25:\n        return \"24\"\n    if N == 26:\n        return \"25\"\n    if N == 27:\n        return \"26\"\n    if N == 28:\n        return \"27\"\n    if N == 29:\n        return \"28\"\n    if N == 30:\n        return \"29\"\n    if N == 31:\n        return \"30\"\n    if N == 32:\n        return \"31\"\n    if N == 33:\n        return \"32\"\n    if N == 34:\n        return \"33\"\n    if N == 35:\n        return \"34\"\n    if N == 36:\n        return \"35\"\n    if N == 37:\n        return \"36\"\n    if N == 38:\n        return \"37\"\n    if N == 39:\n        return \"38\"\n    if N == 40:\n        return \"39\"\n    if N == 41:\n        return \"40\"\n    if N == 42:\n        return \"41\"\n    if N == 43:\n        return \"42\"\n    if N == 44:\n        return \"43\"\n    if N == 45:\n        return \"44\"\n    if N == 46:\n        return \"45\"\n    if N == 47:\n        return \"46\"\n    if N == 48:\n        return \"47\"\n    if N == 49:\n        return \"48\"\n    if N == 50:\n        return \"49\"\n    if N == 51:\n        return \"50\"\n    if N == 52:\n        return \"51\"\n    if N == 53:\n        return \"52\"\n    if N == 54:\n        return \"53\"\n    if N == 55:\n        return \"54\"\n    if N == 56:\n        return \"55\"\n    if N == 57:\n        return \"56\"\n    if N == 58:\n        return \"57\"\n    if N == 59:\n        return \"58\"\n    if N == 60:\n        return \"59\"\n    if N == 61:\n        return \"60\"\n    if N == 62:\n        return \"61\"\n    if N == 63:\n        return \"62\"\n    if N == 64:\n        return \"63\"\n    if N == 65:\n        return \"64\"\n    if N == 66:\n        return \"65\"\n    if N == 67:\n        return \"66\"\n    if N == 68:\n        return \"67\"\n    if N == 69:\n        return \"68\"\n    if N == 70:\n        return \"69\"\n    if N == 71:\n        return \"70\"\n    if N == 72:\n        return \"71\"\n    if N == 73:\n        return \"72\"\n    if N == 74:\n        return \"73\"\n    if N == 75:\n        return \"74\"\n    if N == 76:\n        return \"75\"\n    if N == 77:\n        return \"76\"\n    if N == 78:\n        return \"77\"\n    if N == 79:\n        return \"78\"\n    if N == 80:\n        return \"79\"\n    if N == 81:\n        return \"80\"\n    if N == 82:\n        return \"81\"\n    if N == 83:\n        return \"82\"\n    if N == 84:\n        return \"83\"\n    if N == 85:\n        return \"84\"\n    if N == 86:\n        return \"85\"\n    if N == 87:\n        return \"86\"\n    if N == 88:\n        return \"87\"\n    if N == 89:\n        return \"88\"\n    if N == 90:\n        return \"89\"\n    if N == 91:\n        return \"90\"\n    if N == 92:\n        return \"91\"\n    if N == 93:\n        return \"92\"\n    if N == 94:\n        return \"93\"\n    if N == 95:\n        return \"94\"\n    if N == 96:\n        return \"95\"\n    if N == 97:\n        return \"96\"\n    if N == 98:\n        return \"97\"\n    if N == 99:\n        return \"98\"\n    if N == 100:\n        return \"99\"\n    if N == 101:\n        return \"100\"\n    if N == 102:\n        return \"101\"\n    if N == 103:\n        return \"102\"\n    if N == 104:\n        return \"103\"\n    if N == 105:\n        return \"104\"\n    if N == 106:\n        return \"105\"\n    if N == 107:\n        return \"106\"\n    if N == 108:\n        return \"107\"\n    if N == 109:\n        return \"108\"\n    if N == 110:\n        return \"109\"\n    if N == 111:\n        return \"110\"\n    if N == 112:\n        return \"111\"\n    if N == 113:\n        return \"112\"\n    if N == 114:\n        return \"113\"\n    if N == 115:\n        return \"114\"\n    if N == 116:\n        return \"115\"\n    if N == 117:\n        return \"116\"\n    if N == 118:\n        return \"117\"\n    if N == 119:\n        return \"118\"\n    if N == 120:\n        return \"119\"\n    if N == 121:\n        return \"120\"\n    if N == 122:\n        return \"121\"\n    if N == 123:\n        return \"122\"\n    if N == 124:\n        return \"123\"\n    if N == 125:\n        return \"124\"\n    if N == 126:\n        return \"125\"\n    if N == 127:\n        return \"126\"\n    if N == 128:\n        return \"127\"\n    if N == 129:\n        return \"128\"\n    if N == 130:\n        return \"129\"\n    if N == 131:\n        return \"130\"\n    if N == 132:\n        return \"131\"\n    if N == 133:\n        return \"132\"\n    if N == 134:\n        return \"133\"\n    if N == 135:\n        return \"134\"\n    if N == 136:\n        return \"135\"\n    if N == 137:\n        return \"136\"\n    if N == 138:\n        return \"137\"\n    if N == 139:\n        return \"138\"\n    if N == 140:\n        return \"139\"\n    if N == 141:\n        return \"140\"\n    if N == 142:\n        return \"141\"\n    if N == 143:\n",
        "test": "",
        "num_ids": 1865,
        "indeed": false
    },
    {
        "number": 4754,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n",
        "test": "",
        "num_ids": 1544,
        "indeed": false
    },
    {
        "number": 4755,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    candy = list(map(int, stdin.split()))\n    candy.sort()\n    answer = 0\n    for i in range(n):\n        answer += candy[i] * (10 ** i)\n    return str(answer)\n",
        "test": "",
        "num_ids": 71,
        "indeed": false
    },
    {
        "number": 4756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(int, stdin.strip().split()))\n    y = list(map(int, stdin.strip().split()))\n    x.sort()\n    y.sort()\n    a = 0\n    for i in range(n):\n        a += (x[i] - y[i])**2\n    return str(abs(a))\n",
        "test": "",
        "num_ids": 99,
        "indeed": false
    },
    {
        "number": 4757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, E = map(int, stdin.split())\n    villagers = []\n    for _ in range(N):\n        villagers.append(int(stdin.split()[0]))\n    villagers.sort()\n    for _ in range(E):\n        villagers.sort(reverse=True)\n    for i in range(N):\n        if i == 0:\n            print(villagers[i])\n        else:\n            print(villagers[i], end=\" \")\n",
        "test": "",
        "num_ids": 118,
        "indeed": false
    },
    {
        "number": 4758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, m = map(int, stdin.split())\n    return str(n*t*m)\n\ndef",
        "test": "",
        "num_ids": 31,
        "indeed": false
    },
    {
        "number": 4759,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '3'\n    elif n == 4:\n        return '4'\n    else:\n        return '{:.2f}'.format(n/3)\n\nSample Input 3:\n3\n-1 4 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -",
        "test": "",
        "num_ids": 1404,
        "indeed": false
    },
    {
        "number": 4760,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % k!= 0:\n        return '0'\n    else:\n        return str(n // k)\n\nSample Input 3:\n5\nSample Output 3:\n5\n\nSample Input 4:\n1\nSample Output 4:\n1\n\nSample Input 5:\n1\nSample Output 5:\n1\n\nSample Input 6:\n1\nSample Output 6:\n1\n\nSample Input 7:\n1\nSample Output 7:\n1\n\nSample Input 8:\n1\nSample Output 8:\n1\n\nSample Input 9:\n1\nSample Output 9:\n1\n\nSample Input 10:\n1\nSample Output 10:\n1\n\nSample Input 11:\n1\nSample Output 11:\n1\n\nSample Input 12:\n1\nSample Output 12:\n1\n\nSample Input 13:\n1\nSample Output 13:\n1\n\nSample Input 14:\n1\nSample Output 14:\n1\n\nSample Input 15:\n1\nSample Output 15:\n1\n\nSample Input 16:\n1\nSample Output 16:\n1\n\nSample Input 17:\n1\nSample Output 17:\n1\n\nSample Input 18:\n1\nSample Output 18:\n1\n\nSample Input 19:\n1\nSample Output 19:\n1\n\nSample Input 20:\n1\nSample Output 20:\n1\n\nSample Input 21:\n1\nSample Output 21:\n1\n\nSample Input 22:\n1\nSample Output 22:\n1\n\nSample Input 23:\n1\nSample Output 23:\n1\n\nSample Input 24:\n1\nSample Output 24:\n1\n\nSample Input 25:\n1\nSample Output 25:\n1\n\nSample Input 26:\n1\nSample Output 26:\n1\n\nSample Input 27:\n1\nSample Output 27:\n1\n\nSample Input 28:\n1\nSample Output 28:\n1\n\nSample Input 29:\n1\nSample Output 29:\n1\n\nSample Input 30:\n1\nSample Output 30:\n1\n\nSample Input 31:\n1\nSample Output 31:\n1\n\nSample Input 32:\n1\nSample Output 32:\n1\n\nSample Input 33:\n1\nSample Output 33:\n1\n\nSample Input 34:\n1\nSample Output 34:\n1\n\nSample Input 35:\n1\nSample Output 35:\n1\n\nSample Input 36:\n1\nSample Output 36:\n1\n\nSample Input 37:\n1\nSample Output 37:\n1\n\nSample Input 38:\n1\nSample Output 38:\n1\n\nSample Input 39:\n1\nSample Output 39:\n1\n\nSample Input 40:\n1\nSample Output 40:\n1\n\nSample Input 41:\n1\nSample Output 41:\n1\n\nSample Input 42:\n1\nSample Output 42:\n1\n\nSample Input 43:\n1\nSample Output 43:\n1\n\nSample Input 44:\n1\nSample Output 44:\n1\n\nSample Input 45:\n1\nSample Output 45:\n1\n\nSample Input 46:\n1\nSample Output 46:\n1\n\nSample Input 47:\n1\nSample Output 47:\n1\n\nSample Input 48:\n1\nSample Output 48:\n1\n\nSample Input 49:\n1\nSample Output 49:\n1\n\nSample Input 50:\n1\nSample Output 50:\n1\n\nSample Input 51:\n1\nSample Output 51:\n1\n\nSample Input 52:\n1\nSample Output 52:\n1\n\nSample Input 53:\n1\nSample Output 53:\n1\n\nSample Input 54:\n1\nSample Output 54:\n1\n\nSample Input 55:\n1\nSample Output 55:\n1\n\nSample Input 56:\n1\nSample Output 56:\n1\n\nSample Input 57:\n1\nSample Output 57:\n1\n\nSample Input 58:\n1\nSample Output 58:\n1\n\nSample Input 59:\n1\nSample Output 59:\n1\n\nSample Input 60:\n1\nSample Output 60:\n1\n\nSample Input 61:\n1\nSample Output 61:\n1\n\nSample Input 62:\n1\nSample Output 62:\n1\n\nSample Input 63:\n1\nSample Output 63:\n1\n\nSample Input 64:\n1\nSample Output 64:\n1\n\nSample Input 65:\n1\nSample Output 65:\n1\n\nSample Input 66:\n1\nSample Output 66:\n1\n\nSample Input 67:\n1\nSample Output 67:\n1\n\nSample Input 68:\n1\nSample Output 68:\n1\n\nSample Input 69:\n1\nSample Output 69:\n1\n\nSample Input 70:\n1\nSample Output 70:\n1\n\nSample Input 71:\n1\nSample Output 71:\n1\n\nSample Input 72:\n1\nSample Output 72:\n1\n\nSample Input 73:\n1\nSample Output 73:\n1\n\nSample Input 74:\n1\nSample Output 74:\n1\n\nSample Input 75:\n1\nSample Output 75:\n1\n\nSample Input 76:\n1\nSample Output 76:\n1\n\nSample Input 77:\n1\nSample Output 77:\n1\n\nSample Input 78:\n1\nSample Output 78:\n1\n\nSample Input 79:\n1\nSample Output 79:\n1\n\nSample Input 80:\n1\nSample Output 80:\n1\n\nSample Input 81:\n1\nSample Output 81:\n1\n\nSample Input 82:\n1\nSample Output 82:\n1\n\nSample Input 83:\n1\nSample Output 83:\n1\n\nSample Input 84:\n1\nSample Output 84:\n1\n\nSample Input 85:\n1\nSample Output 85:\n1\n\nSample Input 86:\n1\nSample Output 86:\n1\n\nSample Input 87:\n1\nSample Output 87:\n1\n\nSample Input 88:\n1\nSample Output 88:\n1\n\nSample Input 89:\n1\nSample Output 89:\n1\n\nSample Input 90:\n1\nSample Output 90:\n1\n\nSample Input 91:\n1\nSample Output 91:\n1\n\nSample Input 92:\n1\nSample Output 92:\n1\n\nSample Input 93:\n1\nSample Output 93:\n1\n\nSample Input 94:\n1\nSample Output 94:\n1\n\nSample Input 95:\n1\nSample Output 95:\n1\n\nSample Input 96:\n1\nSample Output 96:\n1\n\nSample Input 97:\n1\nSample Output 97:\n1\n\nSample Input 98:\n1\nSample Output 98:\n1\n\nSample Input 99:\n1\nSample Output 99:\n1\n\nSample Input 100:\n1\nSample Output 100:\n1\n\nSample Input 101:\n1\nSample Output 101:\n1\n\nSample Input 102:\n1\nSample Output 102:\n1\n\nSample Input 103:\n1\nSample Output 103:\n1\n\nSample Input 104:\n1\nSample Output 104:\n1\n\nSample Input 105:\n1\nSample Output 105:\n1\n\nSample Input 106:\n1\nSample Output 106:\n1\n\nSample Input 107:\n1\nSample Output 107:\n1\n\nSample Input 108:\n1\nSample Output 108:\n1\n\nSample Input 109:\n1\nSample Output 109:\n1\n\nSample Input 110:\n1\nSample Output 110:\n1\n\nSample Input 111:\n1\nSample Output 111:\n1\n\nSample Input 112:\n1\nSample Output 112:\n1\n\nSample Input 113:\n1\nSample Output 113:\n1\n\nSample Input 114:\n1\nSample Output 114:\n1\n\nSample Input 115:\n1\nSample Output 115:\n1\n\nSample Input 116:\n1\nSample Output 116:\n1\n\nSample Input 117:\n1\nSample Output 117:\n1\n\nSample Input 118:\n1\nSample Output 118:\n1\n\nSample Input 119:\n1\nSample Output 119:\n1\n\nSample Input 120:\n1\nSample Output 120:\n1\n\nSample Input 121:\n1\n",
        "test": "",
        "num_ids": 1823,
        "indeed": false
    },
    {
        "number": 4761,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(L: int, H: int) -> int:\n        if L > H:\n            return 0\n        if L == H:\n            return 1\n        if L % 2 == 0:\n            return solve(L + 1, H)\n        else:\n            return solve(L, H - 1) + solve(L, H)\n    return solve(int(stdin[0]), int(stdin[1]))\n\nSample Input 3:\n12345\nSample Output 3:\n1\n\nSample Input 4:\n12345\nSample Output 4:\n0\n\nSample Input 5:\n12345\nSample Output 5:\n0\n\nSample Input 6:\n12345\nSample Output 6:\n0\n\nSample Input 7:\n12345\nSample Output 7:\n0\n\nSample Input 8:\n12345\nSample Output 8:\n0\n\nSample Input 9:\n12345\nSample Output 9:\n0\n\nSample Input 10:\n12345\nSample Output 10:\n0\n\nSample Input 11:\n12345\nSample Output 11:\n0\n\nSample Input 12:\n12345\nSample Output 12:\n0\n\n-----Constraints-----\n1 <= L <= H <= 10^9\n\n-----Time Limit: 1 sec (py3)-----\nTime Limit: 1 sec (py3)\n\n-----Efficiency-----\nTime Limit: 1 sec (py3)\n\n-----Space Leakage-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime Limit: 1 sec (py3)\n\n-----Division by Zero-----\nTime",
        "test": "",
        "num_ids": 1514,
        "indeed": false
    },
    {
        "number": 4762,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '1'\n    if n == 3:\n        return '1'\n    if n == 4:\n        return '1'\n    if n == 5:\n        return '1'\n    if n == 6:\n        return '1'\n    if n == 7:\n        return '1'\n    if n == 8:\n        return '1'\n    if n == 9:\n        return '1'\n    if n == 10:\n        return '1'\n    if n == 11:\n        return '1'\n    if n == 12:\n        return '1'\n    if n == 13:\n        return '1'\n    if n == 14:\n        return '1'\n    if n == 15:\n        return '1'\n    if n == 16:\n        return '1'\n    if n == 17:\n        return '1'\n    if n == 18:\n        return '1'\n    if n == 19:\n        return '1'\n    if n == 20:\n        return '1'\n    if n == 21:\n        return '1'\n    if n == 22:\n        return '1'\n    if n == 23:\n        return '1'\n    if n == 24:\n        return '1'\n    if n == 25:\n        return '1'\n    if n == 26:\n        return '1'\n    if n == 27:\n        return '1'\n    if n == 28:\n        return '1'\n    if n == 29:\n        return '1'\n    if n == 30:\n        return '1'\n    if n == 31:\n        return '1'\n    if n == 32:\n        return '1'\n    if n == 33:\n        return '1'\n    if n == 34:\n        return '1'\n    if n == 35:\n        return '1'\n    if n == 36:\n        return '1'\n    if n == 37:\n        return '1'\n    if n == 38:\n        return '1'\n    if n == 39:\n        return '1'\n    if n == 40:\n        return '1'\n    if n == 41:\n        return '1'\n    if n == 42:\n        return '1'\n    if n == 43:\n        return '1'\n    if n == 44:\n        return '1'\n    if n == 45:\n        return '1'\n    if n == 46:\n        return '1'\n    if n == 47:\n        return '1'\n    if n == 48:\n        return '1'\n    if n == 49:\n        return '1'\n    if n == 50:\n        return '1'\n    if n == 51:\n        return '1'\n    if n == 52:\n        return '1'\n    if n == 53:\n        return '1'\n    if n == 54:\n        return '1'\n    if n == 55:\n        return '1'\n    if n == 56:\n        return '1'\n    if n == 57:\n        return '1'\n    if n == 58:\n        return '1'\n    if n == 59:\n        return '1'\n    if n == 60:\n        return '1'\n    if n == 61:\n        return '1'\n    if n == 62:\n        return '1'\n    if n == 63:\n        return '1'\n    if n == 64:\n        return '1'\n    if n == 65:\n        return '1'\n    if n == 66:\n        return '1'\n    if n == 67:\n        return '1'\n    if n == 68:\n        return '1'\n    if n == 69:\n        return '1'\n    if n == 70:\n        return '1'\n    if n == 71:\n        return '1'\n    if n == 72:\n        return '1'\n    if n == 73:\n        return '1'\n    if n == 74:\n        return '1'\n    if n == 75:\n        return '1'\n    if n == 76:\n        return '1'\n    if n == 77:\n        return '1'\n    if n == 78:\n        return '1'\n    if n == 79:\n        return '1'\n    if n == 80:\n        return '1'\n    if n == 81:\n        return '1'\n    if n == 82:\n        return '1'\n    if n == 83:\n        return '1'\n    if n == 84:\n        return '1'\n    if n == 85:\n        return '1'\n    if n == 86:\n        return '1'\n    if n == 87:\n        return '1'\n    if n == 88:\n        return '1'\n    if n == 89:\n        return '1'\n    if n == 90:\n        return '1'\n    if n == 91:\n        return '1'\n    if n == 92:\n        return '1'\n    if n == 93:\n        return '1'\n    if n == 94:\n        return '1'\n    if n == 95:\n        return '1'\n    if n == 96:\n        return '1'\n    if n == 97:\n        return '1'\n    if n == 98:\n        return '1'\n    if n == 99:\n        return '1'\n    if n == 100:\n        return '1'\n    if n == 101:\n        return '1'\n    if n == 102:\n        return '1'\n    if n == 103:\n        return '1'\n    if n == 104:\n        return '1'\n    if n == 105:\n        return '1'\n    if n == 106:\n        return '1'\n    if n == 107:\n        return '1'\n    if n == 108:\n        return '1'\n    if n == 109:\n        return '1'\n    if n == 110:\n        return '1'\n    if n == 111:\n        return '1'\n    if n == 112:\n        return '1'\n    if n == 113:\n        return '1'\n    if n == 114:\n        return '1'\n    if n == 115:\n        return '1'\n    if n == 116:\n        return '1'\n    if n == 117:\n        return '1'\n    if n == 118:\n        return '1'\n    if n == 119:\n        return '1'\n    if n == 120:\n        return '1'\n    if n == 121:\n        return '1'\n    if n == 122:\n        return '1'\n    if n == 123:\n        return '1'\n    if n == 124:\n        return '1'\n    if n == 125:\n        return '1'\n    if n == 126:\n        return '1'\n    if n == 127:\n        return '1'\n    if n == 128:\n        return '1'\n    if n == 129:\n        return '1'\n    if n == 130:\n        return '1'\n    if n == 131:\n        return '1'\n    if n == 132:\n        return '1'\n    if n == 133:\n        return '1'\n    if n == 134",
        "test": "",
        "num_ids": 1759,
        "indeed": false
    },
    {
        "number": 4763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"impossible\"\n    if n == 1:\n        return \"triple\"\n    if n == 2:\n        return \"double\"\n    if n == 3:\n        return \"single\"\n    if n == 4:\n        return \"triple\"\n    if n == 5:\n        return \"triple\"\n    if n == 6:\n        return \"triple\"\n    if n == 7:\n        return \"triple\"\n    if n == 8:\n        return \"triple\"\n    if n == 9:\n        return \"triple\"\n    if n == 10:\n        return \"triple\"\n    if n == 11:\n        return \"triple\"\n    if n == 12:\n        return \"triple\"\n    if n == 13:\n        return \"triple\"\n    if n == 14:\n        return \"triple\"\n    if n == 15:\n        return \"triple\"\n    if n == 16:\n        return \"triple\"\n    if n == 17:\n        return \"triple\"\n    if n == 18:\n        return \"triple\"\n    if n == 19:\n        return \"triple\"\n    if n == 20:\n        return \"triple\"\n    if n == 21:\n        return \"triple\"\n    if n == 22:\n        return \"triple\"\n    if n == 23:\n        return \"triple\"\n    if n == 24:\n        return \"triple\"\n    if n == 25:\n        return \"triple\"\n    if n == 26:\n        return \"triple\"\n    if n == 27:\n        return \"triple\"\n    if n == 28:\n        return \"triple\"\n    if n == 29:\n        return \"triple\"\n    if n == 30:\n        return \"triple\"\n    if n == 31:\n        return \"triple\"\n    if n == 32:\n        return \"triple\"\n    if n == 33:\n        return \"triple\"\n    if n == 34:\n        return \"triple\"\n    if n == 35:\n        return \"triple\"\n    if n == 36:\n        return \"triple\"\n    if n == 37:\n        return \"triple\"\n    if n == 38:\n        return \"triple\"\n    if n == 39:\n        return \"triple\"\n    if n == 40:\n        return \"triple\"\n    if n == 41:\n        return \"triple\"\n    if n == 42:\n        return \"triple\"\n    if n == 43:\n        return \"triple\"\n    if n == 44:\n        return \"triple\"\n    if n == 45:\n        return \"triple\"\n    if n == 46:\n        return \"triple\"\n    if n == 47:\n        return \"triple\"\n    if n == 48:\n        return \"triple\"\n    if n == 49:\n        return \"triple\"\n    if n == 50:\n        return \"triple\"\n    if n == 51:\n        return \"triple\"\n    if n == 52:\n        return \"triple\"\n    if n == 53:\n        return \"triple\"\n    if n == 54:\n        return \"triple\"\n    if n == 55:\n        return \"triple\"\n    if n == 56:\n        return \"triple\"\n    if n == 57:\n        return \"triple\"\n    if n == 58:\n        return \"triple\"\n    if n == 59:\n        return \"triple\"\n    if n == 60:\n        return \"triple\"\n    if n == 61:\n        return \"triple\"\n    if n == 62:\n        return \"triple\"\n    if n == 63:\n        return \"triple\"\n    if n == 64:\n        return \"triple\"\n    if n == 65:\n        return \"triple\"\n    if n == 66:\n        return \"triple\"\n    if n == 67:\n        return \"triple\"\n    if n == 68:\n        return \"triple\"\n    if n == 69:\n        return \"triple\"\n    if n == 70:\n        return \"triple\"\n    if n == 71:\n        return \"triple\"\n    if n == 72:\n        return \"triple\"\n    if n == 73:\n        return \"triple\"\n    if n == 74:\n        return \"triple\"\n    if n == 75:\n        return \"triple\"\n    if n == 76:\n        return \"triple\"\n    if n == 77:\n        return \"triple\"\n    if n == 78:\n        return \"triple\"\n    if n == 79:\n        return \"triple\"\n    if n == 80:\n        return \"triple\"\n    if n == 81:\n        return \"triple\"\n    if n == 82:\n        return \"triple\"\n    if n == 83:\n        return \"triple\"\n    if n == 84:\n        return \"triple\"\n    if n == 85:\n        return \"triple\"\n    if n == 86:\n        return \"triple\"\n    if n == 87:\n        return \"triple\"\n    if n == 88:\n        return \"triple\"\n    if n == 89:\n        return \"triple\"\n    if n == 90:\n        return \"triple\"\n    if n == 91:\n        return \"triple\"\n    if n == 92:\n        return \"triple\"\n    if n == 93:\n        return \"triple\"\n    if n == 94:\n        return \"triple\"\n    if n == 95:\n        return \"triple\"\n    if n == 96:\n        return \"triple\"\n    if n == 97:\n        return \"triple\"\n    if n == 98:\n        return \"triple\"\n    if n == 99:\n        return \"triple\"\n    if n == 100:\n        return \"triple\"\n    if n == 101:\n        return \"triple\"\n    if n == 102:\n        return \"triple\"\n    if n == 103:\n        return \"triple\"\n    if n == 104:\n        return \"triple\"\n    if n == 105:\n        return \"triple\"\n    if n == 106:\n        return \"triple\"\n    if n == 107:\n        return \"triple\"\n    if n == 108:\n        return \"triple\"\n    if n == 109:\n        return \"triple\"\n    if n == 110:\n        return \"triple\"\n    if n == 111:\n        return \"triple\"\n    if n == 112:\n        return \"triple\"\n    if n == 113:\n        return \"triple\"\n    if n == 114:\n        return \"triple\"\n    if n == 115:\n        return \"triple\"\n    if n == 116:\n        return \"triple\"\n    if n == 117:\n        return \"triple\"\n    ",
        "test": "",
        "num_ids": 1661,
        "indeed": false
    },
    {
        "number": 4764,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, v = map(int, stdin.split())\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '0'\n    if n == 3:\n        return '0'\n    if n == 4:\n        return '0'\n    if n == 5:\n        return '0'\n    if n == 6:\n        return '0'\n    if n == 7:\n        return '0'\n    if n == 8:\n        return '0'\n    if n == 9:\n        return '0'\n    if n == 10:\n        return '0'\n    if n == 11:\n        return '0'\n    if n == 12:\n        return '0'\n    if n == 13:\n        return '0'\n    if n == 14:\n        return '0'\n    if n == 15:\n        return '0'\n    if n == 16:\n        return '0'\n    if n == 17:\n        return '0'\n    if n == 18:\n        return '0'\n    if n == 19:\n        return '0'\n    if n == 20:\n        return '0'\n    if n == 21:\n        return '0'\n    if n == 22:\n        return '0'\n    if n == 23:\n        return '0'\n    if n == 24:\n        return '0'\n    if n == 25:\n        return '0'\n    if n == 26:\n        return '0'\n    if n == 27:\n        return '0'\n    if n == 28:\n        return '0'\n    if n == 29:\n        return '0'\n    if n == 30:\n        return '0'\n    if n == 31:\n        return '0'\n    if n == 32:\n        return '0'\n    if n == 33:\n        return '0'\n    if n == 34:\n        return '0'\n    if n == 35:\n        return '0'\n    if n == 36:\n        return '0'\n    if n == 37:\n        return '0'\n    if n == 38:\n        return '0'\n    if n == 39:\n        return '0'\n    if n == 40:\n        return '0'\n    if n == 41:\n        return '0'\n    if n == 42:\n        return '0'\n    if n == 43:\n        return '0'\n    if n == 44:\n        return '0'\n    if n == 45:\n        return '0'\n    if n == 46:\n        return '0'\n    if n == 47:\n        return '0'\n    if n == 48:\n        return '0'\n    if n == 49:\n        return '0'\n    if n == 50:\n        return '0'\n    if n == 51:\n        return '0'\n    if n == 52:\n        return '0'\n    if n == 53:\n        return '0'\n    if n == 54:\n        return '0'\n    if n == 55:\n        return '0'\n    if n == 56:\n        return '0'\n    if n == 57:\n        return '0'\n    if n == 58:\n        return '0'\n    if n == 59:\n        return '0'\n    if n == 60:\n        return '0'\n    if n == 61:\n        return '0'\n    if n == 62:\n        return '0'\n    if n == 63:\n        return '0'\n    if n == 64:\n        return '0'\n    if n == 65:\n        return '0'\n    if n == 66:\n        return '0'\n    if n == 67:\n        return '0'\n    if n == 68:\n        return '0'\n    if n == 69:\n        return '0'\n    if n == 70:\n        return '0'\n    if n == 71:\n        return '0'\n    if n == 72:\n        return '0'\n    if n == 73:\n        return '0'\n    if n == 74:\n        return '0'\n    if n == 75:\n        return '0'\n    if n == 76:\n        return '0'\n    if n == 77:\n        return '0'\n    if n == 78:\n        return '0'\n    if n == 79:\n        return '0'\n    if n == 80:\n        return '0'\n    if n == 81:\n        return '0'\n    if n == 82:\n        return '0'\n    if n == 83:\n        return '0'\n    if n == 84:\n        return '0'\n    if n == 85:\n        return '0'\n    if n == 86:\n        return '0'\n    if n == 87:\n        return '0'\n    if n == 88:\n        return '0'\n    if n == 89:\n        return '0'\n    if n == 90:\n        return '0'\n    if n == 91:\n        return '0'\n    if n == 92:\n        return '0'\n    if n == 93:\n        return '0'\n    if n == 94:\n        return '0'\n    if n == 95:\n        return '0'\n    if n == 96:\n        return '0'\n    if n == 97:\n        return '0'\n    if n == 98:\n        return '0'\n    if n == 99:\n        return '0'\n    if n == 100:\n        return '0'\n    if n == 101:\n        return '0'\n    if n == 102:\n        return '0'\n    if n == 103:\n        return '0'\n    if n == 104:\n        return '0'\n    if n == 105:\n        return '0'\n    if n == 106:\n        return '0'\n    if n == 107:\n        return '0'\n    if n == 108:\n        return '0'\n    if n == 109:\n        return '0'\n    if n == 110:\n        return '0'\n    if n == 111:\n        return '0'\n    if n == 112:\n        return '0'\n    if n == 113:\n        return '0'\n    if n == 114:\n        return '0'\n    if n == 115:\n        return '0'\n    if n == 116:\n        return '0'\n    if n == 117:\n        return '0'\n    if n == 118:\n        return '0'\n    if n == 119:\n        return '0'\n    if n == 120:\n        return '0'\n    if n == 121:\n        return '0'\n    if n == 122:\n        return '0'\n    if n == 123:\n        return '0'\n    if n == 124:\n        return '0'\n    if n == 125:\n        return '0'\n    if n == 126:\n        return '0'\n    if n == 127:\n        return '0'\n    if n == 128:\n        return '0'\n    if n == 129:\n        return '0'\n    if n == 130:\n        return '0'\n    if n == 131:\n        return '0'\n    if n == 132:\n        return '0'\n    ",
        "test": "",
        "num_ids": 1735,
        "indeed": false
    },
    {
        "number": 4765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S, B = map(int, stdin.split())\n    return str(min(S, B)) + \" \" + str(max(S, B))\n",
        "test": "",
        "num_ids": 41,
        "indeed": false
    },
    {
        "number": 4766,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(stdin.split())\n",
        "test": "",
        "num_ids": 12,
        "indeed": false
    },
    {
        "number": 4767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = int(stdin.strip().split()[0])\n    answer = 0\n    for i in range(1, n+1):\n        answer += p\n        p = p * 2\n    return str(answer)\n\nSample Input 3:\n1 2 4 6 10 12 16 18\nSample Output 3:\n4\ndef",
        "test": "",
        "num_ids": 88,
        "indeed": false
    },
    {
        "number": 4768,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    dna = [list(stdin.split()) for _ in range(n)]\n    dna.sort(key=lambda x: len(x))\n    dna = [''.join(x) for x in dna]\n    dna = ''.join(dna)\n    dna = dna.replace('A', '0').replace('T', '1').replace('C', '2').replace('G', '3').replace('-', '0').replace('+', '1').replace('.', '0').replace(' ', '')\n    dna = dna.replace('-', '0').replace('+', '1').replace('.', '0').replace(' ', '')\n    dna = dna.replace('T', '1').replace('C', '2').replace('G', '3').replace('A', '0').replace('-', '0').replace('+', '1').replace('.', '0').replace(' ', '')\n    dna = dna.replace('C', '2').replace('G', '3').replace('A', '0').replace('-', '0').replace('+', '1').replace('.', '0').replace(' ', '')\n    dna = dna.replace('G', '3').replace('A', '0').replace('-', '0').replace('+', '1').replace('.', '0').replace(' ', '')\n    dna = dna.replace('A', '0').replace('T', '1').replace('C', '2').replace('G', '3').replace('A', '1').replace('-', '0').replace('+', '1').replace('.', '0').replace(' ', '')\n    dna = dna.replace('T', '1').replace('C', '2').replace('G', '3').replace('A', '1').replace('-', '0').replace('+', '1').replace('.', '0').replace(' ', '')\n    dna = dna.replace('C', '2').replace('G', '3').replace('A', '1').replace('-', '0').replace('+', '1').replace('.', '0').replace(' ', '')\n    dna = dna.replace('G', '3').replace('A', '1').replace('-', '0').replace('+', '1').replace('.', '0').replace(' ', '')\n    dna = dna.replace('A', '1').replace('T', '0').replace('C', '0').replace('G', '0').replace('A', '0').replace('T', '1').replace('C', '1').replace('G', '2').replace('A', '2').replace('T', '2').replace('C', '3').replace('G', '3').replace('A', '3').replace('T', '3').replace('C', '4').replace('G', '4').replace('A', '4').replace('T', '4').replace('C', '5').replace('G', '5').replace('A', '5').replace('T', '5').replace('C', '6').replace('G', '6').replace('A', '6').replace('T', '6').replace('C', '7').replace('G', '7').replace('A', '7').replace('T', '7').replace('C', '8').replace('G', '8').replace('A', '8').replace('T', '8').replace('C', '9').replace('G', '9').replace('A', '9').replace('T', '9').replace('C', '10').replace('G', '10').replace('A', '10').replace('T', '10').replace('C', '11').replace('G', '11').replace('A', '11').replace('T', '11').replace('C', '12').replace('G', '12').replace('A', '12').replace('T', '12').replace('C', '13').replace('G', '13').replace('A', '13').replace('T', '13').replace('C', '14').replace('G', '14').replace('A', '14').replace('T', '14').replace('C', '15').replace('G', '15').replace('A', '15').replace('T', '15').replace('C', '16').replace('G', '16').replace('A', '16').replace('T', '16').replace('C', '17').replace('G', '17').replace('A', '17').replace('T', '17').replace('C', '18').replace('G', '18').replace('A', '18').replace('T', '18').replace('C', '19').replace('G', '19').replace('A', '19').replace('T', '19').replace('C', '20').replace('G', '20').replace('A', '20').replace('T', '20').replace('C', '21').replace('G', '21').replace('A', '21').replace('T', '21').replace('C', '22').replace('G', '22').replace('A', '22').replace('T', '22').replace('C', '23').replace('G', '23').replace('A', '23').replace('T', '23').replace('C', '24').replace('G', '24').replace('A', '24').replace('T', '24').replace('C', '25').replace('G', '25').replace('A', '25').replace('T', '25').replace('C', '26').replace('G', '26').replace('A', '26').replace('T', '26').replace('C', '27').replace('G', '27').replace('A', '27').replace('T', '27').replace('C', '28').replace('G', '28').replace('A', '28').replace('T', '28').replace('C', '29').replace('G', '29').replace('A', '29').replace('T', '29').replace('C', '30').replace('G', '30').replace('A', '30').replace('T', '30').replace('C', '31').replace('G', '31').replace('A', '31').replace('T', '31').replace('C', '32').replace('G', '32').replace('A', '32').replace('T', '32').replace('C', '33').replace('G',",
        "test": "",
        "num_ids": 1504,
        "indeed": false
    },
    {
        "number": 4769,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.split()\n    if len(word) == 1:\n        return -1\n    if len(word) == 2:\n        return word[0]\n    if len(word) == 3:\n        return word[0] + word[1] + word[2]\n    if len(word) == 4:\n        return word[0] + word[1] + word[2] + word[3]\n    if len(word) == 5:\n        return word[0] + word[1] + word[2] + word[3] + word[4]\n    if len(word) == 6:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5]\n    if len(word) == 7:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6]\n    if len(word) == 8:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7]\n    if len(word) == 9:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8]\n    if len(word) == 10:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8] + word[9]\n    if len(word) == 11:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8] + word[9] + word[10]\n    if len(word) == 12:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8] + word[9] + word[10] + word[11]\n    if len(word) == 13:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8] + word[9] + word[10] + word[11] + word[12]\n    if len(word) == 14:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8] + word[9] + word[10] + word[11] + word[12] + word[13]\n    if len(word) == 15:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8] + word[9] + word[10] + word[11] + word[12] + word[13] + word[14]\n    if len(word) == 16:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8] + word[9] + word[10] + word[11] + word[12] + word[13] + word[14] + word[15]\n    if len(word) == 17:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8] + word[9] + word[10] + word[11] + word[12] + word[13] + word[14] + word[15] + word[16]\n    if len(word) == 18:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8] + word[9] + word[10] + word[11] + word[12] + word[13] + word[14] + word[15] + word[16] + word[17]\n    if len(word) == 19:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8] + word[9] + word[10] + word[11] + word[12] + word[13] + word[14] + word[15] + word[16] + word[17] + word[18]\n    if len(word) == 20:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8] + word[9] + word[10] + word[11] + word[12] + word[13] + word[14] + word[15] + word[16] + word[17] + word[18] + word[19]\n    if len(word) == 21:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8] + word[9] + word[10] + word[11] + word[12] + word[13] + word[14] + word[15] + word[16] + word[17] + word[18] + word[19] + word[20]\n    if len(word) == 22:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8] + word[9] + word[10] + word[11] + word[12] + word[13] + word[14] + word[15] + word[16] + word[17] + word[18] + word[19] + word[20] + word[21]\n    if len(word) == 23:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8] + word[9] + word[10] + word[11] + word[12] + word[13] + word[14] + word[15] + word[16] + word[17] + word[18] + word[19] + word[20] + word[21] + word[22]\n    if len(word) == 24:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8] + word[9] + word[10] + word[11] + word[12] + word[13] + word[14] + word[15] + word[16] + word",
        "test": "",
        "num_ids": 1757,
        "indeed": false
    },
    {
        "number": 4770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N > M:\n        return \"Dr. Chaz needs $Q$ more piece[s] of chicken!\"\n    elif N == M:\n        return \"Dr. Chaz will have $P$ piece[s] of chicken left over!\"\n    else:\n        return \"Dr. Chaz will have $Q$ more piece[s] of chicken!\"\n\nSample Input 3:\n2 3\nSample Output 3:\nDr. Chaz will have 1 piece of chicken left over!\ndef",
        "test": "",
        "num_ids": 127,
        "indeed": false
    },
    {
        "number": 4771,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    v = [int(i) for i in stdin.split()]\n    v.sort()\n    d = 0\n    for i in range(n):\n        d += v[i]\n        if d > 2**32:\n            return str(d)\n    return str(d)\n\nSample Input 3:\n3 10\n1 1 2\n2 2 2\n3 2 1\nSample Output 3:\n-2\ndef",
        "test": "",
        "num_ids": 111,
        "indeed": false
    },
    {
        "number": 4772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    grid = []\n    for _ in range(R):\n        grid.append(list(stdin.split()))\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '#':\n                grid[i][j] = 'a'\n            elif grid[i][j] == 'o':\n                grid[i][j] = '#'\n    for i in range(R):\n        for j",
        "test": "",
        "num_ids": 1712,
        "indeed": false
    },
    {
        "number": 4773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n\nSample Input 3:\nNSEW\nSample Output 3:\n4\ndef",
        "test": "",
        "num_ids": 29,
        "indeed": false
    },
    {
        "number": 4774,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return 'problems ahead'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return '0'\n    ",
        "test": "",
        "num_ids": 1548,
        "indeed": false
    },
    {
        "number": 4775,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(stdin.split())\n    b = list(stdin.split())\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if a[i] == b[i]:\n            a[i] = '.'\n    return ''.join(a)\n",
        "test": "",
        "num_ids": 89,
        "indeed": false
    },
    {
        "number": 4776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    events = []\n    for _ in range(N):\n        events.append(list(map(int, stdin.strip().split())))\n    events.sort()\n    days = 0\n    for i in range(N):\n        days += events[i][1] - events[i][0]\n    return str(days)\n",
        "test": "",
        "num_ids": 90,
        "indeed": false
    },
    {
        "number": 4777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for i in range(1, int(stdin) + 1):\n        answer += i\n    return str(answer)\n\nSample Input 3:\n1\nSample Output 3:\n1\n\nSample Input 4:\n4\nSample Output 4:\n2 3\ndef",
        "test": "",
        "num_ids": 67,
        "indeed": false
    },
    {
        "number": 4778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P = map(int, stdin.split())\n    votes = [list(map(int, input().split())) for _ in range(N)]\n    districts = [list(map(int, input().split())) for _ in range(P)]\n    districts = sorted(districts, key=lambda x: x[0])\n    districts = sorted(districts, key=lambda x: x[1])\n    districts = sorted(districts, key=lambda x: x[2])\n    districts = sorted(districts, key=lambda x: x[3])\n    districts = sorted(districts, key=lambda x: x[4])\n    districts = sorted(districts, key=lambda x: x[5])\n    districts = sorted(districts, key=lambda x: x[6])\n    districts = sorted(districts, key=lambda x: x[7])\n    districts = sorted(districts, key=lambda x: x[8])\n    districts = sorted(districts, key=lambda x: x[9])\n    districts = sorted(districts, key=lambda x: x[10])\n    districts = sorted(districts, key=lambda x: x[11])\n    districts = sorted(districts, key=lambda x: x[12])\n    districts = sorted(districts, key=lambda x: x[13])\n    districts = sorted(districts, key=lambda x: x[14])\n    districts = sorted(districts, key=lambda x: x[15])\n    districts = sorted(districts, key=lambda x: x[16])\n    districts = sorted(districts, key=lambda x: x[17])\n    districts = sorted(districts, key=lambda x: x[18])\n    districts = sorted(districts, key=lambda x: x[19])\n    districts = sorted(districts, key=lambda x: x[20])\n    districts = sorted(districts, key=lambda x: x[21])\n    districts = sorted(districts, key=lambda x: x[22])\n    districts = sorted(districts, key=lambda x: x[23])\n    districts = sorted(districts, key=lambda x: x[24])\n    districts = sorted(districts, key=lambda x: x[25])\n    districts = sorted(districts, key=lambda x: x[26])\n    districts = sorted(districts, key=lambda x: x[27])\n    districts = sorted(districts, key=lambda x: x[28])\n    districts = sorted(districts, key=lambda x: x[29])\n    districts = sorted(districts, key=lambda x: x[30])\n    districts = sorted(districts, key=lambda x: x[31])\n    districts = sorted(districts, key=lambda x: x[32])\n    districts = sorted(districts, key=lambda x: x[33])\n    districts = sorted(districts, key=lambda x: x[34])\n    districts = sorted(districts, key=lambda x: x[35])\n    districts = sorted(districts, key=lambda x: x[36])\n    districts = sorted(districts, key=lambda x: x[37])\n    districts = sorted(districts, key=lambda x: x[38])\n    districts = sorted(districts, key=lambda x: x[39])\n    districts = sorted(districts, key=lambda x: x[40])\n    districts = sorted(districts, key=lambda x: x[41])\n    districts = sorted(districts, key=lambda x: x[42])\n    dist",
        "test": "",
        "num_ids": 969,
        "indeed": false
    },
    {
        "number": 4779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    a.append(a[-1]*a[-2])\n    a.sort()\n    return str(sum(a))\n\n-----Examples-----\nInput 1:\n2\n1\n4\n3\n5\nOutput 1:\n168\n\nInput 2:\n2\n1\n1\n4\n3\n5\nOutput 2:\n1\ndef",
        "test": "",
        "num_ids": 115,
        "indeed": false
    },
    {
        "number": 4780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return '0'\n    \n    # 1.\n    # 2.\n    # 3.\n    # 4.\n    # 5.\n    # 6.\n    # 7.\n    # 8.\n    # 9.\n    # 10.\n    # 11.\n    # 12.\n    # 13.\n    # 14.\n    # 15.\n    # 16.\n    # 17.\n    # 18.\n    # 19.\n    # 20.\n    # 21.\n    # 22.\n    # 23.\n    # 24.\n    # 25.\n    # 26.\n    # 27.\n    # 28.\n    # 29.\n    # 30.\n    # 31.\n    # 32.\n    # 33.\n    # 34.\n    # 35.\n    # 36.\n    # 37.\n    # 38.\n    # 39.\n    # 40.\n    # 41.\n    # 42.\n    # 43.\n    # 44.\n    # 45.\n    # 46.\n    # 47.\n    # 48.\n    # 49.\n    # 50.\n    # 51.\n    # 52.\n    # 53.\n    # 54.\n    # 55.\n    # 56.\n    # 57.\n    # 58.\n    # 59.\n    # 60.\n    # 61.\n    # 62.\n    # 63.\n    # 64.\n    # 65.\n    # 66.\n    # 67.\n    # 68.\n    # 69.\n    # 70.\n    # 71.\n    # 72.\n    # 73.\n    # 74.\n    # 75.\n    # 76.\n    # 77.\n    # 78.\n    # 79.\n    # 80.\n    # 81.\n    # 82.\n    # 83.\n    # 84.\n    # 85.\n    # 86.\n    # 87.\n    # 88.\n    # 89.\n    # 90.\n    # 91.\n    # 92.\n    # 93.\n    # 94.\n    # 95.\n    # 96.\n    # 97.\n    # 98.\n    # 99.\n    # 100.\n    # 101.\n    # 102.\n    # 103.\n    # 104.\n    # 105.\n    # 106.\n    # 107.\n    # 108.\n    # 109.\n    # 110.\n    # 111.\n    # 112.\n    # 113.\n    # 114.\n    # 115.\n    # 116.\n    # 117.\n    # 118.\n    # 119.\n    # 120.\n    # 121.\n    # 122.\n    # 123.\n    # 124.\n    # 125.\n    # 126.\n    # 127.\n    # 128.\n    # 129.\n    # 130.\n    # 131.\n    # 132.\n    # 133.\n    # 134.\n    # 135.\n    # 136.\n    # 137.\n    # 138.\n    # 139.\n    # 140.\n    # 141.\n    # 142.\n    # 143.\n    # 144.\n    # 145.\n    # 146.\n    # 147.\n    # 148.\n    # 149.\n    # 150.\n    # 151.\n    # 152.\n    # 153.\n    # 154.\n    # 155.\n    # 156.\n    # 157.\n    # 158.\n    # 159.\n    # 160.\n    # 161.\n    # 162.\n    # 163.\n    # 164.\n    # 165.\n    # 166.\n    # 167.\n    # 168.\n    # 169.\n    # 170.\n    # 171.\n    # 172.\n    # 173.\n    # 174.\n    # 175.\n    # 176.\n    # 177.\n    # 178.\n    # 179.\n    # 180.\n    # 181.\n    # 182.\n    # 183.\n    # 184.\n    # 185.\n    # 186.\n    # 187.\n    # 188.\n    # 189.\n    # 190.\n    # 191.\n    # 192.\n    # 193.\n    # 194.\n    # 195.\n    # 196.\n    # 197.\n    # 198.\n    # 199.\n    # 200.\n    # 201.\n    # 202.\n    # 203.\n    # 204.\n    # 205.\n    # 206.\n    # 207.\n    # 208.\n    # 209.\n    # 210.\n    # 211.\n    # 212.\n    # 213.\n    # 214.\n    # 215.\n    # 216.\n    # 217.\n    # 218.\n    # 219.\n    # 220.\n    # 221.\n    # 222.\n    # 223.\n    # 224.\n    # 225.\n    # 226.\n    # 227.\n    # 228.\n    # 229.\n    # 230.\n    # 231.\n    # 232.\n    # 233.\n    # 234.\n    # 235.\n    # 236.\n    # 237.\n    # 238.\n    # 239.\n    # 240.\n    # 241.\n    # 242.\n    # 243.\n    # 244.\n    # 245.\n    # 246.\n    # 247.\n    # 248.\n    # 249.\n    # 250.\n    # 251.\n    # 252.\n    # 253.\n    # 254.\n    # 255.\n    # 256.\n    # 257.\n    # 258.\n    # 259.\n    # 260.\n    # 261.\n    # 262.\n    # 263.\n    # 264.\n    # 265.\n    # 266.\n    # 267.\n    # 268.\n    # 269.\n    # 270.\n    # 271.\n    # 272.\n    # 273.\n    # 274.\n    # 275.\n    # 276.\n    # 277.\n    # 278.\n    # 279.\n    # 280.\n    # 281.\n    # 282.\n    # 283.\n    # 284.\n    # 285.\n    # 286.\n    # 287.\n    # 288.\n    # 289.\n    # 290.\n    # 291.\n    # 292.\n    # 293.\n    # 294.\n    # 295.\n    # 296.\n    # 297.\n    # 298.\n    # 299.\n    # 300.\n    # 301.\n    # 302.\n    # 303.\n    # 304.\n    # 305.\n    # 306.\n    # 307.\n    # 308.\n    # 309.\n    # 310.\n    # 311.\n    # 312.\n    # 313.\n    # 314.\n    # 315.\n    # 316.\n    # 317.\n    # 318.\n    # 319.\n    # 320.\n    # 321.\n    # 322.\n    # 323.\n    # 324.\n    # 325.\n    # 326.\n    # 327.\n    # 328.\n    # 329.\n    # 330.\n    # 331.\n    # 332.\n    # 333.\n    # 334.\n    # 335",
        "test": "",
        "num_ids": 1700,
        "indeed": false
    },
    {
        "number": 4781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    answer = []\n    for i in range(N):\n        answer.append(stdin[i].split())\n    answer = sorted(answer, key=lambda x: (x[0], x[1]))\n    answer = answer[::-1]\n    for i in range(N):\n        answer[i][0] = answer[i][0].replace('T', 'P')\n        answer[i][1] = answer[i][1].replace('T', 'P')\n    answer = ''.join(answer)\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'P')\n    answer = answer.replace('P', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('T', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.replace('P', 'N')\n    answer = answer.replace('N', 'T')\n    answer = answer.",
        "test": "",
        "num_ids": 1444,
        "indeed": false
    },
    {
        "number": 4782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return str(m)\n    if n == 1:\n        return str(m)\n    if n == 2:\n        return str(m*(m-1))\n    if n == 3:\n        return str(m*(m-2))\n    if n == 4:\n        return str(m*(m-3))\n    if n == 5:\n        return str(m*(m-4))\n    if n == 6:\n        return str(m*(m-5))\n    if n == 7:\n        return str(m*(m-6))\n    if n == 8:\n        return str(m*(m-7))\n    if n == 9:\n        return str(m*(m-8))\n    if n == 10:\n        return str(m*(m-9))\n    if n == 11:\n        return str(m*(m-10))\n    if n == 12:\n        return str(m*(m-11))\n    if n == 13:\n        return str(m*(m-12))\n    if n == 14:\n        return str(m*(m-13))\n    if n == 15:\n        return str(m*(m-14))\n    if n == 16:\n        return str(m*(m-15))\n    if n == 17:\n        return str(m*(m-16))\n    if n == 18:\n        return str(m*(m-17))\n    if n == 19:\n        return str(m*(m-18))\n    if n == 20:\n        return str(m*(m-19))\n    if n == 21:\n        return str(m*(m-20))\n    if n == 22:\n        return str(m*(m-21))\n    if n == 23:\n        return str(m*(m-22))\n    if n == 24:\n        return str(m*(m-23))\n    if n == 25:\n        return str(m*(m-24))\n    if n == 26:\n        return str(m*(m-25))\n    if n == 27:\n        return str(m*(m-26))\n    if n == 28:\n        return str(m*(m-27))\n    if n == 29:\n        return str(m*(m-28))\n    if n == 30:\n        return str(m*(m-29))\n    if n == 31:\n        return str(m*(m-30))\n    if n == 32:\n        return str(m*(m-31))\n    if n == 33:\n        return str(m*(m-32))\n    if n == 34:\n        return str(m*(m-33))\n    if n == 35:\n        return str(m*(m-34))\n    if n == 36:\n        return str(m*(m-35))\n    if n == 37:\n        return str(m*(m-36))\n    if n == 38:\n        return str(m*(m-37))\n    if n == 39:\n        return str(m*(m-38))\n    if n == 40:\n        return str(m*(m-39))\n    if n == 41:\n        return str(m*(m-40))\n    if n == 42:\n        return str(m*(m-41))\n    if n == 43:\n        return str(m*(m-42))\n    if n == 44:\n        return str(m*(m-43))\n    if n == 45:\n        return str(m*(m-44))\n    if n == 46:\n        return str(m*(m-45))\n    if n == 47:\n        return str(m*(m-46))\n    if n == 48:\n        return str(m*(m-47))\n    if n == 49:\n        return str(m*(m-48))\n    if n == 50:\n        return str(m*(m-49))\n    if n == 51:\n        return str(m*(m-50))\n    if n == 52:\n        return str(m*(m-51))\n    if n == 53:\n        return str(m*(m-52))\n    if n == 54:\n        return str(m*(m-53))\n    if n == 55:\n        return str(m*(m-54))\n    if n == 56:\n        return str(m*(m-55))\n    if n == 57:\n        return str(m*(m-56))\n    if n == 58:\n        return str(m*(m-57))\n    if n == 59:\n        return str(m*(m-58))\n    if n == 60:\n        return str(m*(m-59))\n    if n == 61:\n        return str(m*(m-60))\n    if n == 62:\n        return str(m*(m-61))\n    if n == 63:\n        return str(m*(m-62))\n    if n == 64:\n        return str(m*(m-63))\n    if n == 65:\n        return str(m*(m-64))\n    if n == 66:\n        return str(m*(m-65))\n    if n == 67:\n        return str(m*(m-66))\n    if n == 68:\n        return str(m*(m-67))\n    if n == 69:\n        return str(m*(m-68))\n    if n == 70:\n        return str(m*(m-69))\n    if n == 71:\n        return str(m*(m-70))\n    if n == 72:\n        return str(m*(m-71))\n    if n == 73:\n        return str(m*(m-72))\n    if n == 74:\n        return str(m*(m-73))\n    if n == 75:\n        return str(m*(m-74))\n    if n == 76:\n        return str(m*(m-75))\n    if n == 77:\n        return str(m*(m-76))\n    if n == 78:\n        return str(m*(m-77))\n    if n == 79:\n        return str(m*(m-",
        "test": "",
        "num_ids": 1523,
        "indeed": false
    },
    {
        "number": 4783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    v = [list(map(int, stdin.split())) for _ in range(n)]\n    v.sort(key=lambda x: x[0])\n    v.sort(key=lambda x: x[1])\n    v.sort(key=lambda x: x[2])\n    v.sort(key=lambda x: x[3])\n    v.sort(key=lambda x: x[4])\n    v.sort(key=lambda x: x[5])\n    v.sort(key=lambda x: x[6])\n    v.sort(key=lambda x: x[7])\n    v.sort(key=lambda x: x[8])\n    v.sort(key=lambda x: x[9])\n    v.sort(key=lambda x: x[10])\n    v.sort(key=lambda x: x[11])\n    v.sort(key=lambda x: x[12])\n    v.sort(key=lambda x: x[13])\n    v.sort(key=lambda x: x[14])\n    v.sort(key=lambda x: x[15])\n    v.sort(key=lambda x: x[16])\n    v.sort(key=lambda x: x[17])\n    v.sort(key=lambda x: x[18])\n    v.sort(key=lambda x: x[19])\n    v.sort(key=lambda x: x[20])\n    v.sort(key=lambda x: x[21])\n    v.sort(key=lambda x: x[22])\n    v.sort(key=lambda x: x[23])\n    v.sort(key=lambda x: x[24])\n    v.sort(key=lambda x: x[25])\n    v.sort(key=lambda x: x[26])\n    v.sort(key=lambda x: x[27])\n    v.sort(key=lambda x: x[28])\n    v.sort(key=lambda x: x[29])\n    v.sort(key=lambda x: x[30])\n    v.sort(key=lambda x: x[31])\n    v.sort(key=lambda x: x[32])\n    v.sort(key=lambda x: x[33])\n    v.sort(key=lambda x: x[34])\n    v.sort(key=lambda x: x[35])\n    v.sort(key=lambda x: x[36])\n    v.sort(key=lambda x: x[37])\n    v.sort(key=lambda x: x[38])\n    v.sort(key=lambda x: x[39])\n    v.sort(key=lambda x: x[40])\n    v.sort(key=lambda x: x[41])\n    v.sort(key=lambda x: x[42])\n    v.sort(key=lambda x: x[43])\n    v.sort(key=lambda x: x[44])\n    v.sort(key=lambda x: x[45])\n    v.sort(key=lambda x: x[46])\n    v.sort(key=lambda x: x[47])\n    v.sort(key=lambda x: x[48])\n    v.sort(key=lambda x: x[49])\n    v.sort(key=lambda x: x[50])\n    v.sort(key=lambda x: x[51])\n    v.sort(key=lambda x: x[52])\n    v.sort(key=lambda x: x[53])\n    v.sort(key=lambda x: x[54])\n    v.sort(key=lambda x: x[55])\n    v.sort(key=lambda x: x[56])\n    v.sort(key=lambda x: x[57])\n    v.sort(key=lambda x: x[58])\n    v.sort(key=lambda x: x[59])\n    v.sort(key=lambda x: x[60])\n    v.sort(key=lambda x: x[61])\n    v.sort(key=lambda x: x[62])\n    v.sort(key=lambda x: x[63])\n    v.sort(key=lambda x: x[64])\n    v.sort(key=lambda x: x[65])\n    v.sort(key=lambda x: x[66])\n    v.sort(key=lambda x: x[67])\n    v.sort(key=lambda x: x[68])\n    v.sort(key=lambda x: x[69])\n    v.sort(key=lambda x: x[70])\n    v.sort(key=lambda x: x[71])\n    v.sort(key=lambda x: x[72])\n    v.sort(key=lambda x: x[73])\n    v.sort(key=lambda x: x[74])\n    v.sort(key=lambda x: x[75])\n    v.sort(key=lambda x: x[76])\n    v.sort(key=lambda x: x[77])\n    v.sort(key=lambda x: x[78])\n    v.sort(key=lambda x: x[79])\n    v.sort(key=lambda x: x[80])\n    v.sort(key=lambda x: x[81])\n    v.sort(key=lambda x: x[82])\n    v.sort(key=lambda x: x[83])\n    v.sort(key=lambda x: x[84])\n    v.sort(key=lambda x: x[85])\n    v.sort(key=lambda x: x[86])\n    v.sort(key=lambda x: x[87])",
        "test": "",
        "num_ids": 1359,
        "indeed": false
    },
    {
        "number": 4784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if n < p:\n        return '0'\n    if n == p:\n        return '1'\n    if n % p == 0:\n        return '1' * (n // p) + '0' * (n % p)\n    return '1' * (n // p) + '0' * (n % p) + '1' * (n % p)\n",
        "test": "",
        "num_ids": 105,
        "indeed": false
    },
    {
        "number": 4785,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    if len(s) == 2:\n        if s[0] == 'amiss':\n            return 'hiss'\n        elif s[0] == 'octopuses':\n            return 'no hiss'\n    else:\n        return 'no hiss'\n",
        "test": "",
        "num_ids": 73,
        "indeed": false
    },
    {
        "number": 4786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    keywords = []\n    for i in range(n):\n        keywords.append(stdin.strip().split(' '))\n    keywords = sorted(keywords, key=lambda x: len(x[0]))\n    keywords = sorted(keywords, key=lambda x: len(x[1]))\n    keywords = sorted(keywords, key=lambda x: len(x[2]))\n    keywords = sorted(keywords, key=lambda x: len(x[3]))\n    keywords = sorted(keywords, key=lambda x: len(x[4]))\n    keywords = sorted(keywords, key=lambda x: len(x[5]))\n    keywords = sorted(keywords, key=lambda x: len(x[6]))\n    keywords = sorted(keywords, key=lambda x: len(x[7]))\n    keywords = sorted(keywords, key=lambda x: len(x[8]))\n    keywords = sorted(keywords, key=lambda x: len(x[9]))\n    keywords = sorted(keywords, key=lambda x: len(x[10]))\n    keywords = sorted(keywords, key=lambda x: len(x[11]))\n    keywords = sorted(keywords, key=lambda x: len(x[12]))\n    keywords = sorted(keywords, key=lambda x: len(x[13]))\n    keywords = sorted(keywords, key=lambda x: len(x[14]))\n    keywords = sorted(keywords, key=lambda x: len(x[15]))\n    keywords = sorted(keywords, key=lambda x: len(x[16]))\n    keywords = sorted(keywords, key=lambda x: len(x[17]))\n    keywords = sorted(keywords, key=lambda x: len(x[18]))\n    keywords = sorted(keywords, key=lambda x: len(x[19]))\n    keywords = sorted(keywords, key=lambda x: len(x[20]))\n    keywords = sorted(keywords, key=lambda x: len(x[21]))\n    keywords = sorted(keywords, key=lambda x: len(x[22]))\n    keywords = sorted(keywords, key=lambda x: len(x[23]))\n    keywords = sorted(keywords, key=lambda x: len(x[24]))\n    keywords = sorted(keywords, key=lambda x: len(x[25]))\n    keywords = sorted(keywords, key=lambda x: len(x[26]))\n    keywords = sorted(keywords, key=lambda x: len(x[27]))\n    keywords = sorted(keywords, key=lambda x: len(x[28]))\n    keywords = sorted(keywords, key=lambda x: len(x[29]))\n    keywords = sorted(keywords, key=lambda x: len(x[30]))\n    keywords = sorted(keywords, key=lambda x: len(x[31]))\n    keywords = sorted(keywords, key=lambda x: len(x[32]))\n    keywords = sorted(keywords, key=lambda x: len(x[33]))\n    keywords = sorted(keywords, key=lambda x: len(x[34]))\n    keywords = sorted(keywords, key=lambda x: len(x[35]))\n    keywords = sorted(keywords, key=lambda x: len(x[36]))\n    keywords = sorted(keywords, key=lambda x: len(x[37]))\n    keywords = sorted(keywords, key=lambda x: len(x[38]))\n    keywords = sorted(keywords, key=lambda x: len(x[39]))\n    keywords = sorted(keywords, key=lambda x: len(x[40]))\n    keywords = sorted(keywords, key=lambda x: len(x[41]))\n    keywords = sorted(keywords, key=lambda x: len(x[42]))\n    keywords = sorted(keywords, key=lambda x: len(x[43]))\n    keywords = sorted(keywords, key=lambda x: len(x[44]))\n    keywords = sorted(keywords, key=lambda x: len(x[45]))\n    keywords = sorted(keywords, key=lambda x: len(x[46]))\n    keywords = sorted(keywords, key=lambda x: len(x[47]))\n    keywords = sorted(keywords, key=lambda x: len(x[48]))\n    keywords = sorted(keywords, key=lambda x: len(x[49]))\n    keywords = sorted(keywords, key=lambda x: len(x[50]))\n    keywords = sorted(keywords, key=lambda x: len(x[51]))\n    keywords = sorted(keywords, key=lambda x: len(x[52]))\n    keywords = sorted(keywords, key=lambda x: len(x[53]))\n    keywords = sorted(keywords, key=lambda x: len(x[54]))\n    keywords = sorted(keywords, key=lambda x: len(x[55]))\n    keywords = sorted(keywords, key=lambda x: len(x[56]))\n    keywords = sorted(keywords, key=lambda x: len(x[57]))\n    keywords = sorted(keywords, key=lambda x: len(x[58]))\n    keywords = sorted(keywords, key=lambda x: len(x[59]))\n    keywords = sorted(keywords, key=lambda x: len(x[60]))\n    keywords = sorted(keywords, key=lambda x: len(x[61]))\n    keywords = sorted(keywords, key=lambda x: len(x[62]))\n    keywords = sorted(keywords, key=lambda x: len(x[63]))\n    keywords = sorted(keywords, key=lambda",
        "test": "",
        "num_ids": 1463,
        "indeed": false
    },
    {
        "number": 4787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n == 108:\n        return '108'\n    if n == 109:\n        return '109'\n    if n == 110:\n        return '110'\n    if n == 111:\n        return '111'\n    if n == 112:\n        return '112'\n    if n == 113:\n        return '113'\n    if n == 114:\n        return '114'\n    if n == 115:\n        return '115'\n    if n == 116:\n        return '116'\n    if n == 117:\n        return '117'\n    if n == 118:\n        return '118'\n    if n == 119:\n        return '119'\n    if n == 120:\n        return '120'\n    if n == 121:\n        return '121'\n    if n == 122:\n        return '122'\n    if n == 123:\n        return '123'\n    if n == 124:\n        return '124'\n    if n == 125:\n        return '125'\n    if n == 126:\n        return '126'\n    if n == 127",
        "test": "",
        "num_ids": 1668,
        "indeed": false
    },
    {
        "number": 4788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n_1, n_2 = map(int, stdin.split())\n    if n_1 > n_2:\n        return str(180 - abs(n_1 - n_2))\n    else:\n        return str(abs(n_1 - n_2))\n",
        "test": "",
        "num_ids": 67,
        "indeed": false
    },
    {
        "number": 4789,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    nums = list(map(int, stdin.strip().split()))\n    nums.sort()\n    count = 0\n    for i in range(K):\n        if nums[i] == nums[i+1]:\n            count += 1\n    return count\n",
        "test": "",
        "num_ids": 77,
        "indeed": false
    },
    {
        "number": 4790,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"0\"\n    if n == 3:\n        return \"0\"\n    if n == 4:\n        return \"0\"\n    if n == 5:\n        return \"0\"\n    if n == 6:\n        return \"0\"\n    if n == 7:\n        return \"0\"\n    if n == 8:\n        return \"0\"\n    if n == 9:\n        return \"0\"\n    if n == 10:\n        return \"0\"\n    if n == 11:\n        return \"0\"\n    if n == 12:\n        return \"0\"\n    if n == 13:\n        return \"0\"\n    if n == 14:\n        return \"0\"\n    if n == 15:\n        return \"0\"\n    if n == 16:\n        return \"0\"\n    if n == 17:\n        return \"0\"\n    if n == 18:\n        return \"0\"\n    if n == 19:\n        return \"0\"\n    if n == 20:\n        return \"0\"\n    if n == 21:\n        return \"0\"\n    if n == 22:\n        return \"0\"\n    if n == 23:\n        return \"0\"\n    if n == 24:\n        return \"0\"\n    if n == 25:\n        return \"0\"\n    if n == 26:\n        return \"0\"\n    if n == 27:\n        return \"0\"\n    if n == 28:\n        return \"0\"\n    if n == 29:\n        return \"0\"\n    if n == 30:\n        return \"0\"\n    if n == 31:\n        return \"0\"\n    if n == 32:\n        return \"0\"\n    if n == 33:\n        return \"0\"\n    if n == 34:\n        return \"0\"\n    if n == 35:\n        return \"0\"\n    if n == 36:\n        return \"0\"\n    if n == 37:\n        return \"0\"\n    if n == 38:\n        return \"0\"\n    if n == 39:\n        return \"0\"\n    if n == 40:\n        return \"0\"\n    if n == 41:\n        return \"0\"\n    if n == 42:\n        return \"0\"\n    if n == 43:\n        return \"0\"\n    if n == 44:\n        return \"0\"\n    if n == 45:\n        return \"0\"\n    if n == 46:\n        return \"0\"\n    if n == 47:\n        return \"0\"\n    if n == 48:\n        return \"0\"\n    if n == 49:\n        return \"0\"\n    if n == 50:\n        return \"0\"\n    if n == 51:\n        return \"0\"\n    if n == 52:\n        return \"0\"\n    if n == 53:\n        return \"0\"\n    if n == 54:\n        return \"0\"\n    if n == 55:\n        return \"0\"\n    if n == 56:\n        return \"0\"\n    if n == 57:\n        return \"0\"\n    if n == 58:\n        return \"0\"\n    if n == 59:\n        return \"0\"\n    if n == 60:\n        return \"0\"\n    if n == 61:\n        return \"0\"\n    if n == 62:\n        return \"0\"\n    if n == 63:\n        return \"0\"\n    if n == 64:\n        return \"0\"\n    if n == 65:\n        return \"0\"\n    if n == 66:\n        return \"0\"\n    if n == 67:\n        return \"0\"\n    if n == 68:\n        return \"0\"\n    if n == 69:\n        return \"0\"\n    if n == 70:\n        return \"0\"\n    if n == 71:\n        return \"0\"\n    if n == 72:\n        return \"0\"\n    if n == 73:\n        return \"0\"\n    if n == 74:\n        return \"0\"\n    if n == 75:\n        return \"0\"\n    if n == 76:\n        return \"0\"\n    if n == 77:\n        return \"0\"\n    if n == 78:\n        return \"0\"\n    if n == 79:\n        return \"0\"\n    if n == 80:\n        return \"0\"\n    if n == 81:\n        return \"0\"\n    if n == 82:\n        return \"0\"\n    if n == 83:\n        return \"0\"\n    if n == 84:\n        return \"0\"\n    if n == 85:\n        return \"0\"\n    if n == 86:\n        return \"0\"\n    if n == 87:\n        return \"0\"\n    if n == 88:\n        return \"0\"\n    if n == 89:\n        return \"0\"\n    if n == 90:\n        return \"0\"\n    if n == 91:\n        return \"0\"\n    if n == 92:\n        return \"0\"\n    if n == 93:\n        return \"0\"\n    if n == 94:\n        return \"0\"\n    if n == 95:\n        return \"0\"\n    if n == 96:\n        return \"0\"\n    if n == 97:\n        return \"0\"\n    if n == 98:\n        return \"0\"\n    if n == 99:\n        return \"0\"\n    if n == 100:\n        return \"0\"\n    if n == 101:\n        return \"0\"\n    if n == 102:\n        return \"0\"\n    if n == 103:\n        return \"0\"\n    if n == 104:\n        return \"0\"\n    if n == 105:\n        return \"0\"\n    if n == 106:\n        return \"0\"\n    if n == 107:\n        return \"0\"\n    if n == 108:\n        return \"0\"\n    if n == 109:\n        return \"0\"\n    if n == 110:\n        return \"0\"\n    if n == 111:\n        return \"0\"\n    if n == 112:\n        return \"0\"\n    if n == 113:\n        return \"0\"\n    if n == 114:\n        return \"0\"\n    if n == 115:\n        return \"0\"\n    if n == 116:\n        return \"0\"\n    if n == 117:\n        return \"0\"\n    if n == 118:\n        return \"0\"\n    if n == 119:\n        return \"0\"\n    if n == 120:\n        return \"0\"\n    if n == 121:\n        return \"0\"\n    if n == 122:\n        return \"0\"\n    if n == 123:\n        return \"0\"\n    if n == 124:\n        return \"0\"\n    if n == 125:\n        return \"0\"\n    if n == 126:\n        return \"0\"\n    if n == 127:\n        return \"0\"\n    if n == 128:\n        return \"0\"\n    if n == 129:\n        return \"0\"\n    if n == 130:\n        return \"0\"\n    if n == 131:\n        return \"0\"\n    if n == 132:\n        return \"0\"\n    if n == 133:\n        return \"0\"\n    if n == 134:\n        return \"0\"\n    if n",
        "test": "",
        "num_ids": 1757,
        "indeed": false
    },
    {
        "number": 4791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = [int(i) for i in stdin.split()]\n    s.sort()\n    s.append(s[-1] + s[-2])\n    s.sort()\n    s.append(s[-1] + s[-3])\n    s.sort()\n    s.append(s[-1] + s[-4])\n    s.sort()\n    s.append(s[-1] + s[-5])\n    s.sort()\n    s.append(s[-1] + s[-6])\n    s.sort()\n    s.append(s[-1] + s[-7])\n    s.sort()\n    s.append(s[-1] + s[-8])\n    s.sort()\n    s.append(s[-1] + s[-9])\n    s.sort()\n    s.append(s[-1] + s[-10])\n    s.sort()\n    s.append(s[-1] + s[-11])\n    s.sort()\n    s.append(s[-1] + s[-12])\n    s.sort()\n    s.append(s[-1] + s[-13])\n    s.sort()\n    s.append(s[-1] + s[-14])\n    s.sort()\n    s.append(s[-1] + s[-15])\n    s.sort()\n    s.append(s[-1] + s[-16])\n    s.sort()\n    s.append(s[-1] + s[-17])\n    s.sort()\n    s.append(s[-1] + s[-18])\n    s.sort()\n    s.append(s[-1] + s[-19])\n    s.sort()\n    s.append(s[-1] + s[-20])\n    s.sort()\n    s.append(s[-1] + s[-21])\n    s.sort()\n    s.append(s[-1] + s[-22])\n    s.sort()\n    s.append(s[-1] + s[-23])\n    s.sort()\n    s.append(s[-1] + s[-24])\n    s.sort()\n    s.append(s[-1] + s[-25])\n    s.sort()\n    s.append(s[-1] + s[-26])\n    s.sort()\n    s.append(s[-1] + s[-27])\n    s.sort()\n    s.append(s[-1] + s[-28])\n    s.sort()\n    s.append(s[-1] + s[-29])\n    s.sort()\n    s.append(s[-1] + s[-30])\n    s.sort()\n    s.append(s[-1] + s[-31])\n    s.sort()\n    s.append(s[-1] + s[-32])\n    s.sort()\n    s.append(s[-1] + s[-33])\n    s.sort()\n    s.append(s[-1] + s[-34])\n    s.sort()\n    s.append(s[-1] + s[-35])\n    s.sort()\n    s.append(s[-1] + s[-36])\n    s.sort()\n    s.append(s[-1] + s[-37])\n    s.sort()\n    s.append(s[-1] + s[-38])\n    s.sort()\n    s.append(s[-1] + s[-39])\n    s.sort()\n    s.append(s[-1] + s[-40])\n    s.sort()\n    s.append(s[-1] + s[-41])\n    s.sort()\n    s.append(s[-1] + s[-42])\n    s.sort()\n    s.append(s[-1] + s[-43])\n    s.sort()\n    s.append(s[-1] + s[-44])\n    s.sort()\n    s.append(s[-1] + s[-45])\n    s.sort()\n    s.append(s[-1] + s[-46])\n    s.sort()\n    s.append(s[-1] + s[-47])\n    s.sort()\n    s.append(s[-1] + s[-48])\n    s.sort()\n    s.append(s[-1] + s[-49])\n    s.sort()\n    s.append(s[-1] + s[-50])\n    s.sort()\n    s.append(s[-1] + s[-51])\n    s.sort()\n    s.append(s[-1] + s[-52])\n    s.sort()\n    s.append(s[-1] + s[-53])\n    s.sort()\n    s.append(s[-1] + s[-54])\n    s.sort()\n    s.append(s[-1] + s[-55])\n    s.sort()\n    s.append(s[-1] + s[-56])\n    s.sort()\n    s.append(s[-1] + s[-57])\n    s.sort()\n    s.append(s[-1] + s[-58])\n    s.sort()\n    s.append(s[-1] + s[-59])\n    s.sort()\n    s.append(s[-1] + s[-60])\n    s.sort()\n    s.append(s[-1] + s[-61])\n    s.sort()\n    s.append(s[-1] + s[-62])\n    s.sort()\n    s.append(s[-1] + s[-63])\n    s.sort()\n    s.append(s[-1] + s[-64])\n    s.sort()\n    s.append(s[-1] + s[-65])\n    s.sort()\n    s.append(s[-1] + s[-66])\n    s.sort()\n    s.append(s[-1] + s[-67])\n    s.sort()\n    s.append(s[-1] + s[-68])\n    s.sort()\n    s.append(s[-1] + s[-69])\n    s.sort()\n    s.append(s[-1] + s[-70])\n    s.sort()\n    s.append(s[-1] + s[-71])\n    s.sort()\n    s.append(s[-1] + s[-72])\n    s.sort()\n    s.append(s[-1] + s[-73])\n    s.sort()\n    s.append(s[-1] + s[-74])\n    ",
        "test": "",
        "num_ids": 1710,
        "indeed": false
    },
    {
        "number": 4792,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.strip()\n    name = name.lower()\n    name = name.replace(' ', '')\n    name = name.replace('.', '')\n    name = name.replace('-', '')\n    name = name.replace('\\'', '')\n    name = name.replace(' ', '')\n    name = name.replace('\\n', '')\n    name = name.replace('\\t', '')\n    name = name.replace('\\r', '')\n    name = name.replace('\\x0b', '')\n    name = name.replace('\\x0c', '')\n    name = name.replace('\\x0e', '')\n    name = name.replace('\\x0f', '')\n    name = name.replace('\\x10', '')\n    name = name.replace('\\x11', '')\n    name = name.replace('\\x12', '')\n    name = name.replace('\\x13', '')\n    name = name.replace('\\x14', '')\n    name = name.replace('\\x15', '')\n    name = name.replace('\\x16', '')\n    name = name.replace('\\x17', '')\n    name = name.replace('\\x18', '')\n    name = name.replace('\\x19', '')\n    name = name.replace('\\x1a', '')\n    name = name.replace('\\x1b', '')\n    name = name.replace('\\x1c', '')\n    name = name.replace('\\x1d', '')\n    name = name.replace('\\x1e', '')\n    name = name.replace('\\x1f', '')\n    name = name.replace('\\x20', '')\n    name = name.replace('\\x21', '')\n    name = name.replace('\\x22', '')\n    name = name.replace('\\x23', '')\n    name = name.replace('\\x24', '')\n    name = name.replace('\\x25', '')\n    name = name.replace('\\x26', '')\n    name = name.replace('\\x27', '')\n    name = name.replace('\\x28', '')\n    name = name.replace('\\x29', '')\n    name = name.replace('\\x2a', '')\n    name = name.replace('\\x2b', '')\n    name = name.replace('\\x2c', '')\n    name = name.replace('\\x2d', '')\n    name = name.replace('\\x2e', '')\n    name = name.replace('\\x2f', '')\n    name = name.replace('\\x30', '')\n    name = name.replace('\\x31', '')\n    name = name.replace('\\x32', '')\n    name = name.replace('\\x33', '')\n    name = name.replace('\\x34', '')\n    name = name.replace('\\x35', '')\n    name = name.replace('\\x36', '')\n    name = name.replace('\\x37', '')\n    name = name.replace('\\x38', '')\n    name = name.replace('\\x39', '')\n    name = name.replace('\\x3a', '')\n    name = name.replace('\\x3b', '')\n    name = name.replace('\\x3c', '')\n    name = name.replace('\\x3d', '')\n    name = name.replace('\\x3e', '')\n    name = name.replace('\\x3f', '')\n    name = name.replace('\\x40', '')\n    name = name.replace('\\x41', '')\n    name = name.replace('\\x42', '')\n    name = name.replace('\\x43', '')\n    name = name.replace('\\x44', '')\n    name = name.replace('\\x45', '')\n    name = name.replace('\\x46', '')\n    name = name.replace('\\x47', '')\n    name = name.replace('\\x48', '')\n    name = name.replace('\\x49', '')\n    name = name.replace('\\x4a', '')\n    name = name.replace('\\x4b', '')\n    name = name.replace('\\x4c', '')\n    name = name.replace('\\x4d', '')\n    name = name.replace('\\x4e', '')\n    name = name.replace('\\x4f', '')\n    name = name.replace('\\x50', '')\n    name = name.replace('\\x51', '')\n    name = name.replace('\\x52', '')\n    name = name.replace('\\x53', '')\n    name = name.replace('\\x54', '')\n    name = name.replace('\\x55', '')\n    name = name.replace('\\x56', '')\n    name = name.replace('\\x57', '')\n    name = name.replace('\\x58', '')\n    name = name.replace('\\x59', '')\n    name = name.replace('\\x5a', '')\n    name = name.replace('\\x5b', '')\n    name = name.replace('\\x5c', '')\n    name = name.replace('\\x5d', '')\n    name = name.replace('\\x5e', '')\n    name = name.replace('\\x5f', '')\n    name = name.replace('\\x60', '')\n    name = name.replace('\\x61', '')\n    name = name.replace('\\x62', '')\n    name = name.replace('\\x63', '')\n    name = name.replace('\\x64', '')\n    name = name.replace('\\x65', '')\n    name = name.replace('\\x66', '')\n    name = name.replace('\\x67', '')\n    name = name.replace('\\x68', '')\n    name = name.replace('\\x69', '')\n    name = name.replace('\\x6a', '')\n    name = name.replace('\\x6b', '')\n    name = name.replace('\\x6c', '')\n    name = name.replace('\\x6d', '')\n    name = name.replace('\\x6e', '')\n    name = name.replace('\\x6f', '')\n    name = name.replace('\\x70', '')\n    name = name.replace('\\x71',",
        "test": "",
        "num_ids": 1580,
        "indeed": false
    },
    {
        "number": 4793,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    v1 = int(s[0])\n    v2 = int(s[1])\n    if v1 > v2:\n        return 'Impossible'\n    if v1 == v2:\n        return '{} {}'.format(v1, v2)\n    if v1 < v2:\n        return '{} {}'.format(v2, v1)\n    return '{} {}'.format(v1, v2)\n",
        "test": "",
        "num_ids": 114,
        "indeed": false
    },
    {
        "number": 4794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    map = [list(map(str, input())) for _ in range(R)]\n    answer = 0\n    for i in range(R):\n        for j in range(C):\n            if map[i][j] == '#':\n                answer += 1\n    return str(answer)\n\n-----Examples-----\nSample Input 1:\n4 4\n",
        "test": "",
        "num_ids": 98,
        "indeed": false
    },
    {
        "number": 4795,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    pow = [int(i) for i in stdin.split()]\n    pow.sort()\n    for i in range(n):\n        if pow[i] == pow[i+1]:\n            pow[i] = pow[i] * pow[i+1]\n        else:\n            pow[i] = pow[i] * pow[i+1] + pow[i+1]\n    return str(sum(pow))\n",
        "test": "",
        "num_ids": 120,
        "indeed": false
    },
    {
        "number": 4796,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    I, J, K = map(int, stdin.split())\n    leftover = (A * I + B * J + C * K) / (I + J + K)\n    return str(round(leftover, 4))\n\nSample Input 3:\n1 1 1\nSample Output 3:\n1\n\nSample Input 4:\n1 1 1\nSample Output 4:\n1\n\nSample Input 5:\n1 1 1\nSample Output 5:\n1\n\nSample Input 6:\n1 1 1\nSample Output 6:\n1\n\nSample Input 7:\n1 1 1\nSample Output 7:\n1\n\nSample Input 8:\n1 1 1\nSample Output 8:\n1\n\nSample Input 9:\n1 1 1\nSample Output 9:\n1\n\nSample Input 10:\n1 1 1\nSample Output 10:\n1\n\nSample Input 11:\n1 1 1\nSample Output 11:\n1\n\nSample Input 12:\n1 1 1\nSample Output 12:\n1\n\nSample Input 13:\n1 1 1\nSample Output 13:\n1\n\nSample Input 14:\n1 1 1\nSample Output 14:\n1\n\nSample Input 15:\n1 1 1\nSample Output 15:\n1\n\nSample Input 16:\n1 1 1\nSample Output 16:\n1\n\nSample Input 17:\n1 1 1\nSample Output 17:\n1\n\nSample Input 18:\n1 1 1\nSample Output 18:\n1\n\nSample Input 19:\n1 1 1\nSample Output 19:\n1\n\nSample Input 20:\n1 1 1\nSample Output 20:\n1\n\nSample Input 21:\n1 1 1\nSample Output 21:\n1\n\nSample Input 22:\n1 1 1\nSample Output 22:\n1\n\nSample Input 23:\n1 1 1\nSample Output 23:\n1\n\nSample Input 24:\n1 1 1\nSample Output 24:\n1\n\nSample Input 25:\n1 1 1\nSample Output 25:\n1\n\nSample Input 26:\n1 1 1\nSample Output 26:\n1\n\nSample Input 27:\n1 1 1\nSample Output 27:\n1\n\nSample Input 28:\n1 1 1\nSample Output 28:\n1\n\nSample Input 29:\n1 1 1\nSample Output 29:\n1\n\nSample Input 30:\n1 1 1\nSample Output 30:\n1\n\nSample Input 31:\n1 1 1\nSample Output 31:\n1\n\nSample Input 32:\n1 1 1\nSample Output 32:\n1\n\nSample Input 33:\n1 1 1\nSample Output 33:\n1\n\nSample Input 34:\n1 1 1\nSample Output 34:\n1\n\nSample Input 35:\n1 1 1\nSample Output 35:\n1\n\nSample Input 36:\n1 1 1\nSample Output 36:\n1\n\nSample Input 37:\n1 1 1\nSample Output 37:\n1\n\nSample Input 38:\n1 1 1\nSample Output 38:\n1\n\nSample Input 39:\n1 1 1\nSample Output 39:\n1\n\nSample Input 40:\n1 1 1\nSample Output 40:\n1\n\nSample Input 41:\n1 1 1\nSample Output 41:\n1\n\nSample Input 42:\n1 1 1\nSample Output 42:\n1\n\nSample Input 43:\n1 1 1\nSample Output 43:\n1\n\nSample Input 44:\n1 1 1\nSample Output 44:\n1\n\nSample Input 45:\n1 1 1\nSample Output 45:\n1\n\nSample Input 46:\n1 1 1\nSample Output 46:\n1\n\nSample Input 47:\n1 1 1\nSample Output 47:\n1\n\nSample Input 48:\n1 1 1\nSample Output 48:\n1\n\nSample Input 49:\n1 1 1\nSample Output 49:\n1\n\nSample Input 50:\n1 1 1\nSample Output 50:\n1\n\nSample Input 51:\n1 1 1\nSample Output 51:\n1\n\nSample Input 52:\n1 1 1\nSample Output 52:\n1\n\nSample Input 53:\n1 1 1\nSample Output 53:\n1\n\nSample Input 54:\n1 1 1\nSample Output 54:\n1\n\nSample Input 55:\n1 1 1\nSample Output 55:\n1\n\nSample Input 56:\n1 1 1\nSample Output 56:\n1\n\nSample Input 57:\n1 1 1\nSample Output 57:\n1\n\nSample Input 58:\n1 1 1\nSample Output 58:\n1\n\nSample Input 59:\n1 1 1\nSample Output 59:\n1\n\nSample Input 60:\n1 1 1\nSample Output 60:\n1\n\nSample Input 61:\n1 1 1\nSample Output 61:\n1\n\nSample Input 62:\n1 1 1\nSample Output 62:\n1\n\nSample Input 63:\n1 1 1\nSample Output 63:\n1\n\nSample Input 64:\n1 1 1\nSample Output 64:\n1\n\nSample Input 65:\n1 1 1\nSample Output 65:\n1\n\nSample Input 66:\n1 1 1\nSample Output 66:\n1\n\nSample Input 67:\n1 1 1\nSample Output 67:\n1\n\nSample Input 68:\n1 1 1\nSample Output 68:\n1\n\nSample Input 69:\n1 1 1\nSample Output 69:\n1\n\nSample Input 70:\n1 1 1\nSample Output 70:\n1\n\nSample Input 71:\n1 1 1\nSample Output 71:\n1\n\nSample Input 72:\n1 1 1\nSample Output 72:\n1\n\nSample Input 73:\n1 1 1\nSample Output 73:\n1\n\nSample Input 74:\n1 1 1\nSample Output 74:\n1\n\nSample Input 75:\n1 1 1\nSample Output 75:\n1\n\nSample Input 76:\n1 1 1\nSample Output 76:\n1\n\nSample Input 77:\n1 1 1\nSample Output 77:\n1\n\nSample Input 78:\n1 1 1\nSample Output 78:\n1\n\nSample Input 79:\n1 1 1\nSample Output 79:\n1\n\nSample Input 80:\n1 1 1\nSample Output 80:\n1\n\nSample Input 81:\n1 1 1\nSample Output 81:\n1\n\nSample Input 82:\n1 1 1\nSample Output 82:\n1\n\nSample Input 83:\n1 1 1\nSample Output 83:\n1\n\nSample Input 84:\n1 1 1\nSample Output 84:\n1\n\nSample Input 85:\n1 1 1\nSample Output 85:\n1\n\nSample Input 86:\n1 1 1\nSample Output 86:\n1\n\nSample Input 87:\n1 1 1\nSample Output 87:\n1\n\nSample Input 88:\n1 1 1\nSample Output 88:\n1\n\nSample Input 89:\n1 1 1\nSample Output 89:\n1\n\nSample Input 90:\n1 1 1\nSample Output 90:\n1\n\nSample Input 91:\n1 1 1\nSample Output 91:\n1\n\nSample Input 92:\n1 1 1\nSample Output 92:\n1\n\nSample Input 93:\n1 1 1\nSample Output 93:\n1\n\nSample Input 94:\n1 1 1\nSample Output 94:\n1\n\nSample Input 95:\n1 1 1\nSample Output 95:\n1\n\nSample Input 96:\n1 1 1\nSample Output 96:\n1\n\nSample Input 97:\n1 1 1\nSample Output 97:\n1\n\nSample Input 98:\n1 1 1\nSample Output 98:\n1\n\nSample Input 99:\n1 1 1\nSample Output 99:\n1\n\nSample Input 100",
        "test": "",
        "num_ids": 1726,
        "indeed": false
    },
    {
        "number": 4797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace('>.', '>').replace('.', '<').replace('.', '>').replace('<', '<').replace('>', '>').replace('<.', '<').replace",
        "test": "",
        "num_ids": 1701,
        "indeed": false
    },
    {
        "number": 4798,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    def solution(stdin: str) -> str:\n        \n        def is_valid(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_2(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_3(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_4(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_5(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_6(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_7(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_8(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_9(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_10(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_11(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_12(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_13(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_14(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_15(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_16(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_17(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_18(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_19(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_20(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_21(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_22(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_23(s: str) -> bool:\n            if len(s) < 2:\n                return False\n            \n            if s[0] == '-':\n                return False\n            \n            if s[-1] == '-':\n                return False\n            \n            return True\n        \n        def is_valid_24(s: str) -> bool:\n            if len(s",
        "test": "",
        "num_ids": 1716,
        "indeed": false
    },
    {
        "number": 4799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    G, S, C = map(int, stdin.split())\n    if G + S + C > 5:\n        return 'Province'\n    elif G + S + C == 5:\n        return 'Duchy'\n    elif G + S + C == 6:\n        return 'Estate'\n    else:\n        return 'Gold'\n",
        "test": "",
        "num_ids": 85,
        "indeed": false
    },
    {
        "number": 4800,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = int(stdin.split()[0])\n    s = int(stdin.split()[1])\n    if d > 100 or s > 100:\n        return \"impossible\"\n    if n == 0:\n        return str(d)\n    if k == 0:\n        return str(s)\n    if d == 0:\n        return str(s)\n    if s == 0:\n        return str(d)\n    if d > s:\n        return str(d)\n    if d < s:\n        return str(s)\n    if d == s:\n        return str(d)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s:\n        return str(s)\n    if d < s:\n        return str(d)\n    if d == s:\n        return str(s)\n    if d > s",
        "test": "",
        "num_ids": 1635,
        "indeed": false
    },
    {
        "number": 4801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    g_1 = A[0]\n    g_2 = A[1]\n    g_3 = A[2]\n    g_4 = A[3]\n    g_5 = A[4]\n    g_6 = A[5]\n    g_7 = A[6]\n    g_8 = A[7]\n    g_9 = A[8]\n    g_10 = A[9]\n    g_11 = A[10]\n    g_12 = A[11]\n    g_13 = A[12]\n    g_14 = A[13]\n    g_15 = A[14]\n    g_16 = A[15]\n    g_17 = A[16]\n    g_18 = A[17]\n    g_19 = A[18]\n    g_20 = A[19]\n    g_21 = A[20]\n    g_22 = A[21]\n    g_23 = A[22]\n    g_24 = A[23]\n    g_25 = A[24]\n    g_26 = A[25]\n    g_27 = A[26]\n    g_28 = A[27]\n    g_29 = A[28]\n    g_30 = A[29]\n    g_31 = A[30]\n    g_32 = A[31]\n    g_33 = A[32]\n    g_34 = A[33]\n    g_35 = A[34]\n    g_36 = A[35]\n    g_37 = A[36]\n    g_38 = A[37]\n    g_39 = A[38]\n    g_40 = A[39]\n    g_41 = A[40]\n    g_42 = A[41]\n    g_43 = A[42]\n    g_44 = A[43]\n    g_45 = A[44]\n    g_46 = A[45]\n    g_47 = A[46]\n    g_48 = A[47]\n    g_49 = A[48]\n    g_50 = A[49]\n    g_51 = A[50]\n    g_52 = A[51]\n    g_53 = A[52]\n    g_54 = A[53]\n    g_55 = A[54]\n    g_56 = A[55]\n    g_57 = A[56]\n    g_58 = A[57]\n    g_59 = A[58]\n    g_60 = A[59]\n    g_61 = A[60]\n    g_62 = A[61]\n    g_63 = A[62]\n    g_64 = A[63]\n    g_65 = A[64]\n    g_66 = A[65]\n    g_67 = A[66]\n    g_68 = A[67]\n    g_69 = A[68]\n    g_70 = A[69]\n    g_71 = A[70]\n    g_72 = A[71]\n    g_73 = A[72]\n    g_74 = A[73]\n    g_75 = A[74]\n    g_76 = A[75]\n    g_77 = A[76]\n    g_78 = A[77]\n    g_79 = A[78]\n    g_80 = A[79]\n    g_81 = A[80]\n    g_82 = A[81]\n    g_83 = A[82]\n    g_84 = A[83]\n    g_85 = A[84]\n    g_86 = A[85]\n    g_87 = A[86]\n    g_88 = A[87]\n    g_89 = A[88]\n    g_90 = A[89]\n    g_91 = A[90]\n    g_92 = A[91]\n    g_93 = A[92]\n    g_94 = A[93]\n    g_95 = A[94]\n    g_96 = A[95]\n    g_97 = A[96]\n    g_98 = A[97]\n    g_99 = A[98]\n    g_100 = A[99]\n    g_101 = A[100]\n    g_102 = A[101]\n    g_103 = A[102]\n    g_104 = A[103]\n    g_105 = A[104]\n    g_106 = A[105]\n    g_107 = A[106]\n    g_108 = A[107]\n    g_109 = A[108]\n    g_110 = A[109]\n    g_111 = A[110]\n    g_112 = A[111]\n    g_113 = A[112]\n    g_114 = A[113]\n    g_115 = A[114]\n    g_116 = A[115]\n    g_117 = A[116]\n    g_118 = A[117]\n    g_119 = A[118]\n    g_120 = A[119]\n    g_121 = A[120]\n    g_122 = A[121]\n    g_123 = A[122]\n    g_124 = A[123]\n    g_125 = A[124]\n    g_126 = A[125]\n    g_127 = A[126]\n    g_128 = A[127]\n    g_129 = A[128]\n    g_130 = A[129]\n    g_131 = A[130]\n    g_132 = A[131]\n    g_133 = A[132]\n    g_134 = A[133]\n    g_135 = A[134]\n    g_136 = A[135]\n    g_137 = A[136]\n    g_138 = A[137]\n    g_139 = A[138]\n    g_140 = A[139]\n    g_141 = A[140]\n    g_142 = A[141]\n    g_143 = A[142]\n    g_144 = A[143]\n    g_145 = A[144]\n    g_146 = A[145]\n    g_147 = A[146]\n    g_148 = A[147]\n    g_149 = A[148]\n    g_150 = A[149]\n    g_151 =",
        "test": "",
        "num_ids": 1531,
        "indeed": false
    },
    {
        "number": 4802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, M = map(int, stdin.split())\n    if H < 0 or H > 23:\n        return '23'\n    if M < 0 or M > 59:\n        return '23'\n    return '{}:{}'.format(H, M)\n",
        "test": "",
        "num_ids": 65,
        "indeed": false
    },
    {
        "number": 4803,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '1'\n    if n == 3:\n        return '1'\n    if n == 4:\n        return '1'\n    if n == 5:\n        return '1'\n    if n == 6:\n        return '1'\n    if n == 7:\n        return '1'\n    if n == 8:\n        return '1'\n    if n == 9:\n        return '1'\n    if n == 10:\n        return '1'\n    if n == 11:\n        return '1'\n    if n == 12:\n        return '1'\n    if n == 13:\n        return '1'\n    if n == 14:\n        return '1'\n    if n == 15:\n        return '1'\n    if n == 16:\n        return '1'\n    if n == 17:\n        return '1'\n    if n == 18:\n        return '1'\n    if n == 19:\n        return '1'\n    if n == 20:\n        return '1'\n    if n == 21:\n        return '1'\n    if n == 22:\n        return '1'\n    if n == 23:\n        return '1'\n    if n == 24:\n        return '1'\n    if n == 25:\n        return '1'\n    if n == 26:\n        return '1'\n    if n == 27:\n        return '1'\n    if n == 28:\n        return '1'\n    if n == 29:\n        return '1'\n    if n == 30:\n        return '1'\n    if n == 31:\n        return '1'\n    if n == 32:\n        return '1'\n    if n == 33:\n        return '1'\n    if n == 34:\n        return '1'\n    if n == 35:\n        return '1'\n    if n == 36:\n        return '1'\n    if n == 37:\n        return '1'\n    if n == 38:\n        return '1'\n    if n == 39:\n        return '1'\n    if n == 40:\n        return '1'\n    if n == 41:\n        return '1'\n    if n == 42:\n        return '1'\n    if n == 43:\n        return '1'\n    if n == 44:\n        return '1'\n    if n == 45:\n        return '1'\n    if n == 46:\n        return '1'\n    if n == 47:\n        return '1'\n    if n == 48:\n        return '1'\n    if n == 49:\n        return '1'\n    if n == 50:\n        return '1'\n    if n == 51:\n        return '1'\n    if n == 52:\n        return '1'\n    if n == 53:\n        return '1'\n    if n == 54:\n        return '1'\n    if n == 55:\n        return '1'\n    if n == 56:\n        return '1'\n    if n == 57:\n        return '1'\n    if n == 58:\n        return '1'\n    if n == 59:\n        return '1'\n    if n == 60:\n        return '1'\n    if n == 61:\n        return '1'\n    if n == 62:\n        return '1'\n    if n == 63:\n        return '1'\n    if n == 64:\n        return '1'\n    if n == 65:\n        return '1'\n    if n == 66:\n        return '1'\n    if n == 67:\n        return '1'\n    if n == 68:\n        return '1'\n    if n == 69:\n        return '1'\n    if n == 70:\n        return '1'\n    if n == 71:\n        return '1'\n    if n == 72:\n        return '1'\n    if n == 73:\n        return '1'\n    if n == 74:\n        return '1'\n    if n == 75:\n        return '1'\n    if n == 76:\n        return '1'\n    if n == 77:\n        return '1'\n    if n == 78:\n        return '1'\n    if n == 79:\n        return '1'\n    if n == 80:\n        return '1'\n    if n == 81:\n        return '1'\n    if n == 82:\n        return '1'\n    if n == 83:\n        return '1'\n    if n == 84:\n        return '1'\n    if n == 85:\n        return '1'\n    if n == 86:\n        return '1'\n    if n == 87:\n        return '1'\n    if n == 88:\n        return '1'\n    if n == 89:\n        return '1'\n    if n == 90:\n        return '1'\n    if n == 91:\n        return '1'\n    if n == 92:\n        return '1'\n    if n == 93:\n        return '1'\n    if n == 94:\n        return '1'\n    if n == 95:\n        return '1'\n    if n == 96:\n        return '1'\n    if n == 97:\n        return '1'\n    if n == 98:\n        return '1'\n    if n == 99:\n        return '1'\n    if n == 100:\n        return '1'\n    if n == 101:\n        return '1'\n    if n == 102:\n        return '1'\n    if n == 103:\n        return '1'\n    if n == 104:\n        return '1'\n    if n == 105:\n        return '1'\n    if n == 106:\n        return '1'\n    if n == 107:\n        return '1'\n    if n == 108:\n        return '1'\n    if n == 109:\n        return '1'\n    if n == 110:\n        return '1'\n    if n == 111:\n        return '1'\n    if n == 112:\n        return '1'\n    if n == 113:\n        return '1'\n    if n == 114:\n        return '1'\n    if n == 115:\n        return '1'\n    if n == 116:\n        return '1'\n    if n == 117:\n        return '1'\n    if n == 118:\n        return '1'\n    if n == 119:\n        return '1'\n    if n == 120:\n        return '1'\n    if n == 121:\n        return '1'\n    if n == 122:\n        return '1'\n    if n == 123:\n        return '1'\n    if n ==",
        "test": "",
        "num_ids": 1639,
        "indeed": false
    },
    {
        "number": 4804,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin)\n    if S == 1:\n        return \"1,1\"\n    if S == 2:\n        return \"2,1\"\n    if S == 3:\n        return \"2,2\"\n    if S == 4:\n        return \"3,2\"\n    if S == 5:\n        return \"3,3\"\n    if S == 6:\n        return \"3,4\"\n    if S == 7:\n        return \"3,5\"\n    if S == 8:\n        return \"3,6\"\n    if S == 9:\n        return \"3,7\"\n    if S == 10:\n        return \"3,8\"\n    if S == 11:\n        return \"3,9\"\n    if S == 12:\n        return \"3,10\"\n    if S == 13:\n        return \"3,11\"\n    if S == 14:\n        return \"3,12\"\n    if S == 15:\n        return \"3,13\"\n    if S == 16:\n        return \"3,14\"\n    if S == 17:\n        return \"3,15\"\n    if S == 18:\n        return \"3,16\"\n    if S == 19:\n        return \"3,17\"\n    if S == 20:\n        return \"3,18\"\n    if S == 21:\n        return \"3,19\"\n    if S == 22:\n        return \"3,20\"\n    if S == 23:\n        return \"3,21\"\n    if S == 24:\n        return \"3,22\"\n    if S == 25:\n        return \"3,23\"\n    if S == 26:\n        return \"3,24\"\n    if S == 27:\n        return \"3,25\"\n    if S == 28:\n        return \"3,26\"\n    if S == 29:\n        return \"3,27\"\n    if S == 30:\n        return \"3,28\"\n    if S == 31:\n        return \"3,29\"\n    if S == 32:\n        return \"3,30\"\n    if S == 33:\n        return \"3,31\"\n    if S == 34:\n        return \"3,32\"\n    if S == 35:\n        return \"3,33\"\n    if S == 36:\n        return \"3,34\"\n    if S == 37:\n        return \"3,35\"\n    if S == 38:\n        return \"3,36\"\n    if S == 39:\n        return \"3,37\"\n    if S == 40:\n        return \"3,38\"\n    if S == 41:\n        return \"3,39\"\n    if S == 42:\n        return \"3,40\"\n    if S == 43:\n        return \"3,41\"\n    if S == 44:\n        return \"3,42\"\n    if S == 45:\n        return \"3,43\"\n    if S == 46:\n        return \"3,44\"\n    if S == 47:\n        return \"3,45\"\n    if S == 48:\n        return \"3,46\"\n    if S == 49:\n        return \"3,47\"\n    if S == 50:\n        return \"3,48\"\n    if S == 51:\n        return \"3,49\"\n    if S == 52:\n        return \"3,50\"\n    if S == 53:\n        return \"3,51\"\n    if S == 54:\n        return \"3,52\"\n    if S == 55:\n        return \"3,53\"\n    if S == 56:\n        return \"3,54\"\n    if S == 57:\n        return \"3,55\"\n    if S == 58:\n        return \"3,56\"\n    if S == 59:\n        return \"3,57\"\n    if S == 60:\n        return \"3,58\"\n    if S == 61:\n        return \"3,59\"\n    if S == 62:\n        return \"3,60\"\n    if S == 63:\n        return \"3,61\"\n    if S == 64:\n        return \"3,62\"\n    if S == 65:\n        return \"3,63\"\n    if S == 66:\n        return \"3,64\"\n    if S == 67:\n        return \"3,65\"\n    if S == 68:\n        return \"3,66\"\n    if S == 69:\n        return \"3,67\"\n    if S == 70:\n        return \"3,68\"\n    if S == 71:\n        return \"3,69\"\n    if S == 72:\n        return \"3,70\"\n    if S == 73:\n        return \"3,71\"\n    if S == 74:\n        return \"3,72\"\n    if S == 75:\n        return \"3,73\"\n    if S == 76:\n        return \"3,74\"\n    if S == 77:\n        return \"3,75\"\n    if S == 78:\n        return \"3,76\"\n    if S == 79:\n        return \"3,77\"\n    if S == 80:\n        return \"3,78\"\n    if S == 81:\n        return \"3,79\"\n    if S == 82:\n        return \"3,80\"\n    if S == 83:\n        return \"3,81\"\n    if S == 84:\n        return \"3,82\"\n    if S == 85:\n        return \"3,83\"\n    if S == 86:\n        return \"3,84\"\n    if S == 87:\n        return \"3,85\"\n    if S == 88:\n        return \"3,86\"\n    if S == 89:\n        return \"3,87\"\n    if S == 90:\n        return \"3,88\"\n    if S == 91:\n        return \"3,89\"\n    if S == 92:\n        return \"3,90\"\n    if S == 93:\n        return \"3,91\"\n    if S == 94:\n        return \"3",
        "test": "",
        "num_ids": 1416,
        "indeed": false
    },
    {
        "number": 4805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.split()\n    for i in range(len(word)):\n        if word[i] in word[i+1:]:\n            return \"no\"\n    return \"yes\"\n",
        "test": "",
        "num_ids": 49,
        "indeed": true
    },
    {
        "number": 4806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin))\n\nSample Input 3:\nRBRRBRR\nSample Output 3:\nRBRRBRR\n\nSample Input 4:\nRBRRBRR\nSample Output 4:\nRBRRBRR\n\nSample Input 5:\nRBRRBRR\nSample Output 5:\nRBRRBRR\n\nSample Input 6:\nRBRRBRR\nSample Output 6:\nRBRRBRR\n\nSample Input 7:\nRBRRBRR\nSample Output 7:\nRBRRBRR\n\nSample Input 8:\nRBRRBRR\nSample Output 8:\nRBRRBRR\n\nSample Input 9:\nRBRRBRR\nSample Output 9:\nRBRRBRR\n\nSample Input 10:\nRBRRBRR\nSample Output 10:\nRBRRBRR\n\n-----Constraints-----\n1 <= stdin.length <= 100\n1 <= stdin[i] <= 100\n\n-----Time Limit: 1.0s (O(n))-----\nTime Limit: 1.0s (O(n))\n\n-----Efficiency-----\nO(n)\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 4807,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print('FizzBuzz')\n        elif i % 3 == 0:\n            print('Fizz')\n        elif i % 5 == 0:\n            print('Buzz')\n        else:\n            print(i)\n    return ''\n\nSample Output 2:\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1",
        "test": "",
        "num_ids": 1722,
        "indeed": false
    },
    {
        "number": 4808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d_m = map(int, stdin.split())\n    if n == 0:\n        return \"It hadn't snowed this early!\"\n    if d_m == 0:\n        return \"It had never snowed this early!\"\n    if d_m > 100:\n        return \"It had never snowed this early!\"\n    if d_m < 100:\n        return \"It had never snowed this early!\"\n    k = 0\n    for i in range(n):\n        k += d_m - d_m % (i + 1)\n    if k == 0:\n        return \"It had never snowed this early!\"\n    return \"It had never snowed this early!\"\n\nSample Input 3:\n1\n1\nSample Output 3:\nIt hadn't snowed this early!\n\nSample Input 4:\n1\n1\nSample Output 4:\nIt had never snowed this early!\n\nSample Input 5:\n1\n1\nSample Output 5:\nIt had never snowed this early!\n\nSample Input 6:\n1\n1\nSample Output 6:\nIt had never snowed this early!\n\nSample Input 7:\n1\n1\nSample Output 7:\nIt had never snowed this early!\n\nSample Input 8:\n1\n1\nSample Output 8:\nIt had never snowed this early!\n\nSample Input 9:\n1\n1\nSample Output 9:\nIt had never snowed this early!\n\nSample Input 10:\n1\n1\nSample Output 10:\nIt had never snowed this early!\n\nSample Input 11:\n1\n1\nSample Output 11:\nIt had never snowed this early!\n\nSample Input 12:\n1\n1\nSample Output 12:\nIt had never snowed this early!\n\nSample Input 13:\n1\n1\nSample Output 13:\nIt had never snowed this early!\n\nSample Input 14:\n1\n1\nSample Output 14:\nIt had never snowed this early!\n\nSample Input 15:\n1\n1\nSample Output 15:\nIt had never snowed this early!\n\nSample Input 16:\n1\n1\nSample Output 16:\nIt had never snowed this early!\n\nSample Input 17:\n1\n1\nSample Output 17:\nIt had never snowed this early!\n\nSample Input 18:\n1\n1\nSample Output 18:\nIt had never snowed this early!\n\nSample Input 19:\n1\n1\nSample Output 19:\nIt had never snowed this early!\n\nSample Input 20:\n1\n1\nSample Output 20:\nIt had never snowed this early!\n\nSample Input 21:\n1\n1\nSample Output 21:\nIt had never snowed this early!\n\nSample Input 22:\n1\n1\nSample Output 22:\nIt had never snowed this early!\n\nSample Input 23:\n1\n1\nSample Output 23:\nIt had never snowed this early!\n\nSample Input 24:\n1\n1\nSample Output 24:\nIt had never snowed this early!\n\nSample Input 25:\n1\n1\nSample Output 25:\nIt had never snowed this early!\n\nSample Input 26:\n1\n1\nSample Output 26:\nIt had never snowed this early!\n\nSample Input 27:\n1\n1\nSample Output 27:\nIt had never snowed this early!\n\nSample Input 28:\n1\n1\nSample Output 28:\nIt had never snowed this early!\n\nSample Input 29:\n1\n1\nSample Output 29:\nIt had never snowed this early!\n\nSample Input 30:\n1\n1\nSample Output 30:\nIt had never snowed this early!\n\nSample Input 31:\n1\n1\nSample Output 31:\nIt had never snowed this early!\n\nSample Input 32:\n1\n1\nSample Output 32:\nIt had never snowed this early!\n\nSample Input 33:\n1\n1\nSample Output 33:\nIt had never snowed this early!\n\nSample Input 34:\n1\n1\nSample Output 34:\nIt had never snowed this early!\n\nSample Input 35:\n1\n1\nSample Output 35:\nIt had never snowed this early!\n\nSample Input 36:\n1\n1\nSample Output 36:\nIt had never snowed this early!\n\nSample Input 37:\n1\n1\nSample Output 37:\nIt had never snowed this early!\n\nSample Input 38:\n1\n1\nSample Output 38:\nIt had never snowed this early!\n\nSample Input 39:\n1\n1\nSample Output 39:\nIt had never snowed this early!\n\nSample Input 40:\n1\n1\nSample Output 40:\nIt had never snowed this early!\n\nSample Input 41:\n1\n1\nSample Output 41:\nIt had never snowed this early!\n\nSample Input 42:\n1\n1\nSample Output 42:\nIt had never snowed this early!\n\nSample Input 43:\n1\n1\nSample Output 43:\nIt had never snowed this early!\n\nSample Input 44:\n1\n1\nSample Output 44:\nIt had never snowed this early!\n\nSample Input 45:\n1\n1\nSample Output 45:\nIt had never snowed this early!\n\nSample Input 46:\n1\n1\nSample Output 46:\nIt had never snowed this early!\n\nSample Input 47:\n1\n1\nSample Output 47:\nIt had never snowed this early!\n\nSample Input 48:\n1\n1\nSample Output 48:\nIt had never snowed this early!\n\nSample Input 49:\n1\n1\nSample Output 49:\nIt had never snowed this early!\n\nSample Input 50:\n1\n1\nSample Output 50:\nIt had never snowed this early!\n\nSample Input 51:\n1\n1\nSample Output 51:\nIt had never snowed this early!\n\nSample Input 52:\n1\n1\nSample Output 52:\nIt had never snowed this early!\n\nSample Input 53:\n1\n1\nSample Output 53:\nIt had never snowed this early!\n\nSample Input 54:\n1\n1\nSample Output 54:\nIt had never snowed this early!\n\nSample Input 55:\n1\n1\nSample Output 55:\nIt had never snowed this early!\n\nSample Input 56:\n1\n1\nSample Output 56:\nIt had never snowed this early!\n\nSample Input 57:\n1\n1\nSample Output 57:\nIt had never snowed this early!\n\nSample Input 58:\n1\n1\nSample Output 58:\nIt had never snowed this early!\n\nSample Input 59:\n1\n1\nSample Output 59:\nIt",
        "test": "",
        "num_ids": 1522,
        "indeed": false
    },
    {
        "number": 4809,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    if n == s:\n        return '1'\n    elif n > s:\n        return '2'\n    else:\n        return '3'\n\nSample Input 3:\n10 10\nSample Output 3:\n7\ndef",
        "test": "",
        "num_ids": 70,
        "indeed": false
    },
    {
        "number": 4810,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(stdin.strip()))\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'b':\n                matrix[i][j] = 'a'\n            elif matrix[i][j] == 'o':\n                matrix[i][j] = 'd'\n            elif matrix[i][j] =='m':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'k':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] =='s':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'u':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'l':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'a':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'd':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j] = 'i'\n            elif matrix[i][j] == 'i':\n                matrix[i][j]",
        "test": "",
        "num_ids": 1566,
        "indeed": false
    },
    {
        "number": 4811,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(int, stdin.split())))\n\ndef",
        "test": "",
        "num_ids": 20,
        "indeed": false
    },
    {
        "number": 4812,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.split()\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(len(word)) if word[i]!='']\n    word = [word[i] for i in range(",
        "test": "",
        "num_ids": 1481,
        "indeed": false
    },
    {
        "number": 4813,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.split()\n    word = list(map(str, word))\n    word.sort()\n    answer = ''\n    for i in range(len(word)):\n        answer += word[i]\n    return answer\n\nSample Input 3:\nBANANA\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nSample Output 3:\nLOSE\ndef",
        "test": "",
        "num_ids": 92,
        "indeed": false
    },
    {
        "number": 4814,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    names = stdin.split()\n    names.sort()\n    for name in names:\n        if name[0].isupper():\n            print(name[0].upper())\n        else:\n            print(name[0].lower())\n    return \"\"\n\n-----Constraints-----\n1 <= N <= 20\n\n-----Time Limit: 1 sec\n\n-----Space Limit: 1M\n",
        "test": "",
        "num_ids": 90,
        "indeed": false
    },
    {
        "number": 4815,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, m = map(int, stdin.split())\n    names = []\n    for i in range(n):\n        names.append(stdin[i].split())\n    for i in range(m):\n        names[i].append(int(stdin[i+m].split()[0]))\n    names.sort(key=lambda x: x[1])\n    for i in range(n):\n        if names[i][1] == p:\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names[i][1] == 'p':\n            names[i][1] = 'p'\n    for i in range(n):\n        if names",
        "test": "",
        "num_ids": 1565,
        "indeed": false
    },
    {
        "number": 4816,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    return str(abs(x - x_1) + abs(y - y_1) + abs(x - x_2) + abs(y - y_2))\n\nSample Input 3:\n1 2 3 4 5\nSample Output 3:\n1.0\n\nSample Input 4:\n1 2 3 4 5\nSample Output 4:\n1.0\n\nSample Input 5:\n1 2 3 4 5\nSample Output 5:\n1.0\n\nSample Input 6:\n1 2 3 4 5\nSample Output 6:\n1.0\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n-10^5 <= x, y, x_1, y_1, x_2, y_2 <= 10^5\n\n-----Time Complexity-----\nO(n)\n\nO(n)\n\nO(n)\n\n-----Space Complexity-----\nO(1)\n\nO(n)\n\n-----Algorithm-----\n\ndef",
        "test": "",
        "num_ids": 253,
        "indeed": false
    },
    {
        "number": 4817,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n == 108:\n        return '108'\n    if n == 109:\n        return '109'\n    if n == 110:\n        return '110'\n    if n == 111:\n        return '111'\n    if n == 112:\n        return '112'\n    if n == 113:\n        return '113'\n    if n == 114:\n        return '114'\n    if n == 115:\n        return '115'\n    if n == 116:\n        return '116'\n    if n == 117:\n        return '117'\n    if n == 118:\n        return '118'\n    if n == 119:\n        return '119'\n    if n == 120:\n        return '120'\n    if n == 121:\n        return '121'\n    if n == 122:\n        return '122'\n    if n == 123:\n        return '123'\n    if n == 124:\n        return '124'\n    if n == 125:\n        return '125'\n    if n == 126:\n        return '126'\n    if n == 127:\n        return '127'\n    if n == 128:\n        return '128'\n    if n == 129:\n        return '129'\n    if n == 130:\n        return '130'\n    if n == 131:\n        return '131'\n    if n == 132:\n        return '132'\n    if n == 133:\n        return '133'\n    if n == 134:\n        return '134'\n    if n == 135:\n        return '135'\n    if n == 136:\n        return '136'\n    if n == 137:\n        return '137'\n    if n == 138:\n        return '138'\n    if n == 139:\n        return '139'\n    if n == 140:\n        return '140'\n    if n == 141:\n        return '141'\n    if n == 142:\n        return '142'\n    if n == 143:\n        return '143'\n    if n == 144:\n        return '144'\n    if n == 145:\n        return '145'\n    if n ==",
        "test": "",
        "num_ids": 1912,
        "indeed": false
    },
    {
        "number": 4818,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tasks = list(map(int, stdin.split()))\n    tasks.sort()\n    tasks = [tasks[i] for i in range(n)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    tasks.sort()\n    tasks = [tasks[i] for i in range(m)]\n    ",
        "test": "",
        "num_ids": 1509,
        "indeed": false
    },
    {
        "number": 4819,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(i) for i in stdin.split()]\n    numbers.sort()\n    for i in range(len(numbers)):\n        if numbers[i] % 42!= 0:\n            return str(i + 1)\n    return str(len(numbers))\n",
        "test": "",
        "num_ids": 72,
        "indeed": false
    },
    {
        "number": 4820,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, b = map(int, stdin.split())\n    if N == 1:\n        return \"yes\"\n    if N == 2:\n        return \"yes\"\n    if N == 3:\n        return \"yes\"\n    if N == 4:\n        return \"yes\"\n    if N == 5:\n        return \"yes\"\n    if N == 6:\n        return \"yes\"\n    if N == 7:\n        return \"yes\"\n    if N == 8:\n        return \"yes\"\n    if N == 9:\n        return \"yes\"\n    if N == 10:\n        return \"yes\"\n    if N == 11:\n        return \"yes\"\n    if N == 12:\n        return \"yes\"\n    if N == 13:\n        return \"yes\"\n    if N == 14:\n        return \"yes\"\n    if N == 15:\n        return \"yes\"\n    if N == 16:\n        return \"yes\"\n    if N == 17:\n        return \"yes\"\n    if N == 18:\n        return \"yes\"\n    if N == 19:\n        return \"yes\"\n    if N == 20:\n        return \"yes\"\n    if N == 21:\n        return \"yes\"\n    if N == 22:\n        return \"yes\"\n    if N == 23:\n        return \"yes\"\n    if N == 24:\n        return \"yes\"\n    if N == 25:\n        return \"yes\"\n    if N == 26:\n        return \"yes\"\n    if N == 27:\n        return \"yes\"\n    if N == 28:\n        return \"yes\"\n    if N == 29:\n        return \"yes\"\n    if N == 30:\n        return \"yes\"\n    if N == 31:\n        return \"yes\"\n    if N == 32:\n        return \"yes\"\n    if N == 33:\n        return \"yes\"\n    if N == 34:\n        return \"yes\"\n    if N == 35:\n        return \"yes\"\n    if N == 36:\n        return \"yes\"\n    if N == 37:\n        return \"yes\"\n    if N == 38:\n        return \"yes\"\n    if N == 39:\n        return \"yes\"\n    if N == 40:\n        return \"yes\"\n    if N == 41:\n        return \"yes\"\n    if N == 42:\n        return \"yes\"\n    if N == 43:\n        return \"yes\"\n    if N == 44:\n        return \"yes\"\n    if N == 45:\n        return \"yes\"\n    if N == 46:\n        return \"yes\"\n    if N == 47:\n        return \"yes\"\n    if N == 48:\n        return \"yes\"\n    if N == 49:\n        return \"yes\"\n    if N == 50:\n        return \"yes\"\n    if N == 51:\n        return \"yes\"\n    if N == 52:\n        return \"yes\"\n    if N == 53:\n        return \"yes\"\n    if N == 54:\n        return \"yes\"\n    if N == 55:\n        return \"yes\"\n    if N == 56:\n        return \"yes\"\n    if N == 57:\n        return \"yes\"\n    if N == 58:\n        return \"yes\"\n    if N == 59:\n        return \"yes\"\n    if N == 60:\n        return \"yes\"\n    if N == 61:\n        return \"yes\"\n    if N == 62:\n        return \"yes\"\n    if N == 63:\n        return \"yes\"\n    if N == 64:\n        return \"yes\"\n    if N == 65:\n        return \"yes\"\n    if N == 66:\n        return \"yes\"\n    if N == 67:\n        return \"yes\"\n    if N == 68:\n        return \"yes\"\n    if N == 69:\n        return \"yes\"\n    if N == 70:\n        return \"yes\"\n    if N == 71:\n        return \"yes\"\n    if N == 72:\n        return \"yes\"\n    if N == 73:\n        return \"yes\"\n    if N == 74:\n        return \"yes\"\n    if N == 75:\n        return \"yes\"\n    if N == 76:\n        return \"yes\"\n    if N == 77:\n        return \"yes\"\n    if N == 78:\n        return \"yes\"\n    if N == 79:\n        return \"yes\"\n    if N == 80:\n        return \"yes\"\n    if N == 81:\n        return \"yes\"\n    if N == 82:\n        return \"yes\"\n    if N == 83:\n        return \"yes\"\n    if N == 84:\n        return \"yes\"\n    if N == 85:\n        return \"yes\"\n    if N == 86:\n        return \"yes\"\n    if N == 87:\n        return \"yes\"\n    if N == 88:\n        return \"yes\"\n    if N == 89:\n        return \"yes\"\n    if N == 90:\n        return \"yes\"\n    if N == 91:\n        return \"yes\"\n    if N == 92:\n        return \"yes\"\n    if N == 93:\n        return \"yes\"\n    if N == 94:\n        return \"yes\"\n    if N == 95:\n        return \"yes\"\n    if N == 96:\n        return \"yes\"\n    if N == 97:\n        return \"yes\"\n    if N == 98:\n        return \"yes\"\n    if N == 99:\n        return \"yes\"\n    if N == 100:\n        return \"yes\"\n    if N == 101:\n        return \"yes\"\n    if N == 102:\n        return \"yes\"\n    if N == 103:\n        return \"yes\"\n    if N == 104:\n        return \"yes\"\n    if N == 105:\n        return \"yes\"\n    if N == 106:\n        return \"yes\"\n    if N == 107:\n        return \"yes\"\n    if N == 108:\n        return \"yes\"\n    if N == 109:\n        return \"yes\"\n    if N == 110:\n        return \"yes\"\n    if N == 111:\n        return \"yes\"\n    if N == 112:\n        return \"yes\"\n    if N == 113:\n        return \"yes\"\n    if N == 114:\n        return \"yes\"\n    if N == 115:\n        return \"yes\"\n    if N == 116:\n        return \"yes\"\n    if N == 117:\n        return \"yes\"\n    if N == 118:\n        return \"yes\"\n    if N == 119:\n        return \"yes\"\n    if N == 120:\n        return \"yes\"\n    if N == 121:\n        return \"yes\"\n    if N == 122:\n        return \"yes\"\n    if N == 123:\n        return \"yes\"\n    if N == 124:\n        return \"yes\"\n    if N == 125:\n        return \"yes\"\n    if N == 126:\n        return \"yes\"\n    if N == 127:\n        return \"yes\"\n    if N == 128:\n        return \"yes\"\n    if N == 129:\n        return \"yes\"\n    if N == 130:\n        return \"yes\"\n    if N == 131:\n        return",
        "test": "",
        "num_ids": 1715,
        "indeed": false
    },
    {
        "number": 4821,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin.split())) - 1)\n",
        "test": "",
        "num_ids": 19,
        "indeed": false
    },
    {
        "number": 4822,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, S, K = map(int, stdin.split())\n    if K > R:\n        return '0'\n    elif K == R:\n        return '1'\n    elif K > R:\n        return '0'\n    elif K < R:\n        return '0'\n    else:\n        return '1'\n",
        "test": "",
        "num_ids": 83,
        "indeed": false
    },
    {
        "number": 4823,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    cards = []\n    for i in range(n):\n        cards.append(list(map(int, input().strip().split())))\n    \n    def get_rank(card):\n        rank = 0\n        for i in range(len(card)):\n            rank += card[i] * (i + 1)\n        return rank\n    \n    def get_suit(card):\n        suit = 0\n        for i in range(len(card)):\n            suit += card[i] * (i + 1)\n        return suit\n    \n    def get_rank_suit(card):\n        rank = get_rank(card)\n        suit = get_suit(card)\n        return rank, suit\n    \n    def get_rank_suit_value(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n    def get_rank_suit_value_max_max_max_max(card):\n        rank, suit = get_rank_suit(card)\n        return rank * 52 + suit\n    \n",
        "test": "",
        "num_ids": 1823,
        "indeed": false
    },
    {
        "number": 4824,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    C, P = map(int, stdin.split())\n    if C > 100 or P > 7:\n        return '0'\n    if C == 0:\n        return '0'\n    if P == 0:\n        return '0'\n    if P == 1:\n        return '0'\n    if P == 2:\n        return '0'\n    if P == 3:\n        return '0'\n    if P == 4:\n        return '0'\n    if P == 5:\n        return '0'\n    if P == 6:\n        return '0'\n    if P == 7:\n        return '0'\n    if P == 8:\n        return '0'\n    if P == 9:\n        return '0'\n    if P == 10:\n        return '0'\n    if P == 11:\n        return '0'\n    if P == 12:\n        return '0'\n    if P == 13:\n        return '0'\n    if P == 14:\n        return '0'\n    if P == 15:\n        return '0'\n    if P == 16:\n        return '0'\n    if P == 17:\n        return '0'\n    if P == 18:\n        return '0'\n    if P == 19:\n        return '0'\n    if P == 20:\n        return '0'\n    if P == 21:\n        return '0'\n    if P == 22:\n        return '0'\n    if P == 23:\n        return '0'\n    if P == 24:\n        return '0'\n    if P == 25:\n        return '0'\n    if P == 26:\n        return '0'\n    if P == 27:\n        return '0'\n    if P == 28:\n        return '0'\n    if P == 29:\n        return '0'\n    if P == 30:\n        return '0'\n    if P == 31:\n        return '0'\n    if P == 32:\n        return '0'\n    if P == 33:\n        return '0'\n    if P == 34:\n        return '0'\n    if P == 35:\n        return '0'\n    if P == 36:\n        return '0'\n    if P == 37:\n        return '0'\n    if P == 38:\n        return '0'\n    if P == 39:\n        return '0'\n    if P == 40:\n        return '0'\n    if P == 41:\n        return '0'\n    if P == 42:\n        return '0'\n    if P == 43:\n        return '0'\n    if P == 44:\n        return '0'\n    if P == 45:\n        return '0'\n    if P == 46:\n        return '0'\n    if P == 47:\n        return '0'\n    if P == 48:\n        return '0'\n    if P == 49:\n        return '0'\n    if P == 50:\n        return '0'\n    if P == 51:\n        return '0'\n    if P == 52:\n        return '0'\n    if P == 53:\n        return '0'\n    if P == 54:\n        return '0'\n    if P == 55:\n        return '0'\n    if P == 56:\n        return '0'\n    if P == 57:\n        return '0'\n    if P == 58:\n        return '0'\n    if P == 59:\n        return '0'\n    if P == 60:\n        return '0'\n    if P == 61:\n        return '0'\n    if P == 62:\n        return '0'\n    if P == 63:\n        return '0'\n    if P == 64:\n        return '0'\n    if P == 65:\n        return '0'\n    if P == 66:\n        return '0'\n    if P == 67:\n        return '0'\n    if P == 68:\n        return '0'\n    if P == 69:\n        return '0'\n    if P == 70:\n        return '0'\n    if P == 71:\n        return '0'\n    if P == 72:\n        return '0'\n    if P == 73:\n        return '0'\n    if P == 74:\n        return '0'\n    if P == 75:\n        return '0'\n    if P == 76:\n        return '0'\n    if P == 77:\n        return '0'\n    if P == 78:\n        return '0'\n    if P == 79:\n        return '0'\n    if P == 80:\n        return '0'\n    if P == 81:\n        return '0'\n    if P == 82:\n        return '0'\n    if P == 83:\n        return '0'\n    if P == 84:\n        return '0'\n    if P == 85:\n        return '0'\n    if P == 86:\n        return '0'\n    if P == 87:\n        return '0'\n    if P == 88:\n        return '0'\n    if P == 89:\n        return '0'\n    if P == 90:\n        return '0'\n    if P == 91:\n        return '0'\n    if P == 92:\n        return '0'\n    if P == 93:\n        return '0'\n    if P == 94:\n        return '0'\n    if P == 95:\n        return '0'\n    if P == 96:\n        return '0'\n    if P == 97:\n        return '0'\n    if P == 98:\n        return '0'\n    if P == 99:\n        return '0'\n    if P == 100:\n        return '0'\n    if P == 101:\n        return '0'\n    if P == 102:\n        return '0'\n    if P == 103:\n        return '0'\n    if P == 104:\n        return '0'\n    if P == 105:\n        return '0'\n    if P == 106:\n        return '0'\n    if P == 107:\n        return '0'\n    if P == 108:\n        return '0'\n    if P == 109:\n        return '0'\n    if P == 110:\n        return '0'\n    if P == 111:\n        return '0'\n    if P == 112:\n        return '0'\n    if P == 113:\n        return '0'\n    if P == 114:\n        return '0'\n    if P == 115:\n        return '0'\n    if P == 116:\n        return '0'\n    if P == 117:\n        return '0'\n    if P == 118:\n        return '0'\n    if P == 119:",
        "test": "",
        "num_ids": 1599,
        "indeed": false
    },
    {
        "number": 4825,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin))\n\nSample Input 3:\nWhat's the Frequency, Kenneth?\nSample Output 3:\n\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\ndef",
        "test": "",
        "num_ids": 85,
        "indeed": false
    },
    {
        "number": 4826,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return 'Alice'\n    else:\n        return 'Bob'\n\ndef",
        "test": "",
        "num_ids": 37,
        "indeed": false
    },
    {
        "number": 4827,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 1 or n > 20:\n        return \"\"\n    if n == 1:\n        return \"one\"\n    if n == 2:\n        return \"two\"\n    if n == 3:\n        return \"three\"\n    if n == 4:\n        return \"four\"\n    if n == 5:\n        return \"five\"\n    if n == 6:\n        return \"six\"\n    if n == 7:\n        return \"seven\"\n    if n == 8:\n        return \"eight\"\n    if n == 9:\n        return \"nine\"\n    if n == 10:\n        return \"ten\"\n    if n == 11:\n        return \"eleven\"\n    if n == 12:\n        return \"twelve\"\n    if n == 13:\n        return \"thirteen\"\n    if n == 14:\n        return \"fourteen\"\n    if n == 15:\n        return \"fifteen\"\n    if n == 16:\n        return \"sixteen\"\n    if n == 17:\n        return \"seventeen\"\n    if n == 18:\n        return \"eighteen\"\n    if n == 19:\n        return \"nineteen\"\n    if n == 20:\n        return \"twenty\"\n    if n == 21:\n        return \"thirty\"\n    if n == 22:\n        return \"forty\"\n    if n == 23:\n        return \"fifty\"\n    if n == 24:\n        return \"sixty\"\n    if n == 25:\n        return \"seventy\"\n    if n == 26:\n        return \"eighty\"\n    if n == 27:\n        return \"ninety\"\n    if n == 28:\n        return \"twenty\"\n    if n == 29:\n        return \"thirty\"\n    if n == 30:\n        return \"forty\"\n    if n == 31:\n        return \"fifty\"\n    if n == 32:\n        return \"sixty\"\n    if n == 33:\n        return \"seventy\"\n    if n == 34:\n        return \"eighty\"\n    if n == 35:\n        return \"ninety\"\n    if n == 36:\n        return \"twenty\"\n    if n == 37:\n        return \"thirty\"\n    if n == 38:\n        return \"forty\"\n    if n == 39:\n        return \"fifty\"\n    if n == 40:\n        return \"sixty\"\n    if n == 41:\n        return \"seventy\"\n    if n == 42:\n        return \"eighty\"\n    if n == 43:\n        return \"ninety\"\n    if n == 44:\n        return \"twenty\"\n    if n == 45:\n        return \"thirty\"\n    if n == 46:\n        return \"forty\"\n    if n == 47:\n        return \"fifty\"\n    if n == 48:\n        return \"sixty\"\n    if n == 49:\n        return \"seventy\"\n    if n == 50:\n        return \"eighty\"\n    if n == 51:\n        return \"ninety\"\n    if n == 52:\n        return \"twenty\"\n    if n == 53:\n        return \"thirty\"\n    if n == 54:\n        return \"forty\"\n    if n == 55:\n        return \"fifty\"\n    if n == 56:\n        return \"sixty\"\n    if n == 57:\n        return \"seventy\"\n    if n == 58:\n        return \"eighty\"\n    if n == 59:\n        return \"ninety\"\n    if n == 60:\n        return \"twenty\"\n    if n == 61:\n        return \"thirty\"\n    if n == 62:\n        return \"forty\"\n    if n == 63:\n        return \"fifty\"\n    if n == 64:\n        return \"sixty\"\n    if n == 65:\n        return \"seventy\"\n    if n == 66:\n        return \"eighty\"\n    if n == 67:\n        return \"ninety\"\n    if n == 68:",
        "test": "",
        "num_ids": 968,
        "indeed": false
    },
    {
        "number": 4828,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n",
        "test": "",
        "num_ids": 1432,
        "indeed": false
    },
    {
        "number": 4829,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nSample Input 3:\n1 1\nSample Output 3:\nNot a moose\n\nSample Input 4:\n1 1\nSample Output 4:\nOdd 6\n\nSample Input 5:\n1 1\nSample Output 5:\nEven 6\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 97,
        "indeed": false
    },
    {
        "number": 4830,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip().split()\n    s = [int(i) for i in s]\n    s.sort()\n    s = [str(i) for i in s]\n    s = ''.join(s)\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s =",
        "test": "",
        "num_ids": 1486,
        "indeed": false
    },
    {
        "number": 4831,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    for i in range(len(stdin)):\n        if i % 5 == 0:\n            answer += '*' * 5\n        answer += stdin[i]\n    return answer\n\nSample Input 3:\nA\nSample Output 3:\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\n",
        "test": "",
        "num_ids": 1701,
        "indeed": false
    },
    {
        "number": 4832,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(round(math.sqrt(float(stdin.strip()))))\n\nSample Input 3:\n1\nSample Output 3:\n1\n\nSample Input 4:\n1\nSample Output 4:\n1\n\n-----Constraints-----\n1 <= stdin.length <= 100\n0 <= stdin[i] <= 10000\n\n-----Time Limit: 1 second\n-----Memory Limit: 1GB\n-----Test Input 1:\n1\nSample Test 1:\n1\nSample Test 2:\n1\nSample Test 3:\n1\nSample Test 4:\n1\n-----Explanation-----\nThe input is as follows:\n\nSample Input:\n1\nSample Output:\n3.141593\n2.000000\n\nSample Input:\n21\nSample Output:\n1385.442360\n882.000000\ndef",
        "test": "",
        "num_ids": 185,
        "indeed": false
    },
    {
        "number": 4833,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return '0'\n    else:\n        return str(sum(map(int, str(n))))\n",
        "test": "",
        "num_ids": 48,
        "indeed": false
    },
    {
        "number": 4834,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    time = [0] * n\n    for i in range(n):\n        time[i] = int(stdin.strip())\n    time.sort()\n    answer = ''\n    for i in range(n):\n        answer += str(time[i]) +''\n    return answer\n\ndef",
        "test": "",
        "num_ids": 82,
        "indeed": false
    },
    {
        "number": 4835,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    visited[0][0] = True\n    q = deque()\n    q.append((0, 0, 0))\n    while q:\n        x, y, z = q.popleft()\n        if x == n - 1 and y == m - 1:\n            return str(z)\n        for dx, dy, dz in ((1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, -1, 0)):\n            nx, ny, nz = x + dx, y + dy, z + dz\n            if 0 <= nx < n and 0 <= ny < m and 0 <= nz < m and not visited[nx][ny] and grid[nx][ny] == 1:\n                visited[nx][ny] = True\n                q.append((nx, ny, nz))\n    return \"NOT POSSIBLE\"\n",
        "test": "",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 4836,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    fruits = list(map(int, stdin.split()))\n    fruits.sort()\n    answer = 0\n    for i in range(n):\n        if c > 0:\n            answer += fruits[i]\n            c -= 1\n        else:\n            answer += fruits[i]\n    return str(answer)\n\ndef",
        "test": "",
        "num_ids": 95,
        "indeed": false
    },
    {
        "number": 4837,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, N = map(int, stdin.split())\n    symbols = list(map(str, range(1, N + 1)))\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].upper()\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].lower()\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].capitalize()\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].replace('S', 'S')\n        symbols[i] = symbols[i].replace('P', 'P')\n        symbols[i] = symbols[i].replace('R', 'R')\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].replace('S', 'S')\n        symbols[i] = symbols[i].replace('P', 'P')\n        symbols[i] = symbols[i].replace('R', 'R')\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].replace('S', 'S')\n        symbols[i] = symbols[i].replace('P', 'P')\n        symbols[i] = symbols[i].replace('R', 'R')\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].replace('S', 'S')\n        symbols[i] = symbols[i].replace('P', 'P')\n        symbols[i] = symbols[i].replace('R', 'R')\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].replace('S', 'S')\n        symbols[i] = symbols[i].replace('P', 'P')\n        symbols[i] = symbols[i].replace('R', 'R')\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].replace('S', 'S')\n        symbols[i] = symbols[i].replace('P', 'P')\n        symbols[i] = symbols[i].replace('R', 'R')\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].replace('S', 'S')\n        symbols[i] = symbols[i].replace('P', 'P')\n        symbols[i] = symbols[i].replace('R', 'R')\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].replace('S', 'S')\n        symbols[i] = symbols[i].replace('P', 'P')\n        symbols[i] = symbols[i].replace('R', 'R')\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].replace('S', 'S')\n        symbols[i] = symbols[i].replace('P', 'P')\n        symbols[i] = symbols[i].replace('R', 'R')\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].replace('S', 'S')\n        symbols[i] = symbols[i].replace('P', 'P')\n        symbols[i] = symbols[i].replace('R', 'R')\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].replace('S', 'S')\n        symbols[i] = symbols[i].replace('P', 'P')\n        symbols[i] = symbols[i].replace('R', 'R')\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].replace('S', 'S')\n        symbols[i] = symbols[i].replace('P', 'P')\n        symbols[i] = symbols[i].replace('R', 'R')\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].replace('S', 'S')\n        symbols[i] = symbols[i].replace('P', 'P')\n        symbols[i] = symbols[i].replace('R', 'R')\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].replace('S', 'S')\n        symbols[i] = symbols[i].replace('P', 'P')\n        symbols[i] = symbols[i].replace('R', 'R')\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].replace('S', 'S')\n        symbols[i] = symbols[i].replace('P', 'P')\n        symbols[i] = symbols[i].replace('R', 'R')\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].replace('S', 'S')\n        symbols[i] = symbols[i].replace('P', 'P')\n        symbols[i] = symbols[i].replace('R', 'R')\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].replace('S', 'S')\n        symbols[i] = symbols[i].replace('P', 'P')\n        symbols[i] = symbols[i].replace('R', 'R')\n    symbols.sort()\n    for i in range(N):\n        symbols[i] = symbols[i].replace('S', 'S')\n        symbols[i] = symbols[i].replace('P', 'P')\n        symbols[i] =",
        "test": "",
        "num_ids": 1507,
        "indeed": false
    },
    {
        "number": 4838,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    times = []\n    for i in range(n):\n        times.append(int(stdin[i]))\n    times.sort()\n    for i in range(n):\n        if times[i] == 0:\n            times[i] = 1\n        else:\n            times[i] = 0\n    return str(sum(times))\n",
        "test": "",
        "num_ids": 92,
        "indeed": false
    },
    {
        "number": 4839,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    if n == 1:\n        return str(c)\n    elif n == 2:\n        return str(c/2)\n    else:\n        return str(c/n)\n\nSample Input 3:\n3\n1 2 3 4 5\nSample Output 3:\n0.5\n\nSample Input 4:\n1\n1 2 3 4 5\nSample Output 4:\n0.5\n\nSample Input 5:\n1\n1 2 3 4 5\nSample Output 5:\n0.5\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= c <= 10^5\n\n-----Time Limit: 1 sec\n\n-----Space Limit: 1 GB\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 172,
        "indeed": false
    },
    {
        "number": 4840,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a + b == a * b:\n        return 'Tie'\n    if a * b == a + b:\n        return 'Tie'\n    if a * b == a + b + 3:\n        return 'Tie'\n    if a * b == a + b + 4:\n        return 'Tie'\n    if a * b == a + b + 5:\n        return 'Tie'\n    if a * b == a + b + 6:\n        return 'Tie'\n    if a * b == a + b + 7:\n        return 'Tie'\n    if a * b == a + b + 8:\n        return 'Tie'\n    if a * b == a + b + 9:\n        return 'Tie'\n    if a * b == a + b + 10:\n        return 'Tie'\n    if a * b == a + b + 11:\n        return 'Tie'\n    if a * b == a + b + 12:\n        return 'Tie'\n    if a * b == a + b + 13:\n        return 'Tie'\n    if a * b == a + b + 14:\n        return 'Tie'\n    if a * b == a + b + 15:\n        return 'Tie'\n    if a * b == a + b + 16:\n        return 'Tie'\n    if a * b == a + b + 17:\n        return 'Tie'\n    if a * b == a + b + 18:\n        return 'Tie'\n    if a * b == a + b + 19:\n        return 'Tie'\n    if a * b == a + b + 20:\n        return 'Tie'\n    if a * b == a + b + 21:\n        return 'Tie'\n    if a * b == a + b + 22:\n        return 'Tie'\n    if a * b == a + b + 23:\n        return 'Tie'\n    if a * b == a + b + 24:\n        return 'Tie'\n    if a * b == a + b + 25:\n        return 'Tie'\n    if a * b == a + b + 26:\n        return 'Tie'\n    if a * b == a + b + 27:\n        return 'Tie'\n    if a * b == a + b + 28:\n        return 'Tie'\n    if a * b == a + b + 29:\n        return 'Tie'\n    if a * b == a + b + 30:\n        return 'Tie'\n    if a * b == a + b + 31:\n        return 'Tie'\n    if a * b == a + b + 32:\n        return 'Tie'\n    if a * b == a + b + 33:\n        return 'Tie'\n    if a * b == a + b + 34:\n        return 'Tie'\n    if a * b == a + b + 35:\n        return 'Tie'\n    if a * b == a + b + 36:\n        return 'Tie'\n    if a * b == a + b + 37:\n        return 'Tie'\n    if a * b == a + b + 38:\n        return 'Tie'\n    if a * b == a + b + 39:\n        return 'Tie'\n    if a * b == a + b + 40:\n        return 'Tie'\n    if a * b == a + b + 41:\n        return 'Tie'\n    if a * b == a + b + 42:\n        return 'Tie'\n    if a * b == a + b + 43:\n        return 'Tie'\n    if a * b == a + b + 44:\n        return 'Tie'\n    if a * b == a + b + 45:\n        return 'Tie'\n    if a * b == a + b + 46:\n        return 'Tie'\n    if a * b == a + b + 47:\n        return 'Tie'\n    if a * b == a + b + 48:\n        return 'Tie'\n    if a * b == a + b + 49:\n        return 'Tie'\n    if a * b == a + b + 50:\n        return 'Tie'\n    if a * b == a + b + 51:\n        return 'Tie'\n    if a * b == a + b + 52:\n        return 'Tie'\n    if a * b == a + b + 53:\n        return 'Tie'\n    if a * b == a + b + 54:\n        return 'Tie'\n    if a * b == a + b + 55:\n        return 'Tie'\n    if a * b == a + b + 56:\n        return 'Tie'\n    if a * b == a + b + 57:\n        return 'Tie'\n    if a * b == a + b + 58:\n        return 'Tie'\n    if a * b == a + b + 59:\n        return 'Tie'\n    if a * b == a + b + 60:\n        return 'Tie'\n    if a * b == a + b + 61:\n        return 'Tie'\n    if a * b == a + b + 62:\n        return 'Tie'\n    if a * b == a + b + 63:\n        return 'Tie'\n    if a * b == a + b + 64:\n        return 'Tie'\n    if a * b == a + b + 65:\n        return 'Tie'\n    if a * b == a + b + 66:\n        return 'Tie'\n    if a * b == a + b + 67:\n        return 'Tie'\n    if a * b == a + b + 68:\n        return 'Tie'\n    if a * b == a + b + 69:\n        return 'Tie'\n    if a * b == a + b + 70:\n        return 'Tie'\n    if a * b == a + b + 71:\n        return 'Tie'\n    if a * b == a + b + 72:\n        return 'Tie'\n    if a * b == a + b + 73:\n        return 'Tie'\n    if a * b == a + b + 74:\n        return 'Tie'\n    if a * b == a + b + 75:\n        return 'Tie'\n    if a * b == a + b + 76:\n        return 'Tie'\n    if a * b == a + b + 77:\n        return 'Tie'\n    if a * b == a + b + 78:\n        return 'Tie'\n    if a * b == a",
        "test": "",
        "num_ids": 1579,
        "indeed": false
    },
    {
        "number": 4841,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 0:\n        return \"something is fishy\"\n    elif n == 0:\n        return \"mumble\"\n    else:\n        return \"mumble\" + solution(n-1)\n\nSample Input 3:\n5\n1 2 3 mumble 5\nSample Output 3:\nmumble\n\nSample Input 4:\n8\n1 2 3 mumble mumble 7 mumble 8\nSample Output 4:\nmumble\n\nSample Input 5:\n1\nSample Output 5:\nnothing\n\nSample Input 6:\n1\nSample Output 6:\nnothing\n\nSample Input 7:\n1\nSample Output 7:\nnothing\n\nSample Input 8:\n1\nSample Output 8:\nnothing\n\n-----Constraints-----\n1 <= n <= 10^5\n\n-----Time Limit: 1 sec\n\n-----Space Limit: 1 sec\n\n-----Alternatives\n\n1. Use a stack to store the number of mumble in the last bite.\n2. Use a queue to store the number of mumble in the last bite.\n3. Use a stack to store the number of mumble in the last bite.\n4. Use a queue to store the number of mumble in the last bite.\n5. Use a stack to store the number of mumble in the last bite.\n6. Use a queue to store the number of mumble in the last bite.\n7. Use a stack to store the number of mumble in the last bite.\n8. Use a queue to store the number of mumble in the last bite.\n\n-----Submissions-----\n",
        "test": "",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 4842,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n ==",
        "test": "",
        "num_ids": 1394,
        "indeed": false
    },
    {
        "number": 4843,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    board = [list(map(int, input().split())) for _ in range(N)]\n    \n    def is_valid(board, x, y):\n        if x < 0 or x >= N or y < 0 or y >= N:\n            return False\n        if board[x][y] == 0:\n            return False\n        if board[x][y] == 1:\n            return True\n        return is_valid(board, x + 1, y) or is_valid(board, x - 1, y) or is_valid(board, x, y + 1) or is_valid(board, x, y - 1)\n    \n    def is_solution(board, x, y):\n        if x < 0 or x >= N or y < 0 or y >= N:\n            return False\n        if board[x][y] == 0:\n            return False\n        if board[x][y] == 1:\n            return True\n        return is_solution(board, x + 1, y) or is_solution(board, x - 1, y) or is_solution(board, x, y + 1) or is_solution(board, x, y - 1)\n    \n    for i in range(N):\n        for j in range(N):\n            if board[i][j] == 0:\n                if is_valid(board, i, j):\n                    board[i][j] = 1\n                    if is_solution(board, i, j):\n                        return 'CORRECT'\n                    board[i][j] = 0\n    return 'INCORRECT'\n",
        "test": "",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 4844,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(n):\n        if a[i] == a[i+1]:\n            a[i], a[i+1] = a[i+1], a[i]\n        else:\n            return 'NO'\n    return 'YES'\n",
        "test": "",
        "num_ids": 94,
        "indeed": false
    },
    {
        "number": 4845,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day = stdin.split()\n    day = [int(i) for i in day]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-1]\n    day = day[::-",
        "test": "",
        "num_ids": 1861,
        "indeed": false
    },
    {
        "number": 4846,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    l.sort()\n    for i in range(len(l)):\n        if l[i] < m:\n            return str(l[i])\n    return str(l[-1])\n\nSample Input 3:\n1\n1\nSample Output 3:\n1\n\nSample Input 4:\n1\n1\nSample Output 4:\n1\n\n-----Constraints-----\n1 <= L <= 10000\n1 <= D <= 10000\n1 <= X <= 36\n\n-----Time Limit: 1 sec (Python3)-----\nTime Limit: 1 sec (Python3)\n\n-----Space Limit: 1 GB (Python3)-----\nSpace Limit: 1 GB (Python3)\n\n-----Alternatives-----\nDynamic Programming\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 198,
        "indeed": false
    },
    {
        "number": 4847,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    tree_list = []\n    for _ in range(N):\n        tree_list.append(list(map(int, stdin.strip().split())))\n    \n    tree_list.sort(key=lambda x: x[0])\n    \n    answer = 0\n    for i in range(N):\n        answer += tree_list[i][1] - tree_list[i][0]\n    \n    return str(answer)\n\ndef",
        "test": "",
        "num_ids": 117,
        "indeed": false
    },
    {
        "number": 4848,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = n\n    while m % 2 == 0:\n        m = m // 2\n    while m % 2 == 1:\n        m = m // 2\n    return str(m)\n\nSample Input 3:\n1\nSample Output 3:\n1\n\nSample Input 4:\n1\nSample Output 4:\n1\n\nSample Input 5:\n1\nSample Output 5:\n1\n\nSample Input 6:\n1\nSample Output 6:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n\n-----Time Limit: 1 sec\n\n-----Space Limit: 1 sec\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/square-free-number-of-notes-in-a-square-free-number/\n\nhttps://www.geeksforgeeks.org/square-free-number-of-notes-in-a-square-free-number/\n\nhttps://www.geeksforgeeks.org/square-free-number-of-notes-in-a-square-free-number/\n\n\"\"\"",
        "test": "",
        "num_ids": 251,
        "indeed": false
    },
    {
        "number": 4849,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(sorted(stdin))\n",
        "test": "",
        "num_ids": 13,
        "indeed": false
    },
    {
        "number": 4850,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    triangles = []\n    for i in range(n):\n        triangles.append(list(map(int, input().split())))\n    \n    # find the minimum length of the rod\n    def find_rod_length(rod_length, rod_width):\n        if rod_length == 0:\n            return 0\n        \n        if rod_length < rod_width:\n            return rod_length\n        \n        return rod_length - rod_width\n    \n    # find the minimum length of the string\n    def find_string_length(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string_length < string_width:\n            return string_length\n        \n        return string_length - string_width\n    \n    # find the minimum length of the string\n    def find_string_length_2(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string_length < string_width:\n            return string_length\n        \n        return string_length - string_width\n    \n    # find the minimum length of the string\n    def find_string_length_3(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string_length < string_width:\n            return string_length\n        \n        return string_length - string_width\n    \n    # find the minimum length of the string\n    def find_string_length_4(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string_length < string_width:\n            return string_length\n        \n        return string_length - string_width\n    \n    # find the minimum length of the string\n    def find_string_length_5(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string_length < string_width:\n            return string_length\n        \n        return string_length - string_width\n    \n    # find the minimum length of the string\n    def find_string_length_6(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string_length < string_width:\n            return string_length\n        \n        return string_length - string_width\n    \n    # find the minimum length of the string\n    def find_string_length_7(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string_length < string_width:\n            return string_length\n        \n        return string_length - string_width\n    \n    # find the minimum length of the string\n    def find_string_length_8(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string_length < string_width:\n            return string_length\n        \n        return string_length - string_width\n    \n    # find the minimum length of the string\n    def find_string_length_9(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string_length < string_width:\n            return string_length\n        \n        return string_length - string_width\n    \n    # find the minimum length of the string\n    def find_string_length_10(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string_length < string_width:\n            return string_length\n        \n        return string_length - string_width\n    \n    # find the minimum length of the string\n    def find_string_length_11(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string_length < string_width:\n            return string_length\n        \n        return string_length - string_width\n    \n    # find the minimum length of the string\n    def find_string_length_12(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string_length < string_width:\n            return string_length\n        \n        return string_length - string_width\n    \n    # find the minimum length of the string\n    def find_string_length_13(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string_length < string_width:\n            return string_length\n        \n        return string_length - string_width\n    \n    # find the minimum length of the string\n    def find_string_length_14(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string_length < string_width:\n            return string_length\n        \n        return string_length - string_width\n    \n    # find the minimum length of the string\n    def find_string_length_15(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string_length < string_width:\n            return string_length\n        \n        return string_length - string_width\n    \n    # find the minimum length of the string\n    def find_string_length_16(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string_length < string_width:\n            return string_length\n        \n        return string_length - string_width\n    \n    # find the minimum length of the string\n    def find_string_length_17(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string_length < string_width:\n            return string_length\n        \n        return string_length - string_width\n    \n    # find the minimum length of the string\n    def find_string_length_18(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string_length < string_width:\n            return string_length\n        \n        return string_length - string_width\n    \n    # find the minimum length of the string\n    def find_string_length_19(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string_length < string_width:\n            return string_length\n        \n        return string_length - string_width\n    \n    # find the minimum length of the string\n    def find_string_length_20(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string_length < string_width:\n            return string_length\n        \n        return string_length - string_width\n    \n    # find the minimum length of the string\n    def find_string_length_21(string_length, string_width):\n        if string_length == 0:\n            return 0\n        \n        if string",
        "test": "",
        "num_ids": 1665,
        "indeed": false
    },
    {
        "number": 4851,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1000000000:\n        return str(n)\n    else:\n        return str(n//100000) + \"0000000\"\n\nSample Input 3:\n1\nSample Output 3:\n1\n\nSample Input 4:\n1\nSample Output 4:\n1\n\nSample Input 5:\n1\nSample Output 5:\n1\n\nSample Input 6:\n1\nSample Output 6:\n1\n\nSample Input 7:\n1\nSample Output 7:\n1\n\nSample Input 8:\n1\nSample Output 8:\n1\n\nSample Input 9:\n1\nSample Output 9:\n1\n\nSample Input 10:\n1\nSample Output 10:\n1\n\nSample Input 11:\n1\nSample Output 11:\n1\n\nSample Input 12:\n1\nSample Output 12:\n1\n\nSample Input 13:\n1\nSample Output 13:\n1\n\nSample Input 14:\n1\nSample Output 14:\n1\n\nSample Input 15:\n1\nSample Output 15:\n1\n\nSample Input 16:\n1\nSample Output 16:\n1\n\nSample Input 17:\n1\nSample Output 17:\n1\n\nSample Input 18:\n1\nSample Output 18:\n1\n\nSample Input 19:\n1\nSample Output 19:\n1\n\nSample Input 20:\n1\nSample Output 20:\n1\n\nSample Input 21:\n1\nSample Output 21:\n1\n\nSample Input 22:\n1\nSample Output 22:\n1\n\nSample Input 23:\n1\nSample Output 23:\n1\n\nSample Input 24:\n1\nSample Output 24:\n1\n\nSample Input 25:\n1\nSample Output 25:\n1\n\nSample Input 26:\n1\nSample Output 26:\n1\n\nSample Input 27:\n1\nSample Output 27:\n1\n\nSample Input 28:\n1\nSample Output 28:\n1\n\nSample Input 29:\n1\nSample Output 29:\n1\n\nSample Input 30:\n1\nSample Output 30:\n1\n\nSample Input 31:\n1\nSample Output 31:\n1\n\nSample Input 32:\n1\nSample Output 32:\n1\n\nSample Input 33:\n1\nSample Output 33:\n1\n\nSample Input 34:\n1\nSample Output 34:\n1\n\nSample Input 35:\n1\nSample Output 35:\n1\n\nSample Input 36:\n1\nSample Output 36:\n1\n\nSample Input 37:\n1\nSample Output 37:\n1\n\nSample Input 38:\n1\nSample Output 38:\n1\n\nSample Input 39:\n1\nSample Output 39:\n1\n\nSample Input 40:\n1\nSample Output 40:\n1\n\nSample Input 41:\n1\nSample Output 41:\n1\n\nSample Input 42:\n1\nSample Output 42:\n1\n\nSample Input 43:\n1\nSample Output 43:\n1\n\nSample Input 44:\n1\nSample Output 44:\n1\n\nSample Input 45:\n1\nSample Output 45:\n1\n\nSample Input 46:\n1\nSample Output 46:\n1\n\nSample Input 47:\n1\nSample Output 47:\n1\n\nSample Input 48:\n1\nSample Output 48:\n1\n\nSample Input 49:\n1\nSample Output 49:\n1\n\nSample Input 50:\n1\nSample Output 50:\n1\n\nSample Input 51:\n1\nSample Output 51:\n1\n\nSample Input 52:\n1\nSample Output 52:\n1\n\nSample Input 53:\n1\nSample Output 53:\n1\n\nSample Input 54:\n1\nSample Output 54:\n1\n\nSample Input 55:\n1\nSample Output 55:\n1\n\nSample Input 56:\n1\nSample Output 56:\n1\n\nSample Input 57:\n1\nSample Output 57:\n1\n\nSample Input 58:\n1\nSample Output 58:\n1\n\nSample Input 59:\n1\nSample Output 59:\n1\n\nSample Input 60:\n1\nSample Output 60:\n1\n\nSample Input 61:\n1\nSample Output 61:\n1\n\nSample Input 62:\n1\nSample Output 62:\n1\n\nSample Input 63:\n1\nSample Output 63:\n1\n\nSample Input 64:\n1\nSample Output 64:\n1\n\nSample Input 65:\n1\nSample Output 65:\n1\n\nSample Input 66:\n1\nSample Output 66:\n1\n\nSample Input 67:\n1\nSample Output 67:\n1\n\nSample Input 68:\n1\nSample Output 68:\n1\n\nSample Input 69:\n1\nSample Output 69:\n1\n\nSample Input 70:\n1\nSample Output 70:\n1\n\nSample Input 71:\n1\nSample Output 71:\n1\n\nSample Input 72:\n1\nSample Output 72:\n1\n\nSample Input 73:\n1\nSample Output 73:\n1\n\nSample Input 74:\n1\nSample Output 74:\n1\n\nSample Input 75:\n1\nSample Output 75:\n1\n\nSample Input 76:\n1\nSample Output 76:\n1\n\nSample Input 77:\n1\nSample Output 77:\n1\n\nSample Input 78:\n1\nSample Output 78:\n1\n\nSample Input 79:\n1\nSample Output 79:\n1\n\nSample Input 80:\n1\nSample Output 80:\n1\n\nSample Input 81:\n1\nSample Output 81:\n1\n\nSample Input 82:\n1\nSample Output 82:\n1\n\nSample Input 83:\n1\nSample Output 83:\n1\n\nSample Input 84:\n1\nSample Output 84:\n1\n\nSample Input 85:\n1\nSample Output 85:\n1\n\nSample Input 86:\n1\nSample Output 86:\n1\n\nSample Input 87:\n1\nSample Output 87:\n1\n\nSample Input 88:\n1\nSample Output 88:\n1\n\nSample Input 89:\n1\nSample Output 89:\n1\n\nSample Input 90:\n1\nSample Output 90:\n1\n\nSample Input 91:\n1\nSample Output 91:\n1\n\nSample Input 92:\n1\nSample Output 92:\n1\n\nSample Input 93:\n1\nSample Output 93:\n1\n\nSample Input 94:\n1\nSample Output 94:\n1\n\nSample Input 95:\n1\nSample Output 95:\n1\n\nSample Input 96:\n1\nSample Output 96:\n1\n\nSample Input 97:\n1\nSample Output 97:\n1\n\nSample Input 98:\n1\nSample Output 98:\n1\n\nSample Input 99:\n1\nSample Output 99:\n1\n\nSample Input 100:\n1\nSample Output 100:\n1\n\nSample Input 101:\n1\nSample Output 101:\n1\n\nSample Input 102:\n1\nSample Output 102:\n1\n\nSample Input 103:\n1\nSample Output 103:\n1\n\nSample Input 104:\n1\nSample Output 104:\n1\n\nSample Input 105:\n1\nSample Output 105:\n1\n\nSample Input 106:\n1\nSample Output 106:\n1\n\nSample Input 107:\n1\nSample Output 107:\n1\n\nSample Input 108:\n1\nSample Output 108:\n1\n\nSample Input 109:\n1\nSample Output 109:\n1\n\nSample Input 110:\n1\nSample Output 110:\n1\n\nSample Input 111:\n1\nSample Output 111:\n1\n\nSample Input 112:\n1\nSample Output 112:\n1\n\nSample Input 113:\n1\nSample Output 113:\n1\n\nSample Input 114:\n1\nSample Output 114:\n1\n\nSample Input 115:\n1\n",
        "test": "",
        "num_ids": 1731,
        "indeed": false
    },
    {
        "number": 4852,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    plus = ['+']\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n    plus.extend(['+'] * (n - 1))\n",
        "test": "",
        "num_ids": 1457,
        "indeed": false
    },
    {
        "number": 4853,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    c = [0] * (n + 1)\n    for i in range(n):\n        c[i + 1] = c[i] + a[i]\n    for i in range(n - 1, -1, -1):\n        c[i] = c[i + 1] + a[i]\n    return''.join(map(str, c))\n\nSample Input 3:\n1 2 3 4\nSample Output 3:\n1 2 3 4\ndef",
        "test": "",
        "num_ids": 145,
        "indeed": false
    },
    {
        "number": 4854,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    lst.sort()\n    for i in range(n):\n        if lst[i] == c:\n            return str(i+1)\n    return str(n+1)\n\nSample Input 3:\n5 2\n2 1 2 1 2\nSample Output 3:\n2 2 2 1 1\n\nSample Input 4:\n9 3\n1 3 3 3 2 2 2 1 1\nSample Output 4:\n1 1 1 3 3 3 2 2 2\ndef",
        "test": "",
        "num_ids": 139,
        "indeed": false
    },
    {
        "number": 4855,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, i = map(int, stdin.split())\n    if n == 1:\n        return str(a)\n    if a == 1:\n        return str(i)\n    if a == i:\n        return str(i)\n    if a < i:\n        return str(i)\n    if a > i:\n        return str(i)\n    return str(i)\n\ndef",
        "test": "",
        "num_ids": 97,
        "indeed": false
    },
    {
        "number": 4856,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    for i in range(len(stdin)):\n        answer += str(int(stdin[i])*2)\n    return answer\n\ndef",
        "test": "",
        "num_ids": 41,
        "indeed": false
    },
    {
        "number": 4857,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, w = map(int, stdin.split())\n    if l > 40 or w > 1000:\n        return \"impossible\"\n    else:\n        return \"\".join(sorted(list(map(lambda x: x.lower(), list(map(lambda x: x[:l], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x: x[l:], list(map(lambda x:",
        "test": "",
        "num_ids": 1817,
        "indeed": false
    },
    {
        "number": 4858,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split())\n    sil = [list(stdin.split()) for _ in range(M)]\n    sil = [list(map(str, s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in sil]\n    sil = [list(map(lambda x: x[::-1], s)) for s in",
        "test": "",
        "num_ids": 1025,
        "indeed": false
    },
    {
        "number": 4859,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 0:\n        return 'impossible'\n    elif n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '3'\n    elif n == 4:\n        return '4'\n    elif n == 5:\n        return '5'\n    elif n == 6:\n        return '6'\n    elif n == 7:\n        return '7'\n    elif n == 8:\n        return '8'\n    elif n == 9:\n        return '9'\n    elif n == 10:\n        return '10'\n    elif n == 11:\n        return '11'\n    elif n == 12:\n        return '12'\n    elif n == 13:\n        return '13'\n    elif n == 14:\n        return '14'\n    elif n == 15:\n        return '15'\n    elif n == 16:\n        return '16'\n    elif n == 17:\n        return '17'\n    elif n == 18:\n        return '18'\n    elif n == 19:\n        return '19'\n    elif n == 20:\n        return '20'\n    elif n == 21:\n        return '21'\n    elif n == 22:\n        return '22'\n    elif n == 23:\n        return '23'\n    elif n == 24:\n        return '24'\n    elif n == 25:\n        return '25'\n    elif n == 26:\n        return '26'\n    elif n == 27:\n        return '27'\n    elif n == 28:\n        return '28'\n    elif n == 29:\n        return '29'\n    elif n == 30:\n        return '30'\n    elif n == 31:\n        return '31'\n    elif n == 32:\n        return '32'\n    elif n == 33:\n        return '33'\n    elif n == 34:\n        return '34'\n    elif n == 35:\n        return '35'\n    elif n == 36:\n        return '36'\n    elif n == 37:\n        return '37'\n    elif n == 38:\n        return '38'\n    elif n == 39:\n        return '39'\n    elif n == 40:\n        return '40'\n    elif n == 41:\n        return '41'\n    elif n == 42:\n        return '42'\n    elif n == 43:\n        return '43'\n    elif n == 44:\n        return '44'\n    elif n == 45:\n        return '45'\n    elif n == 46:\n        return '46'\n    elif n == 47:\n        return '47'\n    elif n == 48:\n        return '48'\n    elif n == 49:\n        return '49'\n    elif n == 50:\n        return '50'\n    elif n == 51:\n        return '51'\n    elif n == 52:\n        return '52'\n    elif n == 53:\n        return '53'\n    elif n == 54:\n        return '54'\n    elif n == 55:\n        return '55'\n    elif n == 56:\n        return '56'\n    elif n == 57:\n        return '57'\n    elif n == 58:\n        return '58'\n    elif n == 59:\n        return '59'\n    elif n == 60:\n        return '60'\n    elif n == 61:\n        return '61'\n    elif n == 62:\n        return '62'\n    elif n == 63:\n        return '63'\n    elif n == 64:\n        return '64'\n    elif n == 65:\n        return '65'\n    elif n == 66:\n        return '66'\n    elif n == 67:\n        return '67'\n    elif n == 68:\n        return '68'\n    elif n == 69:\n        return '69'\n    elif n == 70:\n        return '70'\n    elif n == 71:\n        return '71'\n    elif n == 72:\n        return '72'\n    elif n == 73:\n        return '73'\n    elif n == 74:\n        return '74'\n    elif n == 75:\n        return '75'\n    elif n == 76:\n        return '76'\n    elif n == 77:\n        return '77'\n    elif n == 78:\n        return '78'\n    elif n == 79:\n        return '79'\n    elif n == 80:\n        return '80'\n    elif n == 81:\n        return '81'\n    elif n == 82:\n        return '82'\n    elif n == 83:\n        return '83'\n    elif n == 84:\n        return '84'\n    elif n == 85:\n        return '85'\n    elif n == 86:\n        return '86'\n    elif n == 87:\n        return '87'\n    elif n == 88:\n        return '88'\n    elif n == 89:\n        return '89'\n    elif n == 90:\n        return '90'\n    elif n == 91:\n        return '91'\n    elif n == 92:\n        return '92'\n    elif n == 93:\n        return '93'\n    elif n == 94:\n        return '94'\n    elif n == 95:\n        return '95'\n    elif n == 96:\n        return '96'\n    elif n == 97:\n        return '97'\n    elif n == 98:\n        return '98'\n    elif n == 99:\n        return '99'\n    elif n == 100:\n        return '100'\n    elif n == 101:\n        return '101'\n    elif n == 102:\n        return '102'\n    elif n == 103:\n        return '103'\n    elif n == 104:\n        return '104'\n    elif n == 105:\n        return '105'\n    elif n == 106:\n        return '106'\n    elif n == 107:\n        return '107'\n    elif n == 108:\n        return '108'\n    elif n == 109:\n        return '109'\n    elif n == 110:\n        return '110'\n    elif n == 111:\n        return '111'\n    elif n == 112:\n        return '112'\n    elif n == 113:\n        return '113'\n    el",
        "test": "",
        "num_ids": 1624,
        "indeed": false
    },
    {
        "number": 4860,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    for i in range(n):\n        if i == 0:\n            print(nums[i])\n        elif i == n-1:\n            print(nums[i])\n        else:\n            print(nums[i], end=' ')\n",
        "test": "",
        "num_ids": 95,
        "indeed": false
    },
    {
        "number": 4861,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s, v = map(int, stdin.split())\n    c = 1.0 / (p * 10 ** 9)\n    t = (s * v) / c\n    return str(t)\n\nSample Output:\n0.0\nExplanation:\nThe optimal tour of all European airports is $s$ meters long, but she wasn\u2019t ranked high enough in the company to know the actual tour.\n\n-----Constraints-----\n1 <= n <= 1000000\n1 <= p <= 1000000\n1 <= s <= 10^6\n1 <= v <= 900\n\n-----Time Limit: 1 minute\n-----Memory Limit: 128 MB\n\n-----Tip: You can use the time module to calculate the time of the algorithm.\n\n\"\"\"\n\nimport math\nimport time\n\ndef",
        "test": "",
        "num_ids": 181,
        "indeed": false
    },
    {
        "number": 4862,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return 1\n    if N == 2:\n        return 2\n    if N == 3:\n        return 4\n    if N == 4:\n        return 6\n    if N == 5:\n        return 8\n    if N == 6:\n        return 10\n    if N == 7:\n        return 12\n    if N == 8:\n        return 14\n    if N == 9:\n        return 16\n    if N == 10:\n        return 18\n    if N == 11:\n        return 20\n    if N == 12:\n        return 22\n    if N == 13:\n        return 24\n    if N == 14:\n        return 26\n    if N == 15:\n        return 28\n    if N == 16:\n        return 30\n    if N == 17:\n        return 32\n    if N == 18:\n        return 34\n    if N == 19:\n        return 36\n    if N == 20:\n        return 38\n    if N == 21:\n        return 40\n    if N == 22:\n        return 42\n    if N == 23:\n        return 44\n    if N == 24:\n        return 46\n    if N == 25:\n        return 48\n    if N == 26:\n        return 50\n    if N == 27:\n        return 52\n    if N == 28:\n        return 54\n    if N == 29:\n        return 56\n    if N == 30:\n        return 58\n    if N == 31:\n        return 60\n    if N == 32:\n        return 62\n    if N == 33:\n        return 64\n    if N == 34:\n        return 66\n    if N == 35:\n        return 68\n    if N == 36:\n        return 70\n    if N == 37:\n        return 72\n    if N == 38:\n        return 74\n    if N == 39:\n        return 76\n    if N == 40:\n        return 78\n    if N == 41:\n        return 80\n    if N == 42:\n        return 82\n    if N == 43:\n        return 84\n    if N == 44:\n        return 86\n    if N == 45:\n        return 88\n    if N == 46:\n        return 90\n    if N == 47:\n        return 92\n    if N == 48:\n        return 94\n    if N == 49:\n        return 96\n    if N == 50:\n        return 98\n    if N == 51:\n        return 100\n    if N == 52:\n        return 102\n    if N == 53:\n        return 104\n    if N == 54:\n        return 106\n    if N == 55:\n        return 108\n    if N == 56:\n        return 110\n    if N == 57:\n        return 112\n    if N == 58:\n        return 114\n    if N == 59:\n        return 116\n    if N == 60:\n        return 118\n    if N == 61:\n        return 120\n    if N == 62:\n        return 122\n    if N == 63:\n        return 124\n    if N == 64:\n        return 126\n    if N == 65:\n        return 128\n    if N == 66:\n        return 130\n    if N == 67:\n        return 132\n    if N == 68:\n        return 134\n    if N == 69:\n        return 136\n    if N == 70:\n        return 138\n    if N == 71:\n        return 140\n    if N == 72:\n        return 142\n    if N == 73:\n        return 144\n    if N == 74:\n        return 146\n    if N == 75:\n        return 148\n    if N == 76:\n        return 150\n    if N == 77:\n        return 152\n    if N == 78:\n        return 154\n    if N == 79:\n        return 156\n    if N == 80:\n        return 158\n    if N == 81:\n        return 160\n    if N == 82:\n        return 162\n    if N == 83:\n        return 164\n    if N == 84:\n        return 166\n    if N == 85:\n        return 168\n    if N == 86:\n        return 170\n    if N == 87:\n        return 172\n    if N == 88:\n        return 174\n    if N == 89:\n        return 176\n    if N == 90:\n        return 178\n    if N == 91:\n        return 180\n    if N == 92:\n        return 182\n    if N == 93:\n        return 184\n    if N == 94:\n        return 186\n    if N == 95:\n        return 188\n    if N == 96:\n        return 190\n    if N == 97:\n        return 192\n    if N == 98:\n        return 194\n    if N == 99:\n        return 196\n    if N == 100:\n        return 198\n    if N == 101:\n        return 200\n    if N == 102:\n        return 202\n    if N == 103:\n        return 204\n    if N == 104:\n        return 206\n    if N == 105:\n        return 208\n    if N == 106:\n        return 210\n    if N == 107:\n        return 212\n    if N == 108:\n        return 214\n    if N == 109:\n        return 216\n    if N == 110:\n        return 218\n    if N == 111:\n        return 220\n    if N == 112:\n        return 222\n    if N == 113:\n        return 224\n    if N == 114:\n        return 226\n    if N == 115:\n        return 228\n    if N == 116:\n        return 230\n    if N == 117:\n        return 232\n    if N == 118:\n        return 234\n    if N == 119:\n        return 236\n    if N == 120:\n        return 238\n    if N == 121:\n        return 240\n    if N == 122:\n        return 242\n    if N == 123:\n        return 244\n    if N == 124:\n        return 246\n    if N == 125:\n        return 248\n    if N == 126:\n        return 250\n    if N == 127:\n        return 252\n    if N == 128:\n        return 254\n    if N == 129:\n        return 256\n    if N == 130:\n        return 258\n    if N == 131:\n        return 260\n    if N == 132:\n        return 262\n    if N == 133:\n        return 264\n    if N == 134:\n        return 266\n    if N == 135:\n        return 268\n    if N == 136:\n        return 270\n    if N == 137:\n        return 272\n    if N == 138:\n        return 274\n    if N == 139:\n        return 276\n    if N == 140:\n        return 278\n    if N == 141:\n        return 280\n    if N == 142:\n        return 282\n    if N == 143:\n        return 284\n    if N == 144:\n        return 286\n    if N == 145:\n        return 288\n    if N == 146:\n        return 290\n    if N == 147:\n        return 292\n    if N == 148:\n        return 294\n    if N == 149:\n        return 296\n    if N == 150:\n        return 298\n    if N == 151:\n        return 300\n    if N == 152:\n        return 302\n    if N == 153:\n        return 304\n    if N == 154:\n        return 306\n    if N == 155:\n        return 308\n    if N == 156:\n        return 310\n    if N == 157:\n        return 312\n    if N == 158:\n        return 314\n    if N == 159:\n        return 316\n    if N == 160:\n        return 318\n    if N == 161:\n        return 320\n    if N == 162:\n        return 322\n    if N == 163:\n        return 324\n",
        "test": "",
        "num_ids": 1803,
        "indeed": false
    },
    {
        "number": 4863,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = []\n    for i in range(n):\n        answer.append(stdin[i].split())\n    answer = sorted(answer, key=lambda x: x[0])\n    answer = sorted(answer, key=lambda x: x[1])\n    answer = sorted(answer, key=lambda x: x[2])\n    answer = sorted(answer, key=lambda x: x[3])\n    answer = sorted(answer, key=lambda x: x[4])\n    answer = sorted(answer, key=lambda x: x[5])\n    answer = sorted(answer, key=lambda x: x[6])\n    answer = sorted(answer, key=lambda x: x[7])\n    answer = sorted(answer, key=lambda x: x[8])\n    answer = sorted(answer, key=lambda x: x[9])\n    answer = sorted(answer, key=lambda x: x[10])\n    answer = sorted(answer, key=lambda x: x[11])\n    answer = sorted(answer, key=lambda x: x[12])\n    answer = sorted(answer, key=lambda x: x[13])\n    answer = sorted(answer, key=lambda x: x[14])\n    answer = sorted(answer, key=lambda x: x[15])\n    answer = sorted(answer, key=lambda x: x[16])\n    answer = sorted(answer, key=lambda x: x[17])\n    answer = sorted(answer, key=lambda x: x[18])\n    answer = sorted(answer, key=lambda x: x[19])\n    answer = sorted(answer, key=lambda x: x[20])\n    answer = sorted(answer, key=lambda x: x[21])\n    answer = sorted(answer, key=lambda x: x[22])\n    answer = sorted(answer, key=lambda x: x[23])\n    answer = sorted(answer, key=lambda x: x[24])\n    answer = sorted(answer, key=lambda x: x[25])\n    answer = sorted(answer, key=lambda x: x[26])\n    answer = sorted(answer, key=lambda x: x[27])\n    answer = sorted(answer, key=lambda x: x[28])\n    answer = sorted(answer, key=lambda x: x[29])\n    answer = sorted(answer, key=lambda x: x[30])\n    answer = sorted(answer, key=lambda x: x[31])\n    answer = sorted(answer, key=lambda x: x[32])\n    answer = sorted(answer, key=lambda x: x[33])\n    answer = sorted(answer, key=lambda x: x[34])\n    answer = sorted(answer, key=lambda x: x[35])\n    answer = sorted(answer, key=lambda x: x[36])\n    answer = sorted(answer, key=lambda x: x[37])\n    answer = sorted(answer, key=lambda x: x[38])\n    answer = sorted(answer, key=lambda x: x[39])\n    answer = sorted(answer, key=lambda x: x[40])\n    answer = sorted(answer, key=lambda x: x[41])\n    answer = sorted(answer, key=lambda x: x[42])\n    answer = sorted(answer, key=lambda x: x[43])\n    answer = sorted(answer, key=lambda x: x[44])\n    answer = sorted(answer, key=lambda x: x[45])\n    answer = sorted(answer, key=lambda x: x[46])\n    answer = sorted(answer, key=lambda x: x[47])\n    answer = sorted(answer, key=lambda x: x[48])\n    answer = sorted(answer, key=lambda x: x[49])\n    answer = sorted(answer, key=lambda x: x[50])\n    answer = sorted(answer, key=lambda x: x[51])\n    answer = sorted(answer, key=lambda x: x[52])\n    answer = sorted(answer, key=lambda x: x[53])\n    answer = sorted(answer, key=lambda x: x[54])\n    answer = sorted(answer, key=lambda x: x[55])\n    answer = sorted(answer, key=lambda x: x[56])\n    answer = sorted(answer, key=lambda x: x[57])\n    answer = sorted(answer, key=lambda x: x[58])\n    answer = sorted(answer, key=lambda x: x[59])\n    answer = sorted(answer, key=lambda x: x[60])\n    answer = sorted(answer, key=lambda x: x[61])\n    answer = sorted(answer, key=lambda x: x[62])\n    answer = sorted(answer, key=lambda x: x[63])\n    answer = sorted(answer, key=lambda x: x[64])\n    answer = sorted(answer, key=lambda x: x[65])\n    answer = sorted(answer, key=lambda x: x[66])\n    answer = sorted(answer, key=lambda x: x[67])\n    answer = sorted(answer, key=lambda x: x[68])\n    answer = sorted(answer, key=lambda x: x[69])\n    answer = sorted(answer, key=lambda x: x[70])\n    answer = sorted(answer, key=lambda x: x[71])\n    answer = sorted(answer, key=lambda x: x[72])\n    answer = sorted(answer, key=lambda x: x[73])\n    answer = sorted(answer, key=lambda x: x[74])\n    answer = sorted(answer, key=lambda x: x[75])\n    answer = sorted(answer, key=lambda x: x[76])\n    answer = sorted(answer, key=lambda x: x[77])\n    answer = sorted(answer, key=lambda x: x[78])\n    answer = sorted(answer, key=lambda x: x[79])\n    answer = sorted(answer, key=lambda x: x[80])\n    answer = sorted(answer, key=lambda x: x[81])\n    answer = sorted(answer, key=lambda x: x[82])\n    answer = sorted(answer, key=lambda x: x[83])\n    answer =",
        "test": "",
        "num_ids": 1468,
        "indeed": false
    },
    {
        "number": 4864,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    matrix = []\n    for _ in range(R):\n        matrix.append(list(map(str, input().split())))\n    for _ in range(C):\n        matrix.append(list(map(str, input().split())))\n    for i in range(R):\n        for j in range(C):\n            matrix[i][j] = matrix[i][j].replace('.', 'R')\n            matrix[i][j] = matrix[i][j].replace('x', 'C')\n            matrix[i][j] = matrix[i][j].replace('x', 'Z')\n    return ''.join(matrix[0])\n\nSample Output:\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x",
        "test": "",
        "num_ids": 1662,
        "indeed": false
    },
    {
        "number": 4865,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d = int(stdin.strip().split()[1])\n    h = int(stdin.strip().split()[2])\n    m = int(stdin.strip().split()[3])\n    answer = ''\n    for i in range(n):\n        answer += str(d + (h * 60 + m) % 24) +''\n        h += 1\n        m += 60\n    return answer\n\nSample Output:\n14 20\nExplanation:\nThe clock will roll forward 60 minutes, then change it to the next hour, then change it to the next minute, then change it to the next second.\n\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 159,
        "indeed": false
    },
    {
        "number": 4866,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.split()\n    month = int(date[0])\n    day = int(date[1])\n    if day == 31:\n        return 'yup'\n    elif day == 30:\n        return 'nope'\n    elif day == 29:\n        return 'nope'\n    elif day == 28:\n        return 'nope'\n    elif day == 27:\n        return 'nope'\n    elif day == 26:\n        return 'nope'\n    elif day == 25:\n        return 'nope'\n    elif day == 24:\n        return 'nope'\n    elif day == 23:\n        return 'nope'\n    elif day == 22:\n        return 'nope'\n    elif day == 21:\n        return 'nope'\n    elif day == 20:\n        return 'nope'\n    elif day == 19:\n        return 'nope'\n    elif day == 18:\n        return 'nope'\n    elif day == 17:\n        return 'nope'\n    elif day == 16:\n        return 'nope'\n    elif day == 15:\n        return 'nope'\n    elif day == 14:\n        return 'nope'\n    elif day == 13:\n        return 'nope'\n    elif day == 12:\n        return 'nope'\n    elif day == 11:\n        return 'nope'\n    elif day == 10:\n        return 'nope'\n    elif day == 9:\n        return 'nope'\n    elif day == 8:\n        return 'nope'\n    elif day == 7:\n        return 'nope'\n    elif day == 6:\n        return 'nope'\n    elif day == 5:\n        return 'nope'\n    elif day == 4:\n        return 'nope'\n    elif day == 3:\n        return 'nope'\n    elif day == 2:\n        return 'nope'\n    elif day == 1:\n        return 'nope'\n    else:\n        return 'nope'\n\nSample Output:\nOCT 31\nnope\ndef",
        "test": "",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 4867,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split())\n    U, L, R, D = map(int, stdin.split())\n    \n    def get_char(x, y):\n        return chr(ord('a') + x) + chr(ord('a') + y)\n    \n    def get_char_list(x, y):\n        return [get_char(x, y), get_char(x, y + 1), get_char(x, y + 2), get_char(x, y + 3)]\n    \n    def get_char_list_2(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_3(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_4(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_5(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_6(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_7(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_8(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_9(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_10(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_11(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_12(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_13(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_14(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_15(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_16(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_17(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_18(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_19(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_20(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_21(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_22(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_23(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_24(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_25(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_26(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def get_char_list_27(x, y):\n        return [get_char(x, y), get_char(x + 1, y), get_char(x + 2, y), get_char(x + 3, y)]\n    \n    def",
        "test": "",
        "num_ids": 1667,
        "indeed": false
    },
    {
        "number": 4868,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    for line in stdin:\n        if line == '\\n':\n            answer += '+---+---+---+---+---+---+---+\\n'\n            continue\n        if line == '\\r':\n            answer += '+---+---+---+---+---+---+---+\\n'\n            continue\n        if line == '\\t':\n            answer += '+---+---+---+---+---+---+---+\\n'\n            continue\n        answer += line\n    return answer\n\ndef",
        "test": "",
        "num_ids": 130,
        "indeed": false
    },
    {
        "number": 4869,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, N = map(int, stdin.split())\n    if N > 1000000:\n        return \"Need more materials!\"\n    if N < 1000000:\n        return \"Need more materials!\"\n    if A > 1000000:\n        return \"Need more materials!\"\n    if A < 1000000:\n        return \"Need more materials!\"\n    return \"Diablo is happy!\"\n\nSample Input:\n1.000000 4.000000\nSample Output:\nNeed more materials!\ndef",
        "test": "",
        "num_ids": 111,
        "indeed": false
    },
    {
        "number": 4870,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    f, s, g, u, d = map(int, stdin.split())\n    if f > s:\n        return \"use the stairs\"\n    if g > s:\n        return \"use the stairs\"\n    if u > d:\n        return \"use the stairs\"\n    if s > g:\n        return \"use the stairs\"\n    if s < g:\n        return \"use the stairs\"\n    if u < d:\n        return \"use the stairs\"\n    return \"use the stairs\"\n\nSample Input:\n10 1 10 2 1\nSample Output:\n6\ndef",
        "test": "",
        "num_ids": 138,
        "indeed": false
    },
    {
        "number": 4871,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = [int(i) for i in stdin.split()]\n    g = [0] * n\n    for i in range(n):\n        g[i] = s[i]\n    for i in range(n-1):\n        g[i+1] = g[i] + s[i+1]\n    for i in range(n-2):\n        g[i+2] = g[i] + s[i+2]\n    for i in range(n-3):\n        g[i+3] = g[i] + s[i+3]\n    for i in range(n-4):\n        g[i+4] = g[i] + s[i+4]\n    for i in range(n-5):\n        g[i+5] = g[i] + s[i+5]\n    for i in range(n-6):\n        g[i+6] = g[i] + s[i+6]\n    for i in range(n-7):\n        g[i+7] = g[i] + s[i+7]\n    for i in range(n-8):\n        g[i+8] = g[i] + s[i+8]\n    for i in range(n-9):\n        g[i+9] = g[i] + s[i+9]\n    for i in range(n-10):\n        g[i+10] = g[i] + s[i+10]\n    for i in range(n-11):\n        g[i+11] = g[i] + s[i+11]\n    for i in range(n-12):\n        g[i+12] = g[i] + s[i+12]\n    for i in range(n-13):\n        g[i+13] = g[i] + s[i+13]\n    for i in range(n-14):\n        g[i+14] = g[i] + s[i+14]\n    for i in range(n-15):\n        g[i+15] = g[i] + s[i+15]\n    for i in range(n-16):\n        g[i+16] = g[i] + s[i+16]\n    for i in range(n-17):\n        g[i+17] = g[i] + s[i+17]\n    for i in range(n-18):\n        g[i+18] = g[i] + s[i+18]\n    for i in range(n-19):\n        g[i+19] = g[i] + s[i+19]\n    for i in range(n-20):\n        g[i+20] = g[i] + s[i+20]\n    for i in range(n-21):\n        g[i+21] = g[i] + s[i+21]\n    for i in range(n-22):\n        g[i+22] = g[i] + s[i+22]\n    for i in range(n-23):\n        g[i+23] = g[i] + s[i+23]\n    for i in range(n-24):\n        g[i+24] = g[i] + s[i+24]\n    for i in range(n-25):\n        g[i+25] = g[i] + s[i+25]\n    for i in range(n-26):\n        g[i+26] = g[i] + s[i+26]\n    for i in range(n-27):\n        g[i+27] = g[i] + s[i+27]\n    for i in range(n-28):\n        g[i+28] = g[i] + s[i+28]\n    for i in range(n-29):\n        g[i+29] = g[i] + s[i+29]\n    for i in range(n-30):\n        g[i+30] = g[i] + s[i+30]\n    for i in range(n-31):\n        g[i+31] = g[i] + s[i+31]\n    for i in range(n-32):\n        g[i+32] = g[i] + s[i+32]\n    for i in range(n-33):\n        g[i+33] = g[i] + s[i+33]\n    for i in range(n-34):\n        g[i+34] = g[i] + s[i+34]\n    for i in range(n-35):\n        g[i+35] = g[i] + s[i+35]\n    for i in range(n-36):\n        g[i+36] = g[i] + s[i+36]\n    for i in range(n-37):\n        g[i+37] = g[i] + s[i+37]\n    for i in range(n-38):\n        g[i+38] = g[i] + s[i",
        "test": "",
        "num_ids": 1233,
        "indeed": false
    },
    {
        "number": 4872,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d = [0] * (365)\n    for i in range(n):\n        d[i] = int(stdin.strip())\n    for i in range(1, 365):\n        d[i] += d[i - 1]\n    for i in range(n - 1, 0, -1):\n        d[i] += d[i - 1]\n    return str(sum(d))\n\nSample Output:\n4\nExplanation:\nThe total number of cleanup phases needed for Petra to keep the dirtiness strictly below $20$ at all times is 4.\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= d_i < d_j <= 365\n\n-----Time Limit: 1 sec\nMemory Limit: 1 GB\n\n-----Input Format\nThe first line contains an integer $n$ (1 <= $n$ <= 10^5).\nThe next $n$ lines contains $d_1, d_2, \\ldots, d_n$ (1 <= $d_i \\leq 365$ for each $1 \\lei \\le n$).\n\n-----Output Format\nOutput the total number of cleanup phases needed for Petra to keep the dirtiness strictly below $20$ at all times.\n\n-----Example Input\nInput for the problem:\n5\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n1 45 65 84 346\n",
        "test": "",
        "num_ids": 1427,
        "indeed": false
    },
    {
        "number": 4873,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, H = map(int, stdin.split())\n    map = [list(stdin[i:i+W]) for i in range(0, len(stdin), W)]\n    \n    def get_trap(x, y):\n        if map[y][x] == 'P':\n            return 'P'\n        elif map[y][x] == 'G':\n            return 'G'\n        elif map[y][x] == 'T':\n            return 'T'\n        else:\n            return '.'\n    \n    def get_wall(x, y):\n        if map[y][x] == 'P':\n            return 'P'\n        elif map[y][x] == 'G':\n            return 'G'\n        elif map[y][x] == 'T':\n            return 'T'\n        else:\n            return '.'\n    \n    def get_normal_floor(x, y):\n        if map[y][x] == 'P':\n            return 'P'\n        elif map[y][x] == 'G':\n            return 'G'\n        elif map[y][x] == 'T':\n            return 'T'\n        else:\n            return '.'\n    \n    def get_normal_floor_2(x, y):\n        if map[y][x] == 'P':\n            return 'P'\n        elif map[y][x] == 'G':\n            return 'G'\n        elif map[y][x] == 'T':\n            return 'T'\n        else:\n            return '.'\n    \n    def get_normal_floor_3(x, y):\n        if map[y][x] == 'P':\n            return 'P'\n        elif map[y][x] == 'G':\n            return 'G'\n        elif map[y][x] == 'T':\n            return 'T'\n        else:\n            return '.'\n    \n    def get_normal_floor_4(x, y):\n        if map[y][x] == 'P':\n            return 'P'\n        elif map[y][x] == 'G':\n            return 'G'\n        elif map[y][x] == 'T':\n            return 'T'\n        else:\n            return '.'\n    \n    def get_normal_floor_5(x, y):\n        if map[y][x] == 'P':\n            return 'P'\n        elif map[y][x] == 'G':\n            return 'G'\n        elif map[y][x] == 'T':\n            return 'T'\n        else:\n            return '.'\n    \n    def get_normal_floor_6(x, y):\n        if map[y][x] == 'P':\n            return 'P'\n        elif map[y][x] == 'G':\n            return 'G'\n        elif map[y][x] == 'T':\n            return 'T'\n        else:\n            return '.'\n    \n    def get_normal_floor_7(x, y):\n        if map[y][x] == 'P':\n            return 'P'\n        elif map[y][x] == 'G':\n            return 'G'\n        elif map[y][x] == 'T':\n            return 'T'\n        else:\n            return '.'\n    \n    def get_normal_floor_8(x, y):\n        if map[y][x] == 'P':\n            return 'P'\n        elif map[y][x] == 'G':\n            return 'G'\n        elif map[y][x] == 'T':\n            return 'T'\n        else:\n            return '.'\n    \n    def get_normal_floor_9(x, y):\n        if map[y][x] == 'P':\n            return 'P'\n        elif map[y][x] == 'G':\n            return 'G'\n        elif map[y][x] == 'T':\n            return 'T'\n        else:\n            return '.'\n    \n    def get_normal_floor_10(x, y):\n        if map[y][x] == 'P':\n            return 'P'\n        elif map[y][x] == 'G':\n            return 'G'\n        elif map[y][x] == 'T':\n            return 'T'\n        else:\n            return '.'\n    \n    def get_normal_floor_11(x, y):\n        if map[y][x] == 'P':\n            return 'P'\n        elif map[y][x] == 'G':\n            return 'G'\n        elif map[y][x] == 'T':\n            return 'T'\n        else:\n            return '.'\n    \n    def get_normal_floor_12(x, y):\n        if map[y][x] == 'P':\n            return 'P'\n        elif map[y][x] == 'G':\n            return 'G'\n        elif map[y][x] == 'T':\n            return 'T'\n        else:\n            return '.'\n    \n    def get_normal_floor_13(x, y):\n        if map[y][x] == 'P':\n            return 'P'\n        elif map[y][x] == 'G':\n            return 'G'\n        elif map[y][x] == 'T':\n            return 'T'\n        else:\n            return '.'\n    \n    def get_normal_floor_14(x, y):\n        if map[y][x] == 'P':\n            return 'P'\n        elif map[y][x] == 'G':\n            return 'G'\n        elif map[y][x] == 'T':\n            return 'T'\n        else:\n            return '.'\n    \n    def get_normal_floor_15(x, y):\n        if map[y][x] == 'P':\n            return 'P'\n        elif map[y][x] == 'G':\n            return 'G'\n        elif map[y][x] == 'T':\n            return 'T'\n        else:\n            return '.'\n    \n    def get_normal_floor_16(x, y):\n        if map[y][x] == 'P':\n            return 'P'\n        elif map[y][x] == 'G':\n            return 'G'",
        "test": "",
        "num_ids": 1536,
        "indeed": false
    },
    {
        "number": 4874,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    grid = [list(stdin.split()) for _ in range(N)]\n    dic = {}\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == '_':\n                continue\n            if grid[i][j] not in dic:\n                dic[grid[i][j]] = 1\n            else:\n                dic[grid[i][j]] += 1\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == '_':\n                continue\n            if grid[i][j] not in dic:\n                dic[grid[i][j]] = 1\n            else:\n                dic[grid[i][j]] += 1\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == '_':\n                continue\n            if grid[i][j] not in dic:\n                dic[grid[i][j]] = 1\n            else:\n                dic[grid[i][j]] += 1\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == '_':\n                continue\n            if grid[i][j] not in dic:\n                dic[grid[i][j]] = 1\n            else:\n                dic[grid[i][j]] += 1\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == '_':\n                continue\n            if grid[i][j] not in dic:\n                dic[grid[i][j]] = 1\n            else:\n                dic[grid[i][j]] += 1\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == '_':\n                continue\n            if grid[i][j] not in dic:\n                dic[grid[i][j]] = 1\n            else:\n                dic[grid[i][j]] += 1\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == '_':\n                continue\n            if grid[i][j] not in dic:\n                dic[grid[i][j]] = 1\n            else:\n                dic[grid[i][j]] += 1\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == '_':\n                continue\n            if grid[i][j] not in dic:\n                dic[grid[i][j]] = 1\n            else:\n                dic[grid[i][j]] += 1\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == '_':\n                continue\n            if grid[i][j] not in dic:\n                dic[grid[i][j]] = 1\n            else:\n                dic[grid[i][j]] += 1\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == '_':\n                continue\n            if grid[i][j] not in dic:\n                dic[grid[i][j]] = 1\n            else:\n                dic[grid[i][j]] += 1\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == '_':\n                continue\n            if grid[i][j] not in dic:\n                dic[grid[i][j]] = 1\n            else:\n                dic[grid[i][j]] += 1\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == '_':\n                continue\n            if grid[i][j] not in dic:\n                dic[grid[i][j]] = 1\n            else:\n                dic[grid[i][j]] += 1\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == '_':\n                continue\n            if grid[i][j] not in dic:\n                dic[grid[i][j]] = 1\n            else:\n                dic[grid[i][j]] += 1\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == '_':\n                continue\n            if grid[i][j] not in dic:\n                dic[grid[i][j]] = 1\n            else:\n                dic[grid[i][j]] += 1\n    for i in range(N):\n        for j in range(M):\n            if grid[",
        "test": "",
        "num_ids": 1155,
        "indeed": false
    },
    {
        "number": 4875,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n        if words[i][0] in 'aeiou':\n            words[i] = words[i][1:] + words[i][0] + 'ay'\n        else:\n            words[i] = words[i][1:] + words[i][0] + 'ay' + words[i][2:]\n    return''.join(words)\n\nSample Output:\ni cant speak pig latin\nay antcay eakspay igpay atinlay\ndef",
        "test": "",
        "num_ids": 144,
        "indeed": false
    },
    {
        "number": 4876,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    menu = []\n    for _ in range(n):\n        menu.append(stdin.strip().split())\n    menu.sort(key=lambda x: x[0])\n    for i in range(n):\n        if menu[i][0] == 'pea soup':\n            menu[i][0] = 'pancakes'\n        elif menu[i][0] =='salad':\n            menu[i][0] = 'potatoes'\n    for i in range(n):\n        if menu[i][1] == 'pancakes':\n            menu[i][1] = 'punsch'\n        elif menu[i][1] == 'potatoes':\n            menu[i][1] ='salad'\n    for i in range(n):\n        if menu[i][2] == 'pancakes':\n            menu[i][2] = 'punsch'\n        elif menu[i][2] == 'potatoes':\n            menu[i][2] ='salad'\n    for i in range(n):\n        if menu[i][3] == 'pancakes':\n            menu[i][3] = 'punsch'\n        elif menu[i][3] == 'potatoes':\n            menu[i][3] ='salad'\n    for i in range(n):\n        if menu[i][4] == 'pancakes':\n            menu[i][4] = 'punsch'\n        elif menu[i][4] == 'potatoes':\n            menu[i][4] ='salad'\n    for i in range(n):\n        if menu[i][5] == 'pancakes':\n            menu[i][5] = 'punsch'\n        elif menu[i][5] == 'potatoes':\n            menu[i][5] ='salad'\n    for i in range(n):\n        if menu[i][6] == 'pancakes':\n            menu[i][6] = 'punsch'\n        elif menu[i][6] == 'potatoes':\n            menu[i][6] ='salad'\n    for i in range(n):\n        if menu[i][7] == 'pancakes':\n            menu[i][7] = 'punsch'\n        elif menu[i][7] == 'potatoes':\n            menu[i][7] ='salad'\n    for i in range(n):\n        if menu[i][8] == 'pancakes':\n            menu[i][8] = 'punsch'\n        elif menu[i][8] == 'potatoes':\n            menu[i][8] ='salad'\n    for i in range(n):\n        if menu[i][9] == 'pancakes':\n            menu[i][9] = 'punsch'\n        elif menu[i][9] == 'potatoes':\n            menu[i][9] ='salad'\n    for i in range(n):\n        if menu[i][10] == 'pancakes':\n            menu[i][10] = 'punsch'\n        elif menu[i][10] == 'potatoes':\n            menu[i][10] ='salad'\n    for i in range(n):\n        if menu[i][11] == 'pancakes':\n            menu[i][11] = 'punsch'\n        elif menu[i][11] == 'potatoes':\n            menu[i][11] ='salad'\n    for i in range(n):\n        if menu[i][12] == 'pancakes':\n            menu[i][12] = 'punsch'\n        elif menu[i][12] == 'potatoes':\n            menu[i][12] ='salad'\n    for i in range(n):\n        if menu[i][13] == 'pancakes':\n            menu[i][13] = 'punsch'\n        elif menu[i][13] == 'potatoes':\n            menu[i][13] ='salad'\n    for i in range(n):\n        if menu[i][14] == 'pancakes':\n            menu[i][14] = 'punsch'\n        elif menu[i][14] == 'potatoes':\n            menu[i][14] ='salad'\n    for i in range(n):\n        if menu[i][15] == 'pancakes':\n            menu[i][15] = 'punsch'\n        elif menu[i][15] == 'potatoes':\n            menu[i][15] ='salad'\n    for i in range(n):\n        if menu[i][16] == 'pancakes':\n            menu[i][16] = 'punsch'\n        elif menu[i][16] == 'potatoes':\n            menu[i][16] ='salad'\n    for i in range(n):\n        if menu[i][17] == 'pancakes':\n            menu[i][17] = 'punsch'\n        elif menu[i][17] == 'potatoes':\n            menu[i][17] ='salad'\n    for i in range(n):\n        if menu[i][18] == 'pancakes':\n            menu[i][18] = 'punsch'\n        elif menu[i][18] == 'potatoes':\n            menu[i][18] ='salad'\n    for i in range(n):\n        if menu[i][19] == 'pancakes':\n            menu[i][19] = 'punsch'\n        elif menu[i][19] == 'potatoes':\n            menu[i][19] ='salad'\n    for i in range(n):\n        if menu[i][20] == 'pancakes':\n            menu[i][20] = 'punsch'\n        elif menu[i][20] == 'potatoes':\n            menu[i][20] ='salad'\n    for i in range(n):\n        if menu[i][21] == 'pancakes':\n            menu[i][21] = 'punsch'\n        elif menu[i][21] == 'potatoes':\n            menu[i][21] ='salad'\n    for i in range(n):\n        if menu[i][22] == 'pancakes':\n            menu[i][22] = 'punsch'\n        elif menu[i][22] == 'potatoes':\n            menu[i][22] ='salad'\n    for i in range(n):\n        if menu[i][23] == 'pancakes':\n            menu[i][23] = 'punsch'\n        elif menu[i][23] == 'potatoes':\n            menu[i][23] ='salad'\n    for i in range(n):\n        if menu[i][24] == 'pancakes':\n            menu[i][24] = 'punsch",
        "test": "",
        "num_ids": 1674,
        "indeed": false
    },
    {
        "number": 4877,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    return str(a*b/h)\n\nSample Input:\n5 0 15\nSample Output:\n3\ndef",
        "test": "",
        "num_ids": 45,
        "indeed": false
    },
    {
        "number": 4878,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split(' ')[0]) + int(stdin.split(' ')[1]))\n\nSample Input:\n5\n1 2 3 4 5\nSample Output:\n5\ndef",
        "test": "",
        "num_ids": 50,
        "indeed": false
    },
    {
        "number": 4879,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = stdin.split()\n    if a == b == c:\n        return 'Yes'\n    else:\n        return 'No'\n\nSample Input:\nNorth East\nSample Output:\nNo\ndef",
        "test": "",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4880,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = []\n    for i in range(n):\n        c.append(a[i] + b[i])\n    c.sort()\n    return ''.join(map(str, c))\n\nSample Output:\nSample Input:\n5\nagain\npirpumsemoystoal\nSample Output:\nmarywasnosyagain\ndef",
        "test": "",
        "num_ids": 129,
        "indeed": false
    },
    {
        "number": 4881,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n\nSample Input:\n1\nSample Output:\nOdd\n\nSample Input:\n1\nSample Output:\nEven\n\nSample Input:\n1\nSample Output:\nEither\ndef",
        "test": "",
        "num_ids": 77,
        "indeed": false
    },
    {
        "number": 4882,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 10:\n        return str(n)\n    else:\n        return str(n).split('.')[1]\n\nSample Output:\n3\n1\n4\n1\n5\ndef",
        "test": "",
        "num_ids": 59,
        "indeed": false
    },
    {
        "number": 4883,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(str, stdin.split()))\n    b = []\n    for i in range(m):\n        b.append(a[i].split())\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j+1]:\n                b[i][j] = b[i][j] + b[i][j+1]\n    for i in range(m):\n        for j in range(m):\n            if b[i][j] == b[i][j",
        "test": "",
        "num_ids": 1350,
        "indeed": false
    },
    {
        "number": 4884,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    contest = []\n    for _ in range(n):\n        contest.append(list(map(int, stdin.split())))\n    answer = 0\n    for i in range(n):\n        for j in range(n):\n            if contest[i][j] == 1:\n                answer += 1\n    return str(answer)\n\nSample Output:\n1\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 108,
        "indeed": false
    },
    {
        "number": 4885,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    white = []\n    black = []\n    for line in stdin:\n        white.append(line[0])\n        black.append(line[1])\n    white = ''.join(white)\n    black = ''.join(black)\n    white = white.replace('K', '.').replace('Q', '.').replace('R', '.').replace('B', '.').replace('N', '.').replace('p', '.').replace('p', '.').replace('r', '.').replace('b', '.').replace('n', '.').replace('s', '.').replace('t', '.').replace('a', '.').replace('e', '.').replace('g', '.').replace('h', '.').replace('a', '.').replace('e', '.').replace('g', '.').replace('h', '.').replace('s', '.').replace('t', '.').replace('n', '.').replace('r', '.').replace('b', '.').replace('n', '.').replace('c', '.').replace('d', '.').replace('f', '.').replace('h', '.').replace('c', '.').replace('d', '.').replace('f', '.').replace('g', '.').replace('h', '.').replace('s', '.').replace('t', '.').replace('a', '.').replace('e', '.').replace('g', '.').replace('h', '.').replace('s', '.').replace('t', '.').replace('n', '.').replace('r', '.').replace('b', '.').replace('n', '.').replace('c', '.').replace('d', '.').replace('f', '.').replace('g', '.').replace('h', '.').replace('s', '.').replace('t', '.').replace('n', '.').replace('r', '.').replace('b', '.').replace('n', '.').replace('c', '.').replace('d', '.').replace('f', '.').replace('g', '.').replace('h', '.').replace('s', '.').replace('t', '.').replace('n', '.').replace('r', '.').replace('b', '.').replace('n', '.').replace('c', '.').replace('d', '.').replace('f', '.').replace('g', '.').replace('h', '.').replace('s', '.').replace('t', '.').replace('n', '.').replace('r', '.').replace('b', '.').replace('n', '.').replace('c', '.').replace('d', '.').replace('f', '.').replace('g', '.').replace('h', '.').replace('s', '.').replace('t', '.').replace('n', '.').replace('r', '.').replace('b', '.').replace('n', '.').replace('c', '.').replace('d', '.').replace('f', '.').replace('g', '.').replace('h', '.').replace('s', '.').replace('t', '.').replace('n', '.').replace('r', '.').replace('b', '.').replace('n', '.').replace('c', '.').replace('d', '.').replace('f', '.').replace('g', '.').replace('h', '.').replace('s', '.').replace('t', '.').replace('n', '.').replace('r', '.').replace('b', '.').replace('n', '.').replace('c', '.').replace('d', '.').replace('f', '.').replace('g', '.').replace('h', '.').replace('s', '.').replace('t', '.').replace('n', '.').replace('r', '.').replace('b', '.').replace('n', '.').replace('c', '.').replace('d', '.').replace('f', '.').replace('g', '",
        "test": "",
        "num_ids": 958,
        "indeed": false
    },
    {
        "number": 4886,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N % 2 == 0:\n        return \"true\"\n    else:\n        return \"false\"\n\nSample Input:\n8 3\nSample Output:\nYour wish is granted!\ndef",
        "test": "",
        "num_ids": 60,
        "indeed": false
    },
    {
        "number": 4887,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return str(a//2)\n    else:\n        return str(a//2 + 1)\n\nSample Input:\n5\nSample Output:\n2\ndef",
        "test": "",
        "num_ids": 57,
        "indeed": false
    },
    {
        "number": 4888,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    tasks = []\n    for _ in range(n):\n        tasks.append(int(stdin.split()[0]))\n    tasks.sort()\n    for i in range(n):\n        if tasks[i] + T > T:\n            return str(i + 1)\n    return str(n)\n\nSample Input:\n6 180\n45 30 55 20 80 20\nSample Output:\n4\ndef",
        "test": "",
        "num_ids": 115,
        "indeed": false
    },
    {
        "number": 4889,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    lst = list(map(int, stdin.strip().split()))\n    lst.sort()\n    lst = [lst[i] for i in range(N)]\n    lst.sort()\n    return str(sum(lst))\n\nSample Output:\n79\n",
        "test": "",
        "num_ids": 80,
        "indeed": false
    },
    {
        "number": 4890,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    sodas = [int(i) for i in stdin.split()]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i] < s]\n    sodas.sort()\n    sodas = [sodas[i] for i in range(len(sodas)) if sodas[i]",
        "test": "",
        "num_ids": 1430,
        "indeed": false
    },
    {
        "number": 4891,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    pieces = [0] * 8\n    for i in range(n):\n        pieces[i] = int(stdin.strip())\n    pieces = sorted(pieces)\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0] + pieces\n    pieces = [0",
        "test": "",
        "num_ids": 1794,
        "indeed": false
    },
    {
        "number": 4892,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    passwords = stdin.split()\n    probabilities = []\n    for password in passwords:\n        probabilities.append(float(password[1:]))\n    probabilities = sorted(probabilities, reverse=True)\n    answer = 0\n    for i in range(len(probabilities)):\n        if i == 0:\n            answer += 1\n        else:\n            answer += (probabilities[i] - probabilities[i-1])\n    return str(answer)\n\n-----Examples-----\nSample Input:\n2\n123456 0.6666\nqwerty 0.3334\nSample Output:\n1.3334\ndef",
        "test": "",
        "num_ids": 151,
        "indeed": false
    },
    {
        "number": 4893,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    distances = list(map(int, stdin.split()))\n    distances.sort()\n    \n    for i in range(n):\n        if i + 1 < n:\n            if p == 1:\n                distances[i] += distances[i + 1]\n            else:\n                distances[i] += distances[i + 1] - distances[i + 2]\n    \n    return str(min(distances))\n\nSample Output:\n1\nExplanation:\nThe minimum distance you must keep to the car directly in front, in order to not have to use your breaks.\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, p = map(int, stdin.split())\n        distances = list(map(int, stdin.split()))\n        distances.sort()\n        \n        for i in range(n):\n            if i + 1 < n:\n                if p == 1:\n                    distances[i] += distances[i + 1]\n                else:\n                    distances[i] += distances[i + 1] - distances[i + 2]\n        \n        return str(min(distances))\n",
        "test": "",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 4894,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    notes = []\n    for i in range(n):\n        notes.append(list(map(str, input().split())))\n    \n    for i in range(n):\n        for j in range(n):\n            if notes[i][j] == 'g':\n                notes[i][j] = '*'\n            elif notes[i][j] == 'f':\n                notes[i][j] = '*'\n            elif notes[i][j] == 'e':\n                notes[i][j] = '*'\n            elif notes[i][j] == 'd':\n                notes[i][j] = '*'\n            elif notes[i][j] == 'c':\n                notes[i][j] = '*'\n            elif notes[i][j] == 'b':\n                notes[i][j] = '*'\n            elif notes[i][j] == 'a':\n                notes[i][j] = '*'\n    \n    for i in range(n):\n        for j in range(n):\n            if notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*'\n            elif notes[i][j] == '*':\n                notes[i][j] = '*",
        "test": "",
        "num_ids": 1221,
        "indeed": false
    },
    {
        "number": 4895,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return \"possible\"\n    else:\n        return \"possible\"\n\nSample Input:\n3\n1 1 1\nSample Output:\npossible\ndef",
        "test": "",
        "num_ids": 54,
        "indeed": false
    },
    {
        "number": 4896,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n == 159:\n        return 159\n    if n == 160:\n        return 160\n    if n == 161:\n        return 161\n    if n == 162:\n        return 162\n    if n",
        "test": "",
        "num_ids": 1806,
        "indeed": false
    },
    {
        "number": 4897,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    runners = []\n    for i in range(n):\n        runners.append(stdin.strip().split())\n    runners.sort(key=lambda x: (x[1], x[2]))\n    runner = runners[0]\n    runner_time = runner[1]\n    runner_leg = runner[2]\n    runner_leg_time = runner[3]\n    runner_leg_time = runner_leg_time.split(',')\n    runner_leg_time = [int(x) for x in runner_leg_time]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time.sort()\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_leg_time if x!= 0]\n    runner_leg_time = [x for x in runner_",
        "test": "",
        "num_ids": 1460,
        "indeed": false
    },
    {
        "number": 4898,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    L = list(map(int, stdin.strip().split()))\n    U = list(map(int, stdin.strip().split()))\n    \n    def solve(L, U, N):\n        if N == 0:\n            return 0\n        \n        if N == 1:\n            return L[0]\n        \n        if N == 2:\n            return U[0]\n        \n        if N == 3:\n            return max(L[0], L[1]) + max(U[0], U[1])\n        \n        if N == 4:\n            return max(L[0], L[1]) + max(U[0], U[1]) + max(L[2], L[3]) + max(U[2], U[3])\n        \n        if N == 5:\n            return max(L[0], L[1]) + max(U[0], U[1]) + max(L[2], L[3]) + max(U[2], U[3]) + max(L[4], L[5]) + max(U[4], U[5])\n        \n    return str(solve(L, U, N))\n\ndef",
        "test": "",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 4899,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'heey'\n\nSample Explanation:\nSample Input:\nhey\nSample Output:\nheey\ndef",
        "test": "",
        "num_ids": 28,
        "indeed": false
    },
    {
        "number": 4900,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    table = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        table[i][i] = 1\n    for i in range(n-1):\n        u, v = map(int, stdin.split())\n        table[u-1][v-1] = 1\n        table[v-1][u-1] = 1\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 1:\n                table[i][j]",
        "test": "",
        "num_ids": 1420,
        "indeed": false
    },
    {
        "number": 4901,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n\nSample Input:\nAJRB\nSample Output:\nBKSC\ndef",
        "test": "",
        "num_ids": 29,
        "indeed": false
    },
    {
        "number": 4902,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin) - stdin.count('a'))\n\nSample Input:\nabc\nSample Output:\n2\ndef",
        "test": "",
        "num_ids": 34,
        "indeed": false
    },
    {
        "number": 4903,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 0:\n        return 'no'\n    elif n == 0:\n        return 'go'\n    else:\n        return 'go'\n\nSample Input:\naaah\naaaaah\nSample Output:\ngo\ndef",
        "test": "",
        "num_ids": 67,
        "indeed": false
    },
    {
        "number": 4904,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    record = []\n    for i in range(n):\n        record.append(list(map(int, input().strip().split())))\n    record.sort(key=lambda x: x[0])\n    for i in range(n):\n        if record[i][0] == record[i][1]:\n            record[i][0] = 'A'\n        else:\n            record[i][0] = 'B'\n    for i in range(n):\n        if record[i][0] == record[i][1]:\n            record[i][1] = '1'\n        else:\n            record[i][1] = '2'\n    for i in range(n):\n        if record[i][0] == record[i][1]:\n            record[i][2] = '1'\n        else:\n            record[i][2] = '2'\n    for i in range(n):\n        if record[i][0] == record[i][1] and record[i][2] == '1':\n            record[i][0] = 'A'\n        elif record[i][0] == record[i][1] and record[i][2] == '2':\n            record[i][0] = 'B'\n        elif record[i][0] == record[i][1] and record[i][2] == '2':\n            record[i][0] = 'A'\n        elif record[i][0] == record[i][1] and record[i][2] == '1':\n            record[i][0] = 'B'\n        else:\n            record[i][0] = 'A'\n            record[i][1] = '2'\n            record[i][2] = '1'\n    for i in range(n):\n        if record[i][0] == record[i][1] and record[i][2] == '1':\n            record[i][0] = 'A'\n        elif record[i][0] == record[i][1] and record[i][2] == '2':\n            record[i][0] = 'B'\n        elif record[i][0] == record[i][1] and record[i][2] == '2':\n            record[i][0] = 'A'\n        elif record[i][0] == record[i][1] and record[i][2] == '1':\n            record[i][0] = 'B'\n        else:\n            record[i][0] = 'A'\n            record[i][1] = '2'\n            record[i][2] = '1'\n    for i in range(n):\n        if record[i][0] == record[i][1] and record[i][2] == '1':\n            record[i][0] = 'A'\n        elif record[i][0] == record[i][1] and record[i][2] == '2':\n            record[i][0] = 'B'\n        elif record[i][0] == record[i][1] and record[i][2] == '2':\n            record[i][0] = 'A'\n        elif record[i][0] == record[i][1] and record[i][2] == '1':\n            record[i][0] = 'B'\n        else:\n            record[i][0] = 'A'\n            record[i][1] = '2'\n            record[i][2] = '1'\n    for i in range(n):\n        if record[i][0] == record[i][1] and record[i][2] == '1':\n            record[i][0] = 'A'\n        elif record[i][0] == record[i][1] and record[i][2] == '2':\n            record[i][0] = 'B'\n        elif record[i][0] == record[i][1] and record[i][2] == '2':\n            record[i][0] = 'A'\n        elif record[i][0] == record[i][1] and record[i][2] == '1':\n            record[i][0] = 'B'\n        else:\n            record[i][0] = 'A'\n            record[i][1] = '2'\n            record[i][2] = '1'\n    for i in range(n):\n        if record[i][0] == record[i][1] and record[i][2] == '1':\n            record[i][0] = 'A'\n        elif record[i][0] == record[i][1] and record[i][2] == '2':\n            record[i][0] = 'B'\n        elif record[i][0] == record[i][1] and record[i][2] == '2':\n            record[i][0] = 'A'\n        elif record[i][0] == record[i][1] and record[i][2] == '1':\n            record[i][0] = 'B'\n        else:\n            record[i][0] = 'A'\n            record[i][1] = '2'\n            record[i][2] = '1'\n    for i in range(n):\n        if record[i][0] == record[i][1] and record[i][2] == '1':\n            record[i][0] = 'A'\n        elif record[i][0] == record[i][1] and record[i][2] == '2':\n            record[i][0] = 'B'\n        elif record[i][0] == record[i][1] and record[i][2] == '2':\n            record[i][0] = 'A'\n        elif record[i][0] == record[i][1] and record[i][2] == '1':\n            record[i][0] = 'B'\n        else:\n            record[i][0] = 'A'\n            record[i][1] = '2'\n            record[i][2] = '1'\n    for i in range(n):\n        if record[i][0] == record[i][1] and record[i][2] == '1':\n            record[i][0] = 'A'\n        elif record[i][0] == record[i][1] and record[i][2] == '2':\n            record[i][0] = 'B'\n        elif record[i][0] == record[i][1] and record[i][2] == '2':\n            record[i][0] = 'A'\n        elif record[i][0] == record[i][1] and record[i][2] == '1':\n            record[i][0] = 'B'\n        else:\n            record[i][0] = 'A'\n            record[i][1] = '2'\n            record[i][2] = '1'",
        "test": "",
        "num_ids": 1674,
        "indeed": false
    },
    {
        "number": 4905,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, A, B, K = map(int, stdin.split())\n    intersections = [i for i in range(1, N + 1)]\n    intersections.sort()\n    intersections.append(A)\n    intersections.append(B)\n    intersections.append(K)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n    intersections.append(K - 1)\n    intersections.append(K - 1)\n    intersections.sort()\n",
        "test": "",
        "num_ids": 1375,
        "indeed": false
    },
    {
        "number": 4906,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('E', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace('H', 'E').replace('H', 'D').replace",
        "test": "",
        "num_ids": 1554,
        "indeed": false
    },
    {
        "number": 4907,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Alice\"\n    if n == 2:\n        return \"Bob\"\n    if n == 3:\n        return \"Alice\"\n    if n == 4:\n        return \"Bob\"\n    if n == 5:\n        return \"Alice\"\n    if n == 6:\n        return \"Bob\"\n    if n == 7:\n        return \"Alice\"\n    if n == 8:\n        return \"Bob\"\n    if n == 9:\n        return \"Alice\"\n    if n == 10:\n        return \"Bob\"\n    if n == 11:\n        return \"Alice\"\n    if n == 12:\n        return \"Bob\"\n    if n == 13:\n        return \"Alice\"\n    if n == 14:\n        return \"Bob\"\n    if n == 15:\n        return \"Alice\"\n    if n == 16:\n        return \"Bob\"\n    if n == 17:\n        return \"Alice\"\n    if n == 18:\n        return \"Bob\"\n    if n == 19:\n        return \"Alice\"\n    if n == 20:\n        return \"Bob\"\n    if n == 21:\n        return \"Alice\"\n    if n == 22:\n        return \"Bob\"\n    if n == 23:\n        return \"Alice\"\n    if n == 24:\n        return \"Bob\"\n    if n == 25:\n        return \"Alice\"\n    if n == 26:\n        return \"Bob\"\n    if n == 27:\n        return \"Alice\"\n    if n == 28:\n        return \"Bob\"\n    if n == 29:\n        return \"Alice\"\n    if n == 30:\n        return \"Bob\"\n    if n == 31:\n        return \"Alice\"\n    if n == 32:\n        return \"Bob\"\n    if n == 33:\n        return \"Alice\"\n    if n == 34:\n        return \"Bob\"\n    if n == 35:\n        return \"Alice\"\n    if n == 36:\n        return \"Bob\"\n    if n == 37:\n        return \"Alice\"\n    if n == 38:\n        return \"Bob\"\n    if n == 39:\n        return \"Alice\"\n    if n == 40:\n        return \"Bob\"\n    if n == 41:\n        return \"Alice\"\n    if n == 42:\n        return \"Bob\"\n    if n == 43:\n        return \"Alice\"\n    if n == 44:\n        return \"Bob\"\n    if n == 45:\n        return \"Alice\"\n    if n == 46:\n        return \"Bob\"\n    if n == 47:\n        return \"Alice\"\n    if n == 48:\n        return \"Bob\"\n    if n == 49:\n        return \"Alice\"\n    if n == 50:\n        return \"Bob\"\n    if n == 51:\n        return \"Alice\"\n    if n == 52:\n        return \"Bob\"\n    if n == 53:\n        return \"Alice\"\n    if n == 54:\n        return \"Bob\"\n    if n == 55:\n        return \"Alice\"\n    if n == 56:\n        return \"Bob\"\n    if n == 57:\n        return \"Alice\"\n    if n == 58:\n        return \"Bob\"\n    if n == 59:\n        return \"Alice\"\n    if n == 60:\n        return \"Bob\"\n    if n == 61:\n        return \"Alice\"\n    if n == 62:\n        return \"Bob\"\n    if n == 63:\n        return \"Alice\"\n    if n == 64:\n        return \"Bob\"\n    if n == 65:\n        return \"Alice\"\n    if n == 66:\n        return \"Bob\"\n    if n == 67:\n        return \"Alice\"\n    if n == 68:\n        return \"Bob\"\n    if n == 69:\n        return \"Alice\"\n    if n == 70:\n        return \"Bob\"\n    if n == 71:\n        return \"Alice\"\n    if n == 72:\n        return \"Bob\"\n    if n == 73:\n        return \"Alice\"\n    if n == 74:\n        return \"Bob\"\n    if n == 75:\n        return \"Alice\"\n    if n == 76:\n        return \"Bob\"\n    if n == 77:\n        return \"Alice\"\n    if n == 78:\n        return \"Bob\"\n    if n == 79:\n        return \"Alice\"\n    if n == 80:\n        return \"Bob\"\n    if n == 81:\n        return \"Alice\"\n    if n == 82:\n        return \"Bob\"\n    if n == 83:\n        return \"Alice\"\n    if n == 84:\n        return \"Bob\"\n    if n == 85:\n        return \"Alice\"\n    if n == 86:\n        return \"Bob\"\n    if n == 87:\n        return \"Alice\"\n    if n == 88:\n        return \"Bob\"\n    if n == 89:\n        return \"Alice\"\n    if n == 90:\n        return \"Bob\"\n    if n == 91:\n        return \"Alice\"\n    if n == 92:\n        return \"Bob\"\n    if n == 93:\n        return \"Alice\"\n    if n == 94:\n        return \"Bob\"\n    if n == 95:\n        return \"Alice\"\n    if n == 96:\n        return \"Bob\"\n    if n == 97:\n        return \"Alice\"\n    if n == 98:\n        return \"Bob\"\n    if n == 99:\n        return \"Alice\"\n    if n == 100:\n        return \"Bob\"\n    if n == 101:\n        return \"Alice\"\n    if n == 102:\n        return \"Bob\"\n    if n == 103:\n        return \"Alice\"\n    if n == 104:\n        return \"Bob\"\n    if n == 105:\n        return \"Alice\"\n    if n == 106:\n        return \"Bob\"\n    if n == 107:\n        return \"Alice\"\n    if n == 108:\n        return \"Bob\"\n    if n == 109:\n        return \"Alice\"\n    if n == 110:\n        return \"Bob\"\n    if n == 111:\n        return \"Alice\"\n    if n == 112:\n        return \"Bob\"\n    if n == 113:\n        return \"Alice\"\n    if n == 114:\n        return \"Bob\"\n    if n == 115:\n        return \"Alice\"\n    if n == 116:\n        return \"Bob\"\n    if n == 117:\n        return \"Alice\"\n    if n == 118:\n        return \"Bob\"\n    if n == 119:\n        return \"Alice\"\n    if n == 120:\n        return \"Bob\"\n    if n == 121:\n        return \"Alice\"\n    if n == 122:\n        return \"Bob\"\n    if n == 123:\n        return \"Alice\"\n    if n == 124:\n        return \"Bob\"\n    if n == 125:\n        return \"Alice\"\n    if n == 126:\n        return \"Bob\"\n    if n == 127:\n        return \"Alice\"\n",
        "test": "",
        "num_ids": 1661,
        "indeed": false
    },
    {
        "number": 4908,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))\n\nSample Input:\n5 3 8\nSample Output:\n5+3=8\ndef",
        "test": "",
        "num_ids": 31,
        "indeed": false
    },
    {
        "number": 4909,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    D = list(map(int, stdin.strip().split()))\n    if len(D)!= N:\n        return 'NO'\n    if len(D) == 1:\n        return 'YES'\n    if D[0] == 1:\n        return 'YES'\n    if D[0] == 2:\n        return 'NO'\n    if D[0] == 3:\n        return 'NO'\n    if D[0] == 4:\n        return 'NO'\n    if D[0] == 5:\n        return 'NO'\n    if D[0] == 6:\n        return 'NO'\n    if D[0] == 7:\n        return 'NO'\n    if D[0] == 8:\n        return 'NO'\n    if D[0] == 9:\n        return 'NO'\n    if D[0] == 10:\n        return 'NO'\n    if D[0] == 11:\n        return 'NO'\n    if D[0] == 12:\n        return 'NO'\n    if D[0] == 13:\n        return 'NO'\n    if D[0] == 14:\n        return 'NO'\n    if D[0] == 15:\n        return 'NO'\n    if D[0] == 16:\n        return 'NO'\n    if D[0] == 17:\n        return 'NO'\n    if D[0] == 18:\n        return 'NO'\n    if D[0] == 19:\n        return 'NO'\n    if D[0] == 20:\n        return 'NO'\n    if D[0] == 21:\n        return 'NO'\n    if D[0] == 22:\n        return 'NO'\n    if D[0] == 23:\n        return 'NO'\n    if D[0] == 24:\n        return 'NO'\n    if D[0] == 25:\n        return 'NO'\n    if D[0] == 26:\n        return 'NO'\n    if D[0] == 27:\n        return 'NO'\n    if D[0] == 28:\n        return 'NO'\n    if D[0] == 29:\n        return 'NO'\n    if D[0] == 30:\n        return 'NO'\n    if D[0] == 31:\n        return 'NO'\n    if D[0] == 32:\n        return 'NO'\n    if D[0] == 33:\n        return 'NO'\n    if D[0] == 34:\n        return 'NO'\n    if D[0] == 35:\n        return 'NO'\n    if D[0] == 36:\n        return 'NO'\n    if D[0] == 37:\n        return 'NO'\n    if D[0] == 38:\n        return 'NO'\n    if D[0] == 39:\n        return 'NO'\n    if D[0] == 40:\n        return 'NO'\n    if D[0] == 41:\n        return 'NO'\n    if D[0] == 42:\n        return 'NO'\n    if D[0] == 43:\n        return 'NO'\n    if D[0] == 44:\n        return 'NO'\n    if D[0] == 45:\n        return 'NO'\n    if D[0] == 46:\n        return 'NO'\n    if D[0] == 47:\n        return 'NO'\n    if D[0] == 48:\n        return 'NO'\n    if D[0] == 49:\n        return 'NO'\n    if D[0] == 50:\n        return 'NO'\n    if D[0] == 51:\n        return 'NO'\n    if D[0] == 52:\n        return 'NO'\n    if D[0] == 53:\n        return 'NO'\n    if D[0] == 54:\n        return 'NO'\n    if D[0] == 55:\n        return 'NO'\n    if D[0] == 56:\n        return 'NO'\n    if D[0] == 57:\n        return 'NO'\n    if D[0] == 58:\n        return 'NO'\n    if D[0] == 59:\n        return 'NO'\n    if D[0] == 60:\n        return 'NO'\n    if D[0] == 61:\n        return 'NO'\n    if D[0] == 62:\n        return 'NO'\n    if D[0] == 63:\n        return 'NO'\n    if D[0] == 64:\n        return 'NO'\n    if D[0] == 65:\n        return 'NO'\n    if D[0] == 66:\n        return 'NO'\n    if D[0] == 67:\n        return 'NO'\n    if D[0] == 68:\n        return 'NO'\n    if D[0] == 69:\n        return 'NO'\n    if D[0] == 70:\n        return 'NO'\n    if D[0] == 71:\n        return 'NO'\n    if D[0] == 72:\n        return 'NO'\n    if D[0] == 73:\n        return 'NO'\n    if D[0] == 74:\n        return 'NO'\n    if D[0] == 75:\n        return 'NO'\n    if D[0] == 76:\n        return 'NO'\n    if D[0] == 77:\n        return 'NO'\n    if D[0] == 78:\n        return 'NO'\n    if D[0] == 79:\n        return 'NO'\n    if D[0] == 80:\n        return 'NO'\n    if D[0] == 81:\n        return 'NO'\n    if D[0] == 82:\n        return 'NO'\n    if D[0] == 83:\n        return 'NO'\n    if D[0] == 84:\n        return 'NO'\n    if D[0] == 85:\n        return 'NO'\n    if D[0] == 86:\n        return 'NO'\n    if D[0] == 87:\n        return 'NO'\n    if D[0] == 88:\n        return 'NO'\n    if D[0] == 89:\n        return 'NO'\n    if D[0] == 90:\n        return 'NO'\n    if D[0] == 91:\n        return 'NO'\n    if D[0] == 92:\n        return 'NO'\n    if D[0] == 93:\n        return 'NO'\n    if D[0] == 94:\n        return 'NO'\n    if D[0] == 95:\n        return 'NO'\n    if D[0] == 96:\n        return 'NO'\n    ",
        "test": "",
        "num_ids": 1599,
        "indeed": false
    },
    {
        "number": 4910,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    categories = []\n    for i in range(n):\n        categories.append(stdin[i].lower())\n    categories.sort()\n    return categories[-1]\n\nSample Output:\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon",
        "test": "",
        "num_ids": 1699,
        "indeed": false
    },
    {
        "number": 4911,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = []\n    for i in range(n):\n        s.append(stdin.strip().split())\n    s.sort()\n    for i in range(n):\n        print(s[i][0], end=\" \")\n        print(s[i][1], end=\" \")\n        print(s[i][2], end=\" \")\n        print(s[i][3], end=\" \")\n        print(s[i][4], end=\" \")\n        print(s[i][5], end=\" \")\n        print(s[i][6], end=\" \")\n        print(s[i][7], end=\" \")\n        print(s[i][8], end=\" \")\n        print(s[i][9], end=\" \")\n        print(s[i][10], end=\" \")\n        print(s[i][11], end=\" \")\n        print(s[i][12], end=\" \")\n        print(s[i][13], end=\" \")\n        print(s[i][14], end=\" \")\n        print(s[i][15], end=\" \")\n        print(s[i][16], end=\" \")\n        print(s[i][17], end=\" \")\n        print(s[i][18], end=\" \")\n        print(s[i][19], end=\" \")\n        print(s[i][20], end=\" \")\n        print(s[i][21], end=\" \")\n        print(s[i][22], end=\" \")\n        print(s[i][23], end=\" \")\n        print(s[i][24], end=\" \")\n        print(s[i][25], end=\" \")\n        print(s[i][26], end=\" \")\n        print(s[i][27], end=\" \")\n        print(s[i][28], end=\" \")\n        print(s[i][29], end=\" \")\n        print(s[i][30], end=\" \")\n        print(s[i][31], end=\" \")\n        print(s[i][32], end=\" \")\n        print(s[i][33], end=\" \")\n        print(s[i][34], end=\" \")\n        print(s[i][35], end=\" \")\n        print(s[i][36], end=\" \")\n        print(s[i][37], end=\" \")\n        print(s[i][38], end=\" \")\n        print(s[i][39], end=\" \")\n        print(s[i][40], end=\" \")\n        print(s[i][41], end=\" \")\n        print(s[i][42], end=\" \")\n        print(s[i][43], end=\" \")\n        print(s[i][44], end=\" \")\n        print(s[i][45], end=\" \")\n        print(s[i][46], end=\" \")\n        print(s[i][47], end=\" \")\n        print(s[i][48], end=\" \")\n        print(s[i][49], end=\" \")\n        print(s[i][50], end=\" \")\n        print(s[i][51], end=\" \")\n        print(s[i][52], end=\" \")\n        print(s[i][53], end=\" \")\n        print(s[i][54], end=\" \")\n        print(s[i][55], end=\" \")\n        print(s[i][56], end=\" \")\n        print(s[i][57], end=\" \")\n        print(s[i][58], end=\" \")\n        print(s[i][59], end=\" \")\n        print(s[i][60], end=\" \")\n        print(s[i][61], end=\" \")\n        print(s[i][62], end=\" \")\n        print(s[i][63], end=\" \")\n        print(s[i][64], end=\" \")\n        print(s[i][65], end=\" \")\n        print(s[i][66], end=\" \")\n        print(s[i][67], end=\" \")\n        print(s[i][68], end=\" \")\n        print(s[i][69], end=\" \")\n        print(s[i][70], end=\" \")\n        print(s[i][71], end=\" \")\n        print(s[i][72], end=\" \")\n        print(s[i][73], end=\" \")\n        print(s[i][74], end=\" \")\n        print(s[i][75], end=\" \")\n        print(s[i][76], end=\" \")\n        print(s[i][77], end=\" \")\n        print(s[i][78], end=\" \")\n        print(s[i][79], end=\" \")\n        print(s[i][80], end=\" \")\n        print(s[i][81], end=\" \")\n        print(s[i][82], end=\" \")\n        print(s[i][83], end=\" \")\n        print(s[i][",
        "test": "",
        "num_ids": 1237,
        "indeed": false
    },
    {
        "number": 4912,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w, n = map(int, stdin.split())\n    bricks = [list(map(int, input().split())) for _ in range(n)]\n    \n    def solve(h, w, n, bricks):\n        if n == 1:\n            return True\n        \n        for i in range(n):\n            if solve(h, w, n-1, bricks[i]) or solve(h, w, n-1, bricks[i] + bricks[i+1]):\n                return True\n        return False\n    \n    return \"YES\" if solve(h, w, n, bricks) else \"NO\"\n\nSample Output:\nYES\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 161,
        "indeed": false
    },
    {
        "number": 4913,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    vaccine_list = []\n    control_list = []\n    for i in range(N):\n        vaccine_list.append(stdin.strip().split())\n    for i in range(N):\n        control_list.append(stdin.strip().split())\n    for i in range(N):\n        if vaccine_list[i][0] == control_list[i][0]:\n            vaccine_list[i][0] = 'Y'\n            vaccine_list[i][1] = 'Y'\n            vaccine_list[i][2] = 'Y'\n            vaccine_list[i][3] = 'Y'\n        else:\n            vaccine_list[i][0] = 'N'\n            vaccine_list[i][1] = 'N'\n            vaccine_list[i][2] = 'N'\n            vaccine_list[i][3] = 'N'\n    for i in range(N):\n        if vaccine_list[i][0] == 'Y':\n            vaccine_list[i][0] = 'Y'\n            vaccine_list[i][1] = 'N'\n            vaccine_list[i][2] = 'N'\n            vaccine_list[i][3] = 'N'\n        else:\n            vaccine_list[i][0] = 'N'\n            vaccine_list[i][1] = 'N'\n            vaccine_list[i][2] = 'N'\n            vaccine_list[i][3] = 'N'\n    for i in range(N):\n        if vaccine_list[i][1] == 'Y':\n            vaccine_list[i][1] = 'Y'\n            vaccine_list[i][2] = 'N'\n            vaccine_list[i][3] = 'N'\n        else:\n            vaccine_list[i][1] = 'N'\n            vaccine_list[i][2] = 'N'\n            vaccine_list[i][3] = 'N'\n    for i in range(N):\n        if vaccine_list[i][2] == 'Y':\n            vaccine_list[i][2] = 'Y'\n            vaccine_list[i][3] = 'N'\n        else:\n            vaccine_list[i][2] = 'N'\n            vaccine_list[i][3] = 'N'\n    for i in range(N):\n        if vaccine_list[i][3] == 'Y':\n            vaccine_list[i][3] = 'Y'\n            vaccine_list[i][4] = 'N'\n        else:\n            vaccine_list[i][3] = 'N'\n            vaccine_list[i][4] = 'N'\n    vaccine_list.sort(key=lambda x: x[4])\n    for i in range(N):\n        if vaccine_list[i][4] == 'Y':\n            vaccine_list[i][4] = 'Y'\n            vaccine_list[i][5] = 'N'\n        else:\n            vaccine_list[i][4] = 'N'\n            vaccine_list[i][5] = 'N'\n    vaccine_list.sort(key=lambda x: x[5])\n    for i in range(N):\n        if vaccine_list[i][5] == 'Y':\n            vaccine_list[i][5] = 'Y'\n            vaccine_list[i][6] = 'N'\n        else:\n            vaccine_list[i][5] = 'N'\n            vaccine_list[i][6] = 'N'\n    vaccine_list.sort(key=lambda x: x[6])\n    for i in range(N):\n        if vaccine_list[i][6] == 'Y':\n            vaccine_list[i][6] = 'Y'\n            vaccine_list[i][7] = 'N'\n        else:\n            vaccine_list[i][6] = 'N'\n            vaccine_list[i][7] = 'N'\n    vaccine_list.sort(key=lambda x: x[7])\n    for i in range(N):\n        if vaccine_list[i][7] == 'Y':\n            vaccine_list[i][7] = 'Y'\n            vaccine_list[i][8] = 'N'\n        else:\n            vaccine_list[i][7] = 'N'\n            vaccine_list[i][8] = 'N'\n    vaccine_list.sort(key=lambda x: x[8])\n    for i in range(N):\n        if vaccine_list[i][8] == 'Y':\n            vaccine_list[i][8] = 'Y'\n            vaccine_list[i][9] = 'N'\n        else:\n            vaccine_list[i][8] = 'N'\n            vaccine_list[i][9] = 'N'\n    vaccine_list.sort(key=lambda x: x[9])\n    for i in range(N):\n        if vaccine_list[i][9] == 'Y':\n            vaccine_list[i][9] = 'Y'\n            vaccine_list[i][10] = 'N'\n        else:\n            vaccine_list[i][9] = 'N'\n            vaccine_list[i][10] = 'N'\n    vaccine_list.sort(key=lambda x: x[10])\n    for i in range(N):\n        if vaccine_list[i][10] == 'Y':\n            vaccine_list[i][10] = 'Y'\n            vaccine_list[i][11] = 'N'\n        else:\n            vaccine_list[i][10] = 'N'\n            vaccine_list[i][11] = 'N'\n    vaccine_list.sort(key=lambda x: x[11])\n    for i in range(N):\n        if vaccine_list[i][11] == 'Y':\n            vaccine_list[i][11] = 'Y'\n            vaccine_list[i][12] = 'N'\n        else:\n            vaccine_list[i][11] = 'N'\n            vaccine_list[",
        "test": "",
        "num_ids": 1510,
        "indeed": false
    },
    {
        "number": 4914,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    answer = ''\n    for i in range(N):\n        answer += stdin[i]\n    answer = answer.split()\n    answer.sort()\n    answer = answer[::-1]\n    answer = answer[0]\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.replace('B', 'C')\n    answer = answer.replace('C', 'A')\n    answer = answer.replace('A', 'B')\n    answer = answer.",
        "test": "",
        "num_ids": 1643,
        "indeed": false
    },
    {
        "number": 4915,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'",
        "test": "",
        "num_ids": 1246,
        "indeed": false
    },
    {
        "number": 4916,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    \n    def get_distance(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_2(x, y):\n        return abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y)\n    \n    def get_distance_3(x, y):\n        return abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y)\n    \n    def get_distance_4(x, y):\n        return abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y)\n    \n    def get_distance_5(x, y):\n        return abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y)\n    \n    def get_distance_6(x, y):\n        return abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y)\n    \n    def get_distance_7(x, y):\n        return abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y)\n    \n    def get_distance_8(x, y):\n        return abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y)\n    \n    def get_distance_9(x, y):\n        return abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y)\n    \n    def get_distance_10(x, y):\n        return abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y)\n    \n    def get_distance_11(x, y):\n        return abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y)\n    \n    def get_distance_12(x, y):\n        return abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y)\n    \n    def get_distance_13(x, y):\n        return abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y) + abs(x - y) + abs(x + y",
        "test": "",
        "num_ids": 1527,
        "indeed": false
    },
    {
        "number": 4917,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a, b = map(int, stdin.strip().split())\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"gunilla has a point\"\n    if a > b:\n        a, b = b",
        "test": "",
        "num_ids": 1626,
        "indeed": false
    },
    {
        "number": 4918,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    if q == 1:\n        print(n)\n    else:\n        a, b = map(int, stdin.split())\n        print(a, b)\n        print(a + b)\n        print(a * b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a ** b)\n        print(a // b)\n        print(a % b)\n        print(a",
        "test": "",
        "num_ids": 1532,
        "indeed": false
    },
    {
        "number": 4919,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    country = []\n    for _ in range(n):\n        country.append(stdin.split()[0])\n    for _ in range(q):\n        s, y = map(int, stdin.split())\n        if s in country:\n            country.remove(s)\n            country.append(s)\n            country.sort()\n            country.remove(s)\n            country.append(s)\n            country.sort()\n            country.remove(s)\n            country.append(s)\n            country.sort()\n    return country[y-1]\n",
        "test": "",
        "num_ids": 150,
        "indeed": false
    },
    {
        "number": 4920,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147",
        "test": "",
        "num_ids": 1639,
        "indeed": false
    },
    {
        "number": 4921,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        line = line.strip()\n        if line.startswith('.'):\n            print(line)\n        else:\n            print('.' * len(line))\n    return ''\n\nSample Input:\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\nSample Output:\nEngineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same as the second word, so it is printed.\n\n-----Explanation-----\nThe first word is the same",
        "test": "",
        "num_ids": 1681,
        "indeed": false
    },
    {
        "number": 4922,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n, k = map(int, stdin.split())\n    clauses = []\n    for _ in range(m):\n        clauses.append(list(map(int, stdin.split())))\n    \n    def is_satisfiable(clauses):\n        for i in range(len(clauses)):\n            for j in range(i+1, len(clauses)):\n                if not is_satisfiable(clauses[i:j]):\n                    return False\n        return True\n    \n    if is_satisfiable(clauses):\n        return'satisfactory'\n    else:\n        return 'unsatisfactory'\n",
        "test": "",
        "num_ids": 162,
        "indeed": false
    },
    {
        "number": 4923,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a = a[::-1]\n    for i in range(n):\n        if a[i] == a[i+1]:\n            a[i], a[i+1] = a[i+1], a[i]\n        else:\n            break\n    return ''.join(map(str, a))\n",
        "test": "",
        "num_ids": 112,
        "indeed": false
    },
    {
        "number": 4924,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m, s = map(int, stdin.split(':'))\n    if h > 23 or h < 0:\n        return 'Error'\n    if m > 59 or m < 0:\n        return 'Error'\n    if s > 59 or s < 0:\n        return 'Error'\n    if s == 0:\n        return 'Error'\n    if s < 60:\n        return '{:02d}:{:02d}:{:02d}'.format(h, m, s)\n    else:\n        return '{:02d}:{:02d}:{:02d}:{:02d}'.format(h, m, s // 60, s % 60)\n",
        "test": "",
        "num_ids": 163,
        "indeed": false
    },
    {
        "number": 4925,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(n, k))\n\nSample Input:\n3\n2\nSample Output:\n2\ndef",
        "test": "",
        "num_ids": 43,
        "indeed": false
    },
    {
        "number": 4926,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '1.5'\n    if n == 3:\n        return '2.5'\n    if n == 4:\n        return '3.5'\n    if n == 5:\n        return '4.5'\n    if n == 6:\n        return '5.5'\n    if n == 7:\n        return '6.5'\n    if n == 8:\n        return '7.5'\n    if n == 9:\n        return '8.5'\n    if n == 10:\n        return '9.5'\n    if n == 11:\n        return '10.5'\n    if n == 12:\n        return '11.5'\n    if n == 13:\n        return '12.5'\n    if n == 14:\n        return '13.5'\n    if n == 15:\n        return '14.5'\n    if n == 16:\n        return '15.5'\n    if n == 17:\n        return '16.5'\n    if n == 18:\n        return '17.5'\n    if n == 19:\n        return '18.5'\n    if n == 20:\n        return '19.5'\n    if n == 21:\n        return '20.5'\n    if n == 22:\n        return '21.5'\n    if n == 23:\n        return '22.5'\n    if n == 24:\n        return '23.5'\n    if n == 25:\n        return '24.5'\n    if n == 26:\n        return '25.5'\n    if n == 27:\n        return '26.5'\n    if n == 28:\n        return '27.5'\n    if n == 29:\n        return '28.5'\n    if n == 30:\n        return '29.5'\n    if n == 31:\n        return '30.5'\n    if n == 32:\n        return '31.5'\n    if n == 33:\n        return '32.5'\n    if n == 34:\n        return '33.5'\n    if n == 35:\n        return '34.5'\n    if n == 36:\n        return '35.5'\n    if n == 37:\n        return '36.5'\n    if n == 38:\n        return '37.5'\n    if n == 39:\n        return '38.5'\n    if n == 40:\n        return '39.5'\n    if n == 41:\n        return '40.5'\n    if n == 42:\n        return '41.5'\n    if n == 43:\n        return '42.5'\n    if n == 44:\n        return '43.5'\n    if n == 45:\n        return '44.5'\n    if n == 46:\n        return '45.5'\n    if n == 47:\n        return '46.5'\n    if n == 48:\n        return '47.5'\n    if n == 49:\n        return '48.5'\n    if n == 50:\n        return '49.5'\n    if n == 51:\n        return '50.5'\n    if n == 52:\n        return '51.5'\n    if n == 53:\n        return '52.5'\n    if n == 54:\n        return '53.5'\n    if n == 55:\n        return '54.5'\n    if n == 56:\n        return '55.5'\n    if n == 57:\n        return '56.5'\n    if n == 58:\n        return '57.5'\n    if n == 59:\n        return '58.5'\n    if n == 60:\n        return '59.5'\n    if n == 61:\n        return '60.5'\n    if n == 62:\n        return '61.5'\n    if n == 63:\n        return '62.5'\n    if n == 64:\n        return '63.5'\n    if n == 65:\n        return '64.5'\n    if n == 66:\n        return '65.5'\n    if n == 67:\n        return '66.5'\n    if n == 68:\n        return '67.5'\n    if n == 69:\n        return '68.5'\n    if n == 70:\n        return '69.5'\n    if n == 71:\n        return '70.5'\n    if n == 72:\n        return '71.5'\n    if n == 73:\n        return '72.5'\n    if n == 74:\n        return '73.5'\n    if n == 75:\n        return '74.5'\n    if n == 76:\n        return '75.5'\n    if n == 77:\n        return '76.5'\n    if n == 78:\n        return '77.5'\n    if n == 79:\n        return '78.5'\n    if n == 80:\n        return '79.5'\n    if n == 81:\n        return '80.5'\n    if n == 82:\n        return '81.5'\n    if n == 83:\n        return '82.5'\n    if n == 84:\n        return '83.5'\n    if n == 85:\n        return '84.5'\n    if n == 86:\n        return '85.5'\n    if n == 87:\n        return '86.5'\n    if n == 88:\n        return '87.5'\n    if n == 89:\n        return '88.5'\n    if n == 90:\n        return '89.5'\n    if n == 91:\n        return '90.5'\n    if n == 92:\n        return '91.5'\n    if n == 93:\n        return '92.5'\n    if n == 94:\n        return '93.5'\n    if n == 95:\n        return '94.5'\n    if n == 96:\n        return '95.5'\n    if n == 97:\n        return '96.5'\n    if n == 98:\n        return '97.5'\n    if n == 99:\n        return '98.5'\n    if n == 100:\n        return '99.5'\n    if n == 101:\n        return '100.5'\n    if n == 102:\n        return '101.5'\n    if n == 103:\n        return '102.5'\n    if n == 104:\n        return '103.5'\n    if n == 105:\n        return '104.5'\n    if n == 106:\n        return '105.5'\n    if n == 107:\n        return '106.5'\n    if n == 108:\n        return '107.5'\n    ",
        "test": "",
        "num_ids": 1642,
        "indeed": false
    },
    {
        "number": 4927,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = map(int, stdin.split())\n    if N == P == Q:\n        return 'paul'\n    if N < P < Q:\n        return 'opponent'\n    return 'paul'\n\nSample Output:\npaul\ndef",
        "test": "",
        "num_ids": 66,
        "indeed": false
    },
    {
        "number": 4928,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return \"2\"\n    if N == 3:\n        return \"3\"\n    if N == 4:\n        return \"4\"\n    if N == 5:\n        return \"5\"\n    if N == 6:\n        return \"6\"\n    if N == 7:\n        return \"7\"\n    if N == 8:\n        return \"8\"\n    if N == 9:\n        return \"9\"\n    if N == 10:\n        return \"10\"\n    if N == 11:\n        return \"11\"\n    if N == 12:\n        return \"12\"\n    if N == 13:\n        return \"13\"\n    if N == 14:\n        return \"14\"\n    if N == 15:\n        return \"15\"\n    if N == 16:\n        return \"16\"\n    if N == 17:\n        return \"17\"\n    if N == 18:\n        return \"18\"\n    if N == 19:\n        return \"19\"\n    if N == 20:\n        return \"20\"\n    if N == 21:\n        return \"21\"\n    if N == 22:\n        return \"22\"\n    if N == 23:\n        return \"23\"\n    if N == 24:\n        return \"24\"\n    if N == 25:\n        return \"25\"\n    if N == 26:\n        return \"26\"\n    if N == 27:\n        return \"27\"\n    if N == 28:\n        return \"28\"\n    if N == 29:\n        return \"29\"\n    if N == 30:\n        return \"30\"\n    if N == 31:\n        return \"31\"\n    if N == 32:\n        return \"32\"\n    if N == 33:\n        return \"33\"\n    if N == 34:\n        return \"34\"\n    if N == 35:\n        return \"35\"\n    if N == 36:\n        return \"36\"\n    if N == 37:\n        return \"37\"\n    if N == 38:\n        return \"38\"\n    if N == 39:\n        return \"39\"\n    if N == 40:\n        return \"40\"\n    if N == 41:\n        return \"41\"\n    if N == 42:\n        return \"42\"\n    if N == 43:\n        return \"43\"\n    if N == 44:\n        return \"44\"\n    if N == 45:\n        return \"45\"\n    if N == 46:\n        return \"46\"\n    if N == 47:\n        return \"47\"\n    if N == 48:\n        return \"48\"\n    if N == 49:\n        return \"49\"\n    if N == 50:\n        return \"50\"\n    if N == 51:\n        return \"51\"\n    if N == 52:\n        return \"52\"\n    if N == 53:\n        return \"53\"\n    if N == 54:\n        return \"54\"\n    if N == 55:\n        return \"55\"\n    if N == 56:\n        return \"56\"\n    if N == 57:\n        return \"57\"\n    if N == 58:\n        return \"58\"\n    if N == 59:\n        return \"59\"\n    if N == 60:\n        return \"60\"\n    if N == 61:\n        return \"61\"\n    if N == 62:\n        return \"62\"\n    if N == 63:\n        return \"63\"\n    if N == 64:\n        return \"64\"\n    if N == 65:\n        return \"65\"\n    if N == 66:\n        return \"66\"\n    if N == 67:\n        return \"67\"\n    if N == 68:\n        return \"68\"\n    if N == 69:\n        return \"69\"\n    if N == 70:\n        return \"70\"\n    if N == 71:\n        return \"71\"\n    if N == 72:\n        return \"72\"\n    if N == 73:\n        return \"73\"\n    if N == 74:\n        return \"74\"\n    if N == 75:\n        return \"75\"\n    if N == 76:\n        return \"76\"\n    if N == 77:\n        return \"77\"\n    if N == 78:\n        return \"78\"\n    if N == 79:\n        return \"79\"\n    if N == 80:\n        return \"80\"\n    if N == 81:\n        return \"81\"\n    if N == 82:\n        return \"82\"\n    if N == 83:\n        return \"83\"\n    if N == 84:\n        return \"84\"\n    if N == 85:\n        return \"85\"\n    if N == 86:\n        return \"86\"\n    if N == 87:\n        return \"87\"\n    if N == 88:\n        return \"88\"\n    if N == 89:\n        return \"89\"\n    if N == 90:\n        return \"90\"\n    if N == 91:\n        return \"91\"\n    if N == 92:\n        return \"92\"\n    if N == 93:\n        return \"93\"\n    if N == 94:\n        return \"94\"\n    if N == 95:\n        return \"95\"\n    if N == 96:\n        return \"96\"\n    if N == 97:\n        return \"97\"\n    if N == 98:\n        return \"98\"\n    if N == 99:\n        return \"99\"\n    if N == 100:\n        return \"100\"\n    if N == 101:\n        return \"101\"\n    if N == 102:\n        return \"102\"\n    if N == 103:\n        return \"103\"\n    if N == 104:\n        return \"104\"\n    if N == 105:\n        return \"105\"\n    if N == 106:\n        return \"106\"\n    if N == 107:\n        return \"107\"\n    if N == 108:\n        return \"108\"\n    if N == 109:\n        return \"109\"\n    if N == 110:\n        return \"110\"\n    if N == 111:\n        return \"111\"\n    if N == 112:\n        return \"112\"\n    if N == 113:\n        return \"113\"\n    if N == 114:\n        return \"114\"\n    if N == 115:\n        return \"115\"\n    if N == 116:\n        return \"116\"\n    if N == 117:\n        return \"117\"\n    if N == 118:\n        return \"118\"\n    if N == 119:\n        return \"119\"\n    if N == 120:\n        return \"120\"\n    if N == 121:\n        return \"121\"\n    if N == 122:\n        return \"122\"\n    if N == 123:\n        return \"123\"\n    if N == 124:\n        return \"124\"\n    if N == 125:\n        return \"125\"\n    if N == 126:\n        return \"126\"\n    if N == 127:\n        return \"127\"\n    if N == 128:\n        return \"128\"\n    if N == 129:\n        return \"129\"\n    if N == 130:\n        return \"130\"\n    if N == 131:\n        return \"131\"\n    if N == 132:\n        return \"132\"\n    if N == 133:\n        return \"133\"\n    if N == 134:\n        return \"134\"\n    if N == 135:\n        return \"135\"\n    if N == 136:\n        return \"136\"\n    if N == 137",
        "test": "",
        "num_ids": 1783,
        "indeed": false
    },
    {
        "number": 4929,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    password = stdin.split()\n    password = [i.lower() for i in password]\n    password = [i.upper() for i in password]\n    password = [i.replace(' ', '') for i in password]\n    password = [i.replace('-', '') for i in password]\n    password = [i.replace('.', '') for i in password]\n    password = [i.replace('!', '') for i in password]\n    password = [i.replace('?', '') for i in password]\n    password = [i.replace(' ', '') for i in password]\n    password = [i.replace('.', '') for i in password]\n    password = [i.replace('!', '') for i in password]\n    password = [i.replace('?', '') for i in password]\n    password = [i.replace(' ', '') for i in password]\n    password = [i.replace('-', '') for i in password]\n    password = [i.replace('.', '') for i in password]\n    password = [i.replace('!', '') for i in password]\n    password = [i.replace('?', '') for i in password]\n    password = [i.replace(' ', '') for i in password]\n    password = [i.replace('.', '') for i in password]\n    password = [i.replace('!', '') for i in password]\n    password = [i.replace('?', '') for i in password]\n    password = [i.replace(' ', '') for i in password]\n    password = [i.replace('-', '') for i in password]\n    password = [i.replace('.', '') for i in password]\n    password = [i.replace('!', '') for i in password]\n    password = [i.replace('?', '') for i in password]\n    password = [i.replace(' ', '') for i in password]\n    password = [i.replace('.', '') for i in password]\n    password = [i.replace('!', '') for i in password]\n    password = [i.replace('?', '') for i in password]\n    password = [i.replace(' ', '') for i in password]\n    password = [i.replace('-', '') for i in password]\n    password = [i.replace('.', '') for i in password]\n    password = [i.replace('!', '') for i in password]\n    password = [i.replace('?', '') for i in password]\n    password = [i.replace(' ', '') for i in password]\n    password = [i.replace('.', '') for i in password]\n    password = [i.replace('!', '') for i in password]\n    password = [i.replace('?', '') for i in password]\n    password = [i.replace(' ', '') for i in password]\n    password = [i.replace('-', '') for i in password]\n    password = [i.replace('.', '') for i in password]\n    password = [i.replace('!', '') for i in password]\n    password = [i.replace('?', '') for i in password]\n    password = [i.replace(' ', '') for i in password]\n    password = [i.replace('.', '') for i in password]\n    password = [i.replace('!', '') for i in password]\n    password = [i.replace('?', '') for i in password]\n    password = [i.replace(' ', '') for i in password]\n    password = [i.replace('-', '') for i in password]\n    password = [i.replace('.', '') for i in password]\n    password = [i.replace('!', '') for i in password]\n    password = [i.replace('?', '') for i in password]\n    password = [i.replace(' ', '') for i in password]\n    password = [i.replace('.', '') for i in password]\n    password = [i.replace('!', '') for i in password]\n    password = [i.replace('?', '') for i in password]\n    password = [i.replace(' ', '') for i in password]\n    password = [i.replace('-', '') for i in password]\n    password = [i.replace('.', '') for i in password]\n    password = [i.replace('!', '') for i in password]\n    password = [i.replace('?', '') for i in password]\n    password = [i.replace(' ', '') for i in password]\n    password = [i.replace('.', '') for i in password]\n    password = [i.replace('!', '') for i in password]\n    password = [i.replace('?', '') for i in password]\n    password = [i.replace(' ', '') for i in password]\n    password = [i.replace('-', '') for i in password]\n    password = [i.replace('.', '') for i in password]\n    password = [i.replace('!', '') for i in password]\n    password = [i.replace('?', '') for i in password]\n    password = [i.replace(' ', '') for i in password]\n    password = [i.replace('.', '') for i in password]\n    password = [i.replace('!', '') for i in password]\n    password = [i.replace('?', '') for i in password]\n    password = [i.replace(' ', '') for i in password]\n    password = [i.replace('-', '') for i in password]\n    password = [i.replace('.', '') for i in password]\n    password = [i.replace('!', '') for i in password]\n    password = [i.replace('?', '') for i in password]\n    password = [i.replace(' ', '') for i in password]\n    password = [i.replace('.', '') for i in password]\n    password = [i.replace('!', '') for i in password]\n    password = [i.replace('?', '') for i in password]\n    password = [i.replace(' ', '') for i in password]\n    password = [i.replace('-', '') for i in password]\n    password = [i.replace('.', '') for i in password]\n    password = [i.replace('!', '') for i in password]\n    password = [i.replace('?', '') for i in password]\n    password = [i.replace(' ', '') for i in password]\n    password = [i.replace('.', '') for i in password]\n    password = [i",
        "test": "",
        "num_ids": 1607,
        "indeed": false
    },
    {
        "number": 4930,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    for line in stdin:\n        answer += line.lower() +''\n    return answer.strip()\n\n-----Constraints-----\n1 <= stdin.length <= 100\n1 <= stdin[i].length <= 100\nstdin contains only lowercase letters of the English alphabet and spaces.\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(n)\n\nO(n)\n\n-----Submissions-----\nSample Input:\nzepelepenapa papapripikapa\nSample Output:\nzelena paprika\ndef",
        "test": "",
        "num_ids": 144,
        "indeed": false
    },
    {
        "number": 4931,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if X == Y:\n        return 'IMPOSSIBLE'\n    if abs(X - Y) < 10 ** -6:\n        return 'ALL GOOD'\n    return 'IMPOSSIBLE'\n\nSample Input:\n3 3\nSample Output:\n-3\ndef",
        "test": "",
        "num_ids": 79,
        "indeed": false
    },
    {
        "number": 4932,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A == 1 and B == 1 and C == 1 and D == 1:\n        return 'both'\n    if A == 1 and B == 1 and C == 1 and D == 2:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 3:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 4:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 5:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 6:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 7:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 8:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 9:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 10:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 11:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 12:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 13:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 14:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 15:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 16:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 17:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 18:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 19:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 20:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 21:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 22:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 23:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 24:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 25:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 26:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 27:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 28:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 29:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 30:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 31:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 32:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 33:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 34:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 35:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 36:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 37:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 38:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 39:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 40:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 41:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 42:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 43:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 44:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 45:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 46:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 47:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 48:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 49:\n        return 'one'\n    if A == 1 and B == 1 and C == 1 and D == 50:\n        return 'one'\n    if A == 1 and B == 1 and C == 2 and D == 0:\n        return 'both'\n    if A == 1 and B == 1 and C == 2 and D == 1:\n        return 'one'\n    if A == 1 and B == 1 and C == 2 and D == 2:\n        return 'one'\n    if A == 1 and B == 1 and C == 2 and D == 3:\n        return 'one'\n    if A == 1 and B == 1 and C == 2 and D == 4:\n        return 'one'\n    if A == 1 and B == 1 and C == 2 and D == 5:\n        return 'one'\n    if A == 1 and B == 1 and C == 2 and D == 6:\n        return 'one'\n    if A == 1 and B == 1 and C == 2 and D == 7:\n        return 'one'\n    if A == 1 and B == 1 and C == 2 and D == 8:\n        return 'one'\n    if A == 1 and B == 1 and C == 2 and D == 9:\n        return 'one'\n    if A == 1 and B == 1 and C == 2 and D == 10:\n        return 'one'\n    if A == 1 and B == 1 and C == 2 and D == 11:\n        return 'one'\n    if A == 1 and B == 1 and C == 2 and D == 12:\n        return 'one'\n    if A == 1 and B == 1 and C == 2 and D == 13:\n        return 'one'\n    if A == 1 and B == 1 and C == 2 and D == 14:\n        return 'one'\n    if A == 1 and B == 1 and C == 2 and D == 15:\n        return 'one'\n    if A == 1 and B == 1 and C == 2 and D == 16:\n        return 'one'\n    ",
        "test": "",
        "num_ids": 1696,
        "indeed": false
    },
    {
        "number": 4933,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    return str(nums[4])\n\nSample Input:\n4 6 8\nSample Output:\n10\ndef",
        "test": "",
        "num_ids": 51,
        "indeed": false
    },
    {
        "number": 4934,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, v = map(int, stdin.split())\n    return str(int(h/v))\n\nSample Input:\n5\nSample Output:\n5\nExplanation:\n5 is the minimum length of the ladder in centimeters.\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 61,
        "indeed": false
    },
    {
        "number": 4935,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, g = map(int, stdin.split())\n    D = map(int, stdin.split())\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(D[i] - D[i+1]) for i in range(len(D)-1)]\n    D.sort()\n    D = [abs(",
        "test": "",
        "num_ids": 1511,
        "indeed": false
    },
    {
        "number": 4936,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    temperatures = [int(i) for i in stdin.split()]\n    temperatures.sort()\n    d = temperatures[-1] - temperatures[0]\n    t = temperatures[-2] - temperatures[-1]\n    if d > t:\n        return str(d)\n    else:\n        return str(t)\n\nSample Input:\n5\n23 27 31 28 30\nSample Output:\n2 28\ndef",
        "test": "",
        "num_ids": 115,
        "indeed": false
    },
    {
        "number": 4937,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n == 1:\n        return str(a)\n    else:\n        return str(a) + solution(stdin +'')\n\nSample Input:\n3 6\n1 2 3\nSample Output:\n2\ndef",
        "test": "",
        "num_ids": 68,
        "indeed": false
    },
    {
        "number": 4938,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 100:\n        return str(n)\n    else:\n        return str(n - 100) + \"W\" + str(n - 100)\n",
        "test": "",
        "num_ids": 50,
        "indeed": false
    },
    {
        "number": 4939,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return 'error'\n    else:\n        return ''.join(map(str, range(n - k + 1, n + 1)))\n\nSample Output:\nerror\ndef",
        "test": "",
        "num_ids": 64,
        "indeed": false
    },
    {
        "number": 4940,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    swathers = [list(map(int, input().split())) for _ in range(n)]\n    swathers.sort(key=lambda x: x[0])\n    swathers.sort(key=lambda x: x[1])\n    swathers.sort(key=lambda x: x[2])\n    swathers.sort(key=lambda x: x[3])\n    swathers.sort(key=lambda x: x[4])\n    swathers.sort(key=lambda x: x[5])\n    swathers.sort(key=lambda x: x[6])\n    swathers.sort(key=lambda x: x[7])\n    swathers.sort(key=lambda x: x[8])\n    swathers.sort(key=lambda x: x[9])\n    swathers.sort(key=lambda x: x[10])\n    swathers.sort(key=lambda x: x[11])\n    swathers.sort(key=lambda x: x[12])\n    swathers.sort(key=lambda x: x[13])\n    swathers.sort(key=lambda x: x[14])\n    swathers.sort(key=lambda x: x[15])\n    swathers.sort(key=lambda x: x[16])\n    swathers.sort(key=lambda x: x[17])\n    swathers.sort(key=lambda x: x[18])\n    swathers.sort(key=lambda x: x[19])\n    swathers.sort(key=lambda x: x[20])\n    swathers.sort(key=lambda x: x[21])\n    swathers.sort(key=lambda x: x[22])\n    swathers.sort(key=lambda x: x[23])\n    swathers.sort(key=lambda x: x[24])\n    swathers.sort(key=lambda x: x[25])\n    swathers.sort(key=lambda x: x[26])\n    swathers.sort(key=lambda x: x[27])\n    swathers.sort(key=lambda x: x[28])\n    swathers.sort(key=lambda x: x[29])\n    swathers.sort(key=lambda x: x[30])\n    swathers.sort(key=lambda x: x[31])\n    swathers.sort(key=lambda x: x[32])\n    swathers.sort(key=lambda x: x[33])\n    swathers.sort(key=lambda x: x[34])\n    swathers.sort(key=lambda x: x[35])\n    swathers.sort(key=lambda x: x[36])\n    swathers.sort(key=lambda x: x[37])\n    swathers.sort(key=lambda x: x[38])\n    swathers.sort(key=lambda x: x[39])\n    swathers.sort(key=lambda x: x[40])\n    swathers.sort(key=lambda x: x[41])\n    swathers.sort(key=lambda x: x[42])\n    swathers.sort(key=lambda x: x[43])\n    swathers.sort(key=lambda x: x[44])\n    swathers.sort(key=lambda x: x[45])\n    swathers.sort(key=lambda x: x[46])\n    swathers.sort(key=lambda x: x[47])\n    swathers.sort(key=lambda x: x[48])\n    swathers.sort(key=lambda x: x[49])\n    swathers.sort(key=lambda x: x[50])\n    swathers.sort(key=lambda x: x[51])\n    swathers.sort(key=lambda x: x[52])\n    swathers.sort(key=lambda x: x[53])\n    swathers.sort(key=lambda x: x[54])\n    swathers.sort(key=lambda x: x[55])\n    swathers.sort(key=lambda x: x[56])\n    swathers.sort(key=lambda x: x[57])\n    swathers.sort(key=lambda x: x[58])\n    swathers.sort(key=lambda x: x[59])\n    swathers.sort(key=lambda x: x[60])\n    swathers.sort(key=lambda x: x[61])\n    swathers.sort(key=lambda x: x[62])\n    swathers.sort(key=lambda x: x[63])\n    swathers.sort(key=lambda x: x[64])\n    swathers.sort(key=lambda x: x[65])\n    swathers.sort(key=lambda x: x[66])\n    swathers.sort(key=lambda x: x[67])\n    swathers.sort(key=lambda x: x[68])\n    swathers.sort(key=lambda x: x[69])\n    swathers.sort(key=lambda x: x[70])\n    swathers.sort(key=lambda x: x[71])\n    swathers.sort(key=lambda x: x[72])\n    swathers.sort(key=lambda x: x[73])\n    swathers.sort(key=lambda x: x[74])\n    swathers.sort(key=lambda x: x[75])\n    swathers.sort(key=lambda x: x[76])\n    swathers.sort(key=lambda x: x[77])\n    swathers.sort(key=lambda x: x[78])\n    swathers.sort(key=lambda x: x[79])\n    swathers.sort(key=lambda x: x[80])\n    swathers.sort(key=lambda x: x[81])\n    swathers.sort(key=lambda x: x[82])\n    swathers.sort(key=lambda x: x[83])\n    swathers.sort(key=lambda x: x[84])\n    swathers.sort(key=lambda x: x[",
        "test": "",
        "num_ids": 1500,
        "indeed": false
    },
    {
        "number": 4941,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    dic = {}\n    for line in stdin.splitlines():\n        dic[line.split()[0]] = line.split()[1]\n    \n    def check(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return word\n    \n    def count(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_correct(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_incorrect(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_correct(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_incorrect(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_correct(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_incorrect(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_correct(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_incorrect(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_correct(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_incorrect(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_all_all_all_all_all(word):\n        if word in dic:\n            return dic[word]\n        else:\n            return 0\n    \n    def count_",
        "test": "",
        "num_ids": 1515,
        "indeed": false
    },
    {
        "number": 4942,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    trees = list(map(int, stdin.strip().split()))\n    trees.sort()\n    days = 0\n    for i in range(n):\n        days += trees[i]\n    return str(days)\n\nSample Input:\n4\n2 3 4 3\nSample Output:\n7\ndef",
        "test": "",
        "num_ids": 86,
        "indeed": false
    },
    {
        "number": 4943,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = [float(i) for i in stdin.split()]\n    y = [float(i) for i in stdin.split()]\n    x.sort()\n    y.sort()\n    x = [i - j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i * j for i, j in zip(x, y)]\n    x.sort()\n    y = [i * j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i + j for i, j in zip(x, y)]\n    x.sort()\n    y.sort()\n    x = [i",
        "test": "",
        "num_ids": 1448,
        "indeed": false
    },
    {
        "number": 4944,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:\n        return \"117\"\n    if n == 118:\n        return \"118\"\n    if n == 119:\n        return \"119\"\n    if n == 120:\n        return \"120\"\n    if n == 121:\n        return \"121\"\n    if n == 122:\n        return \"122\"\n    if n == 123:\n        return \"123\"\n    if n == 124:\n        return \"124\"\n    if n == 125:\n        return \"125\"\n    if n == 126:\n        return \"126\"\n    if n == 127:\n        return \"127\"\n    if n == 128:\n        return \"128\"\n    if n == 129:\n        return \"129\"\n    if n == 130:\n        return \"130\"\n    if n == 131:\n        return \"131\"\n    if n == 132:\n        return \"132\"\n    if n == 133:\n        return \"133\"\n    if n == 134:\n        return \"134\"\n    if n == 135:\n        return \"135\"\n    if n == 136:\n        return \"136\"\n    if n == 137:\n        return \"137\"\n    if n == 138:\n        return \"138\"\n    if n == 139:\n        return \"139\"",
        "test": "",
        "num_ids": 1816,
        "indeed": false
    },
    {
        "number": 4945,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, m, sigma = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    if m % 2 == 0:\n        m = m // 2\n    if sigma % 2 == 0:\n        sigma = sigma // 2\n    if a + b > m + sigma:\n        return str(a + b)\n    else:\n        return str(a + b + m + sigma)\n\nSample Output:\n34\nExplanation:\nThe maximum value of $R$ is 34.\n\nInput:\n3 1\n12 16\nOutput:\n34\nExplanation:\nThe maximum value of $R$ is 34.\n'''\n\ndef",
        "test": "",
        "num_ids": 170,
        "indeed": false
    },
    {
        "number": 4946,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    languages = [list(map(int, input().split())) for _ in range(n)]\n    answer = 0\n    for i in range(n):\n        for j in range(n):\n            if languages[i][j] == languages[j][i]:\n                answer += 1\n    return str(answer)\n\nSample Output:\n3\nExplanation:\nMargarethe has agreed that the awkwardness level of the proposed seating arrangement is $3$.\n\"\"\"\n\ndef",
        "test": "",
        "num_ids": 123,
        "indeed": false
    },
    {
        "number": 4947,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) * 1000)\n",
        "test": "",
        "num_ids": 14,
        "indeed": false
    },
    {
        "number": 4948,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    x, y, z = map(int, stdin.split())\n    if x + y + z == 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z < 100000:\n        return str(s)\n    if x + y + z > 100000:\n        return str(s)\n    if x + y + z",
        "test": "",
        "num_ids": 1484,
        "indeed": false
    },
    {
        "number": 4949,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, W, H = map(int, stdin.split())\n    matches = []\n    for _ in range(N):\n        matches.append(list(map(int, stdin.split())))\n    matches.sort(key=lambda x: (x[0], x[1]))\n    for match in matches:\n        if match[0] <= W and match[1] <= H:\n            print('DA')\n        else:\n            print('NE')\n    return ''",
        "test": "",
        "num_ids": 117,
        "indeed": false
    },
    {
        "number": 4950,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    t = list(map(int, stdin.strip().split()))\n    d = list(map(int, stdin.strip().split()))\n    t.sort()\n    d.sort()\n    for i in range(n):\n        if t[i] < d[i]:\n            t[i] = d[i]\n    return str(max(t))\n\nSample Input:\n2\n0 0\n7 42\nSample Output:\n6\ndef",
        "test": "",
        "num_ids": 121,
        "indeed": false
    },
    {
        "number": 4951,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return 'correct'\n    else:\n        return 'incorrect'\n\nSample Input:\n3\n-> ALICE\n-> BOB\nALICE BOB -> CARL\nSample Output:\nincorrect\ndef",
        "test": "",
        "num_ids": 67,
        "indeed": false
    },
    {
        "number": 4952,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    votes = []\n    for line in stdin:\n        votes.append(line.strip())\n    \n    candidates = []\n    for i in range(len(votes)):\n        candidates.append(votes[i].split(\" \"))\n    \n    candidates.sort(key=lambda x: x[1])\n    \n    for i in range(len(candidates)):\n        if candidates[i][1] == candidates[i][0]:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n        else:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n    \n    for i in range(len(candidates)):\n        if candidates[i][1] == candidates[i][0]:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n        else:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n    \n    for i in range(len(candidates)):\n        if candidates[i][1] == candidates[i][0]:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n        else:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n    \n    for i in range(len(candidates)):\n        if candidates[i][1] == candidates[i][0]:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n        else:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n    \n    for i in range(len(candidates)):\n        if candidates[i][1] == candidates[i][0]:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n        else:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n    \n    for i in range(len(candidates)):\n        if candidates[i][1] == candidates[i][0]:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n        else:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n    \n    for i in range(len(candidates)):\n        if candidates[i][1] == candidates[i][0]:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n        else:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n    \n    for i in range(len(candidates)):\n        if candidates[i][1] == candidates[i][0]:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n        else:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n    \n    for i in range(len(candidates)):\n        if candidates[i][1] == candidates[i][0]:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n        else:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n    \n    for i in range(len(candidates)):\n        if candidates[i][1] == candidates[i][0]:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n        else:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n    \n    for i in range(len(candidates)):\n        if candidates[i][1] == candidates[i][0]:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n        else:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n    \n    for i in range(len(candidates)):\n        if candidates[i][1] == candidates[i][0]:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n        else:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n    \n    for i in range(len(candidates)):\n        if candidates[i][1] == candidates[i][0]:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n        else:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n    \n    for i in range(len(candidates)):\n        if candidates[i][1] == candidates[i][0]:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n        else:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n    \n    for i in range(len(candidates)):\n        if candidates[i][1] == candidates[i][0]:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n        else:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n    \n    for i in range(len(candidates)):\n        if candidates[i][1] == candidates[i][0]:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n        else:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n    \n    for i in range(len(candidates)):\n        if candidates[i][1] == candidates[i][0]:\n            candidates[i][1] = candidates[i][0]\n            candidates[i][0] = \"Runoff\"\n        else:\n            candidates[i][1] = candidates[i][0]\n            cand",
        "test": "",
        "num_ids": 1680,
        "indeed": false
    },
    {
        "number": 4953,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(map(str, stdin.strip().split()))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    s = s.split(' ')\n    s = list(map(str, s))\n    s.sort()\n    s = '",
        "test": "",
        "num_ids": 1294,
        "indeed": false
    },
    {
        "number": 4954,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, B, H, W = map(int, stdin.split())\n    p = int(stdin.split()[0])\n    if p < 0 or p > 1000000:\n        return \"stay home\"\n    if p == 0:\n        return \"stay home\"\n    if p == 1:\n        return \"stay home\"\n    if p == 2:\n        return \"stay home\"\n    if p == 3:\n        return \"stay home\"\n    if p == 4:\n        return \"stay home\"\n    if p == 5:\n        return \"stay home\"\n    if p == 6:\n        return \"stay home\"\n    if p == 7:\n        return \"stay home\"\n    if p == 8:\n        return \"stay home\"\n    if p == 9:\n        return \"stay home\"\n    if p == 10:\n        return \"stay home\"\n    if p == 11:\n        return \"stay home\"\n    if p == 12:\n        return \"stay home\"\n    if p == 13:\n        return \"stay home\"\n    if p == 14:\n        return \"stay home\"\n    if p == 15:\n        return \"stay home\"\n    if p == 16:\n        return \"stay home\"\n    if p == 17:\n        return \"stay home\"\n    if p == 18:\n        return \"stay home\"\n    if p == 19:\n        return \"stay home\"\n    if p == 20:\n        return \"stay home\"\n    if p == 21:\n        return \"stay home\"\n    if p == 22:\n        return \"stay home\"\n    if p == 23:\n        return \"stay home\"\n    if p == 24:\n        return \"stay home\"\n    if p == 25:\n        return \"stay home\"\n    if p == 26:\n        return \"stay home\"\n    if p == 27:\n        return \"stay home\"\n    if p == 28:\n        return \"stay home\"\n    if p == 29:\n        return \"stay home\"\n    if p == 30:\n        return \"stay home\"\n    if p == 31:\n        return \"stay home\"\n    if p == 32:\n        return \"stay home\"\n    if p == 33:\n        return \"stay home\"\n    if p == 34:\n        return \"stay home\"\n    if p == 35:\n        return \"stay home\"\n    if p == 36:\n        return \"stay home\"\n    if p == 37:\n        return \"stay home\"\n    if p == 38:\n        return \"stay home\"\n    if p == 39:\n        return \"stay home\"\n    if p == 40:\n        return \"stay home\"\n    if p == 41:\n        return \"stay home\"\n    if p == 42:\n        return \"stay home\"\n    if p == 43:\n        return \"stay home\"\n    if p == 44:\n        return \"stay home\"\n    if p == 45:\n        return \"stay home\"\n    if p == 46:\n        return \"stay home\"\n    if p == 47:\n        return \"stay home\"\n    if p == 48:\n        return \"stay home\"\n    if p == 49:\n        return \"stay home\"\n    if p == 50:\n        return \"stay home\"\n    if p == 51:\n        return \"stay home\"\n    if p == 52:\n        return \"stay home\"\n    if p == 53:\n        return \"stay home\"\n    if p == 54:\n        return \"stay home\"\n    if p == 55:\n        return \"stay home\"\n    if p == 56:\n        return \"stay home\"\n    if p == 57:\n        return \"stay home\"\n    if p == 58:\n        return \"stay home\"\n    if p == 59:\n        return \"stay home\"\n    if p == 60:\n        return \"stay home\"\n    if p == 61:\n        return \"stay home\"\n    if p == 62:\n        return \"stay home\"\n    if p == 63:\n        return \"stay home\"\n    if p == 64:\n        return \"stay home\"\n    if p == 65:\n        return \"stay home\"\n    if p == 66:\n        return \"stay home\"\n    if p == 67:\n        return \"stay home\"\n    if p == 68:\n        return \"stay home\"\n    if p == 69:\n        return \"stay home\"\n    if p == 70:\n        return \"stay home\"\n    if p == 71:\n        return \"stay home\"\n    if p == 72:\n        return \"stay home\"\n    if p == 73:\n        return \"stay home\"\n    if p == 74:\n        return \"stay home\"\n    if p == 75:\n        return \"stay home\"\n    if p == 76:\n        return \"stay home\"\n    if p == 77:\n        return \"stay home\"\n    if p == 78:\n        return \"stay home\"\n    if p == 79:\n        return \"stay home\"\n    if p == 80:\n        return \"stay home\"\n    if p == 81:\n        return \"stay home\"\n    if p == 82:\n        return \"stay home\"\n    if p == 83:\n        return \"stay home\"\n    if p == 84:\n        return \"stay home\"\n    if p == 85:\n        return \"stay home\"\n    if p == 86:\n        return \"stay home\"\n    if p == 87:\n        return \"stay home\"\n    if p == 88:\n        return \"stay home\"\n    if p == 89:\n        return \"stay home\"\n    if p == 90:\n        return \"stay home\"\n    if p == 91:\n        return \"stay home\"\n    if p == 92:\n        return \"stay home\"\n    if p == 93:\n        return \"stay home\"\n    if p == 94:\n        return \"stay home\"\n    if p == 95:\n        return \"stay home\"\n    if p == 96:\n        return \"stay home\"\n    if p == 97:\n        return \"stay home\"\n    if p == 98:\n        return \"stay home\"\n    if p == 99:\n        return \"stay home\"\n    if p == 100:\n        return \"stay home\"\n    if p == 101:\n        return \"stay home\"\n    if p == 102:\n        return \"stay home\"\n    if p == 103:\n        return \"stay home\"\n    if p == 104:\n        return \"stay home\"\n    if p == 105:\n        return \"stay home\"\n    if p == 106:\n        return \"stay home\"\n    if p == 107:\n        return \"stay home\"\n    if p == 108:\n        return \"stay home\"\n    if p == 109:\n        return \"stay home\"\n    if p == 110:\n        return \"stay home\"\n    if p == 111:\n        return \"stay home\"\n    if p == 112:\n        return \"stay home\"\n    if p == 113:\n        return \"stay home\"\n    if p == 114:\n        return \"stay home\"\n    if p == 115:\n        return \"stay home\"\n    if p == 116:\n        return \"stay home\"\n    if p == 117:",
        "test": "",
        "num_ids": 1697,
        "indeed": false
    },
    {
        "number": 4955,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"none\"\n    if n == 1:\n        return \"A#\"\n    if n == 2:\n        return \"C# D#\"\n    if n == 3:\n        return \"C# D# F#\"\n    if n == 4:\n        return \"C# D# F# C# D#\"\n    if n == 5:\n        return \"C# D# F# C# D# F#\"\n    if n == 6:\n        return \"C# D# F# C# D# F# C# D#\"\n    if n == 7:\n        return \"C# D# F# C# D# F# C# D# F#\"\n    if n == 8:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 9:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 10:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 11:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 12:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 13:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 14:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 15:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 16:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 17:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 18:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 19:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 20:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 21:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 22:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 23:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 24:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 25:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 26:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 27:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 28:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 29:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 30:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 31:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 32:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 33:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 34:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 35:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 36:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 37:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 38:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 39:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 40:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 41:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 42:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 43:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 44:\n        return \"C# D# F# C# D# F# C# D# F# C# D#\"\n    if n == 45:\n        return \"C# D# F",
        "test": "",
        "num_ids": 1448,
        "indeed": false
    },
    {
        "number": 4956,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    for i in range(len(words)):\n        if words[i] in ['a', 'e', 'i', 'o', 'u']:\n            words[i] = 'ae'\n    return''.join(words)\n\nSample Output:\ndae ae ju traeligt va\ndef",
        "test": "",
        "num_ids": 106,
        "indeed": false
    },
    {
        "number": 4957,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(stdin[i:i+m]) for i in range(0, len(stdin), m)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = 'E'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    return ''.join(grid)\n",
        "test": "",
        "num_ids": 123,
        "indeed": false
    },
    {
        "number": 4958,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    heights = list(map(int, stdin.split()))\n    heights.sort()\n    return''.join(map(str, heights[::-1]))\n",
        "test": "",
        "num_ids": 42,
        "indeed": false
    },
    {
        "number": 4959,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,e,f,c = map(int,stdin.split())\n    if n<=1000 and f<=1000 and c<=2000:\n        return str(n)\n    else:\n        return '0'\n\nSample Input:\n5 0 3\nSample Output:\n0\ndef",
        "test": "",
        "num_ids": 71,
        "indeed": false
    },
    {
        "number": 4960,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return 'a'\n    if n == 11:\n        return 'b'\n    if n == 12:\n        return 'c'\n    if n == 13:\n        return 'd'\n    if n == 14:\n        return 'e'\n    if n == 15:\n        return 'f'\n    if n == 16:\n        return 'g'\n    if n == 17:\n        return 'h'\n    if n == 18:\n        return 'i'\n    if n == 19:\n        return 'j'\n    if n == 20:\n        return 'k'\n    if n == 21:\n        return 'l'\n    if n == 22:\n        return'm'\n    if n == 23:\n        return 'n'\n    if n == 24:\n        return 'o'\n    if n == 25:\n        return 'p'\n    if n == 26:\n        return 'q'\n    if n == 27:\n        return 'r'\n    if n == 28:\n        return's'\n    if n == 29:\n        return 't'\n    if n == 30:\n        return 'u'\n    if n == 31:\n        return 'v'\n    if n == 32:\n        return 'w'\n    if n == 33:\n        return 'x'\n    if n == 34:\n        return 'y'\n    if n == 35:\n        return 'z'\n    if n == 36:\n        return 'a'\n    if n == 37:\n        return 'b'\n    if n == 38:\n        return 'c'\n    if n == 39:\n        return 'd'\n    if n == 40:\n        return 'e'\n    if n == 41:\n        return 'f'\n    if n == 42:\n        return 'g'\n    if n == 43:\n        return 'h'\n    if n == 44:\n        return 'i'\n    if n == 45:\n        return 'j'\n    if n == 46:\n        return 'k'\n    if n == 47:\n        return 'l'\n    if n == 48:\n        return'm'\n    if n == 49:\n        return 'n'\n    if n == 50:\n        return 'o'\n    if n == 51:\n        return 'p'\n    if n == 52:\n        return 'q'\n    if n == 53:\n        return 'r'\n    if n == 54:\n        return's'\n    if n == 55:\n        return 't'\n    if n == 56:\n        return 'u'\n    if n == 57:\n        return 'v'\n    if n == 58:\n        return 'w'\n    if n == 59:\n        return 'x'\n    if n == 60:\n        return 'y'\n    if n == 61:\n        return 'z'\n    if n == 62:\n        return 'a'\n    if n == 63:\n        return 'b'\n    if n == 64:\n        return 'c'\n    if n == 65:\n        return 'd'\n    if n == 66:\n        return 'e'\n    if n == 67:\n        return 'f'\n    if n == 68:\n        return 'g'\n    if n == 69:\n        return 'h'\n    if n == 70:\n        return 'i'\n    if n == 71:\n        return 'j'\n    if n == 72:\n        return 'k'\n    if n == 73:\n        return 'l'\n    if n == 74:\n        return'm'\n    if n == 75:\n        return 'n'\n    if n == 76:\n        return 'o'\n    if n == 77:\n        return 'p'\n    if n == 78:\n        return 'q'\n    if n == 79:\n        return 'r'\n    if n == 80:\n        return's'\n    if n == 81:\n        return 't'\n    if n == 82:\n        return 'u'\n    if n == 83:\n        return 'v'\n    if n == 84:\n        return 'w'\n    if n == 85:\n        return 'x'\n    if n == 86:\n        return 'y'\n    if n == 87:\n        return 'z'\n    if n == 88:\n        return 'a'\n    if n == 89:\n        return 'b'\n    if n == 90:\n        return 'c'\n    if n == 91:\n        return 'd'\n    if n == 92:\n        return 'e'\n    if n == 93:\n        return 'f'\n    if n == 94:\n        return 'g'\n    if n == 95:\n        return 'h'\n    if n == 96:\n        return 'i'\n    if n == 97:\n        return 'j'\n    if n == 98:\n        return 'k'\n    if n == 99:\n        return 'l'\n    if n == 100:\n        return'm'\n    if n == 101:\n        return 'n'\n    if n == 102:\n        return 'o'\n    if n == 103:\n        return 'p'\n    if n == 104:\n        return 'q'\n    if n == 105:\n        return 'r'\n    if n == 106:\n        return's'\n    if n == 107:\n        return 't'\n    if n == 108:\n        return 'u'\n    if n == 109:\n        return 'v'\n    if n == 110:\n        return 'w'\n    if n == 111:\n        return 'x'\n    if n == 112:\n        return 'y'\n    if n == 113:\n        return 'z'\n    if n == 114:\n        return 'a'\n    if n == 115:\n        return 'b'\n    if n == 116:\n        return 'c'\n    if n == 117:\n        return 'd'\n    if n == 118:\n        return 'e'\n    if n == 119:\n        return 'f'\n    if n == 120:\n        return 'g'\n    if n == 121:\n        return 'h'\n    if n == 122:\n        return 'i'\n    if n == 123:\n        return 'j'\n    if n == 124:\n        return 'k'\n    if n == 125:\n        return 'l'\n    if n == 126:\n        return'm'\n    if n == 127:\n        return 'n'\n    if n == 128:\n        return 'o'\n    if n == 129:\n        return 'p'\n    if n == 130:\n        return 'q'\n    if n == 131:\n        return 'r'\n    if n == 132:\n        return's'\n    if n == 133:\n        return 't'\n    if n == 134:\n        return 'u'\n    if n == 135:\n        return 'v'\n    if n == 136:\n        return 'w",
        "test": "",
        "num_ids": 1779,
        "indeed": false
    },
    {
        "number": 4961,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, S = map(int, stdin.split())\n    if R == 0:\n        return '0'\n    if S == 0:\n        return '0'\n    if R == 1:\n        return '1'\n    if S == 1:\n        return '1'\n    if R == 2:\n        return '1'\n    if S == 2:\n        return '1'\n    if R == 3:\n        return '1'\n    if S == 3:\n        return '1'\n    if R == 4:\n        return '1'\n    if S == 4:\n        return '1'\n    if R == 5:\n        return '1'\n    if S == 5:\n        return '1'\n    if R == 6:\n        return '1'\n    if S == 6:\n        return '1'\n    if R == 7:\n        return '1'\n    if S == 7:\n        return '1'\n    if R == 8:\n        return '1'\n    if S == 8:\n        return '1'\n    if R == 9:\n        return '1'\n    if S == 9:\n        return '1'\n    if R == 10:\n        return '1'\n    if S == 10:\n        return '1'\n    if R == 11:\n        return '1'\n    if S == 11:\n        return '1'\n    if R == 12:\n        return '1'\n    if S == 12:\n        return '1'\n    if R == 13:\n        return '1'\n    if S == 13:\n        return '1'\n    if R == 14:\n        return '1'\n    if S == 14:\n        return '1'\n    if R == 15:\n        return '1'\n    if S == 15:\n        return '1'\n    if R == 16:\n        return '1'\n    if S == 16:\n        return '1'\n    if R == 17:\n        return '1'\n    if S == 17:\n        return '1'\n    if R == 18:\n        return '1'\n    if S == 18:\n        return '1'\n    if R == 19:\n        return '1'\n    if S == 19:\n        return '1'\n    if R == 20:\n        return '1'\n    if S == 20:\n        return '1'\n    if R == 21:\n        return '1'\n    if S == 21:\n        return '1'\n    if R == 22:\n        return '1'\n    if S == 22:\n        return '1'\n    if R == 23:\n        return '1'\n    if S == 23:\n        return '1'\n    if R == 24:\n        return '1'\n    if S == 24:\n        return '1'\n    if R == 25:\n        return '1'\n    if S == 25:\n        return '1'\n    if R == 26:\n        return '1'\n    if S == 26:\n        return '1'\n    if R == 27:\n        return '1'\n    if S == 27:\n        return '1'\n    if R == 28:\n        return '1'\n    if S == 28:\n        return '1'\n    if R == 29:\n        return '1'\n    if S == 29:\n        return '1'\n    if R == 30:\n        return '1'\n    if S == 30:\n        return '1'\n    if R == 31:\n        return '1'\n    if S == 31:\n        return '1'\n    if R == 32:\n        return '1'\n    if S == 32:\n        return '1'\n    if R == 33:\n        return '1'\n    if S == 33:\n        return '1'\n    if R == 34:\n        return '1'\n    if S == 34:\n        return '1'\n    if R == 35:\n        return '1'\n    if S == 35:\n        return '1'\n    if R == 36:\n        return '1'\n    if S == 36:\n        return '1'\n    if R == 37:\n        return '1'\n    if S == 37:\n        return '1'\n    if R == 38:\n        return '1'\n    if S == 38:\n        return '1'\n    if R == 39:\n        return '1'\n    if S == 39:\n        return '1'\n    if R == 40:\n        return '1'\n    if S == 40:\n        return '1'\n    if R == 41:\n        return '1'\n    if S == 41:\n        return '1'\n    if R == 42:\n        return '1'\n    if S == 42:\n        return '1'\n    if R == 43:\n        return '1'\n    if S == 43:\n        return '1'\n    if R == 44:\n        return '1'\n    if S == 44:\n        return '1'\n    if R == 45:\n        return '1'\n    if S == 45:\n        return '1'\n    if R == 46:\n        return '1'\n    if S == 46:\n        return '1'\n    if R == 47:\n        return '1'\n    if S == 47:\n        return '1'\n    if R == 48:\n        return '1'\n    if S == 48:\n        return '1'\n    if R == 49:\n        return '1'\n    if S == 49:\n        return '1'\n    if R == 50:\n        return '1'\n    if S == 50:\n        return '1'\n    if R == 51:\n        return '1'\n    if S == 51:\n        return '1'\n    if R == 52:\n        return '1'\n    if S == 52:\n        return '1'\n    if R == 53:\n        return '1'\n    if S == 53:\n        return '1'\n    if R == 54:\n        return '1'\n    if S == 54:\n        return '1'\n    if R == 55:\n        return '1'\n    if S == 55:\n        return '1'\n    if R == 56:\n        return '1'\n    if S == 56:\n        return '1'\n    if R == 57:\n        return '1'\n    if S == 57:\n        return '1'\n    if R == 58:\n        return '1'\n    if S == 58:\n        return '1'\n    if R == 59:\n        return '1'\n    if S == 59:\n        return '1'\n    if R == 60:\n        return '1'\n    if S == 60:\n        return '1'\n    if R == 61:\n        return '1'\n    if S == 61:\n        return '1'\n    if R == 62:\n        return '1'\n    if S == 62:\n        return '",
        "test": "",
        "num_ids": 1651,
        "indeed": false
    },
    {
        "number": 4962,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    A.sort()\n    B.sort()\n    A_i = 0\n    B_i = 0\n    while A_i < N and B_i < L:\n        if A[A_i] == B[B_i]:\n            A_i += 1\n            B_i += 1\n        else:\n            if A[A_i] < B[B_i]:\n                A_i += 1\n            else:\n                B_i += 1\n    if A_i == N:\n        return 'LADICA'\n    elif B_i == L:\n        return 'SMECE'\n    else:\n        return 'SMECE'\n",
        "test": "",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 4963,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    people = list(map(int, stdin.strip().split()))\n    people.sort()\n    return''.join(map(str, people))\n\nSample Input:\n2\n1\nSample Output:\n1 2\ndef",
        "test": "",
        "num_ids": 65,
        "indeed": false
    },
    {
        "number": 4964,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, H, L = map(int, stdin.split())\n    movie_list = []\n    for _ in range(N):\n        movie_list.append(int(stdin.split()[0]))\n    movie_list.sort()\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_list = [movie_list[0]] + movie_list\n    movie_list = movie_list[::-1]\n    movie_",
        "test": "",
        "num_ids": 1428,
        "indeed": false
    },
    {
        "number": 4965,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    t = list(map(int, stdin.strip().split()))\n    t.sort()\n    for i in range(n-1):\n        if t[i+1] - t[i] > 1:\n            t[i], t[i+1] = t[i+1], t[i]\n    return ''.join(map(str, t))\n\nSample Output:\n4 3 1\nExplanation:\nThe sequence is:\n1 3 4\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1\nThe sequence is:\n4 3 1",
        "test": "",
        "num_ids": 1589,
        "indeed": false
    },
    {
        "number": 4966,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n    t = t[:n]\n    t = t[::-1]\n    t = t[:k]\n    t = t[::-1]\n",
        "test": "",
        "num_ids": 1589,
        "indeed": false
    },
    {
        "number": 4967,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    grid = [list(map(str, input().strip())) for _ in range(n)]\n    \n    def get_distance(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_2(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_3(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_4(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_5(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_6(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_7(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_8(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_9(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_10(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_11(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_12(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_13(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_14(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_15(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_16(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_17(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_18(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_19(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_20(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_21(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_22(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_23(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_24(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_25(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_26(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_27(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_28(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_29(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_30(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_31(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_32(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_33(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_34(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_35(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_36(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_37(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_38(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_39(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_40(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_41(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_42(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_43(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_44(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_45(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_46(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_47(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_48(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_49(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_50(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_51(x, y):\n        return abs(x - y) + abs(x + y)\n    \n    def get_distance_52(x, y):\n        return abs(x",
        "test": "",
        "num_ids": 1634,
        "indeed": false
    },
    {
        "number": 4968,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S, R = map(int, stdin.split())\n    if N == 0 or S == 0 or R == 0:\n        return 0\n    if N == 1:\n        return S\n    if S == 1:\n        return R\n    if R == 1:\n        return S\n    if N == 2:\n        return S + R\n    if S == 2:\n        return R + S\n    if R == 2:\n        return S + R + N\n    if N == 3:\n        return S + R + N + S\n    if S == 3:\n        return R + S + N\n    if R == 3:\n        return S + R + N + S + R\n    if N == 4:\n        return S + R + N + S + R + N\n    if S == 4:\n        return R + S + N + S + R + N + S\n    if R == 4:\n        return S + R + N + S + R + N + S + R\n    if N == 5:\n        return S + R + N + S + R + N + S + R + N + S\n    if S == 5:\n        return R + S + N + S + R + N + S + R + N + S + R\n    if R == 5:\n        return S + R + N + S + R + N + S + R + N + S + R + N + S\n    if N == 6:\n        return S + R + N + S + R + N + S + R + N + S + R + N + S + R\n    if S == 6:\n        return R + S + N + S + R + N + S + R + N + S + R + N + S + R\n    if R == 6:\n        return S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S\n    if N == 7:\n        return S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R\n    if S == 7:\n        return R + S + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R\n    if R == 7:\n        return S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S\n    if N == 8:\n        return S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R\n    if S == 8:\n        return R + S + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R\n    if R == 8:\n        return S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S\n    if N == 9:\n        return S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R\n    if S == 9:\n        return R + S + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R\n    if R == 9:\n        return S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S\n    if N == 10:\n        return S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S\n    if S == 10:\n        return R + S + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R\n    if R == 10:\n        return S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S\n    if N == 11:\n        return S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R\n    if S == 11:\n        return R + S + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R\n    if R == 11:\n        return S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R\n    if N == 12:\n        return S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R\n    if S == 12:\n        return R + S + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R\n    if R == 12:\n        return S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R\n    if N == 13:\n        return S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R\n    if S == 13:\n        return R + S + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R + N + S + R\n    if R == 13:\n        return S +",
        "test": "",
        "num_ids": 1692,
        "indeed": false
    },
    {
        "number": 4969,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    if R < C:\n        return '0'\n    elif R == C:\n        return '1'\n    else:\n        return '0'\n",
        "test": "",
        "num_ids": 53,
        "indeed": false
    },
    {
        "number": 4970,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    courses = []\n    for _ in range(n):\n        courses.append(list(map(int, input().split())))\n    \n    courses.sort(key=lambda x: x[0])\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if courses[i][0] == courses[j][0]:\n                courses[i][1] += courses[j][1]\n                courses[j][1] = 0\n    \n    for i in range(n):\n        if courses[i][1] > courses[i][0]:\n            courses[i][1] = courses[i][0]\n    \n    return str(len(courses))\n",
        "test": "",
        "num_ids": 185,
        "indeed": false
    },
    {
        "number": 4971,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return None\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"2\"\n    if n == 4:\n        return \"3\"\n    if n == 5:\n        return \"4\"\n    if n == 6:\n        return \"5\"\n    if n == 7:\n        return \"6\"\n    if n == 8:\n        return \"7\"\n    if n == 9:\n        return \"8\"\n    if n == 10:\n        return \"9\"\n    if n == 11:\n        return \"10\"\n    if n == 12:\n        return \"11\"\n    if n == 13:\n        return \"12\"\n    if n == 14:\n        return \"13\"\n    if n == 15:\n        return \"14\"\n    if n == 16:\n        return \"15\"\n    if n == 17:\n        return \"16\"\n    if n == 18:\n        return \"17\"\n    if n == 19:\n        return \"18\"\n    if n == 20:\n        return \"19\"\n    if n == 21:\n        return \"20\"\n    if n == 22:\n        return \"21\"\n    if n == 23:\n        return \"22\"\n    if n == 24:\n        return \"23\"\n    if n == 25:\n        return \"24\"\n    if n == 26:\n        return \"25\"\n    if n == 27:\n        return \"26\"\n    if n == 28:\n        return \"27\"\n    if n == 29:\n        return \"28\"\n    if n == 30:\n        return \"29\"\n    if n == 31:\n        return \"30\"\n    if n == 32:\n        return \"31\"\n    if n == 33:\n        return \"32\"\n    if n == 34:\n        return \"33\"\n    if n == 35:\n        return \"34\"\n    if n == 36:\n        return \"35\"\n    if n == 37:\n        return \"36\"\n    if n == 38:\n        return \"37\"\n    if n == 39:\n        return \"38\"\n    if n == 40:\n        return \"39\"\n    if n == 41:\n        return \"40\"\n    if n == 42:\n        return \"41\"\n    if n == 43:\n        return \"42\"\n    if n == 44:\n        return \"43\"\n    if n == 45:\n        return \"44\"\n    if n == 46:\n        return \"45\"\n    if n == 47:\n        return \"46\"\n    if n == 48:\n        return \"47\"\n    if n == 49:\n        return \"48\"\n    if n == 50:\n        return \"49\"\n    if n == 51:\n        return \"50\"\n    if n == 52:\n        return \"51\"\n    if n == 53:\n        return \"52\"\n    if n == 54:\n        return \"53\"\n    if n == 55:\n        return \"54\"\n    if n == 56:\n        return \"55\"\n    if n == 57:\n        return \"56\"\n    if n == 58:\n        return \"57\"\n    if n == 59:\n        return \"58\"\n    if n == 60:\n        return \"59\"\n    if n == 61:\n        return \"60\"\n    if n == 62:\n        return \"61\"\n    if n == 63:\n        return \"62\"\n    if n == 64:\n        return \"63\"\n    if n == 65:\n        return \"64\"\n    if n == 66:\n        return \"65\"\n    if n == 67:\n        return \"66\"\n    if n == 68:\n        return \"67\"\n    if n == 69:\n        return \"68\"\n    if n == 70:\n        return \"69\"\n    if n == 71:\n        return \"70\"\n    if n == 72:\n        return \"71\"\n    if n == 73:\n        return \"72\"\n    if n == 74:\n        return \"73\"\n    if n == 75:\n        return \"74\"\n    if n == 76:\n        return \"75\"\n    if n == 77:\n        return \"76\"\n    if n == 78:\n        return \"77\"\n    if n == 79:\n        return \"78\"\n    if n == 80:\n        return \"79\"\n    if n == 81:\n        return \"80\"\n    if n == 82:\n        return \"81\"\n    if n == 83:\n        return \"82\"\n    if n == 84:\n        return \"83\"\n    if n == 85:\n        return \"84\"\n    if n == 86:\n        return \"85\"\n    if n == 87:\n        return \"86\"\n    if n == 88:\n        return \"87\"\n    if n == 89:\n        return \"88\"\n    if n == 90:\n        return \"89\"\n    if n == 91:\n        return \"90\"\n    if n == 92:\n        return \"91\"\n    if n == 93:\n        return \"92\"\n    if n == 94:\n        return \"93\"\n    if n == 95:\n        return \"94\"\n    if n == 96:\n        return \"95\"\n    if n == 97:\n        return \"96\"\n    if n == 98:\n        return \"97\"\n    if n == 99:\n        return \"98\"\n    if n == 100:\n        return \"99\"\n    if n == 101:\n        return \"100\"\n    if n == 102:\n        return \"101\"\n    if n == 103:\n        return \"102\"\n    if n == 104:\n        return \"103\"\n    if n == 105:\n        return \"104\"\n    if n == 106:\n        return \"105\"\n    if n == 107:\n        return \"106\"\n    if n == 108:\n        return \"107\"\n    if n == 109:\n        return \"108\"\n    if n == 110:\n        return \"109\"\n    if n == 111:\n        return \"110\"\n    if n == 112:\n        return \"111\"\n    if n == 113:\n        return \"112\"\n    if n == 114:\n        return \"113\"\n    if n == 115:\n        return \"114\"\n    if n == 116:\n        return \"115\"\n    if n == 117:\n        return \"116\"\n    if n == 118:\n        return \"117\"\n    if n == 119:\n        return \"118\"\n    if n == 120:\n        return \"119\"\n    if n == 121:\n        return \"120\"\n    if n == 122:\n        return \"121\"\n    if n == 123:\n        return \"122\"\n    if n == 124:\n        return \"123\"\n    if n == 125:\n        return \"124\"\n    if n == 126:\n        ",
        "test": "",
        "num_ids": 1641,
        "indeed": false
    },
    {
        "number": 4972,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    k = 0\n    while X > 0:\n        X = X // 10\n        k += 1\n    return str(k)\n\nSample Input:\n5\nSample Output:\n5\ndef",
        "test": "",
        "num_ids": 55,
        "indeed": false
    },
    {
        "number": 4973,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    board = [list(stdin.strip()) for _ in range(N)]\n    S = set(list(range(N)))\n    for r in range(N):\n        for c in range(N):\n            if board[r][c] == 'K':\n                board[r][c] = '#'\n                S.add((r, c))\n                for r2, c2 in S:\n                    board[r2][c2] = '.'\n                S.remove((r, c))\n    return str(len(S))\n\n-----Constraints-----\n1 <= N <= 10^2\n0 <= r, c < N\nboard[r][c] is either '.' or 'K'.\nboard[r][c] is a valid cell.\nboard[r][c] is not a blocked cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell.\nboard[r][c] is not a duplicate cell",
        "test": "",
        "num_ids": 1565,
        "indeed": false
    },
    {
        "number": 4974,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    booked = [list(map(int, input().split())) for _ in range(n)]\n    booked.sort(key=lambda x: x[0])\n    for i in range(n):\n        if booked[i][0] == r:\n            return str(i+1)\n    return 'too late'\n",
        "test": "",
        "num_ids": 93,
        "indeed": false
    },
    {
        "number": 4975,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    key = stdin.split()\n    key = [x.strip() for x in key]\n    key = [x for x in key if x!= '']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n    key = [x for x in key if x!='']\n",
        "test": "",
        "num_ids": 1192,
        "indeed": false
    },
    {
        "number": 4976,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    if x == y:\n        return \"The gopher cannot escape.\"\n    if x > y:\n        return \"The gopher cannot escape.\"\n    ",
        "test": "",
        "num_ids": 1598,
        "indeed": false
    },
    {
        "number": 4977,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, t = map(int, stdin.split())\n    if a == b == c == d == 0:\n        return 'N'\n    if a == c == d == 0:\n        return 'Y'\n    if a == b == c == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a == d == 0:\n        return 'N'\n    if a == b == 0:\n        return 'N'\n    if a == c == 0:\n        return 'N'\n    if a",
        "test": "",
        "num_ids": 1578,
        "indeed": false
    },
    {
        "number": 4978,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    grid = []\n    for _ in range(N):\n        grid.append(stdin.split())\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == '#':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'V'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i",
        "test": "",
        "num_ids": 1676,
        "indeed": false
    },
    {
        "number": 4979,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - 1)\n\nSample Input:\n1\nSample Output:\n1\ndef",
        "test": "",
        "num_ids": 28,
        "indeed": false
    },
    {
        "number": 4980,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 2:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 3:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 4:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 5:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 6:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 7:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 8:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 9:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 10:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 11:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 12:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 13:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 14:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 15:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 16:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 17:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 18:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 19:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 20:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 21:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 22:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 23:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 24:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 25:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 26:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 27:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 28:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 29:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 30:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 31:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 32:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 33:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 34:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 35:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 36:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 37:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 38:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 39:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 40:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 41:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 42:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 43:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 44:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 45:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 46:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 47:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 48:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 49:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 50:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 51:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 52:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 53:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 54:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 55:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 56:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 57:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 58:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 59:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 60:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 61:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 62:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 63:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 64:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 65:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 66:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 67:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 68:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 69:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 70:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 71:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 72:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 73:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 74:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 75:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 76:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 77:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 78:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 79:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 80:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 81:\n        return \"I must watch Star Wars with my daughter\"\n    if n == 82:\n        return \"I must watch Star Wars with my daughter",
        "test": "",
        "num_ids": 1650,
        "indeed": false
    },
    {
        "number": 4981,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    A = sorted(A)\n    B = sorted(B)\n    C = sorted(C)\n    return ''.join(A + B + C)\n\nSample Output:\n1 3 5\nABC\nExplanation:\nThe order of the numbers is:\n1, 3, 5\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B, C\nA, B",
        "test": "",
        "num_ids": 1828,
        "indeed": false
    },
    {
        "number": 4982,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    crowns = [int(x) for x in stdin.split()]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()\n    crowns = [crowns[i] for i in range(n)]\n    crowns.sort()",
        "test": "",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 4983,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    y = str(x)\n    for i in range(len(y)):\n        y[i] = str(int(y[i])*10)\n    return ''.join(y)\n",
        "test": "",
        "num_ids": 57,
        "indeed": false
    },
    {
        "number": 4984,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    grid = []\n    for _ in range(r):\n        grid.append(list(stdin.split()))\n    \n    def is_land(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'L':\n                    return False\n        return True\n    \n    def is_water(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'W':\n                    return False\n        return True\n    \n    def is_cloud(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'C':\n                    return False\n        return True\n    \n    def is_grid(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'L':\n                    return False\n        return True\n    \n    def is_path(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'W':\n                    return False\n        return True\n    \n    def is_grid_with_path(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'C':\n                    return False\n        return True\n    \n    def is_grid_with_path_and_land(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'L':\n                    return False\n        return True\n    \n    def is_grid_with_path_and_water(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'W':\n                    return False\n        return True\n    \n    def is_grid_with_path_and_cloud(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'C':\n                    return False\n        return True\n    \n    def is_grid_with_path_and_land_and_water(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'L':\n                    return False\n        return True\n    \n    def is_grid_with_path_and_land_and_cloud(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'W':\n                    return False\n        return True\n    \n    def is_grid_with_path_and_land_and_water_and_cloud(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'C':\n                    return False\n        return True\n    \n    def is_grid_with_path_and_land_and_water_and_cloud_and_land(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'L':\n                    return False\n        return True\n    \n    def is_grid_with_path_and_land_and_water_and_cloud_and_land_and_water(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'W':\n                    return False\n        return True\n    \n    def is_grid_with_path_and_land_and_water_and_cloud_and_land_and_water_and_cloud(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'C':\n                    return False\n        return True\n    \n    def is_grid_with_path_and_land_and_water_and_cloud_and_land_and_water_and_cloud(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'L':\n                    return False\n        return True\n    \n    def is_grid_with_path_and_land_and_water_and_cloud_and_land_and_water_and_cloud(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'W':\n                    return False\n        return True\n    \n    def is_grid_with_path_and_land_and_water_and_cloud_and_land_and_water_and_cloud(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'C':\n                    return False\n        return True\n    \n    def is_grid_with_path_and_land_and_water_and_cloud_and_land_and_water_and_cloud(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'L':\n                    return False\n        return True\n    \n    def is_grid_with_path_and_land_and_water_and_cloud_and_land_and_water_and_cloud(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'W':\n                    return False\n        return True\n    \n    def is_grid_with_path_and_land_and_water_and_cloud_and_land_and_water_and_cloud(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'C':\n                    return False\n        return True\n    \n    def is_grid_with_path_and_land_and_water_and_cloud_and_land_and_water_and_cloud(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'L':\n                    return False\n        return True\n    \n    def is_grid_with_path_and_land_and_water_and_cloud_and_land_and_water_and_cloud(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 'W':\n                    return False\n        return True\n    \n    def is_grid_with_path_and_land_and_water_and_cloud_and_land_and_water_and_cloud(grid, r, c):\n        for i in range(r):\n            for j in range(c):\n                ",
        "test": "",
        "num_ids": 1712,
        "indeed": false
    },
    {
        "number": 4985,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, B = map(int, stdin.split())\n    hand = []\n    for _ in range(N):\n        hand.append(list(map(int, stdin.split())))\n    hand.sort(key=lambda x: x[0])\n    for i in range(N):\n        if hand[i][0] == B:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 0:\n            hand[i][0] = 1\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 0:\n            hand[i][0] = 1\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 0:\n            hand[i][0] = 1\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0] == 1:\n            hand[i][0] = 0\n    for i in range(N):\n        if hand[i][0",
        "test": "",
        "num_ids": 1536,
        "indeed": false
    },
    {
        "number": 4986,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    t = stdin.split()\n    for i in range(len(s)):\n        s[i] = s[i].lower()\n    for i in range(len(t)):\n        t[i] = t[i].lower()\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                s[i] = t[j]\n    return ''.join(s)\n\nSample Output:\nse\ndef",
        "test": "",
        "num_ids": 133,
        "indeed": false
    },
    {
        "number": 4987,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c, k = map(int, stdin.split())\n    d = 10**9 + 7\n    m = 10**9 + 7\n    \n    def solve(n, c, k):\n        if n == 0:\n            return 0\n        \n        if n == 1:\n            return c\n        \n        if n == 2:\n            return m\n        \n        if n == 3:\n            return c + m\n        \n        if n == 4:\n            return c + m + k\n        \n        if n == 5:\n            return c + m + k + k\n        \n        if n == 6:\n            return c + m + k + k + k\n        \n        if n == 7:\n            return c + m + k + k + k + k\n        \n        if n == 8:\n            return c + m + k + k + k + k + k\n        \n        if n == 9:\n            return c + m + k + k + k + k + k + k\n        \n        if n == 10:\n            return c + m + k + k + k + k + k + k + k\n        \n        if n == 11:\n            return c + m + k + k + k + k + k + k + k + k + k\n        \n        if n == 12:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 13:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 14:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 15:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 16:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 17:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 18:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 19:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 20:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 21:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 22:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 23:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 24:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 25:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 26:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 27:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 28:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 29:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 30:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 31:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 32:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 33:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 34:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 35:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 36:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k + k\n        \n        if n == 37:\n            return c + m + k + k + k + k + k + k + k + k + k + k + k + k + k + k",
        "test": "",
        "num_ids": 1698,
        "indeed": false
    },
    {
        "number": 4988,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    else:\n        return str(n % 10) + solution(str(n // 10))\n\nSample Input:\n3\n1\n2\n3\nSample Output:\n1\n2\n6\ndef",
        "test": "",
        "num_ids": 69,
        "indeed": false
    },
    {
        "number": 4989,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    answer = 0\n    for i in range(n):\n        answer += a[i] * b[i]\n    return str(answer)\n\nSample Output:\n4\nExplanation:\nAlice and Bob are playing optimally.\nBob and Alice are playing optimally.\nAlice and Bob are playing optimally.\nBob and Alice are playing optimally.\nAlice and Bob are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally.\nBob and Alice are playing optimally",
        "test": "",
        "num_ids": 1661,
        "indeed": false
    },
    {
        "number": 4990,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, k, g = map(int, stdin.split())\n    days = 0\n    while b >= k:\n        days += 1\n        b -= k\n    while g >= k:\n        days += 1\n        g -= k\n    return str(days)\n\nSample Output:\n2\nExplanation:\nThe troll will be found in the first group of knights, and will have to wait for the next group of knights to be found.\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= b, k, g <= 10^5\n\n-----Time Limit: 1 sec\n-----Memory Limit: 10^9\n\n-----Example 1:\nInput\n3 2 1\nOutput\n2\nExplanation\nThe troll will be found in the first group of knights, and will have to wait for the next group of knights to be found.\n\n-----Example 2:\nInput\n3 2 1\nOutput\n1\nExplanation\nThe troll will be found in the first group of knights, and will have to wait for the next group of knights to be found.\n\n-----Example 3:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 4:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 5:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Constraints:\n1 <= stdin.length <= 10^5\n1 <= b, k, g <= 10^5\n\n-----Time Limit: 1 sec\n-----Memory Limit: 10^9\n\n-----Example 1:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 2:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 3:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 4:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 5:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Constraints:\n1 <= stdin.length <= 10^5\n1 <= b, k, g <= 10^5\n\n-----Time Limit: 1 sec\n-----Memory Limit: 10^9\n\n-----Example 1:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 2:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 3:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 4:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 5:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Constraints:\n1 <= stdin.length <= 10^5\n1 <= b, k, g <= 10^5\n\n-----Time Limit: 1 sec\n-----Memory Limit: 10^9\n\n-----Example 1:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 2:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 3:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 4:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 5:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Constraints:\n1 <= stdin.length <= 10^5\n1 <= b, k, g <= 10^5\n\n-----Time Limit: 1 sec\n-----Memory Limit: 10^9\n\n-----Example 1:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 2:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 3:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 4:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 5:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Constraints:\n1 <= stdin.length <= 10^5\n1 <= b, k, g <= 10^5\n\n-----Time Limit: 1 sec\n-----Memory Limit: 10^9\n\n-----Example 1:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 2:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 3:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 4:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 5:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Constraints:\n1 <= stdin.length <= 10^5\n1 <= b, k, g <= 10^5\n\n-----Time Limit: 1 sec\n-----Memory Limit: 10^9\n\n-----Example 1:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 2:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 3:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 4:\nInput\n3 2 1\nOutput\n0\nExplanation\nThe troll will not be found in any group of knights.\n\n-----Example 5:\nInput\n",
        "test": "",
        "num_ids": 1586,
        "indeed": false
    },
    {
        "number": 4991,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114",
        "test": "",
        "num_ids": 1490,
        "indeed": false
    },
    {
        "number": 4992,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(map(int, stdin.split()))\n    s.sort()\n    if len(s) == 1:\n        return s[0]\n    if len(s) == 2:\n        return s[0] + s[1]\n    if len(s) == 3:\n        return s[0] + s[1] + s[2]\n    if len(s) == 4:\n        return s[0] + s[1] + s[2] + s[3]\n    if len(s) == 5:\n        return s[0] + s[1] + s[2] + s[3] + s[4]\n    if len(s) == 6:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n    if len(s) == 7:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6]\n    if len(s) == 8:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7]\n    if len(s) == 9:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8]\n    if len(s) == 10:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9]\n    if len(s) == 11:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10]\n    if len(s) == 12:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11]\n    if len(s) == 13:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12]\n    if len(s) == 14:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13]\n    if len(s) == 15:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14]\n    if len(s) == 16:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15]\n    if len(s) == 17:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16]\n    if len(s) == 18:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17]\n    if len(s) == 19:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18]\n    if len(s) == 20:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18] + s[19]\n    if len(s) == 21:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18] + s[19] + s[20]\n    if len(s) == 22:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18] + s[19]",
        "test": "",
        "num_ids": 1550,
        "indeed": false
    },
    {
        "number": 4993,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, N = map(int, stdin.split())\n    w_list = list(map(str, stdin.split()))\n    w_list.sort()\n    for i in range(N):\n        if w_list[i] == 'left_oar':\n            w_list[i] = 'right_oar'\n        elif w_list[i] == 'right_oar':\n            w_list[i] = 'left_oar'\n    w_list = ''.join(w_list)\n    return w_list\n",
        "test": "",
        "num_ids": 134,
        "indeed": false
    },
    {
        "number": 4994,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:\n        return \"117\"\n    if n == 118:\n        return \"118\"\n    if n == 119:\n        return \"119\"\n    if n == 120:\n        return \"120\"\n    if n == 121:\n        return \"121\"\n    if n == 122:\n        return \"122\"\n    if n == 123:\n        return \"123\"\n    if n == 124:\n        return \"124\"\n    if n == 125:\n        return \"125\"\n    if n == 126:\n        return \"126\"\n    if n == 127:\n        return \"127\"\n    if n == 128:\n        return \"128\"\n    if n == 129:\n        return \"129\"\n    if n == 130:\n        return \"130\"\n    if n == 131:\n        return \"131\"\n    if n == 132:\n        return \"132\"\n    if n == 133:\n        return \"133\"\n    if n == 134:\n        return \"134\"\n    if n == 135:\n        return \"135\"\n    if n == 136:\n        return \"136\"\n    if n == 137:\n        return \"137\"\n    if n == 138:\n        return \"138\"\n    if n == 139:\n        return \"139\"\n    if n == 140:\n        return \"140\"\n    if n == 141:\n        return \"141\"\n    if n == 142:\n        return \"142\"\n    if n == 143:\n        return \"143\"\n    if n == 144:\n        return \"144\"\n    if n == 145:\n        return",
        "test": "",
        "num_ids": 1906,
        "indeed": false
    },
    {
        "number": 4995,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return str(int(round(m/60, 0)))\n    else:\n        return \"measurement error\"\n\nSample Input:\n1\n1 60\nSample Output:\n1.0\ndef",
        "test": "",
        "num_ids": 70,
        "indeed": false
    },
    {
        "number": 4996,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    message = stdin.split()\n    key = stdin.split()\n    \n    for i in range(len(message)):\n        message[i] = message[i].upper()\n    \n    for i in range(len(key)):\n        key[i] = key[i].upper()\n    \n    for i in range(len(message)):\n        for j in range(len(key)):\n            if message[i] == key[j]:\n                message[i] = chr(ord(message[i]) - j)\n    \n    return ''.join(message)\n\n-----Constraints-----\n1 <= len(message) <= 200\n1 <= len(key) <= 200\nAll the characters in the message and key are uppercase.\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(n)\n\n-----Constraints-----\n1 <= len(message) <= 200\n1 <= len(key) <= 200\n\n-----Input Format-----\nThe first line contains the message and the second line contains the key.\n\n-----Output Format-----\nPrint the decrypted message.\n\n-----Sample Input 1-----\nCPMCRYY\nALBERTA\nSample Output 1:\nCALGARY\ndef",
        "test": "",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 4997,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    cups = list(map(int, stdin.strip().split()))\n    cups.sort()\n    answer = 0\n    for i in range(n):\n        if cups[i] == 1:\n            answer += 1\n        elif cups[i] == 2:\n            answer += 2\n        elif cups[i] == 3:\n            answer += 3\n    return str(answer)\n\nSample Output:\n3\ndef",
        "test": "",
        "num_ids": 114,
        "indeed": false
    },
    {
        "number": 4998,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A == 0:\n        return str(C*D)\n    if B == 0:\n        return str(C*D)\n    if C == 0:\n        return str(D*D)\n    if D == 0:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        return str(C*D)\n    if B > C:\n        return str(D*D)\n    if C > D:\n        return str(D*D)\n    if A > B:\n        ",
        "test": "",
        "num_ids": 1772,
        "indeed": false
    },
    {
        "number": 4999,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % 2 == 0:\n        return str(a // 2)\n    else:\n        return str(a + 1)\n\nSample Input:\n100 100\nSample Output:\n2\ndef",
        "test": "",
        "num_ids": 62,
        "indeed": false
    }
]